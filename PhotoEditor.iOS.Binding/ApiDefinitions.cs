using System;
using AVFoundation;
using AudioToolbox;
using AudioUnit;
using CloudKit;
using Contacts;
using CoreAnimation;
using CoreData;
using CoreFoundation;
using CoreImage;
using CoreLocation;
using CoreMidi;
using Foundation;
using GLKit;
using Intents;
using Metal;
using MetalKit;
using ModelIO;
using ObjCRuntime;
using OpenGLES;
using UIKit;
using PassKit;
using CoreGraphics;

namespace PhotoEditor
{

	// @interface PESDK : NSObject
	[iOS(9, 0)]
	[BaseType(typeof(NSObject))]
	interface PESDK
	{
		// +(void)unlockWithLicenseAt:(NSURL * _Nonnull)url;
		[Static]
		[Export("unlockWithLicenseAt:")]
		void UnlockWithLicenseAt(NSUrl url);

		// @property (readonly, nonatomic, strong, class) PESDKAnalytics * _Nonnull analytics;
		[Static]
		[Export("analytics", ArgumentSemantic.Strong)]
		PESDKAnalytics Analytics { get; }

		// @property (nonatomic, strong, class) id<PESDKProgressView> _Nonnull progressView;
		[Static]
		[Export("progressView", ArgumentSemantic.Strong)]
		PESDKProgressView ProgressView { get; set; }

		// @property (copy, nonatomic, class) NSDictionary<NSString *,NSDictionary<NSString *,NSString *> *> * _Nullable localizationDictionary;
		[Static]
		[NullAllowed, Export("localizationDictionary", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSDictionary<NSString, NSString>> LocalizationDictionary { get; set; }

		// @property (copy, nonatomic, class) NSString * _Nullable (^ _Nullable)(NSString * _Nonnull) localizationBlock;
		[Static]
		[NullAllowed, Export("localizationBlock", ArgumentSemantic.Copy)]
		Func<NSString, NSString> LocalizationBlock { get; set; }

		// @property (copy, nonatomic, class) UIImage * _Nullable (^ _Nullable)(NSString * _Nonnull) bundleImageBlock;
		[Static]
		[NullAllowed, Export("bundleImageBlock", ArgumentSemantic.Copy)]
		Func<NSString, UIImage> BundleImageBlock { get; set; }

		// @property (copy, nonatomic, class) PESDKToolbarItem * _Nullable (^ _Nullable)(UIViewController * _Nonnull, PESDKToolbarItem * _Nullable) toolbarItemBlock;
		[Static]
		[NullAllowed, Export("toolbarItemBlock", ArgumentSemantic.Copy)]
		Func<UIViewController, PESDKToolbarItem, PESDKToolbarItem> ToolbarItemBlock { get; set; }

		// +(BOOL)replaceClass:(Class _Nonnull)builtinClass with:(Class _Nonnull)replacingClass error:(NSError * _Nullable * _Nullable)error;
		[Static]
		[Export("replaceClass:with:error:")]
		bool ReplaceClass(Class builtinClass, Class replacingClass, [NullAllowed] out NSError error);
	}

	// @protocol PESDKPhotoEditViewControllerDelegate
	[iOS(9, 0)]
	[Protocol, Model]
	interface PESDKPhotoEditViewControllerDelegate
	{
		// @required -(void)photoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController didSaveImage:(UIImage * _Nonnull)image imageAsData:(NSData * _Nonnull)data;
		[Abstract]
		[Export("photoEditViewController:didSaveImage:imageAsData:")]
		void PhotoEditViewController(PESDKPhotoEditViewController photoEditViewController, UIImage image, NSData data);

		// @required -(void)photoEditViewControllerDidFailToGeneratePhoto:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController;
		[Abstract]
		[Export("photoEditViewControllerDidFailToGeneratePhoto:")]
		void PhotoEditViewControllerDidFailToGeneratePhoto(PESDKPhotoEditViewController photoEditViewController);

		// @required -(void)photoEditViewControllerDidCancel:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController;
		[Abstract]
		[Export("photoEditViewControllerDidCancel:")]
		void PhotoEditViewControllerDidCancel(PESDKPhotoEditViewController photoEditViewController);

		// @optional -(void)photoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController willPresentToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
		[Export("photoEditViewController:willPresentToolController:")]
		void PhotoEditViewController(PESDKPhotoEditViewController photoEditViewController, PESDKPhotoEditToolController toolController);

		// @optional -(void)photoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController didPresentToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
		[Export("photoEditViewController:didPresentToolController:")]
		void PhotoEditViewController(PESDKPhotoEditViewController photoEditViewController, PESDKPhotoEditToolController toolController);

		// @optional -(void)photoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController willDismissToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
		[Export("photoEditViewController:willDismissToolController:")]
		void PhotoEditViewController(PESDKPhotoEditViewController photoEditViewController, PESDKPhotoEditToolController toolController);

		// @optional -(void)photoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController didDismissToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
		[Export("photoEditViewController:didDismissToolController:")]
		void PhotoEditViewController(PESDKPhotoEditViewController photoEditViewController, PESDKPhotoEditToolController toolController);
	}

	// @interface PESDKCameraViewControllerOptionsBuilder : NSObject
	[iOS(9, 0)]
	[BaseType(typeof(NSObject))]
	interface PESDKCameraViewControllerOptionsBuilder
	{
		// @property (nonatomic, strong) UIColor * _Nullable backgroundColor;
		[NullAllowed, Export("backgroundColor", ArgumentSemantic.Strong)]
		UIColor BackgroundColor { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) cancelButtonConfigurationClosure;
		[NullAllowed, Export("cancelButtonConfigurationClosure", ArgumentSemantic.Copy)]
		Action<PESDKButton> CancelButtonConfigurationClosure { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) flashButtonConfigurationClosure;
		[NullAllowed, Export("flashButtonConfigurationClosure", ArgumentSemantic.Copy)]
		Action<PESDKButton> FlashButtonConfigurationClosure { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) switchCameraButtonConfigurationClosure;
		[NullAllowed, Export("switchCameraButtonConfigurationClosure", ArgumentSemantic.Copy)]
		Action<PESDKButton> SwitchCameraButtonConfigurationClosure { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) cameraRollButtonConfigurationClosure;
		[NullAllowed, Export("cameraRollButtonConfigurationClosure", ArgumentSemantic.Copy)]
		Action<PESDKButton> CameraRollButtonConfigurationClosure { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) photoActionButtonConfigurationClosure;
		[NullAllowed, Export("photoActionButtonConfigurationClosure", ArgumentSemantic.Copy)]
		Action<PESDKButton> PhotoActionButtonConfigurationClosure { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) filterSelectorButtonConfigurationClosure;
		[NullAllowed, Export("filterSelectorButtonConfigurationClosure", ArgumentSemantic.Copy)]
		Action<PESDKButton> FilterSelectorButtonConfigurationClosure { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(UILabel * _Nonnull) timeLabelConfigurationClosure;
		[NullAllowed, Export("timeLabelConfigurationClosure", ArgumentSemantic.Copy)]
		Action<UILabel> TimeLabelConfigurationClosure { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) filterIntensitySliderConfigurationClosure;
		[NullAllowed, Export("filterIntensitySliderConfigurationClosure", ArgumentSemantic.Copy)]
		Action<PESDKSlider> FilterIntensitySliderConfigurationClosure { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull, enum RecordingMode) recordingModeButtonConfigurationClosure;
		[NullAllowed, Export("recordingModeButtonConfigurationClosure", ArgumentSemantic.Copy)]
		Action<PESDKButton, RecordingMode> RecordingModeButtonConfigurationClosure { get; set; }

		// @property (nonatomic) BOOL cropToSquare;
		[Export("cropToSquare")]
		bool CropToSquare { get; set; }

		// @property (nonatomic) NSInteger maximumVideoLength;
		[Export("maximumVideoLength")]
		int MaximumVideoLength { get; set; }

		// @property (nonatomic) BOOL tapToFocusEnabled;
		[Export("tapToFocusEnabled")]
		bool TapToFocusEnabled { get; set; }

		// @property (nonatomic) BOOL showCancelButton;
		[Export("showCancelButton")]
		bool ShowCancelButton { get; set; }

		// @property (nonatomic) BOOL showCameraRoll;
		[Export("showCameraRoll")]
		bool ShowCameraRoll { get; set; }

		// @property (nonatomic) BOOL showFilters;
		[Export("showFilters")]
		bool ShowFilters { get; set; }

		// @property (nonatomic) BOOL showFilterIntensitySlider;
		[Export("showFilterIntensitySlider")]
		bool ShowFilterIntensitySlider { get; set; }

		// @property (nonatomic) CGFloat initialFilterIntensity;
		[Export("initialFilterIntensity")]
		nfloat InitialFilterIntensity { get; set; }

		// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable videoOutputSettings;
		[NullAllowed, Export("videoOutputSettings", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> VideoOutputSettings { get; set; }

		// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable audioOutputSettings;
		[NullAllowed, Export("audioOutputSettings", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> AudioOutputSettings { get; set; }

		// @property (nonatomic) AVFileType _Nonnull videoRecordingFileType;
		[Export("videoRecordingFileType")]
		string VideoRecordingFileType { get; set; }

		// @property (copy, nonatomic) NSString * _Nonnull videoRecordingFileExtension;
		[Export("videoRecordingFileExtension")]
		string VideoRecordingFileExtension { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(AVAssetWriter * _Nonnull) assetWriterConfigurationClosure;
		[NullAllowed, Export("assetWriterConfigurationClosure", ArgumentSemantic.Copy)]
		Action<AVAssetWriter> AssetWriterConfigurationClosure { get; set; }

		// @property (nonatomic) BOOL includeUserLocation;
		[Export("includeUserLocation")]
		bool IncludeUserLocation { get; set; }
	}

	// @interface PESDKPhotoEditViewController : PESDKViewController
	[iOS(9, 0)]
	[BaseType(typeof(PESDKViewController))]
	interface PESDKPhotoEditViewController
	{
		// @property (readonly, nonatomic, strong) PESDKMainFlowController * _Null_unspecified flowController;
		[Export("flowController", ArgumentSemantic.Strong)]
		PESDKMainFlowController FlowController { get; }

		// @property (readonly, nonatomic, strong) PESDKPhotoEditPreviewController * _Nonnull photoEditPreviewController;
		[Export("photoEditPreviewController", ArgumentSemantic.Strong)]
		PESDKPhotoEditPreviewController PhotoEditPreviewController { get; }

		// @property (readonly, nonatomic, strong) UIView * _Nonnull containerView;
		[Export("containerView", ArgumentSemantic.Strong)]
		UIView ContainerView { get; }

		// @property (readonly, nonatomic, strong) PESDKToolbar * _Nonnull toolbar;
		[Export("toolbar", ArgumentSemantic.Strong)]
		PESDKToolbar Toolbar { get; }

		// @property (nonatomic, strong) PESDKToolbarItem * _Nonnull toolbarItem;
		[Export("toolbarItem", ArgumentSemantic.Strong)]
		PESDKToolbarItem ToolbarItem { get; set; }

		// @property (readonly, nonatomic, strong) PESDKConfiguration * _Nonnull configuration;
		[Export("configuration", ArgumentSemantic.Strong)]
		PESDKConfiguration Configuration { get; }

		// @property (nonatomic, strong) PESDKUndoController * _Nonnull undoController;
		[Export("undoController", ArgumentSemantic.Strong)]
		PESDKUndoController UndoController { get; set; }

		// @property (readonly, nonatomic, strong) PESDKAssetManager * _Nonnull assetManager;
		[Export("assetManager", ArgumentSemantic.Strong)]
		PESDKAssetManager AssetManager { get; }

		[Wrap("WeakDelegate")]
		[NullAllowed]
		PESDKPhotoEditViewControllerDelegate Delegate { get; set; }

		// @property (nonatomic, weak) id<PESDKPhotoEditViewControllerDelegate> _Nullable delegate;
		[NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// @property (readonly, nonatomic) BOOL hasChanges;
		[Export("hasChanges")]
		bool HasChanges { get; }

		// @property (readonly, copy, nonatomic) NSData * _Nullable serializedSettings __attribute__((deprecated("Use `serializedSettings(withImageData:)` instead.")));
		[NullAllowed, Export("serializedSettings", ArgumentSemantic.Copy)]
		NSData SerializedSettings { get; }

		// -(NSData * _Nullable)serializedSettingsWithImageData:(BOOL)includeImageData __attribute__((warn_unused_result));
		[Export("serializedSettingsWithImageData:")]
		[return: NullAllowed]
		NSData SerializedSettingsWithImageData(bool includeImageData);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
		[Export("initWithCoder:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSCoder aDecoder);

		// -(void)viewDidLoad;
		[Export("viewDidLoad")]
		void ViewDidLoad();

		// -(void)viewWillAppear:(BOOL)animated;
		[Export("viewWillAppear:")]
		void ViewWillAppear(bool animated);

		// -(void)viewDidAppear:(BOOL)animated;
		[Export("viewDidAppear:")]
		void ViewDidAppear(bool animated);

		// -(void)viewWillDisappear:(BOOL)animated;
		[Export("viewWillDisappear:")]
		void ViewWillDisappear(bool animated);

		// -(void)viewDidDisappear:(BOOL)animated;
		[Export("viewDidDisappear:")]
		void ViewDidDisappear(bool animated);

		// -(void)updateViewConstraints;
		[Export("updateViewConstraints")]
		void UpdateViewConstraints();

		// -(void)willMoveToParentViewController:(UIViewController * _Nullable)parent;
		[Export("willMoveToParentViewController:")]
		void WillMoveToParentViewController([NullAllowed] UIViewController parent);

		// @property (readonly, nonatomic) BOOL prefersStatusBarHidden;
		[Export("prefersStatusBarHidden")]
		bool PrefersStatusBarHidden { get; }

		// @property (readonly, nonatomic) UIStatusBarStyle preferredStatusBarStyle;
		[Export("preferredStatusBarStyle")]
		UIStatusBarStyle PreferredStatusBarStyle { get; }

		// @property (readonly, nonatomic) BOOL shouldAutomaticallyForwardAppearanceMethods;
		[Export("shouldAutomaticallyForwardAppearanceMethods")]
		bool ShouldAutomaticallyForwardAppearanceMethods { get; }

		// @property (readonly, nonatomic) UIRectEdge preferredScreenEdgesDeferringSystemGestures;
		[Export("preferredScreenEdgesDeferringSystemGestures")]
		UIRectEdge PreferredScreenEdgesDeferringSystemGestures { get; }

		// @property (readonly, nonatomic, strong) PESDKOverlayButton * _Nullable undoButton;
		[NullAllowed, Export("undoButton", ArgumentSemantic.Strong)]
		PESDKOverlayButton UndoButton { get; }

		// @property (readonly, nonatomic, strong) PESDKOverlayButton * _Nullable redoButton;
		[NullAllowed, Export("redoButton", ArgumentSemantic.Strong)]
		PESDKOverlayButton RedoButton { get; }

		// @property (readonly, copy, nonatomic) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
		[Export("overlayButtons", ArgumentSemantic.Copy)]
		PESDKOverlayButton[] OverlayButtons { get; }

		// -(void)presentToolFor:(PESDKToolMenuItem * _Nonnull)toolMenuItem;
		[Export("presentToolFor:")]
		void PresentToolFor(PESDKToolMenuItem toolMenuItem);

		// -(void)renderHighResolutionImage;
		[Export("renderHighResolutionImage")]
		void RenderHighResolutionImage();

		// @property (readonly, copy, nonatomic) NSArray<PESDKPhotoEditToolController *> * _Nonnull viewControllers;
		[Export("viewControllers", ArgumentSemantic.Copy)]
		PESDKPhotoEditToolController[] ViewControllers { get; }

		// -(void)pushViewController:(PESDKPhotoEditToolController * _Nonnull)viewController animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
		[Export("pushViewController:animated:completion:")]
		void PushViewController(PESDKPhotoEditToolController viewController, bool animated, [NullAllowed] Action completion);

		// -(PESDKPhotoEditToolController * _Nullable)popViewControllerAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
		[Export("popViewControllerAnimated:completion:")]
		[return: NullAllowed]
		PESDKPhotoEditToolController PopViewControllerAnimated(bool animated, [NullAllowed] Action completion);
	}

	// @interface PESDKSticker : NSObject
	[iOS(9, 0)]
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface PESDKSticker
	{
		// @property (readonly, copy, nonatomic) NSURL * _Nonnull imageURL;
		[Export("imageURL", ArgumentSemantic.Copy)]
		NSUrl ImageURL { get; }

		// @property (readonly, copy, nonatomic) NSURL * _Nullable thumbnailURL;
		[NullAllowed, Export("thumbnailURL", ArgumentSemantic.Copy)]
		NSUrl ThumbnailURL { get; }

		// @property (readonly, nonatomic) enum PESDKStickerTintMode tintMode;
		[Export("tintMode")]
		PESDKStickerTintMode TintMode { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
		[Export("identifier")]
		string Identifier { get; }

		// @property (nonatomic) BOOL allowBrightnessAdjustment;
		[Export("allowBrightnessAdjustment")]
		bool AllowBrightnessAdjustment { get; set; }

		// @property (nonatomic) BOOL allowContrastAdjustment;
		[Export("allowContrastAdjustment")]
		bool AllowContrastAdjustment { get; set; }

		// @property (nonatomic) BOOL allowSaturationAdjustment;
		[Export("allowSaturationAdjustment")]
		bool AllowSaturationAdjustment { get; set; }

		// -(instancetype _Nonnull)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL identifier:(NSString * _Nonnull)identifier;
		[Export("initWithImageURL:thumbnailURL:identifier:")]
		IntPtr Constructor(NSUrl imageURL, [NullAllowed] NSUrl thumbnailURL, string identifier);

		// -(instancetype _Nonnull)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL tintMode:(enum PESDKStickerTintMode)tintMode identifier:(NSString * _Nonnull)identifier __attribute__((objc_designated_initializer));
		[Export("initWithImageURL:thumbnailURL:tintMode:identifier:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSUrl imageURL, [NullAllowed] NSUrl thumbnailURL, PESDKStickerTintMode tintMode, string identifier);

		// +(PESDKSticker * _Nullable)withIdentifier:(NSString * _Nonnull)identifier __attribute__((warn_unused_result));
		[Static]
		[Export("withIdentifier:")]
		[return: NullAllowed]
		PESDKSticker WithIdentifier(string identifier);

		// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
		[Static]
		[Export("new")]
		PESDKSticker New();
	}

	// @interface PESDKStickerCategory : NSObject
	[iOS(9, 0)]
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface PESDKStickerCategory
	{
		// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
		[Export("title")]
		string Title { get; }

		// @property (readonly, copy, nonatomic) NSURL * _Nonnull imageURL;
		[Export("imageURL", ArgumentSemantic.Copy)]
		NSUrl ImageURL { get; }

		// @property (readonly, copy, nonatomic) NSArray<PESDKSticker *> * _Nonnull stickers;
		[Export("stickers", ArgumentSemantic.Copy)]
		PESDKSticker[] Stickers { get; }

		// -(instancetype _Nonnull)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers __attribute__((objc_designated_initializer));
		[Export("initWithTitle:imageURL:stickers:")]
		[DesignatedInitializer]
		IntPtr Constructor(string title, NSUrl imageURL, PESDKSticker[] stickers);

		// @property (copy, nonatomic, class) NSArray<PESDKStickerCategory *> * _Nonnull all;
		[Static]
		[Export("all", ArgumentSemantic.Copy)]
		PESDKStickerCategory[] All { get; set; }

		// +(NSArray<PESDKStickerCategory *> * _Nonnull)createDefaultStickerCategories __attribute__((warn_unused_result));
		[Static]
		[Export("createDefaultStickerCategories")]
		[Verify(MethodToProperty)]
		PESDKStickerCategory[] CreateDefaultStickerCategories { get; }

		// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
		[Static]
		[Export("new")]
		PESDKStickerCategory New();
	}

	// @interface PESDKConfiguration : NSObject
	[iOS(9, 0)]
	[BaseType(typeof(NSObject))]
	interface PESDKConfiguration
	{
		// @property (readonly, nonatomic, strong) UIColor * _Nonnull backgroundColor;
		[Export("backgroundColor", ArgumentSemantic.Strong)]
		UIColor BackgroundColor { get; }

		// @property (readonly, nonatomic, strong) UIColor * _Nonnull menuBackgroundColor;
		[Export("menuBackgroundColor", ArgumentSemantic.Strong)]
		UIColor MenuBackgroundColor { get; }

		// @property (readonly, nonatomic, strong) PESDKCameraViewControllerOptions * _Nonnull cameraViewControllerOptions;
		[Export("cameraViewControllerOptions", ArgumentSemantic.Strong)]
		PESDKCameraViewControllerOptions CameraViewControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKPhotoEditViewControllerOptions * _Nonnull photoEditViewControllerOptions;
		[Export("photoEditViewControllerOptions", ArgumentSemantic.Strong)]
		PESDKPhotoEditViewControllerOptions PhotoEditViewControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKFilterToolControllerOptions * _Nonnull filterToolControllerOptions;
		[Export("filterToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKFilterToolControllerOptions FilterToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKOverlayToolControllerOptions * _Nonnull overlayToolControllerOptions;
		[Export("overlayToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKOverlayToolControllerOptions OverlayToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKStickerToolControllerOptions * _Nonnull stickerToolControllerOptions;
		[Export("stickerToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKStickerToolControllerOptions StickerToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKStickerOptionsToolControllerOptions * _Nonnull stickerOptionsToolControllerOptions;
		[Export("stickerOptionsToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKStickerOptionsToolControllerOptions StickerOptionsToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKColorToolControllerOptions * _Nonnull stickerColorToolControllerOptions;
		[Export("stickerColorToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKColorToolControllerOptions StickerColorToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKTransformToolControllerOptions * _Nonnull transformToolControllerOptions;
		[Export("transformToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKTransformToolControllerOptions TransformToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKFocusToolControllerOptions * _Nonnull focusToolControllerOptions;
		[Export("focusToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKFocusToolControllerOptions FocusToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKTextToolControllerOptions * _Nonnull textToolControllerOptions;
		[Export("textToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKTextToolControllerOptions TextToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) IMGLTextOptionsToolControllerOptions * _Nonnull textOptionsToolControllerOptions;
		[Export("textOptionsToolControllerOptions", ArgumentSemantic.Strong)]
		IMGLTextOptionsToolControllerOptions TextOptionsToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKTextFontToolControllerOptions * _Nonnull textFontToolControllerOptions;
		[Export("textFontToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKTextFontToolControllerOptions TextFontToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKTextColorToolControllerOptions * _Nonnull textColorToolControllerOptions;
		[Export("textColorToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKTextColorToolControllerOptions TextColorToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKAdjustToolControllerOptions * _Nonnull adjustToolControllerOptions;
		[Export("adjustToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKAdjustToolControllerOptions AdjustToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKBrushToolControllerOptions * _Nonnull brushToolControllerOptions;
		[Export("brushToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKBrushToolControllerOptions BrushToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKBrushColorToolControllerOptions * _Nonnull brushColorToolControllerOptions;
		[Export("brushColorToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKBrushColorToolControllerOptions BrushColorToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKFrameToolControllerOptions * _Nonnull frameToolControllerOptions;
		[Export("frameToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKFrameToolControllerOptions FrameToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKTextDesignToolControllerOptions * _Nonnull textDesignToolControllerOptions;
		[Export("textDesignToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKTextDesignToolControllerOptions TextDesignToolControllerOptions { get; }

		// @property (readonly, nonatomic, strong) PESDKTextDesignOptionsToolControllerOptions * _Nonnull textDesignOptionsToolControllerOptions;
		[Export("textDesignOptionsToolControllerOptions", ArgumentSemantic.Strong)]
		PESDKTextDesignOptionsToolControllerOptions TextDesignOptionsToolControllerOptions { get; }

		// -(instancetype _Nonnull)initWithBuilder:(void (^ _Nonnull)(PESDKConfigurationBuilder * _Nonnull))builder __attribute__((objc_designated_initializer));
		[Export("initWithBuilder:")]
		[DesignatedInitializer]
		IntPtr Constructor(Action<PESDKConfigurationBuilder> builder);
	}

	// @interface PESDKConfigurationBuilder : NSObject
	[iOS(9, 0)]
	[BaseType(typeof(NSObject))]
	interface PESDKConfigurationBuilder
	{
		// @property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
		[Export("backgroundColor", ArgumentSemantic.Strong)]
		UIColor BackgroundColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nonnull menuBackgroundColor;
		[Export("menuBackgroundColor", ArgumentSemantic.Strong)]
		UIColor MenuBackgroundColor { get; set; }

		// -(void)configureCameraViewController:(void (^ _Nonnull)(PESDKCameraViewControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureCameraViewController:")]
		void ConfigureCameraViewController(Action<PESDKCameraViewControllerOptionsBuilder> builder);

		// -(void)configurePhotoEditorViewController:(void (^ _Nonnull)(PESDKPhotoEditViewControllerOptionsBuilder * _Nonnull))builder;
		[Export("configurePhotoEditorViewController:")]
		void ConfigurePhotoEditorViewController(Action<PESDKPhotoEditViewControllerOptionsBuilder> builder);

		// -(void)configureFilterToolController:(void (^ _Nonnull)(PESDKFilterToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureFilterToolController:")]
		void ConfigureFilterToolController(Action<PESDKFilterToolControllerOptionsBuilder> builder);

		// -(void)configureOverlayToolController:(void (^ _Nonnull)(PESDKOverlayToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureOverlayToolController:")]
		void ConfigureOverlayToolController(Action<PESDKOverlayToolControllerOptionsBuilder> builder);

		// -(void)configureStickerToolController:(void (^ _Nonnull)(PESDKStickerToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureStickerToolController:")]
		void ConfigureStickerToolController(Action<PESDKStickerToolControllerOptionsBuilder> builder);

		// -(void)configureStickerOptionsToolController:(void (^ _Nonnull)(PESDKStickerOptionsToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureStickerOptionsToolController:")]
		void ConfigureStickerOptionsToolController(Action<PESDKStickerOptionsToolControllerOptionsBuilder> builder);

		// -(void)configureStickerColorToolController:(void (^ _Nonnull)(PESDKColorToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureStickerColorToolController:")]
		void ConfigureStickerColorToolController(Action<PESDKColorToolControllerOptionsBuilder> builder);

		// -(void)configureFocusToolController:(void (^ _Nonnull)(PESDKFocusToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureFocusToolController:")]
		void ConfigureFocusToolController(Action<PESDKFocusToolControllerOptionsBuilder> builder);

		// -(void)transformToolControllerOptions:(void (^ _Nonnull)(PESDKTransformToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("transformToolControllerOptions:")]
		void TransformToolControllerOptions(Action<PESDKTransformToolControllerOptionsBuilder> builder);

		// -(void)configureTextToolController:(void (^ _Nonnull)(PESDKTextToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureTextToolController:")]
		void ConfigureTextToolController(Action<PESDKTextToolControllerOptionsBuilder> builder);

		// -(void)configureTextOptionsToolController:(void (^ _Nonnull)(PESDKTextOptionsToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureTextOptionsToolController:")]
		void ConfigureTextOptionsToolController(Action<PESDKTextOptionsToolControllerOptionsBuilder> builder);

		// -(void)configureTextFontToolController:(void (^ _Nonnull)(PESDKTextFontToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureTextFontToolController:")]
		void ConfigureTextFontToolController(Action<PESDKTextFontToolControllerOptionsBuilder> builder);

		// -(void)configureTextColorToolController:(void (^ _Nonnull)(PESDKTextColorToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureTextColorToolController:")]
		void ConfigureTextColorToolController(Action<PESDKTextColorToolControllerOptionsBuilder> builder);

		// -(void)configureAdjustToolController:(void (^ _Nonnull)(PESDKAdjustToolControllerOptionsBuilder * _Nonnull))builder __attribute__((availability(ios, introduced=9.0)));
		[iOS(9, 0)]
		[Export("configureAdjustToolController:")]
		void ConfigureAdjustToolController(Action<PESDKAdjustToolControllerOptionsBuilder> builder);

		// -(void)configureBrushToolController:(void (^ _Nonnull)(PESDKBrushToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureBrushToolController:")]
		void ConfigureBrushToolController(Action<PESDKBrushToolControllerOptionsBuilder> builder);

		// -(void)configureBrushColorToolController:(void (^ _Nonnull)(PESDKBrushColorToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureBrushColorToolController:")]
		void ConfigureBrushColorToolController(Action<PESDKBrushColorToolControllerOptionsBuilder> builder);

		// -(void)configureTransformToolController:(void (^ _Nonnull)(PESDKTransformToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureTransformToolController:")]
		void ConfigureTransformToolController(Action<PESDKTransformToolControllerOptionsBuilder> builder);

		// -(void)configureFrameToolController:(void (^ _Nonnull)(PESDKFrameToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureFrameToolController:")]
		void ConfigureFrameToolController(Action<PESDKFrameToolControllerOptionsBuilder> builder);

		// -(void)configureTextDesignToolController:(void (^ _Nonnull)(PESDKTextDesignToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureTextDesignToolController:")]
		void ConfigureTextDesignToolController(Action<PESDKTextDesignToolControllerOptionsBuilder> builder);

		// -(void)configureTextDesignOptionsToolController:(void (^ _Nonnull)(PESDKTextDesignOptionsToolControllerOptionsBuilder * _Nonnull))builder;
		[Export("configureTextDesignOptionsToolController:")]
		void ConfigureTextDesignOptionsToolController(Action<PESDKTextDesignOptionsToolControllerOptionsBuilder> builder);
	}

	// @interface PESDKPhoto : NSObject
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface PESDKPhoto
	{
		// @property (readonly, copy, nonatomic) NSURL * _Nullable url;
		[NullAllowed, Export("url", ArgumentSemantic.Copy)]
		NSUrl Url { get; }

		// @property (readonly, copy, nonatomic) NSData * _Nullable data;
		[NullAllowed, Export("data", ArgumentSemantic.Copy)]
		NSData Data { get; }

		// @property (readonly, nonatomic, strong) UIImage * _Nullable image;
		[NullAllowed, Export("image", ArgumentSemantic.Strong)]
		UIImage Image { get; }

		// @property (readonly, nonatomic) CGSize size;
		[Export("size")]
		CGSize Size { get; }

		// -(instancetype _Nonnull)initWithUrl:(NSURL * _Nonnull)url __attribute__((objc_designated_initializer));
		[Export("initWithUrl:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSUrl url);

		// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data __attribute__((objc_designated_initializer));
		[Export("initWithData:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSData data);

		// -(instancetype _Nonnull)initWithImage:(UIImage * _Nonnull)image __attribute__((objc_designated_initializer));
		[Export("initWithImage:")]
		[DesignatedInitializer]
		IntPtr Constructor(UIImage image);

		// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
		[Static]
		[Export("new")]
		PESDKPhoto New();
	}

	// @interface PESDKPhotoEditMenuItem : NSObject
	[iOS(9, 0)]
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface PESDKPhotoEditMenuItem
	{
		// @property (readonly, nonatomic, strong) PESDKToolMenuItem * _Nullable toolMenuItem;
		[NullAllowed, Export("toolMenuItem", ArgumentSemantic.Strong)]
		PESDKToolMenuItem ToolMenuItem { get; }

		// @property (readonly, nonatomic, strong) PESDKActionMenuItem * _Nullable actionMenuItem;
		[NullAllowed, Export("actionMenuItem", ArgumentSemantic.Strong)]
		PESDKActionMenuItem ActionMenuItem { get; }

		// @property (readonly, copy, nonatomic, class) NSArray<PESDKPhotoEditMenuItem *> * _Nonnull defaultItems;
		[Static]
		[Export("defaultItems", ArgumentSemantic.Copy)]
		PESDKPhotoEditMenuItem[] DefaultItems { get; }

		// -(instancetype _Nullable)initWithToolMenuItem:(PESDKToolMenuItem * _Nullable)toolMenuItem __attribute__((objc_designated_initializer));
		[Export("initWithToolMenuItem:")]
		[DesignatedInitializer]
		IntPtr Constructor([NullAllowed] PESDKToolMenuItem toolMenuItem);

		// -(instancetype _Nullable)initWithActionMenuItem:(PESDKActionMenuItem * _Nullable)actionMenuItem __attribute__((objc_designated_initializer));
		[Export("initWithActionMenuItem:")]
		[DesignatedInitializer]
		IntPtr Constructor([NullAllowed] PESDKActionMenuItem actionMenuItem);

		// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
		[Static]
		[Export("new")]
		PESDKPhotoEditMenuItem New();
	}

	// @interface PESDKPhotoEditModel : NSObject
	[iOS(9, 0)]
	[BaseType(typeof(NSObject))]
	interface PESDKPhotoEditModel
	{
		// -(instancetype _Nullable)initWithDeserializedFrom:(NSData * _Nonnull)data toImage:(UIImage * _Nullable)image __attribute__((deprecated("Use `init?(serializedData:referenceSize:)` instead."))) __attribute__((objc_designated_initializer));
		[Export("initWithDeserializedFrom:toImage:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSData data, [NullAllowed] UIImage image);

		// -(instancetype _Nullable)initWithSerializedData:(NSData * _Nonnull)data referenceSize:(CGSize)referenceSize __attribute__((objc_designated_initializer));
		[Export("initWithSerializedData:referenceSize:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSData data, CGSize referenceSize);

		// @property (nonatomic, strong) PESDKAdjustmentModel * _Nonnull adjustmentModel;
		[Export("adjustmentModel", ArgumentSemantic.Strong)]
		PESDKAdjustmentModel AdjustmentModel { get; set; }

		// @property (nonatomic, strong) PESDKEffectFilterModel * _Nonnull effectFilterModel;
		[Export("effectFilterModel", ArgumentSemantic.Strong)]
		PESDKEffectFilterModel EffectFilterModel { get; set; }

		// @property (nonatomic, strong) PESDKFocusModel * _Nonnull focusModel;
		[Export("focusModel", ArgumentSemantic.Strong)]
		PESDKFocusModel FocusModel { get; set; }

		// @property (nonatomic, strong) PESDKOverlayModel * _Nonnull overlayModel;
		[Export("overlayModel", ArgumentSemantic.Strong)]
		PESDKOverlayModel OverlayModel { get; set; }

		// @property (copy, nonatomic) NSArray<PESDKSpriteModel *> * _Nonnull spriteModels;
		[Export("spriteModels", ArgumentSemantic.Copy)]
		PESDKSpriteModel[] SpriteModels { get; set; }

		// @property (nonatomic, strong) PESDKTransformModel * _Nonnull transformModel;
		[Export("transformModel", ArgumentSemantic.Strong)]
		PESDKTransformModel TransformModel { get; set; }

		// @property (nonatomic) BOOL isAutoEnhancementEnabled;
		[Export("isAutoEnhancementEnabled")]
		bool IsAutoEnhancementEnabled { get; set; }
	}

	// @interface PESDKStickerToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	[iOS(9, 0)]
	[BaseType(typeof(PESDKToolControllerOptionsBuilder))]
	interface PESDKStickerToolControllerOptionsBuilder
	{
		// @property (copy, nonatomic) void (^ _Nullable)(PESDKSticker * _Nonnull) addedStickerClosure;
		[NullAllowed, Export("addedStickerClosure", ArgumentSemantic.Copy)]
		Action<PESDKSticker> AddedStickerClosure { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(PESDKIconBorderedCollectionViewCell * _Nonnull, PESDKStickerCategory * _Nonnull) stickerCategoryButtonConfigurationClosure;
		[NullAllowed, Export("stickerCategoryButtonConfigurationClosure", ArgumentSemantic.Copy)]
		Action<PESDKIconBorderedCollectionViewCell, PESDKStickerCategory> StickerCategoryButtonConfigurationClosure { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(PESDKIconCollectionViewCell * _Nonnull, PESDKSticker * _Nonnull) stickerButtonConfigurationClosure;
		[NullAllowed, Export("stickerButtonConfigurationClosure", ArgumentSemantic.Copy)]
		Action<PESDKIconCollectionViewCell, PESDKSticker> StickerButtonConfigurationClosure { get; set; }

		// @property (nonatomic) CGSize stickerPreviewSize;
		[Export("stickerPreviewSize", ArgumentSemantic.Assign)]
		CGSize StickerPreviewSize { get; set; }

		// @property (nonatomic) NSInteger defaultStickerCategoryIndex;
		[Export("defaultStickerCategoryIndex")]
		int DefaultStickerCategoryIndex { get; set; }
	}

	//// @protocol NSObject
	//[Protocol, Model]
	//interface NSObject
	//{
	//	// @required -(BOOL)isEqual:(id)object;
	//	[Abstract]
	//	[Export ("isEqual:")]
	//	bool IsEqual (NSObject @object);

	//	// @required @property (readonly) NSUInteger hash;
	//	[Abstract]
	//	[Export ("hash")]
	//	nuint Hash { get; }

	//	// @required @property (readonly) Class superclass;
	//	[Abstract]
	//	[Export ("superclass")]
	//	Class Superclass { get; }

	//	// @required -(Class)class;
	//	[Abstract]
	//	[Export ("class")]
	//	[Verify (MethodToProperty)]
	//	Class Class { get; }

	//	// @required -(instancetype)self;
	//	[Abstract]
	//	[Export ("self")]
	//	NSObject Self ();

	//	// @required -(id)performSelector:(SEL)aSelector;
	//	[Abstract]
	//	[Export ("performSelector:")]
	//	NSObject PerformSelector (Selector aSelector);

	//	// @required -(id)performSelector:(SEL)aSelector withObject:(id)object;
	//	[Abstract]
	//	[Export ("performSelector:withObject:")]
	//	NSObject PerformSelector (Selector aSelector, NSObject @object);

	//	// @required -(id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;
	//	[Abstract]
	//	[Export ("performSelector:withObject:withObject:")]
	//	NSObject PerformSelector (Selector aSelector, NSObject object1, NSObject object2);

	//	// @required -(BOOL)isProxy;
	//	[Abstract]
	//	[Export ("isProxy")]
	//	[Verify (MethodToProperty)]
	//	bool IsProxy { get; }

	//	// @required -(BOOL)isKindOfClass:(Class)aClass;
	//	[Abstract]
	//	[Export ("isKindOfClass:")]
	//	bool IsKindOfClass (Class aClass);

	//	// @required -(BOOL)isMemberOfClass:(Class)aClass;
	//	[Abstract]
	//	[Export ("isMemberOfClass:")]
	//	bool IsMemberOfClass (Class aClass);

	//	// @required -(BOOL)conformsToProtocol:(Protocol *)aProtocol;
	//	[Abstract]
	//	[Export ("conformsToProtocol:")]
	//	bool ConformsToProtocol (Protocol aProtocol);

	//	// @required -(BOOL)respondsToSelector:(SEL)aSelector;
	//	[Abstract]
	//	[Export ("respondsToSelector:")]
	//	bool RespondsToSelector (Selector aSelector);

	//	// @required -(instancetype)retain;
	//	[Abstract]
	//	[Export ("retain")]
	//	NSObject Retain ();

	//	// @required -(void)release;
	//	[Abstract]
	//	[Export ("release")]
	//	void Release ();

	//	// @required -(instancetype)autorelease;
	//	[Abstract]
	//	[Export ("autorelease")]
	//	NSObject Autorelease ();

	//	// @required -(NSUInteger)retainCount;
	//	[Abstract]
	//	[Export ("retainCount")]
	//	[Verify (MethodToProperty)]
	//	nuint RetainCount { get; }

	//	// @required -(struct _NSZone *)zone;
	//	[Abstract]
	//	[Export ("zone")]
	//	[Verify (MethodToProperty)]
	//	unsafe _NSZone* Zone { get; }

	//	// @required @property (readonly, copy) NSString * description;
	//	[Abstract]
	//	[Export ("description")]
	//	string Description { get; }

	//	// @optional @property (readonly, copy) NSString * debugDescription;
	//	[Export ("debugDescription")]
	//	string DebugDescription { get; }
	//}

	//// @interface NSObject <NSObject>
	//[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSObject
	//{
	//	// +(void)load;
	//	[Static]
	//	[Export ("load")]
	//	void Load ();

	//	// +(void)initialize;
	//	[Static]
	//	[Export ("initialize")]
	//	void Initialize ();

	//	// +(instancetype)new;
	//	[Static]
	//	[Export ("new")]
	//	NSObject New ();

	//	// +(instancetype)allocWithZone:(struct _NSZone *)zone;
	//	[Static]
	//	[Export ("allocWithZone:")]
	//	unsafe NSObject AllocWithZone (_NSZone* zone);

	//	// +(instancetype)alloc;
	//	[Static]
	//	[Export ("alloc")]
	//	NSObject Alloc ();

	//	// -(void)dealloc;
	//	[Export ("dealloc")]
	//	void Dealloc ();

	//	// -(void)finalize __attribute__((deprecated("Objective-C garbage collection is no longer supported")));
	//	[Export ("finalize")]
	//	void Finalize ();

	//	// -(id)copy;
	//	[Export ("copy")]
	//	[Verify (MethodToProperty)]
	//	NSObject Copy { get; }

	//	// -(id)mutableCopy;
	//	[Export ("mutableCopy")]
	//	[Verify (MethodToProperty)]
	//	NSObject MutableCopy { get; }

	//	// +(id)copyWithZone:(struct _NSZone *)zone;
	//	[Static]
	//	[Export ("copyWithZone:")]
	//	unsafe NSObject CopyWithZone (_NSZone* zone);

	//	// +(id)mutableCopyWithZone:(struct _NSZone *)zone;
	//	[Static]
	//	[Export ("mutableCopyWithZone:")]
	//	unsafe NSObject MutableCopyWithZone (_NSZone* zone);

	//	// +(BOOL)instancesRespondToSelector:(SEL)aSelector;
	//	[Static]
	//	[Export ("instancesRespondToSelector:")]
	//	bool InstancesRespondToSelector (Selector aSelector);

	//	// +(BOOL)conformsToProtocol:(Protocol *)protocol;
	//	[Static]
	//	[Export ("conformsToProtocol:")]
	//	bool ConformsToProtocol (Protocol protocol);

	//	// -(IMP)methodForSelector:(SEL)aSelector;
	//	[Export ("methodForSelector:")]
	//	unsafe IMP* MethodForSelector (Selector aSelector);

	//	// +(IMP)instanceMethodForSelector:(SEL)aSelector;
	//	[Static]
	//	[Export ("instanceMethodForSelector:")]
	//	unsafe IMP* InstanceMethodForSelector (Selector aSelector);

	//	// -(void)doesNotRecognizeSelector:(SEL)aSelector;
	//	[Export ("doesNotRecognizeSelector:")]
	//	void DoesNotRecognizeSelector (Selector aSelector);

	//	// -(id)forwardingTargetForSelector:(SEL)aSelector __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("forwardingTargetForSelector:")]
	//	NSObject ForwardingTargetForSelector (Selector aSelector);

	//	// -(void)forwardInvocation:(NSInvocation *)anInvocation;
	//	[Export ("forwardInvocation:")]
	//	void ForwardInvocation (NSInvocation anInvocation);

	//	// -(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector;
	//	[Export ("methodSignatureForSelector:")]
	//	NSMethodSignature MethodSignatureForSelector (Selector aSelector);

	//	// +(NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector;
	//	[Static]
	//	[Export ("instanceMethodSignatureForSelector:")]
	//	NSMethodSignature InstanceMethodSignatureForSelector (Selector aSelector);

	//	// +(BOOL)isSubclassOfClass:(Class)aClass;
	//	[Static]
	//	[Export ("isSubclassOfClass:")]
	//	bool IsSubclassOfClass (Class aClass);

	//	// +(BOOL)resolveClassMethod:(SEL)sel __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Static]
	//	[Export ("resolveClassMethod:")]
	//	bool ResolveClassMethod (Selector sel);

	//	// +(BOOL)resolveInstanceMethod:(SEL)sel __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Static]
	//	[Export ("resolveInstanceMethod:")]
	//	bool ResolveInstanceMethod (Selector sel);

	//	// +(NSUInteger)hash;
	//	[Static]
	//	[Export ("hash")]
	//	[Verify (MethodToProperty)]
	//	nuint Hash { get; }

	//	// +(Class)superclass;
	//	[Static]
	//	[Export ("superclass")]
	//	[Verify (MethodToProperty)]
	//	Class Superclass { get; }

	//	// +(Class)class;
	//	[Static]
	//	[Export ("class")]
	//	[Verify (MethodToProperty)]
	//	Class Class { get; }

	//	// +(NSString *)description;
	//	[Static]
	//	[Export ("description")]
	//	[Verify (MethodToProperty)]
	//	string Description { get; }

	//	// +(NSString *)debugDescription;
	//	[Static]
	//	[Export ("debugDescription")]
	//	[Verify (MethodToProperty)]
	//	string DebugDescription { get; }
	//}

	//// @protocol OS_dispatch_object <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface OS_dispatch_object
	//{
	//}

	//// typedef void (^dispatch_block_t)();
	//delegate void dispatch_block_t ();

	//// @protocol OS_dispatch_queue <OS_dispatch_object>
	//[Protocol, Model]
	//interface OS_dispatch_queue : IOS_dispatch_object
	//{
	//}

	//// @protocol OS_dispatch_queue_global <OS_dispatch_queue>
	//[Protocol, Model]
	//interface OS_dispatch_queue_global : IOS_dispatch_queue
	//{
	//}

	//// @protocol OS_dispatch_queue_serial <OS_dispatch_queue>
	//[Protocol, Model]
	//interface OS_dispatch_queue_serial : IOS_dispatch_queue
	//{
	//}

	//// @protocol OS_dispatch_queue_main <OS_dispatch_queue_serial>
	//[Protocol, Model]
	//interface OS_dispatch_queue_main : IOS_dispatch_queue_serial
	//{
	//}

	//// @protocol OS_dispatch_queue_concurrent <OS_dispatch_queue>
	//[Protocol, Model]
	//interface OS_dispatch_queue_concurrent : IOS_dispatch_queue
	//{
	//}

	//// @protocol OS_dispatch_queue_attr <OS_dispatch_object>
	//[Protocol, Model]
	//interface OS_dispatch_queue_attr : IOS_dispatch_object
	//{
	//}

	//// @protocol OS_dispatch_source <OS_dispatch_object>
	//[Protocol, Model]
	//interface OS_dispatch_source : IOS_dispatch_object
	//{
	//}

	//// @protocol OS_dispatch_group <OS_dispatch_object>
	//[Protocol, Model]
	//interface OS_dispatch_group : IOS_dispatch_object
	//{
	//}

	//// @protocol OS_dispatch_semaphore <OS_dispatch_object>
	//[Protocol, Model]
	//interface OS_dispatch_semaphore : IOS_dispatch_object
	//{
	//}

	//// @protocol OS_dispatch_data <OS_dispatch_object>
	//[Protocol, Model]
	//interface OS_dispatch_data : IOS_dispatch_object
	//{
	//}

	//// typedef _Bool (^dispatch_data_applier_t)(dispatch_data_t _Nonnull, size_t, const void * _Nonnull, size_t);
	//unsafe delegate bool dispatch_data_applier_t (OS_dispatch_data arg0, nuint arg1, void* arg2, nuint arg3);

	//// @protocol OS_dispatch_io <OS_dispatch_object>
	//[Protocol, Model]
	//interface OS_dispatch_io : IOS_dispatch_object
	//{
	//}

	//// typedef void (^dispatch_io_handler_t)(_Bool, dispatch_data_t _Nullable, int);
	//delegate void dispatch_io_handler_t (bool arg0, [NullAllowed] OS_dispatch_data arg1, int arg2);

	//// typedef void (^SecTrustCallback)(SecTrustRef _Nonnull, SecTrustResultType);
	//unsafe delegate void SecTrustCallback (SecTrustRef* arg0, SecTrustResultType arg1);

	//// @protocol OS_sec_object <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface OS_sec_object
	//{
	//}

	//// @protocol OS_sec_trust <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface OS_sec_trust
	//{
	//}

	//// @protocol OS_sec_identity <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface OS_sec_identity
	//{
	//}

	//// @protocol OS_sec_certificate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface OS_sec_certificate
	//{
	//}

	//// @protocol OS_sec_protocol_metadata <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface OS_sec_protocol_metadata
	//{
	//}

	//// @protocol OS_sec_protocol_options <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface OS_sec_protocol_options
	//{
	//}

	//// typedef void (^sec_protocol_key_update_complete_t)();
	//delegate void sec_protocol_key_update_complete_t ();

	//// typedef void (^sec_protocol_key_update_t)(sec_protocol_metadata_t _Nonnull, sec_protocol_key_update_complete_t _Nonnull);
	//delegate void sec_protocol_key_update_t (OS_sec_protocol_metadata arg0, sec_protocol_key_update_complete_t arg1);

	//// typedef void (^sec_protocol_challenge_complete_t)(sec_identity_t _Nonnull);
	//delegate void sec_protocol_challenge_complete_t (OS_sec_identity arg0);

	//// typedef void (^sec_protocol_challenge_t)(sec_protocol_metadata_t _Nonnull, sec_protocol_challenge_complete_t _Nonnull);
	//delegate void sec_protocol_challenge_t (OS_sec_protocol_metadata arg0, sec_protocol_challenge_complete_t arg1);

	//// typedef void (^sec_protocol_verify_complete_t)(_Bool);
	//delegate void sec_protocol_verify_complete_t (bool arg0);

	//// typedef void (^sec_protocol_verify_t)(sec_protocol_metadata_t _Nonnull, sec_trust_t _Nonnull, sec_protocol_verify_complete_t _Nonnull);
	//delegate void sec_protocol_verify_t (OS_sec_protocol_metadata arg0, OS_sec_trust arg1, sec_protocol_verify_complete_t arg2);

	//// typedef NSComparisonResult (^NSComparator)(id _Nonnull, id _Nonnull);
	//delegate NSComparisonResult NSComparator (NSObject arg0, NSObject arg1);

	//// @protocol NSCopying
	//[Protocol, Model]
	//interface NSCopying
	//{
	//	// @required -(id _Nonnull)copyWithZone:(NSZone * _Nullable)zone;
	//	[Abstract]
	//	[Export ("copyWithZone:")]
	//	unsafe NSObject CopyWithZone ([NullAllowed] NSZone* zone);
	//}

	//// @protocol NSMutableCopying
	//[Protocol, Model]
	//interface NSMutableCopying
	//{
	//	// @required -(id _Nonnull)mutableCopyWithZone:(NSZone * _Nullable)zone;
	//	[Abstract]
	//	[Export ("mutableCopyWithZone:")]
	//	unsafe NSObject MutableCopyWithZone ([NullAllowed] NSZone* zone);
	//}

	//// @protocol NSCoding
	//[Protocol, Model]
	//interface NSCoding
	//{
	//	// @required -(void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
	//	[Abstract]
	//	[Export ("encodeWithCoder:")]
	//	void EncodeWithCoder (NSCoder aCoder);

	//	// @required -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder;
	//	[Abstract]
	//	[Export ("initWithCoder:")]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @protocol NSSecureCoding <NSCoding>
	//[Protocol, Model]
	//interface NSSecureCoding : INSCoding
	//{
	//	// @required @property (readonly, class) BOOL supportsSecureCoding;
	//	[Static, Abstract]
	//	[Export ("supportsSecureCoding")]
	//	bool SupportsSecureCoding { get; }
	//}

	//// @interface NSCoderMethods (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSCoderMethods
	//{
	//	// +(NSInteger)version;
	//	// +(void)setVersion:(NSInteger)aVersion;
	//	[Static]
	//	[Export ("version")]
	//	[Verify (MethodToProperty)]
	//	nint Version { get; set; }

	//	// @property (readonly) Class _Nonnull classForCoder;
	//	[Export ("classForCoder")]
	//	Class ClassForCoder { get; }

	//	// -(id _Nullable)replacementObjectForCoder:(NSCoder * _Nonnull)aCoder;
	//	[Export ("replacementObjectForCoder:")]
	//	[return: NullAllowed]
	//	NSObject ReplacementObjectForCoder (NSCoder aCoder);

	//	// -(id _Nullable)awakeAfterUsingCoder:(NSCoder * _Nonnull)aDecoder __attribute__((ns_returns_retained)) __attribute__((ns_consumes_self));
	//	[Export ("awakeAfterUsingCoder:")]
	//	[return: NullAllowed]
	//	NSObject AwakeAfterUsingCoder (NSCoder aDecoder);
	//}

	//// @protocol NSDiscardableContent
	//[Protocol, Model]
	//interface NSDiscardableContent
	//{
	//	// @required -(BOOL)beginContentAccess;
	//	[Abstract]
	//	[Export ("beginContentAccess")]
	//	[Verify (MethodToProperty)]
	//	bool BeginContentAccess { get; }

	//	// @required -(void)endContentAccess;
	//	[Abstract]
	//	[Export ("endContentAccess")]
	//	void EndContentAccess ();

	//	// @required -(void)discardContentIfPossible;
	//	[Abstract]
	//	[Export ("discardContentIfPossible")]
	//	void DiscardContentIfPossible ();

	//	// @required -(BOOL)isContentDiscarded;
	//	[Abstract]
	//	[Export ("isContentDiscarded")]
	//	[Verify (MethodToProperty)]
	//	bool IsContentDiscarded { get; }
	//}

	//// @interface NSDiscardableContentProxy (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSDiscardableContentProxy
	//{
	//	// @property (readonly, retain) id _Nonnull autoContentAccessingProxy __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("autoContentAccessingProxy", ArgumentSemantic.Retain)]
	//	NSObject AutoContentAccessingProxy { get; }
	//}

	//// @protocol NSFastEnumeration
	//[Protocol, Model]
	//interface NSFastEnumeration
	//{
	//	// @required -(NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState * _Nonnull)state objects:(id  _Nullable * _Nonnull)buffer count:(NSUInteger)len;
	//	[Abstract]
	//	[Export ("countByEnumeratingWithState:objects:count:")]
	//	unsafe nuint Objects (NSFastEnumerationState* state, NSObject[] buffer, nuint len);
	//}

	//// audit-objc-generics: @interface NSEnumerator<ObjectType> : NSObject <NSFastEnumeration>
	//[BaseType (typeof(NSObject))]
	//interface NSEnumerator : INSFastEnumeration
	//{
	//	// -(ObjectType _Nullable)nextObject;
	//	[NullAllowed, Export ("nextObject")]
	//	[Verify (MethodToProperty)]
	//	NSObject NextObject { get; }
	//}

	//// @interface NSExtendedEnumerator (NSEnumerator)
	//[Category]
	//[BaseType (typeof(NSEnumerator))]
	//interface NSEnumerator_NSExtendedEnumerator
	//{
	//	// @property (readonly, copy) NSArray<ObjectType> * _Nonnull allObjects;
	//	[Export ("allObjects", ArgumentSemantic.Copy)]
	//	NSObject[] AllObjects { get; }
	//}

	//// @interface NSValue : NSObject <NSCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSValue : INSCopying, INSSecureCoding
	//{
	//	// -(void)getValue:(void * _Nonnull)value size:(NSUInteger)size __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("getValue:size:")]
	//	unsafe void GetValue (void* value, nuint size);

	//	// @property (readonly) const char * _Nonnull objCType __attribute__((objc_returns_inner_pointer));
	//	[Export ("objCType")]
	//	unsafe sbyte* ObjCType { get; }

	//	// -(instancetype _Nonnull)initWithBytes:(const void * _Nonnull)value objCType:(const char * _Nonnull)type __attribute__((objc_designated_initializer));
	//	[Export ("initWithBytes:objCType:")]
	//	[DesignatedInitializer]
	//	unsafe IntPtr Constructor (void* value, sbyte* type);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSValueCreation (NSValue)
	//[Category]
	//[BaseType (typeof(NSValue))]
	//interface NSValue_NSValueCreation
	//{
	//	// +(NSValue * _Nonnull)valueWithBytes:(const void * _Nonnull)value objCType:(const char * _Nonnull)type;
	//	[Static]
	//	[Export ("valueWithBytes:objCType:")]
	//	unsafe NSValue ValueWithBytes (void* value, sbyte* type);

	//	// +(NSValue * _Nonnull)value:(const void * _Nonnull)value withObjCType:(const char * _Nonnull)type;
	//	[Static]
	//	[Export ("value:withObjCType:")]
	//	unsafe NSValue Value (void* value, sbyte* type);
	//}

	//// @interface NSValueExtensionMethods (NSValue)
	//[Category]
	//[BaseType (typeof(NSValue))]
	//interface NSValue_NSValueExtensionMethods
	//{
	//	// +(NSValue * _Nonnull)valueWithNonretainedObject:(id _Nullable)anObject;
	//	[Static]
	//	[Export ("valueWithNonretainedObject:")]
	//	NSValue ValueWithNonretainedObject ([NullAllowed] NSObject anObject);

	//	// @property (readonly) id _Nullable nonretainedObjectValue;
	//	[NullAllowed, Export ("nonretainedObjectValue")]
	//	NSObject NonretainedObjectValue { get; }

	//	// +(NSValue * _Nonnull)valueWithPointer:(const void * _Nullable)pointer;
	//	[Static]
	//	[Export ("valueWithPointer:")]
	//	unsafe NSValue ValueWithPointer ([NullAllowed] void* pointer);

	//	// @property (readonly) void * _Nullable pointerValue;
	//	[NullAllowed, Export ("pointerValue")]
	//	unsafe void* PointerValue { get; }

	//	// -(BOOL)isEqualToValue:(NSValue * _Nonnull)value;
	//	[Export ("isEqualToValue:")]
	//	bool IsEqualToValue (NSValue value);
	//}

	//// @interface NSNumber : NSValue
	//[BaseType (typeof(NSValue))]
	//interface NSNumber
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(NSNumber * _Nonnull)initWithChar:(char)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithChar:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (sbyte value);

	//	// -(NSNumber * _Nonnull)initWithUnsignedChar:(unsigned char)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithUnsignedChar:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (byte value);

	//	// -(NSNumber * _Nonnull)initWithShort:(short)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithShort:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (short value);

	//	// -(NSNumber * _Nonnull)initWithUnsignedShort:(unsigned short)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithUnsignedShort:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (ushort value);

	//	// -(NSNumber * _Nonnull)initWithInt:(int)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithInt:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (int value);

	//	// -(NSNumber * _Nonnull)initWithUnsignedInt:(unsigned int)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithUnsignedInt:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (uint value);

	//	// -(NSNumber * _Nonnull)initWithLong:(long)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithLong:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nint value);

	//	// -(NSNumber * _Nonnull)initWithUnsignedLong:(unsigned long)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithUnsignedLong:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nuint value);

	//	// -(NSNumber * _Nonnull)initWithLongLong:(long long)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithLongLong:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (long value);

	//	// -(NSNumber * _Nonnull)initWithUnsignedLongLong:(unsigned long long)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithUnsignedLongLong:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (ulong value);

	//	// -(NSNumber * _Nonnull)initWithFloat:(float)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithFloat:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (float value);

	//	// -(NSNumber * _Nonnull)initWithDouble:(double)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithDouble:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (double value);

	//	// -(NSNumber * _Nonnull)initWithBool:(BOOL)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithBool:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (bool value);

	//	// -(NSNumber * _Nonnull)initWithInteger:(NSInteger)value __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("initWithInteger:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nint value);

	//	// -(NSNumber * _Nonnull)initWithUnsignedInteger:(NSUInteger)value __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("initWithUnsignedInteger:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nuint value);

	//	// @property (readonly) char charValue;
	//	[Export ("charValue")]
	//	sbyte CharValue { get; }

	//	// @property (readonly) unsigned char unsignedCharValue;
	//	[Export ("unsignedCharValue")]
	//	byte UnsignedCharValue { get; }

	//	// @property (readonly) short shortValue;
	//	[Export ("shortValue")]
	//	short ShortValue { get; }

	//	// @property (readonly) unsigned short unsignedShortValue;
	//	[Export ("unsignedShortValue")]
	//	ushort UnsignedShortValue { get; }

	//	// @property (readonly) int intValue;
	//	[Export ("intValue")]
	//	int IntValue { get; }

	//	// @property (readonly) unsigned int unsignedIntValue;
	//	[Export ("unsignedIntValue")]
	//	uint UnsignedIntValue { get; }

	//	// @property (readonly) long longValue;
	//	[Export ("longValue")]
	//	nint LongValue { get; }

	//	// @property (readonly) unsigned long unsignedLongValue;
	//	[Export ("unsignedLongValue")]
	//	nuint UnsignedLongValue { get; }

	//	// @property (readonly) long long longLongValue;
	//	[Export ("longLongValue")]
	//	long LongLongValue { get; }

	//	// @property (readonly) unsigned long long unsignedLongLongValue;
	//	[Export ("unsignedLongLongValue")]
	//	ulong UnsignedLongLongValue { get; }

	//	// @property (readonly) float floatValue;
	//	[Export ("floatValue")]
	//	float FloatValue { get; }

	//	// @property (readonly) double doubleValue;
	//	[Export ("doubleValue")]
	//	double DoubleValue { get; }

	//	// @property (readonly) BOOL boolValue;
	//	[Export ("boolValue")]
	//	bool BoolValue { get; }

	//	// @property (readonly) NSInteger integerValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("integerValue")]
	//	nint IntegerValue { get; }

	//	// @property (readonly) NSUInteger unsignedIntegerValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("unsignedIntegerValue")]
	//	nuint UnsignedIntegerValue { get; }

	//	// @property (readonly, copy) NSString * _Nonnull stringValue;
	//	[Export ("stringValue")]
	//	string StringValue { get; }

	//	// -(NSComparisonResult)compare:(NSNumber * _Nonnull)otherNumber;
	//	[Export ("compare:")]
	//	NSComparisonResult Compare (NSNumber otherNumber);

	//	// -(BOOL)isEqualToNumber:(NSNumber * _Nonnull)number;
	//	[Export ("isEqualToNumber:")]
	//	bool IsEqualToNumber (NSNumber number);

	//	// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
	//	[Export ("descriptionWithLocale:")]
	//	string DescriptionWithLocale ([NullAllowed] NSObject locale);
	//}

	//// @interface NSNumberCreation (NSNumber)
	//[Category]
	//[BaseType (typeof(NSNumber))]
	//interface NSNumber_NSNumberCreation
	//{
	//	// +(NSNumber * _Nonnull)numberWithChar:(char)value;
	//	[Static]
	//	[Export ("numberWithChar:")]
	//	NSNumber NumberWithChar (sbyte value);

	//	// +(NSNumber * _Nonnull)numberWithUnsignedChar:(unsigned char)value;
	//	[Static]
	//	[Export ("numberWithUnsignedChar:")]
	//	NSNumber NumberWithUnsignedChar (byte value);

	//	// +(NSNumber * _Nonnull)numberWithShort:(short)value;
	//	[Static]
	//	[Export ("numberWithShort:")]
	//	NSNumber NumberWithShort (short value);

	//	// +(NSNumber * _Nonnull)numberWithUnsignedShort:(unsigned short)value;
	//	[Static]
	//	[Export ("numberWithUnsignedShort:")]
	//	NSNumber NumberWithUnsignedShort (ushort value);

	//	// +(NSNumber * _Nonnull)numberWithInt:(int)value;
	//	[Static]
	//	[Export ("numberWithInt:")]
	//	NSNumber NumberWithInt (int value);

	//	// +(NSNumber * _Nonnull)numberWithUnsignedInt:(unsigned int)value;
	//	[Static]
	//	[Export ("numberWithUnsignedInt:")]
	//	NSNumber NumberWithUnsignedInt (uint value);

	//	// +(NSNumber * _Nonnull)numberWithLong:(long)value;
	//	[Static]
	//	[Export ("numberWithLong:")]
	//	NSNumber NumberWithLong (nint value);

	//	// +(NSNumber * _Nonnull)numberWithUnsignedLong:(unsigned long)value;
	//	[Static]
	//	[Export ("numberWithUnsignedLong:")]
	//	NSNumber NumberWithUnsignedLong (nuint value);

	//	// +(NSNumber * _Nonnull)numberWithLongLong:(long long)value;
	//	[Static]
	//	[Export ("numberWithLongLong:")]
	//	NSNumber NumberWithLongLong (long value);

	//	// +(NSNumber * _Nonnull)numberWithUnsignedLongLong:(unsigned long long)value;
	//	[Static]
	//	[Export ("numberWithUnsignedLongLong:")]
	//	NSNumber NumberWithUnsignedLongLong (ulong value);

	//	// +(NSNumber * _Nonnull)numberWithFloat:(float)value;
	//	[Static]
	//	[Export ("numberWithFloat:")]
	//	NSNumber NumberWithFloat (float value);

	//	// +(NSNumber * _Nonnull)numberWithDouble:(double)value;
	//	[Static]
	//	[Export ("numberWithDouble:")]
	//	NSNumber NumberWithDouble (double value);

	//	// +(NSNumber * _Nonnull)numberWithBool:(BOOL)value;
	//	[Static]
	//	[Export ("numberWithBool:")]
	//	NSNumber NumberWithBool (bool value);

	//	// +(NSNumber * _Nonnull)numberWithInteger:(NSInteger)value __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Static]
	//	[Export ("numberWithInteger:")]
	//	NSNumber NumberWithInteger (nint value);

	//	// +(NSNumber * _Nonnull)numberWithUnsignedInteger:(NSUInteger)value __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Static]
	//	[Export ("numberWithUnsignedInteger:")]
	//	NSNumber NumberWithUnsignedInteger (nuint value);
	//}

	//// @interface NSDeprecated (NSValue)
	//[Category]
	//[BaseType (typeof(NSValue))]
	//interface NSValue_NSDeprecated
	//{
	//	// -(void)getValue:(void * _Nonnull)value;
	//	[Export ("getValue:")]
	//	unsafe void GetValue (void* value);
	//}

	//// @interface NSValueRangeExtensions (NSValue)
	//[Category]
	//[BaseType (typeof(NSValue))]
	//interface NSValue_NSValueRangeExtensions
	//{
	//	// +(NSValue * _Nonnull)valueWithRange:(NSRange)range;
	//	[Static]
	//	[Export ("valueWithRange:")]
	//	NSValue ValueWithRange (NSRange range);

	//	// @property (readonly) NSRange rangeValue;
	//	[Export ("rangeValue")]
	//	NSRange RangeValue { get; }
	//}

	//// audit-objc-generics: @interface NSArray<__covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
	//[BaseType (typeof(NSObject))]
	//interface NSArray : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
	//{
	//	// @property (readonly) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// -(ObjectType _Nonnull)objectAtIndex:(NSUInteger)index;
	//	[Export ("objectAtIndex:")]
	//	NSObject ObjectAtIndex (nuint index);

	//	// -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
	//	[Export ("initWithObjects:count:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSObject[] objects, nuint cnt);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSExtendedArray (NSArray)
	//[Category]
	//[BaseType (typeof(NSArray))]
	//interface NSArray_NSExtendedArray
	//{
	//	// -(NSArray<ObjectType> * _Nonnull)arrayByAddingObject:(ObjectType _Nonnull)anObject;
	//	[Export ("arrayByAddingObject:")]
	//	NSObject[] ArrayByAddingObject (NSObject anObject);

	//	// -(NSArray<ObjectType> * _Nonnull)arrayByAddingObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray;
	//	[Export ("arrayByAddingObjectsFromArray:")]
	//	NSObject[] ArrayByAddingObjectsFromArray (NSObject[] otherArray);

	//	// -(NSString * _Nonnull)componentsJoinedByString:(NSString * _Nonnull)separator;
	//	[Export ("componentsJoinedByString:")]
	//	string ComponentsJoinedByString (string separator);

	//	// -(BOOL)containsObject:(ObjectType _Nonnull)anObject;
	//	[Export ("containsObject:")]
	//	bool ContainsObject (NSObject anObject);

	//	// @property (readonly, copy) NSString * _Nonnull description;
	//	[Export ("description")]
	//	string Description { get; }

	//	// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
	//	[Export ("descriptionWithLocale:")]
	//	string DescriptionWithLocale ([NullAllowed] NSObject locale);

	//	// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale indent:(NSUInteger)level;
	//	[Export ("descriptionWithLocale:indent:")]
	//	string DescriptionWithLocale ([NullAllowed] NSObject locale, nuint level);

	//	// -(ObjectType _Nullable)firstObjectCommonWithArray:(NSArray<ObjectType> * _Nonnull)otherArray;
	//	[Export ("firstObjectCommonWithArray:")]
	//	[return: NullAllowed]
	//	NSObject FirstObjectCommonWithArray (NSObject[] otherArray);

	//	// -(void)getObjects:(ObjectType  _Nonnull * _Nonnull)objects range:(NSRange)range;
	//	[Export ("getObjects:range:")]
	//	void GetObjects (NSObject[] objects, NSRange range);

	//	// -(NSUInteger)indexOfObject:(ObjectType _Nonnull)anObject;
	//	[Export ("indexOfObject:")]
	//	nuint IndexOfObject (NSObject anObject);

	//	// -(NSUInteger)indexOfObject:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
	//	[Export ("indexOfObject:inRange:")]
	//	nuint IndexOfObject (NSObject anObject, NSRange range);

	//	// -(NSUInteger)indexOfObjectIdenticalTo:(ObjectType _Nonnull)anObject;
	//	[Export ("indexOfObjectIdenticalTo:")]
	//	nuint IndexOfObjectIdenticalTo (NSObject anObject);

	//	// -(NSUInteger)indexOfObjectIdenticalTo:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
	//	[Export ("indexOfObjectIdenticalTo:inRange:")]
	//	nuint IndexOfObjectIdenticalTo (NSObject anObject, NSRange range);

	//	// -(BOOL)isEqualToArray:(NSArray<ObjectType> * _Nonnull)otherArray;
	//	[Export ("isEqualToArray:")]
	//	bool IsEqualToArray (NSObject[] otherArray);

	//	// @property (readonly, nonatomic) ObjectType _Nullable firstObject __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("firstObject")]
	//	NSObject FirstObject { get; }

	//	// @property (readonly, nonatomic) ObjectType _Nullable lastObject;
	//	[NullAllowed, Export ("lastObject")]
	//	NSObject LastObject { get; }

	//	// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
	//	[Export ("objectEnumerator")]
	//	[Verify (MethodToProperty)]
	//	NSEnumerator<NSObject> ObjectEnumerator { get; }

	//	// -(NSEnumerator<ObjectType> * _Nonnull)reverseObjectEnumerator;
	//	[Export ("reverseObjectEnumerator")]
	//	[Verify (MethodToProperty)]
	//	NSEnumerator<NSObject> ReverseObjectEnumerator { get; }

	//	// @property (readonly, copy) NSData * _Nonnull sortedArrayHint;
	//	[Export ("sortedArrayHint", ArgumentSemantic.Copy)]
	//	NSData SortedArrayHint { get; }

	//	// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingFunction:(NSInteger (* _Nonnull)(ObjectType _Nonnull, ObjectType _Nonnull, void * _Nullable))comparator context:(void * _Nullable)context;
	//	[Export ("sortedArrayUsingFunction:context:")]
	//	unsafe NSObject[] SortedArrayUsingFunction (Func<NSObject, NSObject, void*, nint>* comparator, [NullAllowed] void* context);

	//	// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingFunction:(NSInteger (* _Nonnull)(ObjectType _Nonnull, ObjectType _Nonnull, void * _Nullable))comparator context:(void * _Nullable)context hint:(NSData * _Nullable)hint;
	//	[Export ("sortedArrayUsingFunction:context:hint:")]
	//	unsafe NSObject[] SortedArrayUsingFunction (Func<NSObject, NSObject, void*, nint>* comparator, [NullAllowed] void* context, [NullAllowed] NSData hint);

	//	// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingSelector:(SEL _Nonnull)comparator;
	//	[Export ("sortedArrayUsingSelector:")]
	//	NSObject[] SortedArrayUsingSelector (Selector comparator);

	//	// -(NSArray<ObjectType> * _Nonnull)subarrayWithRange:(NSRange)range;
	//	[Export ("subarrayWithRange:")]
	//	NSObject[] SubarrayWithRange (NSRange range);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("writeToURL:error:")]
	//	bool WriteToURL (NSUrl url, [NullAllowed] out NSError error);

	//	// -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector;
	//	[Export ("makeObjectsPerformSelector:")]
	//	void MakeObjectsPerformSelector (Selector aSelector);

	//	// -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)argument;
	//	[Export ("makeObjectsPerformSelector:withObject:")]
	//	void MakeObjectsPerformSelector (Selector aSelector, [NullAllowed] NSObject argument);

	//	// -(NSArray<ObjectType> * _Nonnull)objectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
	//	[Export ("objectsAtIndexes:")]
	//	NSObject[] ObjectsAtIndexes (NSIndexSet indexes);

	//	// -(ObjectType _Nonnull)objectAtIndexedSubscript:(NSUInteger)idx __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("objectAtIndexedSubscript:")]
	//	NSObject ObjectAtIndexedSubscript (nuint idx);

	//	// -(void)enumerateObjectsUsingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateObjectsUsingBlock:")]
	//	unsafe void EnumerateObjectsUsingBlock (Action<NSObject, nuint, bool*> block);

	//	// -(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateObjectsWithOptions:usingBlock:")]
	//	unsafe void EnumerateObjectsWithOptions (NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

	//	// -(void)enumerateObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateObjectsAtIndexes:options:usingBlock:")]
	//	unsafe void EnumerateObjectsAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

	//	// -(NSUInteger)indexOfObjectPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexOfObjectPassingTest:")]
	//	unsafe nuint IndexOfObjectPassingTest (Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSUInteger)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexOfObjectWithOptions:passingTest:")]
	//	unsafe nuint IndexOfObjectWithOptions (NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSUInteger)indexOfObjectAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexOfObjectAtIndexes:options:passingTest:")]
	//	unsafe nuint IndexOfObjectAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSIndexSet * _Nonnull)indexesOfObjectsPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexesOfObjectsPassingTest:")]
	//	unsafe NSIndexSet IndexesOfObjectsPassingTest (Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSIndexSet * _Nonnull)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexesOfObjectsWithOptions:passingTest:")]
	//	unsafe NSIndexSet IndexesOfObjectsWithOptions (NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSIndexSet * _Nonnull)indexesOfObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexesOfObjectsAtIndexes:options:passingTest:")]
	//	unsafe NSIndexSet IndexesOfObjectsAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("sortedArrayUsingComparator:")]
	//	NSObject[] SortedArrayUsingComparator (NSComparator cmptr);

	//	// -(NSArray<ObjectType> * _Nonnull)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("sortedArrayWithOptions:usingComparator:")]
	//	NSObject[] SortedArrayWithOptions (NSSortOptions opts, NSComparator cmptr);

	//	// -(NSUInteger)indexOfObject:(ObjectType _Nonnull)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator _Nonnull)cmp __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexOfObject:inSortedRange:options:usingComparator:")]
	//	nuint IndexOfObject (NSObject obj, NSRange r, NSBinarySearchingOptions opts, NSComparator cmp);
	//}

	//// @interface NSArrayCreation (NSArray)
	//[Category]
	//[BaseType (typeof(NSArray))]
	//interface NSArray_NSArrayCreation
	//{
	//	// +(instancetype _Nonnull)array;
	//	[Static]
	//	[Export ("array")]
	//	NSArray Array ();

	//	// +(instancetype _Nonnull)arrayWithObject:(ObjectType _Nonnull)anObject;
	//	[Static]
	//	[Export ("arrayWithObject:")]
	//	NSArray ArrayWithObject (NSObject anObject);

	//	// +(instancetype _Nonnull)arrayWithObjects:(ObjectType  _Nonnull const * _Nonnull)objects count:(NSUInteger)cnt;
	//	[Static]
	//	[Export ("arrayWithObjects:count:")]
	//	NSArray ArrayWithObjects (NSObject[] objects, nuint cnt);

	//	// +(instancetype _Nonnull)arrayWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
	//	[Static, Internal]
	//	[Export ("arrayWithObjects:", IsVariadic = true)]
	//	NSArray ArrayWithObjects (NSObject firstObj, IntPtr varArgs);

	//	// +(instancetype _Nonnull)arrayWithArray:(NSArray<ObjectType> * _Nonnull)array;
	//	[Static]
	//	[Export ("arrayWithArray:")]
	//	NSArray ArrayWithArray (NSObject[] array);

	//	// -(instancetype _Nonnull)initWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
	//	[Internal]
	//	[Export ("initWithObjects:", IsVariadic = true)]
	//	IntPtr Constructor (NSObject firstObj, IntPtr varArgs);

	//	// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
	//	[Export ("initWithArray:")]
	//	IntPtr Constructor (NSObject[] array);

	//	// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array copyItems:(BOOL)flag;
	//	[Export ("initWithArray:copyItems:")]
	//	IntPtr Constructor (NSObject[] array, bool flag);

	//	// -(NSArray<ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("initWithContentsOfURL:error:")]
	//	IntPtr Constructor (NSUrl url, [NullAllowed] out NSError error);

	//	// +(NSArray<ObjectType> * _Nullable)arrayWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("arrayWithContentsOfURL:error:")]
	//	[return: NullAllowed]
	//	NSObject[] ArrayWithContentsOfURL (NSUrl url, [NullAllowed] out NSError error);
	//}

	//// @interface NSDeprecated (NSArray)
	//[Category]
	//[BaseType (typeof(NSArray))]
	//interface NSArray_NSDeprecated
	//{
	//	// -(void)getObjects:(ObjectType  _Nonnull * _Nonnull)objects __attribute__((availability(tvos, introduced=9.0, deprecated=11.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=4.0))) __attribute__((availability(ios, introduced=2.0, deprecated=11.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.13)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -getObjects:range: instead")]
	//	[Deprecated (PlatformName.TvOS, 11, 0, message: "Use -getObjects:range: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -getObjects:range: instead")]
	//	[Deprecated (PlatformName.WatchOS, 4, 0, message: "Use -getObjects:range: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -getObjects:range: instead")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use -getObjects:range: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -getObjects:range: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 13, message: "Use -getObjects:range: instead")]
	//	[Export ("getObjects:")]
	//	void GetObjects (NSObject[] objects);

	//	// +(NSArray<ObjectType> * _Nullable)arrayWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("arrayWithContentsOfFile:")]
	//	[return: NullAllowed]
	//	NSObject[] ArrayWithContentsOfFile (string path);

	//	// +(NSArray<ObjectType> * _Nullable)arrayWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("arrayWithContentsOfURL:")]
	//	[return: NullAllowed]
	//	NSObject[] ArrayWithContentsOfURL (NSUrl url);

	//	// -(NSArray<ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Export ("initWithContentsOfFile:")]
	//	IntPtr Constructor (string path);

	//	// -(NSArray<ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Export ("initWithContentsOfURL:")]
	//	IntPtr Constructor (NSUrl url);

	//	// -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile;
	//	[Export ("writeToFile:atomically:")]
	//	bool WriteToFile (string path, bool useAuxiliaryFile);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically;
	//	[Export ("writeToURL:atomically:")]
	//	bool WriteToURL (NSUrl url, bool atomically);
	//}

	//// audit-objc-generics: @interface NSMutableArray<ObjectType> : NSArray
	//[BaseType (typeof(NSArray))]
	//interface NSMutableArray
	//{
	//	// -(void)addObject:(ObjectType _Nonnull)anObject;
	//	[Export ("addObject:")]
	//	void AddObject (NSObject anObject);

	//	// -(void)insertObject:(ObjectType _Nonnull)anObject atIndex:(NSUInteger)index;
	//	[Export ("insertObject:atIndex:")]
	//	void InsertObject (NSObject anObject, nuint index);

	//	// -(void)removeLastObject;
	//	[Export ("removeLastObject")]
	//	void RemoveLastObject ();

	//	// -(void)removeObjectAtIndex:(NSUInteger)index;
	//	[Export ("removeObjectAtIndex:")]
	//	void RemoveObjectAtIndex (nuint index);

	//	// -(void)replaceObjectAtIndex:(NSUInteger)index withObject:(ObjectType _Nonnull)anObject;
	//	[Export ("replaceObjectAtIndex:withObject:")]
	//	void ReplaceObjectAtIndex (nuint index, NSObject anObject);

	//	// -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
	//	[Export ("initWithCapacity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nuint numItems);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSExtendedMutableArray (NSMutableArray)
	//[Category]
	//[BaseType (typeof(NSMutableArray))]
	//interface NSMutableArray_NSExtendedMutableArray
	//{
	//	// -(void)addObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray;
	//	[Export ("addObjectsFromArray:")]
	//	void AddObjectsFromArray (NSObject[] otherArray);

	//	// -(void)exchangeObjectAtIndex:(NSUInteger)idx1 withObjectAtIndex:(NSUInteger)idx2;
	//	[Export ("exchangeObjectAtIndex:withObjectAtIndex:")]
	//	void ExchangeObjectAtIndex (nuint idx1, nuint idx2);

	//	// -(void)removeAllObjects;
	//	[Export ("removeAllObjects")]
	//	void RemoveAllObjects ();

	//	// -(void)removeObject:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
	//	[Export ("removeObject:inRange:")]
	//	void RemoveObject (NSObject anObject, NSRange range);

	//	// -(void)removeObject:(ObjectType _Nonnull)anObject;
	//	[Export ("removeObject:")]
	//	void RemoveObject (NSObject anObject);

	//	// -(void)removeObjectIdenticalTo:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
	//	[Export ("removeObjectIdenticalTo:inRange:")]
	//	void RemoveObjectIdenticalTo (NSObject anObject, NSRange range);

	//	// -(void)removeObjectIdenticalTo:(ObjectType _Nonnull)anObject;
	//	[Export ("removeObjectIdenticalTo:")]
	//	void RemoveObjectIdenticalTo (NSObject anObject);

	//	// -(void)removeObjectsFromIndices:(NSUInteger * _Nonnull)indices numIndices:(NSUInteger)cnt __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.6)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Not supported")]
	//	[Deprecated (PlatformName.iOS, 4, 0, message: "Not supported")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Not supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 6, message: "Not supported")]
	//	[Export ("removeObjectsFromIndices:numIndices:")]
	//	unsafe void RemoveObjectsFromIndices (nuint* indices, nuint cnt);

	//	// -(void)removeObjectsInArray:(NSArray<ObjectType> * _Nonnull)otherArray;
	//	[Export ("removeObjectsInArray:")]
	//	void RemoveObjectsInArray (NSObject[] otherArray);

	//	// -(void)removeObjectsInRange:(NSRange)range;
	//	[Export ("removeObjectsInRange:")]
	//	void RemoveObjectsInRange (NSRange range);

	//	// -(void)replaceObjectsInRange:(NSRange)range withObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray range:(NSRange)otherRange;
	//	[Export ("replaceObjectsInRange:withObjectsFromArray:range:")]
	//	void ReplaceObjectsInRange (NSRange range, NSObject[] otherArray, NSRange otherRange);

	//	// -(void)replaceObjectsInRange:(NSRange)range withObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray;
	//	[Export ("replaceObjectsInRange:withObjectsFromArray:")]
	//	void ReplaceObjectsInRange (NSRange range, NSObject[] otherArray);

	//	// -(void)setArray:(NSArray<ObjectType> * _Nonnull)otherArray;
	//	[Export ("setArray:")]
	//	void SetArray (NSObject[] otherArray);

	//	// -(void)sortUsingFunction:(NSInteger (* _Nonnull)(ObjectType _Nonnull, ObjectType _Nonnull, void * _Nullable))compare context:(void * _Nullable)context;
	//	[Export ("sortUsingFunction:context:")]
	//	unsafe void SortUsingFunction (Func<NSObject, NSObject, void*, nint>* compare, [NullAllowed] void* context);

	//	// -(void)sortUsingSelector:(SEL _Nonnull)comparator;
	//	[Export ("sortUsingSelector:")]
	//	void SortUsingSelector (Selector comparator);

	//	// -(void)insertObjects:(NSArray<ObjectType> * _Nonnull)objects atIndexes:(NSIndexSet * _Nonnull)indexes;
	//	[Export ("insertObjects:atIndexes:")]
	//	void InsertObjects (NSObject[] objects, NSIndexSet indexes);

	//	// -(void)removeObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
	//	[Export ("removeObjectsAtIndexes:")]
	//	void RemoveObjectsAtIndexes (NSIndexSet indexes);

	//	// -(void)replaceObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes withObjects:(NSArray<ObjectType> * _Nonnull)objects;
	//	[Export ("replaceObjectsAtIndexes:withObjects:")]
	//	void ReplaceObjectsAtIndexes (NSIndexSet indexes, NSObject[] objects);

	//	// -(void)setObject:(ObjectType _Nonnull)obj atIndexedSubscript:(NSUInteger)idx __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("setObject:atIndexedSubscript:")]
	//	void SetObject (NSObject obj, nuint idx);

	//	// -(void)sortUsingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("sortUsingComparator:")]
	//	void SortUsingComparator (NSComparator cmptr);

	//	// -(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("sortWithOptions:usingComparator:")]
	//	void SortWithOptions (NSSortOptions opts, NSComparator cmptr);
	//}

	//// @interface NSMutableArrayCreation (NSMutableArray)
	//[Category]
	//[BaseType (typeof(NSMutableArray))]
	//interface NSMutableArray_NSMutableArrayCreation
	//{
	//	// +(instancetype _Nonnull)arrayWithCapacity:(NSUInteger)numItems;
	//	[Static]
	//	[Export ("arrayWithCapacity:")]
	//	NSMutableArray ArrayWithCapacity (nuint numItems);

	//	// +(NSMutableArray<ObjectType> * _Nullable)arrayWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("arrayWithContentsOfFile:")]
	//	[return: NullAllowed]
	//	NSMutableArray<NSObject> ArrayWithContentsOfFile (string path);

	//	// +(NSMutableArray<ObjectType> * _Nullable)arrayWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("arrayWithContentsOfURL:")]
	//	[return: NullAllowed]
	//	NSMutableArray<NSObject> ArrayWithContentsOfURL (NSUrl url);

	//	// -(NSMutableArray<ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Export ("initWithContentsOfFile:")]
	//	IntPtr Constructor (string path);

	//	// -(NSMutableArray<ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Export ("initWithContentsOfURL:")]
	//	IntPtr Constructor (NSUrl url);
	//}

	//// @interface NSAutoreleasePool : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSAutoreleasePool
	//{
	//	// +(void)addObject:(id _Nonnull)anObject;
	//	[Static]
	//	[Export ("addObject:")]
	//	void AddObject (NSObject anObject);

	//	// -(void)addObject:(id _Nonnull)anObject;
	//	[Export ("addObject:")]
	//	void AddObject (NSObject anObject);

	//	// -(void)drain;
	//	[Export ("drain")]
	//	void Drain ();
	//}

	//// @protocol NSItemProviderWriting <NSObject>
	//[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSItemProviderWriting
	//{
	//	// @required @property (readonly, copy, nonatomic, class) NSArray<NSString *> * _Nonnull writableTypeIdentifiersForItemProvider;
	//	[Static, Abstract]
	//	[Export ("writableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
	//	string[] WritableTypeIdentifiersForItemProvider { get; }

	//	// @optional @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull writableTypeIdentifiersForItemProvider;
	//	[Export ("writableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
	//	string[] WritableTypeIdentifiersForItemProvider { get; }

	//	// @optional +(NSItemProviderRepresentationVisibility)itemProviderVisibilityForRepresentationWithTypeIdentifier:(NSString * _Nonnull)typeIdentifier;
	//	[Static]
	//	[Export ("itemProviderVisibilityForRepresentationWithTypeIdentifier:")]
	//	NSItemProviderRepresentationVisibility ItemProviderVisibilityForRepresentationWithTypeIdentifier (string typeIdentifier);

	//	// @optional -(NSItemProviderRepresentationVisibility)itemProviderVisibilityForRepresentationWithTypeIdentifier:(NSString * _Nonnull)typeIdentifier;
	//	[Export ("itemProviderVisibilityForRepresentationWithTypeIdentifier:")]
	//	NSItemProviderRepresentationVisibility ItemProviderVisibilityForRepresentationWithTypeIdentifier (string typeIdentifier);

	//	// @required -(NSProgress * _Nullable)loadDataWithTypeIdentifier:(NSString * _Nonnull)typeIdentifier forItemProviderCompletionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler;
	//	[Abstract]
	//	[Export ("loadDataWithTypeIdentifier:forItemProviderCompletionHandler:")]
	//	[return: NullAllowed]
	//	NSProgress LoadDataWithTypeIdentifier (string typeIdentifier, Action<NSData, NSError> completionHandler);
	//}

	//// @protocol NSItemProviderReading <NSObject>
	//[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSItemProviderReading
	//{
	//	// @required @property (readonly, copy, nonatomic, class) NSArray<NSString *> * _Nonnull readableTypeIdentifiersForItemProvider;
	//	[Static, Abstract]
	//	[Export ("readableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
	//	string[] ReadableTypeIdentifiersForItemProvider { get; }

	//	// @required +(instancetype _Nullable)objectWithItemProviderData:(NSData * _Nonnull)data typeIdentifier:(NSString * _Nonnull)typeIdentifier error:(NSError * _Nullable * _Nullable)outError;
	//	[Static, Abstract]
	//	[Export ("objectWithItemProviderData:typeIdentifier:error:")]
	//	[return: NullAllowed]
	//	NSItemProviderReading TypeIdentifier (NSData data, string typeIdentifier, [NullAllowed] out NSError outError);
	//}

	//// typedef void (^NSItemProviderCompletionHandler)(id<NSSecureCoding> _Nullable, NSError * _Null_unspecified);
	//delegate void NSItemProviderCompletionHandler ([NullAllowed] NSSecureCoding arg0, NSError arg1);

	//// typedef void (^NSItemProviderLoadHandler)(NSItemProviderCompletionHandler _Null_unspecified, Class _Null_unspecified, NSDictionary * _Null_unspecified);
	//delegate void NSItemProviderLoadHandler (NSItemProviderCompletionHandler arg0, Class arg1, NSDictionary arg2);

	//// @interface NSItemProvider : NSObject <NSCopying>
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSItemProvider : INSCopying
	//{
	//	// -(void)registerDataRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier visibility:(NSItemProviderRepresentationVisibility)visibility loadHandler:(NSProgress * _Nullable (^ _Nonnull)(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable)))loadHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("registerDataRepresentationForTypeIdentifier:visibility:loadHandler:")]
	//	void RegisterDataRepresentationForTypeIdentifier (string typeIdentifier, NSItemProviderRepresentationVisibility visibility, Func<Action<NSData, NSError>, NSProgress> loadHandler);

	//	// -(void)registerFileRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier fileOptions:(NSItemProviderFileOptions)fileOptions visibility:(NSItemProviderRepresentationVisibility)visibility loadHandler:(NSProgress * _Nullable (^ _Nonnull)(void (^ _Nonnull)(NSURL * _Nullable, BOOL, NSError * _Nullable)))loadHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:")]
	//	void RegisterFileRepresentationForTypeIdentifier (string typeIdentifier, NSItemProviderFileOptions fileOptions, NSItemProviderRepresentationVisibility visibility, Func<Action<NSURL, bool, NSError>, NSProgress> loadHandler);

	//	// @property (readonly, copy, atomic) NSArray<NSString *> * _Nonnull registeredTypeIdentifiers;
	//	[Export ("registeredTypeIdentifiers", ArgumentSemantic.Copy)]
	//	string[] RegisteredTypeIdentifiers { get; }

	//	// -(NSArray<NSString *> * _Nonnull)registeredTypeIdentifiersWithFileOptions:(NSItemProviderFileOptions)fileOptions __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("registeredTypeIdentifiersWithFileOptions:")]
	//	string[] RegisteredTypeIdentifiersWithFileOptions (NSItemProviderFileOptions fileOptions);

	//	// -(BOOL)hasItemConformingToTypeIdentifier:(NSString * _Nonnull)typeIdentifier;
	//	[Export ("hasItemConformingToTypeIdentifier:")]
	//	bool HasItemConformingToTypeIdentifier (string typeIdentifier);

	//	// -(BOOL)hasRepresentationConformingToTypeIdentifier:(NSString * _Nonnull)typeIdentifier fileOptions:(NSItemProviderFileOptions)fileOptions __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("hasRepresentationConformingToTypeIdentifier:fileOptions:")]
	//	bool HasRepresentationConformingToTypeIdentifier (string typeIdentifier, NSItemProviderFileOptions fileOptions);

	//	// -(NSProgress * _Nonnull)loadDataRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("loadDataRepresentationForTypeIdentifier:completionHandler:")]
	//	NSProgress LoadDataRepresentationForTypeIdentifier (string typeIdentifier, Action<NSData, NSError> completionHandler);

	//	// -(NSProgress * _Nonnull)loadFileRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("loadFileRepresentationForTypeIdentifier:completionHandler:")]
	//	NSProgress LoadFileRepresentationForTypeIdentifier (string typeIdentifier, Action<NSURL, NSError> completionHandler);

	//	// -(NSProgress * _Nonnull)loadInPlaceFileRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, BOOL, NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:")]
	//	NSProgress LoadInPlaceFileRepresentationForTypeIdentifier (string typeIdentifier, Action<NSURL, bool, NSError> completionHandler);

	//	// @property (copy, atomic) NSString * _Nullable suggestedName __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoWatch, NoTV, Mac (10, 14), iOS (11, 0)]
	//	[NullAllowed, Export ("suggestedName")]
	//	string SuggestedName { get; set; }

	//	// -(instancetype _Nonnull)initWithObject:(id<NSItemProviderWriting> _Nonnull)object __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("initWithObject:")]
	//	IntPtr Constructor (NSItemProviderWriting @object);

	//	// -(void)registerObject:(id<NSItemProviderWriting> _Nonnull)object visibility:(NSItemProviderRepresentationVisibility)visibility __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("registerObject:visibility:")]
	//	void RegisterObject (NSItemProviderWriting @object, NSItemProviderRepresentationVisibility visibility);

	//	// -(void)registerObjectOfClass:(Class<NSItemProviderWriting> _Nonnull)aClass visibility:(NSItemProviderRepresentationVisibility)visibility loadHandler:(NSProgress * _Nullable (^ _Nonnull)(void (^ _Nonnull)(id<NSItemProviderWriting> _Nullable, NSError * _Nullable)))loadHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("registerObjectOfClass:visibility:loadHandler:")]
	//	void RegisterObjectOfClass (NSItemProviderWriting aClass, NSItemProviderRepresentationVisibility visibility, Func<Action<NSItemProviderWriting, NSError>, NSProgress> loadHandler);

	//	// -(BOOL)canLoadObjectOfClass:(Class<NSItemProviderReading> _Nonnull)aClass __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("canLoadObjectOfClass:")]
	//	bool CanLoadObjectOfClass (NSItemProviderReading aClass);

	//	// -(NSProgress * _Nonnull)loadObjectOfClass:(Class<NSItemProviderReading> _Nonnull)aClass completionHandler:(void (^ _Nonnull)(id<NSItemProviderReading> _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("loadObjectOfClass:completionHandler:")]
	//	NSProgress LoadObjectOfClass (NSItemProviderReading aClass, Action<NSItemProviderReading, NSError> completionHandler);

	//	// -(instancetype _Nonnull)initWithItem:(id<NSSecureCoding> _Nullable)item typeIdentifier:(NSString * _Nullable)typeIdentifier __attribute__((objc_designated_initializer));
	//	[Export ("initWithItem:typeIdentifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSSecureCoding item, [NullAllowed] string typeIdentifier);

	//	// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Null_unspecified)fileURL;
	//	[Export ("initWithContentsOfURL:")]
	//	IntPtr Constructor (NSUrl fileURL);

	//	// -(void)registerItemForTypeIdentifier:(NSString * _Nonnull)typeIdentifier loadHandler:(NSItemProviderLoadHandler _Nonnull)loadHandler;
	//	[Export ("registerItemForTypeIdentifier:loadHandler:")]
	//	void RegisterItemForTypeIdentifier (string typeIdentifier, NSItemProviderLoadHandler loadHandler);

	//	// -(void)loadItemForTypeIdentifier:(NSString * _Nonnull)typeIdentifier options:(NSDictionary * _Nullable)options completionHandler:(NSItemProviderCompletionHandler _Nullable)completionHandler;
	//	[Export ("loadItemForTypeIdentifier:options:completionHandler:")]
	//	void LoadItemForTypeIdentifier (string typeIdentifier, [NullAllowed] NSDictionary options, [NullAllowed] NSItemProviderCompletionHandler completionHandler);
	//}

	//// @interface NSPreviewSupport (NSItemProvider)
	//[Category]
	//[BaseType (typeof(NSItemProvider))]
	//interface NSItemProvider_NSPreviewSupport
	//{
	//	// @property (copy, atomic) NSItemProviderLoadHandler _Nullable previewImageHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[NullAllowed, Export ("previewImageHandler", ArgumentSemantic.Copy)]
	//	NSItemProviderLoadHandler PreviewImageHandler { get; set; }

	//	// -(void)loadPreviewImageWithOptions:(NSDictionary * _Null_unspecified)options completionHandler:(NSItemProviderCompletionHandler _Null_unspecified)completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("loadPreviewImageWithOptions:completionHandler:")]
	//	void LoadPreviewImageWithOptions (NSDictionary options, NSItemProviderCompletionHandler completionHandler);
	//}

	//// @interface NSString : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSString : INSCopying, INSMutableCopying, INSSecureCoding
	//{
	//	// @property (readonly) NSUInteger length;
	//	[Export ("length")]
	//	nuint Length { get; }

	//	// -(unichar)characterAtIndex:(NSUInteger)index;
	//	[Export ("characterAtIndex:")]
	//	ushort CharacterAtIndex (nuint index);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSStringExtensionMethods (NSString)
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_NSStringExtensionMethods
	//{
	//	// -(NSString * _Nonnull)substringFromIndex:(NSUInteger)from;
	//	[Export ("substringFromIndex:")]
	//	string SubstringFromIndex (nuint from);

	//	// -(NSString * _Nonnull)substringToIndex:(NSUInteger)to;
	//	[Export ("substringToIndex:")]
	//	string SubstringToIndex (nuint to);

	//	// -(NSString * _Nonnull)substringWithRange:(NSRange)range;
	//	[Export ("substringWithRange:")]
	//	string SubstringWithRange (NSRange range);

	//	// -(void)getCharacters:(unichar * _Nonnull)buffer range:(NSRange)range;
	//	[Export ("getCharacters:range:")]
	//	unsafe void GetCharacters (ushort* buffer, NSRange range);

	//	// -(NSComparisonResult)compare:(NSString * _Nonnull)string;
	//	[Export ("compare:")]
	//	NSComparisonResult Compare (string @string);

	//	// -(NSComparisonResult)compare:(NSString * _Nonnull)string options:(NSStringCompareOptions)mask;
	//	[Export ("compare:options:")]
	//	NSComparisonResult Compare (string @string, NSStringCompareOptions mask);

	//	// -(NSComparisonResult)compare:(NSString * _Nonnull)string options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToCompare;
	//	[Export ("compare:options:range:")]
	//	NSComparisonResult Compare (string @string, NSStringCompareOptions mask, NSRange rangeOfReceiverToCompare);

	//	// -(NSComparisonResult)compare:(NSString * _Nonnull)string options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToCompare locale:(id _Nullable)locale;
	//	[Export ("compare:options:range:locale:")]
	//	NSComparisonResult Compare (string @string, NSStringCompareOptions mask, NSRange rangeOfReceiverToCompare, [NullAllowed] NSObject locale);

	//	// -(NSComparisonResult)caseInsensitiveCompare:(NSString * _Nonnull)string;
	//	[Export ("caseInsensitiveCompare:")]
	//	NSComparisonResult CaseInsensitiveCompare (string @string);

	//	// -(NSComparisonResult)localizedCompare:(NSString * _Nonnull)string;
	//	[Export ("localizedCompare:")]
	//	NSComparisonResult LocalizedCompare (string @string);

	//	// -(NSComparisonResult)localizedCaseInsensitiveCompare:(NSString * _Nonnull)string;
	//	[Export ("localizedCaseInsensitiveCompare:")]
	//	NSComparisonResult LocalizedCaseInsensitiveCompare (string @string);

	//	// -(NSComparisonResult)localizedStandardCompare:(NSString * _Nonnull)string __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("localizedStandardCompare:")]
	//	NSComparisonResult LocalizedStandardCompare (string @string);

	//	// -(BOOL)isEqualToString:(NSString * _Nonnull)aString;
	//	[Export ("isEqualToString:")]
	//	bool IsEqualToString (string aString);

	//	// -(BOOL)hasPrefix:(NSString * _Nonnull)str;
	//	[Export ("hasPrefix:")]
	//	bool HasPrefix (string str);

	//	// -(BOOL)hasSuffix:(NSString * _Nonnull)str;
	//	[Export ("hasSuffix:")]
	//	bool HasSuffix (string str);

	//	// -(NSString * _Nonnull)commonPrefixWithString:(NSString * _Nonnull)str options:(NSStringCompareOptions)mask;
	//	[Export ("commonPrefixWithString:options:")]
	//	string CommonPrefixWithString (string str, NSStringCompareOptions mask);

	//	// -(BOOL)containsString:(NSString * _Nonnull)str __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("containsString:")]
	//	bool ContainsString (string str);

	//	// -(BOOL)localizedCaseInsensitiveContainsString:(NSString * _Nonnull)str __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("localizedCaseInsensitiveContainsString:")]
	//	bool LocalizedCaseInsensitiveContainsString (string str);

	//	// -(BOOL)localizedStandardContainsString:(NSString * _Nonnull)str __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("localizedStandardContainsString:")]
	//	bool LocalizedStandardContainsString (string str);

	//	// -(NSRange)localizedStandardRangeOfString:(NSString * _Nonnull)str __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("localizedStandardRangeOfString:")]
	//	NSRange LocalizedStandardRangeOfString (string str);

	//	// -(NSRange)rangeOfString:(NSString * _Nonnull)searchString;
	//	[Export ("rangeOfString:")]
	//	NSRange RangeOfString (string searchString);

	//	// -(NSRange)rangeOfString:(NSString * _Nonnull)searchString options:(NSStringCompareOptions)mask;
	//	[Export ("rangeOfString:options:")]
	//	NSRange RangeOfString (string searchString, NSStringCompareOptions mask);

	//	// -(NSRange)rangeOfString:(NSString * _Nonnull)searchString options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToSearch;
	//	[Export ("rangeOfString:options:range:")]
	//	NSRange RangeOfString (string searchString, NSStringCompareOptions mask, NSRange rangeOfReceiverToSearch);

	//	// -(NSRange)rangeOfString:(NSString * _Nonnull)searchString options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToSearch locale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("rangeOfString:options:range:locale:")]
	//	NSRange RangeOfString (string searchString, NSStringCompareOptions mask, NSRange rangeOfReceiverToSearch, [NullAllowed] NSLocale locale);

	//	// -(NSRange)rangeOfCharacterFromSet:(NSCharacterSet * _Nonnull)searchSet;
	//	[Export ("rangeOfCharacterFromSet:")]
	//	NSRange RangeOfCharacterFromSet (NSCharacterSet searchSet);

	//	// -(NSRange)rangeOfCharacterFromSet:(NSCharacterSet * _Nonnull)searchSet options:(NSStringCompareOptions)mask;
	//	[Export ("rangeOfCharacterFromSet:options:")]
	//	NSRange RangeOfCharacterFromSet (NSCharacterSet searchSet, NSStringCompareOptions mask);

	//	// -(NSRange)rangeOfCharacterFromSet:(NSCharacterSet * _Nonnull)searchSet options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToSearch;
	//	[Export ("rangeOfCharacterFromSet:options:range:")]
	//	NSRange RangeOfCharacterFromSet (NSCharacterSet searchSet, NSStringCompareOptions mask, NSRange rangeOfReceiverToSearch);

	//	// -(NSRange)rangeOfComposedCharacterSequenceAtIndex:(NSUInteger)index;
	//	[Export ("rangeOfComposedCharacterSequenceAtIndex:")]
	//	NSRange RangeOfComposedCharacterSequenceAtIndex (nuint index);

	//	// -(NSRange)rangeOfComposedCharacterSequencesForRange:(NSRange)range __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("rangeOfComposedCharacterSequencesForRange:")]
	//	NSRange RangeOfComposedCharacterSequencesForRange (NSRange range);

	//	// -(NSString * _Nonnull)stringByAppendingString:(NSString * _Nonnull)aString;
	//	[Export ("stringByAppendingString:")]
	//	string StringByAppendingString (string aString);

	//	// -(NSString * _Nonnull)stringByAppendingFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
	//	[Internal]
	//	[Export ("stringByAppendingFormat:", IsVariadic = true)]
	//	string StringByAppendingFormat (string format, IntPtr varArgs);

	//	// @property (readonly) double doubleValue;
	//	[Export ("doubleValue")]
	//	double DoubleValue { get; }

	//	// @property (readonly) float floatValue;
	//	[Export ("floatValue")]
	//	float FloatValue { get; }

	//	// @property (readonly) int intValue;
	//	[Export ("intValue")]
	//	int IntValue { get; }

	//	// @property (readonly) NSInteger integerValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("integerValue")]
	//	nint IntegerValue { get; }

	//	// @property (readonly) long long longLongValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("longLongValue")]
	//	long LongLongValue { get; }

	//	// @property (readonly) BOOL boolValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("boolValue")]
	//	bool BoolValue { get; }

	//	// @property (readonly, copy) NSString * _Nonnull uppercaseString;
	//	[Export ("uppercaseString")]
	//	string UppercaseString { get; }

	//	// @property (readonly, copy) NSString * _Nonnull lowercaseString;
	//	[Export ("lowercaseString")]
	//	string LowercaseString { get; }

	//	// @property (readonly, copy) NSString * _Nonnull capitalizedString;
	//	[Export ("capitalizedString")]
	//	string CapitalizedString { get; }

	//	// @property (readonly, copy) NSString * _Nonnull localizedUppercaseString __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("localizedUppercaseString")]
	//	string LocalizedUppercaseString { get; }

	//	// @property (readonly, copy) NSString * _Nonnull localizedLowercaseString __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("localizedLowercaseString")]
	//	string LocalizedLowercaseString { get; }

	//	// @property (readonly, copy) NSString * _Nonnull localizedCapitalizedString __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("localizedCapitalizedString")]
	//	string LocalizedCapitalizedString { get; }

	//	// -(NSString * _Nonnull)uppercaseStringWithLocale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("uppercaseStringWithLocale:")]
	//	string UppercaseStringWithLocale ([NullAllowed] NSLocale locale);

	//	// -(NSString * _Nonnull)lowercaseStringWithLocale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("lowercaseStringWithLocale:")]
	//	string LowercaseStringWithLocale ([NullAllowed] NSLocale locale);

	//	// -(NSString * _Nonnull)capitalizedStringWithLocale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("capitalizedStringWithLocale:")]
	//	string CapitalizedStringWithLocale ([NullAllowed] NSLocale locale);

	//	// -(void)getLineStart:(NSUInteger * _Nullable)startPtr end:(NSUInteger * _Nullable)lineEndPtr contentsEnd:(NSUInteger * _Nullable)contentsEndPtr forRange:(NSRange)range;
	//	[Export ("getLineStart:end:contentsEnd:forRange:")]
	//	unsafe void GetLineStart ([NullAllowed] nuint* startPtr, [NullAllowed] nuint* lineEndPtr, [NullAllowed] nuint* contentsEndPtr, NSRange range);

	//	// -(NSRange)lineRangeForRange:(NSRange)range;
	//	[Export ("lineRangeForRange:")]
	//	NSRange LineRangeForRange (NSRange range);

	//	// -(void)getParagraphStart:(NSUInteger * _Nullable)startPtr end:(NSUInteger * _Nullable)parEndPtr contentsEnd:(NSUInteger * _Nullable)contentsEndPtr forRange:(NSRange)range;
	//	[Export ("getParagraphStart:end:contentsEnd:forRange:")]
	//	unsafe void GetParagraphStart ([NullAllowed] nuint* startPtr, [NullAllowed] nuint* parEndPtr, [NullAllowed] nuint* contentsEndPtr, NSRange range);

	//	// -(NSRange)paragraphRangeForRange:(NSRange)range;
	//	[Export ("paragraphRangeForRange:")]
	//	NSRange ParagraphRangeForRange (NSRange range);

	//	// -(void)enumerateSubstringsInRange:(NSRange)range options:(NSStringEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSString * _Nullable, NSRange, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateSubstringsInRange:options:usingBlock:")]
	//	unsafe void EnumerateSubstringsInRange (NSRange range, NSStringEnumerationOptions opts, Action<NSString, NSRange, NSRange, bool*> block);

	//	// -(void)enumerateLinesUsingBlock:(void (^ _Nonnull)(NSString * _Nonnull, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateLinesUsingBlock:")]
	//	unsafe void EnumerateLinesUsingBlock (Action<NSString, bool*> block);

	//	// @property (readonly) const char * _Nullable UTF8String __attribute__((objc_returns_inner_pointer));
	//	[NullAllowed, Export ("UTF8String")]
	//	unsafe sbyte* UTF8String { get; }

	//	// @property (readonly) NSStringEncoding fastestEncoding;
	//	[Export ("fastestEncoding")]
	//	nuint FastestEncoding { get; }

	//	// @property (readonly) NSStringEncoding smallestEncoding;
	//	[Export ("smallestEncoding")]
	//	nuint SmallestEncoding { get; }

	//	// -(NSData * _Nullable)dataUsingEncoding:(NSStringEncoding)encoding allowLossyConversion:(BOOL)lossy;
	//	[Export ("dataUsingEncoding:allowLossyConversion:")]
	//	[return: NullAllowed]
	//	NSData DataUsingEncoding (nuint encoding, bool lossy);

	//	// -(NSData * _Nullable)dataUsingEncoding:(NSStringEncoding)encoding;
	//	[Export ("dataUsingEncoding:")]
	//	[return: NullAllowed]
	//	NSData DataUsingEncoding (nuint encoding);

	//	// -(BOOL)canBeConvertedToEncoding:(NSStringEncoding)encoding;
	//	[Export ("canBeConvertedToEncoding:")]
	//	bool CanBeConvertedToEncoding (nuint encoding);

	//	// -(const char * _Nullable)cStringUsingEncoding:(NSStringEncoding)encoding __attribute__((objc_returns_inner_pointer));
	//	[Export ("cStringUsingEncoding:")]
	//	[return: NullAllowed]
	//	unsafe sbyte* CStringUsingEncoding (nuint encoding);

	//	// -(BOOL)getCString:(char * _Nonnull)buffer maxLength:(NSUInteger)maxBufferCount encoding:(NSStringEncoding)encoding;
	//	[Export ("getCString:maxLength:encoding:")]
	//	unsafe bool GetCString (sbyte* buffer, nuint maxBufferCount, nuint encoding);

	//	// -(BOOL)getBytes:(void * _Nullable)buffer maxLength:(NSUInteger)maxBufferCount usedLength:(NSUInteger * _Nullable)usedBufferCount encoding:(NSStringEncoding)encoding options:(NSStringEncodingConversionOptions)options range:(NSRange)range remainingRange:(NSRangePointer _Nullable)leftover;
	//	[Export ("getBytes:maxLength:usedLength:encoding:options:range:remainingRange:")]
	//	unsafe bool GetBytes ([NullAllowed] void* buffer, nuint maxBufferCount, [NullAllowed] nuint* usedBufferCount, nuint encoding, NSStringEncodingConversionOptions options, NSRange range, [NullAllowed] NSRangePointer* leftover);

	//	// -(NSUInteger)maximumLengthOfBytesUsingEncoding:(NSStringEncoding)enc;
	//	[Export ("maximumLengthOfBytesUsingEncoding:")]
	//	nuint MaximumLengthOfBytesUsingEncoding (nuint enc);

	//	// -(NSUInteger)lengthOfBytesUsingEncoding:(NSStringEncoding)enc;
	//	[Export ("lengthOfBytesUsingEncoding:")]
	//	nuint LengthOfBytesUsingEncoding (nuint enc);

	//	// @property (readonly, class) const NSStringEncoding * _Nonnull availableStringEncodings;
	//	[Static]
	//	[Export ("availableStringEncodings")]
	//	unsafe nuint* AvailableStringEncodings { get; }

	//	// +(NSString * _Nonnull)localizedNameOfStringEncoding:(NSStringEncoding)encoding;
	//	[Static]
	//	[Export ("localizedNameOfStringEncoding:")]
	//	string LocalizedNameOfStringEncoding (nuint encoding);

	//	// @property (readonly, class) NSStringEncoding defaultCStringEncoding;
	//	[Static]
	//	[Export ("defaultCStringEncoding")]
	//	nuint DefaultCStringEncoding { get; }

	//	// @property (readonly, copy) NSString * _Nonnull decomposedStringWithCanonicalMapping;
	//	[Export ("decomposedStringWithCanonicalMapping")]
	//	string DecomposedStringWithCanonicalMapping { get; }

	//	// @property (readonly, copy) NSString * _Nonnull precomposedStringWithCanonicalMapping;
	//	[Export ("precomposedStringWithCanonicalMapping")]
	//	string PrecomposedStringWithCanonicalMapping { get; }

	//	// @property (readonly, copy) NSString * _Nonnull decomposedStringWithCompatibilityMapping;
	//	[Export ("decomposedStringWithCompatibilityMapping")]
	//	string DecomposedStringWithCompatibilityMapping { get; }

	//	// @property (readonly, copy) NSString * _Nonnull precomposedStringWithCompatibilityMapping;
	//	[Export ("precomposedStringWithCompatibilityMapping")]
	//	string PrecomposedStringWithCompatibilityMapping { get; }

	//	// -(NSArray<NSString *> * _Nonnull)componentsSeparatedByString:(NSString * _Nonnull)separator;
	//	[Export ("componentsSeparatedByString:")]
	//	string[] ComponentsSeparatedByString (string separator);

	//	// -(NSArray<NSString *> * _Nonnull)componentsSeparatedByCharactersInSet:(NSCharacterSet * _Nonnull)separator __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("componentsSeparatedByCharactersInSet:")]
	//	string[] ComponentsSeparatedByCharactersInSet (NSCharacterSet separator);

	//	// -(NSString * _Nonnull)stringByTrimmingCharactersInSet:(NSCharacterSet * _Nonnull)set;
	//	[Export ("stringByTrimmingCharactersInSet:")]
	//	string StringByTrimmingCharactersInSet (NSCharacterSet set);

	//	// -(NSString * _Nonnull)stringByPaddingToLength:(NSUInteger)newLength withString:(NSString * _Nonnull)padString startingAtIndex:(NSUInteger)padIndex;
	//	[Export ("stringByPaddingToLength:withString:startingAtIndex:")]
	//	string StringByPaddingToLength (nuint newLength, string padString, nuint padIndex);

	//	// -(NSString * _Nonnull)stringByFoldingWithOptions:(NSStringCompareOptions)options locale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("stringByFoldingWithOptions:locale:")]
	//	string StringByFoldingWithOptions (NSStringCompareOptions options, [NullAllowed] NSLocale locale);

	//	// -(NSString * _Nonnull)stringByReplacingOccurrencesOfString:(NSString * _Nonnull)target withString:(NSString * _Nonnull)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("stringByReplacingOccurrencesOfString:withString:options:range:")]
	//	string StringByReplacingOccurrencesOfString (string target, string replacement, NSStringCompareOptions options, NSRange searchRange);

	//	// -(NSString * _Nonnull)stringByReplacingOccurrencesOfString:(NSString * _Nonnull)target withString:(NSString * _Nonnull)replacement __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("stringByReplacingOccurrencesOfString:withString:")]
	//	string StringByReplacingOccurrencesOfString (string target, string replacement);

	//	// -(NSString * _Nonnull)stringByReplacingCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)replacement __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("stringByReplacingCharactersInRange:withString:")]
	//	string StringByReplacingCharactersInRange (NSRange range, string replacement);

	//	// -(NSString * _Nullable)stringByApplyingTransform:(NSStringTransform _Nonnull)transform reverse:(BOOL)reverse __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("stringByApplyingTransform:reverse:")]
	//	[return: NullAllowed]
	//	string StringByApplyingTransform (string transform, bool reverse);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("writeToURL:atomically:encoding:error:")]
	//	bool WriteToURL (NSUrl url, bool useAuxiliaryFile, nuint enc, [NullAllowed] out NSError error);

	//	// -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("writeToFile:atomically:encoding:error:")]
	//	bool WriteToFile (string path, bool useAuxiliaryFile, nuint enc, [NullAllowed] out NSError error);

	//	// @property (readonly, copy) NSString * _Nonnull description;
	//	[Export ("description")]
	//	string Description { get; }

	//	// @property (readonly) NSUInteger hash;
	//	[Export ("hash")]
	//	nuint Hash { get; }

	//	// -(instancetype _Nonnull)initWithCharactersNoCopy:(unichar * _Nonnull)characters length:(NSUInteger)length freeWhenDone:(BOOL)freeBuffer;
	//	[Export ("initWithCharactersNoCopy:length:freeWhenDone:")]
	//	unsafe IntPtr Constructor (ushort* characters, nuint length, bool freeBuffer);

	//	// -(instancetype _Nonnull)initWithCharacters:(const unichar * _Nonnull)characters length:(NSUInteger)length;
	//	[Export ("initWithCharacters:length:")]
	//	unsafe IntPtr Constructor (ushort* characters, nuint length);

	//	// -(instancetype _Nullable)initWithUTF8String:(const char * _Nonnull)nullTerminatedCString;
	//	[Export ("initWithUTF8String:")]
	//	unsafe IntPtr Constructor (sbyte* nullTerminatedCString);

	//	// -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)aString;
	//	[Export ("initWithString:")]
	//	IntPtr Constructor (string aString);

	//	// -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
	//	[Internal]
	//	[Export ("initWithFormat:", IsVariadic = true)]
	//	IntPtr Constructor (string format, IntPtr varArgs);

	//	// -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format arguments:(va_list)argList __attribute__((format(NSString, 1, 0)));
	//	[Export ("initWithFormat:arguments:")]
	//	unsafe IntPtr Constructor (string format, sbyte* argList);

	//	// -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format locale:(id _Nullable)locale, ... __attribute__((format(NSString, 1, 3)));
	//	[Internal]
	//	[Export ("initWithFormat:locale:", IsVariadic = true)]
	//	IntPtr Constructor (string format, [NullAllowed] NSObject locale, IntPtr varArgs);

	//	// -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format locale:(id _Nullable)locale arguments:(va_list)argList __attribute__((format(NSString, 1, 0)));
	//	[Export ("initWithFormat:locale:arguments:")]
	//	unsafe IntPtr Constructor (string format, [NullAllowed] NSObject locale, sbyte* argList);

	//	// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data encoding:(NSStringEncoding)encoding;
	//	[Export ("initWithData:encoding:")]
	//	IntPtr Constructor (NSData data, nuint encoding);

	//	// -(instancetype _Nullable)initWithBytes:(const void * _Nonnull)bytes length:(NSUInteger)len encoding:(NSStringEncoding)encoding;
	//	[Export ("initWithBytes:length:encoding:")]
	//	unsafe IntPtr Constructor (void* bytes, nuint len, nuint encoding);

	//	// -(instancetype _Nullable)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)len encoding:(NSStringEncoding)encoding freeWhenDone:(BOOL)freeBuffer;
	//	[Export ("initWithBytesNoCopy:length:encoding:freeWhenDone:")]
	//	unsafe IntPtr Constructor (void* bytes, nuint len, nuint encoding, bool freeBuffer);

	//	// +(instancetype _Nonnull)string;
	//	[Static]
	//	[Export ("string")]
	//	NSString String ();

	//	// +(instancetype _Nonnull)stringWithString:(NSString * _Nonnull)string;
	//	[Static]
	//	[Export ("stringWithString:")]
	//	NSString StringWithString (string @string);

	//	// +(instancetype _Nonnull)stringWithCharacters:(const unichar * _Nonnull)characters length:(NSUInteger)length;
	//	[Static]
	//	[Export ("stringWithCharacters:length:")]
	//	unsafe NSString StringWithCharacters (ushort* characters, nuint length);

	//	// +(instancetype _Nullable)stringWithUTF8String:(const char * _Nonnull)nullTerminatedCString;
	//	[Static]
	//	[Export ("stringWithUTF8String:")]
	//	[return: NullAllowed]
	//	unsafe NSString StringWithUTF8String (sbyte* nullTerminatedCString);

	//	// +(instancetype _Nonnull)stringWithFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
	//	[Static, Internal]
	//	[Export ("stringWithFormat:", IsVariadic = true)]
	//	NSString StringWithFormat (string format, IntPtr varArgs);

	//	// +(instancetype _Nonnull)localizedStringWithFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
	//	[Static, Internal]
	//	[Export ("localizedStringWithFormat:", IsVariadic = true)]
	//	NSString LocalizedStringWithFormat (string format, IntPtr varArgs);

	//	// -(instancetype _Nullable)initWithCString:(const char * _Nonnull)nullTerminatedCString encoding:(NSStringEncoding)encoding;
	//	[Export ("initWithCString:encoding:")]
	//	unsafe IntPtr Constructor (sbyte* nullTerminatedCString, nuint encoding);

	//	// +(instancetype _Nullable)stringWithCString:(const char * _Nonnull)cString encoding:(NSStringEncoding)enc;
	//	[Static]
	//	[Export ("stringWithCString:encoding:")]
	//	[return: NullAllowed]
	//	unsafe NSString StringWithCString (sbyte* cString, nuint enc);

	//	// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("initWithContentsOfURL:encoding:error:")]
	//	IntPtr Constructor (NSUrl url, nuint enc, [NullAllowed] out NSError error);

	//	// -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("initWithContentsOfFile:encoding:error:")]
	//	IntPtr Constructor (string path, nuint enc, [NullAllowed] out NSError error);

	//	// +(instancetype _Nullable)stringWithContentsOfURL:(NSURL * _Nonnull)url encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("stringWithContentsOfURL:encoding:error:")]
	//	[return: NullAllowed]
	//	NSString StringWithContentsOfURL (NSUrl url, nuint enc, [NullAllowed] out NSError error);

	//	// +(instancetype _Nullable)stringWithContentsOfFile:(NSString * _Nonnull)path encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("stringWithContentsOfFile:encoding:error:")]
	//	[return: NullAllowed]
	//	NSString StringWithContentsOfFile (string path, nuint enc, [NullAllowed] out NSError error);

	//	// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("initWithContentsOfURL:usedEncoding:error:")]
	//	unsafe IntPtr Constructor (NSUrl url, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);

	//	// -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("initWithContentsOfFile:usedEncoding:error:")]
	//	unsafe IntPtr Constructor (string path, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);

	//	// +(instancetype _Nullable)stringWithContentsOfURL:(NSURL * _Nonnull)url usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("stringWithContentsOfURL:usedEncoding:error:")]
	//	[return: NullAllowed]
	//	unsafe NSString StringWithContentsOfURL (NSUrl url, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);

	//	// +(instancetype _Nullable)stringWithContentsOfFile:(NSString * _Nonnull)path usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("stringWithContentsOfFile:usedEncoding:error:")]
	//	[return: NullAllowed]
	//	unsafe NSString StringWithContentsOfFile (string path, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);
	//}

	//// @interface NSStringEncodingDetection (NSString)
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_NSStringEncodingDetection
	//{
	//	// +(NSStringEncoding)stringEncodingForData:(NSData * _Nonnull)data encodingOptions:(NSDictionary<NSStringEncodingDetectionOptionsKey,id> * _Nullable)opts convertedString:(NSString * _Nullable * _Nullable)string usedLossyConversion:(BOOL * _Nullable)usedLossyConversion __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Static]
	//	[Export ("stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:")]
	//	unsafe nuint StringEncodingForData (NSData data, [NullAllowed] NSDictionary<NSString, NSObject> opts, [NullAllowed] out string @string, [NullAllowed] bool* usedLossyConversion);
	//}

	//// @interface NSItemProvider (NSString) <NSItemProviderReading, NSItemProviderWriting>
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_NSItemProvider : INSItemProviderReading, INSItemProviderWriting
	//{
	//}

	//// @interface NSMutableString : NSString
	//[BaseType (typeof(NSString))]
	//interface NSMutableString
	//{
	//	// -(void)replaceCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)aString;
	//	[Export ("replaceCharactersInRange:withString:")]
	//	void ReplaceCharactersInRange (NSRange range, string aString);
	//}

	//// @interface NSMutableStringExtensionMethods (NSMutableString)
	//[Category]
	//[BaseType (typeof(NSMutableString))]
	//interface NSMutableString_NSMutableStringExtensionMethods
	//{
	//	// -(void)insertString:(NSString * _Nonnull)aString atIndex:(NSUInteger)loc;
	//	[Export ("insertString:atIndex:")]
	//	void InsertString (string aString, nuint loc);

	//	// -(void)deleteCharactersInRange:(NSRange)range;
	//	[Export ("deleteCharactersInRange:")]
	//	void DeleteCharactersInRange (NSRange range);

	//	// -(void)appendString:(NSString * _Nonnull)aString;
	//	[Export ("appendString:")]
	//	void AppendString (string aString);

	//	// -(void)appendFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
	//	[Internal]
	//	[Export ("appendFormat:", IsVariadic = true)]
	//	void AppendFormat (string format, IntPtr varArgs);

	//	// -(void)setString:(NSString * _Nonnull)aString;
	//	[Export ("setString:")]
	//	void SetString (string aString);

	//	// -(NSUInteger)replaceOccurrencesOfString:(NSString * _Nonnull)target withString:(NSString * _Nonnull)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange;
	//	[Export ("replaceOccurrencesOfString:withString:options:range:")]
	//	nuint ReplaceOccurrencesOfString (string target, string replacement, NSStringCompareOptions options, NSRange searchRange);

	//	// -(BOOL)applyTransform:(NSStringTransform _Nonnull)transform reverse:(BOOL)reverse range:(NSRange)range updatedRange:(NSRangePointer _Nullable)resultingRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("applyTransform:reverse:range:updatedRange:")]
	//	unsafe bool ApplyTransform (string transform, bool reverse, NSRange range, [NullAllowed] NSRangePointer* resultingRange);

	//	// -(NSMutableString * _Nonnull)initWithCapacity:(NSUInteger)capacity;
	//	[Export ("initWithCapacity:")]
	//	IntPtr Constructor (nuint capacity);

	//	// +(NSMutableString * _Nonnull)stringWithCapacity:(NSUInteger)capacity;
	//	[Static]
	//	[Export ("stringWithCapacity:")]
	//	NSMutableString StringWithCapacity (nuint capacity);
	//}

	//// @interface NSExtendedStringPropertyListParsing (NSString)
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_NSExtendedStringPropertyListParsing
	//{
	//	// -(id _Nonnull)propertyList;
	//	[Export ("propertyList")]
	//	[Verify (MethodToProperty)]
	//	NSObject PropertyList { get; }

	//	// -(NSDictionary * _Nullable)propertyListFromStringsFileFormat;
	//	[NullAllowed, Export ("propertyListFromStringsFileFormat")]
	//	[Verify (MethodToProperty)]
	//	NSDictionary PropertyListFromStringsFileFormat { get; }
	//}

	//// @interface NSStringDeprecated (NSString)
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_NSStringDeprecated
	//{
	//	// -(const char * _Nullable)cString __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((objc_returns_inner_pointer));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -cStringUsingEncoding: instead")]
	//	[NullAllowed, Export ("cString")]
	//	[Verify (MethodToProperty)]
	//	unsafe sbyte* CString { get; }

	//	// -(const char * _Nullable)lossyCString __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((objc_returns_inner_pointer));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -cStringUsingEncoding: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -cStringUsingEncoding: instead")]
	//	[NullAllowed, Export ("lossyCString")]
	//	[Verify (MethodToProperty)]
	//	unsafe sbyte* LossyCString { get; }

	//	// -(NSUInteger)cStringLength __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -lengthOfBytesUsingEncoding: instead")]
	//	[Export ("cStringLength")]
	//	[Verify (MethodToProperty)]
	//	nuint CStringLength { get; }

	//	// -(void)getCString:(char * _Nonnull)bytes __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Export ("getCString:")]
	//	unsafe void GetCString (sbyte* bytes);

	//	// -(void)getCString:(char * _Nonnull)bytes maxLength:(NSUInteger)maxLength __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Export ("getCString:maxLength:")]
	//	unsafe void GetCString (sbyte* bytes, nuint maxLength);

	//	// -(void)getCString:(char * _Nonnull)bytes maxLength:(NSUInteger)maxLength range:(NSRange)aRange remainingRange:(NSRangePointer _Nullable)leftoverRange __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -getCString:maxLength:encoding: instead")]
	//	[Export ("getCString:maxLength:range:remainingRange:")]
	//	unsafe void GetCString (sbyte* bytes, nuint maxLength, NSRange aRange, [NullAllowed] NSRangePointer* leftoverRange);

	//	// -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -writeToFile:atomically:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -writeToFile:atomically:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -writeToFile:atomically:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -writeToFile:atomically:error: instead")]
	//	[Export ("writeToFile:atomically:")]
	//	bool WriteToFile (string path, bool useAuxiliaryFile);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -writeToURL:atomically:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -writeToURL:atomically:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -writeToURL:atomically:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -writeToURL:atomically:error: instead")]
	//	[Export ("writeToURL:atomically:")]
	//	bool WriteToURL (NSUrl url, bool atomically);

	//	// -(id _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -initWithContentsOfFile:encoding:error: instead")]
	//	[Export ("initWithContentsOfFile:")]
	//	IntPtr Constructor (string path);

	//	// -(id _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -initWithContentsOfURL:encoding:error: instead")]
	//	[Export ("initWithContentsOfURL:")]
	//	IntPtr Constructor (NSUrl url);

	//	// +(id _Nullable)stringWithContentsOfFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
	//	[Static]
	//	[Export ("stringWithContentsOfFile:")]
	//	[return: NullAllowed]
	//	NSObject StringWithContentsOfFile (string path);

	//	// +(id _Nullable)stringWithContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
	//	[Static]
	//	[Export ("stringWithContentsOfURL:")]
	//	[return: NullAllowed]
	//	NSObject StringWithContentsOfURL (NSUrl url);

	//	// -(id _Nullable)initWithCStringNoCopy:(char * _Nonnull)bytes length:(NSUInteger)length freeWhenDone:(BOOL)freeBuffer __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -initWithCString:encoding: instead")]
	//	[Export ("initWithCStringNoCopy:length:freeWhenDone:")]
	//	unsafe IntPtr Constructor (sbyte* bytes, nuint length, bool freeBuffer);

	//	// -(id _Nullable)initWithCString:(const char * _Nonnull)bytes length:(NSUInteger)length __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -initWithCString:encoding: instead")]
	//	[Export ("initWithCString:length:")]
	//	unsafe IntPtr Constructor (sbyte* bytes, nuint length);

	//	// -(id _Nullable)initWithCString:(const char * _Nonnull)bytes __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -initWithCString:encoding: instead")]
	//	[Export ("initWithCString:")]
	//	unsafe IntPtr Constructor (sbyte* bytes);

	//	// +(id _Nullable)stringWithCString:(const char * _Nonnull)bytes length:(NSUInteger)length __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding:")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding:")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding:")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding:")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding:")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding:")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use +stringWithCString:encoding:")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use +stringWithCString:encoding:")]
	//	[Static]
	//	[Export ("stringWithCString:length:")]
	//	[return: NullAllowed]
	//	unsafe NSObject StringWithCString (sbyte* bytes, nuint length);

	//	// +(id _Nullable)stringWithCString:(const char * _Nonnull)bytes __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use +stringWithCString:encoding: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use +stringWithCString:encoding: instead")]
	//	[Static]
	//	[Export ("stringWithCString:")]
	//	[return: NullAllowed]
	//	unsafe NSObject StringWithCString (sbyte* bytes);

	//	// -(void)getCharacters:(unichar * _Nonnull)buffer;
	//	[Export ("getCharacters:")]
	//	unsafe void GetCharacters (ushort* buffer);
	//}

	//// @interface NSSimpleCString : NSString
	//[BaseType (typeof(NSString))]
	//interface NSSimpleCString
	//{
	//}

	//// @interface NSConstantString : NSSimpleCString
	//[BaseType (typeof(NSSimpleCString))]
	//interface NSConstantString
	//{
	//}

	//// audit-objc-generics: @interface NSDictionary<__covariant KeyType, __covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
	//[BaseType (typeof(NSObject))]
	//interface NSDictionary : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
	//{
	//	// @property (readonly) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// -(ObjectType _Nullable)objectForKey:(KeyType _Nonnull)aKey;
	//	[Export ("objectForKey:")]
	//	[return: NullAllowed]
	//	NSObject ObjectForKey (NSObject aKey);

	//	// -(NSEnumerator<KeyType> * _Nonnull)keyEnumerator;
	//	[Export ("keyEnumerator")]
	//	[Verify (MethodToProperty)]
	//	NSEnumerator<NSObject> KeyEnumerator { get; }

	//	// -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects forKeys:(KeyType<NSCopying>  _Nonnull const * _Nullable)keys count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
	//	[Export ("initWithObjects:forKeys:count:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSObject[] objects, [NullAllowed] NSObject[] keys, nuint cnt);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSExtendedDictionary (NSDictionary)
	//[Category]
	//[BaseType (typeof(NSDictionary))]
	//interface NSDictionary_NSExtendedDictionary
	//{
	//	// @property (readonly, copy) NSArray<KeyType> * _Nonnull allKeys;
	//	[Export ("allKeys", ArgumentSemantic.Copy)]
	//	NSObject[] AllKeys { get; }

	//	// -(NSArray<KeyType> * _Nonnull)allKeysForObject:(ObjectType _Nonnull)anObject;
	//	[Export ("allKeysForObject:")]
	//	NSObject[] AllKeysForObject (NSObject anObject);

	//	// @property (readonly, copy) NSArray<ObjectType> * _Nonnull allValues;
	//	[Export ("allValues", ArgumentSemantic.Copy)]
	//	NSObject[] AllValues { get; }

	//	// @property (readonly, copy) NSString * _Nonnull description;
	//	[Export ("description")]
	//	string Description { get; }

	//	// @property (readonly, copy) NSString * _Nonnull descriptionInStringsFileFormat;
	//	[Export ("descriptionInStringsFileFormat")]
	//	string DescriptionInStringsFileFormat { get; }

	//	// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
	//	[Export ("descriptionWithLocale:")]
	//	string DescriptionWithLocale ([NullAllowed] NSObject locale);

	//	// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale indent:(NSUInteger)level;
	//	[Export ("descriptionWithLocale:indent:")]
	//	string DescriptionWithLocale ([NullAllowed] NSObject locale, nuint level);

	//	// -(BOOL)isEqualToDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
	//	[Export ("isEqualToDictionary:")]
	//	bool IsEqualToDictionary (NSDictionary<NSObject, NSObject> otherDictionary);

	//	// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
	//	[Export ("objectEnumerator")]
	//	[Verify (MethodToProperty)]
	//	NSEnumerator<NSObject> ObjectEnumerator { get; }

	//	// -(NSArray<ObjectType> * _Nonnull)objectsForKeys:(NSArray<KeyType> * _Nonnull)keys notFoundMarker:(ObjectType _Nonnull)marker;
	//	[Export ("objectsForKeys:notFoundMarker:")]
	//	NSObject[] ObjectsForKeys (NSObject[] keys, NSObject marker);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("writeToURL:error:")]
	//	bool WriteToURL (NSUrl url, [NullAllowed] out NSError error);

	//	// -(NSArray<KeyType> * _Nonnull)keysSortedByValueUsingSelector:(SEL _Nonnull)comparator;
	//	[Export ("keysSortedByValueUsingSelector:")]
	//	NSObject[] KeysSortedByValueUsingSelector (Selector comparator);

	//	// -(void)getObjects:(ObjectType  _Nonnull * _Nullable)objects andKeys:(KeyType  _Nonnull * _Nullable)keys count:(NSUInteger)count __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("getObjects:andKeys:count:")]
	//	void GetObjects ([NullAllowed] NSObject[] objects, [NullAllowed] NSObject[] keys, nuint count);

	//	// -(ObjectType _Nullable)objectForKeyedSubscript:(KeyType _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("objectForKeyedSubscript:")]
	//	[return: NullAllowed]
	//	NSObject ObjectForKeyedSubscript (NSObject key);

	//	// -(void)enumerateKeysAndObjectsUsingBlock:(void (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateKeysAndObjectsUsingBlock:")]
	//	unsafe void EnumerateKeysAndObjectsUsingBlock (Action<NSObject, NSObject, bool*> block);

	//	// -(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateKeysAndObjectsWithOptions:usingBlock:")]
	//	unsafe void EnumerateKeysAndObjectsWithOptions (NSEnumerationOptions opts, Action<NSObject, NSObject, bool*> block);

	//	// -(NSArray<KeyType> * _Nonnull)keysSortedByValueUsingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("keysSortedByValueUsingComparator:")]
	//	NSObject[] KeysSortedByValueUsingComparator (NSComparator cmptr);

	//	// -(NSArray<KeyType> * _Nonnull)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("keysSortedByValueWithOptions:usingComparator:")]
	//	NSObject[] KeysSortedByValueWithOptions (NSSortOptions opts, NSComparator cmptr);

	//	// -(NSSet<KeyType> * _Nonnull)keysOfEntriesPassingTest:(BOOL (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("keysOfEntriesPassingTest:")]
	//	unsafe NSSet<NSObject> KeysOfEntriesPassingTest (Func<NSObject, NSObject, bool*, bool> predicate);

	//	// -(NSSet<KeyType> * _Nonnull)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("keysOfEntriesWithOptions:passingTest:")]
	//	unsafe NSSet<NSObject> KeysOfEntriesWithOptions (NSEnumerationOptions opts, Func<NSObject, NSObject, bool*, bool> predicate);
	//}

	//// @interface NSDeprecated (NSDictionary)
	//[Category]
	//[BaseType (typeof(NSDictionary))]
	//interface NSDictionary_NSDeprecated
	//{
	//	// -(void)getObjects:(ObjectType  _Nonnull * _Nullable)objects andKeys:(KeyType  _Nonnull * _Nullable)keys __attribute__((availability(tvos, introduced=9.0, deprecated=11.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=4.0))) __attribute__((availability(ios, introduced=2.0, deprecated=11.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.13)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -getObjects:andKeys:count: instead")]
	//	[Deprecated (PlatformName.TvOS, 11, 0, message: "Use -getObjects:andKeys:count: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -getObjects:andKeys:count: instead")]
	//	[Deprecated (PlatformName.WatchOS, 4, 0, message: "Use -getObjects:andKeys:count: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -getObjects:andKeys:count: instead")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use -getObjects:andKeys:count: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -getObjects:andKeys:count: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 13, message: "Use -getObjects:andKeys:count: instead")]
	//	[Export ("getObjects:andKeys:")]
	//	void GetObjects ([NullAllowed] NSObject[] objects, [NullAllowed] NSObject[] keys);

	//	// +(NSDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("dictionaryWithContentsOfFile:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSObject, NSObject> DictionaryWithContentsOfFile (string path);

	//	// +(NSDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("dictionaryWithContentsOfURL:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSObject, NSObject> DictionaryWithContentsOfURL (NSUrl url);

	//	// -(NSDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Export ("initWithContentsOfFile:")]
	//	IntPtr Constructor (string path);

	//	// -(NSDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Export ("initWithContentsOfURL:")]
	//	IntPtr Constructor (NSUrl url);

	//	// -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile;
	//	[Export ("writeToFile:atomically:")]
	//	bool WriteToFile (string path, bool useAuxiliaryFile);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically;
	//	[Export ("writeToURL:atomically:")]
	//	bool WriteToURL (NSUrl url, bool atomically);
	//}

	//// @interface NSDictionaryCreation (NSDictionary)
	//[Category]
	//[BaseType (typeof(NSDictionary))]
	//interface NSDictionary_NSDictionaryCreation
	//{
	//	// +(instancetype _Nonnull)dictionary;
	//	[Static]
	//	[Export ("dictionary")]
	//	NSDictionary Dictionary ();

	//	// +(instancetype _Nonnull)dictionaryWithObject:(ObjectType _Nonnull)object forKey:(KeyType<NSCopying> _Nonnull)key;
	//	[Static]
	//	[Export ("dictionaryWithObject:forKey:")]
	//	NSDictionary DictionaryWithObject (NSObject @object, NSObject key);

	//	// +(instancetype _Nonnull)dictionaryWithObjects:(ObjectType  _Nonnull const * _Nullable)objects forKeys:(KeyType<NSCopying>  _Nonnull const * _Nullable)keys count:(NSUInteger)cnt;
	//	[Static]
	//	[Export ("dictionaryWithObjects:forKeys:count:")]
	//	NSDictionary DictionaryWithObjects ([NullAllowed] NSObject[] objects, [NullAllowed] NSObject[] keys, nuint cnt);

	//	// +(instancetype _Nonnull)dictionaryWithObjectsAndKeys:(id _Nonnull)firstObject, ... __attribute__((sentinel(0, 1)));
	//	[Static, Internal]
	//	[Export ("dictionaryWithObjectsAndKeys:", IsVariadic = true)]
	//	NSDictionary DictionaryWithObjectsAndKeys (NSObject firstObject, IntPtr varArgs);

	//	// +(instancetype _Nonnull)dictionaryWithDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)dict;
	//	[Static]
	//	[Export ("dictionaryWithDictionary:")]
	//	NSDictionary DictionaryWithDictionary (NSDictionary<NSObject, NSObject> dict);

	//	// +(instancetype _Nonnull)dictionaryWithObjects:(NSArray<ObjectType> * _Nonnull)objects forKeys:(NSArray<KeyType<NSCopying>> * _Nonnull)keys;
	//	[Static]
	//	[Export ("dictionaryWithObjects:forKeys:")]
	//	NSDictionary DictionaryWithObjects (NSObject[] objects, NSObject[] keys);

	//	// -(instancetype _Nonnull)initWithObjectsAndKeys:(id _Nonnull)firstObject, ... __attribute__((sentinel(0, 1)));
	//	[Internal]
	//	[Export ("initWithObjectsAndKeys:", IsVariadic = true)]
	//	IntPtr Constructor (NSObject firstObject, IntPtr varArgs);

	//	// -(instancetype _Nonnull)initWithDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
	//	[Export ("initWithDictionary:")]
	//	IntPtr Constructor (NSDictionary<NSObject, NSObject> otherDictionary);

	//	// -(instancetype _Nonnull)initWithDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary copyItems:(BOOL)flag;
	//	[Export ("initWithDictionary:copyItems:")]
	//	IntPtr Constructor (NSDictionary<NSObject, NSObject> otherDictionary, bool flag);

	//	// -(instancetype _Nonnull)initWithObjects:(NSArray<ObjectType> * _Nonnull)objects forKeys:(NSArray<KeyType<NSCopying>> * _Nonnull)keys;
	//	[Export ("initWithObjects:forKeys:")]
	//	IntPtr Constructor (NSObject[] objects, NSObject[] keys);

	//	// -(NSDictionary<NSString *,ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("initWithContentsOfURL:error:")]
	//	IntPtr Constructor (NSUrl url, [NullAllowed] out NSError error);

	//	// +(NSDictionary<NSString *,ObjectType> * _Nullable)dictionaryWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("dictionaryWithContentsOfURL:error:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> DictionaryWithContentsOfURL (NSUrl url, [NullAllowed] out NSError error);
	//}

	//// audit-objc-generics: @interface NSMutableDictionary<KeyType, ObjectType> : NSDictionary
	//[BaseType (typeof(NSDictionary))]
	//interface NSMutableDictionary
	//{
	//	// -(void)removeObjectForKey:(KeyType _Nonnull)aKey;
	//	[Export ("removeObjectForKey:")]
	//	void RemoveObjectForKey (NSObject aKey);

	//	// -(void)setObject:(ObjectType _Nonnull)anObject forKey:(KeyType<NSCopying> _Nonnull)aKey;
	//	[Export ("setObject:forKey:")]
	//	void SetObject (NSObject anObject, NSObject aKey);

	//	// -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
	//	[Export ("initWithCapacity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nuint numItems);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSExtendedMutableDictionary (NSMutableDictionary)
	//[Category]
	//[BaseType (typeof(NSMutableDictionary))]
	//interface NSMutableDictionary_NSExtendedMutableDictionary
	//{
	//	// -(void)addEntriesFromDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
	//	[Export ("addEntriesFromDictionary:")]
	//	void AddEntriesFromDictionary (NSDictionary<NSObject, NSObject> otherDictionary);

	//	// -(void)removeAllObjects;
	//	[Export ("removeAllObjects")]
	//	void RemoveAllObjects ();

	//	// -(void)removeObjectsForKeys:(NSArray<KeyType> * _Nonnull)keyArray;
	//	[Export ("removeObjectsForKeys:")]
	//	void RemoveObjectsForKeys (NSObject[] keyArray);

	//	// -(void)setDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
	//	[Export ("setDictionary:")]
	//	void SetDictionary (NSDictionary<NSObject, NSObject> otherDictionary);

	//	// -(void)setObject:(ObjectType _Nullable)obj forKeyedSubscript:(KeyType<NSCopying> _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("setObject:forKeyedSubscript:")]
	//	void SetObject ([NullAllowed] NSObject obj, NSObject key);
	//}

	//// @interface NSMutableDictionaryCreation (NSMutableDictionary)
	//[Category]
	//[BaseType (typeof(NSMutableDictionary))]
	//interface NSMutableDictionary_NSMutableDictionaryCreation
	//{
	//	// +(instancetype _Nonnull)dictionaryWithCapacity:(NSUInteger)numItems;
	//	[Static]
	//	[Export ("dictionaryWithCapacity:")]
	//	NSMutableDictionary DictionaryWithCapacity (nuint numItems);

	//	// +(NSMutableDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("dictionaryWithContentsOfFile:")]
	//	[return: NullAllowed]
	//	NSMutableDictionary<NSObject, NSObject> DictionaryWithContentsOfFile (string path);

	//	// +(NSMutableDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("dictionaryWithContentsOfURL:")]
	//	[return: NullAllowed]
	//	NSMutableDictionary<NSObject, NSObject> DictionaryWithContentsOfURL (NSUrl url);

	//	// -(NSMutableDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Export ("initWithContentsOfFile:")]
	//	IntPtr Constructor (string path);

	//	// -(NSMutableDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Export ("initWithContentsOfURL:")]
	//	IntPtr Constructor (NSUrl url);
	//}

	//// @interface NSSharedKeySetDictionary (NSDictionary)
	//[Category]
	//[BaseType (typeof(NSDictionary))]
	//interface NSDictionary_NSSharedKeySetDictionary
	//{
	//	// +(id _Nonnull)sharedKeySetForKeys:(NSArray<KeyType<NSCopying>> * _Nonnull)keys __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Static]
	//	[Export ("sharedKeySetForKeys:")]
	//	NSObject SharedKeySetForKeys (NSObject[] keys);
	//}

	//// @interface NSSharedKeySetDictionary (NSMutableDictionary)
	//[Category]
	//[BaseType (typeof(NSMutableDictionary))]
	//interface NSMutableDictionary_NSSharedKeySetDictionary
	//{
	//	// +(NSMutableDictionary<KeyType,ObjectType> * _Nonnull)dictionaryWithSharedKeySet:(id _Nonnull)keyset __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Static]
	//	[Export ("dictionaryWithSharedKeySet:")]
	//	NSMutableDictionary<NSObject, NSObject> DictionaryWithSharedKeySet (NSObject keyset);
	//}

	//// @interface NSGenericFastEnumeraiton (NSDictionary) <NSFastEnumeration>
	//[Category]
	//[BaseType (typeof(NSDictionary))]
	//interface NSDictionary_NSGenericFastEnumeraiton : INSFastEnumeration
	//{
	//	// -(NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState * _Nonnull)state objects:(K  _Nullable * _Nonnull)buffer count:(NSUInteger)len;
	//	[Export ("countByEnumeratingWithState:objects:count:")]
	//	unsafe nuint CountByEnumeratingWithState (NSFastEnumerationState* state, NSObject[] buffer, nuint len);
	//}

	//// audit-objc-generics: @interface NSSet<__covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
	//[BaseType (typeof(NSObject))]
	//interface NSSet : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
	//{
	//	// @property (readonly) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// -(ObjectType _Nullable)member:(ObjectType _Nonnull)object;
	//	[Export ("member:")]
	//	[return: NullAllowed]
	//	NSObject Member (NSObject @object);

	//	// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
	//	[Export ("objectEnumerator")]
	//	[Verify (MethodToProperty)]
	//	NSEnumerator<NSObject> ObjectEnumerator { get; }

	//	// -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
	//	[Export ("initWithObjects:count:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSObject[] objects, nuint cnt);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSExtendedSet (NSSet)
	//[Category]
	//[BaseType (typeof(NSSet))]
	//interface NSSet_NSExtendedSet
	//{
	//	// @property (readonly, copy) NSArray<ObjectType> * _Nonnull allObjects;
	//	[Export ("allObjects", ArgumentSemantic.Copy)]
	//	NSObject[] AllObjects { get; }

	//	// -(ObjectType _Nullable)anyObject;
	//	[NullAllowed, Export ("anyObject")]
	//	[Verify (MethodToProperty)]
	//	NSObject AnyObject { get; }

	//	// -(BOOL)containsObject:(ObjectType _Nonnull)anObject;
	//	[Export ("containsObject:")]
	//	bool ContainsObject (NSObject anObject);

	//	// @property (readonly, copy) NSString * _Nonnull description;
	//	[Export ("description")]
	//	string Description { get; }

	//	// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
	//	[Export ("descriptionWithLocale:")]
	//	string DescriptionWithLocale ([NullAllowed] NSObject locale);

	//	// -(BOOL)intersectsSet:(NSSet<ObjectType> * _Nonnull)otherSet;
	//	[Export ("intersectsSet:")]
	//	bool IntersectsSet (NSSet<NSObject> otherSet);

	//	// -(BOOL)isEqualToSet:(NSSet<ObjectType> * _Nonnull)otherSet;
	//	[Export ("isEqualToSet:")]
	//	bool IsEqualToSet (NSSet<NSObject> otherSet);

	//	// -(BOOL)isSubsetOfSet:(NSSet<ObjectType> * _Nonnull)otherSet;
	//	[Export ("isSubsetOfSet:")]
	//	bool IsSubsetOfSet (NSSet<NSObject> otherSet);

	//	// -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector;
	//	[Export ("makeObjectsPerformSelector:")]
	//	void MakeObjectsPerformSelector (Selector aSelector);

	//	// -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)argument;
	//	[Export ("makeObjectsPerformSelector:withObject:")]
	//	void MakeObjectsPerformSelector (Selector aSelector, [NullAllowed] NSObject argument);

	//	// -(NSSet<ObjectType> * _Nonnull)setByAddingObject:(ObjectType _Nonnull)anObject __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("setByAddingObject:")]
	//	NSSet<NSObject> SetByAddingObject (NSObject anObject);

	//	// -(NSSet<ObjectType> * _Nonnull)setByAddingObjectsFromSet:(NSSet<ObjectType> * _Nonnull)other __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("setByAddingObjectsFromSet:")]
	//	NSSet<NSObject> SetByAddingObjectsFromSet (NSSet<NSObject> other);

	//	// -(NSSet<ObjectType> * _Nonnull)setByAddingObjectsFromArray:(NSArray<ObjectType> * _Nonnull)other __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("setByAddingObjectsFromArray:")]
	//	NSSet<NSObject> SetByAddingObjectsFromArray (NSObject[] other);

	//	// -(void)enumerateObjectsUsingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateObjectsUsingBlock:")]
	//	unsafe void EnumerateObjectsUsingBlock (Action<NSObject, bool*> block);

	//	// -(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateObjectsWithOptions:usingBlock:")]
	//	unsafe void EnumerateObjectsWithOptions (NSEnumerationOptions opts, Action<NSObject, bool*> block);

	//	// -(NSSet<ObjectType> * _Nonnull)objectsPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("objectsPassingTest:")]
	//	unsafe NSSet<NSObject> ObjectsPassingTest (Func<NSObject, bool*, bool> predicate);

	//	// -(NSSet<ObjectType> * _Nonnull)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("objectsWithOptions:passingTest:")]
	//	unsafe NSSet<NSObject> ObjectsWithOptions (NSEnumerationOptions opts, Func<NSObject, bool*, bool> predicate);
	//}

	//// @interface NSSetCreation (NSSet)
	//[Category]
	//[BaseType (typeof(NSSet))]
	//interface NSSet_NSSetCreation
	//{
	//	// +(instancetype _Nonnull)set;
	//	[Static]
	//	[Export ("set")]
	//	NSSet Set ();

	//	// +(instancetype _Nonnull)setWithObject:(ObjectType _Nonnull)object;
	//	[Static]
	//	[Export ("setWithObject:")]
	//	NSSet SetWithObject (NSObject @object);

	//	// +(instancetype _Nonnull)setWithObjects:(ObjectType  _Nonnull const * _Nonnull)objects count:(NSUInteger)cnt;
	//	[Static]
	//	[Export ("setWithObjects:count:")]
	//	NSSet SetWithObjects (NSObject[] objects, nuint cnt);

	//	// +(instancetype _Nonnull)setWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
	//	[Static, Internal]
	//	[Export ("setWithObjects:", IsVariadic = true)]
	//	NSSet SetWithObjects (NSObject firstObj, IntPtr varArgs);

	//	// +(instancetype _Nonnull)setWithSet:(NSSet<ObjectType> * _Nonnull)set;
	//	[Static]
	//	[Export ("setWithSet:")]
	//	NSSet SetWithSet (NSSet<NSObject> set);

	//	// +(instancetype _Nonnull)setWithArray:(NSArray<ObjectType> * _Nonnull)array;
	//	[Static]
	//	[Export ("setWithArray:")]
	//	NSSet SetWithArray (NSObject[] array);

	//	// -(instancetype _Nonnull)initWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
	//	[Internal]
	//	[Export ("initWithObjects:", IsVariadic = true)]
	//	IntPtr Constructor (NSObject firstObj, IntPtr varArgs);

	//	// -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set;
	//	[Export ("initWithSet:")]
	//	IntPtr Constructor (NSSet<NSObject> set);

	//	// -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
	//	[Export ("initWithSet:copyItems:")]
	//	IntPtr Constructor (NSSet<NSObject> set, bool flag);

	//	// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
	//	[Export ("initWithArray:")]
	//	IntPtr Constructor (NSObject[] array);
	//}

	//// audit-objc-generics: @interface NSMutableSet<ObjectType> : NSSet
	//[BaseType (typeof(NSSet))]
	//interface NSMutableSet
	//{
	//	// -(void)addObject:(ObjectType _Nonnull)object;
	//	[Export ("addObject:")]
	//	void AddObject (NSObject @object);

	//	// -(void)removeObject:(ObjectType _Nonnull)object;
	//	[Export ("removeObject:")]
	//	void RemoveObject (NSObject @object);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
	//	[Export ("initWithCapacity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nuint numItems);
	//}

	//// @interface NSExtendedMutableSet (NSMutableSet)
	//[Category]
	//[BaseType (typeof(NSMutableSet))]
	//interface NSMutableSet_NSExtendedMutableSet
	//{
	//	// -(void)addObjectsFromArray:(NSArray<ObjectType> * _Nonnull)array;
	//	[Export ("addObjectsFromArray:")]
	//	void AddObjectsFromArray (NSObject[] array);

	//	// -(void)intersectSet:(NSSet<ObjectType> * _Nonnull)otherSet;
	//	[Export ("intersectSet:")]
	//	void IntersectSet (NSSet<NSObject> otherSet);

	//	// -(void)minusSet:(NSSet<ObjectType> * _Nonnull)otherSet;
	//	[Export ("minusSet:")]
	//	void MinusSet (NSSet<NSObject> otherSet);

	//	// -(void)removeAllObjects;
	//	[Export ("removeAllObjects")]
	//	void RemoveAllObjects ();

	//	// -(void)unionSet:(NSSet<ObjectType> * _Nonnull)otherSet;
	//	[Export ("unionSet:")]
	//	void UnionSet (NSSet<NSObject> otherSet);

	//	// -(void)setSet:(NSSet<ObjectType> * _Nonnull)otherSet;
	//	[Export ("setSet:")]
	//	void SetSet (NSSet<NSObject> otherSet);
	//}

	//// @interface NSMutableSetCreation (NSMutableSet)
	//[Category]
	//[BaseType (typeof(NSMutableSet))]
	//interface NSMutableSet_NSMutableSetCreation
	//{
	//	// +(instancetype _Nonnull)setWithCapacity:(NSUInteger)numItems;
	//	[Static]
	//	[Export ("setWithCapacity:")]
	//	NSMutableSet SetWithCapacity (nuint numItems);
	//}

	//// audit-objc-generics: @interface NSCountedSet<ObjectType> : NSMutableSet
	//[BaseType (typeof(NSMutableSet))]
	//interface NSCountedSet
	//{
	//	// -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
	//	[Export ("initWithCapacity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nuint numItems);

	//	// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
	//	[Export ("initWithArray:")]
	//	IntPtr Constructor (NSObject[] array);

	//	// -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set;
	//	[Export ("initWithSet:")]
	//	IntPtr Constructor (NSSet<NSObject> set);

	//	// -(NSUInteger)countForObject:(ObjectType _Nonnull)object;
	//	[Export ("countForObject:")]
	//	nuint CountForObject (NSObject @object);

	//	// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
	//	[Export ("objectEnumerator")]
	//	[Verify (MethodToProperty)]
	//	NSEnumerator<NSObject> ObjectEnumerator { get; }

	//	// -(void)addObject:(ObjectType _Nonnull)object;
	//	[Export ("addObject:")]
	//	void AddObject (NSObject @object);

	//	// -(void)removeObject:(ObjectType _Nonnull)object;
	//	[Export ("removeObject:")]
	//	void RemoveObject (NSObject @object);
	//}

	//// @interface NSProgress : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSProgress
	//{
	//	// +(NSProgress * _Nullable)currentProgress;
	//	[Static]
	//	[NullAllowed, Export ("currentProgress")]
	//	[Verify (MethodToProperty)]
	//	NSProgress CurrentProgress { get; }

	//	// +(NSProgress * _Nonnull)progressWithTotalUnitCount:(int64_t)unitCount;
	//	[Static]
	//	[Export ("progressWithTotalUnitCount:")]
	//	NSProgress ProgressWithTotalUnitCount (long unitCount);

	//	// +(NSProgress * _Nonnull)discreteProgressWithTotalUnitCount:(int64_t)unitCount __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("discreteProgressWithTotalUnitCount:")]
	//	NSProgress DiscreteProgressWithTotalUnitCount (long unitCount);

	//	// +(NSProgress * _Nonnull)progressWithTotalUnitCount:(int64_t)unitCount parent:(NSProgress * _Nonnull)parent pendingUnitCount:(int64_t)portionOfParentTotalUnitCount __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("progressWithTotalUnitCount:parent:pendingUnitCount:")]
	//	NSProgress ProgressWithTotalUnitCount (long unitCount, NSProgress parent, long portionOfParentTotalUnitCount);

	//	// -(instancetype _Nonnull)initWithParent:(NSProgress * _Nullable)parentProgressOrNil userInfo:(NSDictionary<NSProgressUserInfoKey,id> * _Nullable)userInfoOrNil __attribute__((objc_designated_initializer));
	//	[Export ("initWithParent:userInfo:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSProgress parentProgressOrNil, [NullAllowed] NSDictionary<NSString, NSObject> userInfoOrNil);

	//	// -(void)becomeCurrentWithPendingUnitCount:(int64_t)unitCount;
	//	[Export ("becomeCurrentWithPendingUnitCount:")]
	//	void BecomeCurrentWithPendingUnitCount (long unitCount);

	//	// -(void)performAsCurrentWithPendingUnitCount:(int64_t)unitCount usingBlock:(void (^ _Nonnull)(void))work __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("performAsCurrentWithPendingUnitCount:usingBlock:")]
	//	void PerformAsCurrentWithPendingUnitCount (long unitCount, Action work);

	//	// -(void)resignCurrent;
	//	[Export ("resignCurrent")]
	//	void ResignCurrent ();

	//	// -(void)addChild:(NSProgress * _Nonnull)child withPendingUnitCount:(int64_t)inUnitCount __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("addChild:withPendingUnitCount:")]
	//	void AddChild (NSProgress child, long inUnitCount);

	//	// @property int64_t totalUnitCount;
	//	[Export ("totalUnitCount")]
	//	long TotalUnitCount { get; set; }

	//	// @property int64_t completedUnitCount;
	//	[Export ("completedUnitCount")]
	//	long CompletedUnitCount { get; set; }

	//	// @property (copy) NSString * _Null_unspecified localizedDescription;
	//	[Export ("localizedDescription")]
	//	string LocalizedDescription { get; set; }

	//	// @property (copy) NSString * _Null_unspecified localizedAdditionalDescription;
	//	[Export ("localizedAdditionalDescription")]
	//	string LocalizedAdditionalDescription { get; set; }

	//	// @property (getter = isCancellable) BOOL cancellable;
	//	[Export ("cancellable")]
	//	bool Cancellable { [Bind ("isCancellable")] get; set; }

	//	// @property (getter = isPausable) BOOL pausable;
	//	[Export ("pausable")]
	//	bool Pausable { [Bind ("isPausable")] get; set; }

	//	// @property (readonly, getter = isCancelled) BOOL cancelled;
	//	[Export ("cancelled")]
	//	bool Cancelled { [Bind ("isCancelled")] get; }

	//	// @property (readonly, getter = isPaused) BOOL paused;
	//	[Export ("paused")]
	//	bool Paused { [Bind ("isPaused")] get; }

	//	// @property (copy) void (^ _Nullable)(void) cancellationHandler;
	//	[NullAllowed, Export ("cancellationHandler", ArgumentSemantic.Copy)]
	//	Action CancellationHandler { get; set; }

	//	// @property (copy) void (^ _Nullable)(void) pausingHandler;
	//	[NullAllowed, Export ("pausingHandler", ArgumentSemantic.Copy)]
	//	Action PausingHandler { get; set; }

	//	// @property (copy) void (^ _Nullable)(void) resumingHandler __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("resumingHandler", ArgumentSemantic.Copy)]
	//	Action ResumingHandler { get; set; }

	//	// -(void)setUserInfoObject:(id _Nullable)objectOrNil forKey:(NSProgressUserInfoKey _Nonnull)key;
	//	[Export ("setUserInfoObject:forKey:")]
	//	void SetUserInfoObject ([NullAllowed] NSObject objectOrNil, string key);

	//	// @property (readonly, getter = isIndeterminate) BOOL indeterminate;
	//	[Export ("indeterminate")]
	//	bool Indeterminate { [Bind ("isIndeterminate")] get; }

	//	// @property (readonly) double fractionCompleted;
	//	[Export ("fractionCompleted")]
	//	double FractionCompleted { get; }

	//	// @property (readonly, getter = isFinished) BOOL finished;
	//	[Export ("finished")]
	//	bool Finished { [Bind ("isFinished")] get; }

	//	// -(void)cancel;
	//	[Export ("cancel")]
	//	void Cancel ();

	//	// -(void)pause;
	//	[Export ("pause")]
	//	void Pause ();

	//	// -(void)resume __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("resume")]
	//	void Resume ();

	//	// @property (readonly, copy) NSDictionary<NSProgressUserInfoKey,id> * _Nonnull userInfo;
	//	[Export ("userInfo", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> UserInfo { get; }

	//	// @property (copy) NSProgressKind _Nullable kind;
	//	[NullAllowed, Export ("kind")]
	//	string Kind { get; set; }

	//	// @property (copy) NSNumber * _Nullable estimatedTimeRemaining __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("estimatedTimeRemaining", ArgumentSemantic.Copy)]
	//	NSNumber EstimatedTimeRemaining { get; set; }

	//	// @property (copy) NSNumber * _Nullable throughput __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("throughput", ArgumentSemantic.Copy)]
	//	NSNumber Throughput { get; set; }

	//	// @property (copy) NSProgressFileOperationKind _Nullable fileOperationKind __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("fileOperationKind")]
	//	string FileOperationKind { get; set; }

	//	// @property (copy) NSURL * _Nullable fileURL __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("fileURL", ArgumentSemantic.Copy)]
	//	NSUrl FileURL { get; set; }

	//	// @property (copy) NSNumber * _Nullable fileTotalCount __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("fileTotalCount", ArgumentSemantic.Copy)]
	//	NSNumber FileTotalCount { get; set; }

	//	// @property (copy) NSNumber * _Nullable fileCompletedCount __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("fileCompletedCount", ArgumentSemantic.Copy)]
	//	NSNumber FileCompletedCount { get; set; }

	//	// -(void)publish __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,9)]
	//	[Export ("publish")]
	//	void Publish ();

	//	// -(void)unpublish __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,9)]
	//	[Export ("unpublish")]
	//	void Unpublish ();

	//	// +(id _Nonnull)addSubscriberForFileURL:(NSURL * _Nonnull)url withPublishingHandler:(NSProgressPublishingHandler _Nonnull)publishingHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,9)]
	//	[Static]
	//	[Export ("addSubscriberForFileURL:withPublishingHandler:")]
	//	NSObject AddSubscriberForFileURL (NSUrl url, NSProgressPublishingHandler publishingHandler);

	//	// +(void)removeSubscriber:(id _Nonnull)subscriber __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,9)]
	//	[Static]
	//	[Export ("removeSubscriber:")]
	//	void RemoveSubscriber (NSObject subscriber);

	//	// @property (readonly, getter = isOld) BOOL old __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 9)]
	//	[Export ("old")]
	//	bool Old { [Bind ("isOld")] get; }
	//}

	//// typedef void (^NSProgressUnpublishingHandler)();
	//delegate void NSProgressUnpublishingHandler ();

	//// typedef NSProgressUnpublishingHandler _Nullable (^NSProgressPublishingHandler)(NSProgress * _Nonnull);
	//delegate NSProgressUnpublishingHandler NSProgressPublishingHandler (NSProgress arg0);

	//// @protocol NSProgressReporting <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSProgressReporting
	//{
	//	// @required @property (readonly) NSProgress * _Nonnull progress;
	//	[Abstract]
	//	[Export ("progress")]
	//	NSProgress Progress { get; }
	//}

	//// @interface NSNotification : NSObject <NSCopying, NSCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSNotification : INSCopying, INSCoding
	//{
	//	// @property (readonly, copy) NSNotificationName _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, retain) id _Nullable object;
	//	[NullAllowed, Export ("object", ArgumentSemantic.Retain)]
	//	NSObject Object { get; }

	//	// @property (readonly, copy) NSDictionary * _Nullable userInfo;
	//	[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
	//	NSDictionary UserInfo { get; }

	//	// -(instancetype _Nonnull)initWithName:(NSNotificationName _Nonnull)name object:(id _Nullable)object userInfo:(NSDictionary * _Nullable)userInfo __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("initWithName:object:userInfo:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string name, [NullAllowed] NSObject @object, [NullAllowed] NSDictionary userInfo);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSNotificationCreation (NSNotification)
	//[Category]
	//[BaseType (typeof(NSNotification))]
	//interface NSNotification_NSNotificationCreation
	//{
	//	// +(instancetype _Nonnull)notificationWithName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject;
	//	[Static]
	//	[Export ("notificationWithName:object:")]
	//	NSNotification NotificationWithName (string aName, [NullAllowed] NSObject anObject);

	//	// +(instancetype _Nonnull)notificationWithName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject userInfo:(NSDictionary * _Nullable)aUserInfo;
	//	[Static]
	//	[Export ("notificationWithName:object:userInfo:")]
	//	NSNotification NotificationWithName (string aName, [NullAllowed] NSObject anObject, [NullAllowed] NSDictionary aUserInfo);
	//}

	//// @interface NSNotificationCenter : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSNotificationCenter
	//{
	//	// @property (readonly, strong, class) NSNotificationCenter * _Nonnull defaultCenter;
	//	[Static]
	//	[Export ("defaultCenter", ArgumentSemantic.Strong)]
	//	NSNotificationCenter DefaultCenter { get; }

	//	// -(void)addObserver:(id _Nonnull)observer selector:(SEL _Nonnull)aSelector name:(NSNotificationName _Nullable)aName object:(id _Nullable)anObject;
	//	[Export ("addObserver:selector:name:object:")]
	//	void AddObserver (NSObject observer, Selector aSelector, [NullAllowed] string aName, [NullAllowed] NSObject anObject);

	//	// -(void)postNotification:(NSNotification * _Nonnull)notification;
	//	[Export ("postNotification:")]
	//	void PostNotification (NSNotification notification);

	//	// -(void)postNotificationName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject;
	//	[Export ("postNotificationName:object:")]
	//	void PostNotificationName (string aName, [NullAllowed] NSObject anObject);

	//	// -(void)postNotificationName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject userInfo:(NSDictionary * _Nullable)aUserInfo;
	//	[Export ("postNotificationName:object:userInfo:")]
	//	void PostNotificationName (string aName, [NullAllowed] NSObject anObject, [NullAllowed] NSDictionary aUserInfo);

	//	// -(void)removeObserver:(id _Nonnull)observer;
	//	[Export ("removeObserver:")]
	//	void RemoveObserver (NSObject observer);

	//	// -(void)removeObserver:(id _Nonnull)observer name:(NSNotificationName _Nullable)aName object:(id _Nullable)anObject;
	//	[Export ("removeObserver:name:object:")]
	//	void RemoveObserver (NSObject observer, [NullAllowed] string aName, [NullAllowed] NSObject anObject);

	//	// -(id<NSObject> _Nonnull)addObserverForName:(NSNotificationName _Nullable)name object:(id _Nullable)obj queue:(NSOperationQueue * _Nullable)queue usingBlock:(void (^ _Nonnull)(NSNotification * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("addObserverForName:object:queue:usingBlock:")]
	//	NSObject AddObserverForName ([NullAllowed] string name, [NullAllowed] NSObject obj, [NullAllowed] NSOperationQueue queue, Action<NSNotification> block);
	//}

	//// @interface NSBundle : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSBundle
	//{
	//	// @property (readonly, strong, class) NSBundle * _Nonnull mainBundle;
	//	[Static]
	//	[Export ("mainBundle", ArgumentSemantic.Strong)]
	//	NSBundle MainBundle { get; }

	//	// +(instancetype _Nullable)bundleWithPath:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("bundleWithPath:")]
	//	[return: NullAllowed]
	//	NSBundle BundleWithPath (string path);

	//	// -(instancetype _Nullable)initWithPath:(NSString * _Nonnull)path __attribute__((objc_designated_initializer));
	//	[Export ("initWithPath:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string path);

	//	// +(instancetype _Nullable)bundleWithURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("bundleWithURL:")]
	//	[return: NullAllowed]
	//	NSBundle BundleWithURL (NSUrl url);

	//	// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("initWithURL:")]
	//	IntPtr Constructor (NSUrl url);

	//	// +(NSBundle * _Nonnull)bundleForClass:(Class _Nonnull)aClass;
	//	[Static]
	//	[Export ("bundleForClass:")]
	//	NSBundle BundleForClass (Class aClass);

	//	// +(NSBundle * _Nullable)bundleWithIdentifier:(NSString * _Nonnull)identifier;
	//	[Static]
	//	[Export ("bundleWithIdentifier:")]
	//	[return: NullAllowed]
	//	NSBundle BundleWithIdentifier (string identifier);

	//	// @property (readonly, copy, class) NSArray<NSBundle *> * _Nonnull allBundles;
	//	[Static]
	//	[Export ("allBundles", ArgumentSemantic.Copy)]
	//	NSBundle[] AllBundles { get; }

	//	// @property (readonly, copy, class) NSArray<NSBundle *> * _Nonnull allFrameworks;
	//	[Static]
	//	[Export ("allFrameworks", ArgumentSemantic.Copy)]
	//	NSBundle[] AllFrameworks { get; }

	//	// -(BOOL)load;
	//	[Export ("load")]
	//	[Verify (MethodToProperty)]
	//	bool Load { get; }

	//	// @property (readonly, getter = isLoaded) BOOL loaded;
	//	[Export ("loaded")]
	//	bool Loaded { [Bind ("isLoaded")] get; }

	//	// -(BOOL)unload;
	//	[Export ("unload")]
	//	[Verify (MethodToProperty)]
	//	bool Unload { get; }

	//	// -(BOOL)preflightAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("preflightAndReturnError:")]
	//	bool PreflightAndReturnError ([NullAllowed] out NSError error);

	//	// -(BOOL)loadAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("loadAndReturnError:")]
	//	bool LoadAndReturnError ([NullAllowed] out NSError error);

	//	// @property (readonly, copy) NSURL * _Nonnull bundleURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("bundleURL", ArgumentSemantic.Copy)]
	//	NSUrl BundleURL { get; }

	//	// @property (readonly, copy) NSURL * _Nullable resourceURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("resourceURL", ArgumentSemantic.Copy)]
	//	NSUrl ResourceURL { get; }

	//	// @property (readonly, copy) NSURL * _Nullable executableURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("executableURL", ArgumentSemantic.Copy)]
	//	NSUrl ExecutableURL { get; }

	//	// -(NSURL * _Nullable)URLForAuxiliaryExecutable:(NSString * _Nonnull)executableName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("URLForAuxiliaryExecutable:")]
	//	[return: NullAllowed]
	//	NSUrl URLForAuxiliaryExecutable (string executableName);

	//	// @property (readonly, copy) NSURL * _Nullable privateFrameworksURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("privateFrameworksURL", ArgumentSemantic.Copy)]
	//	NSUrl PrivateFrameworksURL { get; }

	//	// @property (readonly, copy) NSURL * _Nullable sharedFrameworksURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("sharedFrameworksURL", ArgumentSemantic.Copy)]
	//	NSUrl SharedFrameworksURL { get; }

	//	// @property (readonly, copy) NSURL * _Nullable sharedSupportURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("sharedSupportURL", ArgumentSemantic.Copy)]
	//	NSUrl SharedSupportURL { get; }

	//	// @property (readonly, copy) NSURL * _Nullable builtInPlugInsURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("builtInPlugInsURL", ArgumentSemantic.Copy)]
	//	NSUrl BuiltInPlugInsURL { get; }

	//	// @property (readonly, copy) NSURL * _Nullable appStoreReceiptURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (7, 0)]
	//	[NullAllowed, Export ("appStoreReceiptURL", ArgumentSemantic.Copy)]
	//	NSUrl AppStoreReceiptURL { get; }

	//	// @property (readonly, copy) NSString * _Nonnull bundlePath;
	//	[Export ("bundlePath")]
	//	string BundlePath { get; }

	//	// @property (readonly, copy) NSString * _Nullable resourcePath;
	//	[NullAllowed, Export ("resourcePath")]
	//	string ResourcePath { get; }

	//	// @property (readonly, copy) NSString * _Nullable executablePath;
	//	[NullAllowed, Export ("executablePath")]
	//	string ExecutablePath { get; }

	//	// -(NSString * _Nullable)pathForAuxiliaryExecutable:(NSString * _Nonnull)executableName;
	//	[Export ("pathForAuxiliaryExecutable:")]
	//	[return: NullAllowed]
	//	string PathForAuxiliaryExecutable (string executableName);

	//	// @property (readonly, copy) NSString * _Nullable privateFrameworksPath;
	//	[NullAllowed, Export ("privateFrameworksPath")]
	//	string PrivateFrameworksPath { get; }

	//	// @property (readonly, copy) NSString * _Nullable sharedFrameworksPath;
	//	[NullAllowed, Export ("sharedFrameworksPath")]
	//	string SharedFrameworksPath { get; }

	//	// @property (readonly, copy) NSString * _Nullable sharedSupportPath;
	//	[NullAllowed, Export ("sharedSupportPath")]
	//	string SharedSupportPath { get; }

	//	// @property (readonly, copy) NSString * _Nullable builtInPlugInsPath;
	//	[NullAllowed, Export ("builtInPlugInsPath")]
	//	string BuiltInPlugInsPath { get; }

	//	// +(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath inBundleWithURL:(NSURL * _Nonnull)bundleURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("URLForResource:withExtension:subdirectory:inBundleWithURL:")]
	//	[return: NullAllowed]
	//	NSUrl URLForResource ([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath, NSUrl bundleURL);

	//	// +(NSArray<NSURL *> * _Nullable)URLsForResourcesWithExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath inBundleWithURL:(NSURL * _Nonnull)bundleURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("URLsForResourcesWithExtension:subdirectory:inBundleWithURL:")]
	//	[return: NullAllowed]
	//	NSUrl[] URLsForResourcesWithExtension ([NullAllowed] string ext, [NullAllowed] string subpath, NSUrl bundleURL);

	//	// -(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("URLForResource:withExtension:")]
	//	[return: NullAllowed]
	//	NSUrl URLForResource ([NullAllowed] string name, [NullAllowed] string ext);

	//	// -(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("URLForResource:withExtension:subdirectory:")]
	//	[return: NullAllowed]
	//	NSUrl URLForResource ([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath);

	//	// -(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath localization:(NSString * _Nullable)localizationName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("URLForResource:withExtension:subdirectory:localization:")]
	//	[return: NullAllowed]
	//	NSUrl URLForResource ([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

	//	// -(NSArray<NSURL *> * _Nullable)URLsForResourcesWithExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("URLsForResourcesWithExtension:subdirectory:")]
	//	[return: NullAllowed]
	//	NSUrl[] URLsForResourcesWithExtension ([NullAllowed] string ext, [NullAllowed] string subpath);

	//	// -(NSArray<NSURL *> * _Nullable)URLsForResourcesWithExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath localization:(NSString * _Nullable)localizationName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("URLsForResourcesWithExtension:subdirectory:localization:")]
	//	[return: NullAllowed]
	//	NSUrl[] URLsForResourcesWithExtension ([NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

	//	// +(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext inDirectory:(NSString * _Nonnull)bundlePath;
	//	[Static]
	//	[Export ("pathForResource:ofType:inDirectory:")]
	//	[return: NullAllowed]
	//	string PathForResource ([NullAllowed] string name, [NullAllowed] string ext, string bundlePath);

	//	// +(NSArray<NSString *> * _Nonnull)pathsForResourcesOfType:(NSString * _Nullable)ext inDirectory:(NSString * _Nonnull)bundlePath;
	//	[Static]
	//	[Export ("pathsForResourcesOfType:inDirectory:")]
	//	string[] PathsForResourcesOfType ([NullAllowed] string ext, string bundlePath);

	//	// -(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext;
	//	[Export ("pathForResource:ofType:")]
	//	[return: NullAllowed]
	//	string PathForResource ([NullAllowed] string name, [NullAllowed] string ext);

	//	// -(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath;
	//	[Export ("pathForResource:ofType:inDirectory:")]
	//	[return: NullAllowed]
	//	string PathForResource ([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath);

	//	// -(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath forLocalization:(NSString * _Nullable)localizationName;
	//	[Export ("pathForResource:ofType:inDirectory:forLocalization:")]
	//	[return: NullAllowed]
	//	string PathForResource ([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

	//	// -(NSArray<NSString *> * _Nonnull)pathsForResourcesOfType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath;
	//	[Export ("pathsForResourcesOfType:inDirectory:")]
	//	string[] PathsForResourcesOfType ([NullAllowed] string ext, [NullAllowed] string subpath);

	//	// -(NSArray<NSString *> * _Nonnull)pathsForResourcesOfType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath forLocalization:(NSString * _Nullable)localizationName;
	//	[Export ("pathsForResourcesOfType:inDirectory:forLocalization:")]
	//	string[] PathsForResourcesOfType ([NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

	//	// -(NSString * _Nonnull)localizedStringForKey:(NSString * _Nonnull)key value:(NSString * _Nullable)value table:(NSString * _Nullable)tableName __attribute__((format_arg(1)));
	//	[Export ("localizedStringForKey:value:table:")]
	//	string LocalizedStringForKey (string key, [NullAllowed] string value, [NullAllowed] string tableName);

	//	// @property (readonly, copy) NSString * _Nullable bundleIdentifier;
	//	[NullAllowed, Export ("bundleIdentifier")]
	//	string BundleIdentifier { get; }

	//	// @property (readonly, copy) NSDictionary<NSString *,id> * _Nullable infoDictionary;
	//	[NullAllowed, Export ("infoDictionary", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> InfoDictionary { get; }

	//	// @property (readonly, copy) NSDictionary<NSString *,id> * _Nullable localizedInfoDictionary;
	//	[NullAllowed, Export ("localizedInfoDictionary", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> LocalizedInfoDictionary { get; }

	//	// -(id _Nullable)objectForInfoDictionaryKey:(NSString * _Nonnull)key;
	//	[Export ("objectForInfoDictionaryKey:")]
	//	[return: NullAllowed]
	//	NSObject ObjectForInfoDictionaryKey (string key);

	//	// -(Class _Nullable)classNamed:(NSString * _Nonnull)className;
	//	[Export ("classNamed:")]
	//	[return: NullAllowed]
	//	Class ClassNamed (string className);

	//	// @property (readonly) Class _Nullable principalClass;
	//	[NullAllowed, Export ("principalClass")]
	//	Class PrincipalClass { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull preferredLocalizations;
	//	[Export ("preferredLocalizations", ArgumentSemantic.Copy)]
	//	string[] PreferredLocalizations { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull localizations;
	//	[Export ("localizations", ArgumentSemantic.Copy)]
	//	string[] Localizations { get; }

	//	// @property (readonly, copy) NSString * _Nullable developmentLocalization;
	//	[NullAllowed, Export ("developmentLocalization")]
	//	string DevelopmentLocalization { get; }

	//	// +(NSArray<NSString *> * _Nonnull)preferredLocalizationsFromArray:(NSArray<NSString *> * _Nonnull)localizationsArray;
	//	[Static]
	//	[Export ("preferredLocalizationsFromArray:")]
	//	string[] PreferredLocalizationsFromArray (string[] localizationsArray);

	//	// +(NSArray<NSString *> * _Nonnull)preferredLocalizationsFromArray:(NSArray<NSString *> * _Nonnull)localizationsArray forPreferences:(NSArray<NSString *> * _Nullable)preferencesArray;
	//	[Static]
	//	[Export ("preferredLocalizationsFromArray:forPreferences:")]
	//	string[] PreferredLocalizationsFromArray (string[] localizationsArray, [NullAllowed] string[] preferencesArray);

	//	// @property (readonly, copy) NSArray<NSNumber *> * _Nullable executableArchitectures __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[NullAllowed, Export ("executableArchitectures", ArgumentSemantic.Copy)]
	//	NSNumber[] ExecutableArchitectures { get; }
	//}

	//// @interface NSBundleExtensionMethods (NSString)
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_NSBundleExtensionMethods
	//{
	//	// -(NSString * _Nonnull)variantFittingPresentationWidth:(NSInteger)width __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("variantFittingPresentationWidth:")]
	//	string VariantFittingPresentationWidth (nint width);
	//}

	//// @interface NSBundleResourceRequest : NSObject <NSProgressReporting>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface NSBundleResourceRequest : INSProgressReporting
	//{
	//	// -(instancetype _Nonnull)initWithTags:(NSSet<NSString *> * _Nonnull)tags;
	//	[Export ("initWithTags:")]
	//	IntPtr Constructor (NSSet<NSString> tags);

	//	// -(instancetype _Nonnull)initWithTags:(NSSet<NSString *> * _Nonnull)tags bundle:(NSBundle * _Nonnull)bundle __attribute__((objc_designated_initializer));
	//	[Export ("initWithTags:bundle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSSet<NSString> tags, NSBundle bundle);

	//	// @property double loadingPriority;
	//	[Export ("loadingPriority")]
	//	double LoadingPriority { get; set; }

	//	// @property (readonly, copy) NSSet<NSString *> * _Nonnull tags;
	//	[Export ("tags", ArgumentSemantic.Copy)]
	//	NSSet<NSString> Tags { get; }

	//	// @property (readonly, strong) NSBundle * _Nonnull bundle;
	//	[Export ("bundle", ArgumentSemantic.Strong)]
	//	NSBundle Bundle { get; }

	//	// -(void)beginAccessingResourcesWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
	//	[Export ("beginAccessingResourcesWithCompletionHandler:")]
	//	void BeginAccessingResourcesWithCompletionHandler (Action<NSError> completionHandler);

	//	// -(void)conditionallyBeginAccessingResourcesWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
	//	[Export ("conditionallyBeginAccessingResourcesWithCompletionHandler:")]
	//	void ConditionallyBeginAccessingResourcesWithCompletionHandler (Action<bool> completionHandler);

	//	// -(void)endAccessingResources;
	//	[Export ("endAccessingResources")]
	//	void EndAccessingResources ();

	//	// @property (readonly, strong) NSProgress * _Nonnull progress;
	//	[Export ("progress", ArgumentSemantic.Strong)]
	//	NSProgress Progress { get; }
	//}

	//// @interface NSBundleResourceRequestAdditions (NSBundle)
	//[Category]
	//[BaseType (typeof(NSBundle))]
	//interface NSBundle_NSBundleResourceRequestAdditions
	//{
	//	// -(void)setPreservationPriority:(double)priority forTags:(NSSet<NSString *> * _Nonnull)tags __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
	//	[Watch (2,0), TV (9,0), NoMac, iOS (9,0)]
	//	[Export ("setPreservationPriority:forTags:")]
	//	void SetPreservationPriority (double priority, NSSet<NSString> tags);

	//	// -(double)preservationPriorityForTag:(NSString * _Nonnull)tag __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
	//	[Watch (2,0), TV (9,0), NoMac, iOS (9,0)]
	//	[Export ("preservationPriorityForTag:")]
	//	double PreservationPriorityForTag (string tag);
	//}

	//// @interface NSDate : NSObject <NSCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSDate : INSCopying, INSSecureCoding
	//{
	//	// @property (readonly) NSTimeInterval timeIntervalSinceReferenceDate;
	//	[Export ("timeIntervalSinceReferenceDate")]
	//	double TimeIntervalSinceReferenceDate { get; }

	//	// -(instancetype _Nonnull)initWithTimeIntervalSinceReferenceDate:(NSTimeInterval)ti __attribute__((objc_designated_initializer));
	//	[Export ("initWithTimeIntervalSinceReferenceDate:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (double ti);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSExtendedDate (NSDate)
	//[Category]
	//[BaseType (typeof(NSDate))]
	//interface NSDate_NSExtendedDate
	//{
	//	// -(NSTimeInterval)timeIntervalSinceDate:(NSDate * _Nonnull)anotherDate;
	//	[Export ("timeIntervalSinceDate:")]
	//	double TimeIntervalSinceDate (NSDate anotherDate);

	//	// @property (readonly) NSTimeInterval timeIntervalSinceNow;
	//	[Export ("timeIntervalSinceNow")]
	//	double TimeIntervalSinceNow { get; }

	//	// @property (readonly) NSTimeInterval timeIntervalSince1970;
	//	[Export ("timeIntervalSince1970")]
	//	double TimeIntervalSince1970 { get; }

	//	// -(id _Nonnull)addTimeInterval:(NSTimeInterval)seconds __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.6)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use dateByAddingTimeInterval instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use dateByAddingTimeInterval instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use dateByAddingTimeInterval instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use dateByAddingTimeInterval instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use dateByAddingTimeInterval instead")]
	//	[Deprecated (PlatformName.iOS, 4, 0, message: "Use dateByAddingTimeInterval instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use dateByAddingTimeInterval instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 6, message: "Use dateByAddingTimeInterval instead")]
	//	[Export ("addTimeInterval:")]
	//	NSObject AddTimeInterval (double seconds);

	//	// -(instancetype _Nonnull)dateByAddingTimeInterval:(NSTimeInterval)ti __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (2,0)]
	//	[Export ("dateByAddingTimeInterval:")]
	//	NSDate DateByAddingTimeInterval (double ti);

	//	// -(NSDate * _Nonnull)earlierDate:(NSDate * _Nonnull)anotherDate;
	//	[Export ("earlierDate:")]
	//	NSDate EarlierDate (NSDate anotherDate);

	//	// -(NSDate * _Nonnull)laterDate:(NSDate * _Nonnull)anotherDate;
	//	[Export ("laterDate:")]
	//	NSDate LaterDate (NSDate anotherDate);

	//	// -(NSComparisonResult)compare:(NSDate * _Nonnull)other;
	//	[Export ("compare:")]
	//	NSComparisonResult Compare (NSDate other);

	//	// -(BOOL)isEqualToDate:(NSDate * _Nonnull)otherDate;
	//	[Export ("isEqualToDate:")]
	//	bool IsEqualToDate (NSDate otherDate);

	//	// @property (readonly, copy) NSString * _Nonnull description;
	//	[Export ("description")]
	//	string Description { get; }

	//	// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
	//	[Export ("descriptionWithLocale:")]
	//	string DescriptionWithLocale ([NullAllowed] NSObject locale);

	//	// @property (readonly, class) NSTimeInterval timeIntervalSinceReferenceDate;
	//	[Static]
	//	[Export ("timeIntervalSinceReferenceDate")]
	//	double TimeIntervalSinceReferenceDate { get; }
	//}

	//// @interface NSDateCreation (NSDate)
	//[Category]
	//[BaseType (typeof(NSDate))]
	//interface NSDate_NSDateCreation
	//{
	//	// +(instancetype _Nonnull)date;
	//	[Static]
	//	[Export ("date")]
	//	NSDate Date ();

	//	// +(instancetype _Nonnull)dateWithTimeIntervalSinceNow:(NSTimeInterval)secs;
	//	[Static]
	//	[Export ("dateWithTimeIntervalSinceNow:")]
	//	NSDate DateWithTimeIntervalSinceNow (double secs);

	//	// +(instancetype _Nonnull)dateWithTimeIntervalSinceReferenceDate:(NSTimeInterval)ti;
	//	[Static]
	//	[Export ("dateWithTimeIntervalSinceReferenceDate:")]
	//	NSDate DateWithTimeIntervalSinceReferenceDate (double ti);

	//	// +(instancetype _Nonnull)dateWithTimeIntervalSince1970:(NSTimeInterval)secs;
	//	[Static]
	//	[Export ("dateWithTimeIntervalSince1970:")]
	//	NSDate DateWithTimeIntervalSince1970 (double secs);

	//	// +(instancetype _Nonnull)dateWithTimeInterval:(NSTimeInterval)secsToBeAdded sinceDate:(NSDate * _Nonnull)date;
	//	[Static]
	//	[Export ("dateWithTimeInterval:sinceDate:")]
	//	NSDate DateWithTimeInterval (double secsToBeAdded, NSDate date);

	//	// @property (readonly, copy, class) NSDate * _Nonnull distantFuture;
	//	[Static]
	//	[Export ("distantFuture", ArgumentSemantic.Copy)]
	//	NSDate DistantFuture { get; }

	//	// @property (readonly, copy, class) NSDate * _Nonnull distantPast;
	//	[Static]
	//	[Export ("distantPast", ArgumentSemantic.Copy)]
	//	NSDate DistantPast { get; }

	//	// -(instancetype _Nonnull)initWithTimeIntervalSinceNow:(NSTimeInterval)secs;
	//	[Export ("initWithTimeIntervalSinceNow:")]
	//	IntPtr Constructor (double secs);

	//	// -(instancetype _Nonnull)initWithTimeIntervalSince1970:(NSTimeInterval)secs;
	//	[Export ("initWithTimeIntervalSince1970:")]
	//	IntPtr Constructor (double secs);

	//	// -(instancetype _Nonnull)initWithTimeInterval:(NSTimeInterval)secsToBeAdded sinceDate:(NSDate * _Nonnull)date;
	//	[Export ("initWithTimeInterval:sinceDate:")]
	//	IntPtr Constructor (double secsToBeAdded, NSDate date);
	//}

	//// @interface NSCalendar : NSObject <NSCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface NSCalendar : INSCopying, INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSCalendar * _Nonnull currentCalendar;
	//	[Static]
	//	[Export ("currentCalendar", ArgumentSemantic.Copy)]
	//	NSCalendar CurrentCalendar { get; }

	//	// @property (readonly, strong, class) NSCalendar * _Nonnull autoupdatingCurrentCalendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Static]
	//	[Export ("autoupdatingCurrentCalendar", ArgumentSemantic.Strong)]
	//	NSCalendar AutoupdatingCurrentCalendar { get; }

	//	// +(NSCalendar * _Nullable)calendarWithIdentifier:(NSCalendarIdentifier _Nonnull)calendarIdentifierConstant __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Static]
	//	[Export ("calendarWithIdentifier:")]
	//	[return: NullAllowed]
	//	NSCalendar CalendarWithIdentifier (string calendarIdentifierConstant);

	//	// -(id _Nullable)initWithCalendarIdentifier:(NSCalendarIdentifier _Nonnull)ident __attribute__((objc_designated_initializer));
	//	[Export ("initWithCalendarIdentifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string ident);

	//	// @property (readonly, copy) NSCalendarIdentifier _Nonnull calendarIdentifier;
	//	[Export ("calendarIdentifier")]
	//	string CalendarIdentifier { get; }

	//	// @property (copy) NSLocale * _Nullable locale;
	//	[NullAllowed, Export ("locale", ArgumentSemantic.Copy)]
	//	NSLocale Locale { get; set; }

	//	// @property (copy) NSTimeZone * _Nonnull timeZone;
	//	[Export ("timeZone", ArgumentSemantic.Copy)]
	//	NSTimeZone TimeZone { get; set; }

	//	// @property NSUInteger firstWeekday;
	//	[Export ("firstWeekday")]
	//	nuint FirstWeekday { get; set; }

	//	// @property NSUInteger minimumDaysInFirstWeek;
	//	[Export ("minimumDaysInFirstWeek")]
	//	nuint MinimumDaysInFirstWeek { get; set; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull eraSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("eraSymbols", ArgumentSemantic.Copy)]
	//	string[] EraSymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull longEraSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("longEraSymbols", ArgumentSemantic.Copy)]
	//	string[] LongEraSymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull monthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("monthSymbols", ArgumentSemantic.Copy)]
	//	string[] MonthSymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("shortMonthSymbols", ArgumentSemantic.Copy)]
	//	string[] ShortMonthSymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("veryShortMonthSymbols", ArgumentSemantic.Copy)]
	//	string[] VeryShortMonthSymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull standaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("standaloneMonthSymbols", ArgumentSemantic.Copy)]
	//	string[] StandaloneMonthSymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortStandaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("shortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
	//	string[] ShortStandaloneMonthSymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortStandaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("veryShortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
	//	string[] VeryShortStandaloneMonthSymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull weekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("weekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] WeekdaySymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("shortWeekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] ShortWeekdaySymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("veryShortWeekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] VeryShortWeekdaySymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull standaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("standaloneWeekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] StandaloneWeekdaySymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortStandaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("shortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] ShortStandaloneWeekdaySymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortStandaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("veryShortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] VeryShortStandaloneWeekdaySymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull quarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("quarterSymbols", ArgumentSemantic.Copy)]
	//	string[] QuarterSymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("shortQuarterSymbols", ArgumentSemantic.Copy)]
	//	string[] ShortQuarterSymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull standaloneQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("standaloneQuarterSymbols", ArgumentSemantic.Copy)]
	//	string[] StandaloneQuarterSymbols { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortStandaloneQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("shortStandaloneQuarterSymbols", ArgumentSemantic.Copy)]
	//	string[] ShortStandaloneQuarterSymbols { get; }

	//	// @property (readonly, copy) NSString * _Nonnull AMSymbol __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("AMSymbol")]
	//	string AMSymbol { get; }

	//	// @property (readonly, copy) NSString * _Nonnull PMSymbol __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("PMSymbol")]
	//	string PMSymbol { get; }

	//	// -(NSRange)minimumRangeOfUnit:(NSCalendarUnit)unit;
	//	[Export ("minimumRangeOfUnit:")]
	//	NSRange MinimumRangeOfUnit (NSCalendarUnit unit);

	//	// -(NSRange)maximumRangeOfUnit:(NSCalendarUnit)unit;
	//	[Export ("maximumRangeOfUnit:")]
	//	NSRange MaximumRangeOfUnit (NSCalendarUnit unit);

	//	// -(NSRange)rangeOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate * _Nonnull)date;
	//	[Export ("rangeOfUnit:inUnit:forDate:")]
	//	NSRange RangeOfUnit (NSCalendarUnit smaller, NSCalendarUnit larger, NSDate date);

	//	// -(NSUInteger)ordinalityOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate * _Nonnull)date;
	//	[Export ("ordinalityOfUnit:inUnit:forDate:")]
	//	nuint OrdinalityOfUnit (NSCalendarUnit smaller, NSCalendarUnit larger, NSDate date);

	//	// -(BOOL)rangeOfUnit:(NSCalendarUnit)unit startDate:(NSDate * _Nullable * _Nullable)datep interval:(NSTimeInterval * _Nullable)tip forDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("rangeOfUnit:startDate:interval:forDate:")]
	//	unsafe bool RangeOfUnit (NSCalendarUnit unit, [NullAllowed] out NSDate datep, [NullAllowed] double* tip, NSDate date);

	//	// -(NSDate * _Nullable)dateFromComponents:(NSDateComponents * _Nonnull)comps;
	//	[Export ("dateFromComponents:")]
	//	[return: NullAllowed]
	//	NSDate DateFromComponents (NSDateComponents comps);

	//	// -(NSDateComponents * _Nonnull)components:(NSCalendarUnit)unitFlags fromDate:(NSDate * _Nonnull)date;
	//	[Export ("components:fromDate:")]
	//	NSDateComponents Components (NSCalendarUnit unitFlags, NSDate date);

	//	// -(NSDate * _Nullable)dateByAddingComponents:(NSDateComponents * _Nonnull)comps toDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)opts;
	//	[Export ("dateByAddingComponents:toDate:options:")]
	//	[return: NullAllowed]
	//	NSDate DateByAddingComponents (NSDateComponents comps, NSDate date, NSCalendarOptions opts);

	//	// -(NSDateComponents * _Nonnull)components:(NSCalendarUnit)unitFlags fromDate:(NSDate * _Nonnull)startingDate toDate:(NSDate * _Nonnull)resultDate options:(NSCalendarOptions)opts;
	//	[Export ("components:fromDate:toDate:options:")]
	//	NSDateComponents Components (NSCalendarUnit unitFlags, NSDate startingDate, NSDate resultDate, NSCalendarOptions opts);

	//	// -(void)getEra:(NSInteger * _Nullable)eraValuePointer year:(NSInteger * _Nullable)yearValuePointer month:(NSInteger * _Nullable)monthValuePointer day:(NSInteger * _Nullable)dayValuePointer fromDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("getEra:year:month:day:fromDate:")]
	//	unsafe void GetEra ([NullAllowed] nint* eraValuePointer, [NullAllowed] nint* yearValuePointer, [NullAllowed] nint* monthValuePointer, [NullAllowed] nint* dayValuePointer, NSDate date);

	//	// -(void)getEra:(NSInteger * _Nullable)eraValuePointer yearForWeekOfYear:(NSInteger * _Nullable)yearValuePointer weekOfYear:(NSInteger * _Nullable)weekValuePointer weekday:(NSInteger * _Nullable)weekdayValuePointer fromDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:")]
	//	unsafe void GetEra ([NullAllowed] nint* eraValuePointer, [NullAllowed] nint* yearValuePointer, [NullAllowed] nint* weekValuePointer, [NullAllowed] nint* weekdayValuePointer, NSDate date);

	//	// -(void)getHour:(NSInteger * _Nullable)hourValuePointer minute:(NSInteger * _Nullable)minuteValuePointer second:(NSInteger * _Nullable)secondValuePointer nanosecond:(NSInteger * _Nullable)nanosecondValuePointer fromDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("getHour:minute:second:nanosecond:fromDate:")]
	//	unsafe void GetHour ([NullAllowed] nint* hourValuePointer, [NullAllowed] nint* minuteValuePointer, [NullAllowed] nint* secondValuePointer, [NullAllowed] nint* nanosecondValuePointer, NSDate date);

	//	// -(NSInteger)component:(NSCalendarUnit)unit fromDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("component:fromDate:")]
	//	nint Component (NSCalendarUnit unit, NSDate date);

	//	// -(NSDate * _Nullable)dateWithEra:(NSInteger)eraValue year:(NSInteger)yearValue month:(NSInteger)monthValue day:(NSInteger)dayValue hour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue nanosecond:(NSInteger)nanosecondValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("dateWithEra:year:month:day:hour:minute:second:nanosecond:")]
	//	[return: NullAllowed]
	//	NSDate DateWithEra (nint eraValue, nint yearValue, nint monthValue, nint dayValue, nint hourValue, nint minuteValue, nint secondValue, nint nanosecondValue);

	//	// -(NSDate * _Nullable)dateWithEra:(NSInteger)eraValue yearForWeekOfYear:(NSInteger)yearValue weekOfYear:(NSInteger)weekValue weekday:(NSInteger)weekdayValue hour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue nanosecond:(NSInteger)nanosecondValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:")]
	//	[return: NullAllowed]
	//	NSDate DateWithEra (nint eraValue, nint yearValue, nint weekValue, nint weekdayValue, nint hourValue, nint minuteValue, nint secondValue, nint nanosecondValue);

	//	// -(NSDate * _Nonnull)startOfDayForDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("startOfDayForDate:")]
	//	NSDate StartOfDayForDate (NSDate date);

	//	// -(NSDateComponents * _Nonnull)componentsInTimeZone:(NSTimeZone * _Nonnull)timezone fromDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("componentsInTimeZone:fromDate:")]
	//	NSDateComponents ComponentsInTimeZone (NSTimeZone timezone, NSDate date);

	//	// -(NSComparisonResult)compareDate:(NSDate * _Nonnull)date1 toDate:(NSDate * _Nonnull)date2 toUnitGranularity:(NSCalendarUnit)unit __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("compareDate:toDate:toUnitGranularity:")]
	//	NSComparisonResult CompareDate (NSDate date1, NSDate date2, NSCalendarUnit unit);

	//	// -(BOOL)isDate:(NSDate * _Nonnull)date1 equalToDate:(NSDate * _Nonnull)date2 toUnitGranularity:(NSCalendarUnit)unit __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("isDate:equalToDate:toUnitGranularity:")]
	//	bool IsDate (NSDate date1, NSDate date2, NSCalendarUnit unit);

	//	// -(BOOL)isDate:(NSDate * _Nonnull)date1 inSameDayAsDate:(NSDate * _Nonnull)date2 __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("isDate:inSameDayAsDate:")]
	//	bool IsDate (NSDate date1, NSDate date2);

	//	// -(BOOL)isDateInToday:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("isDateInToday:")]
	//	bool IsDateInToday (NSDate date);

	//	// -(BOOL)isDateInYesterday:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("isDateInYesterday:")]
	//	bool IsDateInYesterday (NSDate date);

	//	// -(BOOL)isDateInTomorrow:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("isDateInTomorrow:")]
	//	bool IsDateInTomorrow (NSDate date);

	//	// -(BOOL)isDateInWeekend:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("isDateInWeekend:")]
	//	bool IsDateInWeekend (NSDate date);

	//	// -(BOOL)rangeOfWeekendStartDate:(NSDate * _Nullable * _Nullable)datep interval:(NSTimeInterval * _Nullable)tip containingDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("rangeOfWeekendStartDate:interval:containingDate:")]
	//	unsafe bool RangeOfWeekendStartDate ([NullAllowed] out NSDate datep, [NullAllowed] double* tip, NSDate date);

	//	// -(BOOL)nextWeekendStartDate:(NSDate * _Nullable * _Nullable)datep interval:(NSTimeInterval * _Nullable)tip options:(NSCalendarOptions)options afterDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("nextWeekendStartDate:interval:options:afterDate:")]
	//	unsafe bool NextWeekendStartDate ([NullAllowed] out NSDate datep, [NullAllowed] double* tip, NSCalendarOptions options, NSDate date);

	//	// -(NSDateComponents * _Nonnull)components:(NSCalendarUnit)unitFlags fromDateComponents:(NSDateComponents * _Nonnull)startingDateComp toDateComponents:(NSDateComponents * _Nonnull)resultDateComp options:(NSCalendarOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("components:fromDateComponents:toDateComponents:options:")]
	//	NSDateComponents Components (NSCalendarUnit unitFlags, NSDateComponents startingDateComp, NSDateComponents resultDateComp, NSCalendarOptions options);

	//	// -(NSDate * _Nullable)dateByAddingUnit:(NSCalendarUnit)unit value:(NSInteger)value toDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("dateByAddingUnit:value:toDate:options:")]
	//	[return: NullAllowed]
	//	NSDate DateByAddingUnit (NSCalendarUnit unit, nint value, NSDate date, NSCalendarOptions options);

	//	// -(void)enumerateDatesStartingAfterDate:(NSDate * _Nonnull)start matchingComponents:(NSDateComponents * _Nonnull)comps options:(NSCalendarOptions)opts usingBlock:(void (^ _Nonnull)(NSDate * _Nullable, BOOL, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:")]
	//	unsafe void EnumerateDatesStartingAfterDate (NSDate start, NSDateComponents comps, NSCalendarOptions opts, Action<NSDate, bool, bool*> block);

	//	// -(NSDate * _Nullable)nextDateAfterDate:(NSDate * _Nonnull)date matchingComponents:(NSDateComponents * _Nonnull)comps options:(NSCalendarOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("nextDateAfterDate:matchingComponents:options:")]
	//	[return: NullAllowed]
	//	NSDate NextDateAfterDate (NSDate date, NSDateComponents comps, NSCalendarOptions options);

	//	// -(NSDate * _Nullable)nextDateAfterDate:(NSDate * _Nonnull)date matchingUnit:(NSCalendarUnit)unit value:(NSInteger)value options:(NSCalendarOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("nextDateAfterDate:matchingUnit:value:options:")]
	//	[return: NullAllowed]
	//	NSDate NextDateAfterDate (NSDate date, NSCalendarUnit unit, nint value, NSCalendarOptions options);

	//	// -(NSDate * _Nullable)nextDateAfterDate:(NSDate * _Nonnull)date matchingHour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue options:(NSCalendarOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("nextDateAfterDate:matchingHour:minute:second:options:")]
	//	[return: NullAllowed]
	//	NSDate NextDateAfterDate (NSDate date, nint hourValue, nint minuteValue, nint secondValue, NSCalendarOptions options);

	//	// -(NSDate * _Nullable)dateBySettingUnit:(NSCalendarUnit)unit value:(NSInteger)v ofDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)opts __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("dateBySettingUnit:value:ofDate:options:")]
	//	[return: NullAllowed]
	//	NSDate DateBySettingUnit (NSCalendarUnit unit, nint v, NSDate date, NSCalendarOptions opts);

	//	// -(NSDate * _Nullable)dateBySettingHour:(NSInteger)h minute:(NSInteger)m second:(NSInteger)s ofDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)opts __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("dateBySettingHour:minute:second:ofDate:options:")]
	//	[return: NullAllowed]
	//	NSDate DateBySettingHour (nint h, nint m, nint s, NSDate date, NSCalendarOptions opts);

	//	// -(BOOL)date:(NSDate * _Nonnull)date matchesComponents:(NSDateComponents * _Nonnull)components __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("date:matchesComponents:")]
	//	bool Date (NSDate date, NSDateComponents components);
	//}

	//// @interface NSDateComponents : NSObject <NSCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSDateComponents : INSCopying, INSSecureCoding
	//{
	//	// @property (copy) NSCalendar * _Nullable calendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[NullAllowed, Export ("calendar", ArgumentSemantic.Copy)]
	//	NSCalendar Calendar { get; set; }

	//	// @property (copy) NSTimeZone * _Nullable timeZone __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[NullAllowed, Export ("timeZone", ArgumentSemantic.Copy)]
	//	NSTimeZone TimeZone { get; set; }

	//	// @property NSInteger era;
	//	[Export ("era")]
	//	nint Era { get; set; }

	//	// @property NSInteger year;
	//	[Export ("year")]
	//	nint Year { get; set; }

	//	// @property NSInteger month;
	//	[Export ("month")]
	//	nint Month { get; set; }

	//	// @property NSInteger day;
	//	[Export ("day")]
	//	nint Day { get; set; }

	//	// @property NSInteger hour;
	//	[Export ("hour")]
	//	nint Hour { get; set; }

	//	// @property NSInteger minute;
	//	[Export ("minute")]
	//	nint Minute { get; set; }

	//	// @property NSInteger second;
	//	[Export ("second")]
	//	nint Second { get; set; }

	//	// @property NSInteger nanosecond __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("nanosecond")]
	//	nint Nanosecond { get; set; }

	//	// @property NSInteger weekday;
	//	[Export ("weekday")]
	//	nint Weekday { get; set; }

	//	// @property NSInteger weekdayOrdinal;
	//	[Export ("weekdayOrdinal")]
	//	nint WeekdayOrdinal { get; set; }

	//	// @property NSInteger quarter __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("quarter")]
	//	nint Quarter { get; set; }

	//	// @property NSInteger weekOfMonth __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("weekOfMonth")]
	//	nint WeekOfMonth { get; set; }

	//	// @property NSInteger weekOfYear __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("weekOfYear")]
	//	nint WeekOfYear { get; set; }

	//	// @property NSInteger yearForWeekOfYear __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("yearForWeekOfYear")]
	//	nint YearForWeekOfYear { get; set; }

	//	// @property (getter = isLeapMonth) BOOL leapMonth __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Export ("leapMonth")]
	//	bool LeapMonth { [Bind ("isLeapMonth")] get; set; }

	//	// @property (readonly, copy) NSDate * _Nullable date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[NullAllowed, Export ("date", ArgumentSemantic.Copy)]
	//	NSDate Date { get; }

	//	// -(NSInteger)week __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	// -(void)setWeek:(NSInteger)v __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use weekOfMonth or weekOfYear, depending on which you mean")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use weekOfMonth or weekOfYear, depending on which you mean")]
	//	[Export ("week")]
	//	[Verify (MethodToProperty)]
	//	nint Week { get; set; }

	//	// -(void)setValue:(NSInteger)value forComponent:(NSCalendarUnit)unit __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("setValue:forComponent:")]
	//	void SetValue (nint value, NSCalendarUnit unit);

	//	// -(NSInteger)valueForComponent:(NSCalendarUnit)unit __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("valueForComponent:")]
	//	nint ValueForComponent (NSCalendarUnit unit);

	//	// @property (readonly, getter = isValidDate) BOOL validDate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
	//	[Export ("validDate")]
	//	bool ValidDate { [Bind ("isValidDate")] get; }

	//	// -(BOOL)isValidDateInCalendar:(NSCalendar * _Nonnull)calendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
	//	[Export ("isValidDateInCalendar:")]
	//	bool IsValidDateInCalendar (NSCalendar calendar);
	//}

	//// @interface NSCharacterSet : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSCharacterSet : INSCopying, INSMutableCopying, INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull controlCharacterSet;
	//	[Static]
	//	[Export ("controlCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet ControlCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull whitespaceCharacterSet;
	//	[Static]
	//	[Export ("whitespaceCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet WhitespaceCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull whitespaceAndNewlineCharacterSet;
	//	[Static]
	//	[Export ("whitespaceAndNewlineCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet WhitespaceAndNewlineCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull decimalDigitCharacterSet;
	//	[Static]
	//	[Export ("decimalDigitCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet DecimalDigitCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull letterCharacterSet;
	//	[Static]
	//	[Export ("letterCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet LetterCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull lowercaseLetterCharacterSet;
	//	[Static]
	//	[Export ("lowercaseLetterCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet LowercaseLetterCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull uppercaseLetterCharacterSet;
	//	[Static]
	//	[Export ("uppercaseLetterCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet UppercaseLetterCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull nonBaseCharacterSet;
	//	[Static]
	//	[Export ("nonBaseCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet NonBaseCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull alphanumericCharacterSet;
	//	[Static]
	//	[Export ("alphanumericCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet AlphanumericCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull decomposableCharacterSet;
	//	[Static]
	//	[Export ("decomposableCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet DecomposableCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull illegalCharacterSet;
	//	[Static]
	//	[Export ("illegalCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet IllegalCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull punctuationCharacterSet;
	//	[Static]
	//	[Export ("punctuationCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet PunctuationCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull capitalizedLetterCharacterSet;
	//	[Static]
	//	[Export ("capitalizedLetterCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet CapitalizedLetterCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull symbolCharacterSet;
	//	[Static]
	//	[Export ("symbolCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet SymbolCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull newlineCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Static]
	//	[Export ("newlineCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet NewlineCharacterSet { get; }

	//	// +(NSCharacterSet * _Nonnull)characterSetWithRange:(NSRange)aRange;
	//	[Static]
	//	[Export ("characterSetWithRange:")]
	//	NSCharacterSet CharacterSetWithRange (NSRange aRange);

	//	// +(NSCharacterSet * _Nonnull)characterSetWithCharactersInString:(NSString * _Nonnull)aString;
	//	[Static]
	//	[Export ("characterSetWithCharactersInString:")]
	//	NSCharacterSet CharacterSetWithCharactersInString (string aString);

	//	// +(NSCharacterSet * _Nonnull)characterSetWithBitmapRepresentation:(NSData * _Nonnull)data;
	//	[Static]
	//	[Export ("characterSetWithBitmapRepresentation:")]
	//	NSCharacterSet CharacterSetWithBitmapRepresentation (NSData data);

	//	// +(NSCharacterSet * _Nullable)characterSetWithContentsOfFile:(NSString * _Nonnull)fName;
	//	[Static]
	//	[Export ("characterSetWithContentsOfFile:")]
	//	[return: NullAllowed]
	//	NSCharacterSet CharacterSetWithContentsOfFile (string fName);

	//	// -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(BOOL)characterIsMember:(unichar)aCharacter;
	//	[Export ("characterIsMember:")]
	//	bool CharacterIsMember (ushort aCharacter);

	//	// @property (readonly, copy) NSData * _Nonnull bitmapRepresentation;
	//	[Export ("bitmapRepresentation", ArgumentSemantic.Copy)]
	//	NSData BitmapRepresentation { get; }

	//	// @property (readonly, copy) NSCharacterSet * _Nonnull invertedSet;
	//	[Export ("invertedSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet InvertedSet { get; }

	//	// -(BOOL)longCharacterIsMember:(UTF32Char)theLongChar;
	//	[Export ("longCharacterIsMember:")]
	//	bool LongCharacterIsMember (uint theLongChar);

	//	// -(BOOL)isSupersetOfSet:(NSCharacterSet * _Nonnull)theOtherSet;
	//	[Export ("isSupersetOfSet:")]
	//	bool IsSupersetOfSet (NSCharacterSet theOtherSet);

	//	// -(BOOL)hasMemberInPlane:(uint8_t)thePlane;
	//	[Export ("hasMemberInPlane:")]
	//	bool HasMemberInPlane (byte thePlane);
	//}

	//// @interface NSMutableCharacterSet : NSCharacterSet <NSCopying, NSMutableCopying, NSSecureCoding>
	//[BaseType (typeof(NSCharacterSet))]
	//interface NSMutableCharacterSet : INSCopying, INSMutableCopying, INSSecureCoding
	//{
	//	// -(void)addCharactersInRange:(NSRange)aRange;
	//	[Export ("addCharactersInRange:")]
	//	void AddCharactersInRange (NSRange aRange);

	//	// -(void)removeCharactersInRange:(NSRange)aRange;
	//	[Export ("removeCharactersInRange:")]
	//	void RemoveCharactersInRange (NSRange aRange);

	//	// -(void)addCharactersInString:(NSString * _Nonnull)aString;
	//	[Export ("addCharactersInString:")]
	//	void AddCharactersInString (string aString);

	//	// -(void)removeCharactersInString:(NSString * _Nonnull)aString;
	//	[Export ("removeCharactersInString:")]
	//	void RemoveCharactersInString (string aString);

	//	// -(void)formUnionWithCharacterSet:(NSCharacterSet * _Nonnull)otherSet;
	//	[Export ("formUnionWithCharacterSet:")]
	//	void FormUnionWithCharacterSet (NSCharacterSet otherSet);

	//	// -(void)formIntersectionWithCharacterSet:(NSCharacterSet * _Nonnull)otherSet;
	//	[Export ("formIntersectionWithCharacterSet:")]
	//	void FormIntersectionWithCharacterSet (NSCharacterSet otherSet);

	//	// -(void)invert;
	//	[Export ("invert")]
	//	void Invert ();

	//	// +(NSMutableCharacterSet * _Nonnull)controlCharacterSet;
	//	[Static]
	//	[Export ("controlCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet ControlCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)whitespaceCharacterSet;
	//	[Static]
	//	[Export ("whitespaceCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet WhitespaceCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)whitespaceAndNewlineCharacterSet;
	//	[Static]
	//	[Export ("whitespaceAndNewlineCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet WhitespaceAndNewlineCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)decimalDigitCharacterSet;
	//	[Static]
	//	[Export ("decimalDigitCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet DecimalDigitCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)letterCharacterSet;
	//	[Static]
	//	[Export ("letterCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet LetterCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)lowercaseLetterCharacterSet;
	//	[Static]
	//	[Export ("lowercaseLetterCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet LowercaseLetterCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)uppercaseLetterCharacterSet;
	//	[Static]
	//	[Export ("uppercaseLetterCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet UppercaseLetterCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)nonBaseCharacterSet;
	//	[Static]
	//	[Export ("nonBaseCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet NonBaseCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)alphanumericCharacterSet;
	//	[Static]
	//	[Export ("alphanumericCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet AlphanumericCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)decomposableCharacterSet;
	//	[Static]
	//	[Export ("decomposableCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet DecomposableCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)illegalCharacterSet;
	//	[Static]
	//	[Export ("illegalCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet IllegalCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)punctuationCharacterSet;
	//	[Static]
	//	[Export ("punctuationCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet PunctuationCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)capitalizedLetterCharacterSet;
	//	[Static]
	//	[Export ("capitalizedLetterCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet CapitalizedLetterCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)symbolCharacterSet;
	//	[Static]
	//	[Export ("symbolCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet SymbolCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)newlineCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Static]
	//	[Export ("newlineCharacterSet")]
	//	[Verify (MethodToProperty)]
	//	NSMutableCharacterSet NewlineCharacterSet { get; }

	//	// +(NSMutableCharacterSet * _Nonnull)characterSetWithRange:(NSRange)aRange;
	//	[Static]
	//	[Export ("characterSetWithRange:")]
	//	NSMutableCharacterSet CharacterSetWithRange (NSRange aRange);

	//	// +(NSMutableCharacterSet * _Nonnull)characterSetWithCharactersInString:(NSString * _Nonnull)aString;
	//	[Static]
	//	[Export ("characterSetWithCharactersInString:")]
	//	NSMutableCharacterSet CharacterSetWithCharactersInString (string aString);

	//	// +(NSMutableCharacterSet * _Nonnull)characterSetWithBitmapRepresentation:(NSData * _Nonnull)data;
	//	[Static]
	//	[Export ("characterSetWithBitmapRepresentation:")]
	//	NSMutableCharacterSet CharacterSetWithBitmapRepresentation (NSData data);

	//	// +(NSMutableCharacterSet * _Nullable)characterSetWithContentsOfFile:(NSString * _Nonnull)fName;
	//	[Static]
	//	[Export ("characterSetWithContentsOfFile:")]
	//	[return: NullAllowed]
	//	NSMutableCharacterSet CharacterSetWithContentsOfFile (string fName);
	//}

	//// @interface NSCoder : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSCoder
	//{
	//	// -(void)encodeValueOfObjCType:(const char * _Nonnull)type at:(const void * _Nonnull)addr;
	//	[Export ("encodeValueOfObjCType:at:")]
	//	unsafe void EncodeValueOfObjCType (sbyte* type, void* addr);

	//	// -(void)encodeDataObject:(NSData * _Nonnull)data;
	//	[Export ("encodeDataObject:")]
	//	void EncodeDataObject (NSData data);

	//	// -(NSData * _Nullable)decodeDataObject;
	//	[NullAllowed, Export ("decodeDataObject")]
	//	[Verify (MethodToProperty)]
	//	NSData DecodeDataObject { get; }

	//	// -(void)decodeValueOfObjCType:(const char * _Nonnull)type at:(void * _Nonnull)data size:(NSUInteger)size __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("decodeValueOfObjCType:at:size:")]
	//	unsafe void DecodeValueOfObjCType (sbyte* type, void* data, nuint size);

	//	// -(NSInteger)versionForClassName:(NSString * _Nonnull)className;
	//	[Export ("versionForClassName:")]
	//	nint VersionForClassName (string className);
	//}

	//// @interface NSExtendedCoder (NSCoder)
	//[Category]
	//[BaseType (typeof(NSCoder))]
	//interface NSCoder_NSExtendedCoder
	//{
	//	// -(void)encodeObject:(id _Nullable)object;
	//	[Export ("encodeObject:")]
	//	void EncodeObject ([NullAllowed] NSObject @object);

	//	// -(void)encodeRootObject:(id _Nonnull)rootObject;
	//	[Export ("encodeRootObject:")]
	//	void EncodeRootObject (NSObject rootObject);

	//	// -(void)encodeBycopyObject:(id _Nullable)anObject;
	//	[Export ("encodeBycopyObject:")]
	//	void EncodeBycopyObject ([NullAllowed] NSObject anObject);

	//	// -(void)encodeByrefObject:(id _Nullable)anObject;
	//	[Export ("encodeByrefObject:")]
	//	void EncodeByrefObject ([NullAllowed] NSObject anObject);

	//	// -(void)encodeConditionalObject:(id _Nullable)object;
	//	[Export ("encodeConditionalObject:")]
	//	void EncodeConditionalObject ([NullAllowed] NSObject @object);

	//	// -(void)encodeValuesOfObjCTypes:(const char * _Nonnull)types, ...;
	//	[Internal]
	//	[Export ("encodeValuesOfObjCTypes:", IsVariadic = true)]
	//	unsafe void EncodeValuesOfObjCTypes (sbyte* types, IntPtr varArgs);

	//	// -(void)encodeArrayOfObjCType:(const char * _Nonnull)type count:(NSUInteger)count at:(const void * _Nonnull)array;
	//	[Export ("encodeArrayOfObjCType:count:at:")]
	//	unsafe void EncodeArrayOfObjCType (sbyte* type, nuint count, void* array);

	//	// -(void)encodeBytes:(const void * _Nullable)byteaddr length:(NSUInteger)length;
	//	[Export ("encodeBytes:length:")]
	//	unsafe void EncodeBytes ([NullAllowed] void* byteaddr, nuint length);

	//	// -(id _Nullable)decodeObject;
	//	[NullAllowed, Export ("decodeObject")]
	//	[Verify (MethodToProperty)]
	//	NSObject DecodeObject { get; }

	//	// -(id _Nullable)decodeTopLevelObjectAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("decodeTopLevelObjectAndReturnError:")]
	//	[return: NullAllowed]
	//	NSObject DecodeTopLevelObjectAndReturnError ([NullAllowed] out NSError error);

	//	// -(void)decodeValuesOfObjCTypes:(const char * _Nonnull)types, ...;
	//	[Internal]
	//	[Export ("decodeValuesOfObjCTypes:", IsVariadic = true)]
	//	unsafe void DecodeValuesOfObjCTypes (sbyte* types, IntPtr varArgs);

	//	// -(void)decodeArrayOfObjCType:(const char * _Nonnull)itemType count:(NSUInteger)count at:(void * _Nonnull)array;
	//	[Export ("decodeArrayOfObjCType:count:at:")]
	//	unsafe void DecodeArrayOfObjCType (sbyte* itemType, nuint count, void* array);

	//	// -(void * _Nullable)decodeBytesWithReturnedLength:(NSUInteger * _Nonnull)lengthp __attribute__((objc_returns_inner_pointer));
	//	[Export ("decodeBytesWithReturnedLength:")]
	//	[return: NullAllowed]
	//	unsafe void* DecodeBytesWithReturnedLength (nuint* lengthp);

	//	// -(NSZone * _Nullable)objectZone;
	//	// -(void)setObjectZone:(NSZone * _Nullable)zone;
	//	[NullAllowed, Export ("objectZone")]
	//	[Verify (MethodToProperty)]
	//	unsafe NSZone* ObjectZone { get; set; }

	//	// @property (readonly) unsigned int systemVersion;
	//	[Export ("systemVersion")]
	//	uint SystemVersion { get; }

	//	// @property (readonly) BOOL allowsKeyedCoding;
	//	[Export ("allowsKeyedCoding")]
	//	bool AllowsKeyedCoding { get; }

	//	// -(void)encodeObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeObject:forKey:")]
	//	void EncodeObject ([NullAllowed] NSObject @object, string key);

	//	// -(void)encodeConditionalObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeConditionalObject:forKey:")]
	//	void EncodeConditionalObject ([NullAllowed] NSObject @object, string key);

	//	// -(void)encodeBool:(BOOL)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeBool:forKey:")]
	//	void EncodeBool (bool value, string key);

	//	// -(void)encodeInt:(int)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeInt:forKey:")]
	//	void EncodeInt (int value, string key);

	//	// -(void)encodeInt32:(int32_t)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeInt32:forKey:")]
	//	void EncodeInt32 (int value, string key);

	//	// -(void)encodeInt64:(int64_t)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeInt64:forKey:")]
	//	void EncodeInt64 (long value, string key);

	//	// -(void)encodeFloat:(float)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeFloat:forKey:")]
	//	void EncodeFloat (float value, string key);

	//	// -(void)encodeDouble:(double)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeDouble:forKey:")]
	//	void EncodeDouble (double value, string key);

	//	// -(void)encodeBytes:(const uint8_t * _Nullable)bytes length:(NSUInteger)length forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeBytes:length:forKey:")]
	//	unsafe void EncodeBytes ([NullAllowed] byte* bytes, nuint length, string key);

	//	// -(BOOL)containsValueForKey:(NSString * _Nonnull)key;
	//	[Export ("containsValueForKey:")]
	//	bool ContainsValueForKey (string key);

	//	// -(id _Nullable)decodeObjectForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeObjectForKey:")]
	//	[return: NullAllowed]
	//	NSObject DecodeObjectForKey (string key);

	//	// -(id _Nullable)decodeTopLevelObjectForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("decodeTopLevelObjectForKey:error:")]
	//	[return: NullAllowed]
	//	NSObject DecodeTopLevelObjectForKey (string key, [NullAllowed] out NSError error);

	//	// -(BOOL)decodeBoolForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeBoolForKey:")]
	//	bool DecodeBoolForKey (string key);

	//	// -(int)decodeIntForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeIntForKey:")]
	//	int DecodeIntForKey (string key);

	//	// -(int32_t)decodeInt32ForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeInt32ForKey:")]
	//	int DecodeInt32ForKey (string key);

	//	// -(int64_t)decodeInt64ForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeInt64ForKey:")]
	//	long DecodeInt64ForKey (string key);

	//	// -(float)decodeFloatForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeFloatForKey:")]
	//	float DecodeFloatForKey (string key);

	//	// -(double)decodeDoubleForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeDoubleForKey:")]
	//	double DecodeDoubleForKey (string key);

	//	// -(const uint8_t * _Nullable)decodeBytesForKey:(NSString * _Nonnull)key returnedLength:(NSUInteger * _Nullable)lengthp __attribute__((objc_returns_inner_pointer));
	//	[Export ("decodeBytesForKey:returnedLength:")]
	//	[return: NullAllowed]
	//	unsafe byte* DecodeBytesForKey (string key, [NullAllowed] nuint* lengthp);

	//	// -(void)encodeInteger:(NSInteger)value forKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("encodeInteger:forKey:")]
	//	void EncodeInteger (nint value, string key);

	//	// -(NSInteger)decodeIntegerForKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("decodeIntegerForKey:")]
	//	nint DecodeIntegerForKey (string key);

	//	// @property (readonly) BOOL requiresSecureCoding __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Export ("requiresSecureCoding")]
	//	bool RequiresSecureCoding { get; }

	//	// -(id _Nullable)decodeObjectOfClass:(Class _Nonnull)aClass forKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("decodeObjectOfClass:forKey:")]
	//	[return: NullAllowed]
	//	NSObject DecodeObjectOfClass (Class aClass, string key);

	//	// -(id _Nullable)decodeTopLevelObjectOfClass:(Class _Nonnull)aClass forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("decodeTopLevelObjectOfClass:forKey:error:")]
	//	[return: NullAllowed]
	//	NSObject DecodeTopLevelObjectOfClass (Class aClass, string key, [NullAllowed] out NSError error);

	//	// -(id _Nullable)decodeObjectOfClasses:(NSSet<Class> * _Nullable)classes forKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("decodeObjectOfClasses:forKey:")]
	//	[return: NullAllowed]
	//	NSObject DecodeObjectOfClasses ([NullAllowed] NSSet<Class> classes, string key);

	//	// -(id _Nullable)decodeTopLevelObjectOfClasses:(NSSet<Class> * _Nullable)classes forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("decodeTopLevelObjectOfClasses:forKey:error:")]
	//	[return: NullAllowed]
	//	NSObject DecodeTopLevelObjectOfClasses ([NullAllowed] NSSet<Class> classes, string key, [NullAllowed] out NSError error);

	//	// -(id _Nullable)decodePropertyListForKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("decodePropertyListForKey:")]
	//	[return: NullAllowed]
	//	NSObject DecodePropertyListForKey (string key);

	//	// @property (readonly, copy) NSSet<Class> * _Nullable allowedClasses __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[NullAllowed, Export ("allowedClasses", ArgumentSemantic.Copy)]
	//	NSSet<Class> AllowedClasses { get; }

	//	// -(void)failWithError:(NSError * _Nonnull)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("failWithError:")]
	//	void FailWithError (NSError error);

	//	// @property (readonly) NSDecodingFailurePolicy decodingFailurePolicy __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("decodingFailurePolicy")]
	//	NSDecodingFailurePolicy DecodingFailurePolicy { get; }

	//	// @property (readonly, copy) NSError * _Nullable error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[NullAllowed, Export ("error", ArgumentSemantic.Copy)]
	//	NSError Error { get; }
	//}

	//// @interface NSDeprecated (NSCoder)
	//[Category]
	//[BaseType (typeof(NSCoder))]
	//interface NSCoder_NSDeprecated
	//{
	//	// -(void)decodeValueOfObjCType:(const char * _Nonnull)type at:(void * _Nonnull)data;
	//	[Export ("decodeValueOfObjCType:at:")]
	//	unsafe void DecodeValueOfObjCType (sbyte* type, void* data);
	//}

	//// @interface NSData : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSData : INSCopying, INSMutableCopying, INSSecureCoding
	//{
	//	// @property (readonly) NSUInteger length;
	//	[Export ("length")]
	//	nuint Length { get; }

	//	// @property (readonly) const void * _Nonnull bytes __attribute__((objc_returns_inner_pointer));
	//	[Export ("bytes")]
	//	unsafe void* Bytes { get; }
	//}

	//// @interface NSExtendedData (NSData)
	//[Category]
	//[BaseType (typeof(NSData))]
	//interface NSData_NSExtendedData
	//{
	//	// @property (readonly, copy) NSString * _Nonnull description;
	//	[Export ("description")]
	//	string Description { get; }

	//	// -(void)getBytes:(void * _Nonnull)buffer length:(NSUInteger)length;
	//	[Export ("getBytes:length:")]
	//	unsafe void GetBytes (void* buffer, nuint length);

	//	// -(void)getBytes:(void * _Nonnull)buffer range:(NSRange)range;
	//	[Export ("getBytes:range:")]
	//	unsafe void GetBytes (void* buffer, NSRange range);

	//	// -(BOOL)isEqualToData:(NSData * _Nonnull)other;
	//	[Export ("isEqualToData:")]
	//	bool IsEqualToData (NSData other);

	//	// -(NSData * _Nonnull)subdataWithRange:(NSRange)range;
	//	[Export ("subdataWithRange:")]
	//	NSData SubdataWithRange (NSRange range);

	//	// -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile;
	//	[Export ("writeToFile:atomically:")]
	//	bool WriteToFile (string path, bool useAuxiliaryFile);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically;
	//	[Export ("writeToURL:atomically:")]
	//	bool WriteToURL (NSUrl url, bool atomically);

	//	// -(BOOL)writeToFile:(NSString * _Nonnull)path options:(NSDataWritingOptions)writeOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
	//	[Export ("writeToFile:options:error:")]
	//	bool WriteToFile (string path, NSDataWritingOptions writeOptionsMask, [NullAllowed] out NSError errorPtr);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)url options:(NSDataWritingOptions)writeOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
	//	[Export ("writeToURL:options:error:")]
	//	bool WriteToURL (NSUrl url, NSDataWritingOptions writeOptionsMask, [NullAllowed] out NSError errorPtr);

	//	// -(NSRange)rangeOfData:(NSData * _Nonnull)dataToFind options:(NSDataSearchOptions)mask range:(NSRange)searchRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("rangeOfData:options:range:")]
	//	NSRange RangeOfData (NSData dataToFind, NSDataSearchOptions mask, NSRange searchRange);

	//	// -(void)enumerateByteRangesUsingBlock:(void (^ _Nonnull)(const void * _Nonnull, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("enumerateByteRangesUsingBlock:")]
	//	unsafe void EnumerateByteRangesUsingBlock (Action<void*, NSRange, bool*> block);
	//}

	//// @interface NSDataCreation (NSData)
	//[Category]
	//[BaseType (typeof(NSData))]
	//interface NSData_NSDataCreation
	//{
	//	// +(instancetype _Nonnull)data;
	//	[Static]
	//	[Export ("data")]
	//	NSData Data ();

	//	// +(instancetype _Nonnull)dataWithBytes:(const void * _Nullable)bytes length:(NSUInteger)length;
	//	[Static]
	//	[Export ("dataWithBytes:length:")]
	//	unsafe NSData DataWithBytes ([NullAllowed] void* bytes, nuint length);

	//	// +(instancetype _Nonnull)dataWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length;
	//	[Static]
	//	[Export ("dataWithBytesNoCopy:length:")]
	//	unsafe NSData DataWithBytesNoCopy (void* bytes, nuint length);

	//	// +(instancetype _Nonnull)dataWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length freeWhenDone:(BOOL)b;
	//	[Static]
	//	[Export ("dataWithBytesNoCopy:length:freeWhenDone:")]
	//	unsafe NSData DataWithBytesNoCopy (void* bytes, nuint length, bool b);

	//	// +(instancetype _Nullable)dataWithContentsOfFile:(NSString * _Nonnull)path options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
	//	[Static]
	//	[Export ("dataWithContentsOfFile:options:error:")]
	//	[return: NullAllowed]
	//	NSData DataWithContentsOfFile (string path, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

	//	// +(instancetype _Nullable)dataWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
	//	[Static]
	//	[Export ("dataWithContentsOfURL:options:error:")]
	//	[return: NullAllowed]
	//	NSData DataWithContentsOfURL (NSUrl url, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

	//	// +(instancetype _Nullable)dataWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("dataWithContentsOfFile:")]
	//	[return: NullAllowed]
	//	NSData DataWithContentsOfFile (string path);

	//	// +(instancetype _Nullable)dataWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("dataWithContentsOfURL:")]
	//	[return: NullAllowed]
	//	NSData DataWithContentsOfURL (NSUrl url);

	//	// -(instancetype _Nonnull)initWithBytes:(const void * _Nullable)bytes length:(NSUInteger)length;
	//	[Export ("initWithBytes:length:")]
	//	unsafe IntPtr Constructor ([NullAllowed] void* bytes, nuint length);

	//	// -(instancetype _Nonnull)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length;
	//	[Export ("initWithBytesNoCopy:length:")]
	//	unsafe IntPtr Constructor (void* bytes, nuint length);

	//	// -(instancetype _Nonnull)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length freeWhenDone:(BOOL)b;
	//	[Export ("initWithBytesNoCopy:length:freeWhenDone:")]
	//	unsafe IntPtr Constructor (void* bytes, nuint length, bool b);

	//	// -(instancetype _Nonnull)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length deallocator:(void (^ _Nullable)(void * _Nonnull, NSUInteger))deallocator __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("initWithBytesNoCopy:length:deallocator:")]
	//	unsafe IntPtr Constructor (void* bytes, nuint length, [NullAllowed] Action<void*, nuint> deallocator);

	//	// -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
	//	[Export ("initWithContentsOfFile:options:error:")]
	//	IntPtr Constructor (string path, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

	//	// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
	//	[Export ("initWithContentsOfURL:options:error:")]
	//	IntPtr Constructor (NSUrl url, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

	//	// -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Export ("initWithContentsOfFile:")]
	//	IntPtr Constructor (string path);

	//	// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Export ("initWithContentsOfURL:")]
	//	IntPtr Constructor (NSUrl url);

	//	// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data;
	//	[Export ("initWithData:")]
	//	IntPtr Constructor (NSData data);

	//	// +(instancetype _Nonnull)dataWithData:(NSData * _Nonnull)data;
	//	[Static]
	//	[Export ("dataWithData:")]
	//	NSData DataWithData (NSData data);
	//}

	//// @interface NSDataBase64Encoding (NSData)
	//[Category]
	//[BaseType (typeof(NSData))]
	//interface NSData_NSDataBase64Encoding
	//{
	//	// -(instancetype _Nullable)initWithBase64EncodedString:(NSString * _Nonnull)base64String options:(NSDataBase64DecodingOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("initWithBase64EncodedString:options:")]
	//	IntPtr Constructor (string base64String, NSDataBase64DecodingOptions options);

	//	// -(NSString * _Nonnull)base64EncodedStringWithOptions:(NSDataBase64EncodingOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("base64EncodedStringWithOptions:")]
	//	string Base64EncodedStringWithOptions (NSDataBase64EncodingOptions options);

	//	// -(instancetype _Nullable)initWithBase64EncodedData:(NSData * _Nonnull)base64Data options:(NSDataBase64DecodingOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("initWithBase64EncodedData:options:")]
	//	IntPtr Constructor (NSData base64Data, NSDataBase64DecodingOptions options);

	//	// -(NSData * _Nonnull)base64EncodedDataWithOptions:(NSDataBase64EncodingOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("base64EncodedDataWithOptions:")]
	//	NSData Base64EncodedDataWithOptions (NSDataBase64EncodingOptions options);
	//}

	//// @interface NSDeprecated (NSData)
	//[Category]
	//[BaseType (typeof(NSData))]
	//interface NSData_NSDeprecated
	//{
	//	// -(void)getBytes:(void * _Nonnull)buffer __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
	//	[Export ("getBytes:")]
	//	unsafe void GetBytes (void* buffer);

	//	// +(id _Nullable)dataWithContentsOfMappedFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Static]
	//	[Export ("dataWithContentsOfMappedFile:")]
	//	[return: NullAllowed]
	//	NSObject DataWithContentsOfMappedFile (string path);

	//	// -(id _Nullable)initWithContentsOfMappedFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
	//	[Export ("initWithContentsOfMappedFile:")]
	//	IntPtr Constructor (string path);

	//	// -(id _Nullable)initWithBase64Encoding:(NSString * _Nonnull)base64String __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=4.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.6, deprecated=10.9)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use initWithBase64EncodedString instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use initWithBase64EncodedString instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use initWithBase64EncodedString instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use initWithBase64EncodedString instead")]
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use initWithBase64EncodedString instead")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use initWithBase64EncodedString instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 6, message: "Use initWithBase64EncodedString instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use initWithBase64EncodedString instead")]
	//	[Export ("initWithBase64Encoding:")]
	//	IntPtr Constructor (string base64String);

	//	// -(NSString * _Nonnull)base64Encoding __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=4.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.6, deprecated=10.9)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use base64EncodedStringWithOptions instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use base64EncodedStringWithOptions instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use base64EncodedStringWithOptions instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use base64EncodedStringWithOptions instead")]
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use base64EncodedStringWithOptions instead")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use base64EncodedStringWithOptions instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 6, message: "Use base64EncodedStringWithOptions instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use base64EncodedStringWithOptions instead")]
	//	[Export ("base64Encoding")]
	//	[Verify (MethodToProperty)]
	//	string Base64Encoding { get; }
	//}

	//// @interface NSMutableData : NSData
	//[BaseType (typeof(NSData))]
	//interface NSMutableData
	//{
	//	// @property (readonly) void * _Nonnull mutableBytes __attribute__((objc_returns_inner_pointer));
	//	[Export ("mutableBytes")]
	//	unsafe void* MutableBytes { get; }

	//	// @property NSUInteger length;
	//	[Export ("length")]
	//	nuint Length { get; set; }
	//}

	//// @interface NSExtendedMutableData (NSMutableData)
	//[Category]
	//[BaseType (typeof(NSMutableData))]
	//interface NSMutableData_NSExtendedMutableData
	//{
	//	// -(void)appendBytes:(const void * _Nonnull)bytes length:(NSUInteger)length;
	//	[Export ("appendBytes:length:")]
	//	unsafe void AppendBytes (void* bytes, nuint length);

	//	// -(void)appendData:(NSData * _Nonnull)other;
	//	[Export ("appendData:")]
	//	void AppendData (NSData other);

	//	// -(void)increaseLengthBy:(NSUInteger)extraLength;
	//	[Export ("increaseLengthBy:")]
	//	void IncreaseLengthBy (nuint extraLength);

	//	// -(void)replaceBytesInRange:(NSRange)range withBytes:(const void * _Nonnull)bytes;
	//	[Export ("replaceBytesInRange:withBytes:")]
	//	unsafe void ReplaceBytesInRange (NSRange range, void* bytes);

	//	// -(void)resetBytesInRange:(NSRange)range;
	//	[Export ("resetBytesInRange:")]
	//	void ResetBytesInRange (NSRange range);

	//	// -(void)setData:(NSData * _Nonnull)data;
	//	[Export ("setData:")]
	//	void SetData (NSData data);

	//	// -(void)replaceBytesInRange:(NSRange)range withBytes:(const void * _Nullable)replacementBytes length:(NSUInteger)replacementLength;
	//	[Export ("replaceBytesInRange:withBytes:length:")]
	//	unsafe void ReplaceBytesInRange (NSRange range, [NullAllowed] void* replacementBytes, nuint replacementLength);
	//}

	//// @interface NSMutableDataCreation (NSMutableData)
	//[Category]
	//[BaseType (typeof(NSMutableData))]
	//interface NSMutableData_NSMutableDataCreation
	//{
	//	// +(instancetype _Nullable)dataWithCapacity:(NSUInteger)aNumItems;
	//	[Static]
	//	[Export ("dataWithCapacity:")]
	//	[return: NullAllowed]
	//	NSMutableData DataWithCapacity (nuint aNumItems);

	//	// +(instancetype _Nullable)dataWithLength:(NSUInteger)length;
	//	[Static]
	//	[Export ("dataWithLength:")]
	//	[return: NullAllowed]
	//	NSMutableData DataWithLength (nuint length);

	//	// -(instancetype _Nullable)initWithCapacity:(NSUInteger)capacity;
	//	[Export ("initWithCapacity:")]
	//	IntPtr Constructor (nuint capacity);

	//	// -(instancetype _Nullable)initWithLength:(NSUInteger)length;
	//	[Export ("initWithLength:")]
	//	IntPtr Constructor (nuint length);
	//}

	//// @interface NSPurgeableData : NSMutableData <NSDiscardableContent>
	//[iOS (4,0)]
	//[BaseType (typeof(NSMutableData))]
	//interface NSPurgeableData : INSDiscardableContent
	//{
	//}

	//// @interface NSDateInterval : NSObject <NSCopying, NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSDateInterval : INSCopying, INSSecureCoding
	//{
	//	// @property (readonly, copy) NSDate * _Nonnull startDate;
	//	[Export ("startDate", ArgumentSemantic.Copy)]
	//	NSDate StartDate { get; }

	//	// @property (readonly, copy) NSDate * _Nonnull endDate;
	//	[Export ("endDate", ArgumentSemantic.Copy)]
	//	NSDate EndDate { get; }

	//	// @property (readonly) NSTimeInterval duration;
	//	[Export ("duration")]
	//	double Duration { get; }

	//	// -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);

	//	// -(instancetype _Nonnull)initWithStartDate:(NSDate * _Nonnull)startDate duration:(NSTimeInterval)duration __attribute__((objc_designated_initializer));
	//	[Export ("initWithStartDate:duration:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSDate startDate, double duration);

	//	// -(instancetype _Nonnull)initWithStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate;
	//	[Export ("initWithStartDate:endDate:")]
	//	IntPtr Constructor (NSDate startDate, NSDate endDate);

	//	// -(NSComparisonResult)compare:(NSDateInterval * _Nonnull)dateInterval;
	//	[Export ("compare:")]
	//	NSComparisonResult Compare (NSDateInterval dateInterval);

	//	// -(BOOL)isEqualToDateInterval:(NSDateInterval * _Nonnull)dateInterval;
	//	[Export ("isEqualToDateInterval:")]
	//	bool IsEqualToDateInterval (NSDateInterval dateInterval);

	//	// -(BOOL)intersectsDateInterval:(NSDateInterval * _Nonnull)dateInterval;
	//	[Export ("intersectsDateInterval:")]
	//	bool IntersectsDateInterval (NSDateInterval dateInterval);

	//	// -(NSDateInterval * _Nullable)intersectionWithDateInterval:(NSDateInterval * _Nonnull)dateInterval;
	//	[Export ("intersectionWithDateInterval:")]
	//	[return: NullAllowed]
	//	NSDateInterval IntersectionWithDateInterval (NSDateInterval dateInterval);

	//	// -(BOOL)containsDate:(NSDate * _Nonnull)date;
	//	[Export ("containsDate:")]
	//	bool ContainsDate (NSDate date);
	//}

	//// @interface NSAttributedString : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	//[iOS (3,2)]
	//[BaseType (typeof(NSObject))]
	//interface NSAttributedString : INSCopying, INSMutableCopying, INSSecureCoding
	//{
	//	// @property (readonly, copy) NSString * _Nonnull string;
	//	[Export ("string")]
	//	string String { get; }

	//	// -(NSDictionary<NSAttributedStringKey,id> * _Nonnull)attributesAtIndex:(NSUInteger)location effectiveRange:(NSRangePointer _Nullable)range;
	//	[Export ("attributesAtIndex:effectiveRange:")]
	//	unsafe NSDictionary<NSString, NSObject> AttributesAtIndex (nuint location, [NullAllowed] NSRangePointer* range);
	//}

	//// @interface NSExtendedAttributedString (NSAttributedString)
	//[Category]
	//[BaseType (typeof(NSAttributedString))]
	//interface NSAttributedString_NSExtendedAttributedString
	//{
	//	// @property (readonly) NSUInteger length;
	//	[Export ("length")]
	//	nuint Length { get; }

	//	// -(id _Nullable)attribute:(NSAttributedStringKey _Nonnull)attrName atIndex:(NSUInteger)location effectiveRange:(NSRangePointer _Nullable)range;
	//	[Export ("attribute:atIndex:effectiveRange:")]
	//	[return: NullAllowed]
	//	unsafe NSObject Attribute (string attrName, nuint location, [NullAllowed] NSRangePointer* range);

	//	// -(NSAttributedString * _Nonnull)attributedSubstringFromRange:(NSRange)range;
	//	[Export ("attributedSubstringFromRange:")]
	//	NSAttributedString AttributedSubstringFromRange (NSRange range);

	//	// -(NSDictionary<NSAttributedStringKey,id> * _Nonnull)attributesAtIndex:(NSUInteger)location longestEffectiveRange:(NSRangePointer _Nullable)range inRange:(NSRange)rangeLimit;
	//	[Export ("attributesAtIndex:longestEffectiveRange:inRange:")]
	//	unsafe NSDictionary<NSString, NSObject> AttributesAtIndex (nuint location, [NullAllowed] NSRangePointer* range, NSRange rangeLimit);

	//	// -(id _Nullable)attribute:(NSAttributedStringKey _Nonnull)attrName atIndex:(NSUInteger)location longestEffectiveRange:(NSRangePointer _Nullable)range inRange:(NSRange)rangeLimit;
	//	[Export ("attribute:atIndex:longestEffectiveRange:inRange:")]
	//	[return: NullAllowed]
	//	unsafe NSObject Attribute (string attrName, nuint location, [NullAllowed] NSRangePointer* range, NSRange rangeLimit);

	//	// -(BOOL)isEqualToAttributedString:(NSAttributedString * _Nonnull)other;
	//	[Export ("isEqualToAttributedString:")]
	//	bool IsEqualToAttributedString (NSAttributedString other);

	//	// -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)str;
	//	[Export ("initWithString:")]
	//	IntPtr Constructor (string str);

	//	// -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)str attributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs;
	//	[Export ("initWithString:attributes:")]
	//	IntPtr Constructor (string str, [NullAllowed] NSDictionary<NSString, NSObject> attrs);

	//	// -(instancetype _Nonnull)initWithAttributedString:(NSAttributedString * _Nonnull)attrStr;
	//	[Export ("initWithAttributedString:")]
	//	IntPtr Constructor (NSAttributedString attrStr);

	//	// -(void)enumerateAttributesInRange:(NSRange)enumerationRange options:(NSAttributedStringEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSDictionary<NSAttributedStringKey,id> * _Nonnull, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateAttributesInRange:options:usingBlock:")]
	//	unsafe void EnumerateAttributesInRange (NSRange enumerationRange, NSAttributedStringEnumerationOptions opts, Action<NSDictionary<NSString, NSObject>, NSRange, bool*> block);

	//	// -(void)enumerateAttribute:(NSAttributedStringKey _Nonnull)attrName inRange:(NSRange)enumerationRange options:(NSAttributedStringEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(id _Nullable, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateAttribute:inRange:options:usingBlock:")]
	//	unsafe void EnumerateAttribute (string attrName, NSRange enumerationRange, NSAttributedStringEnumerationOptions opts, Action<NSObject, NSRange, bool*> block);
	//}

	//// @interface NSMutableAttributedString : NSAttributedString
	//[iOS (3,2)]
	//[BaseType (typeof(NSAttributedString))]
	//interface NSMutableAttributedString
	//{
	//	// -(void)replaceCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)str;
	//	[Export ("replaceCharactersInRange:withString:")]
	//	void ReplaceCharactersInRange (NSRange range, string str);

	//	// -(void)setAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs range:(NSRange)range;
	//	[Export ("setAttributes:range:")]
	//	void SetAttributes ([NullAllowed] NSDictionary<NSString, NSObject> attrs, NSRange range);
	//}

	//// @interface NSExtendedMutableAttributedString (NSMutableAttributedString)
	//[Category]
	//[BaseType (typeof(NSMutableAttributedString))]
	//interface NSMutableAttributedString_NSExtendedMutableAttributedString
	//{
	//	// @property (readonly, retain) NSMutableString * _Nonnull mutableString;
	//	[Export ("mutableString", ArgumentSemantic.Retain)]
	//	NSMutableString MutableString { get; }

	//	// -(void)addAttribute:(NSAttributedStringKey _Nonnull)name value:(id _Nonnull)value range:(NSRange)range;
	//	[Export ("addAttribute:value:range:")]
	//	void AddAttribute (string name, NSObject value, NSRange range);

	//	// -(void)addAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nonnull)attrs range:(NSRange)range;
	//	[Export ("addAttributes:range:")]
	//	void AddAttributes (NSDictionary<NSString, NSObject> attrs, NSRange range);

	//	// -(void)removeAttribute:(NSAttributedStringKey _Nonnull)name range:(NSRange)range;
	//	[Export ("removeAttribute:range:")]
	//	void RemoveAttribute (string name, NSRange range);

	//	// -(void)replaceCharactersInRange:(NSRange)range withAttributedString:(NSAttributedString * _Nonnull)attrString;
	//	[Export ("replaceCharactersInRange:withAttributedString:")]
	//	void ReplaceCharactersInRange (NSRange range, NSAttributedString attrString);

	//	// -(void)insertAttributedString:(NSAttributedString * _Nonnull)attrString atIndex:(NSUInteger)loc;
	//	[Export ("insertAttributedString:atIndex:")]
	//	void InsertAttributedString (NSAttributedString attrString, nuint loc);

	//	// -(void)appendAttributedString:(NSAttributedString * _Nonnull)attrString;
	//	[Export ("appendAttributedString:")]
	//	void AppendAttributedString (NSAttributedString attrString);

	//	// -(void)deleteCharactersInRange:(NSRange)range;
	//	[Export ("deleteCharactersInRange:")]
	//	void DeleteCharactersInRange (NSRange range);

	//	// -(void)setAttributedString:(NSAttributedString * _Nonnull)attrString;
	//	[Export ("setAttributedString:")]
	//	void SetAttributedString (NSAttributedString attrString);

	//	// -(void)beginEditing;
	//	[Export ("beginEditing")]
	//	void BeginEditing ();

	//	// -(void)endEditing;
	//	[Export ("endEditing")]
	//	void EndEditing ();
	//}

	//// @interface NSFormatter : NSObject <NSCopying, NSCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSFormatter : INSCopying, INSCoding
	//{
	//	// -(NSString * _Nullable)stringForObjectValue:(id _Nullable)obj;
	//	[Export ("stringForObjectValue:")]
	//	[return: NullAllowed]
	//	string StringForObjectValue ([NullAllowed] NSObject obj);

	//	// -(NSAttributedString * _Nullable)attributedStringForObjectValue:(id _Nonnull)obj withDefaultAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs;
	//	[Export ("attributedStringForObjectValue:withDefaultAttributes:")]
	//	[return: NullAllowed]
	//	NSAttributedString AttributedStringForObjectValue (NSObject obj, [NullAllowed] NSDictionary<NSString, NSObject> attrs);

	//	// -(NSString * _Nullable)editingStringForObjectValue:(id _Nonnull)obj;
	//	[Export ("editingStringForObjectValue:")]
	//	[return: NullAllowed]
	//	string EditingStringForObjectValue (NSObject obj);

	//	// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
	//	[Export ("getObjectValue:forString:errorDescription:")]
	//	bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);

	//	// -(BOOL)isPartialStringValid:(NSString * _Nonnull)partialString newEditingString:(NSString * _Nullable * _Nullable)newString errorDescription:(NSString * _Nullable * _Nullable)error;
	//	[Export ("isPartialStringValid:newEditingString:errorDescription:")]
	//	bool IsPartialStringValid (string partialString, [NullAllowed] out string newString, [NullAllowed] out string error);

	//	// -(BOOL)isPartialStringValid:(NSString * _Nonnull * _Nonnull)partialStringPtr proposedSelectedRange:(NSRangePointer _Nullable)proposedSelRangePtr originalString:(NSString * _Nonnull)origString originalSelectedRange:(NSRange)origSelRange errorDescription:(NSString * _Nullable * _Nullable)error;
	//	[Export ("isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:")]
	//	unsafe bool IsPartialStringValid (out string partialStringPtr, [NullAllowed] NSRangePointer* proposedSelRangePtr, string origString, NSRange origSelRange, [NullAllowed] out string error);
	//}

	//// @interface NSDateFormatter : NSFormatter
	//[BaseType (typeof(NSFormatter))]
	//interface NSDateFormatter
	//{
	//	// @property NSFormattingContext formattingContext __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[Export ("formattingContext", ArgumentSemantic.Assign)]
	//	NSFormattingContext FormattingContext { get; set; }

	//	// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string range:(NSRange * _Nullable)rangep error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("getObjectValue:forString:range:error:")]
	//	unsafe bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] NSRange* rangep, [NullAllowed] out NSError error);

	//	// -(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date;
	//	[Export ("stringFromDate:")]
	//	string StringFromDate (NSDate date);

	//	// -(NSDate * _Nullable)dateFromString:(NSString * _Nonnull)string;
	//	[Export ("dateFromString:")]
	//	[return: NullAllowed]
	//	NSDate DateFromString (string @string);

	//	// +(NSString * _Nonnull)localizedStringFromDate:(NSDate * _Nonnull)date dateStyle:(NSDateFormatterStyle)dstyle timeStyle:(NSDateFormatterStyle)tstyle __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("localizedStringFromDate:dateStyle:timeStyle:")]
	//	string LocalizedStringFromDate (NSDate date, NSDateFormatterStyle dstyle, NSDateFormatterStyle tstyle);

	//	// +(NSString * _Nullable)dateFormatFromTemplate:(NSString * _Nonnull)tmplate options:(NSUInteger)opts locale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("dateFormatFromTemplate:options:locale:")]
	//	[return: NullAllowed]
	//	string DateFormatFromTemplate (string tmplate, nuint opts, [NullAllowed] NSLocale locale);

	//	// @property (class) NSDateFormatterBehavior defaultFormatterBehavior;
	//	[Static]
	//	[Export ("defaultFormatterBehavior", ArgumentSemantic.Assign)]
	//	NSDateFormatterBehavior DefaultFormatterBehavior { get; set; }

	//	// -(void)setLocalizedDateFormatFromTemplate:(NSString * _Nonnull)dateFormatTemplate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("setLocalizedDateFormatFromTemplate:")]
	//	void SetLocalizedDateFormatFromTemplate (string dateFormatTemplate);

	//	// @property (copy) NSString * _Null_unspecified dateFormat;
	//	[Export ("dateFormat")]
	//	string DateFormat { get; set; }

	//	// @property NSDateFormatterStyle dateStyle;
	//	[Export ("dateStyle", ArgumentSemantic.Assign)]
	//	NSDateFormatterStyle DateStyle { get; set; }

	//	// @property NSDateFormatterStyle timeStyle;
	//	[Export ("timeStyle", ArgumentSemantic.Assign)]
	//	NSDateFormatterStyle TimeStyle { get; set; }

	//	// @property (copy) NSLocale * _Null_unspecified locale;
	//	[Export ("locale", ArgumentSemantic.Copy)]
	//	NSLocale Locale { get; set; }

	//	// @property BOOL generatesCalendarDates;
	//	[Export ("generatesCalendarDates")]
	//	bool GeneratesCalendarDates { get; set; }

	//	// @property NSDateFormatterBehavior formatterBehavior;
	//	[Export ("formatterBehavior", ArgumentSemantic.Assign)]
	//	NSDateFormatterBehavior FormatterBehavior { get; set; }

	//	// @property (copy) NSTimeZone * _Null_unspecified timeZone;
	//	[Export ("timeZone", ArgumentSemantic.Copy)]
	//	NSTimeZone TimeZone { get; set; }

	//	// @property (copy) NSCalendar * _Null_unspecified calendar;
	//	[Export ("calendar", ArgumentSemantic.Copy)]
	//	NSCalendar Calendar { get; set; }

	//	// @property (getter = isLenient) BOOL lenient;
	//	[Export ("lenient")]
	//	bool Lenient { [Bind ("isLenient")] get; set; }

	//	// @property (copy) NSDate * _Nullable twoDigitStartDate;
	//	[NullAllowed, Export ("twoDigitStartDate", ArgumentSemantic.Copy)]
	//	NSDate TwoDigitStartDate { get; set; }

	//	// @property (copy) NSDate * _Nullable defaultDate;
	//	[NullAllowed, Export ("defaultDate", ArgumentSemantic.Copy)]
	//	NSDate DefaultDate { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified eraSymbols;
	//	[Export ("eraSymbols", ArgumentSemantic.Copy)]
	//	string[] EraSymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified monthSymbols;
	//	[Export ("monthSymbols", ArgumentSemantic.Copy)]
	//	string[] MonthSymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified shortMonthSymbols;
	//	[Export ("shortMonthSymbols", ArgumentSemantic.Copy)]
	//	string[] ShortMonthSymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified weekdaySymbols;
	//	[Export ("weekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] WeekdaySymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified shortWeekdaySymbols;
	//	[Export ("shortWeekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] ShortWeekdaySymbols { get; set; }

	//	// @property (copy) NSString * _Null_unspecified AMSymbol;
	//	[Export ("AMSymbol")]
	//	string AMSymbol { get; set; }

	//	// @property (copy) NSString * _Null_unspecified PMSymbol;
	//	[Export ("PMSymbol")]
	//	string PMSymbol { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified longEraSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("longEraSymbols", ArgumentSemantic.Copy)]
	//	string[] LongEraSymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified veryShortMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("veryShortMonthSymbols", ArgumentSemantic.Copy)]
	//	string[] VeryShortMonthSymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified standaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("standaloneMonthSymbols", ArgumentSemantic.Copy)]
	//	string[] StandaloneMonthSymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified shortStandaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("shortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
	//	string[] ShortStandaloneMonthSymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified veryShortStandaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("veryShortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
	//	string[] VeryShortStandaloneMonthSymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified veryShortWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("veryShortWeekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] VeryShortWeekdaySymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified standaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("standaloneWeekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] StandaloneWeekdaySymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified shortStandaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("shortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] ShortStandaloneWeekdaySymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified veryShortStandaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("veryShortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
	//	string[] VeryShortStandaloneWeekdaySymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified quarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("quarterSymbols", ArgumentSemantic.Copy)]
	//	string[] QuarterSymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified shortQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("shortQuarterSymbols", ArgumentSemantic.Copy)]
	//	string[] ShortQuarterSymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified standaloneQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("standaloneQuarterSymbols", ArgumentSemantic.Copy)]
	//	string[] StandaloneQuarterSymbols { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Null_unspecified shortStandaloneQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("shortStandaloneQuarterSymbols", ArgumentSemantic.Copy)]
	//	string[] ShortStandaloneQuarterSymbols { get; set; }

	//	// @property (copy) NSDate * _Nullable gregorianStartDate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[NullAllowed, Export ("gregorianStartDate", ArgumentSemantic.Copy)]
	//	NSDate GregorianStartDate { get; set; }

	//	// @property BOOL doesRelativeDateFormatting __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("doesRelativeDateFormatting")]
	//	bool DoesRelativeDateFormatting { get; set; }
	//}

	//// @interface NSDateIntervalFormatter : NSFormatter
	//[iOS (8,0)]
	//[BaseType (typeof(NSFormatter))]
	//interface NSDateIntervalFormatter
	//{
	//	// @property (copy) NSLocale * _Null_unspecified locale;
	//	[Export ("locale", ArgumentSemantic.Copy)]
	//	NSLocale Locale { get; set; }

	//	// @property (copy) NSCalendar * _Null_unspecified calendar;
	//	[Export ("calendar", ArgumentSemantic.Copy)]
	//	NSCalendar Calendar { get; set; }

	//	// @property (copy) NSTimeZone * _Null_unspecified timeZone;
	//	[Export ("timeZone", ArgumentSemantic.Copy)]
	//	NSTimeZone TimeZone { get; set; }

	//	// @property (copy) NSString * _Null_unspecified dateTemplate;
	//	[Export ("dateTemplate")]
	//	string DateTemplate { get; set; }

	//	// @property NSDateIntervalFormatterStyle dateStyle;
	//	[Export ("dateStyle", ArgumentSemantic.Assign)]
	//	NSDateIntervalFormatterStyle DateStyle { get; set; }

	//	// @property NSDateIntervalFormatterStyle timeStyle;
	//	[Export ("timeStyle", ArgumentSemantic.Assign)]
	//	NSDateIntervalFormatterStyle TimeStyle { get; set; }

	//	// -(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)fromDate toDate:(NSDate * _Nonnull)toDate;
	//	[Export ("stringFromDate:toDate:")]
	//	string StringFromDate (NSDate fromDate, NSDate toDate);

	//	// -(NSString * _Nullable)stringFromDateInterval:(NSDateInterval * _Nonnull)dateInterval __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("stringFromDateInterval:")]
	//	[return: NullAllowed]
	//	string StringFromDateInterval (NSDateInterval dateInterval);
	//}

	//// @interface NSISO8601DateFormatter : NSFormatter <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSFormatter))]
	//interface NSISO8601DateFormatter : INSSecureCoding
	//{
	//	// @property (copy) NSTimeZone * _Null_unspecified timeZone;
	//	[Export ("timeZone", ArgumentSemantic.Copy)]
	//	NSTimeZone TimeZone { get; set; }

	//	// @property NSISO8601DateFormatOptions formatOptions;
	//	[Export ("formatOptions", ArgumentSemantic.Assign)]
	//	NSISO8601DateFormatOptions FormatOptions { get; set; }

	//	// -(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date;
	//	[Export ("stringFromDate:")]
	//	string StringFromDate (NSDate date);

	//	// -(NSDate * _Nullable)dateFromString:(NSString * _Nonnull)string;
	//	[Export ("dateFromString:")]
	//	[return: NullAllowed]
	//	NSDate DateFromString (string @string);

	//	// +(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date timeZone:(NSTimeZone * _Nonnull)timeZone formatOptions:(NSISO8601DateFormatOptions)formatOptions;
	//	[Static]
	//	[Export ("stringFromDate:timeZone:formatOptions:")]
	//	string StringFromDate (NSDate date, NSTimeZone timeZone, NSISO8601DateFormatOptions formatOptions);
	//}

	//// @interface NSMassFormatter : NSFormatter
	//[iOS (8,0)]
	//[BaseType (typeof(NSFormatter))]
	//interface NSMassFormatter
	//{
	//	// @property (copy) NSNumberFormatter * _Null_unspecified numberFormatter;
	//	[Export ("numberFormatter", ArgumentSemantic.Copy)]
	//	NSNumberFormatter NumberFormatter { get; set; }

	//	// @property NSFormattingUnitStyle unitStyle;
	//	[Export ("unitStyle", ArgumentSemantic.Assign)]
	//	NSFormattingUnitStyle UnitStyle { get; set; }

	//	// @property (getter = isForPersonMassUse) BOOL forPersonMassUse;
	//	[Export ("forPersonMassUse")]
	//	bool ForPersonMassUse { [Bind ("isForPersonMassUse")] get; set; }

	//	// -(NSString * _Nonnull)stringFromValue:(double)value unit:(NSMassFormatterUnit)unit;
	//	[Export ("stringFromValue:unit:")]
	//	string StringFromValue (double value, NSMassFormatterUnit unit);

	//	// -(NSString * _Nonnull)stringFromKilograms:(double)numberInKilograms;
	//	[Export ("stringFromKilograms:")]
	//	string StringFromKilograms (double numberInKilograms);

	//	// -(NSString * _Nonnull)unitStringFromValue:(double)value unit:(NSMassFormatterUnit)unit;
	//	[Export ("unitStringFromValue:unit:")]
	//	string UnitStringFromValue (double value, NSMassFormatterUnit unit);

	//	// -(NSString * _Nonnull)unitStringFromKilograms:(double)numberInKilograms usedUnit:(NSMassFormatterUnit * _Nullable)unitp;
	//	[Export ("unitStringFromKilograms:usedUnit:")]
	//	unsafe string UnitStringFromKilograms (double numberInKilograms, [NullAllowed] NSMassFormatterUnit* unitp);

	//	// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
	//	[Export ("getObjectValue:forString:errorDescription:")]
	//	bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
	//}

	//// @interface NSLengthFormatter : NSFormatter
	//[iOS (8,0)]
	//[BaseType (typeof(NSFormatter))]
	//interface NSLengthFormatter
	//{
	//	// @property (copy) NSNumberFormatter * _Null_unspecified numberFormatter;
	//	[Export ("numberFormatter", ArgumentSemantic.Copy)]
	//	NSNumberFormatter NumberFormatter { get; set; }

	//	// @property NSFormattingUnitStyle unitStyle;
	//	[Export ("unitStyle", ArgumentSemantic.Assign)]
	//	NSFormattingUnitStyle UnitStyle { get; set; }

	//	// @property (getter = isForPersonHeightUse) BOOL forPersonHeightUse;
	//	[Export ("forPersonHeightUse")]
	//	bool ForPersonHeightUse { [Bind ("isForPersonHeightUse")] get; set; }

	//	// -(NSString * _Nonnull)stringFromValue:(double)value unit:(NSLengthFormatterUnit)unit;
	//	[Export ("stringFromValue:unit:")]
	//	string StringFromValue (double value, NSLengthFormatterUnit unit);

	//	// -(NSString * _Nonnull)stringFromMeters:(double)numberInMeters;
	//	[Export ("stringFromMeters:")]
	//	string StringFromMeters (double numberInMeters);

	//	// -(NSString * _Nonnull)unitStringFromValue:(double)value unit:(NSLengthFormatterUnit)unit;
	//	[Export ("unitStringFromValue:unit:")]
	//	string UnitStringFromValue (double value, NSLengthFormatterUnit unit);

	//	// -(NSString * _Nonnull)unitStringFromMeters:(double)numberInMeters usedUnit:(NSLengthFormatterUnit * _Nullable)unitp;
	//	[Export ("unitStringFromMeters:usedUnit:")]
	//	unsafe string UnitStringFromMeters (double numberInMeters, [NullAllowed] NSLengthFormatterUnit* unitp);

	//	// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
	//	[Export ("getObjectValue:forString:errorDescription:")]
	//	bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
	//}

	//// @interface NSEnergyFormatter : NSFormatter
	//[iOS (8,0)]
	//[BaseType (typeof(NSFormatter))]
	//interface NSEnergyFormatter
	//{
	//	// @property (copy) NSNumberFormatter * _Null_unspecified numberFormatter;
	//	[Export ("numberFormatter", ArgumentSemantic.Copy)]
	//	NSNumberFormatter NumberFormatter { get; set; }

	//	// @property NSFormattingUnitStyle unitStyle;
	//	[Export ("unitStyle", ArgumentSemantic.Assign)]
	//	NSFormattingUnitStyle UnitStyle { get; set; }

	//	// @property (getter = isForFoodEnergyUse) BOOL forFoodEnergyUse;
	//	[Export ("forFoodEnergyUse")]
	//	bool ForFoodEnergyUse { [Bind ("isForFoodEnergyUse")] get; set; }

	//	// -(NSString * _Nonnull)stringFromValue:(double)value unit:(NSEnergyFormatterUnit)unit;
	//	[Export ("stringFromValue:unit:")]
	//	string StringFromValue (double value, NSEnergyFormatterUnit unit);

	//	// -(NSString * _Nonnull)stringFromJoules:(double)numberInJoules;
	//	[Export ("stringFromJoules:")]
	//	string StringFromJoules (double numberInJoules);

	//	// -(NSString * _Nonnull)unitStringFromValue:(double)value unit:(NSEnergyFormatterUnit)unit;
	//	[Export ("unitStringFromValue:unit:")]
	//	string UnitStringFromValue (double value, NSEnergyFormatterUnit unit);

	//	// -(NSString * _Nonnull)unitStringFromJoules:(double)numberInJoules usedUnit:(NSEnergyFormatterUnit * _Nullable)unitp;
	//	[Export ("unitStringFromJoules:usedUnit:")]
	//	unsafe string UnitStringFromJoules (double numberInJoules, [NullAllowed] NSEnergyFormatterUnit* unitp);

	//	// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
	//	[Export ("getObjectValue:forString:errorDescription:")]
	//	bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
	//}

	//// @interface NSUnitConverter : NSObject
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSUnitConverter
	//{
	//	// -(double)baseUnitValueFromValue:(double)value;
	//	[Export ("baseUnitValueFromValue:")]
	//	double BaseUnitValueFromValue (double value);

	//	// -(double)valueFromBaseUnitValue:(double)baseUnitValue;
	//	[Export ("valueFromBaseUnitValue:")]
	//	double ValueFromBaseUnitValue (double baseUnitValue);
	//}

	//// @interface NSUnitConverterLinear : NSUnitConverter <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSUnitConverter))]
	//interface NSUnitConverterLinear : INSSecureCoding
	//{
	//	// @property (readonly) double coefficient;
	//	[Export ("coefficient")]
	//	double Coefficient { get; }

	//	// @property (readonly) double constant;
	//	[Export ("constant")]
	//	double Constant { get; }

	//	// -(instancetype _Nonnull)initWithCoefficient:(double)coefficient;
	//	[Export ("initWithCoefficient:")]
	//	IntPtr Constructor (double coefficient);

	//	// -(instancetype _Nonnull)initWithCoefficient:(double)coefficient constant:(double)constant __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoefficient:constant:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (double coefficient, double constant);
	//}

	//// @interface NSUnit : NSObject <NSCopying, NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface NSUnit : INSCopying, INSSecureCoding
	//{
	//	// @property (readonly, copy) NSString * _Nonnull symbol;
	//	[Export ("symbol")]
	//	string Symbol { get; }

	//	// -(instancetype _Nonnull)initWithSymbol:(NSString * _Nonnull)symbol __attribute__((objc_designated_initializer));
	//	[Export ("initWithSymbol:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string symbol);
	//}

	//// @interface NSDimension : NSUnit <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSUnit))]
	//interface NSDimension : INSSecureCoding
	//{
	//	// @property (readonly, copy) NSUnitConverter * _Nonnull converter;
	//	[Export ("converter", ArgumentSemantic.Copy)]
	//	NSUnitConverter Converter { get; }

	//	// -(instancetype _Nonnull)initWithSymbol:(NSString * _Nonnull)symbol converter:(NSUnitConverter * _Nonnull)converter __attribute__((objc_designated_initializer));
	//	[Export ("initWithSymbol:converter:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string symbol, NSUnitConverter converter);

	//	// +(instancetype _Nonnull)baseUnit;
	//	[Static]
	//	[Export ("baseUnit")]
	//	NSDimension BaseUnit ();
	//}

	//// @interface NSUnitAcceleration : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitAcceleration : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitAcceleration * _Nonnull metersPerSecondSquared;
	//	[Static]
	//	[Export ("metersPerSecondSquared", ArgumentSemantic.Copy)]
	//	NSUnitAcceleration MetersPerSecondSquared { get; }

	//	// @property (readonly, copy, class) NSUnitAcceleration * _Nonnull gravity;
	//	[Static]
	//	[Export ("gravity", ArgumentSemantic.Copy)]
	//	NSUnitAcceleration Gravity { get; }
	//}

	//// @interface NSUnitAngle : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitAngle : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitAngle * _Nonnull degrees;
	//	[Static]
	//	[Export ("degrees", ArgumentSemantic.Copy)]
	//	NSUnitAngle Degrees { get; }

	//	// @property (readonly, copy, class) NSUnitAngle * _Nonnull arcMinutes;
	//	[Static]
	//	[Export ("arcMinutes", ArgumentSemantic.Copy)]
	//	NSUnitAngle ArcMinutes { get; }

	//	// @property (readonly, copy, class) NSUnitAngle * _Nonnull arcSeconds;
	//	[Static]
	//	[Export ("arcSeconds", ArgumentSemantic.Copy)]
	//	NSUnitAngle ArcSeconds { get; }

	//	// @property (readonly, copy, class) NSUnitAngle * _Nonnull radians;
	//	[Static]
	//	[Export ("radians", ArgumentSemantic.Copy)]
	//	NSUnitAngle Radians { get; }

	//	// @property (readonly, copy, class) NSUnitAngle * _Nonnull gradians;
	//	[Static]
	//	[Export ("gradians", ArgumentSemantic.Copy)]
	//	NSUnitAngle Gradians { get; }

	//	// @property (readonly, copy, class) NSUnitAngle * _Nonnull revolutions;
	//	[Static]
	//	[Export ("revolutions", ArgumentSemantic.Copy)]
	//	NSUnitAngle Revolutions { get; }
	//}

	//// @interface NSUnitArea : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitArea : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull squareMegameters;
	//	[Static]
	//	[Export ("squareMegameters", ArgumentSemantic.Copy)]
	//	NSUnitArea SquareMegameters { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull squareKilometers;
	//	[Static]
	//	[Export ("squareKilometers", ArgumentSemantic.Copy)]
	//	NSUnitArea SquareKilometers { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull squareMeters;
	//	[Static]
	//	[Export ("squareMeters", ArgumentSemantic.Copy)]
	//	NSUnitArea SquareMeters { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull squareCentimeters;
	//	[Static]
	//	[Export ("squareCentimeters", ArgumentSemantic.Copy)]
	//	NSUnitArea SquareCentimeters { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull squareMillimeters;
	//	[Static]
	//	[Export ("squareMillimeters", ArgumentSemantic.Copy)]
	//	NSUnitArea SquareMillimeters { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull squareMicrometers;
	//	[Static]
	//	[Export ("squareMicrometers", ArgumentSemantic.Copy)]
	//	NSUnitArea SquareMicrometers { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull squareNanometers;
	//	[Static]
	//	[Export ("squareNanometers", ArgumentSemantic.Copy)]
	//	NSUnitArea SquareNanometers { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull squareInches;
	//	[Static]
	//	[Export ("squareInches", ArgumentSemantic.Copy)]
	//	NSUnitArea SquareInches { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull squareFeet;
	//	[Static]
	//	[Export ("squareFeet", ArgumentSemantic.Copy)]
	//	NSUnitArea SquareFeet { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull squareYards;
	//	[Static]
	//	[Export ("squareYards", ArgumentSemantic.Copy)]
	//	NSUnitArea SquareYards { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull squareMiles;
	//	[Static]
	//	[Export ("squareMiles", ArgumentSemantic.Copy)]
	//	NSUnitArea SquareMiles { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull acres;
	//	[Static]
	//	[Export ("acres", ArgumentSemantic.Copy)]
	//	NSUnitArea Acres { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull ares;
	//	[Static]
	//	[Export ("ares", ArgumentSemantic.Copy)]
	//	NSUnitArea Ares { get; }

	//	// @property (readonly, copy, class) NSUnitArea * _Nonnull hectares;
	//	[Static]
	//	[Export ("hectares", ArgumentSemantic.Copy)]
	//	NSUnitArea Hectares { get; }
	//}

	//// @interface NSUnitConcentrationMass : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitConcentrationMass : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitConcentrationMass * _Nonnull gramsPerLiter;
	//	[Static]
	//	[Export ("gramsPerLiter", ArgumentSemantic.Copy)]
	//	NSUnitConcentrationMass GramsPerLiter { get; }

	//	// @property (readonly, copy, class) NSUnitConcentrationMass * _Nonnull milligramsPerDeciliter;
	//	[Static]
	//	[Export ("milligramsPerDeciliter", ArgumentSemantic.Copy)]
	//	NSUnitConcentrationMass MilligramsPerDeciliter { get; }

	//	// +(NSUnitConcentrationMass * _Nonnull)millimolesPerLiterWithGramsPerMole:(double)gramsPerMole;
	//	[Static]
	//	[Export ("millimolesPerLiterWithGramsPerMole:")]
	//	NSUnitConcentrationMass MillimolesPerLiterWithGramsPerMole (double gramsPerMole);
	//}

	//// @interface NSUnitDispersion : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitDispersion : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitDispersion * _Nonnull partsPerMillion;
	//	[Static]
	//	[Export ("partsPerMillion", ArgumentSemantic.Copy)]
	//	NSUnitDispersion PartsPerMillion { get; }
	//}

	//// @interface NSUnitDuration : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitDuration : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitDuration * _Nonnull seconds;
	//	[Static]
	//	[Export ("seconds", ArgumentSemantic.Copy)]
	//	NSUnitDuration Seconds { get; }

	//	// @property (readonly, copy, class) NSUnitDuration * _Nonnull minutes;
	//	[Static]
	//	[Export ("minutes", ArgumentSemantic.Copy)]
	//	NSUnitDuration Minutes { get; }

	//	// @property (readonly, copy, class) NSUnitDuration * _Nonnull hours;
	//	[Static]
	//	[Export ("hours", ArgumentSemantic.Copy)]
	//	NSUnitDuration Hours { get; }
	//}

	//// @interface NSUnitElectricCharge : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitElectricCharge : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull coulombs;
	//	[Static]
	//	[Export ("coulombs", ArgumentSemantic.Copy)]
	//	NSUnitElectricCharge Coulombs { get; }

	//	// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull megaampereHours;
	//	[Static]
	//	[Export ("megaampereHours", ArgumentSemantic.Copy)]
	//	NSUnitElectricCharge MegaampereHours { get; }

	//	// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull kiloampereHours;
	//	[Static]
	//	[Export ("kiloampereHours", ArgumentSemantic.Copy)]
	//	NSUnitElectricCharge KiloampereHours { get; }

	//	// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull ampereHours;
	//	[Static]
	//	[Export ("ampereHours", ArgumentSemantic.Copy)]
	//	NSUnitElectricCharge AmpereHours { get; }

	//	// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull milliampereHours;
	//	[Static]
	//	[Export ("milliampereHours", ArgumentSemantic.Copy)]
	//	NSUnitElectricCharge MilliampereHours { get; }

	//	// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull microampereHours;
	//	[Static]
	//	[Export ("microampereHours", ArgumentSemantic.Copy)]
	//	NSUnitElectricCharge MicroampereHours { get; }
	//}

	//// @interface NSUnitElectricCurrent : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitElectricCurrent : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull megaamperes;
	//	[Static]
	//	[Export ("megaamperes", ArgumentSemantic.Copy)]
	//	NSUnitElectricCurrent Megaamperes { get; }

	//	// @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull kiloamperes;
	//	[Static]
	//	[Export ("kiloamperes", ArgumentSemantic.Copy)]
	//	NSUnitElectricCurrent Kiloamperes { get; }

	//	// @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull amperes;
	//	[Static]
	//	[Export ("amperes", ArgumentSemantic.Copy)]
	//	NSUnitElectricCurrent Amperes { get; }

	//	// @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull milliamperes;
	//	[Static]
	//	[Export ("milliamperes", ArgumentSemantic.Copy)]
	//	NSUnitElectricCurrent Milliamperes { get; }

	//	// @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull microamperes;
	//	[Static]
	//	[Export ("microamperes", ArgumentSemantic.Copy)]
	//	NSUnitElectricCurrent Microamperes { get; }
	//}

	//// @interface NSUnitElectricPotentialDifference : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitElectricPotentialDifference : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull megavolts;
	//	[Static]
	//	[Export ("megavolts", ArgumentSemantic.Copy)]
	//	NSUnitElectricPotentialDifference Megavolts { get; }

	//	// @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull kilovolts;
	//	[Static]
	//	[Export ("kilovolts", ArgumentSemantic.Copy)]
	//	NSUnitElectricPotentialDifference Kilovolts { get; }

	//	// @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull volts;
	//	[Static]
	//	[Export ("volts", ArgumentSemantic.Copy)]
	//	NSUnitElectricPotentialDifference Volts { get; }

	//	// @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull millivolts;
	//	[Static]
	//	[Export ("millivolts", ArgumentSemantic.Copy)]
	//	NSUnitElectricPotentialDifference Millivolts { get; }

	//	// @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull microvolts;
	//	[Static]
	//	[Export ("microvolts", ArgumentSemantic.Copy)]
	//	NSUnitElectricPotentialDifference Microvolts { get; }
	//}

	//// @interface NSUnitElectricResistance : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitElectricResistance : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull megaohms;
	//	[Static]
	//	[Export ("megaohms", ArgumentSemantic.Copy)]
	//	NSUnitElectricResistance Megaohms { get; }

	//	// @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull kiloohms;
	//	[Static]
	//	[Export ("kiloohms", ArgumentSemantic.Copy)]
	//	NSUnitElectricResistance Kiloohms { get; }

	//	// @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull ohms;
	//	[Static]
	//	[Export ("ohms", ArgumentSemantic.Copy)]
	//	NSUnitElectricResistance Ohms { get; }

	//	// @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull milliohms;
	//	[Static]
	//	[Export ("milliohms", ArgumentSemantic.Copy)]
	//	NSUnitElectricResistance Milliohms { get; }

	//	// @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull microohms;
	//	[Static]
	//	[Export ("microohms", ArgumentSemantic.Copy)]
	//	NSUnitElectricResistance Microohms { get; }
	//}

	//// @interface NSUnitEnergy : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitEnergy : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitEnergy * _Nonnull kilojoules;
	//	[Static]
	//	[Export ("kilojoules", ArgumentSemantic.Copy)]
	//	NSUnitEnergy Kilojoules { get; }

	//	// @property (readonly, copy, class) NSUnitEnergy * _Nonnull joules;
	//	[Static]
	//	[Export ("joules", ArgumentSemantic.Copy)]
	//	NSUnitEnergy Joules { get; }

	//	// @property (readonly, copy, class) NSUnitEnergy * _Nonnull kilocalories;
	//	[Static]
	//	[Export ("kilocalories", ArgumentSemantic.Copy)]
	//	NSUnitEnergy Kilocalories { get; }

	//	// @property (readonly, copy, class) NSUnitEnergy * _Nonnull calories;
	//	[Static]
	//	[Export ("calories", ArgumentSemantic.Copy)]
	//	NSUnitEnergy Calories { get; }

	//	// @property (readonly, copy, class) NSUnitEnergy * _Nonnull kilowattHours;
	//	[Static]
	//	[Export ("kilowattHours", ArgumentSemantic.Copy)]
	//	NSUnitEnergy KilowattHours { get; }
	//}

	//// @interface NSUnitFrequency : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitFrequency : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitFrequency * _Nonnull terahertz;
	//	[Static]
	//	[Export ("terahertz", ArgumentSemantic.Copy)]
	//	NSUnitFrequency Terahertz { get; }

	//	// @property (readonly, copy, class) NSUnitFrequency * _Nonnull gigahertz;
	//	[Static]
	//	[Export ("gigahertz", ArgumentSemantic.Copy)]
	//	NSUnitFrequency Gigahertz { get; }

	//	// @property (readonly, copy, class) NSUnitFrequency * _Nonnull megahertz;
	//	[Static]
	//	[Export ("megahertz", ArgumentSemantic.Copy)]
	//	NSUnitFrequency Megahertz { get; }

	//	// @property (readonly, copy, class) NSUnitFrequency * _Nonnull kilohertz;
	//	[Static]
	//	[Export ("kilohertz", ArgumentSemantic.Copy)]
	//	NSUnitFrequency Kilohertz { get; }

	//	// @property (readonly, copy, class) NSUnitFrequency * _Nonnull hertz;
	//	[Static]
	//	[Export ("hertz", ArgumentSemantic.Copy)]
	//	NSUnitFrequency Hertz { get; }

	//	// @property (readonly, copy, class) NSUnitFrequency * _Nonnull millihertz;
	//	[Static]
	//	[Export ("millihertz", ArgumentSemantic.Copy)]
	//	NSUnitFrequency Millihertz { get; }

	//	// @property (readonly, copy, class) NSUnitFrequency * _Nonnull microhertz;
	//	[Static]
	//	[Export ("microhertz", ArgumentSemantic.Copy)]
	//	NSUnitFrequency Microhertz { get; }

	//	// @property (readonly, copy, class) NSUnitFrequency * _Nonnull nanohertz;
	//	[Static]
	//	[Export ("nanohertz", ArgumentSemantic.Copy)]
	//	NSUnitFrequency Nanohertz { get; }
	//}

	//// @interface NSUnitFuelEfficiency : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitFuelEfficiency : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitFuelEfficiency * _Nonnull litersPer100Kilometers;
	//	[Static]
	//	[Export ("litersPer100Kilometers", ArgumentSemantic.Copy)]
	//	NSUnitFuelEfficiency LitersPer100Kilometers { get; }

	//	// @property (readonly, copy, class) NSUnitFuelEfficiency * _Nonnull milesPerImperialGallon;
	//	[Static]
	//	[Export ("milesPerImperialGallon", ArgumentSemantic.Copy)]
	//	NSUnitFuelEfficiency MilesPerImperialGallon { get; }

	//	// @property (readonly, copy, class) NSUnitFuelEfficiency * _Nonnull milesPerGallon;
	//	[Static]
	//	[Export ("milesPerGallon", ArgumentSemantic.Copy)]
	//	NSUnitFuelEfficiency MilesPerGallon { get; }
	//}

	//// @interface NSUnitLength : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitLength : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull megameters;
	//	[Static]
	//	[Export ("megameters", ArgumentSemantic.Copy)]
	//	NSUnitLength Megameters { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull kilometers;
	//	[Static]
	//	[Export ("kilometers", ArgumentSemantic.Copy)]
	//	NSUnitLength Kilometers { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull hectometers;
	//	[Static]
	//	[Export ("hectometers", ArgumentSemantic.Copy)]
	//	NSUnitLength Hectometers { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull decameters;
	//	[Static]
	//	[Export ("decameters", ArgumentSemantic.Copy)]
	//	NSUnitLength Decameters { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull meters;
	//	[Static]
	//	[Export ("meters", ArgumentSemantic.Copy)]
	//	NSUnitLength Meters { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull decimeters;
	//	[Static]
	//	[Export ("decimeters", ArgumentSemantic.Copy)]
	//	NSUnitLength Decimeters { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull centimeters;
	//	[Static]
	//	[Export ("centimeters", ArgumentSemantic.Copy)]
	//	NSUnitLength Centimeters { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull millimeters;
	//	[Static]
	//	[Export ("millimeters", ArgumentSemantic.Copy)]
	//	NSUnitLength Millimeters { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull micrometers;
	//	[Static]
	//	[Export ("micrometers", ArgumentSemantic.Copy)]
	//	NSUnitLength Micrometers { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull nanometers;
	//	[Static]
	//	[Export ("nanometers", ArgumentSemantic.Copy)]
	//	NSUnitLength Nanometers { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull picometers;
	//	[Static]
	//	[Export ("picometers", ArgumentSemantic.Copy)]
	//	NSUnitLength Picometers { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull inches;
	//	[Static]
	//	[Export ("inches", ArgumentSemantic.Copy)]
	//	NSUnitLength Inches { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull feet;
	//	[Static]
	//	[Export ("feet", ArgumentSemantic.Copy)]
	//	NSUnitLength Feet { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull yards;
	//	[Static]
	//	[Export ("yards", ArgumentSemantic.Copy)]
	//	NSUnitLength Yards { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull miles;
	//	[Static]
	//	[Export ("miles", ArgumentSemantic.Copy)]
	//	NSUnitLength Miles { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull scandinavianMiles;
	//	[Static]
	//	[Export ("scandinavianMiles", ArgumentSemantic.Copy)]
	//	NSUnitLength ScandinavianMiles { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull lightyears;
	//	[Static]
	//	[Export ("lightyears", ArgumentSemantic.Copy)]
	//	NSUnitLength Lightyears { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull nauticalMiles;
	//	[Static]
	//	[Export ("nauticalMiles", ArgumentSemantic.Copy)]
	//	NSUnitLength NauticalMiles { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull fathoms;
	//	[Static]
	//	[Export ("fathoms", ArgumentSemantic.Copy)]
	//	NSUnitLength Fathoms { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull furlongs;
	//	[Static]
	//	[Export ("furlongs", ArgumentSemantic.Copy)]
	//	NSUnitLength Furlongs { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull astronomicalUnits;
	//	[Static]
	//	[Export ("astronomicalUnits", ArgumentSemantic.Copy)]
	//	NSUnitLength AstronomicalUnits { get; }

	//	// @property (readonly, copy, class) NSUnitLength * _Nonnull parsecs;
	//	[Static]
	//	[Export ("parsecs", ArgumentSemantic.Copy)]
	//	NSUnitLength Parsecs { get; }
	//}

	//// @interface NSUnitIlluminance : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitIlluminance : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitIlluminance * _Nonnull lux;
	//	[Static]
	//	[Export ("lux", ArgumentSemantic.Copy)]
	//	NSUnitIlluminance Lux { get; }
	//}

	//// @interface NSUnitMass : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitMass : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull kilograms;
	//	[Static]
	//	[Export ("kilograms", ArgumentSemantic.Copy)]
	//	NSUnitMass Kilograms { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull grams;
	//	[Static]
	//	[Export ("grams", ArgumentSemantic.Copy)]
	//	NSUnitMass Grams { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull decigrams;
	//	[Static]
	//	[Export ("decigrams", ArgumentSemantic.Copy)]
	//	NSUnitMass Decigrams { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull centigrams;
	//	[Static]
	//	[Export ("centigrams", ArgumentSemantic.Copy)]
	//	NSUnitMass Centigrams { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull milligrams;
	//	[Static]
	//	[Export ("milligrams", ArgumentSemantic.Copy)]
	//	NSUnitMass Milligrams { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull micrograms;
	//	[Static]
	//	[Export ("micrograms", ArgumentSemantic.Copy)]
	//	NSUnitMass Micrograms { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull nanograms;
	//	[Static]
	//	[Export ("nanograms", ArgumentSemantic.Copy)]
	//	NSUnitMass Nanograms { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull picograms;
	//	[Static]
	//	[Export ("picograms", ArgumentSemantic.Copy)]
	//	NSUnitMass Picograms { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull ounces;
	//	[Static]
	//	[Export ("ounces", ArgumentSemantic.Copy)]
	//	NSUnitMass Ounces { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull poundsMass;
	//	[Static]
	//	[Export ("poundsMass", ArgumentSemantic.Copy)]
	//	NSUnitMass PoundsMass { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull stones;
	//	[Static]
	//	[Export ("stones", ArgumentSemantic.Copy)]
	//	NSUnitMass Stones { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull metricTons;
	//	[Static]
	//	[Export ("metricTons", ArgumentSemantic.Copy)]
	//	NSUnitMass MetricTons { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull shortTons;
	//	[Static]
	//	[Export ("shortTons", ArgumentSemantic.Copy)]
	//	NSUnitMass ShortTons { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull carats;
	//	[Static]
	//	[Export ("carats", ArgumentSemantic.Copy)]
	//	NSUnitMass Carats { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull ouncesTroy;
	//	[Static]
	//	[Export ("ouncesTroy", ArgumentSemantic.Copy)]
	//	NSUnitMass OuncesTroy { get; }

	//	// @property (readonly, copy, class) NSUnitMass * _Nonnull slugs;
	//	[Static]
	//	[Export ("slugs", ArgumentSemantic.Copy)]
	//	NSUnitMass Slugs { get; }
	//}

	//// @interface NSUnitPower : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitPower : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitPower * _Nonnull terawatts;
	//	[Static]
	//	[Export ("terawatts", ArgumentSemantic.Copy)]
	//	NSUnitPower Terawatts { get; }

	//	// @property (readonly, copy, class) NSUnitPower * _Nonnull gigawatts;
	//	[Static]
	//	[Export ("gigawatts", ArgumentSemantic.Copy)]
	//	NSUnitPower Gigawatts { get; }

	//	// @property (readonly, copy, class) NSUnitPower * _Nonnull megawatts;
	//	[Static]
	//	[Export ("megawatts", ArgumentSemantic.Copy)]
	//	NSUnitPower Megawatts { get; }

	//	// @property (readonly, copy, class) NSUnitPower * _Nonnull kilowatts;
	//	[Static]
	//	[Export ("kilowatts", ArgumentSemantic.Copy)]
	//	NSUnitPower Kilowatts { get; }

	//	// @property (readonly, copy, class) NSUnitPower * _Nonnull watts;
	//	[Static]
	//	[Export ("watts", ArgumentSemantic.Copy)]
	//	NSUnitPower Watts { get; }

	//	// @property (readonly, copy, class) NSUnitPower * _Nonnull milliwatts;
	//	[Static]
	//	[Export ("milliwatts", ArgumentSemantic.Copy)]
	//	NSUnitPower Milliwatts { get; }

	//	// @property (readonly, copy, class) NSUnitPower * _Nonnull microwatts;
	//	[Static]
	//	[Export ("microwatts", ArgumentSemantic.Copy)]
	//	NSUnitPower Microwatts { get; }

	//	// @property (readonly, copy, class) NSUnitPower * _Nonnull nanowatts;
	//	[Static]
	//	[Export ("nanowatts", ArgumentSemantic.Copy)]
	//	NSUnitPower Nanowatts { get; }

	//	// @property (readonly, copy, class) NSUnitPower * _Nonnull picowatts;
	//	[Static]
	//	[Export ("picowatts", ArgumentSemantic.Copy)]
	//	NSUnitPower Picowatts { get; }

	//	// @property (readonly, copy, class) NSUnitPower * _Nonnull femtowatts;
	//	[Static]
	//	[Export ("femtowatts", ArgumentSemantic.Copy)]
	//	NSUnitPower Femtowatts { get; }

	//	// @property (readonly, copy, class) NSUnitPower * _Nonnull horsepower;
	//	[Static]
	//	[Export ("horsepower", ArgumentSemantic.Copy)]
	//	NSUnitPower Horsepower { get; }
	//}

	//// @interface NSUnitPressure : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitPressure : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitPressure * _Nonnull newtonsPerMetersSquared;
	//	[Static]
	//	[Export ("newtonsPerMetersSquared", ArgumentSemantic.Copy)]
	//	NSUnitPressure NewtonsPerMetersSquared { get; }

	//	// @property (readonly, copy, class) NSUnitPressure * _Nonnull gigapascals;
	//	[Static]
	//	[Export ("gigapascals", ArgumentSemantic.Copy)]
	//	NSUnitPressure Gigapascals { get; }

	//	// @property (readonly, copy, class) NSUnitPressure * _Nonnull megapascals;
	//	[Static]
	//	[Export ("megapascals", ArgumentSemantic.Copy)]
	//	NSUnitPressure Megapascals { get; }

	//	// @property (readonly, copy, class) NSUnitPressure * _Nonnull kilopascals;
	//	[Static]
	//	[Export ("kilopascals", ArgumentSemantic.Copy)]
	//	NSUnitPressure Kilopascals { get; }

	//	// @property (readonly, copy, class) NSUnitPressure * _Nonnull hectopascals;
	//	[Static]
	//	[Export ("hectopascals", ArgumentSemantic.Copy)]
	//	NSUnitPressure Hectopascals { get; }

	//	// @property (readonly, copy, class) NSUnitPressure * _Nonnull inchesOfMercury;
	//	[Static]
	//	[Export ("inchesOfMercury", ArgumentSemantic.Copy)]
	//	NSUnitPressure InchesOfMercury { get; }

	//	// @property (readonly, copy, class) NSUnitPressure * _Nonnull bars;
	//	[Static]
	//	[Export ("bars", ArgumentSemantic.Copy)]
	//	NSUnitPressure Bars { get; }

	//	// @property (readonly, copy, class) NSUnitPressure * _Nonnull millibars;
	//	[Static]
	//	[Export ("millibars", ArgumentSemantic.Copy)]
	//	NSUnitPressure Millibars { get; }

	//	// @property (readonly, copy, class) NSUnitPressure * _Nonnull millimetersOfMercury;
	//	[Static]
	//	[Export ("millimetersOfMercury", ArgumentSemantic.Copy)]
	//	NSUnitPressure MillimetersOfMercury { get; }

	//	// @property (readonly, copy, class) NSUnitPressure * _Nonnull poundsForcePerSquareInch;
	//	[Static]
	//	[Export ("poundsForcePerSquareInch", ArgumentSemantic.Copy)]
	//	NSUnitPressure PoundsForcePerSquareInch { get; }
	//}

	//// @interface NSUnitSpeed : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitSpeed : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitSpeed * _Nonnull metersPerSecond;
	//	[Static]
	//	[Export ("metersPerSecond", ArgumentSemantic.Copy)]
	//	NSUnitSpeed MetersPerSecond { get; }

	//	// @property (readonly, copy, class) NSUnitSpeed * _Nonnull kilometersPerHour;
	//	[Static]
	//	[Export ("kilometersPerHour", ArgumentSemantic.Copy)]
	//	NSUnitSpeed KilometersPerHour { get; }

	//	// @property (readonly, copy, class) NSUnitSpeed * _Nonnull milesPerHour;
	//	[Static]
	//	[Export ("milesPerHour", ArgumentSemantic.Copy)]
	//	NSUnitSpeed MilesPerHour { get; }

	//	// @property (readonly, copy, class) NSUnitSpeed * _Nonnull knots;
	//	[Static]
	//	[Export ("knots", ArgumentSemantic.Copy)]
	//	NSUnitSpeed Knots { get; }
	//}

	//// @interface NSUnitTemperature : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitTemperature : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitTemperature * _Nonnull kelvin;
	//	[Static]
	//	[Export ("kelvin", ArgumentSemantic.Copy)]
	//	NSUnitTemperature Kelvin { get; }

	//	// @property (readonly, copy, class) NSUnitTemperature * _Nonnull celsius;
	//	[Static]
	//	[Export ("celsius", ArgumentSemantic.Copy)]
	//	NSUnitTemperature Celsius { get; }

	//	// @property (readonly, copy, class) NSUnitTemperature * _Nonnull fahrenheit;
	//	[Static]
	//	[Export ("fahrenheit", ArgumentSemantic.Copy)]
	//	NSUnitTemperature Fahrenheit { get; }
	//}

	//// @interface NSUnitVolume : NSDimension <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSDimension))]
	//interface NSUnitVolume : INSSecureCoding
	//{
	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull megaliters;
	//	[Static]
	//	[Export ("megaliters", ArgumentSemantic.Copy)]
	//	NSUnitVolume Megaliters { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull kiloliters;
	//	[Static]
	//	[Export ("kiloliters", ArgumentSemantic.Copy)]
	//	NSUnitVolume Kiloliters { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull liters;
	//	[Static]
	//	[Export ("liters", ArgumentSemantic.Copy)]
	//	NSUnitVolume Liters { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull deciliters;
	//	[Static]
	//	[Export ("deciliters", ArgumentSemantic.Copy)]
	//	NSUnitVolume Deciliters { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull centiliters;
	//	[Static]
	//	[Export ("centiliters", ArgumentSemantic.Copy)]
	//	NSUnitVolume Centiliters { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull milliliters;
	//	[Static]
	//	[Export ("milliliters", ArgumentSemantic.Copy)]
	//	NSUnitVolume Milliliters { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicKilometers;
	//	[Static]
	//	[Export ("cubicKilometers", ArgumentSemantic.Copy)]
	//	NSUnitVolume CubicKilometers { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicMeters;
	//	[Static]
	//	[Export ("cubicMeters", ArgumentSemantic.Copy)]
	//	NSUnitVolume CubicMeters { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicDecimeters;
	//	[Static]
	//	[Export ("cubicDecimeters", ArgumentSemantic.Copy)]
	//	NSUnitVolume CubicDecimeters { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicCentimeters;
	//	[Static]
	//	[Export ("cubicCentimeters", ArgumentSemantic.Copy)]
	//	NSUnitVolume CubicCentimeters { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicMillimeters;
	//	[Static]
	//	[Export ("cubicMillimeters", ArgumentSemantic.Copy)]
	//	NSUnitVolume CubicMillimeters { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicInches;
	//	[Static]
	//	[Export ("cubicInches", ArgumentSemantic.Copy)]
	//	NSUnitVolume CubicInches { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicFeet;
	//	[Static]
	//	[Export ("cubicFeet", ArgumentSemantic.Copy)]
	//	NSUnitVolume CubicFeet { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicYards;
	//	[Static]
	//	[Export ("cubicYards", ArgumentSemantic.Copy)]
	//	NSUnitVolume CubicYards { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicMiles;
	//	[Static]
	//	[Export ("cubicMiles", ArgumentSemantic.Copy)]
	//	NSUnitVolume CubicMiles { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull acreFeet;
	//	[Static]
	//	[Export ("acreFeet", ArgumentSemantic.Copy)]
	//	NSUnitVolume AcreFeet { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull bushels;
	//	[Static]
	//	[Export ("bushels", ArgumentSemantic.Copy)]
	//	NSUnitVolume Bushels { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull teaspoons;
	//	[Static]
	//	[Export ("teaspoons", ArgumentSemantic.Copy)]
	//	NSUnitVolume Teaspoons { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull tablespoons;
	//	[Static]
	//	[Export ("tablespoons", ArgumentSemantic.Copy)]
	//	NSUnitVolume Tablespoons { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull fluidOunces;
	//	[Static]
	//	[Export ("fluidOunces", ArgumentSemantic.Copy)]
	//	NSUnitVolume FluidOunces { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull cups;
	//	[Static]
	//	[Export ("cups", ArgumentSemantic.Copy)]
	//	NSUnitVolume Cups { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull pints;
	//	[Static]
	//	[Export ("pints", ArgumentSemantic.Copy)]
	//	NSUnitVolume Pints { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull quarts;
	//	[Static]
	//	[Export ("quarts", ArgumentSemantic.Copy)]
	//	NSUnitVolume Quarts { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull gallons;
	//	[Static]
	//	[Export ("gallons", ArgumentSemantic.Copy)]
	//	NSUnitVolume Gallons { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialTeaspoons;
	//	[Static]
	//	[Export ("imperialTeaspoons", ArgumentSemantic.Copy)]
	//	NSUnitVolume ImperialTeaspoons { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialTablespoons;
	//	[Static]
	//	[Export ("imperialTablespoons", ArgumentSemantic.Copy)]
	//	NSUnitVolume ImperialTablespoons { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialFluidOunces;
	//	[Static]
	//	[Export ("imperialFluidOunces", ArgumentSemantic.Copy)]
	//	NSUnitVolume ImperialFluidOunces { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialPints;
	//	[Static]
	//	[Export ("imperialPints", ArgumentSemantic.Copy)]
	//	NSUnitVolume ImperialPints { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialQuarts;
	//	[Static]
	//	[Export ("imperialQuarts", ArgumentSemantic.Copy)]
	//	NSUnitVolume ImperialQuarts { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialGallons;
	//	[Static]
	//	[Export ("imperialGallons", ArgumentSemantic.Copy)]
	//	NSUnitVolume ImperialGallons { get; }

	//	// @property (readonly, copy, class) NSUnitVolume * _Nonnull metricCups;
	//	[Static]
	//	[Export ("metricCups", ArgumentSemantic.Copy)]
	//	NSUnitVolume MetricCups { get; }
	//}

	//// audit-objc-generics: @interface NSMeasurement<UnitType : NSUnit *> : NSObject <NSCopying, NSSecureCoding>
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface NSMeasurement : INSCopying, INSSecureCoding
	//{
	//	// @property (readonly, copy) UnitType _Nonnull unit;
	//	[Export ("unit", ArgumentSemantic.Copy)]
	//	NSUnit Unit { get; }

	//	// @property (readonly) double doubleValue;
	//	[Export ("doubleValue")]
	//	double DoubleValue { get; }

	//	// -(instancetype _Nonnull)initWithDoubleValue:(double)doubleValue unit:(UnitType _Nonnull)unit __attribute__((objc_designated_initializer));
	//	[Export ("initWithDoubleValue:unit:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (double doubleValue, NSUnit unit);

	//	// -(BOOL)canBeConvertedToUnit:(NSUnit * _Nonnull)unit;
	//	[Export ("canBeConvertedToUnit:")]
	//	bool CanBeConvertedToUnit (NSUnit unit);

	//	// -(NSMeasurement * _Nonnull)measurementByConvertingToUnit:(NSUnit * _Nonnull)unit;
	//	[Export ("measurementByConvertingToUnit:")]
	//	NSMeasurement`1 MeasurementByConvertingToUnit (NSUnit unit);

	//	// -(NSMeasurement<UnitType> * _Nonnull)measurementByAddingMeasurement:(NSMeasurement<UnitType> * _Nonnull)measurement;
	//	[Export ("measurementByAddingMeasurement:")]
	//	NSMeasurement`1<NSUnit> MeasurementByAddingMeasurement (NSMeasurement`1<NSUnit> measurement);

	//	// -(NSMeasurement<UnitType> * _Nonnull)measurementBySubtractingMeasurement:(NSMeasurement<UnitType> * _Nonnull)measurement;
	//	[Export ("measurementBySubtractingMeasurement:")]
	//	NSMeasurement`1<NSUnit> MeasurementBySubtractingMeasurement (NSMeasurement`1<NSUnit> measurement);
	//}

	//// @interface NSNumberFormatter : NSFormatter
	//[BaseType (typeof(NSFormatter))]
	//interface NSNumberFormatter
	//{
	//	// @property NSFormattingContext formattingContext __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[Export ("formattingContext", ArgumentSemantic.Assign)]
	//	NSFormattingContext FormattingContext { get; set; }

	//	// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string range:(NSRange * _Nullable)rangep error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("getObjectValue:forString:range:error:")]
	//	unsafe bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] NSRange* rangep, [NullAllowed] out NSError error);

	//	// -(NSString * _Nullable)stringFromNumber:(NSNumber * _Nonnull)number;
	//	[Export ("stringFromNumber:")]
	//	[return: NullAllowed]
	//	string StringFromNumber (NSNumber number);

	//	// -(NSNumber * _Nullable)numberFromString:(NSString * _Nonnull)string;
	//	[Export ("numberFromString:")]
	//	[return: NullAllowed]
	//	NSNumber NumberFromString (string @string);

	//	// +(NSString * _Nonnull)localizedStringFromNumber:(NSNumber * _Nonnull)num numberStyle:(NSNumberFormatterStyle)nstyle __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("localizedStringFromNumber:numberStyle:")]
	//	string LocalizedStringFromNumber (NSNumber num, NSNumberFormatterStyle nstyle);

	//	// +(NSNumberFormatterBehavior)defaultFormatterBehavior;
	//	// +(void)setDefaultFormatterBehavior:(NSNumberFormatterBehavior)behavior;
	//	[Static]
	//	[Export ("defaultFormatterBehavior")]
	//	[Verify (MethodToProperty)]
	//	NSNumberFormatterBehavior DefaultFormatterBehavior { get; set; }

	//	// @property NSNumberFormatterStyle numberStyle;
	//	[Export ("numberStyle", ArgumentSemantic.Assign)]
	//	NSNumberFormatterStyle NumberStyle { get; set; }

	//	// @property (copy) NSLocale * _Null_unspecified locale;
	//	[Export ("locale", ArgumentSemantic.Copy)]
	//	NSLocale Locale { get; set; }

	//	// @property BOOL generatesDecimalNumbers;
	//	[Export ("generatesDecimalNumbers")]
	//	bool GeneratesDecimalNumbers { get; set; }

	//	// @property NSNumberFormatterBehavior formatterBehavior;
	//	[Export ("formatterBehavior", ArgumentSemantic.Assign)]
	//	NSNumberFormatterBehavior FormatterBehavior { get; set; }

	//	// @property (copy) NSString * _Null_unspecified negativeFormat;
	//	[Export ("negativeFormat")]
	//	string NegativeFormat { get; set; }

	//	// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNegativeValues;
	//	[NullAllowed, Export ("textAttributesForNegativeValues", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> TextAttributesForNegativeValues { get; set; }

	//	// @property (copy) NSString * _Null_unspecified positiveFormat;
	//	[Export ("positiveFormat")]
	//	string PositiveFormat { get; set; }

	//	// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForPositiveValues;
	//	[NullAllowed, Export ("textAttributesForPositiveValues", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> TextAttributesForPositiveValues { get; set; }

	//	// @property BOOL allowsFloats;
	//	[Export ("allowsFloats")]
	//	bool AllowsFloats { get; set; }

	//	// @property (copy) NSString * _Null_unspecified decimalSeparator;
	//	[Export ("decimalSeparator")]
	//	string DecimalSeparator { get; set; }

	//	// @property BOOL alwaysShowsDecimalSeparator;
	//	[Export ("alwaysShowsDecimalSeparator")]
	//	bool AlwaysShowsDecimalSeparator { get; set; }

	//	// @property (copy) NSString * _Null_unspecified currencyDecimalSeparator;
	//	[Export ("currencyDecimalSeparator")]
	//	string CurrencyDecimalSeparator { get; set; }

	//	// @property BOOL usesGroupingSeparator;
	//	[Export ("usesGroupingSeparator")]
	//	bool UsesGroupingSeparator { get; set; }

	//	// @property (copy) NSString * _Null_unspecified groupingSeparator;
	//	[Export ("groupingSeparator")]
	//	string GroupingSeparator { get; set; }

	//	// @property (copy) NSString * _Nullable zeroSymbol;
	//	[NullAllowed, Export ("zeroSymbol")]
	//	string ZeroSymbol { get; set; }

	//	// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForZero;
	//	[NullAllowed, Export ("textAttributesForZero", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> TextAttributesForZero { get; set; }

	//	// @property (copy) NSString * _Nonnull nilSymbol;
	//	[Export ("nilSymbol")]
	//	string NilSymbol { get; set; }

	//	// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNil;
	//	[NullAllowed, Export ("textAttributesForNil", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> TextAttributesForNil { get; set; }

	//	// @property (copy) NSString * _Null_unspecified notANumberSymbol;
	//	[Export ("notANumberSymbol")]
	//	string NotANumberSymbol { get; set; }

	//	// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNotANumber;
	//	[NullAllowed, Export ("textAttributesForNotANumber", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> TextAttributesForNotANumber { get; set; }

	//	// @property (copy) NSString * _Nonnull positiveInfinitySymbol;
	//	[Export ("positiveInfinitySymbol")]
	//	string PositiveInfinitySymbol { get; set; }

	//	// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForPositiveInfinity;
	//	[NullAllowed, Export ("textAttributesForPositiveInfinity", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> TextAttributesForPositiveInfinity { get; set; }

	//	// @property (copy) NSString * _Nonnull negativeInfinitySymbol;
	//	[Export ("negativeInfinitySymbol")]
	//	string NegativeInfinitySymbol { get; set; }

	//	// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNegativeInfinity;
	//	[NullAllowed, Export ("textAttributesForNegativeInfinity", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> TextAttributesForNegativeInfinity { get; set; }

	//	// @property (copy) NSString * _Null_unspecified positivePrefix;
	//	[Export ("positivePrefix")]
	//	string PositivePrefix { get; set; }

	//	// @property (copy) NSString * _Null_unspecified positiveSuffix;
	//	[Export ("positiveSuffix")]
	//	string PositiveSuffix { get; set; }

	//	// @property (copy) NSString * _Null_unspecified negativePrefix;
	//	[Export ("negativePrefix")]
	//	string NegativePrefix { get; set; }

	//	// @property (copy) NSString * _Null_unspecified negativeSuffix;
	//	[Export ("negativeSuffix")]
	//	string NegativeSuffix { get; set; }

	//	// @property (copy) NSString * _Null_unspecified currencyCode;
	//	[Export ("currencyCode")]
	//	string CurrencyCode { get; set; }

	//	// @property (copy) NSString * _Null_unspecified currencySymbol;
	//	[Export ("currencySymbol")]
	//	string CurrencySymbol { get; set; }

	//	// @property (copy) NSString * _Null_unspecified internationalCurrencySymbol;
	//	[Export ("internationalCurrencySymbol")]
	//	string InternationalCurrencySymbol { get; set; }

	//	// @property (copy) NSString * _Null_unspecified percentSymbol;
	//	[Export ("percentSymbol")]
	//	string PercentSymbol { get; set; }

	//	// @property (copy) NSString * _Null_unspecified perMillSymbol;
	//	[Export ("perMillSymbol")]
	//	string PerMillSymbol { get; set; }

	//	// @property (copy) NSString * _Null_unspecified minusSign;
	//	[Export ("minusSign")]
	//	string MinusSign { get; set; }

	//	// @property (copy) NSString * _Null_unspecified plusSign;
	//	[Export ("plusSign")]
	//	string PlusSign { get; set; }

	//	// @property (copy) NSString * _Null_unspecified exponentSymbol;
	//	[Export ("exponentSymbol")]
	//	string ExponentSymbol { get; set; }

	//	// @property NSUInteger groupingSize;
	//	[Export ("groupingSize")]
	//	nuint GroupingSize { get; set; }

	//	// @property NSUInteger secondaryGroupingSize;
	//	[Export ("secondaryGroupingSize")]
	//	nuint SecondaryGroupingSize { get; set; }

	//	// @property (copy) NSNumber * _Nullable multiplier;
	//	[NullAllowed, Export ("multiplier", ArgumentSemantic.Copy)]
	//	NSNumber Multiplier { get; set; }

	//	// @property NSUInteger formatWidth;
	//	[Export ("formatWidth")]
	//	nuint FormatWidth { get; set; }

	//	// @property (copy) NSString * _Null_unspecified paddingCharacter;
	//	[Export ("paddingCharacter")]
	//	string PaddingCharacter { get; set; }

	//	// @property NSNumberFormatterPadPosition paddingPosition;
	//	[Export ("paddingPosition", ArgumentSemantic.Assign)]
	//	NSNumberFormatterPadPosition PaddingPosition { get; set; }

	//	// @property NSNumberFormatterRoundingMode roundingMode;
	//	[Export ("roundingMode", ArgumentSemantic.Assign)]
	//	NSNumberFormatterRoundingMode RoundingMode { get; set; }

	//	// @property (copy) NSNumber * _Null_unspecified roundingIncrement;
	//	[Export ("roundingIncrement", ArgumentSemantic.Copy)]
	//	NSNumber RoundingIncrement { get; set; }

	//	// @property NSUInteger minimumIntegerDigits;
	//	[Export ("minimumIntegerDigits")]
	//	nuint MinimumIntegerDigits { get; set; }

	//	// @property NSUInteger maximumIntegerDigits;
	//	[Export ("maximumIntegerDigits")]
	//	nuint MaximumIntegerDigits { get; set; }

	//	// @property NSUInteger minimumFractionDigits;
	//	[Export ("minimumFractionDigits")]
	//	nuint MinimumFractionDigits { get; set; }

	//	// @property NSUInteger maximumFractionDigits;
	//	[Export ("maximumFractionDigits")]
	//	nuint MaximumFractionDigits { get; set; }

	//	// @property (copy) NSNumber * _Nullable minimum;
	//	[NullAllowed, Export ("minimum", ArgumentSemantic.Copy)]
	//	NSNumber Minimum { get; set; }

	//	// @property (copy) NSNumber * _Nullable maximum;
	//	[NullAllowed, Export ("maximum", ArgumentSemantic.Copy)]
	//	NSNumber Maximum { get; set; }

	//	// @property (copy) NSString * _Null_unspecified currencyGroupingSeparator __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("currencyGroupingSeparator")]
	//	string CurrencyGroupingSeparator { get; set; }

	//	// @property (getter = isLenient) BOOL lenient __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("lenient")]
	//	bool Lenient { [Bind ("isLenient")] get; set; }

	//	// @property BOOL usesSignificantDigits __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("usesSignificantDigits")]
	//	bool UsesSignificantDigits { get; set; }

	//	// @property NSUInteger minimumSignificantDigits __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("minimumSignificantDigits")]
	//	nuint MinimumSignificantDigits { get; set; }

	//	// @property NSUInteger maximumSignificantDigits __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("maximumSignificantDigits")]
	//	nuint MaximumSignificantDigits { get; set; }

	//	// @property (getter = isPartialStringValidationEnabled) BOOL partialStringValidationEnabled __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("partialStringValidationEnabled")]
	//	bool PartialStringValidationEnabled { [Bind ("isPartialStringValidationEnabled")] get; set; }
	//}

	//// @interface NSLocale : NSObject <NSCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSLocale : INSCopying, INSSecureCoding
	//{
	//	// -(id _Nullable)objectForKey:(NSLocaleKey _Nonnull)key;
	//	[Export ("objectForKey:")]
	//	[return: NullAllowed]
	//	NSObject ObjectForKey (string key);

	//	// -(NSString * _Nullable)displayNameForKey:(NSLocaleKey _Nonnull)key value:(id _Nonnull)value;
	//	[Export ("displayNameForKey:value:")]
	//	[return: NullAllowed]
	//	string DisplayNameForKey (string key, NSObject value);

	//	// -(instancetype _Nonnull)initWithLocaleIdentifier:(NSString * _Nonnull)string __attribute__((objc_designated_initializer));
	//	[Export ("initWithLocaleIdentifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string @string);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSExtendedLocale (NSLocale)
	//[Category]
	//[BaseType (typeof(NSLocale))]
	//interface NSLocale_NSExtendedLocale
	//{
	//	// @property (readonly, copy) NSString * _Nonnull localeIdentifier;
	//	[Export ("localeIdentifier")]
	//	string LocaleIdentifier { get; }

	//	// -(NSString * _Nonnull)localizedStringForLocaleIdentifier:(NSString * _Nonnull)localeIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("localizedStringForLocaleIdentifier:")]
	//	string LocalizedStringForLocaleIdentifier (string localeIdentifier);

	//	// @property (readonly, copy) NSString * _Nonnull languageCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("languageCode")]
	//	string LanguageCode { get; }

	//	// -(NSString * _Nullable)localizedStringForLanguageCode:(NSString * _Nonnull)languageCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("localizedStringForLanguageCode:")]
	//	[return: NullAllowed]
	//	string LocalizedStringForLanguageCode (string languageCode);

	//	// @property (readonly, copy) NSString * _Nullable countryCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[NullAllowed, Export ("countryCode")]
	//	string CountryCode { get; }

	//	// -(NSString * _Nullable)localizedStringForCountryCode:(NSString * _Nonnull)countryCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("localizedStringForCountryCode:")]
	//	[return: NullAllowed]
	//	string LocalizedStringForCountryCode (string countryCode);

	//	// @property (readonly, copy) NSString * _Nullable scriptCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[NullAllowed, Export ("scriptCode")]
	//	string ScriptCode { get; }

	//	// -(NSString * _Nullable)localizedStringForScriptCode:(NSString * _Nonnull)scriptCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("localizedStringForScriptCode:")]
	//	[return: NullAllowed]
	//	string LocalizedStringForScriptCode (string scriptCode);

	//	// @property (readonly, copy) NSString * _Nullable variantCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[NullAllowed, Export ("variantCode")]
	//	string VariantCode { get; }

	//	// -(NSString * _Nullable)localizedStringForVariantCode:(NSString * _Nonnull)variantCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("localizedStringForVariantCode:")]
	//	[return: NullAllowed]
	//	string LocalizedStringForVariantCode (string variantCode);

	//	// @property (readonly, copy) NSCharacterSet * _Nonnull exemplarCharacterSet __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("exemplarCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet ExemplarCharacterSet { get; }

	//	// @property (readonly, copy) NSString * _Nonnull calendarIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("calendarIdentifier")]
	//	string CalendarIdentifier { get; }

	//	// -(NSString * _Nullable)localizedStringForCalendarIdentifier:(NSString * _Nonnull)calendarIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("localizedStringForCalendarIdentifier:")]
	//	[return: NullAllowed]
	//	string LocalizedStringForCalendarIdentifier (string calendarIdentifier);

	//	// @property (readonly, copy) NSString * _Nullable collationIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[NullAllowed, Export ("collationIdentifier")]
	//	string CollationIdentifier { get; }

	//	// -(NSString * _Nullable)localizedStringForCollationIdentifier:(NSString * _Nonnull)collationIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("localizedStringForCollationIdentifier:")]
	//	[return: NullAllowed]
	//	string LocalizedStringForCollationIdentifier (string collationIdentifier);

	//	// @property (readonly) BOOL usesMetricSystem __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("usesMetricSystem")]
	//	bool UsesMetricSystem { get; }

	//	// @property (readonly, copy) NSString * _Nonnull decimalSeparator __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("decimalSeparator")]
	//	string DecimalSeparator { get; }

	//	// @property (readonly, copy) NSString * _Nonnull groupingSeparator __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("groupingSeparator")]
	//	string GroupingSeparator { get; }

	//	// @property (readonly, copy) NSString * _Nonnull currencySymbol __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("currencySymbol")]
	//	string CurrencySymbol { get; }

	//	// @property (readonly, copy) NSString * _Nullable currencyCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[NullAllowed, Export ("currencyCode")]
	//	string CurrencyCode { get; }

	//	// -(NSString * _Nullable)localizedStringForCurrencyCode:(NSString * _Nonnull)currencyCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("localizedStringForCurrencyCode:")]
	//	[return: NullAllowed]
	//	string LocalizedStringForCurrencyCode (string currencyCode);

	//	// @property (readonly, copy) NSString * _Nonnull collatorIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("collatorIdentifier")]
	//	string CollatorIdentifier { get; }

	//	// -(NSString * _Nullable)localizedStringForCollatorIdentifier:(NSString * _Nonnull)collatorIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("localizedStringForCollatorIdentifier:")]
	//	[return: NullAllowed]
	//	string LocalizedStringForCollatorIdentifier (string collatorIdentifier);

	//	// @property (readonly, copy) NSString * _Nonnull quotationBeginDelimiter __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("quotationBeginDelimiter")]
	//	string QuotationBeginDelimiter { get; }

	//	// @property (readonly, copy) NSString * _Nonnull quotationEndDelimiter __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("quotationEndDelimiter")]
	//	string QuotationEndDelimiter { get; }

	//	// @property (readonly, copy) NSString * _Nonnull alternateQuotationBeginDelimiter __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("alternateQuotationBeginDelimiter")]
	//	string AlternateQuotationBeginDelimiter { get; }

	//	// @property (readonly, copy) NSString * _Nonnull alternateQuotationEndDelimiter __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("alternateQuotationEndDelimiter")]
	//	string AlternateQuotationEndDelimiter { get; }
	//}

	//// @interface NSLocaleCreation (NSLocale)
	//[Category]
	//[BaseType (typeof(NSLocale))]
	//[DisableDefaultCtor]
	//interface NSLocale_NSLocaleCreation
	//{
	//	// @property (readonly, strong, class) NSLocale * _Nonnull autoupdatingCurrentLocale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Static]
	//	[Export ("autoupdatingCurrentLocale", ArgumentSemantic.Strong)]
	//	NSLocale AutoupdatingCurrentLocale { get; }

	//	// @property (readonly, copy, class) NSLocale * _Nonnull currentLocale;
	//	[Static]
	//	[Export ("currentLocale", ArgumentSemantic.Copy)]
	//	NSLocale CurrentLocale { get; }

	//	// @property (readonly, copy, class) NSLocale * _Nonnull systemLocale;
	//	[Static]
	//	[Export ("systemLocale", ArgumentSemantic.Copy)]
	//	NSLocale SystemLocale { get; }

	//	// +(instancetype _Nonnull)localeWithLocaleIdentifier:(NSString * _Nonnull)ident __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("localeWithLocaleIdentifier:")]
	//	NSLocale LocaleWithLocaleIdentifier (string ident);
	//}

	//// @interface NSLocaleGeneralInfo (NSLocale)
	//[Category]
	//[BaseType (typeof(NSLocale))]
	//interface NSLocale_NSLocaleGeneralInfo
	//{
	//	// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull availableLocaleIdentifiers;
	//	[Static]
	//	[Export ("availableLocaleIdentifiers", ArgumentSemantic.Copy)]
	//	string[] AvailableLocaleIdentifiers { get; }

	//	// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull ISOLanguageCodes;
	//	[Static]
	//	[Export ("ISOLanguageCodes", ArgumentSemantic.Copy)]
	//	string[] ISOLanguageCodes { get; }

	//	// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull ISOCountryCodes;
	//	[Static]
	//	[Export ("ISOCountryCodes", ArgumentSemantic.Copy)]
	//	string[] ISOCountryCodes { get; }

	//	// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull ISOCurrencyCodes;
	//	[Static]
	//	[Export ("ISOCurrencyCodes", ArgumentSemantic.Copy)]
	//	string[] ISOCurrencyCodes { get; }

	//	// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull commonISOCurrencyCodes __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Static]
	//	[Export ("commonISOCurrencyCodes", ArgumentSemantic.Copy)]
	//	string[] CommonISOCurrencyCodes { get; }

	//	// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull preferredLanguages __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Static]
	//	[Export ("preferredLanguages", ArgumentSemantic.Copy)]
	//	string[] PreferredLanguages { get; }

	//	// +(NSDictionary<NSString *,NSString *> * _Nonnull)componentsFromLocaleIdentifier:(NSString * _Nonnull)string;
	//	[Static]
	//	[Export ("componentsFromLocaleIdentifier:")]
	//	NSDictionary<NSString, NSString> ComponentsFromLocaleIdentifier (string @string);

	//	// +(NSString * _Nonnull)localeIdentifierFromComponents:(NSDictionary<NSString *,NSString *> * _Nonnull)dict;
	//	[Static]
	//	[Export ("localeIdentifierFromComponents:")]
	//	string LocaleIdentifierFromComponents (NSDictionary<NSString, NSString> dict);

	//	// +(NSString * _Nonnull)canonicalLocaleIdentifierFromString:(NSString * _Nonnull)string;
	//	[Static]
	//	[Export ("canonicalLocaleIdentifierFromString:")]
	//	string CanonicalLocaleIdentifierFromString (string @string);

	//	// +(NSString * _Nonnull)canonicalLanguageIdentifierFromString:(NSString * _Nonnull)string;
	//	[Static]
	//	[Export ("canonicalLanguageIdentifierFromString:")]
	//	string CanonicalLanguageIdentifierFromString (string @string);

	//	// +(NSString * _Nullable)localeIdentifierFromWindowsLocaleCode:(uint32_t)lcid __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("localeIdentifierFromWindowsLocaleCode:")]
	//	[return: NullAllowed]
	//	string LocaleIdentifierFromWindowsLocaleCode (uint lcid);

	//	// +(uint32_t)windowsLocaleCodeFromLocaleIdentifier:(NSString * _Nonnull)localeIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("windowsLocaleCodeFromLocaleIdentifier:")]
	//	uint WindowsLocaleCodeFromLocaleIdentifier (string localeIdentifier);

	//	// +(NSLocaleLanguageDirection)characterDirectionForLanguage:(NSString * _Nonnull)isoLangCode __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("characterDirectionForLanguage:")]
	//	NSLocaleLanguageDirection CharacterDirectionForLanguage (string isoLangCode);

	//	// +(NSLocaleLanguageDirection)lineDirectionForLanguage:(NSString * _Nonnull)isoLangCode __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("lineDirectionForLanguage:")]
	//	NSLocaleLanguageDirection LineDirectionForLanguage (string isoLangCode);
	//}

	//// @interface NSMeasurementFormatter : NSFormatter <NSSecureCoding>
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSFormatter))]
	//interface NSMeasurementFormatter : INSSecureCoding
	//{
	//	// @property NSMeasurementFormatterUnitOptions unitOptions;
	//	[Export ("unitOptions", ArgumentSemantic.Assign)]
	//	NSMeasurementFormatterUnitOptions UnitOptions { get; set; }

	//	// @property NSFormattingUnitStyle unitStyle;
	//	[Export ("unitStyle", ArgumentSemantic.Assign)]
	//	NSFormattingUnitStyle UnitStyle { get; set; }

	//	// @property (copy) NSLocale * _Null_unspecified locale;
	//	[Export ("locale", ArgumentSemantic.Copy)]
	//	NSLocale Locale { get; set; }

	//	// @property (copy) NSNumberFormatter * _Null_unspecified numberFormatter;
	//	[Export ("numberFormatter", ArgumentSemantic.Copy)]
	//	NSNumberFormatter NumberFormatter { get; set; }

	//	// -(NSString * _Nonnull)stringFromMeasurement:(NSMeasurement * _Nonnull)measurement;
	//	[Export ("stringFromMeasurement:")]
	//	string StringFromMeasurement (NSMeasurement`1 measurement);

	//	// -(NSString * _Nonnull)stringFromUnit:(NSUnit * _Nonnull)unit;
	//	[Export ("stringFromUnit:")]
	//	string StringFromUnit (NSUnit unit);
	//}

	//// @interface NSPersonNameComponents : NSObject <NSCopying, NSSecureCoding>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSPersonNameComponents : INSCopying, INSSecureCoding
	//{
	//	// @property (copy) NSString * _Nullable namePrefix;
	//	[NullAllowed, Export ("namePrefix")]
	//	string NamePrefix { get; set; }

	//	// @property (copy) NSString * _Nullable givenName;
	//	[NullAllowed, Export ("givenName")]
	//	string GivenName { get; set; }

	//	// @property (copy) NSString * _Nullable middleName;
	//	[NullAllowed, Export ("middleName")]
	//	string MiddleName { get; set; }

	//	// @property (copy) NSString * _Nullable familyName;
	//	[NullAllowed, Export ("familyName")]
	//	string FamilyName { get; set; }

	//	// @property (copy) NSString * _Nullable nameSuffix;
	//	[NullAllowed, Export ("nameSuffix")]
	//	string NameSuffix { get; set; }

	//	// @property (copy) NSString * _Nullable nickname;
	//	[NullAllowed, Export ("nickname")]
	//	string Nickname { get; set; }

	//	// @property (copy) NSPersonNameComponents * _Nullable phoneticRepresentation;
	//	[NullAllowed, Export ("phoneticRepresentation", ArgumentSemantic.Copy)]
	//	NSPersonNameComponents PhoneticRepresentation { get; set; }
	//}

	//// @interface NSPersonNameComponentsFormatter : NSFormatter
	//[iOS (9,0)]
	//[BaseType (typeof(NSFormatter))]
	//interface NSPersonNameComponentsFormatter
	//{
	//	// @property NSPersonNameComponentsFormatterStyle style;
	//	[Export ("style", ArgumentSemantic.Assign)]
	//	NSPersonNameComponentsFormatterStyle Style { get; set; }

	//	// @property (getter = isPhonetic) BOOL phonetic;
	//	[Export ("phonetic")]
	//	bool Phonetic { [Bind ("isPhonetic")] get; set; }

	//	// +(NSString * _Nonnull)localizedStringFromPersonNameComponents:(NSPersonNameComponents * _Nonnull)components style:(NSPersonNameComponentsFormatterStyle)nameFormatStyle options:(NSPersonNameComponentsFormatterOptions)nameOptions;
	//	[Static]
	//	[Export ("localizedStringFromPersonNameComponents:style:options:")]
	//	string LocalizedStringFromPersonNameComponents (NSPersonNameComponents components, NSPersonNameComponentsFormatterStyle nameFormatStyle, NSPersonNameComponentsFormatterOptions nameOptions);

	//	// -(NSString * _Nonnull)stringFromPersonNameComponents:(NSPersonNameComponents * _Nonnull)components;
	//	[Export ("stringFromPersonNameComponents:")]
	//	string StringFromPersonNameComponents (NSPersonNameComponents components);

	//	// -(NSAttributedString * _Nonnull)annotatedStringFromPersonNameComponents:(NSPersonNameComponents * _Nonnull)components;
	//	[Export ("annotatedStringFromPersonNameComponents:")]
	//	NSAttributedString AnnotatedStringFromPersonNameComponents (NSPersonNameComponents components);

	//	// -(NSPersonNameComponents * _Nullable)personNameComponentsFromString:(NSString * _Nonnull)string __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("personNameComponentsFromString:")]
	//	[return: NullAllowed]
	//	NSPersonNameComponents PersonNameComponentsFromString (string @string);

	//	// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
	//	[Export ("getObjectValue:forString:errorDescription:")]
	//	bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
	//}

	//// @interface NSScanner : NSObject <NSCopying>
	//[BaseType (typeof(NSObject))]
	//interface NSScanner : INSCopying
	//{
	//	// @property (readonly, copy) NSString * _Nonnull string;
	//	[Export ("string")]
	//	string String { get; }

	//	// @property NSUInteger scanLocation;
	//	[Export ("scanLocation")]
	//	nuint ScanLocation { get; set; }

	//	// @property (copy) NSCharacterSet * _Nullable charactersToBeSkipped;
	//	[NullAllowed, Export ("charactersToBeSkipped", ArgumentSemantic.Copy)]
	//	NSCharacterSet CharactersToBeSkipped { get; set; }

	//	// @property BOOL caseSensitive;
	//	[Export ("caseSensitive")]
	//	bool CaseSensitive { get; set; }

	//	// @property (retain) id _Nullable locale;
	//	[NullAllowed, Export ("locale", ArgumentSemantic.Retain)]
	//	NSObject Locale { get; set; }

	//	// -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)string __attribute__((objc_designated_initializer));
	//	[Export ("initWithString:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string @string);
	//}

	//// @interface NSExtendedScanner (NSScanner)
	//[Category]
	//[BaseType (typeof(NSScanner))]
	//interface NSScanner_NSExtendedScanner
	//{
	//	// -(BOOL)scanInt:(int * _Nullable)result;
	//	[Export ("scanInt:")]
	//	unsafe bool ScanInt ([NullAllowed] int* result);

	//	// -(BOOL)scanInteger:(NSInteger * _Nullable)result __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("scanInteger:")]
	//	unsafe bool ScanInteger ([NullAllowed] nint* result);

	//	// -(BOOL)scanLongLong:(long long * _Nullable)result;
	//	[Export ("scanLongLong:")]
	//	unsafe bool ScanLongLong ([NullAllowed] long* result);

	//	// -(BOOL)scanUnsignedLongLong:(unsigned long long * _Nullable)result __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("scanUnsignedLongLong:")]
	//	unsafe bool ScanUnsignedLongLong ([NullAllowed] ulong* result);

	//	// -(BOOL)scanFloat:(float * _Nullable)result;
	//	[Export ("scanFloat:")]
	//	unsafe bool ScanFloat ([NullAllowed] float* result);

	//	// -(BOOL)scanDouble:(double * _Nullable)result;
	//	[Export ("scanDouble:")]
	//	unsafe bool ScanDouble ([NullAllowed] double* result);

	//	// -(BOOL)scanHexInt:(unsigned int * _Nullable)result;
	//	[Export ("scanHexInt:")]
	//	unsafe bool ScanHexInt ([NullAllowed] uint* result);

	//	// -(BOOL)scanHexLongLong:(unsigned long long * _Nullable)result __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("scanHexLongLong:")]
	//	unsafe bool ScanHexLongLong ([NullAllowed] ulong* result);

	//	// -(BOOL)scanHexFloat:(float * _Nullable)result __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("scanHexFloat:")]
	//	unsafe bool ScanHexFloat ([NullAllowed] float* result);

	//	// -(BOOL)scanHexDouble:(double * _Nullable)result __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("scanHexDouble:")]
	//	unsafe bool ScanHexDouble ([NullAllowed] double* result);

	//	// -(BOOL)scanString:(NSString * _Nonnull)string intoString:(NSString * _Nullable * _Nullable)result;
	//	[Export ("scanString:intoString:")]
	//	bool ScanString (string @string, [NullAllowed] out string result);

	//	// -(BOOL)scanCharactersFromSet:(NSCharacterSet * _Nonnull)set intoString:(NSString * _Nullable * _Nullable)result;
	//	[Export ("scanCharactersFromSet:intoString:")]
	//	bool ScanCharactersFromSet (NSCharacterSet set, [NullAllowed] out string result);

	//	// -(BOOL)scanUpToString:(NSString * _Nonnull)string intoString:(NSString * _Nullable * _Nullable)result;
	//	[Export ("scanUpToString:intoString:")]
	//	bool ScanUpToString (string @string, [NullAllowed] out string result);

	//	// -(BOOL)scanUpToCharactersFromSet:(NSCharacterSet * _Nonnull)set intoString:(NSString * _Nullable * _Nullable)result;
	//	[Export ("scanUpToCharactersFromSet:intoString:")]
	//	bool ScanUpToCharactersFromSet (NSCharacterSet set, [NullAllowed] out string result);

	//	// @property (readonly, getter = isAtEnd) BOOL atEnd;
	//	[Export ("atEnd")]
	//	bool AtEnd { [Bind ("isAtEnd")] get; }

	//	// +(instancetype _Nonnull)scannerWithString:(NSString * _Nonnull)string;
	//	[Static]
	//	[Export ("scannerWithString:")]
	//	NSScanner ScannerWithString (string @string);

	//	// +(id _Nonnull)localizedScannerWithString:(NSString * _Nonnull)string;
	//	[Static]
	//	[Export ("localizedScannerWithString:")]
	//	NSObject LocalizedScannerWithString (string @string);
	//}

	//// @interface NSException : NSObject <NSCopying, NSCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSException : INSCopying, INSCoding
	//{
	//	// +(NSException * _Nonnull)exceptionWithName:(NSExceptionName _Nonnull)name reason:(NSString * _Nullable)reason userInfo:(NSDictionary * _Nullable)userInfo;
	//	[Static]
	//	[Export ("exceptionWithName:reason:userInfo:")]
	//	NSException ExceptionWithName (string name, [NullAllowed] string reason, [NullAllowed] NSDictionary userInfo);

	//	// -(instancetype _Nonnull)initWithName:(NSExceptionName _Nonnull)aName reason:(NSString * _Nullable)aReason userInfo:(NSDictionary * _Nullable)aUserInfo __attribute__((objc_designated_initializer));
	//	[Export ("initWithName:reason:userInfo:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string aName, [NullAllowed] string aReason, [NullAllowed] NSDictionary aUserInfo);

	//	// @property (readonly, copy) NSExceptionName _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, copy) NSString * _Nullable reason;
	//	[NullAllowed, Export ("reason")]
	//	string Reason { get; }

	//	// @property (readonly, copy) NSDictionary * _Nullable userInfo;
	//	[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
	//	NSDictionary UserInfo { get; }

	//	// @property (readonly, copy) NSArray<NSNumber *> * _Nonnull callStackReturnAddresses __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("callStackReturnAddresses", ArgumentSemantic.Copy)]
	//	NSNumber[] CallStackReturnAddresses { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull callStackSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("callStackSymbols", ArgumentSemantic.Copy)]
	//	string[] CallStackSymbols { get; }

	//	// -(void)raise;
	//	[Export ("raise")]
	//	void Raise ();
	//}

	//// @interface NSExceptionRaisingConveniences (NSException)
	//[Category]
	//[BaseType (typeof(NSException))]
	//interface NSException_NSExceptionRaisingConveniences
	//{
	//	// +(void)raise:(NSExceptionName _Nonnull)name format:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 2, 3)));
	//	[Static, Internal]
	//	[Export ("raise:format:", IsVariadic = true)]
	//	void Raise (string name, string format, IntPtr varArgs);

	//	// +(void)raise:(NSExceptionName _Nonnull)name format:(NSString * _Nonnull)format arguments:(va_list)argList __attribute__((format(NSString, 2, 0)));
	//	[Static]
	//	[Export ("raise:format:arguments:")]
	//	unsafe void Raise (string name, string format, sbyte* argList);
	//}

	//// @interface NSAssertionHandler : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSAssertionHandler
	//{
	//	// @property (readonly, strong, class) NSAssertionHandler * _Nonnull currentHandler;
	//	[Static]
	//	[Export ("currentHandler", ArgumentSemantic.Strong)]
	//	NSAssertionHandler CurrentHandler { get; }

	//	// -(void)handleFailureInMethod:(SEL _Nonnull)selector object:(id _Nonnull)object file:(NSString * _Nonnull)fileName lineNumber:(NSInteger)line description:(NSString * _Nullable)format, ... __attribute__((format(NSString, 5, 6)));
	//	[Internal]
	//	[Export ("handleFailureInMethod:object:file:lineNumber:description:", IsVariadic = true)]
	//	void HandleFailureInMethod (Selector selector, NSObject @object, string fileName, nint line, [NullAllowed] string format, IntPtr varArgs);

	//	// -(void)handleFailureInFunction:(NSString * _Nonnull)functionName file:(NSString * _Nonnull)fileName lineNumber:(NSInteger)line description:(NSString * _Nullable)format, ... __attribute__((format(NSString, 4, 5)));
	//	[Internal]
	//	[Export ("handleFailureInFunction:file:lineNumber:description:", IsVariadic = true)]
	//	void HandleFailureInFunction (string functionName, string fileName, nint line, [NullAllowed] string format, IntPtr varArgs);
	//}

	//// @protocol NSDecimalNumberBehaviors
	//[Protocol, Model]
	//interface NSDecimalNumberBehaviors
	//{
	//	// @required -(NSRoundingMode)roundingMode;
	//	[Abstract]
	//	[Export ("roundingMode")]
	//	[Verify (MethodToProperty)]
	//	NSRoundingMode RoundingMode { get; }

	//	// @required -(short)scale;
	//	[Abstract]
	//	[Export ("scale")]
	//	[Verify (MethodToProperty)]
	//	short Scale { get; }

	//	// @required -(NSDecimalNumber * _Nullable)exceptionDuringOperation:(SEL _Nonnull)operation error:(NSCalculationError)error leftOperand:(NSDecimalNumber * _Nonnull)leftOperand rightOperand:(NSDecimalNumber * _Nullable)rightOperand;
	//	[Abstract]
	//	[Export ("exceptionDuringOperation:error:leftOperand:rightOperand:")]
	//	[return: NullAllowed]
	//	NSDecimalNumber Error (Selector operation, NSCalculationError error, NSDecimalNumber leftOperand, [NullAllowed] NSDecimalNumber rightOperand);
	//}

	//// @interface NSDecimalNumber : NSNumber
	//[BaseType (typeof(NSNumber))]
	//interface NSDecimalNumber
	//{
	//	// -(instancetype _Nonnull)initWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag;
	//	[Export ("initWithMantissa:exponent:isNegative:")]
	//	IntPtr Constructor (ulong mantissa, short exponent, bool flag);

	//	// -(instancetype _Nonnull)initWithDecimal:(NSDecimal)dcm __attribute__((objc_designated_initializer));
	//	[Export ("initWithDecimal:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSDecimal dcm);

	//	// -(instancetype _Nonnull)initWithString:(NSString * _Nullable)numberValue;
	//	[Export ("initWithString:")]
	//	IntPtr Constructor ([NullAllowed] string numberValue);

	//	// -(instancetype _Nonnull)initWithString:(NSString * _Nullable)numberValue locale:(id _Nullable)locale;
	//	[Export ("initWithString:locale:")]
	//	IntPtr Constructor ([NullAllowed] string numberValue, [NullAllowed] NSObject locale);

	//	// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
	//	[Export ("descriptionWithLocale:")]
	//	string DescriptionWithLocale ([NullAllowed] NSObject locale);

	//	// @property (readonly) NSDecimal decimalValue;
	//	[Export ("decimalValue")]
	//	NSDecimal DecimalValue { get; }

	//	// +(NSDecimalNumber * _Nonnull)decimalNumberWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag;
	//	[Static]
	//	[Export ("decimalNumberWithMantissa:exponent:isNegative:")]
	//	NSDecimalNumber DecimalNumberWithMantissa (ulong mantissa, short exponent, bool flag);

	//	// +(NSDecimalNumber * _Nonnull)decimalNumberWithDecimal:(NSDecimal)dcm;
	//	[Static]
	//	[Export ("decimalNumberWithDecimal:")]
	//	NSDecimalNumber DecimalNumberWithDecimal (NSDecimal dcm);

	//	// +(NSDecimalNumber * _Nonnull)decimalNumberWithString:(NSString * _Nullable)numberValue;
	//	[Static]
	//	[Export ("decimalNumberWithString:")]
	//	NSDecimalNumber DecimalNumberWithString ([NullAllowed] string numberValue);

	//	// +(NSDecimalNumber * _Nonnull)decimalNumberWithString:(NSString * _Nullable)numberValue locale:(id _Nullable)locale;
	//	[Static]
	//	[Export ("decimalNumberWithString:locale:")]
	//	NSDecimalNumber DecimalNumberWithString ([NullAllowed] string numberValue, [NullAllowed] NSObject locale);

	//	// @property (readonly, copy, class) NSDecimalNumber * _Nonnull zero;
	//	[Static]
	//	[Export ("zero", ArgumentSemantic.Copy)]
	//	NSDecimalNumber Zero { get; }

	//	// @property (readonly, copy, class) NSDecimalNumber * _Nonnull one;
	//	[Static]
	//	[Export ("one", ArgumentSemantic.Copy)]
	//	NSDecimalNumber One { get; }

	//	// @property (readonly, copy, class) NSDecimalNumber * _Nonnull minimumDecimalNumber;
	//	[Static]
	//	[Export ("minimumDecimalNumber", ArgumentSemantic.Copy)]
	//	NSDecimalNumber MinimumDecimalNumber { get; }

	//	// @property (readonly, copy, class) NSDecimalNumber * _Nonnull maximumDecimalNumber;
	//	[Static]
	//	[Export ("maximumDecimalNumber", ArgumentSemantic.Copy)]
	//	NSDecimalNumber MaximumDecimalNumber { get; }

	//	// @property (readonly, copy, class) NSDecimalNumber * _Nonnull notANumber;
	//	[Static]
	//	[Export ("notANumber", ArgumentSemantic.Copy)]
	//	NSDecimalNumber NotANumber { get; }

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberByAdding:(NSDecimalNumber * _Nonnull)decimalNumber;
	//	[Export ("decimalNumberByAdding:")]
	//	NSDecimalNumber DecimalNumberByAdding (NSDecimalNumber decimalNumber);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberByAdding:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
	//	[Export ("decimalNumberByAdding:withBehavior:")]
	//	NSDecimalNumber DecimalNumberByAdding (NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberBySubtracting:(NSDecimalNumber * _Nonnull)decimalNumber;
	//	[Export ("decimalNumberBySubtracting:")]
	//	NSDecimalNumber DecimalNumberBySubtracting (NSDecimalNumber decimalNumber);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberBySubtracting:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
	//	[Export ("decimalNumberBySubtracting:withBehavior:")]
	//	NSDecimalNumber DecimalNumberBySubtracting (NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingBy:(NSDecimalNumber * _Nonnull)decimalNumber;
	//	[Export ("decimalNumberByMultiplyingBy:")]
	//	NSDecimalNumber DecimalNumberByMultiplyingBy (NSDecimalNumber decimalNumber);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingBy:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
	//	[Export ("decimalNumberByMultiplyingBy:withBehavior:")]
	//	NSDecimalNumber DecimalNumberByMultiplyingBy (NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberByDividingBy:(NSDecimalNumber * _Nonnull)decimalNumber;
	//	[Export ("decimalNumberByDividingBy:")]
	//	NSDecimalNumber DecimalNumberByDividingBy (NSDecimalNumber decimalNumber);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberByDividingBy:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
	//	[Export ("decimalNumberByDividingBy:withBehavior:")]
	//	NSDecimalNumber DecimalNumberByDividingBy (NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberByRaisingToPower:(NSUInteger)power;
	//	[Export ("decimalNumberByRaisingToPower:")]
	//	NSDecimalNumber DecimalNumberByRaisingToPower (nuint power);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberByRaisingToPower:(NSUInteger)power withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
	//	[Export ("decimalNumberByRaisingToPower:withBehavior:")]
	//	NSDecimalNumber DecimalNumberByRaisingToPower (nuint power, [NullAllowed] NSDecimalNumberBehaviors behavior);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingByPowerOf10:(short)power;
	//	[Export ("decimalNumberByMultiplyingByPowerOf10:")]
	//	NSDecimalNumber DecimalNumberByMultiplyingByPowerOf10 (short power);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingByPowerOf10:(short)power withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
	//	[Export ("decimalNumberByMultiplyingByPowerOf10:withBehavior:")]
	//	NSDecimalNumber DecimalNumberByMultiplyingByPowerOf10 (short power, [NullAllowed] NSDecimalNumberBehaviors behavior);

	//	// -(NSDecimalNumber * _Nonnull)decimalNumberByRoundingAccordingToBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
	//	[Export ("decimalNumberByRoundingAccordingToBehavior:")]
	//	NSDecimalNumber DecimalNumberByRoundingAccordingToBehavior ([NullAllowed] NSDecimalNumberBehaviors behavior);

	//	// -(NSComparisonResult)compare:(NSNumber * _Nonnull)decimalNumber;
	//	[Export ("compare:")]
	//	NSComparisonResult Compare (NSNumber decimalNumber);

	//	// @property (strong, class) id<NSDecimalNumberBehaviors> _Nonnull defaultBehavior;
	//	[Static]
	//	[Export ("defaultBehavior", ArgumentSemantic.Strong)]
	//	NSDecimalNumberBehaviors DefaultBehavior { get; set; }

	//	// @property (readonly) const char * _Nonnull objCType __attribute__((objc_returns_inner_pointer));
	//	[Export ("objCType")]
	//	unsafe sbyte* ObjCType { get; }

	//	// @property (readonly) double doubleValue;
	//	[Export ("doubleValue")]
	//	double DoubleValue { get; }
	//}

	//// @interface NSDecimalNumberHandler : NSObject <NSDecimalNumberBehaviors, NSCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSDecimalNumberHandler : INSDecimalNumberBehaviors, INSCoding
	//{
	//	// @property (readonly, strong, class) NSDecimalNumberHandler * _Nonnull defaultDecimalNumberHandler;
	//	[Static]
	//	[Export ("defaultDecimalNumberHandler", ArgumentSemantic.Strong)]
	//	NSDecimalNumberHandler DefaultDecimalNumberHandler { get; }

	//	// -(instancetype _Nonnull)initWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)exact raiseOnOverflow:(BOOL)overflow raiseOnUnderflow:(BOOL)underflow raiseOnDivideByZero:(BOOL)divideByZero __attribute__((objc_designated_initializer));
	//	[Export ("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSRoundingMode roundingMode, short scale, bool exact, bool overflow, bool underflow, bool divideByZero);

	//	// +(instancetype _Nonnull)decimalNumberHandlerWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)exact raiseOnOverflow:(BOOL)overflow raiseOnUnderflow:(BOOL)underflow raiseOnDivideByZero:(BOOL)divideByZero;
	//	[Static]
	//	[Export ("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:")]
	//	NSDecimalNumberHandler DecimalNumberHandlerWithRoundingMode (NSRoundingMode roundingMode, short scale, bool exact, bool overflow, bool underflow, bool divideByZero);
	//}

	//// @interface NSDecimalNumberExtensions (NSNumber)
	//[Category]
	//[BaseType (typeof(NSNumber))]
	//interface NSNumber_NSDecimalNumberExtensions
	//{
	//	// @property (readonly) NSDecimal decimalValue;
	//	[Export ("decimalValue")]
	//	NSDecimal DecimalValue { get; }
	//}

	//// @interface NSDecimalNumberScanning (NSScanner)
	//[Category]
	//[BaseType (typeof(NSScanner))]
	//interface NSScanner_NSDecimalNumberScanning
	//{
	//	// -(BOOL)scanDecimal:(NSDecimal * _Nullable)dcm;
	//	[Export ("scanDecimal:")]
	//	unsafe bool ScanDecimal ([NullAllowed] NSDecimal* dcm);
	//}

	//// @interface NSError : NSObject <NSCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSError : INSCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nonnull)initWithDomain:(NSErrorDomain _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSErrorUserInfoKey,id> * _Nullable)dict __attribute__((objc_designated_initializer));
	//	[Export ("initWithDomain:code:userInfo:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string domain, nint code, [NullAllowed] NSDictionary<NSString, NSObject> dict);

	//	// +(instancetype _Nonnull)errorWithDomain:(NSErrorDomain _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSErrorUserInfoKey,id> * _Nullable)dict;
	//	[Static]
	//	[Export ("errorWithDomain:code:userInfo:")]
	//	NSError ErrorWithDomain (string domain, nint code, [NullAllowed] NSDictionary<NSString, NSObject> dict);

	//	// @property (readonly, copy) NSErrorDomain _Nonnull domain;
	//	[Export ("domain")]
	//	string Domain { get; }

	//	// @property (readonly) NSInteger code;
	//	[Export ("code")]
	//	nint Code { get; }

	//	// @property (readonly, copy) NSDictionary<NSErrorUserInfoKey,id> * _Nonnull userInfo;
	//	[Export ("userInfo", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> UserInfo { get; }

	//	// @property (readonly, copy) NSString * _Nonnull localizedDescription;
	//	[Export ("localizedDescription")]
	//	string LocalizedDescription { get; }

	//	// @property (readonly, copy) NSString * _Nullable localizedFailureReason;
	//	[NullAllowed, Export ("localizedFailureReason")]
	//	string LocalizedFailureReason { get; }

	//	// @property (readonly, copy) NSString * _Nullable localizedRecoverySuggestion;
	//	[NullAllowed, Export ("localizedRecoverySuggestion")]
	//	string LocalizedRecoverySuggestion { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nullable localizedRecoveryOptions;
	//	[NullAllowed, Export ("localizedRecoveryOptions", ArgumentSemantic.Copy)]
	//	string[] LocalizedRecoveryOptions { get; }

	//	// @property (readonly, strong) id _Nullable recoveryAttempter;
	//	[NullAllowed, Export ("recoveryAttempter", ArgumentSemantic.Strong)]
	//	NSObject RecoveryAttempter { get; }

	//	// @property (readonly, copy) NSString * _Nullable helpAnchor;
	//	[NullAllowed, Export ("helpAnchor")]
	//	string HelpAnchor { get; }

	//	// +(void)setUserInfoValueProviderForDomain:(NSErrorDomain _Nonnull)errorDomain provider:(id  _Nullable (^ _Nullable)(NSError * _Nonnull, NSErrorUserInfoKey _Nonnull))provider __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Static]
	//	[Export ("setUserInfoValueProviderForDomain:provider:")]
	//	void SetUserInfoValueProviderForDomain (string errorDomain, [NullAllowed] Func<NSError, NSString, NSObject> provider);

	//	// +(id  _Nullable (^ _Nullable)(NSError * _Nonnull, NSErrorUserInfoKey _Nonnull))userInfoValueProviderForDomain:(NSErrorDomain _Nonnull)errorDomain __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Static]
	//	[Export ("userInfoValueProviderForDomain:")]
	//	[return: NullAllowed]
	//	Func<NSError, NSString, NSObject> UserInfoValueProviderForDomain (string errorDomain);
	//}

	//// @interface NSErrorRecoveryAttempting (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSErrorRecoveryAttempting
	//{
	//	// -(void)attemptRecoveryFromError:(NSError * _Nonnull)error optionIndex:(NSUInteger)recoveryOptionIndex delegate:(id _Nullable)delegate didRecoverSelector:(SEL _Nullable)didRecoverSelector contextInfo:(void * _Nullable)contextInfo;
	//	[Export ("attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:")]
	//	unsafe void AttemptRecoveryFromError (NSError error, nuint recoveryOptionIndex, [NullAllowed] NSObject @delegate, [NullAllowed] Selector didRecoverSelector, [NullAllowed] void* contextInfo);

	//	// -(BOOL)attemptRecoveryFromError:(NSError * _Nonnull)error optionIndex:(NSUInteger)recoveryOptionIndex;
	//	[Export ("attemptRecoveryFromError:optionIndex:")]
	//	bool AttemptRecoveryFromError (NSError error, nuint recoveryOptionIndex);
	//}

	//// @interface NSRunLoop : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSRunLoop
	//{
	//	// @property (readonly, strong, class) NSRunLoop * _Nonnull currentRunLoop;
	//	[Static]
	//	[Export ("currentRunLoop", ArgumentSemantic.Strong)]
	//	NSRunLoop CurrentRunLoop { get; }

	//	// @property (readonly, strong, class) NSRunLoop * _Nonnull mainRunLoop __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Static]
	//	[Export ("mainRunLoop", ArgumentSemantic.Strong)]
	//	NSRunLoop MainRunLoop { get; }

	//	// @property (readonly, copy) NSRunLoopMode _Nullable currentMode;
	//	[NullAllowed, Export ("currentMode")]
	//	string CurrentMode { get; }

	//	// -(CFRunLoopRef _Nonnull)getCFRunLoop __attribute__((cf_returns_not_retained));
	//	[Export ("getCFRunLoop")]
	//	[Verify (MethodToProperty)]
	//	unsafe CFRunLoopRef* CFRunLoop { get; }

	//	// -(void)addTimer:(NSTimer * _Nonnull)timer forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("addTimer:forMode:")]
	//	void AddTimer (NSTimer timer, string mode);

	//	// -(void)addPort:(NSPort * _Nonnull)aPort forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("addPort:forMode:")]
	//	void AddPort (NSPort aPort, string mode);

	//	// -(void)removePort:(NSPort * _Nonnull)aPort forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("removePort:forMode:")]
	//	void RemovePort (NSPort aPort, string mode);

	//	// -(NSDate * _Nullable)limitDateForMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("limitDateForMode:")]
	//	[return: NullAllowed]
	//	NSDate LimitDateForMode (string mode);

	//	// -(void)acceptInputForMode:(NSRunLoopMode _Nonnull)mode beforeDate:(NSDate * _Nonnull)limitDate;
	//	[Export ("acceptInputForMode:beforeDate:")]
	//	void AcceptInputForMode (string mode, NSDate limitDate);
	//}

	//// @interface NSRunLoopConveniences (NSRunLoop)
	//[Category]
	//[BaseType (typeof(NSRunLoop))]
	//interface NSRunLoop_NSRunLoopConveniences
	//{
	//	// -(void)run;
	//	[Export ("run")]
	//	void Run ();

	//	// -(void)runUntilDate:(NSDate * _Nonnull)limitDate;
	//	[Export ("runUntilDate:")]
	//	void RunUntilDate (NSDate limitDate);

	//	// -(BOOL)runMode:(NSRunLoopMode _Nonnull)mode beforeDate:(NSDate * _Nonnull)limitDate;
	//	[Export ("runMode:beforeDate:")]
	//	bool RunMode (string mode, NSDate limitDate);

	//	// -(void)performInModes:(NSArray<NSRunLoopMode> * _Nonnull)modes block:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("performInModes:block:")]
	//	void PerformInModes (string[] modes, Action block);

	//	// -(void)performBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("performBlock:")]
	//	void PerformBlock (Action block);
	//}

	//// @interface NSDelayedPerforming (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSDelayedPerforming
	//{
	//	// -(void)performSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)anArgument afterDelay:(NSTimeInterval)delay inModes:(NSArray<NSRunLoopMode> * _Nonnull)modes;
	//	[Export ("performSelector:withObject:afterDelay:inModes:")]
	//	void PerformSelector (Selector aSelector, [NullAllowed] NSObject anArgument, double delay, string[] modes);

	//	// -(void)performSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)anArgument afterDelay:(NSTimeInterval)delay;
	//	[Export ("performSelector:withObject:afterDelay:")]
	//	void PerformSelector (Selector aSelector, [NullAllowed] NSObject anArgument, double delay);

	//	// +(void)cancelPreviousPerformRequestsWithTarget:(id _Nonnull)aTarget selector:(SEL _Nonnull)aSelector object:(id _Nullable)anArgument;
	//	[Static]
	//	[Export ("cancelPreviousPerformRequestsWithTarget:selector:object:")]
	//	void CancelPreviousPerformRequestsWithTarget (NSObject aTarget, Selector aSelector, [NullAllowed] NSObject anArgument);

	//	// +(void)cancelPreviousPerformRequestsWithTarget:(id _Nonnull)aTarget;
	//	[Static]
	//	[Export ("cancelPreviousPerformRequestsWithTarget:")]
	//	void CancelPreviousPerformRequestsWithTarget (NSObject aTarget);
	//}

	//// @interface NSOrderedPerform (NSRunLoop)
	//[Category]
	//[BaseType (typeof(NSRunLoop))]
	//interface NSRunLoop_NSOrderedPerform
	//{
	//	// -(void)performSelector:(SEL _Nonnull)aSelector target:(id _Nonnull)target argument:(id _Nullable)arg order:(NSUInteger)order modes:(NSArray<NSRunLoopMode> * _Nonnull)modes;
	//	[Export ("performSelector:target:argument:order:modes:")]
	//	void PerformSelector (Selector aSelector, NSObject target, [NullAllowed] NSObject arg, nuint order, string[] modes);

	//	// -(void)cancelPerformSelector:(SEL _Nonnull)aSelector target:(id _Nonnull)target argument:(id _Nullable)arg;
	//	[Export ("cancelPerformSelector:target:argument:")]
	//	void CancelPerformSelector (Selector aSelector, NSObject target, [NullAllowed] NSObject arg);

	//	// -(void)cancelPerformSelectorsWithTarget:(id _Nonnull)target;
	//	[Export ("cancelPerformSelectorsWithTarget:")]
	//	void CancelPerformSelectorsWithTarget (NSObject target);
	//}

	//// @interface NSFileHandle : NSObject <NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSFileHandle : INSSecureCoding
	//{
	//	// @property (readonly, copy) NSData * _Nonnull availableData;
	//	[Export ("availableData", ArgumentSemantic.Copy)]
	//	NSData AvailableData { get; }

	//	// -(NSData * _Nonnull)readDataToEndOfFile;
	//	[Export ("readDataToEndOfFile")]
	//	[Verify (MethodToProperty)]
	//	NSData ReadDataToEndOfFile { get; }

	//	// -(NSData * _Nonnull)readDataOfLength:(NSUInteger)length;
	//	[Export ("readDataOfLength:")]
	//	NSData ReadDataOfLength (nuint length);

	//	// -(void)writeData:(NSData * _Nonnull)data;
	//	[Export ("writeData:")]
	//	void WriteData (NSData data);

	//	// @property (readonly) unsigned long long offsetInFile;
	//	[Export ("offsetInFile")]
	//	ulong OffsetInFile { get; }

	//	// -(unsigned long long)seekToEndOfFile;
	//	[Export ("seekToEndOfFile")]
	//	[Verify (MethodToProperty)]
	//	ulong SeekToEndOfFile { get; }

	//	// -(void)seekToFileOffset:(unsigned long long)offset;
	//	[Export ("seekToFileOffset:")]
	//	void SeekToFileOffset (ulong offset);

	//	// -(void)truncateFileAtOffset:(unsigned long long)offset;
	//	[Export ("truncateFileAtOffset:")]
	//	void TruncateFileAtOffset (ulong offset);

	//	// -(void)synchronizeFile;
	//	[Export ("synchronizeFile")]
	//	void SynchronizeFile ();

	//	// -(void)closeFile;
	//	[Export ("closeFile")]
	//	void CloseFile ();

	//	// -(instancetype _Nonnull)initWithFileDescriptor:(int)fd closeOnDealloc:(BOOL)closeopt __attribute__((objc_designated_initializer));
	//	[Export ("initWithFileDescriptor:closeOnDealloc:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (int fd, bool closeopt);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);
	//}

	//// @interface NSFileHandleCreation (NSFileHandle)
	//[Category]
	//[BaseType (typeof(NSFileHandle))]
	//interface NSFileHandle_NSFileHandleCreation
	//{
	//	// @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithStandardInput;
	//	[Static]
	//	[Export ("fileHandleWithStandardInput", ArgumentSemantic.Strong)]
	//	NSFileHandle FileHandleWithStandardInput { get; }

	//	// @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithStandardOutput;
	//	[Static]
	//	[Export ("fileHandleWithStandardOutput", ArgumentSemantic.Strong)]
	//	NSFileHandle FileHandleWithStandardOutput { get; }

	//	// @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithStandardError;
	//	[Static]
	//	[Export ("fileHandleWithStandardError", ArgumentSemantic.Strong)]
	//	NSFileHandle FileHandleWithStandardError { get; }

	//	// @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithNullDevice;
	//	[Static]
	//	[Export ("fileHandleWithNullDevice", ArgumentSemantic.Strong)]
	//	NSFileHandle FileHandleWithNullDevice { get; }

	//	// +(instancetype _Nullable)fileHandleForReadingAtPath:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("fileHandleForReadingAtPath:")]
	//	[return: NullAllowed]
	//	NSFileHandle FileHandleForReadingAtPath (string path);

	//	// +(instancetype _Nullable)fileHandleForWritingAtPath:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("fileHandleForWritingAtPath:")]
	//	[return: NullAllowed]
	//	NSFileHandle FileHandleForWritingAtPath (string path);

	//	// +(instancetype _Nullable)fileHandleForUpdatingAtPath:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("fileHandleForUpdatingAtPath:")]
	//	[return: NullAllowed]
	//	NSFileHandle FileHandleForUpdatingAtPath (string path);

	//	// +(instancetype _Nullable)fileHandleForReadingFromURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("fileHandleForReadingFromURL:error:")]
	//	[return: NullAllowed]
	//	NSFileHandle FileHandleForReadingFromURL (NSUrl url, [NullAllowed] out NSError error);

	//	// +(instancetype _Nullable)fileHandleForWritingToURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("fileHandleForWritingToURL:error:")]
	//	[return: NullAllowed]
	//	NSFileHandle FileHandleForWritingToURL (NSUrl url, [NullAllowed] out NSError error);

	//	// +(instancetype _Nullable)fileHandleForUpdatingURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("fileHandleForUpdatingURL:error:")]
	//	[return: NullAllowed]
	//	NSFileHandle FileHandleForUpdatingURL (NSUrl url, [NullAllowed] out NSError error);
	//}

	//// @interface NSFileHandleAsynchronousAccess (NSFileHandle)
	//[Category]
	//[BaseType (typeof(NSFileHandle))]
	//interface NSFileHandle_NSFileHandleAsynchronousAccess
	//{
	//	// -(void)readInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
	//	[Export ("readInBackgroundAndNotifyForModes:")]
	//	void ReadInBackgroundAndNotifyForModes ([NullAllowed] string[] modes);

	//	// -(void)readInBackgroundAndNotify;
	//	[Export ("readInBackgroundAndNotify")]
	//	void ReadInBackgroundAndNotify ();

	//	// -(void)readToEndOfFileInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
	//	[Export ("readToEndOfFileInBackgroundAndNotifyForModes:")]
	//	void ReadToEndOfFileInBackgroundAndNotifyForModes ([NullAllowed] string[] modes);

	//	// -(void)readToEndOfFileInBackgroundAndNotify;
	//	[Export ("readToEndOfFileInBackgroundAndNotify")]
	//	void ReadToEndOfFileInBackgroundAndNotify ();

	//	// -(void)acceptConnectionInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
	//	[Export ("acceptConnectionInBackgroundAndNotifyForModes:")]
	//	void AcceptConnectionInBackgroundAndNotifyForModes ([NullAllowed] string[] modes);

	//	// -(void)acceptConnectionInBackgroundAndNotify;
	//	[Export ("acceptConnectionInBackgroundAndNotify")]
	//	void AcceptConnectionInBackgroundAndNotify ();

	//	// -(void)waitForDataInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
	//	[Export ("waitForDataInBackgroundAndNotifyForModes:")]
	//	void WaitForDataInBackgroundAndNotifyForModes ([NullAllowed] string[] modes);

	//	// -(void)waitForDataInBackgroundAndNotify;
	//	[Export ("waitForDataInBackgroundAndNotify")]
	//	void WaitForDataInBackgroundAndNotify ();

	//	// @property (copy) void (^ _Nullable)(NSFileHandle * _Nonnull) readabilityHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[NullAllowed, Export ("readabilityHandler", ArgumentSemantic.Copy)]
	//	Action<NSFileHandle> ReadabilityHandler { get; set; }

	//	// @property (copy) void (^ _Nullable)(NSFileHandle * _Nonnull) writeabilityHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[NullAllowed, Export ("writeabilityHandler", ArgumentSemantic.Copy)]
	//	Action<NSFileHandle> WriteabilityHandler { get; set; }
	//}

	//// @interface NSFileHandlePlatformSpecific (NSFileHandle)
	//[Category]
	//[BaseType (typeof(NSFileHandle))]
	//interface NSFileHandle_NSFileHandlePlatformSpecific
	//{
	//	// -(instancetype _Nonnull)initWithFileDescriptor:(int)fd;
	//	[Export ("initWithFileDescriptor:")]
	//	IntPtr Constructor (int fd);

	//	// @property (readonly) int fileDescriptor;
	//	[Export ("fileDescriptor")]
	//	int FileDescriptor { get; }
	//}

	//// @interface NSPipe : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSPipe
	//{
	//	// @property (readonly, retain) NSFileHandle * _Nonnull fileHandleForReading;
	//	[Export ("fileHandleForReading", ArgumentSemantic.Retain)]
	//	NSFileHandle FileHandleForReading { get; }

	//	// @property (readonly, retain) NSFileHandle * _Nonnull fileHandleForWriting;
	//	[Export ("fileHandleForWriting", ArgumentSemantic.Retain)]
	//	NSFileHandle FileHandleForWriting { get; }

	//	// +(NSPipe * _Nonnull)pipe;
	//	[Static]
	//	[Export ("pipe")]
	//	[Verify (MethodToProperty)]
	//	NSPipe Pipe { get; }
	//}

	//// @interface NSStringPathExtensions (NSString)
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_NSStringPathExtensions
	//{
	//	// +(NSString * _Nonnull)pathWithComponents:(NSArray<NSString *> * _Nonnull)components;
	//	[Static]
	//	[Export ("pathWithComponents:")]
	//	string PathWithComponents (string[] components);

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull pathComponents;
	//	[Export ("pathComponents", ArgumentSemantic.Copy)]
	//	string[] PathComponents { get; }

	//	// @property (readonly, getter = isAbsolutePath) BOOL absolutePath;
	//	[Export ("absolutePath")]
	//	bool AbsolutePath { [Bind ("isAbsolutePath")] get; }

	//	// @property (readonly, copy) NSString * _Nonnull lastPathComponent;
	//	[Export ("lastPathComponent")]
	//	string LastPathComponent { get; }

	//	// @property (readonly, copy) NSString * _Nonnull stringByDeletingLastPathComponent;
	//	[Export ("stringByDeletingLastPathComponent")]
	//	string StringByDeletingLastPathComponent { get; }

	//	// -(NSString * _Nonnull)stringByAppendingPathComponent:(NSString * _Nonnull)str;
	//	[Export ("stringByAppendingPathComponent:")]
	//	string StringByAppendingPathComponent (string str);

	//	// @property (readonly, copy) NSString * _Nonnull pathExtension;
	//	[Export ("pathExtension")]
	//	string PathExtension { get; }

	//	// @property (readonly, copy) NSString * _Nonnull stringByDeletingPathExtension;
	//	[Export ("stringByDeletingPathExtension")]
	//	string StringByDeletingPathExtension { get; }

	//	// -(NSString * _Nullable)stringByAppendingPathExtension:(NSString * _Nonnull)str;
	//	[Export ("stringByAppendingPathExtension:")]
	//	[return: NullAllowed]
	//	string StringByAppendingPathExtension (string str);

	//	// @property (readonly, copy) NSString * _Nonnull stringByAbbreviatingWithTildeInPath;
	//	[Export ("stringByAbbreviatingWithTildeInPath")]
	//	string StringByAbbreviatingWithTildeInPath { get; }

	//	// @property (readonly, copy) NSString * _Nonnull stringByExpandingTildeInPath;
	//	[Export ("stringByExpandingTildeInPath")]
	//	string StringByExpandingTildeInPath { get; }

	//	// @property (readonly, copy) NSString * _Nonnull stringByStandardizingPath;
	//	[Export ("stringByStandardizingPath")]
	//	string StringByStandardizingPath { get; }

	//	// @property (readonly, copy) NSString * _Nonnull stringByResolvingSymlinksInPath;
	//	[Export ("stringByResolvingSymlinksInPath")]
	//	string StringByResolvingSymlinksInPath { get; }

	//	// -(NSArray<NSString *> * _Nonnull)stringsByAppendingPaths:(NSArray<NSString *> * _Nonnull)paths;
	//	[Export ("stringsByAppendingPaths:")]
	//	string[] StringsByAppendingPaths (string[] paths);

	//	// -(NSUInteger)completePathIntoString:(NSString * _Nullable * _Nullable)outputName caseSensitive:(BOOL)flag matchesIntoArray:(NSArray<NSString *> * _Nullable * _Nullable)outputArray filterTypes:(NSArray<NSString *> * _Nullable)filterTypes;
	//	[Export ("completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:")]
	//	nuint CompletePathIntoString ([NullAllowed] out string outputName, bool flag, [NullAllowed] out string[] outputArray, [NullAllowed] string[] filterTypes);

	//	// @property (readonly) const char * _Nonnull fileSystemRepresentation __attribute__((objc_returns_inner_pointer));
	//	[Export ("fileSystemRepresentation")]
	//	unsafe sbyte* FileSystemRepresentation { get; }

	//	// -(BOOL)getFileSystemRepresentation:(char * _Nonnull)cname maxLength:(NSUInteger)max;
	//	[Export ("getFileSystemRepresentation:maxLength:")]
	//	unsafe bool GetFileSystemRepresentation (sbyte* cname, nuint max);
	//}

	//// @interface NSArrayPathExtensions (NSArray)
	//[Category]
	//[BaseType (typeof(NSArray))]
	//interface NSArray_NSArrayPathExtensions
	//{
	//	// -(NSArray<NSString *> * _Nonnull)pathsMatchingExtensions:(NSArray<NSString *> * _Nonnull)filterTypes;
	//	[Export ("pathsMatchingExtensions:")]
	//	string[] PathsMatchingExtensions (string[] filterTypes);
	//}

	//// @interface NSURL : NSObject <NSSecureCoding, NSCopying>
	//[BaseType (typeof(NSObject))]
	//interface NSURL : INSSecureCoding, INSCopying
	//{
	//	// -(instancetype _Nullable)initWithScheme:(NSString * _Nonnull)scheme host:(NSString * _Nullable)host path:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.11)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
	//	[Export ("initWithScheme:host:path:")]
	//	IntPtr Constructor (string scheme, [NullAllowed] string host, string path);

	//	// -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("initFileURLWithPath:isDirectory:relativeToURL:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string path, bool isDir, [NullAllowed] NSUrl baseURL);

	//	// -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("initFileURLWithPath:relativeToURL:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string path, [NullAllowed] NSUrl baseURL);

	//	// -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("initFileURLWithPath:isDirectory:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string path, bool isDir);

	//	// -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path __attribute__((objc_designated_initializer));
	//	[Export ("initFileURLWithPath:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string path);

	//	// +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Static]
	//	[Export ("fileURLWithPath:isDirectory:relativeToURL:")]
	//	NSUrl FileURLWithPath (string path, bool isDir, [NullAllowed] NSUrl baseURL);

	//	// +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Static]
	//	[Export ("fileURLWithPath:relativeToURL:")]
	//	NSUrl FileURLWithPath (string path, [NullAllowed] NSUrl baseURL);

	//	// +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Static]
	//	[Export ("fileURLWithPath:isDirectory:")]
	//	NSUrl FileURLWithPath (string path, bool isDir);

	//	// +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("fileURLWithPath:")]
	//	NSUrl FileURLWithPath (string path);

	//	// -(instancetype _Nonnull)initFileURLWithFileSystemRepresentation:(const char * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:")]
	//	[DesignatedInitializer]
	//	unsafe IntPtr Constructor (sbyte* path, bool isDir, [NullAllowed] NSUrl baseURL);

	//	// +(NSURL * _Nonnull)fileURLWithFileSystemRepresentation:(const char * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Static]
	//	[Export ("fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:")]
	//	unsafe NSUrl FileURLWithFileSystemRepresentation (sbyte* path, bool isDir, [NullAllowed] NSUrl baseURL);

	//	// -(instancetype _Nullable)initWithString:(NSString * _Nonnull)URLString;
	//	[Export ("initWithString:")]
	//	IntPtr Constructor (string URLString);

	//	// -(instancetype _Nullable)initWithString:(NSString * _Nonnull)URLString relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer));
	//	[Export ("initWithString:relativeToURL:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string URLString, [NullAllowed] NSUrl baseURL);

	//	// +(instancetype _Nullable)URLWithString:(NSString * _Nonnull)URLString;
	//	[Static]
	//	[Export ("URLWithString:")]
	//	[return: NullAllowed]
	//	NSUrl URLWithString (string URLString);

	//	// +(instancetype _Nullable)URLWithString:(NSString * _Nonnull)URLString relativeToURL:(NSURL * _Nullable)baseURL;
	//	[Static]
	//	[Export ("URLWithString:relativeToURL:")]
	//	[return: NullAllowed]
	//	NSUrl URLWithString (string URLString, [NullAllowed] NSUrl baseURL);

	//	// -(instancetype _Nonnull)initWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("initWithDataRepresentation:relativeToURL:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSData data, [NullAllowed] NSUrl baseURL);

	//	// +(NSURL * _Nonnull)URLWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Static]
	//	[Export ("URLWithDataRepresentation:relativeToURL:")]
	//	NSUrl URLWithDataRepresentation (NSData data, [NullAllowed] NSUrl baseURL);

	//	// -(instancetype _Nonnull)initAbsoluteURLWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("initAbsoluteURLWithDataRepresentation:relativeToURL:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSData data, [NullAllowed] NSUrl baseURL);

	//	// +(NSURL * _Nonnull)absoluteURLWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Static]
	//	[Export ("absoluteURLWithDataRepresentation:relativeToURL:")]
	//	NSUrl AbsoluteURLWithDataRepresentation (NSData data, [NullAllowed] NSUrl baseURL);

	//	// @property (readonly, copy) NSData * _Nonnull dataRepresentation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("dataRepresentation", ArgumentSemantic.Copy)]
	//	NSData DataRepresentation { get; }

	//	// @property (readonly, copy) NSString * _Nullable absoluteString;
	//	[NullAllowed, Export ("absoluteString")]
	//	string AbsoluteString { get; }

	//	// @property (readonly, copy) NSString * _Nonnull relativeString;
	//	[Export ("relativeString")]
	//	string RelativeString { get; }

	//	// @property (readonly, copy) NSURL * _Nullable baseURL;
	//	[NullAllowed, Export ("baseURL", ArgumentSemantic.Copy)]
	//	NSUrl BaseURL { get; }

	//	// @property (readonly, copy) NSURL * _Nullable absoluteURL;
	//	[NullAllowed, Export ("absoluteURL", ArgumentSemantic.Copy)]
	//	NSUrl AbsoluteURL { get; }

	//	// @property (readonly, copy) NSString * _Nullable scheme;
	//	[NullAllowed, Export ("scheme")]
	//	string Scheme { get; }

	//	// @property (readonly, copy) NSString * _Nullable resourceSpecifier;
	//	[NullAllowed, Export ("resourceSpecifier")]
	//	string ResourceSpecifier { get; }

	//	// @property (readonly, copy) NSString * _Nullable host;
	//	[NullAllowed, Export ("host")]
	//	string Host { get; }

	//	// @property (readonly, copy) NSNumber * _Nullable port;
	//	[NullAllowed, Export ("port", ArgumentSemantic.Copy)]
	//	NSNumber Port { get; }

	//	// @property (readonly, copy) NSString * _Nullable user;
	//	[NullAllowed, Export ("user")]
	//	string User { get; }

	//	// @property (readonly, copy) NSString * _Nullable password;
	//	[NullAllowed, Export ("password")]
	//	string Password { get; }

	//	// @property (readonly, copy) NSString * _Nullable path;
	//	[NullAllowed, Export ("path")]
	//	string Path { get; }

	//	// @property (readonly, copy) NSString * _Nullable fragment;
	//	[NullAllowed, Export ("fragment")]
	//	string Fragment { get; }

	//	// @property (readonly, copy) NSString * _Nullable parameterString;
	//	[NullAllowed, Export ("parameterString")]
	//	string ParameterString { get; }

	//	// @property (readonly, copy) NSString * _Nullable query;
	//	[NullAllowed, Export ("query")]
	//	string Query { get; }

	//	// @property (readonly, copy) NSString * _Nullable relativePath;
	//	[NullAllowed, Export ("relativePath")]
	//	string RelativePath { get; }

	//	// @property (readonly) BOOL hasDirectoryPath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("hasDirectoryPath")]
	//	bool HasDirectoryPath { get; }

	//	// -(BOOL)getFileSystemRepresentation:(char * _Nonnull)buffer maxLength:(NSUInteger)maxBufferLength __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("getFileSystemRepresentation:maxLength:")]
	//	unsafe bool GetFileSystemRepresentation (sbyte* buffer, nuint maxBufferLength);

	//	// @property (readonly) const char * _Nonnull fileSystemRepresentation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9))) __attribute__((objc_returns_inner_pointer));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[Export ("fileSystemRepresentation")]
	//	unsafe sbyte* FileSystemRepresentation { get; }

	//	// @property (readonly, getter = isFileURL) BOOL fileURL;
	//	[Export ("fileURL")]
	//	bool FileURL { [Bind ("isFileURL")] get; }

	//	// @property (readonly, copy) NSURL * _Nullable standardizedURL;
	//	[NullAllowed, Export ("standardizedURL", ArgumentSemantic.Copy)]
	//	NSUrl StandardizedURL { get; }

	//	// -(BOOL)checkResourceIsReachableAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("checkResourceIsReachableAndReturnError:")]
	//	bool CheckResourceIsReachableAndReturnError ([NullAllowed] out NSError error);

	//	// -(BOOL)isFileReferenceURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("isFileReferenceURL")]
	//	[Verify (MethodToProperty)]
	//	bool IsFileReferenceURL { get; }

	//	// -(NSURL * _Nullable)fileReferenceURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("fileReferenceURL")]
	//	[Verify (MethodToProperty)]
	//	NSUrl FileReferenceURL { get; }

	//	// @property (readonly, copy) NSURL * _Nullable filePathURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("filePathURL", ArgumentSemantic.Copy)]
	//	NSUrl FilePathURL { get; }

	//	// -(BOOL)getResourceValue:(id  _Nullable * _Nonnull)value forKey:(NSURLResourceKey _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("getResourceValue:forKey:error:")]
	//	bool GetResourceValue ([NullAllowed] out NSObject value, string key, [NullAllowed] out NSError error);

	//	// -(NSDictionary<NSURLResourceKey,id> * _Nullable)resourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nonnull)keys error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("resourceValuesForKeys:error:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> ResourceValuesForKeys (string[] keys, [NullAllowed] out NSError error);

	//	// -(BOOL)setResourceValue:(id _Nullable)value forKey:(NSURLResourceKey _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("setResourceValue:forKey:error:")]
	//	bool SetResourceValue ([NullAllowed] NSObject value, string key, [NullAllowed] out NSError error);

	//	// -(BOOL)setResourceValues:(NSDictionary<NSURLResourceKey,id> * _Nonnull)keyedValues error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("setResourceValues:error:")]
	//	bool SetResourceValues (NSDictionary<NSString, NSObject> keyedValues, [NullAllowed] out NSError error);

	//	// -(void)removeCachedResourceValueForKey:(NSURLResourceKey _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("removeCachedResourceValueForKey:")]
	//	void RemoveCachedResourceValueForKey (string key);

	//	// -(void)removeAllCachedResourceValues __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("removeAllCachedResourceValues")]
	//	void RemoveAllCachedResourceValues ();

	//	// -(void)setTemporaryResourceValue:(id _Nullable)value forKey:(NSURLResourceKey _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("setTemporaryResourceValue:forKey:")]
	//	void SetTemporaryResourceValue ([NullAllowed] NSObject value, string key);

	//	// -(NSData * _Nullable)bookmarkDataWithOptions:(NSURLBookmarkCreationOptions)options includingResourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nullable)keys relativeToURL:(NSURL * _Nullable)relativeURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:")]
	//	[return: NullAllowed]
	//	NSData BookmarkDataWithOptions (NSURLBookmarkCreationOptions options, [NullAllowed] string[] keys, [NullAllowed] NSUrl relativeURL, [NullAllowed] out NSError error);

	//	// -(instancetype _Nullable)initByResolvingBookmarkData:(NSData * _Nonnull)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL * _Nullable)relativeURL bookmarkDataIsStale:(BOOL * _Nullable)isStale error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:")]
	//	unsafe IntPtr Constructor (NSData bookmarkData, NSURLBookmarkResolutionOptions options, [NullAllowed] NSUrl relativeURL, [NullAllowed] bool* isStale, [NullAllowed] out NSError error);

	//	// +(instancetype _Nullable)URLByResolvingBookmarkData:(NSData * _Nonnull)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL * _Nullable)relativeURL bookmarkDataIsStale:(BOOL * _Nullable)isStale error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:")]
	//	[return: NullAllowed]
	//	unsafe NSUrl URLByResolvingBookmarkData (NSData bookmarkData, NSURLBookmarkResolutionOptions options, [NullAllowed] NSUrl relativeURL, [NullAllowed] bool* isStale, [NullAllowed] out NSError error);

	//	// +(NSDictionary<NSURLResourceKey,id> * _Nullable)resourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nonnull)keys fromBookmarkData:(NSData * _Nonnull)bookmarkData __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("resourceValuesForKeys:fromBookmarkData:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> ResourceValuesForKeys (string[] keys, NSData bookmarkData);

	//	// +(BOOL)writeBookmarkData:(NSData * _Nonnull)bookmarkData toURL:(NSURL * _Nonnull)bookmarkFileURL options:(NSURLBookmarkFileCreationOptions)options error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("writeBookmarkData:toURL:options:error:")]
	//	bool WriteBookmarkData (NSData bookmarkData, NSUrl bookmarkFileURL, nuint options, [NullAllowed] out NSError error);

	//	// +(NSData * _Nullable)bookmarkDataWithContentsOfURL:(NSURL * _Nonnull)bookmarkFileURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("bookmarkDataWithContentsOfURL:error:")]
	//	[return: NullAllowed]
	//	NSData BookmarkDataWithContentsOfURL (NSUrl bookmarkFileURL, [NullAllowed] out NSError error);

	//	// +(instancetype _Nullable)URLByResolvingAliasFileAtURL:(NSURL * _Nonnull)url options:(NSURLBookmarkResolutionOptions)options error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Static]
	//	[Export ("URLByResolvingAliasFileAtURL:options:error:")]
	//	[return: NullAllowed]
	//	NSUrl URLByResolvingAliasFileAtURL (NSUrl url, NSURLBookmarkResolutionOptions options, [NullAllowed] out NSError error);

	//	// -(BOOL)startAccessingSecurityScopedResource __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (8, 0)]
	//	[Export ("startAccessingSecurityScopedResource")]
	//	[Verify (MethodToProperty)]
	//	bool StartAccessingSecurityScopedResource { get; }

	//	// -(void)stopAccessingSecurityScopedResource __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (8,0)]
	//	[Export ("stopAccessingSecurityScopedResource")]
	//	void StopAccessingSecurityScopedResource ();
	//}

	//// @interface NSPromisedItems (NSURL)
	//[Category]
	//[BaseType (typeof(NSUrl))]
	//interface NSURL_NSPromisedItems
	//{
	//	// -(BOOL)getPromisedItemResourceValue:(id  _Nullable * _Nonnull)value forKey:(NSURLResourceKey _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("getPromisedItemResourceValue:forKey:error:")]
	//	bool GetPromisedItemResourceValue ([NullAllowed] out NSObject value, string key, [NullAllowed] out NSError error);

	//	// -(NSDictionary<NSURLResourceKey,id> * _Nullable)promisedItemResourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nonnull)keys error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("promisedItemResourceValuesForKeys:error:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> PromisedItemResourceValuesForKeys (string[] keys, [NullAllowed] out NSError error);

	//	// -(BOOL)checkPromisedItemIsReachableAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("checkPromisedItemIsReachableAndReturnError:")]
	//	bool CheckPromisedItemIsReachableAndReturnError ([NullAllowed] out NSError error);
	//}

	//// @interface NSItemProvider (NSURL) <NSItemProviderReading, NSItemProviderWriting>
	//[Category]
	//[BaseType (typeof(NSUrl))]
	//interface NSURL_NSItemProvider : INSItemProviderReading, INSItemProviderWriting
	//{
	//}

	//// @interface NSURLQueryItem : NSObject <NSSecureCoding, NSCopying>
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSURLQueryItem : INSSecureCoding, INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name value:(NSString * _Nullable)value __attribute__((objc_designated_initializer));
	//	[Export ("initWithName:value:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string name, [NullAllowed] string value);

	//	// +(instancetype _Nonnull)queryItemWithName:(NSString * _Nonnull)name value:(NSString * _Nullable)value;
	//	[Static]
	//	[Export ("queryItemWithName:value:")]
	//	NSUrlQueryItem QueryItemWithName (string name, [NullAllowed] string value);

	//	// @property (readonly) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly) NSString * _Nullable value;
	//	[NullAllowed, Export ("value")]
	//	string Value { get; }
	//}

	//// @interface NSURLComponents : NSObject <NSCopying>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSURLComponents : INSCopying
	//{
	//	// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url resolvingAgainstBaseURL:(BOOL)resolve;
	//	[Export ("initWithURL:resolvingAgainstBaseURL:")]
	//	IntPtr Constructor (NSUrl url, bool resolve);

	//	// +(instancetype _Nullable)componentsWithURL:(NSURL * _Nonnull)url resolvingAgainstBaseURL:(BOOL)resolve;
	//	[Static]
	//	[Export ("componentsWithURL:resolvingAgainstBaseURL:")]
	//	[return: NullAllowed]
	//	NSUrlComponents ComponentsWithURL (NSUrl url, bool resolve);

	//	// -(instancetype _Nullable)initWithString:(NSString * _Nonnull)URLString;
	//	[Export ("initWithString:")]
	//	IntPtr Constructor (string URLString);

	//	// +(instancetype _Nullable)componentsWithString:(NSString * _Nonnull)URLString;
	//	[Static]
	//	[Export ("componentsWithString:")]
	//	[return: NullAllowed]
	//	NSUrlComponents ComponentsWithString (string URLString);

	//	// @property (readonly, copy) NSURL * _Nullable URL;
	//	[NullAllowed, Export ("URL", ArgumentSemantic.Copy)]
	//	NSUrl URL { get; }

	//	// -(NSURL * _Nullable)URLRelativeToURL:(NSURL * _Nullable)baseURL;
	//	[Export ("URLRelativeToURL:")]
	//	[return: NullAllowed]
	//	NSUrl URLRelativeToURL ([NullAllowed] NSUrl baseURL);

	//	// @property (readonly, copy) NSString * _Nullable string __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[NullAllowed, Export ("string")]
	//	string String { get; }

	//	// @property (copy) NSString * _Nullable scheme;
	//	[NullAllowed, Export ("scheme")]
	//	string Scheme { get; set; }

	//	// @property (copy) NSString * _Nullable user;
	//	[NullAllowed, Export ("user")]
	//	string User { get; set; }

	//	// @property (copy) NSString * _Nullable password;
	//	[NullAllowed, Export ("password")]
	//	string Password { get; set; }

	//	// @property (copy) NSString * _Nullable host;
	//	[NullAllowed, Export ("host")]
	//	string Host { get; set; }

	//	// @property (copy) NSNumber * _Nullable port;
	//	[NullAllowed, Export ("port", ArgumentSemantic.Copy)]
	//	NSNumber Port { get; set; }

	//	// @property (copy) NSString * _Nullable path;
	//	[NullAllowed, Export ("path")]
	//	string Path { get; set; }

	//	// @property (copy) NSString * _Nullable query;
	//	[NullAllowed, Export ("query")]
	//	string Query { get; set; }

	//	// @property (copy) NSString * _Nullable fragment;
	//	[NullAllowed, Export ("fragment")]
	//	string Fragment { get; set; }

	//	// @property (copy) NSString * _Nullable percentEncodedUser;
	//	[NullAllowed, Export ("percentEncodedUser")]
	//	string PercentEncodedUser { get; set; }

	//	// @property (copy) NSString * _Nullable percentEncodedPassword;
	//	[NullAllowed, Export ("percentEncodedPassword")]
	//	string PercentEncodedPassword { get; set; }

	//	// @property (copy) NSString * _Nullable percentEncodedHost;
	//	[NullAllowed, Export ("percentEncodedHost")]
	//	string PercentEncodedHost { get; set; }

	//	// @property (copy) NSString * _Nullable percentEncodedPath;
	//	[NullAllowed, Export ("percentEncodedPath")]
	//	string PercentEncodedPath { get; set; }

	//	// @property (copy) NSString * _Nullable percentEncodedQuery;
	//	[NullAllowed, Export ("percentEncodedQuery")]
	//	string PercentEncodedQuery { get; set; }

	//	// @property (copy) NSString * _Nullable percentEncodedFragment;
	//	[NullAllowed, Export ("percentEncodedFragment")]
	//	string PercentEncodedFragment { get; set; }

	//	// @property (readonly) NSRange rangeOfScheme __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("rangeOfScheme")]
	//	NSRange RangeOfScheme { get; }

	//	// @property (readonly) NSRange rangeOfUser __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("rangeOfUser")]
	//	NSRange RangeOfUser { get; }

	//	// @property (readonly) NSRange rangeOfPassword __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("rangeOfPassword")]
	//	NSRange RangeOfPassword { get; }

	//	// @property (readonly) NSRange rangeOfHost __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("rangeOfHost")]
	//	NSRange RangeOfHost { get; }

	//	// @property (readonly) NSRange rangeOfPort __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("rangeOfPort")]
	//	NSRange RangeOfPort { get; }

	//	// @property (readonly) NSRange rangeOfPath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("rangeOfPath")]
	//	NSRange RangeOfPath { get; }

	//	// @property (readonly) NSRange rangeOfQuery __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("rangeOfQuery")]
	//	NSRange RangeOfQuery { get; }

	//	// @property (readonly) NSRange rangeOfFragment __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("rangeOfFragment")]
	//	NSRange RangeOfFragment { get; }

	//	// @property (copy) NSArray<NSURLQueryItem *> * _Nullable queryItems __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[NullAllowed, Export ("queryItems", ArgumentSemantic.Copy)]
	//	NSUrlQueryItem[] QueryItems { get; set; }

	//	// @property (copy) NSArray<NSURLQueryItem *> * _Nullable percentEncodedQueryItems __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("percentEncodedQueryItems", ArgumentSemantic.Copy)]
	//	NSUrlQueryItem[] PercentEncodedQueryItems { get; set; }
	//}

	//// @interface NSURLUtilities (NSCharacterSet)
	//[Category]
	//[BaseType (typeof(NSCharacterSet))]
	//interface NSCharacterSet_NSURLUtilities
	//{
	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLUserAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[Static]
	//	[Export ("URLUserAllowedCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet URLUserAllowedCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLPasswordAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[Static]
	//	[Export ("URLPasswordAllowedCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet URLPasswordAllowedCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLHostAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[Static]
	//	[Export ("URLHostAllowedCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet URLHostAllowedCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLPathAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[Static]
	//	[Export ("URLPathAllowedCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet URLPathAllowedCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLQueryAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[Static]
	//	[Export ("URLQueryAllowedCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet URLQueryAllowedCharacterSet { get; }

	//	// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLFragmentAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[Static]
	//	[Export ("URLFragmentAllowedCharacterSet", ArgumentSemantic.Copy)]
	//	NSCharacterSet URLFragmentAllowedCharacterSet { get; }
	//}

	//// @interface NSURLUtilities (NSString)
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_NSURLUtilities
	//{
	//	// -(NSString * _Nullable)stringByAddingPercentEncodingWithAllowedCharacters:(NSCharacterSet * _Nonnull)allowedCharacters __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("stringByAddingPercentEncodingWithAllowedCharacters:")]
	//	[return: NullAllowed]
	//	string StringByAddingPercentEncodingWithAllowedCharacters (NSCharacterSet allowedCharacters);

	//	// @property (readonly, copy) NSString * _Nullable stringByRemovingPercentEncoding __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[NullAllowed, Export ("stringByRemovingPercentEncoding")]
	//	string StringByRemovingPercentEncoding { get; }

	//	// -(NSString * _Nullable)stringByAddingPercentEscapesUsingEncoding:(NSStringEncoding)enc __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.11)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
	//	[Export ("stringByAddingPercentEscapesUsingEncoding:")]
	//	[return: NullAllowed]
	//	string StringByAddingPercentEscapesUsingEncoding (nuint enc);

	//	// -(NSString * _Nullable)stringByReplacingPercentEscapesUsingEncoding:(NSStringEncoding)enc __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.11)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
	//	[Export ("stringByReplacingPercentEscapesUsingEncoding:")]
	//	[return: NullAllowed]
	//	string StringByReplacingPercentEscapesUsingEncoding (nuint enc);
	//}

	//// @interface NSURLPathUtilities (NSURL)
	//[Category]
	//[BaseType (typeof(NSUrl))]
	//interface NSURL_NSURLPathUtilities
	//{
	//	// +(NSURL * _Nullable)fileURLWithPathComponents:(NSArray<NSString *> * _Nonnull)components __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("fileURLWithPathComponents:")]
	//	[return: NullAllowed]
	//	NSUrl FileURLWithPathComponents (string[] components);

	//	// @property (readonly, copy) NSArray<NSString *> * _Nullable pathComponents __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("pathComponents", ArgumentSemantic.Copy)]
	//	string[] PathComponents { get; }

	//	// @property (readonly, copy) NSString * _Nullable lastPathComponent __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("lastPathComponent")]
	//	string LastPathComponent { get; }

	//	// @property (readonly, copy) NSString * _Nullable pathExtension __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("pathExtension")]
	//	string PathExtension { get; }

	//	// -(NSURL * _Nullable)URLByAppendingPathComponent:(NSString * _Nonnull)pathComponent __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("URLByAppendingPathComponent:")]
	//	[return: NullAllowed]
	//	NSUrl URLByAppendingPathComponent (string pathComponent);

	//	// -(NSURL * _Nullable)URLByAppendingPathComponent:(NSString * _Nonnull)pathComponent isDirectory:(BOOL)isDirectory __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("URLByAppendingPathComponent:isDirectory:")]
	//	[return: NullAllowed]
	//	NSUrl URLByAppendingPathComponent (string pathComponent, bool isDirectory);

	//	// @property (readonly, copy) NSURL * _Nullable URLByDeletingLastPathComponent __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("URLByDeletingLastPathComponent", ArgumentSemantic.Copy)]
	//	NSUrl URLByDeletingLastPathComponent { get; }

	//	// -(NSURL * _Nullable)URLByAppendingPathExtension:(NSString * _Nonnull)pathExtension __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("URLByAppendingPathExtension:")]
	//	[return: NullAllowed]
	//	NSUrl URLByAppendingPathExtension (string pathExtension);

	//	// @property (readonly, copy) NSURL * _Nullable URLByDeletingPathExtension __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("URLByDeletingPathExtension", ArgumentSemantic.Copy)]
	//	NSUrl URLByDeletingPathExtension { get; }

	//	// @property (readonly, copy) NSURL * _Nullable URLByStandardizingPath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("URLByStandardizingPath", ArgumentSemantic.Copy)]
	//	NSUrl URLByStandardizingPath { get; }

	//	// @property (readonly, copy) NSURL * _Nullable URLByResolvingSymlinksInPath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("URLByResolvingSymlinksInPath", ArgumentSemantic.Copy)]
	//	NSUrl URLByResolvingSymlinksInPath { get; }
	//}

	//// @interface NSFileSecurity : NSObject <NSCopying, NSSecureCoding>
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSFileSecurity : INSCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSFileManager : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSFileManager
	//{
	//	// @property (readonly, strong, class) NSFileManager * _Nonnull defaultManager;
	//	[Static]
	//	[Export ("defaultManager", ArgumentSemantic.Strong)]
	//	NSFileManager DefaultManager { get; }

	//	// -(NSArray<NSURL *> * _Nullable)mountedVolumeURLsIncludingResourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nullable)propertyKeys options:(NSVolumeEnumerationOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("mountedVolumeURLsIncludingResourceValuesForKeys:options:")]
	//	[return: NullAllowed]
	//	NSUrl[] MountedVolumeURLsIncludingResourceValuesForKeys ([NullAllowed] string[] propertyKeys, NSVolumeEnumerationOptions options);

	//	// -(void)unmountVolumeAtURL:(NSURL * _Nonnull)url options:(NSFileManagerUnmountOptions)mask completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,11)]
	//	[Export ("unmountVolumeAtURL:options:completionHandler:")]
	//	void UnmountVolumeAtURL (NSUrl url, NSFileManagerUnmountOptions mask, Action<NSError> completionHandler);

	//	// -(NSArray<NSURL *> * _Nullable)contentsOfDirectoryAtURL:(NSURL * _Nonnull)url includingPropertiesForKeys:(NSArray<NSURLResourceKey> * _Nullable)keys options:(NSDirectoryEnumerationOptions)mask error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:")]
	//	[return: NullAllowed]
	//	NSUrl[] ContentsOfDirectoryAtURL (NSUrl url, [NullAllowed] string[] keys, NSDirectoryEnumerationOptions mask, [NullAllowed] out NSError error);

	//	// -(NSArray<NSURL *> * _Nonnull)URLsForDirectory:(NSSearchPathDirectory)directory inDomains:(NSSearchPathDomainMask)domainMask __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("URLsForDirectory:inDomains:")]
	//	NSUrl[] URLsForDirectory (NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask);

	//	// -(NSURL * _Nullable)URLForDirectory:(NSSearchPathDirectory)directory inDomain:(NSSearchPathDomainMask)domain appropriateForURL:(NSURL * _Nullable)url create:(BOOL)shouldCreate error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("URLForDirectory:inDomain:appropriateForURL:create:error:")]
	//	[return: NullAllowed]
	//	NSUrl URLForDirectory (NSSearchPathDirectory directory, NSSearchPathDomainMask domain, [NullAllowed] NSUrl url, bool shouldCreate, [NullAllowed] out NSError error);

	//	// -(BOOL)getRelationship:(NSURLRelationship * _Nonnull)outRelationship ofDirectoryAtURL:(NSURL * _Nonnull)directoryURL toItemAtURL:(NSURL * _Nonnull)otherURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("getRelationship:ofDirectoryAtURL:toItemAtURL:error:")]
	//	unsafe bool GetRelationship (NSURLRelationship* outRelationship, NSUrl directoryURL, NSUrl otherURL, [NullAllowed] out NSError error);

	//	// -(BOOL)getRelationship:(NSURLRelationship * _Nonnull)outRelationship ofDirectory:(NSSearchPathDirectory)directory inDomain:(NSSearchPathDomainMask)domainMask toItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("getRelationship:ofDirectory:inDomain:toItemAtURL:error:")]
	//	unsafe bool GetRelationship (NSURLRelationship* outRelationship, NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, NSUrl url, [NullAllowed] out NSError error);

	//	// -(BOOL)createDirectoryAtURL:(NSURL * _Nonnull)url withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("createDirectoryAtURL:withIntermediateDirectories:attributes:error:")]
	//	bool CreateDirectoryAtURL (NSUrl url, bool createIntermediates, [NullAllowed] NSDictionary<NSString, NSObject> attributes, [NullAllowed] out NSError error);

	//	// -(BOOL)createSymbolicLinkAtURL:(NSURL * _Nonnull)url withDestinationURL:(NSURL * _Nonnull)destURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("createSymbolicLinkAtURL:withDestinationURL:error:")]
	//	bool CreateSymbolicLinkAtURL (NSUrl url, NSUrl destURL, [NullAllowed] out NSError error);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSFileManagerDelegate Delegate { get; set; }

	//	// @property (assign) id<NSFileManagerDelegate> _Nullable delegate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(BOOL)setAttributes:(NSDictionary<NSFileAttributeKey,id> * _Nonnull)attributes ofItemAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("setAttributes:ofItemAtPath:error:")]
	//	bool SetAttributes (NSDictionary<NSString, NSObject> attributes, string path, [NullAllowed] out NSError error);

	//	// -(BOOL)createDirectoryAtPath:(NSString * _Nonnull)path withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("createDirectoryAtPath:withIntermediateDirectories:attributes:error:")]
	//	bool CreateDirectoryAtPath (string path, bool createIntermediates, [NullAllowed] NSDictionary<NSString, NSObject> attributes, [NullAllowed] out NSError error);

	//	// -(NSArray<NSString *> * _Nullable)contentsOfDirectoryAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("contentsOfDirectoryAtPath:error:")]
	//	[return: NullAllowed]
	//	string[] ContentsOfDirectoryAtPath (string path, [NullAllowed] out NSError error);

	//	// -(NSArray<NSString *> * _Nullable)subpathsOfDirectoryAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("subpathsOfDirectoryAtPath:error:")]
	//	[return: NullAllowed]
	//	string[] SubpathsOfDirectoryAtPath (string path, [NullAllowed] out NSError error);

	//	// -(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributesOfItemAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("attributesOfItemAtPath:error:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> AttributesOfItemAtPath (string path, [NullAllowed] out NSError error);

	//	// -(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributesOfFileSystemForPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("attributesOfFileSystemForPath:error:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> AttributesOfFileSystemForPath (string path, [NullAllowed] out NSError error);

	//	// -(BOOL)createSymbolicLinkAtPath:(NSString * _Nonnull)path withDestinationPath:(NSString * _Nonnull)destPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("createSymbolicLinkAtPath:withDestinationPath:error:")]
	//	bool CreateSymbolicLinkAtPath (string path, string destPath, [NullAllowed] out NSError error);

	//	// -(NSString * _Nullable)destinationOfSymbolicLinkAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("destinationOfSymbolicLinkAtPath:error:")]
	//	[return: NullAllowed]
	//	string DestinationOfSymbolicLinkAtPath (string path, [NullAllowed] out NSError error);

	//	// -(BOOL)copyItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("copyItemAtPath:toPath:error:")]
	//	bool CopyItemAtPath (string srcPath, string dstPath, [NullAllowed] out NSError error);

	//	// -(BOOL)moveItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("moveItemAtPath:toPath:error:")]
	//	bool MoveItemAtPath (string srcPath, string dstPath, [NullAllowed] out NSError error);

	//	// -(BOOL)linkItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("linkItemAtPath:toPath:error:")]
	//	bool LinkItemAtPath (string srcPath, string dstPath, [NullAllowed] out NSError error);

	//	// -(BOOL)removeItemAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("removeItemAtPath:error:")]
	//	bool RemoveItemAtPath (string path, [NullAllowed] out NSError error);

	//	// -(BOOL)copyItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("copyItemAtURL:toURL:error:")]
	//	bool CopyItemAtURL (NSUrl srcURL, NSUrl dstURL, [NullAllowed] out NSError error);

	//	// -(BOOL)moveItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("moveItemAtURL:toURL:error:")]
	//	bool MoveItemAtURL (NSUrl srcURL, NSUrl dstURL, [NullAllowed] out NSError error);

	//	// -(BOOL)linkItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("linkItemAtURL:toURL:error:")]
	//	bool LinkItemAtURL (NSUrl srcURL, NSUrl dstURL, [NullAllowed] out NSError error);

	//	// -(BOOL)removeItemAtURL:(NSURL * _Nonnull)URL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("removeItemAtURL:error:")]
	//	bool RemoveItemAtURL (NSUrl URL, [NullAllowed] out NSError error);

	//	// -(BOOL)trashItemAtURL:(NSURL * _Nonnull)url resultingItemURL:(NSURL * _Nullable * _Nullable)outResultingURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[NoWatch, NoTV, Mac (10,8), iOS (11,0)]
	//	[Export ("trashItemAtURL:resultingItemURL:error:")]
	//	bool TrashItemAtURL (NSUrl url, [NullAllowed] out NSUrl outResultingURL, [NullAllowed] out NSError error);

	//	// -(NSDictionary * _Nullable)fileAttributesAtPath:(NSString * _Nonnull)path traverseLink:(BOOL)yorn __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -attributesOfItemAtPath:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -attributesOfItemAtPath:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -attributesOfItemAtPath:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -attributesOfItemAtPath:error: instead")]
	//	[Export ("fileAttributesAtPath:traverseLink:")]
	//	[return: NullAllowed]
	//	NSDictionary FileAttributesAtPath (string path, bool yorn);

	//	// -(BOOL)changeFileAttributes:(NSDictionary * _Nonnull)attributes atPath:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -setAttributes:ofItemAtPath:error: instead")]
	//	[Export ("changeFileAttributes:atPath:")]
	//	bool ChangeFileAttributes (NSDictionary attributes, string path);

	//	// -(NSArray * _Nullable)directoryContentsAtPath:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -contentsOfDirectoryAtPath:error: instead")]
	//	[Export ("directoryContentsAtPath:")]
	//	[Verify (StronglyTypedNSArray)]
	//	[return: NullAllowed]
	//	NSObject[] DirectoryContentsAtPath (string path);

	//	// -(NSDictionary * _Nullable)fileSystemAttributesAtPath:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -attributesOfFileSystemForPath:error: instead")]
	//	[Export ("fileSystemAttributesAtPath:")]
	//	[return: NullAllowed]
	//	NSDictionary FileSystemAttributesAtPath (string path);

	//	// -(NSString * _Nullable)pathContentOfSymbolicLinkAtPath:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
	//	[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
	//	[Export ("pathContentOfSymbolicLinkAtPath:")]
	//	[return: NullAllowed]
	//	string PathContentOfSymbolicLinkAtPath (string path);

	//	// -(BOOL)createSymbolicLinkAtPath:(NSString * _Nonnull)path pathContent:(NSString * _Nonnull)otherpath __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -createSymbolicLinkAtPath:error: instead")]
	//	[Export ("createSymbolicLinkAtPath:pathContent:")]
	//	bool CreateSymbolicLinkAtPath (string path, string otherpath);

	//	// -(BOOL)createDirectoryAtPath:(NSString * _Nonnull)path attributes:(NSDictionary * _Nonnull)attributes __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
	//	[Export ("createDirectoryAtPath:attributes:")]
	//	bool CreateDirectoryAtPath (string path, NSDictionary attributes);

	//	// @property (readonly, copy) NSString * _Nonnull currentDirectoryPath;
	//	[Export ("currentDirectoryPath")]
	//	string CurrentDirectoryPath { get; }

	//	// -(BOOL)changeCurrentDirectoryPath:(NSString * _Nonnull)path;
	//	[Export ("changeCurrentDirectoryPath:")]
	//	bool ChangeCurrentDirectoryPath (string path);

	//	// -(BOOL)fileExistsAtPath:(NSString * _Nonnull)path;
	//	[Export ("fileExistsAtPath:")]
	//	bool FileExistsAtPath (string path);

	//	// -(BOOL)fileExistsAtPath:(NSString * _Nonnull)path isDirectory:(BOOL * _Nullable)isDirectory;
	//	[Export ("fileExistsAtPath:isDirectory:")]
	//	unsafe bool FileExistsAtPath (string path, [NullAllowed] bool* isDirectory);

	//	// -(BOOL)isReadableFileAtPath:(NSString * _Nonnull)path;
	//	[Export ("isReadableFileAtPath:")]
	//	bool IsReadableFileAtPath (string path);

	//	// -(BOOL)isWritableFileAtPath:(NSString * _Nonnull)path;
	//	[Export ("isWritableFileAtPath:")]
	//	bool IsWritableFileAtPath (string path);

	//	// -(BOOL)isExecutableFileAtPath:(NSString * _Nonnull)path;
	//	[Export ("isExecutableFileAtPath:")]
	//	bool IsExecutableFileAtPath (string path);

	//	// -(BOOL)isDeletableFileAtPath:(NSString * _Nonnull)path;
	//	[Export ("isDeletableFileAtPath:")]
	//	bool IsDeletableFileAtPath (string path);

	//	// -(BOOL)contentsEqualAtPath:(NSString * _Nonnull)path1 andPath:(NSString * _Nonnull)path2;
	//	[Export ("contentsEqualAtPath:andPath:")]
	//	bool ContentsEqualAtPath (string path1, string path2);

	//	// -(NSString * _Nonnull)displayNameAtPath:(NSString * _Nonnull)path;
	//	[Export ("displayNameAtPath:")]
	//	string DisplayNameAtPath (string path);

	//	// -(NSArray<NSString *> * _Nullable)componentsToDisplayForPath:(NSString * _Nonnull)path;
	//	[Export ("componentsToDisplayForPath:")]
	//	[return: NullAllowed]
	//	string[] ComponentsToDisplayForPath (string path);

	//	// -(NSDirectoryEnumerator<NSString *> * _Nullable)enumeratorAtPath:(NSString * _Nonnull)path;
	//	[Export ("enumeratorAtPath:")]
	//	[return: NullAllowed]
	//	NSDirectoryEnumerator<NSString> EnumeratorAtPath (string path);

	//	// -(NSDirectoryEnumerator<NSURL *> * _Nullable)enumeratorAtURL:(NSURL * _Nonnull)url includingPropertiesForKeys:(NSArray<NSURLResourceKey> * _Nullable)keys options:(NSDirectoryEnumerationOptions)mask errorHandler:(BOOL (^ _Nullable)(NSURL * _Nonnull, NSError * _Nonnull))handler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:")]
	//	[return: NullAllowed]
	//	NSDirectoryEnumerator<NSURL> EnumeratorAtURL (NSUrl url, [NullAllowed] string[] keys, NSDirectoryEnumerationOptions mask, [NullAllowed] Func<NSURL, NSError, bool> handler);

	//	// -(NSArray<NSString *> * _Nullable)subpathsAtPath:(NSString * _Nonnull)path;
	//	[Export ("subpathsAtPath:")]
	//	[return: NullAllowed]
	//	string[] SubpathsAtPath (string path);

	//	// -(NSData * _Nullable)contentsAtPath:(NSString * _Nonnull)path;
	//	[Export ("contentsAtPath:")]
	//	[return: NullAllowed]
	//	NSData ContentsAtPath (string path);

	//	// -(BOOL)createFileAtPath:(NSString * _Nonnull)path contents:(NSData * _Nullable)data attributes:(NSDictionary<NSFileAttributeKey,id> * _Nullable)attr;
	//	[Export ("createFileAtPath:contents:attributes:")]
	//	bool CreateFileAtPath (string path, [NullAllowed] NSData data, [NullAllowed] NSDictionary<NSString, NSObject> attr);

	//	// -(const char * _Nonnull)fileSystemRepresentationWithPath:(NSString * _Nonnull)path __attribute__((objc_returns_inner_pointer));
	//	[Export ("fileSystemRepresentationWithPath:")]
	//	unsafe sbyte* FileSystemRepresentationWithPath (string path);

	//	// -(NSString * _Nonnull)stringWithFileSystemRepresentation:(const char * _Nonnull)str length:(NSUInteger)len;
	//	[Export ("stringWithFileSystemRepresentation:length:")]
	//	unsafe string StringWithFileSystemRepresentation (sbyte* str, nuint len);

	//	// -(BOOL)replaceItemAtURL:(NSURL * _Nonnull)originalItemURL withItemAtURL:(NSURL * _Nonnull)newItemURL backupItemName:(NSString * _Nullable)backupItemName options:(NSFileManagerItemReplacementOptions)options resultingItemURL:(NSURL * _Nullable * _Nullable)resultingURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:")]
	//	bool ReplaceItemAtURL (NSUrl originalItemURL, NSUrl newItemURL, [NullAllowed] string backupItemName, NSFileManagerItemReplacementOptions options, [NullAllowed] out NSUrl resultingURL, [NullAllowed] out NSError error);

	//	// -(BOOL)setUbiquitous:(BOOL)flag itemAtURL:(NSURL * _Nonnull)url destinationURL:(NSURL * _Nonnull)destinationURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("setUbiquitous:itemAtURL:destinationURL:error:")]
	//	bool SetUbiquitous (bool flag, NSUrl url, NSUrl destinationURL, [NullAllowed] out NSError error);

	//	// -(BOOL)isUbiquitousItemAtURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("isUbiquitousItemAtURL:")]
	//	bool IsUbiquitousItemAtURL (NSUrl url);

	//	// -(BOOL)startDownloadingUbiquitousItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("startDownloadingUbiquitousItemAtURL:error:")]
	//	bool StartDownloadingUbiquitousItemAtURL (NSUrl url, [NullAllowed] out NSError error);

	//	// -(BOOL)evictUbiquitousItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("evictUbiquitousItemAtURL:error:")]
	//	bool EvictUbiquitousItemAtURL (NSUrl url, [NullAllowed] out NSError error);

	//	// -(NSURL * _Nullable)URLForUbiquityContainerIdentifier:(NSString * _Nullable)containerIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("URLForUbiquityContainerIdentifier:")]
	//	[return: NullAllowed]
	//	NSUrl URLForUbiquityContainerIdentifier ([NullAllowed] string containerIdentifier);

	//	// -(NSURL * _Nullable)URLForPublishingUbiquitousItemAtURL:(NSURL * _Nonnull)url expirationDate:(NSDate * _Nullable * _Nullable)outDate error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("URLForPublishingUbiquitousItemAtURL:expirationDate:error:")]
	//	[return: NullAllowed]
	//	NSUrl URLForPublishingUbiquitousItemAtURL (NSUrl url, [NullAllowed] out NSDate outDate, [NullAllowed] out NSError error);

	//	// @property (readonly, copy) id<NSObject,NSCopying,NSCoding> _Nullable ubiquityIdentityToken __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[NullAllowed, Export ("ubiquityIdentityToken", ArgumentSemantic.Copy)]
	//	NSObject<NSObject, NSCopying, NSCoding> UbiquityIdentityToken { get; }

	//	// -(void)getFileProviderServicesForItemAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSDictionary<NSFileProviderServiceName,NSFileProviderService *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[NoWatch, NoTV, Mac (10,13), iOS (11,0)]
	//	[Export ("getFileProviderServicesForItemAtURL:completionHandler:")]
	//	void GetFileProviderServicesForItemAtURL (NSUrl url, Action<NSDictionary<NSString, NSFileProviderService>, NSError> completionHandler);

	//	// -(NSURL * _Nullable)containerURLForSecurityApplicationGroupIdentifier:(NSString * _Nonnull)groupIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (7,0)]
	//	[Export ("containerURLForSecurityApplicationGroupIdentifier:")]
	//	[return: NullAllowed]
	//	NSUrl ContainerURLForSecurityApplicationGroupIdentifier (string groupIdentifier);
	//}

	//// @interface NSUserInformation (NSFileManager)
	//[Category]
	//[BaseType (typeof(NSFileManager))]
	//interface NSFileManager_NSUserInformation
	//{
	//	// @property (readonly, copy) NSURL * _Nonnull homeDirectoryForCurrentUser __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.12)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 12)]
	//	[Export ("homeDirectoryForCurrentUser", ArgumentSemantic.Copy)]
	//	NSUrl HomeDirectoryForCurrentUser { get; }

	//	// @property (readonly, copy) NSURL * _Nonnull temporaryDirectory __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("temporaryDirectory", ArgumentSemantic.Copy)]
	//	NSUrl TemporaryDirectory { get; }

	//	// -(NSURL * _Nullable)homeDirectoryForUser:(NSString * _Nonnull)userName __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.12)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,12)]
	//	[Export ("homeDirectoryForUser:")]
	//	[return: NullAllowed]
	//	NSUrl HomeDirectoryForUser (string userName);
	//}

	//// @interface NSCopyLinkMoveHandler (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSCopyLinkMoveHandler
	//{
	//	// -(BOOL)fileManager:(NSFileManager * _Nonnull)fm shouldProceedAfterError:(NSDictionary * _Nonnull)errorInfo __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: " Handler API no longer supported")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: " Handler API no longer supported")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: " Handler API no longer supported")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: " Handler API no longer supported")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: " Handler API no longer supported")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: " Handler API no longer supported")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: " Handler API no longer supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 5, message: " Handler API no longer supported")]
	//	[Export ("fileManager:shouldProceedAfterError:")]
	//	bool FileManager (NSFileManager fm, NSDictionary errorInfo);

	//	// -(void)fileManager:(NSFileManager * _Nonnull)fm willProcessPath:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Handler API no longer supported")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Handler API no longer supported")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Handler API no longer supported")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Handler API no longer supported")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Handler API no longer supported")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Handler API no longer supported")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Handler API no longer supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 5, message: "Handler API no longer supported")]
	//	[Export ("fileManager:willProcessPath:")]
	//	void FileManager (NSFileManager fm, string path);
	//}

	//// @protocol NSFileManagerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSFileManagerDelegate
	//{
	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldCopyItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
	//	[Export ("fileManager:shouldCopyItemAtPath:toPath:")]
	//	bool ShouldCopyItemAtPath (NSFileManager fileManager, string srcPath, string dstPath);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldCopyItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("fileManager:shouldCopyItemAtURL:toURL:")]
	//	bool ShouldCopyItemAtURL (NSFileManager fileManager, NSUrl srcURL, NSUrl dstURL);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error copyingItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
	//	[Export ("fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:")]
	//	bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, string srcPath, string dstPath);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error copyingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:")]
	//	bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, NSUrl srcURL, NSUrl dstURL);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldMoveItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
	//	[Export ("fileManager:shouldMoveItemAtPath:toPath:")]
	//	bool ShouldMoveItemAtPath (NSFileManager fileManager, string srcPath, string dstPath);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldMoveItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("fileManager:shouldMoveItemAtURL:toURL:")]
	//	bool ShouldMoveItemAtURL (NSFileManager fileManager, NSUrl srcURL, NSUrl dstURL);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error movingItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
	//	[Export ("fileManager:shouldProceedAfterError:movingItemAtPath:toPath:")]
	//	bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, string srcPath, string dstPath);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error movingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("fileManager:shouldProceedAfterError:movingItemAtURL:toURL:")]
	//	bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, NSUrl srcURL, NSUrl dstURL);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldLinkItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
	//	[Export ("fileManager:shouldLinkItemAtPath:toPath:")]
	//	bool ShouldLinkItemAtPath (NSFileManager fileManager, string srcPath, string dstPath);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldLinkItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("fileManager:shouldLinkItemAtURL:toURL:")]
	//	bool ShouldLinkItemAtURL (NSFileManager fileManager, NSUrl srcURL, NSUrl dstURL);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error linkingItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
	//	[Export ("fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:")]
	//	bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, string srcPath, string dstPath);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error linkingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:")]
	//	bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, NSUrl srcURL, NSUrl dstURL);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldRemoveItemAtPath:(NSString * _Nonnull)path;
	//	[Export ("fileManager:shouldRemoveItemAtPath:")]
	//	bool ShouldRemoveItemAtPath (NSFileManager fileManager, string path);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldRemoveItemAtURL:(NSURL * _Nonnull)URL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("fileManager:shouldRemoveItemAtURL:")]
	//	bool ShouldRemoveItemAtURL (NSFileManager fileManager, NSUrl URL);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error removingItemAtPath:(NSString * _Nonnull)path;
	//	[Export ("fileManager:shouldProceedAfterError:removingItemAtPath:")]
	//	bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, string path);

	//	// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error removingItemAtURL:(NSURL * _Nonnull)URL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("fileManager:shouldProceedAfterError:removingItemAtURL:")]
	//	bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, NSUrl URL);
	//}

	//// audit-objc-generics: @interface NSDirectoryEnumerator<ObjectType> : NSEnumerator
	//[BaseType (typeof(NSEnumerator))]
	//interface NSDirectoryEnumerator
	//{
	//	// @property (readonly, copy) NSDictionary<NSFileAttributeKey,id> * _Nullable fileAttributes;
	//	[NullAllowed, Export ("fileAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> FileAttributes { get; }

	//	// @property (readonly, copy) NSDictionary<NSFileAttributeKey,id> * _Nullable directoryAttributes;
	//	[NullAllowed, Export ("directoryAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> DirectoryAttributes { get; }

	//	// -(void)skipDescendents;
	//	[Export ("skipDescendents")]
	//	void SkipDescendents ();

	//	// @property (readonly) NSUInteger level __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("level")]
	//	nuint Level { get; }

	//	// -(void)skipDescendants __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("skipDescendants")]
	//	void SkipDescendants ();
	//}

	//// @interface NSFileProviderService : NSObject
	//[NoWatch, NoTV, Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSFileProviderService
	//{
	//	// -(void)getFileProviderConnectionWithCompletionHandler:(void (^ _Nonnull)(NSXPCConnection * _Nullable, NSError * _Nullable))completionHandler;
	//	[Export ("getFileProviderConnectionWithCompletionHandler:")]
	//	void GetFileProviderConnectionWithCompletionHandler (Action<NSXPCConnection, NSError> completionHandler);

	//	// @property (readonly, copy) NSFileProviderServiceName _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }
	//}

	//// @interface NSFileAttributes (NSDictionary)
	//[Category]
	//[BaseType (typeof(NSDictionary))]
	//interface NSDictionary_NSFileAttributes
	//{
	//	// -(unsigned long long)fileSize;
	//	[Export ("fileSize")]
	//	[Verify (MethodToProperty)]
	//	ulong FileSize { get; }

	//	// -(NSDate * _Nullable)fileModificationDate;
	//	[NullAllowed, Export ("fileModificationDate")]
	//	[Verify (MethodToProperty)]
	//	NSDate FileModificationDate { get; }

	//	// -(NSString * _Nullable)fileType;
	//	[NullAllowed, Export ("fileType")]
	//	[Verify (MethodToProperty)]
	//	string FileType { get; }

	//	// -(NSUInteger)filePosixPermissions;
	//	[Export ("filePosixPermissions")]
	//	[Verify (MethodToProperty)]
	//	nuint FilePosixPermissions { get; }

	//	// -(NSString * _Nullable)fileOwnerAccountName;
	//	[NullAllowed, Export ("fileOwnerAccountName")]
	//	[Verify (MethodToProperty)]
	//	string FileOwnerAccountName { get; }

	//	// -(NSString * _Nullable)fileGroupOwnerAccountName;
	//	[NullAllowed, Export ("fileGroupOwnerAccountName")]
	//	[Verify (MethodToProperty)]
	//	string FileGroupOwnerAccountName { get; }

	//	// -(NSInteger)fileSystemNumber;
	//	[Export ("fileSystemNumber")]
	//	[Verify (MethodToProperty)]
	//	nint FileSystemNumber { get; }

	//	// -(NSUInteger)fileSystemFileNumber;
	//	[Export ("fileSystemFileNumber")]
	//	[Verify (MethodToProperty)]
	//	nuint FileSystemFileNumber { get; }

	//	// -(BOOL)fileExtensionHidden;
	//	[Export ("fileExtensionHidden")]
	//	[Verify (MethodToProperty)]
	//	bool FileExtensionHidden { get; }

	//	// -(OSType)fileHFSCreatorCode;
	//	[Export ("fileHFSCreatorCode")]
	//	[Verify (MethodToProperty)]
	//	uint FileHFSCreatorCode { get; }

	//	// -(OSType)fileHFSTypeCode;
	//	[Export ("fileHFSTypeCode")]
	//	[Verify (MethodToProperty)]
	//	uint FileHFSTypeCode { get; }

	//	// -(BOOL)fileIsImmutable;
	//	[Export ("fileIsImmutable")]
	//	[Verify (MethodToProperty)]
	//	bool FileIsImmutable { get; }

	//	// -(BOOL)fileIsAppendOnly;
	//	[Export ("fileIsAppendOnly")]
	//	[Verify (MethodToProperty)]
	//	bool FileIsAppendOnly { get; }

	//	// -(NSDate * _Nullable)fileCreationDate;
	//	[NullAllowed, Export ("fileCreationDate")]
	//	[Verify (MethodToProperty)]
	//	NSDate FileCreationDate { get; }

	//	// -(NSNumber * _Nullable)fileOwnerAccountID;
	//	[NullAllowed, Export ("fileOwnerAccountID")]
	//	[Verify (MethodToProperty)]
	//	NSNumber FileOwnerAccountID { get; }

	//	// -(NSNumber * _Nullable)fileGroupOwnerAccountID;
	//	[NullAllowed, Export ("fileGroupOwnerAccountID")]
	//	[Verify (MethodToProperty)]
	//	NSNumber FileGroupOwnerAccountID { get; }
	//}

	//// @interface NSPointerFunctions : NSObject <NSCopying>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSPointerFunctions : INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithOptions:(NSPointerFunctionsOptions)options __attribute__((objc_designated_initializer));
	//	[Export ("initWithOptions:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSPointerFunctionsOptions options);

	//	// +(NSPointerFunctions * _Nonnull)pointerFunctionsWithOptions:(NSPointerFunctionsOptions)options;
	//	[Static]
	//	[Export ("pointerFunctionsWithOptions:")]
	//	NSPointerFunctions PointerFunctionsWithOptions (NSPointerFunctionsOptions options);

	//	// @property NSUInteger (* _Nullable)(const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull)) hashFunction;
	//	[NullAllowed, Export ("hashFunction", ArgumentSemantic.Assign)]
	//	unsafe Func<void*, System.Func<void*, nuint>*, nuint>* HashFunction { get; set; }

	//	// @property BOOL (* _Nullable)(const void * _Nonnull, const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull)) isEqualFunction;
	//	[NullAllowed, Export ("isEqualFunction", ArgumentSemantic.Assign)]
	//	unsafe Func<void*, void*, System.Func<void*, nuint>*, bool>* IsEqualFunction { get; set; }

	//	// @property NSUInteger (* _Nullable)(const void * _Nonnull) sizeFunction;
	//	[NullAllowed, Export ("sizeFunction", ArgumentSemantic.Assign)]
	//	unsafe Func<void*, nuint>* SizeFunction { get; set; }

	//	// @property NSString * _Nullable (* _Nullable)(const void * _Nonnull) descriptionFunction;
	//	[NullAllowed, Export ("descriptionFunction", ArgumentSemantic.Assign)]
	//	unsafe Func<void*, NSString>* DescriptionFunction { get; set; }

	//	// @property void (* _Nullable)(const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull)) relinquishFunction;
	//	[NullAllowed, Export ("relinquishFunction", ArgumentSemantic.Assign)]
	//	unsafe Action<void*, System.Func<void*, nuint>*>* RelinquishFunction { get; set; }

	//	// @property void * _Nonnull (* _Nullable)(const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull), BOOL) acquireFunction;
	//	[NullAllowed, Export ("acquireFunction", ArgumentSemantic.Assign)]
	//	unsafe Func<void*, System.Func<void*, nuint>*, bool, void*>* AcquireFunction { get; set; }

	//	// @property BOOL usesStrongWriteBarrier __attribute__((availability(tvos, introduced=9.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(ios, introduced=2.0, deprecated=10.0))) __attribute__((availability(macos, introduced=10.5, deprecated=10.12)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Garbage collection no longer supported")]
	//	[Deprecated (PlatformName.TvOS, 10, 0, message: "Garbage collection no longer supported")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Garbage collection no longer supported")]
	//	[Deprecated (PlatformName.WatchOS, 3, 0, message: "Garbage collection no longer supported")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Garbage collection no longer supported")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Garbage collection no longer supported")]
	//	[Introduced (PlatformName.MacOSX, 10, 5, message: "Garbage collection no longer supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 12, message: "Garbage collection no longer supported")]
	//	[Export ("usesStrongWriteBarrier")]
	//	bool UsesStrongWriteBarrier { get; set; }

	//	// @property BOOL usesWeakReadAndWriteBarriers __attribute__((availability(tvos, introduced=9.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(ios, introduced=2.0, deprecated=10.0))) __attribute__((availability(macos, introduced=10.5, deprecated=10.12)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Garbage collection no longer supported")]
	//	[Deprecated (PlatformName.TvOS, 10, 0, message: "Garbage collection no longer supported")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Garbage collection no longer supported")]
	//	[Deprecated (PlatformName.WatchOS, 3, 0, message: "Garbage collection no longer supported")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Garbage collection no longer supported")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Garbage collection no longer supported")]
	//	[Introduced (PlatformName.MacOSX, 10, 5, message: "Garbage collection no longer supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 12, message: "Garbage collection no longer supported")]
	//	[Export ("usesWeakReadAndWriteBarriers")]
	//	bool UsesWeakReadAndWriteBarriers { get; set; }
	//}

	//// audit-objc-generics: @interface NSHashTable<ObjectType> : NSObject <NSCopying, NSSecureCoding, NSFastEnumeration>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSHashTable : INSCopying, INSSecureCoding, INSFastEnumeration
	//{
	//	// -(instancetype _Nonnull)initWithOptions:(NSPointerFunctionsOptions)options capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
	//	[Export ("initWithOptions:capacity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSPointerFunctionsOptions options, nuint initialCapacity);

	//	// -(instancetype _Nonnull)initWithPointerFunctions:(NSPointerFunctions * _Nonnull)functions capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
	//	[Export ("initWithPointerFunctions:capacity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSPointerFunctions functions, nuint initialCapacity);

	//	// +(NSHashTable<ObjectType> * _Nonnull)hashTableWithOptions:(NSPointerFunctionsOptions)options;
	//	[Static]
	//	[Export ("hashTableWithOptions:")]
	//	NSHashTable<NSObject> HashTableWithOptions (NSPointerFunctionsOptions options);

	//	// +(id _Nonnull)hashTableWithWeakObjects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5, deprecated=10.8)));
	//	[Introduced (PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
	//	[NoWatch, NoTV, NoiOS]
	//	[Static]
	//	[Export ("hashTableWithWeakObjects")]
	//	[Verify (MethodToProperty)]
	//	NSObject HashTableWithWeakObjects { get; }

	//	// +(NSHashTable<ObjectType> * _Nonnull)weakObjectsHashTable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Static]
	//	[Export ("weakObjectsHashTable")]
	//	[Verify (MethodToProperty)]
	//	NSHashTable<NSObject> WeakObjectsHashTable { get; }

	//	// @property (readonly, copy) NSPointerFunctions * _Nonnull pointerFunctions;
	//	[Export ("pointerFunctions", ArgumentSemantic.Copy)]
	//	NSPointerFunctions PointerFunctions { get; }

	//	// @property (readonly) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// -(ObjectType _Nullable)member:(ObjectType _Nullable)object;
	//	[Export ("member:")]
	//	[return: NullAllowed]
	//	NSObject Member ([NullAllowed] NSObject @object);

	//	// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
	//	[Export ("objectEnumerator")]
	//	[Verify (MethodToProperty)]
	//	NSEnumerator<NSObject> ObjectEnumerator { get; }

	//	// -(void)addObject:(ObjectType _Nullable)object;
	//	[Export ("addObject:")]
	//	void AddObject ([NullAllowed] NSObject @object);

	//	// -(void)removeObject:(ObjectType _Nullable)object;
	//	[Export ("removeObject:")]
	//	void RemoveObject ([NullAllowed] NSObject @object);

	//	// -(void)removeAllObjects;
	//	[Export ("removeAllObjects")]
	//	void RemoveAllObjects ();

	//	// @property (readonly, copy) NSArray<ObjectType> * _Nonnull allObjects;
	//	[Export ("allObjects", ArgumentSemantic.Copy)]
	//	NSObject[] AllObjects { get; }

	//	// @property (readonly, nonatomic) ObjectType _Nullable anyObject;
	//	[NullAllowed, Export ("anyObject")]
	//	NSObject AnyObject { get; }

	//	// -(BOOL)containsObject:(ObjectType _Nullable)anObject;
	//	[Export ("containsObject:")]
	//	bool ContainsObject ([NullAllowed] NSObject anObject);

	//	// -(BOOL)intersectsHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
	//	[Export ("intersectsHashTable:")]
	//	bool IntersectsHashTable (NSHashTable<NSObject> other);

	//	// -(BOOL)isEqualToHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
	//	[Export ("isEqualToHashTable:")]
	//	bool IsEqualToHashTable (NSHashTable<NSObject> other);

	//	// -(BOOL)isSubsetOfHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
	//	[Export ("isSubsetOfHashTable:")]
	//	bool IsSubsetOfHashTable (NSHashTable<NSObject> other);

	//	// -(void)intersectHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
	//	[Export ("intersectHashTable:")]
	//	void IntersectHashTable (NSHashTable<NSObject> other);

	//	// -(void)unionHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
	//	[Export ("unionHashTable:")]
	//	void UnionHashTable (NSHashTable<NSObject> other);

	//	// -(void)minusHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
	//	[Export ("minusHashTable:")]
	//	void MinusHashTable (NSHashTable<NSObject> other);

	//	// @property (readonly, copy) NSSet<ObjectType> * _Nonnull setRepresentation;
	//	[Export ("setRepresentation", ArgumentSemantic.Copy)]
	//	NSSet<NSObject> SetRepresentation { get; }
	//}

	//// @interface NSHTTPCookie : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSHTTPCookie
	//{
	//	// -(instancetype _Nullable)initWithProperties:(NSDictionary<NSHTTPCookiePropertyKey,id> * _Nonnull)properties;
	//	[Export ("initWithProperties:")]
	//	IntPtr Constructor (NSDictionary<NSString, NSObject> properties);

	//	// +(NSHTTPCookie * _Nullable)cookieWithProperties:(NSDictionary<NSHTTPCookiePropertyKey,id> * _Nonnull)properties;
	//	[Static]
	//	[Export ("cookieWithProperties:")]
	//	[return: NullAllowed]
	//	NSHttpCookie CookieWithProperties (NSDictionary<NSString, NSObject> properties);

	//	// +(NSDictionary<NSString *,NSString *> * _Nonnull)requestHeaderFieldsWithCookies:(NSArray<NSHTTPCookie *> * _Nonnull)cookies;
	//	[Static]
	//	[Export ("requestHeaderFieldsWithCookies:")]
	//	NSDictionary<NSString, NSString> RequestHeaderFieldsWithCookies (NSHttpCookie[] cookies);

	//	// +(NSArray<NSHTTPCookie *> * _Nonnull)cookiesWithResponseHeaderFields:(NSDictionary<NSString *,NSString *> * _Nonnull)headerFields forURL:(NSURL * _Nonnull)URL;
	//	[Static]
	//	[Export ("cookiesWithResponseHeaderFields:forURL:")]
	//	NSHttpCookie[] CookiesWithResponseHeaderFields (NSDictionary<NSString, NSString> headerFields, NSUrl URL);

	//	// @property (readonly, copy) NSDictionary<NSHTTPCookiePropertyKey,id> * _Nullable properties;
	//	[NullAllowed, Export ("properties", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> Properties { get; }

	//	// @property (readonly) NSUInteger version;
	//	[Export ("version")]
	//	nuint Version { get; }

	//	// @property (readonly, copy) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, copy) NSString * _Nonnull value;
	//	[Export ("value")]
	//	string Value { get; }

	//	// @property (readonly, copy) NSDate * _Nullable expiresDate;
	//	[NullAllowed, Export ("expiresDate", ArgumentSemantic.Copy)]
	//	NSDate ExpiresDate { get; }

	//	// @property (readonly, getter = isSessionOnly) BOOL sessionOnly;
	//	[Export ("sessionOnly")]
	//	bool SessionOnly { [Bind ("isSessionOnly")] get; }

	//	// @property (readonly, copy) NSString * _Nonnull domain;
	//	[Export ("domain")]
	//	string Domain { get; }

	//	// @property (readonly, copy) NSString * _Nonnull path;
	//	[Export ("path")]
	//	string Path { get; }

	//	// @property (readonly, getter = isSecure) BOOL secure;
	//	[Export ("secure")]
	//	bool Secure { [Bind ("isSecure")] get; }

	//	// @property (readonly, getter = isHTTPOnly) BOOL HTTPOnly;
	//	[Export ("HTTPOnly")]
	//	bool HTTPOnly { [Bind ("isHTTPOnly")] get; }

	//	// @property (readonly, copy) NSString * _Nullable comment;
	//	[NullAllowed, Export ("comment")]
	//	string Comment { get; }

	//	// @property (readonly, copy) NSURL * _Nullable commentURL;
	//	[NullAllowed, Export ("commentURL", ArgumentSemantic.Copy)]
	//	NSUrl CommentURL { get; }

	//	// @property (readonly, copy) NSArray<NSNumber *> * _Nullable portList;
	//	[NullAllowed, Export ("portList", ArgumentSemantic.Copy)]
	//	NSNumber[] PortList { get; }
	//}

	//// @interface NSHTTPCookieStorage : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSHTTPCookieStorage
	//{
	//	// @property (readonly, strong, class) NSHTTPCookieStorage * _Nonnull sharedHTTPCookieStorage;
	//	[Static]
	//	[Export ("sharedHTTPCookieStorage", ArgumentSemantic.Strong)]
	//	NSHttpCookieStorage SharedHTTPCookieStorage { get; }

	//	// +(NSHTTPCookieStorage * _Nonnull)sharedCookieStorageForGroupContainerIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Static]
	//	[Export ("sharedCookieStorageForGroupContainerIdentifier:")]
	//	NSHttpCookieStorage SharedCookieStorageForGroupContainerIdentifier (string identifier);

	//	// @property (readonly, copy) NSArray<NSHTTPCookie *> * _Nullable cookies;
	//	[NullAllowed, Export ("cookies", ArgumentSemantic.Copy)]
	//	NSHttpCookie[] Cookies { get; }

	//	// -(void)setCookie:(NSHTTPCookie * _Nonnull)cookie;
	//	[Export ("setCookie:")]
	//	void SetCookie (NSHttpCookie cookie);

	//	// -(void)deleteCookie:(NSHTTPCookie * _Nonnull)cookie;
	//	[Export ("deleteCookie:")]
	//	void DeleteCookie (NSHttpCookie cookie);

	//	// -(void)removeCookiesSinceDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("removeCookiesSinceDate:")]
	//	void RemoveCookiesSinceDate (NSDate date);

	//	// -(NSArray<NSHTTPCookie *> * _Nullable)cookiesForURL:(NSURL * _Nonnull)URL;
	//	[Export ("cookiesForURL:")]
	//	[return: NullAllowed]
	//	NSHttpCookie[] CookiesForURL (NSUrl URL);

	//	// -(void)setCookies:(NSArray<NSHTTPCookie *> * _Nonnull)cookies forURL:(NSURL * _Nullable)URL mainDocumentURL:(NSURL * _Nullable)mainDocumentURL;
	//	[Export ("setCookies:forURL:mainDocumentURL:")]
	//	void SetCookies (NSHttpCookie[] cookies, [NullAllowed] NSUrl URL, [NullAllowed] NSUrl mainDocumentURL);

	//	// @property NSHTTPCookieAcceptPolicy cookieAcceptPolicy;
	//	[Export ("cookieAcceptPolicy", ArgumentSemantic.Assign)]
	//	NSHTTPCookieAcceptPolicy CookieAcceptPolicy { get; set; }

	//	// -(NSArray<NSHTTPCookie *> * _Nonnull)sortedCookiesUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortOrder __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("sortedCookiesUsingDescriptors:")]
	//	NSHttpCookie[] SortedCookiesUsingDescriptors (NSSortDescriptor[] sortOrder);
	//}

	//// @interface NSURLSessionTaskAdditions (NSHTTPCookieStorage)
	//[Category]
	//[BaseType (typeof(NSHttpCookieStorage))]
	//interface NSHTTPCookieStorage_NSURLSessionTaskAdditions
	//{
	//	// -(void)storeCookies:(NSArray<NSHTTPCookie *> * _Nonnull)cookies forTask:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("storeCookies:forTask:")]
	//	void StoreCookies (NSHttpCookie[] cookies, NSUrlSessionTask task);

	//	// -(void)getCookiesForTask:(NSURLSessionTask * _Nonnull)task completionHandler:(void (^ _Nonnull)(NSArray<NSHTTPCookie *> * _Nullable))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("getCookiesForTask:completionHandler:")]
	//	void GetCookiesForTask (NSUrlSessionTask task, Action<NSArray<NSHTTPCookie>> completionHandler);
	//}

	//// @interface NSIndexPath : NSObject <NSCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSIndexPath : INSCopying, INSSecureCoding
	//{
	//	// +(instancetype _Nonnull)indexPathWithIndex:(NSUInteger)index;
	//	[Static]
	//	[Export ("indexPathWithIndex:")]
	//	NSIndexPath IndexPathWithIndex (nuint index);

	//	// +(instancetype _Nonnull)indexPathWithIndexes:(const NSUInteger * _Nullable)indexes length:(NSUInteger)length;
	//	[Static]
	//	[Export ("indexPathWithIndexes:length:")]
	//	NSIndexPath IndexPathWithIndexes ([NullAllowed] nuint[] indexes, nuint length);

	//	// -(instancetype _Nonnull)initWithIndexes:(const NSUInteger * _Nullable)indexes length:(NSUInteger)length __attribute__((objc_designated_initializer));
	//	[Export ("initWithIndexes:length:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] nuint[] indexes, nuint length);

	//	// -(instancetype _Nonnull)initWithIndex:(NSUInteger)index;
	//	[Export ("initWithIndex:")]
	//	IntPtr Constructor (nuint index);

	//	// -(NSIndexPath * _Nonnull)indexPathByAddingIndex:(NSUInteger)index;
	//	[Export ("indexPathByAddingIndex:")]
	//	NSIndexPath IndexPathByAddingIndex (nuint index);

	//	// -(NSIndexPath * _Nonnull)indexPathByRemovingLastIndex;
	//	[Export ("indexPathByRemovingLastIndex")]
	//	[Verify (MethodToProperty)]
	//	NSIndexPath IndexPathByRemovingLastIndex { get; }

	//	// -(NSUInteger)indexAtPosition:(NSUInteger)position;
	//	[Export ("indexAtPosition:")]
	//	nuint IndexAtPosition (nuint position);

	//	// @property (readonly) NSUInteger length;
	//	[Export ("length")]
	//	nuint Length { get; }

	//	// -(void)getIndexes:(NSUInteger * _Nonnull)indexes range:(NSRange)positionRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("getIndexes:range:")]
	//	unsafe void GetIndexes (nuint* indexes, NSRange positionRange);

	//	// -(NSComparisonResult)compare:(NSIndexPath * _Nonnull)otherObject;
	//	[Export ("compare:")]
	//	NSComparisonResult Compare (NSIndexPath otherObject);
	//}

	//// @interface NSDeprecated (NSIndexPath)
	//[Category]
	//[BaseType (typeof(NSIndexPath))]
	//interface NSIndexPath_NSDeprecated
	//{
	//	// -(void)getIndexes:(NSUInteger * _Nonnull)indexes;
	//	[Export ("getIndexes:")]
	//	unsafe void GetIndexes (nuint* indexes);
	//}

	//// @interface NSIndexSet : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSIndexSet : INSCopying, INSMutableCopying, INSSecureCoding
	//{
	//	// +(instancetype _Nonnull)indexSet;
	//	[Static]
	//	[Export ("indexSet")]
	//	NSIndexSet IndexSet ();

	//	// +(instancetype _Nonnull)indexSetWithIndex:(NSUInteger)value;
	//	[Static]
	//	[Export ("indexSetWithIndex:")]
	//	NSIndexSet IndexSetWithIndex (nuint value);

	//	// +(instancetype _Nonnull)indexSetWithIndexesInRange:(NSRange)range;
	//	[Static]
	//	[Export ("indexSetWithIndexesInRange:")]
	//	NSIndexSet IndexSetWithIndexesInRange (NSRange range);

	//	// -(instancetype _Nonnull)initWithIndexesInRange:(NSRange)range __attribute__((objc_designated_initializer));
	//	[Export ("initWithIndexesInRange:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSRange range);

	//	// -(instancetype _Nonnull)initWithIndexSet:(NSIndexSet * _Nonnull)indexSet __attribute__((objc_designated_initializer));
	//	[Export ("initWithIndexSet:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSIndexSet indexSet);

	//	// -(instancetype _Nonnull)initWithIndex:(NSUInteger)value;
	//	[Export ("initWithIndex:")]
	//	IntPtr Constructor (nuint value);

	//	// -(BOOL)isEqualToIndexSet:(NSIndexSet * _Nonnull)indexSet;
	//	[Export ("isEqualToIndexSet:")]
	//	bool IsEqualToIndexSet (NSIndexSet indexSet);

	//	// @property (readonly) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// @property (readonly) NSUInteger firstIndex;
	//	[Export ("firstIndex")]
	//	nuint FirstIndex { get; }

	//	// @property (readonly) NSUInteger lastIndex;
	//	[Export ("lastIndex")]
	//	nuint LastIndex { get; }

	//	// -(NSUInteger)indexGreaterThanIndex:(NSUInteger)value;
	//	[Export ("indexGreaterThanIndex:")]
	//	nuint IndexGreaterThanIndex (nuint value);

	//	// -(NSUInteger)indexLessThanIndex:(NSUInteger)value;
	//	[Export ("indexLessThanIndex:")]
	//	nuint IndexLessThanIndex (nuint value);

	//	// -(NSUInteger)indexGreaterThanOrEqualToIndex:(NSUInteger)value;
	//	[Export ("indexGreaterThanOrEqualToIndex:")]
	//	nuint IndexGreaterThanOrEqualToIndex (nuint value);

	//	// -(NSUInteger)indexLessThanOrEqualToIndex:(NSUInteger)value;
	//	[Export ("indexLessThanOrEqualToIndex:")]
	//	nuint IndexLessThanOrEqualToIndex (nuint value);

	//	// -(NSUInteger)getIndexes:(NSUInteger * _Nonnull)indexBuffer maxCount:(NSUInteger)bufferSize inIndexRange:(NSRangePointer _Nullable)range;
	//	[Export ("getIndexes:maxCount:inIndexRange:")]
	//	unsafe nuint GetIndexes (nuint* indexBuffer, nuint bufferSize, [NullAllowed] NSRangePointer* range);

	//	// -(NSUInteger)countOfIndexesInRange:(NSRange)range __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("countOfIndexesInRange:")]
	//	nuint CountOfIndexesInRange (NSRange range);

	//	// -(BOOL)containsIndex:(NSUInteger)value;
	//	[Export ("containsIndex:")]
	//	bool ContainsIndex (nuint value);

	//	// -(BOOL)containsIndexesInRange:(NSRange)range;
	//	[Export ("containsIndexesInRange:")]
	//	bool ContainsIndexesInRange (NSRange range);

	//	// -(BOOL)containsIndexes:(NSIndexSet * _Nonnull)indexSet;
	//	[Export ("containsIndexes:")]
	//	bool ContainsIndexes (NSIndexSet indexSet);

	//	// -(BOOL)intersectsIndexesInRange:(NSRange)range;
	//	[Export ("intersectsIndexesInRange:")]
	//	bool IntersectsIndexesInRange (NSRange range);

	//	// -(void)enumerateIndexesUsingBlock:(void (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateIndexesUsingBlock:")]
	//	unsafe void EnumerateIndexesUsingBlock (Action<nuint, bool*> block);

	//	// -(void)enumerateIndexesWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateIndexesWithOptions:usingBlock:")]
	//	unsafe void EnumerateIndexesWithOptions (NSEnumerationOptions opts, Action<nuint, bool*> block);

	//	// -(void)enumerateIndexesInRange:(NSRange)range options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("enumerateIndexesInRange:options:usingBlock:")]
	//	unsafe void EnumerateIndexesInRange (NSRange range, NSEnumerationOptions opts, Action<nuint, bool*> block);

	//	// -(NSUInteger)indexPassingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexPassingTest:")]
	//	unsafe nuint IndexPassingTest (Func<nuint, bool*, bool> predicate);

	//	// -(NSUInteger)indexWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexWithOptions:passingTest:")]
	//	unsafe nuint IndexWithOptions (NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

	//	// -(NSUInteger)indexInRange:(NSRange)range options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexInRange:options:passingTest:")]
	//	unsafe nuint IndexInRange (NSRange range, NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

	//	// -(NSIndexSet * _Nonnull)indexesPassingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexesPassingTest:")]
	//	unsafe NSIndexSet IndexesPassingTest (Func<nuint, bool*, bool> predicate);

	//	// -(NSIndexSet * _Nonnull)indexesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexesWithOptions:passingTest:")]
	//	unsafe NSIndexSet IndexesWithOptions (NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

	//	// -(NSIndexSet * _Nonnull)indexesInRange:(NSRange)range options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("indexesInRange:options:passingTest:")]
	//	unsafe NSIndexSet IndexesInRange (NSRange range, NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

	//	// -(void)enumerateRangesUsingBlock:(void (^ _Nonnull)(NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("enumerateRangesUsingBlock:")]
	//	unsafe void EnumerateRangesUsingBlock (Action<NSRange, bool*> block);

	//	// -(void)enumerateRangesWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("enumerateRangesWithOptions:usingBlock:")]
	//	unsafe void EnumerateRangesWithOptions (NSEnumerationOptions opts, Action<NSRange, bool*> block);

	//	// -(void)enumerateRangesInRange:(NSRange)range options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("enumerateRangesInRange:options:usingBlock:")]
	//	unsafe void EnumerateRangesInRange (NSRange range, NSEnumerationOptions opts, Action<NSRange, bool*> block);
	//}

	//// @interface NSMutableIndexSet : NSIndexSet
	//[BaseType (typeof(NSIndexSet))]
	//interface NSMutableIndexSet
	//{
	//	// -(void)addIndexes:(NSIndexSet * _Nonnull)indexSet;
	//	[Export ("addIndexes:")]
	//	void AddIndexes (NSIndexSet indexSet);

	//	// -(void)removeIndexes:(NSIndexSet * _Nonnull)indexSet;
	//	[Export ("removeIndexes:")]
	//	void RemoveIndexes (NSIndexSet indexSet);

	//	// -(void)removeAllIndexes;
	//	[Export ("removeAllIndexes")]
	//	void RemoveAllIndexes ();

	//	// -(void)addIndex:(NSUInteger)value;
	//	[Export ("addIndex:")]
	//	void AddIndex (nuint value);

	//	// -(void)removeIndex:(NSUInteger)value;
	//	[Export ("removeIndex:")]
	//	void RemoveIndex (nuint value);

	//	// -(void)addIndexesInRange:(NSRange)range;
	//	[Export ("addIndexesInRange:")]
	//	void AddIndexesInRange (NSRange range);

	//	// -(void)removeIndexesInRange:(NSRange)range;
	//	[Export ("removeIndexesInRange:")]
	//	void RemoveIndexesInRange (NSRange range);

	//	// -(void)shiftIndexesStartingAtIndex:(NSUInteger)index by:(NSInteger)delta;
	//	[Export ("shiftIndexesStartingAtIndex:by:")]
	//	void ShiftIndexesStartingAtIndex (nuint index, nint delta);
	//}

	//// @interface NSInvocation : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSInvocation
	//{
	//	// +(NSInvocation * _Nonnull)invocationWithMethodSignature:(NSMethodSignature * _Nonnull)sig;
	//	[Static]
	//	[Export ("invocationWithMethodSignature:")]
	//	NSInvocation InvocationWithMethodSignature (NSMethodSignature sig);

	//	// @property (readonly, retain) NSMethodSignature * _Nonnull methodSignature;
	//	[Export ("methodSignature", ArgumentSemantic.Retain)]
	//	NSMethodSignature MethodSignature { get; }

	//	// -(void)retainArguments;
	//	[Export ("retainArguments")]
	//	void RetainArguments ();

	//	// @property (readonly) BOOL argumentsRetained;
	//	[Export ("argumentsRetained")]
	//	bool ArgumentsRetained { get; }

	//	// @property (assign) id _Nullable target;
	//	[NullAllowed, Export ("target", ArgumentSemantic.Assign)]
	//	NSObject Target { get; set; }

	//	// @property SEL _Nonnull selector;
	//	[Export ("selector", ArgumentSemantic.Assign)]
	//	Selector Selector { get; set; }

	//	// -(void)getReturnValue:(void * _Nonnull)retLoc;
	//	[Export ("getReturnValue:")]
	//	unsafe void GetReturnValue (void* retLoc);

	//	// -(void)setReturnValue:(void * _Nonnull)retLoc;
	//	[Export ("setReturnValue:")]
	//	unsafe void SetReturnValue (void* retLoc);

	//	// -(void)getArgument:(void * _Nonnull)argumentLocation atIndex:(NSInteger)idx;
	//	[Export ("getArgument:atIndex:")]
	//	unsafe void GetArgument (void* argumentLocation, nint idx);

	//	// -(void)setArgument:(void * _Nonnull)argumentLocation atIndex:(NSInteger)idx;
	//	[Export ("setArgument:atIndex:")]
	//	unsafe void SetArgument (void* argumentLocation, nint idx);

	//	// -(void)invoke;
	//	[Export ("invoke")]
	//	void Invoke ();

	//	// -(void)invokeWithTarget:(id _Nonnull)target;
	//	[Export ("invokeWithTarget:")]
	//	void InvokeWithTarget (NSObject target);
	//}

	//// @interface NSJSONSerialization : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSJSONSerialization
	//{
	//	// +(BOOL)isValidJSONObject:(id _Nonnull)obj;
	//	[Static]
	//	[Export ("isValidJSONObject:")]
	//	bool IsValidJSONObject (NSObject obj);

	//	// +(NSData * _Nullable)dataWithJSONObject:(id _Nonnull)obj options:(NSJSONWritingOptions)opt error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("dataWithJSONObject:options:error:")]
	//	[return: NullAllowed]
	//	NSData DataWithJSONObject (NSObject obj, NSJSONWritingOptions opt, [NullAllowed] out NSError error);

	//	// +(id _Nullable)JSONObjectWithData:(NSData * _Nonnull)data options:(NSJSONReadingOptions)opt error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("JSONObjectWithData:options:error:")]
	//	[return: NullAllowed]
	//	NSObject JSONObjectWithData (NSData data, NSJSONReadingOptions opt, [NullAllowed] out NSError error);

	//	// +(NSInteger)writeJSONObject:(id _Nonnull)obj toStream:(NSOutputStream * _Nonnull)stream options:(NSJSONWritingOptions)opt error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("writeJSONObject:toStream:options:error:")]
	//	nint WriteJSONObject (NSObject obj, NSOutputStream stream, NSJSONWritingOptions opt, [NullAllowed] out NSError error);

	//	// +(id _Nullable)JSONObjectWithStream:(NSInputStream * _Nonnull)stream options:(NSJSONReadingOptions)opt error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("JSONObjectWithStream:options:error:")]
	//	[return: NullAllowed]
	//	NSObject JSONObjectWithStream (NSInputStream stream, NSJSONReadingOptions opt, [NullAllowed] out NSError error);
	//}

	//// audit-objc-generics: @interface NSOrderedSet<__covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSOrderedSet : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
	//{
	//	// @property (readonly) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// -(ObjectType _Nonnull)objectAtIndex:(NSUInteger)idx;
	//	[Export ("objectAtIndex:")]
	//	NSObject ObjectAtIndex (nuint idx);

	//	// -(NSUInteger)indexOfObject:(ObjectType _Nonnull)object;
	//	[Export ("indexOfObject:")]
	//	nuint IndexOfObject (NSObject @object);

	//	// -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
	//	[Export ("initWithObjects:count:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSObject[] objects, nuint cnt);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSExtendedOrderedSet (NSOrderedSet)
	//[Category]
	//[BaseType (typeof(NSOrderedSet))]
	//interface NSOrderedSet_NSExtendedOrderedSet
	//{
	//	// -(void)getObjects:(ObjectType  _Nonnull * _Nullable)objects range:(NSRange)range;
	//	[Export ("getObjects:range:")]
	//	void GetObjects ([NullAllowed] NSObject[] objects, NSRange range);

	//	// -(NSArray<ObjectType> * _Nonnull)objectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
	//	[Export ("objectsAtIndexes:")]
	//	NSObject[] ObjectsAtIndexes (NSIndexSet indexes);

	//	// @property (readonly, nonatomic) ObjectType _Nullable firstObject;
	//	[NullAllowed, Export ("firstObject")]
	//	NSObject FirstObject { get; }

	//	// @property (readonly, nonatomic) ObjectType _Nullable lastObject;
	//	[NullAllowed, Export ("lastObject")]
	//	NSObject LastObject { get; }

	//	// -(BOOL)isEqualToOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
	//	[Export ("isEqualToOrderedSet:")]
	//	bool IsEqualToOrderedSet (NSOrderedSet<NSObject> other);

	//	// -(BOOL)containsObject:(ObjectType _Nonnull)object;
	//	[Export ("containsObject:")]
	//	bool ContainsObject (NSObject @object);

	//	// -(BOOL)intersectsOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
	//	[Export ("intersectsOrderedSet:")]
	//	bool IntersectsOrderedSet (NSOrderedSet<NSObject> other);

	//	// -(BOOL)intersectsSet:(NSSet<ObjectType> * _Nonnull)set;
	//	[Export ("intersectsSet:")]
	//	bool IntersectsSet (NSSet<NSObject> set);

	//	// -(BOOL)isSubsetOfOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
	//	[Export ("isSubsetOfOrderedSet:")]
	//	bool IsSubsetOfOrderedSet (NSOrderedSet<NSObject> other);

	//	// -(BOOL)isSubsetOfSet:(NSSet<ObjectType> * _Nonnull)set;
	//	[Export ("isSubsetOfSet:")]
	//	bool IsSubsetOfSet (NSSet<NSObject> set);

	//	// -(ObjectType _Nonnull)objectAtIndexedSubscript:(NSUInteger)idx __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("objectAtIndexedSubscript:")]
	//	NSObject ObjectAtIndexedSubscript (nuint idx);

	//	// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
	//	[Export ("objectEnumerator")]
	//	[Verify (MethodToProperty)]
	//	NSEnumerator<NSObject> ObjectEnumerator { get; }

	//	// -(NSEnumerator<ObjectType> * _Nonnull)reverseObjectEnumerator;
	//	[Export ("reverseObjectEnumerator")]
	//	[Verify (MethodToProperty)]
	//	NSEnumerator<NSObject> ReverseObjectEnumerator { get; }

	//	// @property (readonly, copy) NSOrderedSet<ObjectType> * _Nonnull reversedOrderedSet;
	//	[Export ("reversedOrderedSet", ArgumentSemantic.Copy)]
	//	NSOrderedSet<NSObject> ReversedOrderedSet { get; }

	//	// @property (readonly, strong) NSArray<ObjectType> * _Nonnull array;
	//	[Export ("array", ArgumentSemantic.Strong)]
	//	NSObject[] Array { get; }

	//	// @property (readonly, strong) NSSet<ObjectType> * _Nonnull set;
	//	[Export ("set", ArgumentSemantic.Strong)]
	//	NSSet<NSObject> Set { get; }

	//	// -(void)enumerateObjectsUsingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block;
	//	[Export ("enumerateObjectsUsingBlock:")]
	//	unsafe void EnumerateObjectsUsingBlock (Action<NSObject, nuint, bool*> block);

	//	// -(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block;
	//	[Export ("enumerateObjectsWithOptions:usingBlock:")]
	//	unsafe void EnumerateObjectsWithOptions (NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

	//	// -(void)enumerateObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block;
	//	[Export ("enumerateObjectsAtIndexes:options:usingBlock:")]
	//	unsafe void EnumerateObjectsAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

	//	// -(NSUInteger)indexOfObjectPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
	//	[Export ("indexOfObjectPassingTest:")]
	//	unsafe nuint IndexOfObjectPassingTest (Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSUInteger)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
	//	[Export ("indexOfObjectWithOptions:passingTest:")]
	//	unsafe nuint IndexOfObjectWithOptions (NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSUInteger)indexOfObjectAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
	//	[Export ("indexOfObjectAtIndexes:options:passingTest:")]
	//	unsafe nuint IndexOfObjectAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSIndexSet * _Nonnull)indexesOfObjectsPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
	//	[Export ("indexesOfObjectsPassingTest:")]
	//	unsafe NSIndexSet IndexesOfObjectsPassingTest (Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSIndexSet * _Nonnull)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
	//	[Export ("indexesOfObjectsWithOptions:passingTest:")]
	//	unsafe NSIndexSet IndexesOfObjectsWithOptions (NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSIndexSet * _Nonnull)indexesOfObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
	//	[Export ("indexesOfObjectsAtIndexes:options:passingTest:")]
	//	unsafe NSIndexSet IndexesOfObjectsAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

	//	// -(NSUInteger)indexOfObject:(ObjectType _Nonnull)object inSortedRange:(NSRange)range options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator _Nonnull)cmp;
	//	[Export ("indexOfObject:inSortedRange:options:usingComparator:")]
	//	nuint IndexOfObject (NSObject @object, NSRange range, NSBinarySearchingOptions opts, NSComparator cmp);

	//	// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingComparator:(NSComparator _Nonnull)cmptr;
	//	[Export ("sortedArrayUsingComparator:")]
	//	NSObject[] SortedArrayUsingComparator (NSComparator cmptr);

	//	// -(NSArray<ObjectType> * _Nonnull)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr;
	//	[Export ("sortedArrayWithOptions:usingComparator:")]
	//	NSObject[] SortedArrayWithOptions (NSSortOptions opts, NSComparator cmptr);

	//	// @property (readonly, copy) NSString * _Nonnull description;
	//	[Export ("description")]
	//	string Description { get; }

	//	// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
	//	[Export ("descriptionWithLocale:")]
	//	string DescriptionWithLocale ([NullAllowed] NSObject locale);

	//	// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale indent:(NSUInteger)level;
	//	[Export ("descriptionWithLocale:indent:")]
	//	string DescriptionWithLocale ([NullAllowed] NSObject locale, nuint level);
	//}

	//// @interface NSOrderedSetCreation (NSOrderedSet)
	//[Category]
	//[BaseType (typeof(NSOrderedSet))]
	//interface NSOrderedSet_NSOrderedSetCreation
	//{
	//	// +(instancetype _Nonnull)orderedSet;
	//	[Static]
	//	[Export ("orderedSet")]
	//	NSOrderedSet OrderedSet ();

	//	// +(instancetype _Nonnull)orderedSetWithObject:(ObjectType _Nonnull)object;
	//	[Static]
	//	[Export ("orderedSetWithObject:")]
	//	NSOrderedSet OrderedSetWithObject (NSObject @object);

	//	// +(instancetype _Nonnull)orderedSetWithObjects:(ObjectType  _Nonnull const * _Nonnull)objects count:(NSUInteger)cnt;
	//	[Static]
	//	[Export ("orderedSetWithObjects:count:")]
	//	NSOrderedSet OrderedSetWithObjects (NSObject[] objects, nuint cnt);

	//	// +(instancetype _Nonnull)orderedSetWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
	//	[Static, Internal]
	//	[Export ("orderedSetWithObjects:", IsVariadic = true)]
	//	NSOrderedSet OrderedSetWithObjects (NSObject firstObj, IntPtr varArgs);

	//	// +(instancetype _Nonnull)orderedSetWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set;
	//	[Static]
	//	[Export ("orderedSetWithOrderedSet:")]
	//	NSOrderedSet OrderedSetWithOrderedSet (NSOrderedSet<NSObject> set);

	//	// +(instancetype _Nonnull)orderedSetWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set range:(NSRange)range copyItems:(BOOL)flag;
	//	[Static]
	//	[Export ("orderedSetWithOrderedSet:range:copyItems:")]
	//	NSOrderedSet OrderedSetWithOrderedSet (NSOrderedSet<NSObject> set, NSRange range, bool flag);

	//	// +(instancetype _Nonnull)orderedSetWithArray:(NSArray<ObjectType> * _Nonnull)array;
	//	[Static]
	//	[Export ("orderedSetWithArray:")]
	//	NSOrderedSet OrderedSetWithArray (NSObject[] array);

	//	// +(instancetype _Nonnull)orderedSetWithArray:(NSArray<ObjectType> * _Nonnull)array range:(NSRange)range copyItems:(BOOL)flag;
	//	[Static]
	//	[Export ("orderedSetWithArray:range:copyItems:")]
	//	NSOrderedSet OrderedSetWithArray (NSObject[] array, NSRange range, bool flag);

	//	// +(instancetype _Nonnull)orderedSetWithSet:(NSSet<ObjectType> * _Nonnull)set;
	//	[Static]
	//	[Export ("orderedSetWithSet:")]
	//	NSOrderedSet OrderedSetWithSet (NSSet<NSObject> set);

	//	// +(instancetype _Nonnull)orderedSetWithSet:(NSSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
	//	[Static]
	//	[Export ("orderedSetWithSet:copyItems:")]
	//	NSOrderedSet OrderedSetWithSet (NSSet<NSObject> set, bool flag);

	//	// -(instancetype _Nonnull)initWithObject:(ObjectType _Nonnull)object;
	//	[Export ("initWithObject:")]
	//	IntPtr Constructor (NSObject @object);

	//	// -(instancetype _Nonnull)initWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
	//	[Internal]
	//	[Export ("initWithObjects:", IsVariadic = true)]
	//	IntPtr Constructor (NSObject firstObj, IntPtr varArgs);

	//	// -(instancetype _Nonnull)initWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set;
	//	[Export ("initWithOrderedSet:")]
	//	IntPtr Constructor (NSOrderedSet<NSObject> set);

	//	// -(instancetype _Nonnull)initWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
	//	[Export ("initWithOrderedSet:copyItems:")]
	//	IntPtr Constructor (NSOrderedSet<NSObject> set, bool flag);

	//	// -(instancetype _Nonnull)initWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set range:(NSRange)range copyItems:(BOOL)flag;
	//	[Export ("initWithOrderedSet:range:copyItems:")]
	//	IntPtr Constructor (NSOrderedSet<NSObject> set, NSRange range, bool flag);

	//	// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
	//	[Export ("initWithArray:")]
	//	IntPtr Constructor (NSObject[] array);

	//	// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
	//	[Export ("initWithArray:copyItems:")]
	//	IntPtr Constructor (NSObject[] set, bool flag);

	//	// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)set range:(NSRange)range copyItems:(BOOL)flag;
	//	[Export ("initWithArray:range:copyItems:")]
	//	IntPtr Constructor (NSObject[] set, NSRange range, bool flag);

	//	// -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set;
	//	[Export ("initWithSet:")]
	//	IntPtr Constructor (NSSet<NSObject> set);

	//	// -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
	//	[Export ("initWithSet:copyItems:")]
	//	IntPtr Constructor (NSSet<NSObject> set, bool flag);
	//}

	//// audit-objc-generics: @interface NSMutableOrderedSet<ObjectType> : NSOrderedSet
	//[iOS (5,0)]
	//[BaseType (typeof(NSOrderedSet))]
	//interface NSMutableOrderedSet
	//{
	//	// -(void)insertObject:(ObjectType _Nonnull)object atIndex:(NSUInteger)idx;
	//	[Export ("insertObject:atIndex:")]
	//	void InsertObject (NSObject @object, nuint idx);

	//	// -(void)removeObjectAtIndex:(NSUInteger)idx;
	//	[Export ("removeObjectAtIndex:")]
	//	void RemoveObjectAtIndex (nuint idx);

	//	// -(void)replaceObjectAtIndex:(NSUInteger)idx withObject:(ObjectType _Nonnull)object;
	//	[Export ("replaceObjectAtIndex:withObject:")]
	//	void ReplaceObjectAtIndex (nuint idx, NSObject @object);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
	//	[Export ("initWithCapacity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nuint numItems);
	//}

	//// @interface NSExtendedMutableOrderedSet (NSMutableOrderedSet)
	//[Category]
	//[BaseType (typeof(NSMutableOrderedSet))]
	//interface NSMutableOrderedSet_NSExtendedMutableOrderedSet
	//{
	//	// -(void)addObject:(ObjectType _Nonnull)object;
	//	[Export ("addObject:")]
	//	void AddObject (NSObject @object);

	//	// -(void)addObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)count;
	//	[Export ("addObjects:count:")]
	//	void AddObjects ([NullAllowed] NSObject[] objects, nuint count);

	//	// -(void)addObjectsFromArray:(NSArray<ObjectType> * _Nonnull)array;
	//	[Export ("addObjectsFromArray:")]
	//	void AddObjectsFromArray (NSObject[] array);

	//	// -(void)exchangeObjectAtIndex:(NSUInteger)idx1 withObjectAtIndex:(NSUInteger)idx2;
	//	[Export ("exchangeObjectAtIndex:withObjectAtIndex:")]
	//	void ExchangeObjectAtIndex (nuint idx1, nuint idx2);

	//	// -(void)moveObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes toIndex:(NSUInteger)idx;
	//	[Export ("moveObjectsAtIndexes:toIndex:")]
	//	void MoveObjectsAtIndexes (NSIndexSet indexes, nuint idx);

	//	// -(void)insertObjects:(NSArray<ObjectType> * _Nonnull)objects atIndexes:(NSIndexSet * _Nonnull)indexes;
	//	[Export ("insertObjects:atIndexes:")]
	//	void InsertObjects (NSObject[] objects, NSIndexSet indexes);

	//	// -(void)setObject:(ObjectType _Nonnull)obj atIndex:(NSUInteger)idx;
	//	[Export ("setObject:atIndex:")]
	//	void SetObject (NSObject obj, nuint idx);

	//	// -(void)setObject:(ObjectType _Nonnull)obj atIndexedSubscript:(NSUInteger)idx __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("setObject:atIndexedSubscript:")]
	//	void SetObject (NSObject obj, nuint idx);

	//	// -(void)replaceObjectsInRange:(NSRange)range withObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)count;
	//	[Export ("replaceObjectsInRange:withObjects:count:")]
	//	void ReplaceObjectsInRange (NSRange range, [NullAllowed] NSObject[] objects, nuint count);

	//	// -(void)replaceObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes withObjects:(NSArray<ObjectType> * _Nonnull)objects;
	//	[Export ("replaceObjectsAtIndexes:withObjects:")]
	//	void ReplaceObjectsAtIndexes (NSIndexSet indexes, NSObject[] objects);

	//	// -(void)removeObjectsInRange:(NSRange)range;
	//	[Export ("removeObjectsInRange:")]
	//	void RemoveObjectsInRange (NSRange range);

	//	// -(void)removeObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
	//	[Export ("removeObjectsAtIndexes:")]
	//	void RemoveObjectsAtIndexes (NSIndexSet indexes);

	//	// -(void)removeAllObjects;
	//	[Export ("removeAllObjects")]
	//	void RemoveAllObjects ();

	//	// -(void)removeObject:(ObjectType _Nonnull)object;
	//	[Export ("removeObject:")]
	//	void RemoveObject (NSObject @object);

	//	// -(void)removeObjectsInArray:(NSArray<ObjectType> * _Nonnull)array;
	//	[Export ("removeObjectsInArray:")]
	//	void RemoveObjectsInArray (NSObject[] array);

	//	// -(void)intersectOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
	//	[Export ("intersectOrderedSet:")]
	//	void IntersectOrderedSet (NSOrderedSet<NSObject> other);

	//	// -(void)minusOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
	//	[Export ("minusOrderedSet:")]
	//	void MinusOrderedSet (NSOrderedSet<NSObject> other);

	//	// -(void)unionOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
	//	[Export ("unionOrderedSet:")]
	//	void UnionOrderedSet (NSOrderedSet<NSObject> other);

	//	// -(void)intersectSet:(NSSet<ObjectType> * _Nonnull)other;
	//	[Export ("intersectSet:")]
	//	void IntersectSet (NSSet<NSObject> other);

	//	// -(void)minusSet:(NSSet<ObjectType> * _Nonnull)other;
	//	[Export ("minusSet:")]
	//	void MinusSet (NSSet<NSObject> other);

	//	// -(void)unionSet:(NSSet<ObjectType> * _Nonnull)other;
	//	[Export ("unionSet:")]
	//	void UnionSet (NSSet<NSObject> other);

	//	// -(void)sortUsingComparator:(NSComparator _Nonnull)cmptr;
	//	[Export ("sortUsingComparator:")]
	//	void SortUsingComparator (NSComparator cmptr);

	//	// -(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr;
	//	[Export ("sortWithOptions:usingComparator:")]
	//	void SortWithOptions (NSSortOptions opts, NSComparator cmptr);

	//	// -(void)sortRange:(NSRange)range options:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr;
	//	[Export ("sortRange:options:usingComparator:")]
	//	void SortRange (NSRange range, NSSortOptions opts, NSComparator cmptr);
	//}

	//// @interface NSMutableOrderedSetCreation (NSMutableOrderedSet)
	//[Category]
	//[BaseType (typeof(NSMutableOrderedSet))]
	//interface NSMutableOrderedSet_NSMutableOrderedSetCreation
	//{
	//	// +(instancetype _Nonnull)orderedSetWithCapacity:(NSUInteger)numItems;
	//	[Static]
	//	[Export ("orderedSetWithCapacity:")]
	//	NSMutableOrderedSet OrderedSetWithCapacity (nuint numItems);
	//}

	//// @interface NSKeyValueCoding (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSKeyValueCoding
	//{
	//	// @property (readonly, class) BOOL accessInstanceVariablesDirectly;
	//	[Static]
	//	[Export ("accessInstanceVariablesDirectly")]
	//	bool AccessInstanceVariablesDirectly { get; }

	//	// -(id _Nullable)valueForKey:(NSString * _Nonnull)key;
	//	[Export ("valueForKey:")]
	//	[return: NullAllowed]
	//	NSObject ValueForKey (string key);

	//	// -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
	//	[Export ("setValue:forKey:")]
	//	void SetValue ([NullAllowed] NSObject value, string key);

	//	// -(BOOL)validateValue:(id  _Nullable * _Nonnull)ioValue forKey:(NSString * _Nonnull)inKey error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("validateValue:forKey:error:")]
	//	bool ValidateValue ([NullAllowed] out NSObject ioValue, string inKey, [NullAllowed] out NSError outError);

	//	// -(NSMutableArray * _Nonnull)mutableArrayValueForKey:(NSString * _Nonnull)key;
	//	[Export ("mutableArrayValueForKey:")]
	//	NSMutableArray MutableArrayValueForKey (string key);

	//	// -(NSMutableOrderedSet * _Nonnull)mutableOrderedSetValueForKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("mutableOrderedSetValueForKey:")]
	//	NSMutableOrderedSet MutableOrderedSetValueForKey (string key);

	//	// -(NSMutableSet * _Nonnull)mutableSetValueForKey:(NSString * _Nonnull)key;
	//	[Export ("mutableSetValueForKey:")]
	//	NSMutableSet MutableSetValueForKey (string key);

	//	// -(id _Nullable)valueForKeyPath:(NSString * _Nonnull)keyPath;
	//	[Export ("valueForKeyPath:")]
	//	[return: NullAllowed]
	//	NSObject ValueForKeyPath (string keyPath);

	//	// -(void)setValue:(id _Nullable)value forKeyPath:(NSString * _Nonnull)keyPath;
	//	[Export ("setValue:forKeyPath:")]
	//	void SetValue ([NullAllowed] NSObject value, string keyPath);

	//	// -(BOOL)validateValue:(id  _Nullable * _Nonnull)ioValue forKeyPath:(NSString * _Nonnull)inKeyPath error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("validateValue:forKeyPath:error:")]
	//	bool ValidateValue ([NullAllowed] out NSObject ioValue, string inKeyPath, [NullAllowed] out NSError outError);

	//	// -(NSMutableArray * _Nonnull)mutableArrayValueForKeyPath:(NSString * _Nonnull)keyPath;
	//	[Export ("mutableArrayValueForKeyPath:")]
	//	NSMutableArray MutableArrayValueForKeyPath (string keyPath);

	//	// -(NSMutableOrderedSet * _Nonnull)mutableOrderedSetValueForKeyPath:(NSString * _Nonnull)keyPath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("mutableOrderedSetValueForKeyPath:")]
	//	NSMutableOrderedSet MutableOrderedSetValueForKeyPath (string keyPath);

	//	// -(NSMutableSet * _Nonnull)mutableSetValueForKeyPath:(NSString * _Nonnull)keyPath;
	//	[Export ("mutableSetValueForKeyPath:")]
	//	NSMutableSet MutableSetValueForKeyPath (string keyPath);

	//	// -(id _Nullable)valueForUndefinedKey:(NSString * _Nonnull)key;
	//	[Export ("valueForUndefinedKey:")]
	//	[return: NullAllowed]
	//	NSObject ValueForUndefinedKey (string key);

	//	// -(void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
	//	[Export ("setValue:forUndefinedKey:")]
	//	void SetValue ([NullAllowed] NSObject value, string key);

	//	// -(void)setNilValueForKey:(NSString * _Nonnull)key;
	//	[Export ("setNilValueForKey:")]
	//	void SetNilValueForKey (string key);

	//	// -(NSDictionary<NSString *,id> * _Nonnull)dictionaryWithValuesForKeys:(NSArray<NSString *> * _Nonnull)keys;
	//	[Export ("dictionaryWithValuesForKeys:")]
	//	NSDictionary<NSString, NSObject> DictionaryWithValuesForKeys (string[] keys);

	//	// -(void)setValuesForKeysWithDictionary:(NSDictionary<NSString *,id> * _Nonnull)keyedValues;
	//	[Export ("setValuesForKeysWithDictionary:")]
	//	void SetValuesForKeysWithDictionary (NSDictionary<NSString, NSObject> keyedValues);
	//}

	//// @interface NSKeyValueCoding (NSArray)
	//[Category]
	//[BaseType (typeof(NSArray))]
	//interface NSArray_NSKeyValueCoding
	//{
	//	// -(id _Nonnull)valueForKey:(NSString * _Nonnull)key;
	//	[Export ("valueForKey:")]
	//	NSObject ValueForKey (string key);

	//	// -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
	//	[Export ("setValue:forKey:")]
	//	void SetValue ([NullAllowed] NSObject value, string key);
	//}

	//// @interface NSKeyValueCoding (NSDictionary)
	//[Category]
	//[BaseType (typeof(NSDictionary))]
	//interface NSDictionary_NSKeyValueCoding
	//{
	//	// -(ObjectType _Nullable)valueForKey:(NSString * _Nonnull)key;
	//	[Export ("valueForKey:")]
	//	[return: NullAllowed]
	//	NSObject ValueForKey (string key);
	//}

	//// @interface NSKeyValueCoding (NSMutableDictionary)
	//[Category]
	//[BaseType (typeof(NSMutableDictionary))]
	//interface NSMutableDictionary_NSKeyValueCoding
	//{
	//	// -(void)setValue:(ObjectType _Nullable)value forKey:(NSString * _Nonnull)key;
	//	[Export ("setValue:forKey:")]
	//	void SetValue ([NullAllowed] NSObject value, string key);
	//}

	//// @interface NSKeyValueCoding (NSOrderedSet)
	//[Category]
	//[BaseType (typeof(NSOrderedSet))]
	//interface NSOrderedSet_NSKeyValueCoding
	//{
	//	// -(id _Nonnull)valueForKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("valueForKey:")]
	//	NSObject ValueForKey (string key);

	//	// -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("setValue:forKey:")]
	//	void SetValue ([NullAllowed] NSObject value, string key);
	//}

	//// @interface NSKeyValueCoding (NSSet)
	//[Category]
	//[BaseType (typeof(NSSet))]
	//interface NSSet_NSKeyValueCoding
	//{
	//	// -(id _Nonnull)valueForKey:(NSString * _Nonnull)key;
	//	[Export ("valueForKey:")]
	//	NSObject ValueForKey (string key);

	//	// -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
	//	[Export ("setValue:forKey:")]
	//	void SetValue ([NullAllowed] NSObject value, string key);
	//}

	//// @interface NSKeyValueObserving (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSKeyValueObserving
	//{
	//	// -(void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey,id> * _Nullable)change context:(void * _Nullable)context;
	//	[Export ("observeValueForKeyPath:ofObject:change:context:")]
	//	unsafe void ObserveValueForKeyPath ([NullAllowed] string keyPath, [NullAllowed] NSObject @object, [NullAllowed] NSDictionary<NSString, NSObject> change, [NullAllowed] void* context);
	//}

	//// @interface NSKeyValueObserverRegistration (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSKeyValueObserverRegistration
	//{
	//	// -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
	//	[Export ("addObserver:forKeyPath:options:context:")]
	//	unsafe void AddObserver (NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

	//	// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("removeObserver:forKeyPath:context:")]
	//	unsafe void RemoveObserver (NSObject observer, string keyPath, [NullAllowed] void* context);

	//	// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
	//	[Export ("removeObserver:forKeyPath:")]
	//	void RemoveObserver (NSObject observer, string keyPath);
	//}

	//// @interface NSKeyValueObserverRegistration (NSArray)
	//[Category]
	//[BaseType (typeof(NSArray))]
	//interface NSArray_NSKeyValueObserverRegistration
	//{
	//	// -(void)addObserver:(NSObject * _Nonnull)observer toObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
	//	[Export ("addObserver:toObjectsAtIndexes:forKeyPath:options:context:")]
	//	unsafe void AddObserver (NSObject observer, NSIndexSet indexes, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

	//	// -(void)removeObserver:(NSObject * _Nonnull)observer fromObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("removeObserver:fromObjectsAtIndexes:forKeyPath:context:")]
	//	unsafe void RemoveObserver (NSObject observer, NSIndexSet indexes, string keyPath, [NullAllowed] void* context);

	//	// -(void)removeObserver:(NSObject * _Nonnull)observer fromObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes forKeyPath:(NSString * _Nonnull)keyPath;
	//	[Export ("removeObserver:fromObjectsAtIndexes:forKeyPath:")]
	//	void RemoveObserver (NSObject observer, NSIndexSet indexes, string keyPath);

	//	// -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
	//	[Export ("addObserver:forKeyPath:options:context:")]
	//	unsafe void AddObserver (NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

	//	// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("removeObserver:forKeyPath:context:")]
	//	unsafe void RemoveObserver (NSObject observer, string keyPath, [NullAllowed] void* context);

	//	// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
	//	[Export ("removeObserver:forKeyPath:")]
	//	void RemoveObserver (NSObject observer, string keyPath);
	//}

	//// @interface NSKeyValueObserverRegistration (NSOrderedSet)
	//[Category]
	//[BaseType (typeof(NSOrderedSet))]
	//interface NSOrderedSet_NSKeyValueObserverRegistration
	//{
	//	// -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
	//	[Export ("addObserver:forKeyPath:options:context:")]
	//	unsafe void AddObserver (NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

	//	// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("removeObserver:forKeyPath:context:")]
	//	unsafe void RemoveObserver (NSObject observer, string keyPath, [NullAllowed] void* context);

	//	// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
	//	[Export ("removeObserver:forKeyPath:")]
	//	void RemoveObserver (NSObject observer, string keyPath);
	//}

	//// @interface NSKeyValueObserverRegistration (NSSet)
	//[Category]
	//[BaseType (typeof(NSSet))]
	//interface NSSet_NSKeyValueObserverRegistration
	//{
	//	// -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
	//	[Export ("addObserver:forKeyPath:options:context:")]
	//	unsafe void AddObserver (NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

	//	// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("removeObserver:forKeyPath:context:")]
	//	unsafe void RemoveObserver (NSObject observer, string keyPath, [NullAllowed] void* context);

	//	// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
	//	[Export ("removeObserver:forKeyPath:")]
	//	void RemoveObserver (NSObject observer, string keyPath);
	//}

	//// @interface NSKeyValueObserverNotification (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSKeyValueObserverNotification
	//{
	//	// -(void)willChangeValueForKey:(NSString * _Nonnull)key;
	//	[Export ("willChangeValueForKey:")]
	//	void WillChangeValueForKey (string key);

	//	// -(void)didChangeValueForKey:(NSString * _Nonnull)key;
	//	[Export ("didChangeValueForKey:")]
	//	void DidChangeValueForKey (string key);

	//	// -(void)willChange:(NSKeyValueChange)changeKind valuesAtIndexes:(NSIndexSet * _Nonnull)indexes forKey:(NSString * _Nonnull)key;
	//	[Export ("willChange:valuesAtIndexes:forKey:")]
	//	void WillChange (NSKeyValueChange changeKind, NSIndexSet indexes, string key);

	//	// -(void)didChange:(NSKeyValueChange)changeKind valuesAtIndexes:(NSIndexSet * _Nonnull)indexes forKey:(NSString * _Nonnull)key;
	//	[Export ("didChange:valuesAtIndexes:forKey:")]
	//	void DidChange (NSKeyValueChange changeKind, NSIndexSet indexes, string key);

	//	// -(void)willChangeValueForKey:(NSString * _Nonnull)key withSetMutation:(NSKeyValueSetMutationKind)mutationKind usingObjects:(NSSet * _Nonnull)objects;
	//	[Export ("willChangeValueForKey:withSetMutation:usingObjects:")]
	//	void WillChangeValueForKey (string key, NSKeyValueSetMutationKind mutationKind, NSSet objects);

	//	// -(void)didChangeValueForKey:(NSString * _Nonnull)key withSetMutation:(NSKeyValueSetMutationKind)mutationKind usingObjects:(NSSet * _Nonnull)objects;
	//	[Export ("didChangeValueForKey:withSetMutation:usingObjects:")]
	//	void DidChangeValueForKey (string key, NSKeyValueSetMutationKind mutationKind, NSSet objects);
	//}

	//// @interface NSKeyValueObservingCustomization (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSKeyValueObservingCustomization
	//{
	//	// +(NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingValueForKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Static]
	//	[Export ("keyPathsForValuesAffectingValueForKey:")]
	//	NSSet<NSString> KeyPathsForValuesAffectingValueForKey (string key);

	//	// +(BOOL)automaticallyNotifiesObserversForKey:(NSString * _Nonnull)key;
	//	[Static]
	//	[Export ("automaticallyNotifiesObserversForKey:")]
	//	bool AutomaticallyNotifiesObserversForKey (string key);

	//	// @property void * _Nullable observationInfo __attribute__((objc_returns_inner_pointer));
	//	[NullAllowed, Export ("observationInfo", ArgumentSemantic.Assign)]
	//	unsafe void* ObservationInfo { get; set; }
	//}

	//// @interface NSPropertyListSerialization : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSPropertyListSerialization
	//{
	//	// +(BOOL)propertyList:(id _Nonnull)plist isValidForFormat:(NSPropertyListFormat)format;
	//	[Static]
	//	[Export ("propertyList:isValidForFormat:")]
	//	bool PropertyList (NSObject plist, NSPropertyListFormat format);

	//	// +(NSData * _Nullable)dataWithPropertyList:(id _Nonnull)plist format:(NSPropertyListFormat)format options:(NSPropertyListWriteOptions)opt error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("dataWithPropertyList:format:options:error:")]
	//	[return: NullAllowed]
	//	NSData DataWithPropertyList (NSObject plist, NSPropertyListFormat format, nuint opt, [NullAllowed] out NSError error);

	//	// +(NSInteger)writePropertyList:(id _Nonnull)plist toStream:(NSOutputStream * _Nonnull)stream format:(NSPropertyListFormat)format options:(NSPropertyListWriteOptions)opt error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("writePropertyList:toStream:format:options:error:")]
	//	nint WritePropertyList (NSObject plist, NSOutputStream stream, NSPropertyListFormat format, nuint opt, [NullAllowed] out NSError error);

	//	// +(id _Nullable)propertyListWithData:(NSData * _Nonnull)data options:(NSPropertyListReadOptions)opt format:(NSPropertyListFormat * _Nullable)format error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("propertyListWithData:options:format:error:")]
	//	[return: NullAllowed]
	//	unsafe NSObject PropertyListWithData (NSData data, NSPropertyListReadOptions opt, [NullAllowed] NSPropertyListFormat* format, [NullAllowed] out NSError error);

	//	// +(id _Nullable)propertyListWithStream:(NSInputStream * _Nonnull)stream options:(NSPropertyListReadOptions)opt format:(NSPropertyListFormat * _Nullable)format error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("propertyListWithStream:options:format:error:")]
	//	[return: NullAllowed]
	//	unsafe NSObject PropertyListWithStream (NSInputStream stream, NSPropertyListReadOptions opt, [NullAllowed] NSPropertyListFormat* format, [NullAllowed] out NSError error);

	//	// +(NSData * _Nullable)dataFromPropertyList:(id _Nonnull)plist format:(NSPropertyListFormat)format errorDescription:(NSString * _Nullable * _Nullable)errorString __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use dataWithPropertyList:format:options:error: instead.")]
	//	[Static]
	//	[Export ("dataFromPropertyList:format:errorDescription:")]
	//	[return: NullAllowed]
	//	NSData DataFromPropertyList (NSObject plist, NSPropertyListFormat format, [NullAllowed] out string errorString);

	//	// +(id _Nullable)propertyListFromData:(NSData * _Nonnull)data mutabilityOption:(NSPropertyListMutabilityOptions)opt format:(NSPropertyListFormat * _Nullable)format errorDescription:(NSString * _Nullable * _Nullable)errorString __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use propertyListWithData:options:format:error: instead.")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use propertyListWithData:options:format:error: instead.")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use propertyListWithData:options:format:error: instead.")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use propertyListWithData:options:format:error: instead.")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use propertyListWithData:options:format:error: instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use propertyListWithData:options:format:error: instead.")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use propertyListWithData:options:format:error: instead.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use propertyListWithData:options:format:error: instead.")]
	//	[Static]
	//	[Export ("propertyListFromData:mutabilityOption:format:errorDescription:")]
	//	[return: NullAllowed]
	//	unsafe NSObject PropertyListFromData (NSData data, NSPropertyListMutabilityOptions opt, [NullAllowed] NSPropertyListFormat* format, [NullAllowed] out string errorString);
	//}

	//// @interface NSKeyedArchiver : NSCoder
	//[BaseType (typeof(NSCoder))]
	//interface NSKeyedArchiver
	//{
	//	// -(instancetype _Nonnull)initRequiringSecureCoding:(BOOL)requiresSecureCoding __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("initRequiringSecureCoding:")]
	//	IntPtr Constructor (bool requiresSecureCoding);

	//	// +(NSData * _Nullable)archivedDataWithRootObject:(id _Nonnull)object requiringSecureCoding:(BOOL)requiresSecureCoding error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("archivedDataWithRootObject:requiringSecureCoding:error:")]
	//	[return: NullAllowed]
	//	NSData ArchivedDataWithRootObject (NSObject @object, bool requiresSecureCoding, [NullAllowed] out NSError error);

	//	// -(instancetype _Nonnull)initForWritingWithMutableData:(NSMutableData * _Nonnull)data __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initRequiringSecureCoding: instead")]
	//	[Deprecated (PlatformName.TvOS, 12, 0, message: "Use -initRequiringSecureCoding: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initRequiringSecureCoding: instead")]
	//	[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use -initRequiringSecureCoding: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -initRequiringSecureCoding: instead")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Use -initRequiringSecureCoding: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 2, message: "Use -initRequiringSecureCoding: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use -initRequiringSecureCoding: instead")]
	//	[Export ("initForWritingWithMutableData:")]
	//	IntPtr Constructor (NSMutableData data);

	//	// +(NSData * _Nonnull)archivedDataWithRootObject:(id _Nonnull)rootObject __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 2, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Static]
	//	[Export ("archivedDataWithRootObject:")]
	//	NSData ArchivedDataWithRootObject (NSObject rootObject);

	//	// +(BOOL)archiveRootObject:(id _Nonnull)rootObject toFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 2, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
	//	[Static]
	//	[Export ("archiveRootObject:toFile:")]
	//	bool ArchiveRootObject (NSObject rootObject, string path);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSKeyedArchiverDelegate Delegate { get; set; }

	//	// @property (assign) id<NSKeyedArchiverDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property NSPropertyListFormat outputFormat;
	//	[Export ("outputFormat", ArgumentSemantic.Assign)]
	//	NSPropertyListFormat OutputFormat { get; set; }

	//	// @property (readonly, strong) NSData * _Nonnull encodedData __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("encodedData", ArgumentSemantic.Strong)]
	//	NSData EncodedData { get; }

	//	// -(void)finishEncoding;
	//	[Export ("finishEncoding")]
	//	void FinishEncoding ();

	//	// +(void)setClassName:(NSString * _Nullable)codedName forClass:(Class _Nonnull)cls;
	//	[Static]
	//	[Export ("setClassName:forClass:")]
	//	void SetClassName ([NullAllowed] string codedName, Class cls);

	//	// -(void)setClassName:(NSString * _Nullable)codedName forClass:(Class _Nonnull)cls;
	//	[Export ("setClassName:forClass:")]
	//	void SetClassName ([NullAllowed] string codedName, Class cls);

	//	// +(NSString * _Nullable)classNameForClass:(Class _Nonnull)cls;
	//	[Static]
	//	[Export ("classNameForClass:")]
	//	[return: NullAllowed]
	//	string ClassNameForClass (Class cls);

	//	// -(NSString * _Nullable)classNameForClass:(Class _Nonnull)cls;
	//	[Export ("classNameForClass:")]
	//	[return: NullAllowed]
	//	string ClassNameForClass (Class cls);

	//	// -(void)encodeObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeObject:forKey:")]
	//	void EncodeObject ([NullAllowed] NSObject @object, string key);

	//	// -(void)encodeConditionalObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeConditionalObject:forKey:")]
	//	void EncodeConditionalObject ([NullAllowed] NSObject @object, string key);

	//	// -(void)encodeBool:(BOOL)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeBool:forKey:")]
	//	void EncodeBool (bool value, string key);

	//	// -(void)encodeInt:(int)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeInt:forKey:")]
	//	void EncodeInt (int value, string key);

	//	// -(void)encodeInt32:(int32_t)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeInt32:forKey:")]
	//	void EncodeInt32 (int value, string key);

	//	// -(void)encodeInt64:(int64_t)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeInt64:forKey:")]
	//	void EncodeInt64 (long value, string key);

	//	// -(void)encodeFloat:(float)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeFloat:forKey:")]
	//	void EncodeFloat (float value, string key);

	//	// -(void)encodeDouble:(double)value forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeDouble:forKey:")]
	//	void EncodeDouble (double value, string key);

	//	// -(void)encodeBytes:(const uint8_t * _Nullable)bytes length:(NSUInteger)length forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeBytes:length:forKey:")]
	//	unsafe void EncodeBytes ([NullAllowed] byte* bytes, nuint length, string key);

	//	// @property (readwrite) BOOL requiresSecureCoding __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Export ("requiresSecureCoding")]
	//	bool RequiresSecureCoding { get; set; }
	//}

	//// @interface NSKeyedUnarchiver : NSCoder
	//[BaseType (typeof(NSCoder))]
	//interface NSKeyedUnarchiver
	//{
	//	// -(instancetype _Nullable)initForReadingFromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("initForReadingFromData:error:")]
	//	IntPtr Constructor (NSData data, [NullAllowed] out NSError error);

	//	// +(id _Nullable)unarchivedObjectOfClass:(Class _Nonnull)cls fromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("unarchivedObjectOfClass:fromData:error:")]
	//	[return: NullAllowed]
	//	NSObject UnarchivedObjectOfClass (Class cls, NSData data, [NullAllowed] out NSError error);

	//	// +(id _Nullable)unarchivedObjectOfClasses:(NSSet<Class> * _Nonnull)classes fromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("unarchivedObjectOfClasses:fromData:error:")]
	//	[return: NullAllowed]
	//	NSObject UnarchivedObjectOfClasses (NSSet<Class> classes, NSData data, [NullAllowed] out NSError error);

	//	// -(instancetype _Nonnull)initForReadingWithData:(NSData * _Nonnull)data __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initForReadingFromData:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 12, 0, message: "Use -initForReadingFromData:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initForReadingFromData:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use -initForReadingFromData:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -initForReadingFromData:error: instead")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Use -initForReadingFromData:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 2, message: "Use -initForReadingFromData:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use -initForReadingFromData:error: instead")]
	//	[Export ("initForReadingWithData:")]
	//	IntPtr Constructor (NSData data);

	//	// +(id _Nullable)unarchiveObjectWithData:(NSData * _Nonnull)data __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 2, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Static]
	//	[Export ("unarchiveObjectWithData:")]
	//	[return: NullAllowed]
	//	NSObject UnarchiveObjectWithData (NSData data);

	//	// +(id _Nullable)unarchiveTopLevelObjectWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 2, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Static]
	//	[Export ("unarchiveTopLevelObjectWithData:error:")]
	//	[return: NullAllowed]
	//	NSObject UnarchiveTopLevelObjectWithData (NSData data, [NullAllowed] out NSError error);

	//	// +(id _Nullable)unarchiveObjectWithFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.TvOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 2, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
	//	[Static]
	//	[Export ("unarchiveObjectWithFile:")]
	//	[return: NullAllowed]
	//	NSObject UnarchiveObjectWithFile (string path);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSKeyedUnarchiverDelegate Delegate { get; set; }

	//	// @property (assign) id<NSKeyedUnarchiverDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(void)finishDecoding;
	//	[Export ("finishDecoding")]
	//	void FinishDecoding ();

	//	// +(void)setClass:(Class _Nullable)cls forClassName:(NSString * _Nonnull)codedName;
	//	[Static]
	//	[Export ("setClass:forClassName:")]
	//	void SetClass ([NullAllowed] Class cls, string codedName);

	//	// -(void)setClass:(Class _Nullable)cls forClassName:(NSString * _Nonnull)codedName;
	//	[Export ("setClass:forClassName:")]
	//	void SetClass ([NullAllowed] Class cls, string codedName);

	//	// +(Class _Nullable)classForClassName:(NSString * _Nonnull)codedName;
	//	[Static]
	//	[Export ("classForClassName:")]
	//	[return: NullAllowed]
	//	Class ClassForClassName (string codedName);

	//	// -(Class _Nullable)classForClassName:(NSString * _Nonnull)codedName;
	//	[Export ("classForClassName:")]
	//	[return: NullAllowed]
	//	Class ClassForClassName (string codedName);

	//	// -(BOOL)containsValueForKey:(NSString * _Nonnull)key;
	//	[Export ("containsValueForKey:")]
	//	bool ContainsValueForKey (string key);

	//	// -(id _Nullable)decodeObjectForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeObjectForKey:")]
	//	[return: NullAllowed]
	//	NSObject DecodeObjectForKey (string key);

	//	// -(BOOL)decodeBoolForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeBoolForKey:")]
	//	bool DecodeBoolForKey (string key);

	//	// -(int)decodeIntForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeIntForKey:")]
	//	int DecodeIntForKey (string key);

	//	// -(int32_t)decodeInt32ForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeInt32ForKey:")]
	//	int DecodeInt32ForKey (string key);

	//	// -(int64_t)decodeInt64ForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeInt64ForKey:")]
	//	long DecodeInt64ForKey (string key);

	//	// -(float)decodeFloatForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeFloatForKey:")]
	//	float DecodeFloatForKey (string key);

	//	// -(double)decodeDoubleForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeDoubleForKey:")]
	//	double DecodeDoubleForKey (string key);

	//	// -(const uint8_t * _Nullable)decodeBytesForKey:(NSString * _Nonnull)key returnedLength:(NSUInteger * _Nullable)lengthp __attribute__((objc_returns_inner_pointer));
	//	[Export ("decodeBytesForKey:returnedLength:")]
	//	[return: NullAllowed]
	//	unsafe byte* DecodeBytesForKey (string key, [NullAllowed] nuint* lengthp);

	//	// @property (readwrite) BOOL requiresSecureCoding __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Export ("requiresSecureCoding")]
	//	bool RequiresSecureCoding { get; set; }

	//	// @property (readwrite) NSDecodingFailurePolicy decodingFailurePolicy __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("decodingFailurePolicy", ArgumentSemantic.Assign)]
	//	NSDecodingFailurePolicy DecodingFailurePolicy { get; set; }
	//}

	//// @protocol NSKeyedArchiverDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSKeyedArchiverDelegate
	//{
	//	// @optional -(id _Nullable)archiver:(NSKeyedArchiver * _Nonnull)archiver willEncodeObject:(id _Nonnull)object;
	//	[Export ("archiver:willEncodeObject:")]
	//	[return: NullAllowed]
	//	NSObject Archiver (NSKeyedArchiver archiver, NSObject @object);

	//	// @optional -(void)archiver:(NSKeyedArchiver * _Nonnull)archiver didEncodeObject:(id _Nullable)object;
	//	[Export ("archiver:didEncodeObject:")]
	//	void Archiver (NSKeyedArchiver archiver, [NullAllowed] NSObject @object);

	//	// @optional -(void)archiver:(NSKeyedArchiver * _Nonnull)archiver willReplaceObject:(id _Nullable)object withObject:(id _Nullable)newObject;
	//	[Export ("archiver:willReplaceObject:withObject:")]
	//	void Archiver (NSKeyedArchiver archiver, [NullAllowed] NSObject @object, [NullAllowed] NSObject newObject);

	//	// @optional -(void)archiverWillFinish:(NSKeyedArchiver * _Nonnull)archiver;
	//	[Export ("archiverWillFinish:")]
	//	void ArchiverWillFinish (NSKeyedArchiver archiver);

	//	// @optional -(void)archiverDidFinish:(NSKeyedArchiver * _Nonnull)archiver;
	//	[Export ("archiverDidFinish:")]
	//	void ArchiverDidFinish (NSKeyedArchiver archiver);
	//}

	//// @protocol NSKeyedUnarchiverDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSKeyedUnarchiverDelegate
	//{
	//	// @optional -(Class _Nullable)unarchiver:(NSKeyedUnarchiver * _Nonnull)unarchiver cannotDecodeObjectOfClassName:(NSString * _Nonnull)name originalClasses:(NSArray<NSString *> * _Nonnull)classNames;
	//	[Export ("unarchiver:cannotDecodeObjectOfClassName:originalClasses:")]
	//	[return: NullAllowed]
	//	Class Unarchiver (NSKeyedUnarchiver unarchiver, string name, string[] classNames);

	//	// @optional -(id _Nullable)unarchiver:(NSKeyedUnarchiver * _Nonnull)unarchiver didDecodeObject:(id _Nullable)object __attribute__((ns_returns_retained));
	//	[Export ("unarchiver:didDecodeObject:")]
	//	[return: NullAllowed]
	//	NSObject Unarchiver (NSKeyedUnarchiver unarchiver, [NullAllowed] NSObject @object);

	//	// @optional -(void)unarchiver:(NSKeyedUnarchiver * _Nonnull)unarchiver willReplaceObject:(id _Nonnull)object withObject:(id _Nonnull)newObject;
	//	[Export ("unarchiver:willReplaceObject:withObject:")]
	//	void Unarchiver (NSKeyedUnarchiver unarchiver, NSObject @object, NSObject newObject);

	//	// @optional -(void)unarchiverWillFinish:(NSKeyedUnarchiver * _Nonnull)unarchiver;
	//	[Export ("unarchiverWillFinish:")]
	//	void UnarchiverWillFinish (NSKeyedUnarchiver unarchiver);

	//	// @optional -(void)unarchiverDidFinish:(NSKeyedUnarchiver * _Nonnull)unarchiver;
	//	[Export ("unarchiverDidFinish:")]
	//	void UnarchiverDidFinish (NSKeyedUnarchiver unarchiver);
	//}

	//// @interface NSKeyedArchiverObjectSubstitution (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSKeyedArchiverObjectSubstitution
	//{
	//	// @property (readonly) Class _Nullable classForKeyedArchiver;
	//	[NullAllowed, Export ("classForKeyedArchiver")]
	//	Class ClassForKeyedArchiver { get; }

	//	// -(id _Nullable)replacementObjectForKeyedArchiver:(NSKeyedArchiver * _Nonnull)archiver;
	//	[Export ("replacementObjectForKeyedArchiver:")]
	//	[return: NullAllowed]
	//	NSObject ReplacementObjectForKeyedArchiver (NSKeyedArchiver archiver);

	//	// +(NSArray<NSString *> * _Nonnull)classFallbacksForKeyedArchiver;
	//	[Static]
	//	[Export ("classFallbacksForKeyedArchiver")]
	//	[Verify (MethodToProperty)]
	//	string[] ClassFallbacksForKeyedArchiver { get; }
	//}

	//// @interface NSKeyedUnarchiverObjectSubstitution (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSKeyedUnarchiverObjectSubstitution
	//{
	//	// +(Class _Nonnull)classForKeyedUnarchiver;
	//	[Static]
	//	[Export ("classForKeyedUnarchiver")]
	//	[Verify (MethodToProperty)]
	//	Class ClassForKeyedUnarchiver { get; }
	//}

	//// @protocol NSLocking
	//[Protocol, Model]
	//interface NSLocking
	//{
	//	// @required -(void)lock;
	//	[Abstract]
	//	[Export ("lock")]
	//	void Lock ();

	//	// @required -(void)unlock;
	//	[Abstract]
	//	[Export ("unlock")]
	//	void Unlock ();
	//}

	//// @interface NSLock : NSObject <NSLocking>
	//[BaseType (typeof(NSObject))]
	//interface NSLock : INSLocking
	//{
	//	// -(BOOL)tryLock;
	//	[Export ("tryLock")]
	//	[Verify (MethodToProperty)]
	//	bool TryLock { get; }

	//	// -(BOOL)lockBeforeDate:(NSDate * _Nonnull)limit;
	//	[Export ("lockBeforeDate:")]
	//	bool LockBeforeDate (NSDate limit);

	//	// @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }
	//}

	//// @interface NSConditionLock : NSObject <NSLocking>
	//[BaseType (typeof(NSObject))]
	//interface NSConditionLock : INSLocking
	//{
	//	// -(instancetype _Nonnull)initWithCondition:(NSInteger)condition __attribute__((objc_designated_initializer));
	//	[Export ("initWithCondition:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nint condition);

	//	// @property (readonly) NSInteger condition;
	//	[Export ("condition")]
	//	nint Condition { get; }

	//	// -(void)lockWhenCondition:(NSInteger)condition;
	//	[Export ("lockWhenCondition:")]
	//	void LockWhenCondition (nint condition);

	//	// -(BOOL)tryLock;
	//	[Export ("tryLock")]
	//	[Verify (MethodToProperty)]
	//	bool TryLock { get; }

	//	// -(BOOL)tryLockWhenCondition:(NSInteger)condition;
	//	[Export ("tryLockWhenCondition:")]
	//	bool TryLockWhenCondition (nint condition);

	//	// -(void)unlockWithCondition:(NSInteger)condition;
	//	[Export ("unlockWithCondition:")]
	//	void UnlockWithCondition (nint condition);

	//	// -(BOOL)lockBeforeDate:(NSDate * _Nonnull)limit;
	//	[Export ("lockBeforeDate:")]
	//	bool LockBeforeDate (NSDate limit);

	//	// -(BOOL)lockWhenCondition:(NSInteger)condition beforeDate:(NSDate * _Nonnull)limit;
	//	[Export ("lockWhenCondition:beforeDate:")]
	//	bool LockWhenCondition (nint condition, NSDate limit);

	//	// @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }
	//}

	//// @interface NSRecursiveLock : NSObject <NSLocking>
	//[BaseType (typeof(NSObject))]
	//interface NSRecursiveLock : INSLocking
	//{
	//	// -(BOOL)tryLock;
	//	[Export ("tryLock")]
	//	[Verify (MethodToProperty)]
	//	bool TryLock { get; }

	//	// -(BOOL)lockBeforeDate:(NSDate * _Nonnull)limit;
	//	[Export ("lockBeforeDate:")]
	//	bool LockBeforeDate (NSDate limit);

	//	// @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }
	//}

	//// @interface NSCondition : NSObject <NSLocking>
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSCondition : INSLocking
	//{
	//	// -(void)wait;
	//	[Export ("wait")]
	//	void Wait ();

	//	// -(BOOL)waitUntilDate:(NSDate * _Nonnull)limit;
	//	[Export ("waitUntilDate:")]
	//	bool WaitUntilDate (NSDate limit);

	//	// -(void)signal;
	//	[Export ("signal")]
	//	void Signal ();

	//	// -(void)broadcast;
	//	[Export ("broadcast")]
	//	void Broadcast ();

	//	// @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }
	//}

	//// audit-objc-generics: @interface NSMapTable<KeyType, ObjectType> : NSObject <NSCopying, NSSecureCoding, NSFastEnumeration>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSMapTable : INSCopying, INSSecureCoding, INSFastEnumeration
	//{
	//	// -(instancetype _Nonnull)initWithKeyOptions:(NSPointerFunctionsOptions)keyOptions valueOptions:(NSPointerFunctionsOptions)valueOptions capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
	//	[Export ("initWithKeyOptions:valueOptions:capacity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSPointerFunctionsOptions keyOptions, NSPointerFunctionsOptions valueOptions, nuint initialCapacity);

	//	// -(instancetype _Nonnull)initWithKeyPointerFunctions:(NSPointerFunctions * _Nonnull)keyFunctions valuePointerFunctions:(NSPointerFunctions * _Nonnull)valueFunctions capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
	//	[Export ("initWithKeyPointerFunctions:valuePointerFunctions:capacity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSPointerFunctions keyFunctions, NSPointerFunctions valueFunctions, nuint initialCapacity);

	//	// +(NSMapTable<KeyType,ObjectType> * _Nonnull)mapTableWithKeyOptions:(NSPointerFunctionsOptions)keyOptions valueOptions:(NSPointerFunctionsOptions)valueOptions;
	//	[Static]
	//	[Export ("mapTableWithKeyOptions:valueOptions:")]
	//	NSMapTable<NSObject, NSObject> MapTableWithKeyOptions (NSPointerFunctionsOptions keyOptions, NSPointerFunctionsOptions valueOptions);

	//	// +(id _Nonnull)mapTableWithStrongToStrongObjects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5, deprecated=10.8)));
	//	[Introduced (PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
	//	[NoWatch, NoTV, NoiOS]
	//	[Static]
	//	[Export ("mapTableWithStrongToStrongObjects")]
	//	[Verify (MethodToProperty)]
	//	NSObject MapTableWithStrongToStrongObjects { get; }

	//	// +(id _Nonnull)mapTableWithWeakToStrongObjects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5, deprecated=10.8)));
	//	[Introduced (PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
	//	[NoWatch, NoTV, NoiOS]
	//	[Static]
	//	[Export ("mapTableWithWeakToStrongObjects")]
	//	[Verify (MethodToProperty)]
	//	NSObject MapTableWithWeakToStrongObjects { get; }

	//	// +(id _Nonnull)mapTableWithStrongToWeakObjects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5, deprecated=10.8)));
	//	[Introduced (PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
	//	[NoWatch, NoTV, NoiOS]
	//	[Static]
	//	[Export ("mapTableWithStrongToWeakObjects")]
	//	[Verify (MethodToProperty)]
	//	NSObject MapTableWithStrongToWeakObjects { get; }

	//	// +(id _Nonnull)mapTableWithWeakToWeakObjects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5, deprecated=10.8)));
	//	[Introduced (PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
	//	[NoWatch, NoTV, NoiOS]
	//	[Static]
	//	[Export ("mapTableWithWeakToWeakObjects")]
	//	[Verify (MethodToProperty)]
	//	NSObject MapTableWithWeakToWeakObjects { get; }

	//	// +(NSMapTable<KeyType,ObjectType> * _Nonnull)strongToStrongObjectsMapTable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Static]
	//	[Export ("strongToStrongObjectsMapTable")]
	//	[Verify (MethodToProperty)]
	//	NSMapTable<NSObject, NSObject> StrongToStrongObjectsMapTable { get; }

	//	// +(NSMapTable<KeyType,ObjectType> * _Nonnull)weakToStrongObjectsMapTable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Static]
	//	[Export ("weakToStrongObjectsMapTable")]
	//	[Verify (MethodToProperty)]
	//	NSMapTable<NSObject, NSObject> WeakToStrongObjectsMapTable { get; }

	//	// +(NSMapTable<KeyType,ObjectType> * _Nonnull)strongToWeakObjectsMapTable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Static]
	//	[Export ("strongToWeakObjectsMapTable")]
	//	[Verify (MethodToProperty)]
	//	NSMapTable<NSObject, NSObject> StrongToWeakObjectsMapTable { get; }

	//	// +(NSMapTable<KeyType,ObjectType> * _Nonnull)weakToWeakObjectsMapTable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Static]
	//	[Export ("weakToWeakObjectsMapTable")]
	//	[Verify (MethodToProperty)]
	//	NSMapTable<NSObject, NSObject> WeakToWeakObjectsMapTable { get; }

	//	// @property (readonly, copy) NSPointerFunctions * _Nonnull keyPointerFunctions;
	//	[Export ("keyPointerFunctions", ArgumentSemantic.Copy)]
	//	NSPointerFunctions KeyPointerFunctions { get; }

	//	// @property (readonly, copy) NSPointerFunctions * _Nonnull valuePointerFunctions;
	//	[Export ("valuePointerFunctions", ArgumentSemantic.Copy)]
	//	NSPointerFunctions ValuePointerFunctions { get; }

	//	// -(ObjectType _Nullable)objectForKey:(KeyType _Nullable)aKey;
	//	[Export ("objectForKey:")]
	//	[return: NullAllowed]
	//	NSObject ObjectForKey ([NullAllowed] NSObject aKey);

	//	// -(void)removeObjectForKey:(KeyType _Nullable)aKey;
	//	[Export ("removeObjectForKey:")]
	//	void RemoveObjectForKey ([NullAllowed] NSObject aKey);

	//	// -(void)setObject:(ObjectType _Nullable)anObject forKey:(KeyType _Nullable)aKey;
	//	[Export ("setObject:forKey:")]
	//	void SetObject ([NullAllowed] NSObject anObject, [NullAllowed] NSObject aKey);

	//	// @property (readonly) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// -(NSEnumerator<KeyType> * _Nonnull)keyEnumerator;
	//	[Export ("keyEnumerator")]
	//	[Verify (MethodToProperty)]
	//	NSEnumerator<NSObject> KeyEnumerator { get; }

	//	// -(NSEnumerator<ObjectType> * _Nullable)objectEnumerator;
	//	[NullAllowed, Export ("objectEnumerator")]
	//	[Verify (MethodToProperty)]
	//	NSEnumerator<NSObject> ObjectEnumerator { get; }

	//	// -(void)removeAllObjects;
	//	[Export ("removeAllObjects")]
	//	void RemoveAllObjects ();

	//	// -(NSDictionary<KeyType,ObjectType> * _Nonnull)dictionaryRepresentation;
	//	[Export ("dictionaryRepresentation")]
	//	[Verify (MethodToProperty)]
	//	NSDictionary<NSObject, NSObject> DictionaryRepresentation { get; }
	//}

	//// @interface NSMethodSignature : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSMethodSignature
	//{
	//	// +(NSMethodSignature * _Nullable)signatureWithObjCTypes:(const char * _Nonnull)types;
	//	[Static]
	//	[Export ("signatureWithObjCTypes:")]
	//	[return: NullAllowed]
	//	unsafe NSMethodSignature SignatureWithObjCTypes (sbyte* types);

	//	// @property (readonly) NSUInteger numberOfArguments;
	//	[Export ("numberOfArguments")]
	//	nuint NumberOfArguments { get; }

	//	// -(const char * _Nonnull)getArgumentTypeAtIndex:(NSUInteger)idx __attribute__((objc_returns_inner_pointer));
	//	[Export ("getArgumentTypeAtIndex:")]
	//	unsafe sbyte* GetArgumentTypeAtIndex (nuint idx);

	//	// @property (readonly) NSUInteger frameLength;
	//	[Export ("frameLength")]
	//	nuint FrameLength { get; }

	//	// -(BOOL)isOneway;
	//	[Export ("isOneway")]
	//	[Verify (MethodToProperty)]
	//	bool IsOneway { get; }

	//	// @property (readonly) const char * _Nonnull methodReturnType __attribute__((objc_returns_inner_pointer));
	//	[Export ("methodReturnType")]
	//	unsafe sbyte* MethodReturnType { get; }

	//	// @property (readonly) NSUInteger methodReturnLength;
	//	[Export ("methodReturnLength")]
	//	nuint MethodReturnLength { get; }
	//}

	//// @interface NSNotificationQueue : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSNotificationQueue
	//{
	//	// @property (readonly, strong, class) NSNotificationQueue * _Nonnull defaultQueue;
	//	[Static]
	//	[Export ("defaultQueue", ArgumentSemantic.Strong)]
	//	NSNotificationQueue DefaultQueue { get; }

	//	// -(instancetype _Nonnull)initWithNotificationCenter:(NSNotificationCenter * _Nonnull)notificationCenter __attribute__((objc_designated_initializer));
	//	[Export ("initWithNotificationCenter:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSNotificationCenter notificationCenter);

	//	// -(void)enqueueNotification:(NSNotification * _Nonnull)notification postingStyle:(NSPostingStyle)postingStyle;
	//	[Export ("enqueueNotification:postingStyle:")]
	//	void EnqueueNotification (NSNotification notification, NSPostingStyle postingStyle);

	//	// -(void)enqueueNotification:(NSNotification * _Nonnull)notification postingStyle:(NSPostingStyle)postingStyle coalesceMask:(NSNotificationCoalescing)coalesceMask forModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
	//	[Export ("enqueueNotification:postingStyle:coalesceMask:forModes:")]
	//	void EnqueueNotification (NSNotification notification, NSPostingStyle postingStyle, NSNotificationCoalescing coalesceMask, [NullAllowed] string[] modes);

	//	// -(void)dequeueNotificationsMatching:(NSNotification * _Nonnull)notification coalesceMask:(NSUInteger)coalesceMask;
	//	[Export ("dequeueNotificationsMatching:coalesceMask:")]
	//	void DequeueNotificationsMatching (NSNotification notification, nuint coalesceMask);
	//}

	//// @interface NSNull : NSObject <NSCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSNull : INSCopying, INSSecureCoding
	//{
	//	// +(NSNull * _Nonnull)null;
	//	[Static]
	//	[Export ("null")]
	//	[Verify (MethodToProperty)]
	//	NSNull Null { get; }
	//}

	//// @interface NSOperation : NSObject
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSOperation
	//{
	//	// -(void)start;
	//	[Export ("start")]
	//	void Start ();

	//	// -(void)main;
	//	[Export ("main")]
	//	void Main ();

	//	// @property (readonly, getter = isCancelled) BOOL cancelled;
	//	[Export ("cancelled")]
	//	bool Cancelled { [Bind ("isCancelled")] get; }

	//	// -(void)cancel;
	//	[Export ("cancel")]
	//	void Cancel ();

	//	// @property (readonly, getter = isExecuting) BOOL executing;
	//	[Export ("executing")]
	//	bool Executing { [Bind ("isExecuting")] get; }

	//	// @property (readonly, getter = isFinished) BOOL finished;
	//	[Export ("finished")]
	//	bool Finished { [Bind ("isFinished")] get; }

	//	// @property (readonly, getter = isConcurrent) BOOL concurrent;
	//	[Export ("concurrent")]
	//	bool Concurrent { [Bind ("isConcurrent")] get; }

	//	// @property (readonly, getter = isAsynchronous) BOOL asynchronous __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (7, 0)]
	//	[Export ("asynchronous")]
	//	bool Asynchronous { [Bind ("isAsynchronous")] get; }

	//	// @property (readonly, getter = isReady) BOOL ready;
	//	[Export ("ready")]
	//	bool Ready { [Bind ("isReady")] get; }

	//	// -(void)addDependency:(NSOperation * _Nonnull)op;
	//	[Export ("addDependency:")]
	//	void AddDependency (NSOperation op);

	//	// -(void)removeDependency:(NSOperation * _Nonnull)op;
	//	[Export ("removeDependency:")]
	//	void RemoveDependency (NSOperation op);

	//	// @property (readonly, copy) NSArray<NSOperation *> * _Nonnull dependencies;
	//	[Export ("dependencies", ArgumentSemantic.Copy)]
	//	NSOperation[] Dependencies { get; }

	//	// @property NSOperationQueuePriority queuePriority;
	//	[Export ("queuePriority", ArgumentSemantic.Assign)]
	//	NSOperationQueuePriority QueuePriority { get; set; }

	//	// @property (copy) void (^ _Nullable)(void) completionBlock __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("completionBlock", ArgumentSemantic.Copy)]
	//	Action CompletionBlock { get; set; }

	//	// -(void)waitUntilFinished __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("waitUntilFinished")]
	//	void WaitUntilFinished ();

	//	// @property double threadPriority __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=4.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.6, deprecated=10.10)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Not supported")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Not supported")]
	//	[Introduced (PlatformName.MacOSX, 10, 6, message: "Not supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Not supported")]
	//	[Export ("threadPriority")]
	//	double ThreadPriority { get; set; }

	//	// @property NSQualityOfService qualityOfService __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[Export ("qualityOfService", ArgumentSemantic.Assign)]
	//	NSQualityOfService QualityOfService { get; set; }

	//	// @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }
	//}

	//// @interface NSBlockOperation : NSOperation
	//[iOS (4,0)]
	//[BaseType (typeof(NSOperation))]
	//interface NSBlockOperation
	//{
	//	// +(instancetype _Nonnull)blockOperationWithBlock:(void (^ _Nonnull)(void))block;
	//	[Static]
	//	[Export ("blockOperationWithBlock:")]
	//	NSBlockOperation BlockOperationWithBlock (Action block);

	//	// -(void)addExecutionBlock:(void (^ _Nonnull)(void))block;
	//	[Export ("addExecutionBlock:")]
	//	void AddExecutionBlock (Action block);

	//	// @property (readonly, copy) NSArray<void (^)(void)> * _Nonnull executionBlocks;
	//	[Export ("executionBlocks", ArgumentSemantic.Copy)]
	//	Action[] ExecutionBlocks { get; }
	//}

	//// @interface NSInvocationOperation : NSOperation
	//[iOS (2,0)]
	//[BaseType (typeof(NSOperation))]
	//interface NSInvocationOperation
	//{
	//	// -(instancetype _Nullable)initWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)sel object:(id _Nullable)arg;
	//	[Export ("initWithTarget:selector:object:")]
	//	IntPtr Constructor (NSObject target, Selector sel, [NullAllowed] NSObject arg);

	//	// -(instancetype _Nonnull)initWithInvocation:(NSInvocation * _Nonnull)inv __attribute__((objc_designated_initializer));
	//	[Export ("initWithInvocation:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSInvocation inv);

	//	// @property (readonly, retain) NSInvocation * _Nonnull invocation;
	//	[Export ("invocation", ArgumentSemantic.Retain)]
	//	NSInvocation Invocation { get; }

	//	// @property (readonly, retain) id _Nullable result;
	//	[NullAllowed, Export ("result", ArgumentSemantic.Retain)]
	//	NSObject Result { get; }
	//}

	//// @interface NSOperationQueue : NSObject
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSOperationQueue
	//{
	//	// -(void)addOperation:(NSOperation * _Nonnull)op;
	//	[Export ("addOperation:")]
	//	void AddOperation (NSOperation op);

	//	// -(void)addOperations:(NSArray<NSOperation *> * _Nonnull)ops waitUntilFinished:(BOOL)wait __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("addOperations:waitUntilFinished:")]
	//	void AddOperations (NSOperation[] ops, bool wait);

	//	// -(void)addOperationWithBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("addOperationWithBlock:")]
	//	void AddOperationWithBlock (Action block);

	//	// @property (readonly, copy) NSArray<__kindof NSOperation *> * _Nonnull operations;
	//	[Export ("operations", ArgumentSemantic.Copy)]
	//	NSOperation[] Operations { get; }

	//	// @property (readonly) NSUInteger operationCount __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("operationCount")]
	//	nuint OperationCount { get; }

	//	// @property NSInteger maxConcurrentOperationCount;
	//	[Export ("maxConcurrentOperationCount")]
	//	nint MaxConcurrentOperationCount { get; set; }

	//	// @property (getter = isSuspended) BOOL suspended;
	//	[Export ("suspended")]
	//	bool Suspended { [Bind ("isSuspended")] get; set; }

	//	// @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }

	//	// @property NSQualityOfService qualityOfService __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[Export ("qualityOfService", ArgumentSemantic.Assign)]
	//	NSQualityOfService QualityOfService { get; set; }

	//	// @property (assign) dispatch_queue_t _Nullable underlyingQueue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[NullAllowed, Export ("underlyingQueue", ArgumentSemantic.Assign)]
	//	DispatchQueue UnderlyingQueue { get; set; }

	//	// -(void)cancelAllOperations;
	//	[Export ("cancelAllOperations")]
	//	void CancelAllOperations ();

	//	// -(void)waitUntilAllOperationsAreFinished;
	//	[Export ("waitUntilAllOperationsAreFinished")]
	//	void WaitUntilAllOperationsAreFinished ();

	//	// @property (readonly, strong, class) NSOperationQueue * _Nullable currentQueue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Static]
	//	[NullAllowed, Export ("currentQueue", ArgumentSemantic.Strong)]
	//	NSOperationQueue CurrentQueue { get; }

	//	// @property (readonly, strong, class) NSOperationQueue * _Nonnull mainQueue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Static]
	//	[Export ("mainQueue", ArgumentSemantic.Strong)]
	//	NSOperationQueue MainQueue { get; }
	//}

	//// @interface NSOrthography : NSObject <NSCopying, NSSecureCoding>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSOrthography : INSCopying, INSSecureCoding
	//{
	//	// @property (readonly, copy) NSString * _Nonnull dominantScript;
	//	[Export ("dominantScript")]
	//	string DominantScript { get; }

	//	// @property (readonly, copy) NSDictionary<NSString *,NSArray<NSString *> *> * _Nonnull languageMap;
	//	[Export ("languageMap", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSArray<NSString>> LanguageMap { get; }

	//	// -(instancetype _Nonnull)initWithDominantScript:(NSString * _Nonnull)script languageMap:(NSDictionary<NSString *,NSArray<NSString *> *> * _Nonnull)map __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("initWithDominantScript:languageMap:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string script, NSDictionary<NSString, NSArray<NSString>> map);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface NSOrthographyExtended (NSOrthography)
	//[Category]
	//[BaseType (typeof(NSOrthography))]
	//interface NSOrthography_NSOrthographyExtended
	//{
	//	// -(NSArray<NSString *> * _Nullable)languagesForScript:(NSString * _Nonnull)script __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("languagesForScript:")]
	//	[return: NullAllowed]
	//	string[] LanguagesForScript (string script);

	//	// -(NSString * _Nullable)dominantLanguageForScript:(NSString * _Nonnull)script __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("dominantLanguageForScript:")]
	//	[return: NullAllowed]
	//	string DominantLanguageForScript (string script);

	//	// @property (readonly, copy) NSString * _Nonnull dominantLanguage __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("dominantLanguage")]
	//	string DominantLanguage { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull allScripts __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("allScripts", ArgumentSemantic.Copy)]
	//	string[] AllScripts { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull allLanguages __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("allLanguages", ArgumentSemantic.Copy)]
	//	string[] AllLanguages { get; }

	//	// +(instancetype _Nonnull)defaultOrthographyForLanguage:(NSString * _Nonnull)language __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("defaultOrthographyForLanguage:")]
	//	NSOrthography DefaultOrthographyForLanguage (string language);
	//}

	//// @interface NSOrthographyCreation (NSOrthography)
	//[Category]
	//[BaseType (typeof(NSOrthography))]
	//interface NSOrthography_NSOrthographyCreation
	//{
	//	// +(instancetype _Nonnull)orthographyWithDominantScript:(NSString * _Nonnull)script languageMap:(NSDictionary<NSString *,NSArray<NSString *> *> * _Nonnull)map __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("orthographyWithDominantScript:languageMap:")]
	//	NSOrthography OrthographyWithDominantScript (string script, NSDictionary<NSString, NSArray<NSString>> map);
	//}

	//// @interface NSPointerArray : NSObject <NSFastEnumeration, NSCopying, NSSecureCoding>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSPointerArray : INSFastEnumeration, INSCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nonnull)initWithOptions:(NSPointerFunctionsOptions)options __attribute__((objc_designated_initializer));
	//	[Export ("initWithOptions:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSPointerFunctionsOptions options);

	//	// -(instancetype _Nonnull)initWithPointerFunctions:(NSPointerFunctions * _Nonnull)functions __attribute__((objc_designated_initializer));
	//	[Export ("initWithPointerFunctions:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSPointerFunctions functions);

	//	// +(NSPointerArray * _Nonnull)pointerArrayWithOptions:(NSPointerFunctionsOptions)options;
	//	[Static]
	//	[Export ("pointerArrayWithOptions:")]
	//	NSPointerArray PointerArrayWithOptions (NSPointerFunctionsOptions options);

	//	// +(NSPointerArray * _Nonnull)pointerArrayWithPointerFunctions:(NSPointerFunctions * _Nonnull)functions;
	//	[Static]
	//	[Export ("pointerArrayWithPointerFunctions:")]
	//	NSPointerArray PointerArrayWithPointerFunctions (NSPointerFunctions functions);

	//	// @property (readonly, copy) NSPointerFunctions * _Nonnull pointerFunctions;
	//	[Export ("pointerFunctions", ArgumentSemantic.Copy)]
	//	NSPointerFunctions PointerFunctions { get; }

	//	// -(void * _Nullable)pointerAtIndex:(NSUInteger)index;
	//	[Export ("pointerAtIndex:")]
	//	[return: NullAllowed]
	//	unsafe void* PointerAtIndex (nuint index);

	//	// -(void)addPointer:(void * _Nullable)pointer;
	//	[Export ("addPointer:")]
	//	unsafe void AddPointer ([NullAllowed] void* pointer);

	//	// -(void)removePointerAtIndex:(NSUInteger)index;
	//	[Export ("removePointerAtIndex:")]
	//	void RemovePointerAtIndex (nuint index);

	//	// -(void)insertPointer:(void * _Nullable)item atIndex:(NSUInteger)index;
	//	[Export ("insertPointer:atIndex:")]
	//	unsafe void InsertPointer ([NullAllowed] void* item, nuint index);

	//	// -(void)replacePointerAtIndex:(NSUInteger)index withPointer:(void * _Nullable)item;
	//	[Export ("replacePointerAtIndex:withPointer:")]
	//	unsafe void ReplacePointerAtIndex (nuint index, [NullAllowed] void* item);

	//	// -(void)compact;
	//	[Export ("compact")]
	//	void Compact ();

	//	// @property NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; set; }
	//}

	//// @interface NSPointerArrayConveniences (NSPointerArray)
	//[Category]
	//[BaseType (typeof(NSPointerArray))]
	//interface NSPointerArray_NSPointerArrayConveniences
	//{
	//	// +(NSPointerArray * _Nonnull)strongObjectsPointerArray __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Static]
	//	[Export ("strongObjectsPointerArray")]
	//	[Verify (MethodToProperty)]
	//	NSPointerArray StrongObjectsPointerArray { get; }

	//	// +(NSPointerArray * _Nonnull)weakObjectsPointerArray __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Static]
	//	[Export ("weakObjectsPointerArray")]
	//	[Verify (MethodToProperty)]
	//	NSPointerArray WeakObjectsPointerArray { get; }

	//	// @property (readonly, copy) NSArray * _Nonnull allObjects;
	//	[Export ("allObjects", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] AllObjects { get; }
	//}

	//// @interface NSPort : NSObject <NSCopying, NSCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSPort : INSCopying, INSCoding
	//{
	//	// +(NSPort * _Nonnull)port;
	//	[Static]
	//	[Export ("port")]
	//	[Verify (MethodToProperty)]
	//	NSPort Port { get; }

	//	// -(void)invalidate;
	//	[Export ("invalidate")]
	//	void Invalidate ();

	//	// @property (readonly, getter = isValid) BOOL valid;
	//	[Export ("valid")]
	//	bool Valid { [Bind ("isValid")] get; }

	//	// -(id<NSPortDelegate> _Nullable)delegate;
	//	// -(void)setDelegate:(id<NSPortDelegate> _Nullable)anObject;
	//	[NullAllowed, Export ("delegate")]
	//	[Verify (MethodToProperty)]
	//	NSPortDelegate Delegate { get; set; }

	//	// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("scheduleInRunLoop:forMode:")]
	//	void ScheduleInRunLoop (NSRunLoop runLoop, string mode);

	//	// -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("removeFromRunLoop:forMode:")]
	//	void RemoveFromRunLoop (NSRunLoop runLoop, string mode);

	//	// @property (readonly) NSUInteger reservedSpaceLength;
	//	[Export ("reservedSpaceLength")]
	//	nuint ReservedSpaceLength { get; }

	//	// -(BOOL)sendBeforeDate:(NSDate * _Nonnull)limitDate components:(NSMutableArray * _Nullable)components from:(NSPort * _Nullable)receivePort reserved:(NSUInteger)headerSpaceReserved;
	//	[Export ("sendBeforeDate:components:from:reserved:")]
	//	bool SendBeforeDate (NSDate limitDate, [NullAllowed] NSMutableArray components, [NullAllowed] NSPort receivePort, nuint headerSpaceReserved);

	//	// -(BOOL)sendBeforeDate:(NSDate * _Nonnull)limitDate msgid:(NSUInteger)msgID components:(NSMutableArray * _Nullable)components from:(NSPort * _Nullable)receivePort reserved:(NSUInteger)headerSpaceReserved;
	//	[Export ("sendBeforeDate:msgid:components:from:reserved:")]
	//	bool SendBeforeDate (NSDate limitDate, nuint msgID, [NullAllowed] NSMutableArray components, [NullAllowed] NSPort receivePort, nuint headerSpaceReserved);
	//}

	//// @protocol NSPortDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSPortDelegate
	//{
	//	// @optional -(void)handlePortMessage:(NSPortMessage * _Nonnull)message;
	//	[Export ("handlePortMessage:")]
	//	void HandlePortMessage (NSPortMessage message);
	//}

	//// @interface NSMachPort : NSPort
	//[BaseType (typeof(NSPort))]
	//interface NSMachPort
	//{
	//	// +(NSPort * _Nonnull)portWithMachPort:(uint32_t)machPort;
	//	[Static]
	//	[Export ("portWithMachPort:")]
	//	NSPort PortWithMachPort (uint machPort);

	//	// -(instancetype _Nonnull)initWithMachPort:(uint32_t)machPort __attribute__((objc_designated_initializer));
	//	[Export ("initWithMachPort:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (uint machPort);

	//	// -(id<NSMachPortDelegate> _Nullable)delegate;
	//	// -(void)setDelegate:(id<NSMachPortDelegate> _Nullable)anObject;
	//	[NullAllowed, Export ("delegate")]
	//	[Verify (MethodToProperty)]
	//	NSMachPortDelegate Delegate { get; set; }

	//	// +(NSPort * _Nonnull)portWithMachPort:(uint32_t)machPort options:(NSMachPortOptions)f __attribute__((availability(ios, introduced=2.0)));
	//	[iOS (2,0)]
	//	[Static]
	//	[Export ("portWithMachPort:options:")]
	//	NSPort PortWithMachPort (uint machPort, NSMachPortOptions f);

	//	// -(instancetype _Nonnull)initWithMachPort:(uint32_t)machPort options:(NSMachPortOptions)f __attribute__((objc_designated_initializer)) __attribute__((availability(ios, introduced=2.0)));
	//	[iOS (2,0)]
	//	[Export ("initWithMachPort:options:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (uint machPort, NSMachPortOptions f);

	//	// @property (readonly) uint32_t machPort;
	//	[Export ("machPort")]
	//	uint MachPort { get; }

	//	// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("scheduleInRunLoop:forMode:")]
	//	void ScheduleInRunLoop (NSRunLoop runLoop, string mode);

	//	// -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("removeFromRunLoop:forMode:")]
	//	void RemoveFromRunLoop (NSRunLoop runLoop, string mode);
	//}

	//// @protocol NSMachPortDelegate <NSPortDelegate>
	//[Protocol, Model]
	//interface NSMachPortDelegate : INSPortDelegate
	//{
	//	// @optional -(void)handleMachMessage:(void * _Nonnull)msg;
	//	[Export ("handleMachMessage:")]
	//	unsafe void HandleMachMessage (void* msg);
	//}

	//// @interface NSMessagePort : NSPort
	//[BaseType (typeof(NSPort))]
	//interface NSMessagePort
	//{
	//}

	//// @interface NSProcessInfo : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSProcessInfo
	//{
	//	// @property (readonly, strong, class) NSProcessInfo * _Nonnull processInfo;
	//	[Static]
	//	[Export ("processInfo", ArgumentSemantic.Strong)]
	//	NSProcessInfo ProcessInfo { get; }

	//	// @property (readonly, copy) NSDictionary<NSString *,NSString *> * _Nonnull environment;
	//	[Export ("environment", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSString> Environment { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull arguments;
	//	[Export ("arguments", ArgumentSemantic.Copy)]
	//	string[] Arguments { get; }

	//	// @property (readonly, copy) NSString * _Nonnull hostName;
	//	[Export ("hostName")]
	//	string HostName { get; }

	//	// @property (copy) NSString * _Nonnull processName;
	//	[Export ("processName")]
	//	string ProcessName { get; set; }

	//	// @property (readonly) int processIdentifier;
	//	[Export ("processIdentifier")]
	//	int ProcessIdentifier { get; }

	//	// @property (readonly, copy) NSString * _Nonnull globallyUniqueString;
	//	[Export ("globallyUniqueString")]
	//	string GloballyUniqueString { get; }

	//	// -(NSUInteger)operatingSystem __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
	//	[Export ("operatingSystem")]
	//	[Verify (MethodToProperty)]
	//	nuint OperatingSystem { get; }

	//	// -(NSString * _Nonnull)operatingSystemName __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
	//	[Export ("operatingSystemName")]
	//	[Verify (MethodToProperty)]
	//	string OperatingSystemName { get; }

	//	// @property (readonly, copy) NSString * _Nonnull operatingSystemVersionString;
	//	[Export ("operatingSystemVersionString")]
	//	string OperatingSystemVersionString { get; }

	//	// @property (readonly) NSOperatingSystemVersion operatingSystemVersion __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[Export ("operatingSystemVersion")]
	//	NSOperatingSystemVersion OperatingSystemVersion { get; }

	//	// @property (readonly) NSUInteger processorCount __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("processorCount")]
	//	nuint ProcessorCount { get; }

	//	// @property (readonly) NSUInteger activeProcessorCount __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("activeProcessorCount")]
	//	nuint ActiveProcessorCount { get; }

	//	// @property (readonly) unsigned long long physicalMemory __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("physicalMemory")]
	//	ulong PhysicalMemory { get; }

	//	// -(BOOL)isOperatingSystemAtLeastVersion:(NSOperatingSystemVersion)version __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("isOperatingSystemAtLeastVersion:")]
	//	bool IsOperatingSystemAtLeastVersion (NSOperatingSystemVersion version);

	//	// @property (readonly) NSTimeInterval systemUptime __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("systemUptime")]
	//	double SystemUptime { get; }

	//	// -(void)disableSuddenTermination __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.6)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,6)]
	//	[Export ("disableSuddenTermination")]
	//	void DisableSuddenTermination ();

	//	// -(void)enableSuddenTermination __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.6)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,6)]
	//	[Export ("enableSuddenTermination")]
	//	void EnableSuddenTermination ();

	//	// -(void)disableAutomaticTermination:(NSString * _Nonnull)reason __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,7)]
	//	[Export ("disableAutomaticTermination:")]
	//	void DisableAutomaticTermination (string reason);

	//	// -(void)enableAutomaticTermination:(NSString * _Nonnull)reason __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,7)]
	//	[Export ("enableAutomaticTermination:")]
	//	void EnableAutomaticTermination (string reason);

	//	// @property BOOL automaticTerminationSupportEnabled __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 7)]
	//	[Export ("automaticTerminationSupportEnabled")]
	//	bool AutomaticTerminationSupportEnabled { get; set; }
	//}

	//// @interface NSProcessInfoActivity (NSProcessInfo)
	//[Category]
	//[BaseType (typeof(NSProcessInfo))]
	//interface NSProcessInfo_NSProcessInfoActivity
	//{
	//	// -(id<NSObject> _Nonnull)beginActivityWithOptions:(NSActivityOptions)options reason:(NSString * _Nonnull)reason __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("beginActivityWithOptions:reason:")]
	//	NSObject BeginActivityWithOptions (NSActivityOptions options, string reason);

	//	// -(void)endActivity:(id<NSObject> _Nonnull)activity __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("endActivity:")]
	//	void EndActivity (NSObject activity);

	//	// -(void)performActivityWithOptions:(NSActivityOptions)options reason:(NSString * _Nonnull)reason usingBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("performActivityWithOptions:reason:usingBlock:")]
	//	void PerformActivityWithOptions (NSActivityOptions options, string reason, Action block);

	//	// -(void)performExpiringActivityWithReason:(NSString * _Nonnull)reason usingBlock:(void (^ _Nonnull)(BOOL))block __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.2)));
	//	[Watch (2,0), TV (9,0), NoMac, iOS (8,2)]
	//	[Export ("performExpiringActivityWithReason:usingBlock:")]
	//	void PerformExpiringActivityWithReason (string reason, Action<bool> block);
	//}

	//// @interface NSUserInformation (NSProcessInfo)
	//[Category]
	//[BaseType (typeof(NSProcessInfo))]
	//interface NSProcessInfo_NSUserInformation
	//{
	//	// @property (readonly, copy) NSString * _Nonnull userName __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.12)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 12)]
	//	[Export ("userName")]
	//	string UserName { get; }

	//	// @property (readonly, copy) NSString * _Nonnull fullUserName __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.12)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 12)]
	//	[Export ("fullUserName")]
	//	string FullUserName { get; }
	//}

	//// @interface NSProcessInfoThermalState (NSProcessInfo)
	//[Category]
	//[BaseType (typeof(NSProcessInfo))]
	//interface NSProcessInfo_NSProcessInfoThermalState
	//{
	//	// @property (readonly) NSProcessInfoThermalState thermalState __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.10.3)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 10, 3), iOS (11, 0)]
	//	[Export ("thermalState")]
	//	NSProcessInfoThermalState ThermalState { get; }
	//}

	//// @interface NSProcessInfoPowerState (NSProcessInfo)
	//[Category]
	//[BaseType (typeof(NSProcessInfo))]
	//interface NSProcessInfo_NSProcessInfoPowerState
	//{
	//	// @property (readonly, getter = isLowPowerModeEnabled) BOOL lowPowerModeEnabled __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 0)]
	//	[Export ("lowPowerModeEnabled")]
	//	bool LowPowerModeEnabled { [Bind ("isLowPowerModeEnabled")] get; }
	//}

	//// @interface NSProxy <NSObject>
	//[BaseType (typeof(NSObject))]
	//interface NSProxy
	//{
	//	// +(id _Nonnull)alloc;
	//	[Static]
	//	[Export ("alloc")]
	//	[Verify (MethodToProperty)]
	//	NSObject Alloc { get; }

	//	// +(id _Nonnull)allocWithZone:(NSZone * _Nullable)zone;
	//	[Static]
	//	[Export ("allocWithZone:")]
	//	unsafe NSObject AllocWithZone ([NullAllowed] NSZone* zone);

	//	// +(Class _Nonnull)class;
	//	[Static]
	//	[Export ("class")]
	//	[Verify (MethodToProperty)]
	//	Class Class { get; }

	//	// -(void)forwardInvocation:(NSInvocation * _Nonnull)invocation;
	//	[Export ("forwardInvocation:")]
	//	void ForwardInvocation (NSInvocation invocation);

	//	// -(NSMethodSignature * _Nullable)methodSignatureForSelector:(SEL _Nonnull)sel;
	//	[Export ("methodSignatureForSelector:")]
	//	[return: NullAllowed]
	//	NSMethodSignature MethodSignatureForSelector (Selector sel);

	//	// -(void)dealloc;
	//	[Export ("dealloc")]
	//	void Dealloc ();

	//	// -(void)finalize;
	//	[Export ("finalize")]
	//	void Finalize ();

	//	// @property (readonly, copy) NSString * _Nonnull description;
	//	[Export ("description")]
	//	string Description { get; }

	//	// @property (readonly, copy) NSString * _Nonnull debugDescription;
	//	[Export ("debugDescription")]
	//	string DebugDescription { get; }

	//	// +(BOOL)respondsToSelector:(SEL _Nonnull)aSelector;
	//	[Static]
	//	[Export ("respondsToSelector:")]
	//	bool RespondsToSelector (Selector aSelector);
	//}

	//// @interface NSTextCheckingResult : NSObject <NSCopying, NSSecureCoding>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSTextCheckingResult : INSCopying, INSSecureCoding
	//{
	//	// @property (readonly) NSTextCheckingType resultType;
	//	[Export ("resultType")]
	//	NSTextCheckingType ResultType { get; }

	//	// @property (readonly) NSRange range;
	//	[Export ("range")]
	//	NSRange Range { get; }
	//}

	//// @interface NSTextCheckingResultOptional (NSTextCheckingResult)
	//[Category]
	//[BaseType (typeof(NSTextCheckingResult))]
	//interface NSTextCheckingResult_NSTextCheckingResultOptional
	//{
	//	// @property (readonly, copy) NSOrthography * _Nullable orthography;
	//	[NullAllowed, Export ("orthography", ArgumentSemantic.Copy)]
	//	NSOrthography Orthography { get; }

	//	// @property (readonly, copy) NSArray<NSDictionary<NSString *,id> *> * _Nullable grammarDetails;
	//	[NullAllowed, Export ("grammarDetails", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject>[] GrammarDetails { get; }

	//	// @property (readonly, copy) NSDate * _Nullable date;
	//	[NullAllowed, Export ("date", ArgumentSemantic.Copy)]
	//	NSDate Date { get; }

	//	// @property (readonly, copy) NSTimeZone * _Nullable timeZone;
	//	[NullAllowed, Export ("timeZone", ArgumentSemantic.Copy)]
	//	NSTimeZone TimeZone { get; }

	//	// @property (readonly) NSTimeInterval duration;
	//	[Export ("duration")]
	//	double Duration { get; }

	//	// @property (readonly, copy) NSDictionary<NSTextCheckingKey,NSString *> * _Nullable components __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[NullAllowed, Export ("components", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSString> Components { get; }

	//	// @property (readonly, copy) NSURL * _Nullable URL;
	//	[NullAllowed, Export ("URL", ArgumentSemantic.Copy)]
	//	NSUrl URL { get; }

	//	// @property (readonly, copy) NSString * _Nullable replacementString;
	//	[NullAllowed, Export ("replacementString")]
	//	string ReplacementString { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nullable alternativeStrings __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[NullAllowed, Export ("alternativeStrings", ArgumentSemantic.Copy)]
	//	string[] AlternativeStrings { get; }

	//	// @property (readonly, copy) NSRegularExpression * _Nullable regularExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[NullAllowed, Export ("regularExpression", ArgumentSemantic.Copy)]
	//	NSRegularExpression RegularExpression { get; }

	//	// @property (readonly, copy) NSString * _Nullable phoneNumber __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[NullAllowed, Export ("phoneNumber")]
	//	string PhoneNumber { get; }

	//	// @property (readonly) NSUInteger numberOfRanges __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[Export ("numberOfRanges")]
	//	nuint NumberOfRanges { get; }

	//	// -(NSRange)rangeAtIndex:(NSUInteger)idx __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,0)]
	//	[Export ("rangeAtIndex:")]
	//	NSRange RangeAtIndex (nuint idx);

	//	// -(NSRange)rangeWithName:(NSString * _Nonnull)name __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("rangeWithName:")]
	//	NSRange RangeWithName (string name);

	//	// -(NSTextCheckingResult * _Nonnull)resultByAdjustingRangesWithOffset:(NSInteger)offset __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("resultByAdjustingRangesWithOffset:")]
	//	NSTextCheckingResult ResultByAdjustingRangesWithOffset (nint offset);

	//	// @property (readonly, copy) NSDictionary<NSTextCheckingKey,NSString *> * _Nullable addressComponents;
	//	[NullAllowed, Export ("addressComponents", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSString> AddressComponents { get; }
	//}

	//// @interface NSTextCheckingResultCreation (NSTextCheckingResult)
	//[Category]
	//[BaseType (typeof(NSTextCheckingResult))]
	//interface NSTextCheckingResult_NSTextCheckingResultCreation
	//{
	//	// +(NSTextCheckingResult * _Nonnull)orthographyCheckingResultWithRange:(NSRange)range orthography:(NSOrthography * _Nonnull)orthography;
	//	[Static]
	//	[Export ("orthographyCheckingResultWithRange:orthography:")]
	//	NSTextCheckingResult OrthographyCheckingResultWithRange (NSRange range, NSOrthography orthography);

	//	// +(NSTextCheckingResult * _Nonnull)spellCheckingResultWithRange:(NSRange)range;
	//	[Static]
	//	[Export ("spellCheckingResultWithRange:")]
	//	NSTextCheckingResult SpellCheckingResultWithRange (NSRange range);

	//	// +(NSTextCheckingResult * _Nonnull)grammarCheckingResultWithRange:(NSRange)range details:(NSArray<NSDictionary<NSString *,id> *> * _Nonnull)details;
	//	[Static]
	//	[Export ("grammarCheckingResultWithRange:details:")]
	//	NSTextCheckingResult GrammarCheckingResultWithRange (NSRange range, NSDictionary<NSString, NSObject>[] details);

	//	// +(NSTextCheckingResult * _Nonnull)dateCheckingResultWithRange:(NSRange)range date:(NSDate * _Nonnull)date;
	//	[Static]
	//	[Export ("dateCheckingResultWithRange:date:")]
	//	NSTextCheckingResult DateCheckingResultWithRange (NSRange range, NSDate date);

	//	// +(NSTextCheckingResult * _Nonnull)dateCheckingResultWithRange:(NSRange)range date:(NSDate * _Nonnull)date timeZone:(NSTimeZone * _Nonnull)timeZone duration:(NSTimeInterval)duration;
	//	[Static]
	//	[Export ("dateCheckingResultWithRange:date:timeZone:duration:")]
	//	NSTextCheckingResult DateCheckingResultWithRange (NSRange range, NSDate date, NSTimeZone timeZone, double duration);

	//	// +(NSTextCheckingResult * _Nonnull)addressCheckingResultWithRange:(NSRange)range components:(NSDictionary<NSTextCheckingKey,NSString *> * _Nonnull)components;
	//	[Static]
	//	[Export ("addressCheckingResultWithRange:components:")]
	//	NSTextCheckingResult AddressCheckingResultWithRange (NSRange range, NSDictionary<NSString, NSString> components);

	//	// +(NSTextCheckingResult * _Nonnull)linkCheckingResultWithRange:(NSRange)range URL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("linkCheckingResultWithRange:URL:")]
	//	NSTextCheckingResult LinkCheckingResultWithRange (NSRange range, NSUrl url);

	//	// +(NSTextCheckingResult * _Nonnull)quoteCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
	//	[Static]
	//	[Export ("quoteCheckingResultWithRange:replacementString:")]
	//	NSTextCheckingResult QuoteCheckingResultWithRange (NSRange range, string replacementString);

	//	// +(NSTextCheckingResult * _Nonnull)dashCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
	//	[Static]
	//	[Export ("dashCheckingResultWithRange:replacementString:")]
	//	NSTextCheckingResult DashCheckingResultWithRange (NSRange range, string replacementString);

	//	// +(NSTextCheckingResult * _Nonnull)replacementCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
	//	[Static]
	//	[Export ("replacementCheckingResultWithRange:replacementString:")]
	//	NSTextCheckingResult ReplacementCheckingResultWithRange (NSRange range, string replacementString);

	//	// +(NSTextCheckingResult * _Nonnull)correctionCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
	//	[Static]
	//	[Export ("correctionCheckingResultWithRange:replacementString:")]
	//	NSTextCheckingResult CorrectionCheckingResultWithRange (NSRange range, string replacementString);

	//	// +(NSTextCheckingResult * _Nonnull)correctionCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString alternativeStrings:(NSArray<NSString *> * _Nonnull)alternativeStrings __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Static]
	//	[Export ("correctionCheckingResultWithRange:replacementString:alternativeStrings:")]
	//	NSTextCheckingResult CorrectionCheckingResultWithRange (NSRange range, string replacementString, string[] alternativeStrings);

	//	// +(NSTextCheckingResult * _Nonnull)regularExpressionCheckingResultWithRanges:(NSRangePointer _Nonnull)ranges count:(NSUInteger)count regularExpression:(NSRegularExpression * _Nonnull)regularExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,0)]
	//	[Static]
	//	[Export ("regularExpressionCheckingResultWithRanges:count:regularExpression:")]
	//	unsafe NSTextCheckingResult RegularExpressionCheckingResultWithRanges (NSRangePointer* ranges, nuint count, NSRegularExpression regularExpression);

	//	// +(NSTextCheckingResult * _Nonnull)phoneNumberCheckingResultWithRange:(NSRange)range phoneNumber:(NSString * _Nonnull)phoneNumber __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,0)]
	//	[Static]
	//	[Export ("phoneNumberCheckingResultWithRange:phoneNumber:")]
	//	NSTextCheckingResult PhoneNumberCheckingResultWithRange (NSRange range, string phoneNumber);

	//	// +(NSTextCheckingResult * _Nonnull)transitInformationCheckingResultWithRange:(NSRange)range components:(NSDictionary<NSTextCheckingKey,NSString *> * _Nonnull)components __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,0)]
	//	[Static]
	//	[Export ("transitInformationCheckingResultWithRange:components:")]
	//	NSTextCheckingResult TransitInformationCheckingResultWithRange (NSRange range, NSDictionary<NSString, NSString> components);
	//}

	//// @interface NSRegularExpression : NSObject <NSCopying, NSSecureCoding>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSRegularExpression : INSCopying, INSSecureCoding
	//{
	//	// +(NSRegularExpression * _Nullable)regularExpressionWithPattern:(NSString * _Nonnull)pattern options:(NSRegularExpressionOptions)options error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("regularExpressionWithPattern:options:error:")]
	//	[return: NullAllowed]
	//	NSRegularExpression RegularExpressionWithPattern (string pattern, NSRegularExpressionOptions options, [NullAllowed] out NSError error);

	//	// -(instancetype _Nullable)initWithPattern:(NSString * _Nonnull)pattern options:(NSRegularExpressionOptions)options error:(NSError * _Nullable * _Nullable)error __attribute__((objc_designated_initializer));
	//	[Export ("initWithPattern:options:error:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string pattern, NSRegularExpressionOptions options, [NullAllowed] out NSError error);

	//	// @property (readonly, copy) NSString * _Nonnull pattern;
	//	[Export ("pattern")]
	//	string Pattern { get; }

	//	// @property (readonly) NSRegularExpressionOptions options;
	//	[Export ("options")]
	//	NSRegularExpressionOptions Options { get; }

	//	// @property (readonly) NSUInteger numberOfCaptureGroups;
	//	[Export ("numberOfCaptureGroups")]
	//	nuint NumberOfCaptureGroups { get; }

	//	// +(NSString * _Nonnull)escapedPatternForString:(NSString * _Nonnull)string;
	//	[Static]
	//	[Export ("escapedPatternForString:")]
	//	string EscapedPatternForString (string @string);
	//}

	//// @interface NSMatching (NSRegularExpression)
	//[Category]
	//[BaseType (typeof(NSRegularExpression))]
	//interface NSRegularExpression_NSMatching
	//{
	//	// -(void)enumerateMatchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range usingBlock:(void (^ _Nonnull)(NSTextCheckingResult * _Nullable, NSMatchingFlags, BOOL * _Nonnull))block;
	//	[Export ("enumerateMatchesInString:options:range:usingBlock:")]
	//	unsafe void EnumerateMatchesInString (string @string, NSMatchingOptions options, NSRange range, Action<NSTextCheckingResult, NSMatchingFlags, bool*> block);

	//	// -(NSArray<NSTextCheckingResult *> * _Nonnull)matchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
	//	[Export ("matchesInString:options:range:")]
	//	NSTextCheckingResult[] MatchesInString (string @string, NSMatchingOptions options, NSRange range);

	//	// -(NSUInteger)numberOfMatchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
	//	[Export ("numberOfMatchesInString:options:range:")]
	//	nuint NumberOfMatchesInString (string @string, NSMatchingOptions options, NSRange range);

	//	// -(NSTextCheckingResult * _Nullable)firstMatchInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
	//	[Export ("firstMatchInString:options:range:")]
	//	[return: NullAllowed]
	//	NSTextCheckingResult FirstMatchInString (string @string, NSMatchingOptions options, NSRange range);

	//	// -(NSRange)rangeOfFirstMatchInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
	//	[Export ("rangeOfFirstMatchInString:options:range:")]
	//	NSRange RangeOfFirstMatchInString (string @string, NSMatchingOptions options, NSRange range);
	//}

	//// @interface NSReplacement (NSRegularExpression)
	//[Category]
	//[BaseType (typeof(NSRegularExpression))]
	//interface NSRegularExpression_NSReplacement
	//{
	//	// -(NSString * _Nonnull)stringByReplacingMatchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range withTemplate:(NSString * _Nonnull)templ;
	//	[Export ("stringByReplacingMatchesInString:options:range:withTemplate:")]
	//	string StringByReplacingMatchesInString (string @string, NSMatchingOptions options, NSRange range, string templ);

	//	// -(NSUInteger)replaceMatchesInString:(NSMutableString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range withTemplate:(NSString * _Nonnull)templ;
	//	[Export ("replaceMatchesInString:options:range:withTemplate:")]
	//	nuint ReplaceMatchesInString (NSMutableString @string, NSMatchingOptions options, NSRange range, string templ);

	//	// -(NSString * _Nonnull)replacementStringForResult:(NSTextCheckingResult * _Nonnull)result inString:(NSString * _Nonnull)string offset:(NSInteger)offset template:(NSString * _Nonnull)templ;
	//	[Export ("replacementStringForResult:inString:offset:template:")]
	//	string ReplacementStringForResult (NSTextCheckingResult result, string @string, nint offset, string templ);

	//	// +(NSString * _Nonnull)escapedTemplateForString:(NSString * _Nonnull)string;
	//	[Static]
	//	[Export ("escapedTemplateForString:")]
	//	string EscapedTemplateForString (string @string);
	//}

	//// @interface NSDataDetector : NSRegularExpression
	//[iOS (4,0)]
	//[BaseType (typeof(NSRegularExpression))]
	//interface NSDataDetector
	//{
	//	// +(NSDataDetector * _Nullable)dataDetectorWithTypes:(NSTextCheckingTypes)checkingTypes error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("dataDetectorWithTypes:error:")]
	//	[return: NullAllowed]
	//	NSDataDetector DataDetectorWithTypes (ulong checkingTypes, [NullAllowed] out NSError error);

	//	// -(instancetype _Nullable)initWithTypes:(NSTextCheckingTypes)checkingTypes error:(NSError * _Nullable * _Nullable)error __attribute__((objc_designated_initializer));
	//	[Export ("initWithTypes:error:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (ulong checkingTypes, [NullAllowed] out NSError error);

	//	// @property (readonly) NSTextCheckingTypes checkingTypes;
	//	[Export ("checkingTypes")]
	//	ulong CheckingTypes { get; }
	//}

	//// @interface NSSortDescriptor : NSObject <NSSecureCoding, NSCopying>
	//[BaseType (typeof(NSObject))]
	//interface NSSortDescriptor : INSSecureCoding, INSCopying
	//{
	//	// +(instancetype _Nonnull)sortDescriptorWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("sortDescriptorWithKey:ascending:")]
	//	NSSortDescriptor SortDescriptorWithKey ([NullAllowed] string key, bool ascending);

	//	// +(instancetype _Nonnull)sortDescriptorWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending selector:(SEL _Nullable)selector __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("sortDescriptorWithKey:ascending:selector:")]
	//	NSSortDescriptor SortDescriptorWithKey ([NullAllowed] string key, bool ascending, [NullAllowed] Selector selector);

	//	// -(instancetype _Nonnull)initWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending;
	//	[Export ("initWithKey:ascending:")]
	//	IntPtr Constructor ([NullAllowed] string key, bool ascending);

	//	// -(instancetype _Nonnull)initWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending selector:(SEL _Nullable)selector;
	//	[Export ("initWithKey:ascending:selector:")]
	//	IntPtr Constructor ([NullAllowed] string key, bool ascending, [NullAllowed] Selector selector);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder;
	//	[Export ("initWithCoder:")]
	//	IntPtr Constructor (NSCoder coder);

	//	// @property (readonly, copy) NSString * _Nullable key;
	//	[NullAllowed, Export ("key")]
	//	string Key { get; }

	//	// @property (readonly) BOOL ascending;
	//	[Export ("ascending")]
	//	bool Ascending { get; }

	//	// @property (readonly) SEL _Nullable selector;
	//	[NullAllowed, Export ("selector")]
	//	Selector Selector { get; }

	//	// -(void)allowEvaluation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("allowEvaluation")]
	//	void AllowEvaluation ();

	//	// +(instancetype _Nonnull)sortDescriptorWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending comparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("sortDescriptorWithKey:ascending:comparator:")]
	//	NSSortDescriptor SortDescriptorWithKey ([NullAllowed] string key, bool ascending, NSComparator cmptr);

	//	// -(instancetype _Nonnull)initWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending comparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("initWithKey:ascending:comparator:")]
	//	IntPtr Constructor ([NullAllowed] string key, bool ascending, NSComparator cmptr);

	//	// @property (readonly) NSComparator _Nonnull comparator __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("comparator")]
	//	NSComparator Comparator { get; }

	//	// -(NSComparisonResult)compareObject:(id _Nonnull)object1 toObject:(id _Nonnull)object2;
	//	[Export ("compareObject:toObject:")]
	//	NSComparisonResult CompareObject (NSObject object1, NSObject object2);

	//	// @property (readonly, retain) id _Nonnull reversedSortDescriptor;
	//	[Export ("reversedSortDescriptor", ArgumentSemantic.Retain)]
	//	NSObject ReversedSortDescriptor { get; }
	//}

	//// @interface NSSortDescriptorSorting (NSSet)
	//[Category]
	//[BaseType (typeof(NSSet))]
	//interface NSSet_NSSortDescriptorSorting
	//{
	//	// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("sortedArrayUsingDescriptors:")]
	//	NSObject[] SortedArrayUsingDescriptors (NSSortDescriptor[] sortDescriptors);
	//}

	//// @interface NSSortDescriptorSorting (NSArray)
	//[Category]
	//[BaseType (typeof(NSArray))]
	//interface NSArray_NSSortDescriptorSorting
	//{
	//	// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors;
	//	[Export ("sortedArrayUsingDescriptors:")]
	//	NSObject[] SortedArrayUsingDescriptors (NSSortDescriptor[] sortDescriptors);
	//}

	//// @interface NSSortDescriptorSorting (NSMutableArray)
	//[Category]
	//[BaseType (typeof(NSMutableArray))]
	//interface NSMutableArray_NSSortDescriptorSorting
	//{
	//	// -(void)sortUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors;
	//	[Export ("sortUsingDescriptors:")]
	//	void SortUsingDescriptors (NSSortDescriptor[] sortDescriptors);
	//}

	//// @interface NSKeyValueSorting (NSOrderedSet)
	//[Category]
	//[BaseType (typeof(NSOrderedSet))]
	//interface NSOrderedSet_NSKeyValueSorting
	//{
	//	// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("sortedArrayUsingDescriptors:")]
	//	NSObject[] SortedArrayUsingDescriptors (NSSortDescriptor[] sortDescriptors);
	//}

	//// @interface NSKeyValueSorting (NSMutableOrderedSet)
	//[Category]
	//[BaseType (typeof(NSMutableOrderedSet))]
	//interface NSMutableOrderedSet_NSKeyValueSorting
	//{
	//	// -(void)sortUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("sortUsingDescriptors:")]
	//	void SortUsingDescriptors (NSSortDescriptor[] sortDescriptors);
	//}

	//// @interface NSStream : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSStream
	//{
	//	// -(void)open;
	//	[Export ("open")]
	//	void Open ();

	//	// -(void)close;
	//	[Export ("close")]
	//	void Close ();

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSStreamDelegate Delegate { get; set; }

	//	// @property (assign) id<NSStreamDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(id _Nullable)propertyForKey:(NSStreamPropertyKey _Nonnull)key;
	//	[Export ("propertyForKey:")]
	//	[return: NullAllowed]
	//	NSObject PropertyForKey (string key);

	//	// -(BOOL)setProperty:(id _Nullable)property forKey:(NSStreamPropertyKey _Nonnull)key;
	//	[Export ("setProperty:forKey:")]
	//	bool SetProperty ([NullAllowed] NSObject property, string key);

	//	// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("scheduleInRunLoop:forMode:")]
	//	void ScheduleInRunLoop (NSRunLoop aRunLoop, string mode);

	//	// -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("removeFromRunLoop:forMode:")]
	//	void RemoveFromRunLoop (NSRunLoop aRunLoop, string mode);

	//	// @property (readonly) NSStreamStatus streamStatus;
	//	[Export ("streamStatus")]
	//	NSStreamStatus StreamStatus { get; }

	//	// @property (readonly, copy) NSError * _Nullable streamError;
	//	[NullAllowed, Export ("streamError", ArgumentSemantic.Copy)]
	//	NSError StreamError { get; }
	//}

	//// @interface NSInputStream : NSStream
	//[BaseType (typeof(NSStream))]
	//interface NSInputStream
	//{
	//	// -(NSInteger)read:(uint8_t * _Nonnull)buffer maxLength:(NSUInteger)len;
	//	[Export ("read:maxLength:")]
	//	unsafe nint Read (byte* buffer, nuint len);

	//	// -(BOOL)getBuffer:(uint8_t * _Nullable * _Nonnull)buffer length:(NSUInteger * _Nonnull)len;
	//	[Export ("getBuffer:length:")]
	//	unsafe bool GetBuffer ([NullAllowed] byte** buffer, nuint* len);

	//	// @property (readonly) BOOL hasBytesAvailable;
	//	[Export ("hasBytesAvailable")]
	//	bool HasBytesAvailable { get; }

	//	// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data __attribute__((objc_designated_initializer));
	//	[Export ("initWithData:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSData data);

	//	// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("initWithURL:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl url);
	//}

	//// @interface NSOutputStream : NSStream
	//[BaseType (typeof(NSStream))]
	//interface NSOutputStream
	//{
	//	// -(NSInteger)write:(const uint8_t * _Nonnull)buffer maxLength:(NSUInteger)len;
	//	[Export ("write:maxLength:")]
	//	unsafe nint Write (byte* buffer, nuint len);

	//	// @property (readonly) BOOL hasSpaceAvailable;
	//	[Export ("hasSpaceAvailable")]
	//	bool HasSpaceAvailable { get; }

	//	// -(instancetype _Nonnull)initToBuffer:(uint8_t * _Nonnull)buffer capacity:(NSUInteger)capacity __attribute__((objc_designated_initializer));
	//	[Export ("initToBuffer:capacity:")]
	//	[DesignatedInitializer]
	//	unsafe IntPtr Constructor (byte* buffer, nuint capacity);

	//	// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url append:(BOOL)shouldAppend __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("initWithURL:append:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl url, bool shouldAppend);
	//}

	//// @interface NSSocketStreamCreationExtensions (NSStream)
	//[Category]
	//[BaseType (typeof(NSStream))]
	//interface NSStream_NSSocketStreamCreationExtensions
	//{
	//	// +(void)getStreamsToHostWithName:(NSString * _Nonnull)hostname port:(NSInteger)port inputStream:(NSInputStream * _Nullable * _Nullable)inputStream outputStream:(NSOutputStream * _Nullable * _Nullable)outputStream __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//	[Static]
	//	[Export ("getStreamsToHostWithName:port:inputStream:outputStream:")]
	//	void GetStreamsToHostWithName (string hostname, nint port, [NullAllowed] out NSInputStream inputStream, [NullAllowed] out NSOutputStream outputStream);
	//}

	//// @interface NSStreamBoundPairCreationExtensions (NSStream)
	//[Category]
	//[BaseType (typeof(NSStream))]
	//interface NSStream_NSStreamBoundPairCreationExtensions
	//{
	//	// +(void)getBoundStreamsWithBufferSize:(NSUInteger)bufferSize inputStream:(NSInputStream * _Nullable * _Nullable)inputStream outputStream:(NSOutputStream * _Nullable * _Nullable)outputStream __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Static]
	//	[Export ("getBoundStreamsWithBufferSize:inputStream:outputStream:")]
	//	void GetBoundStreamsWithBufferSize (nuint bufferSize, [NullAllowed] out NSInputStream inputStream, [NullAllowed] out NSOutputStream outputStream);
	//}

	//// @interface NSInputStreamExtensions (NSInputStream)
	//[Category]
	//[BaseType (typeof(NSInputStream))]
	//interface NSInputStream_NSInputStreamExtensions
	//{
	//	// -(instancetype _Nullable)initWithFileAtPath:(NSString * _Nonnull)path;
	//	[Export ("initWithFileAtPath:")]
	//	IntPtr Constructor (string path);

	//	// +(instancetype _Nullable)inputStreamWithData:(NSData * _Nonnull)data;
	//	[Static]
	//	[Export ("inputStreamWithData:")]
	//	[return: NullAllowed]
	//	NSInputStream InputStreamWithData (NSData data);

	//	// +(instancetype _Nullable)inputStreamWithFileAtPath:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("inputStreamWithFileAtPath:")]
	//	[return: NullAllowed]
	//	NSInputStream InputStreamWithFileAtPath (string path);

	//	// +(instancetype _Nullable)inputStreamWithURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("inputStreamWithURL:")]
	//	[return: NullAllowed]
	//	NSInputStream InputStreamWithURL (NSUrl url);
	//}

	//// @interface NSOutputStreamExtensions (NSOutputStream)
	//[Category]
	//[BaseType (typeof(NSOutputStream))]
	//interface NSOutputStream_NSOutputStreamExtensions
	//{
	//	// -(instancetype _Nullable)initToFileAtPath:(NSString * _Nonnull)path append:(BOOL)shouldAppend;
	//	[Export ("initToFileAtPath:append:")]
	//	IntPtr Constructor (string path, bool shouldAppend);

	//	// +(instancetype _Nonnull)outputStreamToMemory;
	//	[Static]
	//	[Export ("outputStreamToMemory")]
	//	NSOutputStream OutputStreamToMemory ();

	//	// +(instancetype _Nonnull)outputStreamToBuffer:(uint8_t * _Nonnull)buffer capacity:(NSUInteger)capacity;
	//	[Static]
	//	[Export ("outputStreamToBuffer:capacity:")]
	//	unsafe NSOutputStream OutputStreamToBuffer (byte* buffer, nuint capacity);

	//	// +(instancetype _Nonnull)outputStreamToFileAtPath:(NSString * _Nonnull)path append:(BOOL)shouldAppend;
	//	[Static]
	//	[Export ("outputStreamToFileAtPath:append:")]
	//	NSOutputStream OutputStreamToFileAtPath (string path, bool shouldAppend);

	//	// +(instancetype _Nullable)outputStreamWithURL:(NSURL * _Nonnull)url append:(BOOL)shouldAppend __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("outputStreamWithURL:append:")]
	//	[return: NullAllowed]
	//	NSOutputStream OutputStreamWithURL (NSUrl url, bool shouldAppend);
	//}

	//// @protocol NSStreamDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSStreamDelegate
	//{
	//	// @optional -(void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
	//	[Export ("stream:handleEvent:")]
	//	void HandleEvent (NSStream aStream, NSStreamEvent eventCode);
	//}

	//// @interface NSThread : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSThread
	//{
	//	// @property (readonly, strong, class) NSThread * _Nonnull currentThread;
	//	[Static]
	//	[Export ("currentThread", ArgumentSemantic.Strong)]
	//	NSThread CurrentThread { get; }

	//	// +(void)detachNewThreadWithBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Static]
	//	[Export ("detachNewThreadWithBlock:")]
	//	void DetachNewThreadWithBlock (Action block);

	//	// +(void)detachNewThreadSelector:(SEL _Nonnull)selector toTarget:(id _Nonnull)target withObject:(id _Nullable)argument;
	//	[Static]
	//	[Export ("detachNewThreadSelector:toTarget:withObject:")]
	//	void DetachNewThreadSelector (Selector selector, NSObject target, [NullAllowed] NSObject argument);

	//	// +(BOOL)isMultiThreaded;
	//	[Static]
	//	[Export ("isMultiThreaded")]
	//	[Verify (MethodToProperty)]
	//	bool IsMultiThreaded { get; }

	//	// @property (readonly, retain) NSMutableDictionary * _Nonnull threadDictionary;
	//	[Export ("threadDictionary", ArgumentSemantic.Retain)]
	//	NSMutableDictionary ThreadDictionary { get; }

	//	// +(void)sleepUntilDate:(NSDate * _Nonnull)date;
	//	[Static]
	//	[Export ("sleepUntilDate:")]
	//	void SleepUntilDate (NSDate date);

	//	// +(void)sleepForTimeInterval:(NSTimeInterval)ti;
	//	[Static]
	//	[Export ("sleepForTimeInterval:")]
	//	void SleepForTimeInterval (double ti);

	//	// +(void)exit;
	//	[Static]
	//	[Export ("exit")]
	//	void Exit ();

	//	// +(double)threadPriority;
	//	[Static]
	//	[Export ("threadPriority")]
	//	[Verify (MethodToProperty)]
	//	double ThreadPriority { get; }

	//	// +(BOOL)setThreadPriority:(double)p;
	//	[Static]
	//	[Export ("setThreadPriority:")]
	//	bool SetThreadPriority (double p);

	//	// @property double threadPriority __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("threadPriority")]
	//	double ThreadPriority { get; set; }

	//	// @property NSQualityOfService qualityOfService __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[Export ("qualityOfService", ArgumentSemantic.Assign)]
	//	NSQualityOfService QualityOfService { get; set; }

	//	// @property (readonly, copy, class) NSArray<NSNumber *> * _Nonnull callStackReturnAddresses __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Static]
	//	[Export ("callStackReturnAddresses", ArgumentSemantic.Copy)]
	//	NSNumber[] CallStackReturnAddresses { get; }

	//	// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull callStackSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Static]
	//	[Export ("callStackSymbols", ArgumentSemantic.Copy)]
	//	string[] CallStackSymbols { get; }

	//	// @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }

	//	// @property NSUInteger stackSize __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("stackSize")]
	//	nuint StackSize { get; set; }

	//	// @property (readonly) BOOL isMainThread __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("isMainThread")]
	//	bool IsMainThread { get; }

	//	// @property (readonly, class) BOOL isMainThread __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Static]
	//	[Export ("isMainThread")]
	//	bool IsMainThread { get; }

	//	// @property (readonly, strong, class) NSThread * _Nonnull mainThread __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Static]
	//	[Export ("mainThread", ArgumentSemantic.Strong)]
	//	NSThread MainThread { get; }

	//	// -(instancetype _Nonnull)initWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)selector object:(id _Nullable)argument __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("initWithTarget:selector:object:")]
	//	IntPtr Constructor (NSObject target, Selector selector, [NullAllowed] NSObject argument);

	//	// -(instancetype _Nonnull)initWithBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("initWithBlock:")]
	//	IntPtr Constructor (Action block);

	//	// @property (readonly, getter = isExecuting) BOOL executing __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("executing")]
	//	bool Executing { [Bind ("isExecuting")] get; }

	//	// @property (readonly, getter = isFinished) BOOL finished __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("finished")]
	//	bool Finished { [Bind ("isFinished")] get; }

	//	// @property (readonly, getter = isCancelled) BOOL cancelled __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("cancelled")]
	//	bool Cancelled { [Bind ("isCancelled")] get; }

	//	// -(void)cancel __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("cancel")]
	//	void Cancel ();

	//	// -(void)start __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("start")]
	//	void Start ();

	//	// -(void)main __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("main")]
	//	void Main ();
	//}

	//// @interface NSThreadPerformAdditions (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_NSThreadPerformAdditions
	//{
	//	// -(void)performSelectorOnMainThread:(SEL _Nonnull)aSelector withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait modes:(NSArray<NSString *> * _Nullable)array;
	//	[Export ("performSelectorOnMainThread:withObject:waitUntilDone:modes:")]
	//	void PerformSelectorOnMainThread (Selector aSelector, [NullAllowed] NSObject arg, bool wait, [NullAllowed] string[] array);

	//	// -(void)performSelectorOnMainThread:(SEL _Nonnull)aSelector withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait;
	//	[Export ("performSelectorOnMainThread:withObject:waitUntilDone:")]
	//	void PerformSelectorOnMainThread (Selector aSelector, [NullAllowed] NSObject arg, bool wait);

	//	// -(void)performSelector:(SEL _Nonnull)aSelector onThread:(NSThread * _Nonnull)thr withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait modes:(NSArray<NSString *> * _Nullable)array __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("performSelector:onThread:withObject:waitUntilDone:modes:")]
	//	void PerformSelector (Selector aSelector, NSThread thr, [NullAllowed] NSObject arg, bool wait, [NullAllowed] string[] array);

	//	// -(void)performSelector:(SEL _Nonnull)aSelector onThread:(NSThread * _Nonnull)thr withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("performSelector:onThread:withObject:waitUntilDone:")]
	//	void PerformSelector (Selector aSelector, NSThread thr, [NullAllowed] NSObject arg, bool wait);

	//	// -(void)performSelectorInBackground:(SEL _Nonnull)aSelector withObject:(id _Nullable)arg __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("performSelectorInBackground:withObject:")]
	//	void PerformSelectorInBackground (Selector aSelector, [NullAllowed] NSObject arg);
	//}

	//// @interface NSTimeZone : NSObject <NSCopying, NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSTimeZone : INSCopying, INSSecureCoding
	//{
	//	// @property (readonly, copy) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, copy) NSData * _Nonnull data;
	//	[Export ("data", ArgumentSemantic.Copy)]
	//	NSData Data { get; }

	//	// -(NSInteger)secondsFromGMTForDate:(NSDate * _Nonnull)aDate;
	//	[Export ("secondsFromGMTForDate:")]
	//	nint SecondsFromGMTForDate (NSDate aDate);

	//	// -(NSString * _Nullable)abbreviationForDate:(NSDate * _Nonnull)aDate;
	//	[Export ("abbreviationForDate:")]
	//	[return: NullAllowed]
	//	string AbbreviationForDate (NSDate aDate);

	//	// -(BOOL)isDaylightSavingTimeForDate:(NSDate * _Nonnull)aDate;
	//	[Export ("isDaylightSavingTimeForDate:")]
	//	bool IsDaylightSavingTimeForDate (NSDate aDate);

	//	// -(NSTimeInterval)daylightSavingTimeOffsetForDate:(NSDate * _Nonnull)aDate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("daylightSavingTimeOffsetForDate:")]
	//	double DaylightSavingTimeOffsetForDate (NSDate aDate);

	//	// -(NSDate * _Nullable)nextDaylightSavingTimeTransitionAfterDate:(NSDate * _Nonnull)aDate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("nextDaylightSavingTimeTransitionAfterDate:")]
	//	[return: NullAllowed]
	//	NSDate NextDaylightSavingTimeTransitionAfterDate (NSDate aDate);
	//}

	//// @interface NSExtendedTimeZone (NSTimeZone)
	//[Category]
	//[BaseType (typeof(NSTimeZone))]
	//interface NSTimeZone_NSExtendedTimeZone
	//{
	//	// @property (readonly, copy, class) NSTimeZone * _Nonnull systemTimeZone;
	//	[Static]
	//	[Export ("systemTimeZone", ArgumentSemantic.Copy)]
	//	NSTimeZone SystemTimeZone { get; }

	//	// +(void)resetSystemTimeZone;
	//	[Static]
	//	[Export ("resetSystemTimeZone")]
	//	void ResetSystemTimeZone ();

	//	// @property (copy, class) NSTimeZone * _Nonnull defaultTimeZone;
	//	[Static]
	//	[Export ("defaultTimeZone", ArgumentSemantic.Copy)]
	//	NSTimeZone DefaultTimeZone { get; set; }

	//	// @property (readonly, copy, class) NSTimeZone * _Nonnull localTimeZone;
	//	[Static]
	//	[Export ("localTimeZone", ArgumentSemantic.Copy)]
	//	NSTimeZone LocalTimeZone { get; }

	//	// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull knownTimeZoneNames;
	//	[Static]
	//	[Export ("knownTimeZoneNames", ArgumentSemantic.Copy)]
	//	string[] KnownTimeZoneNames { get; }

	//	// @property (copy, class) NSDictionary<NSString *,NSString *> * _Nonnull abbreviationDictionary __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Static]
	//	[Export ("abbreviationDictionary", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSString> AbbreviationDictionary { get; set; }

	//	// @property (readonly, copy, class) NSString * _Nonnull timeZoneDataVersion __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Static]
	//	[Export ("timeZoneDataVersion")]
	//	string TimeZoneDataVersion { get; }

	//	// @property (readonly) NSInteger secondsFromGMT;
	//	[Export ("secondsFromGMT")]
	//	nint SecondsFromGMT { get; }

	//	// @property (readonly, copy) NSString * _Nullable abbreviation;
	//	[NullAllowed, Export ("abbreviation")]
	//	string Abbreviation { get; }

	//	// @property (readonly, getter = isDaylightSavingTime) BOOL daylightSavingTime;
	//	[Export ("daylightSavingTime")]
	//	bool DaylightSavingTime { [Bind ("isDaylightSavingTime")] get; }

	//	// @property (readonly) NSTimeInterval daylightSavingTimeOffset __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("daylightSavingTimeOffset")]
	//	double DaylightSavingTimeOffset { get; }

	//	// @property (readonly, copy) NSDate * _Nullable nextDaylightSavingTimeTransition __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[NullAllowed, Export ("nextDaylightSavingTimeTransition", ArgumentSemantic.Copy)]
	//	NSDate NextDaylightSavingTimeTransition { get; }

	//	// @property (readonly, copy) NSString * _Nonnull description;
	//	[Export ("description")]
	//	string Description { get; }

	//	// -(BOOL)isEqualToTimeZone:(NSTimeZone * _Nonnull)aTimeZone;
	//	[Export ("isEqualToTimeZone:")]
	//	bool IsEqualToTimeZone (NSTimeZone aTimeZone);

	//	// -(NSString * _Nullable)localizedName:(NSTimeZoneNameStyle)style locale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("localizedName:locale:")]
	//	[return: NullAllowed]
	//	string LocalizedName (NSTimeZoneNameStyle style, [NullAllowed] NSLocale locale);
	//}

	//// @interface NSTimeZoneCreation (NSTimeZone)
	//[Category]
	//[BaseType (typeof(NSTimeZone))]
	//interface NSTimeZone_NSTimeZoneCreation
	//{
	//	// +(instancetype _Nullable)timeZoneWithName:(NSString * _Nonnull)tzName;
	//	[Static]
	//	[Export ("timeZoneWithName:")]
	//	[return: NullAllowed]
	//	NSTimeZone TimeZoneWithName (string tzName);

	//	// +(instancetype _Nullable)timeZoneWithName:(NSString * _Nonnull)tzName data:(NSData * _Nullable)aData;
	//	[Static]
	//	[Export ("timeZoneWithName:data:")]
	//	[return: NullAllowed]
	//	NSTimeZone TimeZoneWithName (string tzName, [NullAllowed] NSData aData);

	//	// -(instancetype _Nullable)initWithName:(NSString * _Nonnull)tzName;
	//	[Export ("initWithName:")]
	//	IntPtr Constructor (string tzName);

	//	// -(instancetype _Nullable)initWithName:(NSString * _Nonnull)tzName data:(NSData * _Nullable)aData;
	//	[Export ("initWithName:data:")]
	//	IntPtr Constructor (string tzName, [NullAllowed] NSData aData);

	//	// +(instancetype _Nonnull)timeZoneForSecondsFromGMT:(NSInteger)seconds;
	//	[Static]
	//	[Export ("timeZoneForSecondsFromGMT:")]
	//	NSTimeZone TimeZoneForSecondsFromGMT (nint seconds);

	//	// +(instancetype _Nullable)timeZoneWithAbbreviation:(NSString * _Nonnull)abbreviation;
	//	[Static]
	//	[Export ("timeZoneWithAbbreviation:")]
	//	[return: NullAllowed]
	//	NSTimeZone TimeZoneWithAbbreviation (string abbreviation);
	//}

	//// @interface NSTimer : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSTimer
	//{
	//	// +(NSTimer * _Nonnull)timerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation * _Nonnull)invocation repeats:(BOOL)yesOrNo;
	//	[Static]
	//	[Export ("timerWithTimeInterval:invocation:repeats:")]
	//	NSTimer TimerWithTimeInterval (double ti, NSInvocation invocation, bool yesOrNo);

	//	// +(NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation * _Nonnull)invocation repeats:(BOOL)yesOrNo;
	//	[Static]
	//	[Export ("scheduledTimerWithTimeInterval:invocation:repeats:")]
	//	NSTimer ScheduledTimerWithTimeInterval (double ti, NSInvocation invocation, bool yesOrNo);

	//	// +(NSTimer * _Nonnull)timerWithTimeInterval:(NSTimeInterval)ti target:(id _Nonnull)aTarget selector:(SEL _Nonnull)aSelector userInfo:(id _Nullable)userInfo repeats:(BOOL)yesOrNo;
	//	[Static]
	//	[Export ("timerWithTimeInterval:target:selector:userInfo:repeats:")]
	//	NSTimer TimerWithTimeInterval (double ti, NSObject aTarget, Selector aSelector, [NullAllowed] NSObject userInfo, bool yesOrNo);

	//	// +(NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id _Nonnull)aTarget selector:(SEL _Nonnull)aSelector userInfo:(id _Nullable)userInfo repeats:(BOOL)yesOrNo;
	//	[Static]
	//	[Export ("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:")]
	//	NSTimer ScheduledTimerWithTimeInterval (double ti, NSObject aTarget, Selector aSelector, [NullAllowed] NSObject userInfo, bool yesOrNo);

	//	// +(NSTimer * _Nonnull)timerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^ _Nonnull)(NSTimer * _Nonnull))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Static]
	//	[Export ("timerWithTimeInterval:repeats:block:")]
	//	NSTimer TimerWithTimeInterval (double interval, bool repeats, Action<NSTimer> block);

	//	// +(NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^ _Nonnull)(NSTimer * _Nonnull))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Static]
	//	[Export ("scheduledTimerWithTimeInterval:repeats:block:")]
	//	NSTimer ScheduledTimerWithTimeInterval (double interval, bool repeats, Action<NSTimer> block);

	//	// -(instancetype _Nonnull)initWithFireDate:(NSDate * _Nonnull)date interval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^ _Nonnull)(NSTimer * _Nonnull))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("initWithFireDate:interval:repeats:block:")]
	//	IntPtr Constructor (NSDate date, double interval, bool repeats, Action<NSTimer> block);

	//	// -(instancetype _Nonnull)initWithFireDate:(NSDate * _Nonnull)date interval:(NSTimeInterval)ti target:(id _Nonnull)t selector:(SEL _Nonnull)s userInfo:(id _Nullable)ui repeats:(BOOL)rep __attribute__((objc_designated_initializer));
	//	[Export ("initWithFireDate:interval:target:selector:userInfo:repeats:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSDate date, double ti, NSObject t, Selector s, [NullAllowed] NSObject ui, bool rep);

	//	// -(void)fire;
	//	[Export ("fire")]
	//	void Fire ();

	//	// @property (copy) NSDate * _Nonnull fireDate;
	//	[Export ("fireDate", ArgumentSemantic.Copy)]
	//	NSDate FireDate { get; set; }

	//	// @property (readonly) NSTimeInterval timeInterval;
	//	[Export ("timeInterval")]
	//	double TimeInterval { get; }

	//	// @property NSTimeInterval tolerance __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[Export ("tolerance")]
	//	double Tolerance { get; set; }

	//	// -(void)invalidate;
	//	[Export ("invalidate")]
	//	void Invalidate ();

	//	// @property (readonly, getter = isValid) BOOL valid;
	//	[Export ("valid")]
	//	bool Valid { [Bind ("isValid")] get; }

	//	// @property (readonly, retain) id _Nullable userInfo;
	//	[NullAllowed, Export ("userInfo", ArgumentSemantic.Retain)]
	//	NSObject UserInfo { get; }
	//}

	//// @protocol NSURLAuthenticationChallengeSender <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSURLAuthenticationChallengeSender
	//{
	//	// @required -(void)useCredential:(NSURLCredential * _Nonnull)credential forAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
	//	[Abstract]
	//	[Export ("useCredential:forAuthenticationChallenge:")]
	//	void UseCredential (NSUrlCredential credential, NSUrlAuthenticationChallenge challenge);

	//	// @required -(void)continueWithoutCredentialForAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
	//	[Abstract]
	//	[Export ("continueWithoutCredentialForAuthenticationChallenge:")]
	//	void ContinueWithoutCredentialForAuthenticationChallenge (NSUrlAuthenticationChallenge challenge);

	//	// @required -(void)cancelAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
	//	[Abstract]
	//	[Export ("cancelAuthenticationChallenge:")]
	//	void CancelAuthenticationChallenge (NSUrlAuthenticationChallenge challenge);

	//	// @optional -(void)performDefaultHandlingForAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
	//	[Export ("performDefaultHandlingForAuthenticationChallenge:")]
	//	void PerformDefaultHandlingForAuthenticationChallenge (NSUrlAuthenticationChallenge challenge);

	//	// @optional -(void)rejectProtectionSpaceAndContinueWithChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
	//	[Export ("rejectProtectionSpaceAndContinueWithChallenge:")]
	//	void RejectProtectionSpaceAndContinueWithChallenge (NSUrlAuthenticationChallenge challenge);
	//}

	//// @interface NSURLAuthenticationChallenge : NSObject <NSSecureCoding>
	//[BaseType (typeof(NSObject))]
	//interface NSURLAuthenticationChallenge : INSSecureCoding
	//{
	//	// -(instancetype _Nonnull)initWithProtectionSpace:(NSURLProtectionSpace * _Nonnull)space proposedCredential:(NSURLCredential * _Nullable)credential previousFailureCount:(NSInteger)previousFailureCount failureResponse:(NSURLResponse * _Nullable)response error:(NSError * _Nullable)error sender:(id<NSURLAuthenticationChallengeSender> _Nonnull)sender;
	//	[Export ("initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:")]
	//	IntPtr Constructor (NSUrlProtectionSpace space, [NullAllowed] NSUrlCredential credential, nint previousFailureCount, [NullAllowed] NSUrlResponse response, [NullAllowed] NSError error, NSURLAuthenticationChallengeSender sender);

	//	// -(instancetype _Nonnull)initWithAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge sender:(id<NSURLAuthenticationChallengeSender> _Nonnull)sender;
	//	[Export ("initWithAuthenticationChallenge:sender:")]
	//	IntPtr Constructor (NSUrlAuthenticationChallenge challenge, NSURLAuthenticationChallengeSender sender);

	//	// @property (readonly, copy) NSURLProtectionSpace * _Nonnull protectionSpace;
	//	[Export ("protectionSpace", ArgumentSemantic.Copy)]
	//	NSUrlProtectionSpace ProtectionSpace { get; }

	//	// @property (readonly, copy) NSURLCredential * _Nullable proposedCredential;
	//	[NullAllowed, Export ("proposedCredential", ArgumentSemantic.Copy)]
	//	NSUrlCredential ProposedCredential { get; }

	//	// @property (readonly) NSInteger previousFailureCount;
	//	[Export ("previousFailureCount")]
	//	nint PreviousFailureCount { get; }

	//	// @property (readonly, copy) NSURLResponse * _Nullable failureResponse;
	//	[NullAllowed, Export ("failureResponse", ArgumentSemantic.Copy)]
	//	NSUrlResponse FailureResponse { get; }

	//	// @property (readonly, copy) NSError * _Nullable error;
	//	[NullAllowed, Export ("error", ArgumentSemantic.Copy)]
	//	NSError Error { get; }

	//	// @property (readonly, retain) id<NSURLAuthenticationChallengeSender> _Nullable sender;
	//	[NullAllowed, Export ("sender", ArgumentSemantic.Retain)]
	//	NSURLAuthenticationChallengeSender Sender { get; }
	//}

	//// @interface NSCachedURLResponse : NSObject <NSSecureCoding, NSCopying>
	//[BaseType (typeof(NSObject))]
	//interface NSCachedURLResponse : INSSecureCoding, INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nonnull)data;
	//	[Export ("initWithResponse:data:")]
	//	IntPtr Constructor (NSUrlResponse response, NSData data);

	//	// -(instancetype _Nonnull)initWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nonnull)data userInfo:(NSDictionary * _Nullable)userInfo storagePolicy:(NSURLCacheStoragePolicy)storagePolicy;
	//	[Export ("initWithResponse:data:userInfo:storagePolicy:")]
	//	IntPtr Constructor (NSUrlResponse response, NSData data, [NullAllowed] NSDictionary userInfo, NSURLCacheStoragePolicy storagePolicy);

	//	// @property (readonly, copy) NSURLResponse * _Nonnull response;
	//	[Export ("response", ArgumentSemantic.Copy)]
	//	NSUrlResponse Response { get; }

	//	// @property (readonly, copy) NSData * _Nonnull data;
	//	[Export ("data", ArgumentSemantic.Copy)]
	//	NSData Data { get; }

	//	// @property (readonly, copy) NSDictionary * _Nullable userInfo;
	//	[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
	//	NSDictionary UserInfo { get; }

	//	// @property (readonly) NSURLCacheStoragePolicy storagePolicy;
	//	[Export ("storagePolicy")]
	//	NSURLCacheStoragePolicy StoragePolicy { get; }
	//}

	//// @interface NSURLCache : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSURLCache
	//{
	//	// @property (strong, class) NSURLCache * _Nonnull sharedURLCache;
	//	[Static]
	//	[Export ("sharedURLCache", ArgumentSemantic.Strong)]
	//	NSUrlCache SharedURLCache { get; set; }

	//	// -(instancetype _Nonnull)initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity diskPath:(NSString * _Nullable)path;
	//	[Export ("initWithMemoryCapacity:diskCapacity:diskPath:")]
	//	IntPtr Constructor (nuint memoryCapacity, nuint diskCapacity, [NullAllowed] string path);

	//	// -(NSCachedURLResponse * _Nullable)cachedResponseForRequest:(NSURLRequest * _Nonnull)request;
	//	[Export ("cachedResponseForRequest:")]
	//	[return: NullAllowed]
	//	NSCachedUrlResponse CachedResponseForRequest (NSUrlRequest request);

	//	// -(void)storeCachedResponse:(NSCachedURLResponse * _Nonnull)cachedResponse forRequest:(NSURLRequest * _Nonnull)request;
	//	[Export ("storeCachedResponse:forRequest:")]
	//	void StoreCachedResponse (NSCachedUrlResponse cachedResponse, NSUrlRequest request);

	//	// -(void)removeCachedResponseForRequest:(NSURLRequest * _Nonnull)request;
	//	[Export ("removeCachedResponseForRequest:")]
	//	void RemoveCachedResponseForRequest (NSUrlRequest request);

	//	// -(void)removeAllCachedResponses;
	//	[Export ("removeAllCachedResponses")]
	//	void RemoveAllCachedResponses ();

	//	// -(void)removeCachedResponsesSinceDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("removeCachedResponsesSinceDate:")]
	//	void RemoveCachedResponsesSinceDate (NSDate date);

	//	// @property NSUInteger memoryCapacity;
	//	[Export ("memoryCapacity")]
	//	nuint MemoryCapacity { get; set; }

	//	// @property NSUInteger diskCapacity;
	//	[Export ("diskCapacity")]
	//	nuint DiskCapacity { get; set; }

	//	// @property (readonly) NSUInteger currentMemoryUsage;
	//	[Export ("currentMemoryUsage")]
	//	nuint CurrentMemoryUsage { get; }

	//	// @property (readonly) NSUInteger currentDiskUsage;
	//	[Export ("currentDiskUsage")]
	//	nuint CurrentDiskUsage { get; }
	//}

	//// @interface NSURLSessionTaskAdditions (NSURLCache)
	//[Category]
	//[BaseType (typeof(NSUrlCache))]
	//interface NSURLCache_NSURLSessionTaskAdditions
	//{
	//	// -(void)storeCachedResponse:(NSCachedURLResponse * _Nonnull)cachedResponse forDataTask:(NSURLSessionDataTask * _Nonnull)dataTask __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("storeCachedResponse:forDataTask:")]
	//	void StoreCachedResponse (NSCachedUrlResponse cachedResponse, NSUrlSessionDataTask dataTask);

	//	// -(void)getCachedResponseForDataTask:(NSURLSessionDataTask * _Nonnull)dataTask completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("getCachedResponseForDataTask:completionHandler:")]
	//	void GetCachedResponseForDataTask (NSUrlSessionDataTask dataTask, Action<NSCachedURLResponse> completionHandler);

	//	// -(void)removeCachedResponseForDataTask:(NSURLSessionDataTask * _Nonnull)dataTask __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("removeCachedResponseForDataTask:")]
	//	void RemoveCachedResponseForDataTask (NSUrlSessionDataTask dataTask);
	//}

	//// @interface NSURLConnection : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSURLConnection
	//{
	//	// -(instancetype _Nullable)initWithRequest:(NSURLRequest * _Nonnull)request delegate:(id _Nullable)delegate startImmediately:(BOOL)startImmediately __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.5, deprecated=10.11)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Introduced (PlatformName.MacOSX, 10, 5, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[NoWatch]
	//	[Export ("initWithRequest:delegate:startImmediately:")]
	//	IntPtr Constructor (NSUrlRequest request, [NullAllowed] NSObject @delegate, bool startImmediately);

	//	// -(instancetype _Nullable)initWithRequest:(NSURLRequest * _Nonnull)request delegate:(id _Nullable)delegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.3, deprecated=10.11)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Introduced (PlatformName.MacOSX, 10, 3, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[NoWatch]
	//	[Export ("initWithRequest:delegate:")]
	//	IntPtr Constructor (NSUrlRequest request, [NullAllowed] NSObject @delegate);

	//	// +(NSURLConnection * _Nullable)connectionWithRequest:(NSURLRequest * _Nonnull)request delegate:(id _Nullable)delegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.3, deprecated=10.11)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Introduced (PlatformName.MacOSX, 10, 3, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use NSURLSession (see NSURLSession.h)")]
	//	[NoWatch]
	//	[Static]
	//	[Export ("connectionWithRequest:delegate:")]
	//	[return: NullAllowed]
	//	NSUrlConnection ConnectionWithRequest (NSUrlRequest request, [NullAllowed] NSObject @delegate);

	//	// @property (readonly, copy) NSURLRequest * _Nonnull originalRequest __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (5, 0)]
	//	[Export ("originalRequest", ArgumentSemantic.Copy)]
	//	NSUrlRequest OriginalRequest { get; }

	//	// @property (readonly, copy) NSURLRequest * _Nonnull currentRequest __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (5, 0)]
	//	[Export ("currentRequest", ArgumentSemantic.Copy)]
	//	NSUrlRequest CurrentRequest { get; }

	//	// -(void)start __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("start")]
	//	void Start ();

	//	// -(void)cancel;
	//	[Export ("cancel")]
	//	void Cancel ();

	//	// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("scheduleInRunLoop:forMode:")]
	//	void ScheduleInRunLoop (NSRunLoop aRunLoop, string mode);

	//	// -(void)unscheduleFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("unscheduleFromRunLoop:forMode:")]
	//	void UnscheduleFromRunLoop (NSRunLoop aRunLoop, string mode);

	//	// -(void)setDelegateQueue:(NSOperationQueue * _Nullable)queue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("setDelegateQueue:")]
	//	void SetDelegateQueue ([NullAllowed] NSOperationQueue queue);

	//	// +(BOOL)canHandleRequest:(NSURLRequest * _Nonnull)request;
	//	[Static]
	//	[Export ("canHandleRequest:")]
	//	bool CanHandleRequest (NSUrlRequest request);
	//}

	//// @protocol NSURLConnectionDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSURLConnectionDelegate
	//{
	//	// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didFailWithError:(NSError * _Nonnull)error;
	//	[Export ("connection:didFailWithError:")]
	//	void Connection (NSUrlConnection connection, NSError error);

	//	// @optional -(BOOL)connectionShouldUseCredentialStorage:(NSURLConnection * _Nonnull)connection;
	//	[Export ("connectionShouldUseCredentialStorage:")]
	//	bool ConnectionShouldUseCredentialStorage (NSUrlConnection connection);

	//	// @optional -(void)connection:(NSURLConnection * _Nonnull)connection willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
	//	[Export ("connection:willSendRequestForAuthenticationChallenge:")]
	//	void Connection (NSUrlConnection connection, NSUrlAuthenticationChallenge challenge);

	//	// @optional -(BOOL)connection:(NSURLConnection * _Nonnull)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=3.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.6, deprecated=10.10)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Introduced (PlatformName.iOS, 3, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Introduced (PlatformName.MacOSX, 10, 6, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Export ("connection:canAuthenticateAgainstProtectionSpace:")]
	//	bool Connection (NSUrlConnection connection, NSUrlProtectionSpace protectionSpace);

	//	// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.10)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Introduced (PlatformName.MacOSX, 10, 2, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Export ("connection:didReceiveAuthenticationChallenge:")]
	//	void Connection (NSUrlConnection connection, NSUrlAuthenticationChallenge challenge);

	//	// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.10)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Introduced (PlatformName.MacOSX, 10, 2, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
	//	[Export ("connection:didCancelAuthenticationChallenge:")]
	//	void Connection (NSUrlConnection connection, NSUrlAuthenticationChallenge challenge);
	//}

	//// @protocol NSURLConnectionDataDelegate <NSURLConnectionDelegate>
	//[Protocol, Model]
	//interface NSURLConnectionDataDelegate : INSUrlConnectionDelegate
	//{
	//	// @optional -(NSURLRequest * _Nullable)connection:(NSURLConnection * _Nonnull)connection willSendRequest:(NSURLRequest * _Nonnull)request redirectResponse:(NSURLResponse * _Nullable)response;
	//	[Export ("connection:willSendRequest:redirectResponse:")]
	//	[return: NullAllowed]
	//	NSUrlRequest Connection (NSUrlConnection connection, NSUrlRequest request, [NullAllowed] NSUrlResponse response);

	//	// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didReceiveResponse:(NSURLResponse * _Nonnull)response;
	//	[Export ("connection:didReceiveResponse:")]
	//	void Connection (NSUrlConnection connection, NSUrlResponse response);

	//	// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didReceiveData:(NSData * _Nonnull)data;
	//	[Export ("connection:didReceiveData:")]
	//	void Connection (NSUrlConnection connection, NSData data);

	//	// @optional -(NSInputStream * _Nullable)connection:(NSURLConnection * _Nonnull)connection needNewBodyStream:(NSURLRequest * _Nonnull)request;
	//	[Export ("connection:needNewBodyStream:")]
	//	[return: NullAllowed]
	//	NSInputStream Connection (NSUrlConnection connection, NSUrlRequest request);

	//	// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didSendBodyData:(NSInteger)bytesWritten totalBytesWritten:(NSInteger)totalBytesWritten totalBytesExpectedToWrite:(NSInteger)totalBytesExpectedToWrite;
	//	[Export ("connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:")]
	//	void Connection (NSUrlConnection connection, nint bytesWritten, nint totalBytesWritten, nint totalBytesExpectedToWrite);

	//	// @optional -(NSCachedURLResponse * _Nullable)connection:(NSURLConnection * _Nonnull)connection willCacheResponse:(NSCachedURLResponse * _Nonnull)cachedResponse;
	//	[Export ("connection:willCacheResponse:")]
	//	[return: NullAllowed]
	//	NSCachedUrlResponse Connection (NSUrlConnection connection, NSCachedUrlResponse cachedResponse);

	//	// @optional -(void)connectionDidFinishLoading:(NSURLConnection * _Nonnull)connection;
	//	[Export ("connectionDidFinishLoading:")]
	//	void ConnectionDidFinishLoading (NSUrlConnection connection);
	//}

	//// @protocol NSURLConnectionDownloadDelegate <NSURLConnectionDelegate>
	//[Protocol, Model]
	//interface NSURLConnectionDownloadDelegate : INSUrlConnectionDelegate
	//{
	//	// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didWriteData:(long long)bytesWritten totalBytesWritten:(long long)totalBytesWritten expectedTotalBytes:(long long)expectedTotalBytes;
	//	[Export ("connection:didWriteData:totalBytesWritten:expectedTotalBytes:")]
	//	void Connection (NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes);

	//	// @optional -(void)connectionDidResumeDownloading:(NSURLConnection * _Nonnull)connection totalBytesWritten:(long long)totalBytesWritten expectedTotalBytes:(long long)expectedTotalBytes;
	//	[Export ("connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:")]
	//	void ConnectionDidResumeDownloading (NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes);

	//	// @required -(void)connectionDidFinishDownloading:(NSURLConnection * _Nonnull)connection destinationURL:(NSURL * _Nonnull)destinationURL;
	//	[Abstract]
	//	[Export ("connectionDidFinishDownloading:destinationURL:")]
	//	void ConnectionDidFinishDownloading (NSUrlConnection connection, NSUrl destinationURL);
	//}

	//// @interface NSURLConnectionSynchronousLoading (NSURLConnection)
	//[Category]
	//[BaseType (typeof(NSUrlConnection))]
	//interface NSURLConnection_NSURLConnectionSynchronousLoading
	//{
	//	// +(NSData * _Nullable)sendSynchronousRequest:(NSURLRequest * _Nonnull)request returningResponse:(NSURLResponse * _Nullable * _Nullable)response error:(NSError * _Nullable * _Nullable)error __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.3, deprecated=10.11)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[Introduced (PlatformName.MacOSX, 10, 3, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[NoWatch]
	//	[Static]
	//	[Export ("sendSynchronousRequest:returningResponse:error:")]
	//	[return: NullAllowed]
	//	NSData SendSynchronousRequest (NSUrlRequest request, [NullAllowed] out NSUrlResponse response, [NullAllowed] out NSError error);
	//}

	//// @interface NSURLConnectionQueuedLoading (NSURLConnection)
	//[Category]
	//[BaseType (typeof(NSUrlConnection))]
	//interface NSURLConnection_NSURLConnectionQueuedLoading
	//{
	//	// +(void)sendAsynchronousRequest:(NSURLRequest * _Nonnull)request queue:(NSOperationQueue * _Nonnull)queue completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSData * _Nullable, NSError * _Nullable))handler __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(ios, introduced=5.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.7, deprecated=10.11)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[Introduced (PlatformName.MacOSX, 10, 7, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
	//	[NoWatch]
	//	[Static]
	//	[Export ("sendAsynchronousRequest:queue:completionHandler:")]
	//	void SendAsynchronousRequest (NSUrlRequest request, NSOperationQueue queue, Action<NSURLResponse, NSData, NSError> handler);
	//}

	//// @interface NSURLCredential : NSObject <NSSecureCoding, NSCopying>
	//[BaseType (typeof(NSObject))]
	//interface NSURLCredential : INSSecureCoding, INSCopying
	//{
	//	// @property (readonly) NSURLCredentialPersistence persistence;
	//	[Export ("persistence")]
	//	NSURLCredentialPersistence Persistence { get; }
	//}

	//// @interface NSInternetPassword (NSURLCredential)
	//[Category]
	//[BaseType (typeof(NSUrlCredential))]
	//interface NSURLCredential_NSInternetPassword
	//{
	//	// -(instancetype _Nonnull)initWithUser:(NSString * _Nonnull)user password:(NSString * _Nonnull)password persistence:(NSURLCredentialPersistence)persistence;
	//	[Export ("initWithUser:password:persistence:")]
	//	IntPtr Constructor (string user, string password, NSURLCredentialPersistence persistence);

	//	// +(NSURLCredential * _Nonnull)credentialWithUser:(NSString * _Nonnull)user password:(NSString * _Nonnull)password persistence:(NSURLCredentialPersistence)persistence;
	//	[Static]
	//	[Export ("credentialWithUser:password:persistence:")]
	//	NSUrlCredential CredentialWithUser (string user, string password, NSURLCredentialPersistence persistence);

	//	// @property (readonly, copy) NSString * _Nullable user;
	//	[NullAllowed, Export ("user")]
	//	string User { get; }

	//	// @property (readonly, copy) NSString * _Nullable password;
	//	[NullAllowed, Export ("password")]
	//	string Password { get; }

	//	// @property (readonly) BOOL hasPassword;
	//	[Export ("hasPassword")]
	//	bool HasPassword { get; }
	//}

	//// @interface NSClientCertificate (NSURLCredential)
	//[Category]
	//[BaseType (typeof(NSUrlCredential))]
	//interface NSURLCredential_NSClientCertificate
	//{
	//	// -(instancetype _Nonnull)initWithIdentity:(SecIdentityRef _Nonnull)identity certificates:(NSArray * _Nullable)certArray persistence:(NSURLCredentialPersistence)persistence __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
	//	[Export ("initWithIdentity:certificates:persistence:")]
	//	[Verify (StronglyTypedNSArray)]
	//	unsafe IntPtr Constructor (SecIdentityRef* identity, [NullAllowed] NSObject[] certArray, NSURLCredentialPersistence persistence);

	//	// +(NSURLCredential * _Nonnull)credentialWithIdentity:(SecIdentityRef _Nonnull)identity certificates:(NSArray * _Nullable)certArray persistence:(NSURLCredentialPersistence)persistence __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
	//	[Static]
	//	[Export ("credentialWithIdentity:certificates:persistence:")]
	//	[Verify (StronglyTypedNSArray)]
	//	unsafe NSUrlCredential CredentialWithIdentity (SecIdentityRef* identity, [NullAllowed] NSObject[] certArray, NSURLCredentialPersistence persistence);

	//	// @property (readonly) SecIdentityRef _Nullable identity;
	//	[NullAllowed, Export ("identity")]
	//	unsafe SecIdentityRef* Identity { get; }

	//	// @property (readonly, copy) NSArray * _Nonnull certificates __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (3, 0)]
	//	[Export ("certificates", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] Certificates { get; }
	//}

	//// @interface NSServerTrust (NSURLCredential)
	//[Category]
	//[BaseType (typeof(NSUrlCredential))]
	//interface NSURLCredential_NSServerTrust
	//{
	//	// -(instancetype _Nonnull)initWithTrust:(SecTrustRef _Nonnull)trust __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
	//	[Export ("initWithTrust:")]
	//	unsafe IntPtr Constructor (SecTrustRef* trust);

	//	// +(NSURLCredential * _Nonnull)credentialForTrust:(SecTrustRef _Nonnull)trust __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
	//	[Static]
	//	[Export ("credentialForTrust:")]
	//	unsafe NSUrlCredential CredentialForTrust (SecTrustRef* trust);
	//}

	//// @interface NSURLProtectionSpace : NSObject <NSSecureCoding, NSCopying>
	//[BaseType (typeof(NSObject))]
	//interface NSURLProtectionSpace : INSSecureCoding, INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithHost:(NSString * _Nonnull)host port:(NSInteger)port protocol:(NSString * _Nullable)protocol realm:(NSString * _Nullable)realm authenticationMethod:(NSString * _Nullable)authenticationMethod;
	//	[Export ("initWithHost:port:protocol:realm:authenticationMethod:")]
	//	IntPtr Constructor (string host, nint port, [NullAllowed] string protocol, [NullAllowed] string realm, [NullAllowed] string authenticationMethod);

	//	// -(instancetype _Nonnull)initWithProxyHost:(NSString * _Nonnull)host port:(NSInteger)port type:(NSString * _Nullable)type realm:(NSString * _Nullable)realm authenticationMethod:(NSString * _Nullable)authenticationMethod;
	//	[Export ("initWithProxyHost:port:type:realm:authenticationMethod:")]
	//	IntPtr Constructor (string host, nint port, [NullAllowed] string type, [NullAllowed] string realm, [NullAllowed] string authenticationMethod);

	//	// @property (readonly, copy) NSString * _Nullable realm;
	//	[NullAllowed, Export ("realm")]
	//	string Realm { get; }

	//	// @property (readonly) BOOL receivesCredentialSecurely;
	//	[Export ("receivesCredentialSecurely")]
	//	bool ReceivesCredentialSecurely { get; }

	//	// @property (readonly) BOOL isProxy;
	//	[Export ("isProxy")]
	//	bool IsProxy { get; }

	//	// @property (readonly, copy) NSString * _Nonnull host;
	//	[Export ("host")]
	//	string Host { get; }

	//	// @property (readonly) NSInteger port;
	//	[Export ("port")]
	//	nint Port { get; }

	//	// @property (readonly, copy) NSString * _Nullable proxyType;
	//	[NullAllowed, Export ("proxyType")]
	//	string ProxyType { get; }

	//	// @property (readonly, copy) NSString * _Nullable protocol;
	//	[NullAllowed, Export ("protocol")]
	//	string Protocol { get; }

	//	// @property (readonly, copy) NSString * _Nonnull authenticationMethod;
	//	[Export ("authenticationMethod")]
	//	string AuthenticationMethod { get; }
	//}

	//// @interface NSClientCertificateSpace (NSURLProtectionSpace)
	//[Category]
	//[BaseType (typeof(NSUrlProtectionSpace))]
	//interface NSURLProtectionSpace_NSClientCertificateSpace
	//{
	//	// @property (readonly, copy) NSArray<NSData *> * _Nullable distinguishedNames __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (3, 0)]
	//	[NullAllowed, Export ("distinguishedNames", ArgumentSemantic.Copy)]
	//	NSData[] DistinguishedNames { get; }
	//}

	//// @interface NSServerTrustValidationSpace (NSURLProtectionSpace)
	//[Category]
	//[BaseType (typeof(NSUrlProtectionSpace))]
	//interface NSURLProtectionSpace_NSServerTrustValidationSpace
	//{
	//	// @property (readonly) SecTrustRef _Nullable serverTrust __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (3, 0)]
	//	[NullAllowed, Export ("serverTrust")]
	//	unsafe SecTrustRef* ServerTrust { get; }
	//}

	//// @interface NSURLCredentialStorage : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSURLCredentialStorage
	//{
	//	// @property (readonly, strong, class) NSURLCredentialStorage * _Nonnull sharedCredentialStorage;
	//	[Static]
	//	[Export ("sharedCredentialStorage", ArgumentSemantic.Strong)]
	//	NSUrlCredentialStorage SharedCredentialStorage { get; }

	//	// -(NSDictionary<NSString *,NSURLCredential *> * _Nullable)credentialsForProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
	//	[Export ("credentialsForProtectionSpace:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSURLCredential> CredentialsForProtectionSpace (NSUrlProtectionSpace space);

	//	// @property (readonly, copy) NSDictionary<NSURLProtectionSpace *,NSDictionary<NSString *,NSURLCredential *> *> * _Nonnull allCredentials;
	//	[Export ("allCredentials", ArgumentSemantic.Copy)]
	//	NSDictionary<NSURLProtectionSpace, NSDictionary<NSString, NSURLCredential>> AllCredentials { get; }

	//	// -(void)setCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
	//	[Export ("setCredential:forProtectionSpace:")]
	//	void SetCredential (NSUrlCredential credential, NSUrlProtectionSpace space);

	//	// -(void)removeCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
	//	[Export ("removeCredential:forProtectionSpace:")]
	//	void RemoveCredential (NSUrlCredential credential, NSUrlProtectionSpace space);

	//	// -(void)removeCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("removeCredential:forProtectionSpace:options:")]
	//	void RemoveCredential (NSUrlCredential credential, NSUrlProtectionSpace space, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(NSURLCredential * _Nullable)defaultCredentialForProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
	//	[Export ("defaultCredentialForProtectionSpace:")]
	//	[return: NullAllowed]
	//	NSUrlCredential DefaultCredentialForProtectionSpace (NSUrlProtectionSpace space);

	//	// -(void)setDefaultCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
	//	[Export ("setDefaultCredential:forProtectionSpace:")]
	//	void SetDefaultCredential (NSUrlCredential credential, NSUrlProtectionSpace space);
	//}

	//// @interface NSURLSessionTaskAdditions (NSURLCredentialStorage)
	//[Category]
	//[BaseType (typeof(NSUrlCredentialStorage))]
	//interface NSURLCredentialStorage_NSURLSessionTaskAdditions
	//{
	//	// -(void)getCredentialsForProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace task:(NSURLSessionTask * _Nonnull)task completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *,NSURLCredential *> * _Nullable))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("getCredentialsForProtectionSpace:task:completionHandler:")]
	//	void GetCredentialsForProtectionSpace (NSUrlProtectionSpace protectionSpace, NSUrlSessionTask task, Action<NSDictionary<NSString, NSURLCredential>> completionHandler);

	//	// -(void)setCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace task:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("setCredential:forProtectionSpace:task:")]
	//	void SetCredential (NSUrlCredential credential, NSUrlProtectionSpace protectionSpace, NSUrlSessionTask task);

	//	// -(void)removeCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace options:(NSDictionary<NSString *,id> * _Nullable)options task:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("removeCredential:forProtectionSpace:options:task:")]
	//	void RemoveCredential (NSUrlCredential credential, NSUrlProtectionSpace protectionSpace, [NullAllowed] NSDictionary<NSString, NSObject> options, NSUrlSessionTask task);

	//	// -(void)getDefaultCredentialForProtectionSpace:(NSURLProtectionSpace * _Nonnull)space task:(NSURLSessionTask * _Nonnull)task completionHandler:(void (^ _Nonnull)(NSURLCredential * _Nullable))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("getDefaultCredentialForProtectionSpace:task:completionHandler:")]
	//	void GetDefaultCredentialForProtectionSpace (NSUrlProtectionSpace space, NSUrlSessionTask task, Action<NSURLCredential> completionHandler);

	//	// -(void)setDefaultCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace task:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("setDefaultCredential:forProtectionSpace:task:")]
	//	void SetDefaultCredential (NSUrlCredential credential, NSUrlProtectionSpace protectionSpace, NSUrlSessionTask task);
	//}

	//// @protocol NSURLProtocolClient <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSURLProtocolClient
	//{
	//	// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol wasRedirectedToRequest:(NSURLRequest * _Nonnull)request redirectResponse:(NSURLResponse * _Nonnull)redirectResponse;
	//	[Abstract]
	//	[Export ("URLProtocol:wasRedirectedToRequest:redirectResponse:")]
	//	void URLProtocol (NSUrlProtocol protocol, NSUrlRequest request, NSUrlResponse redirectResponse);

	//	// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol cachedResponseIsValid:(NSCachedURLResponse * _Nonnull)cachedResponse;
	//	[Abstract]
	//	[Export ("URLProtocol:cachedResponseIsValid:")]
	//	void URLProtocol (NSUrlProtocol protocol, NSCachedUrlResponse cachedResponse);

	//	// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didReceiveResponse:(NSURLResponse * _Nonnull)response cacheStoragePolicy:(NSURLCacheStoragePolicy)policy;
	//	[Abstract]
	//	[Export ("URLProtocol:didReceiveResponse:cacheStoragePolicy:")]
	//	void URLProtocol (NSUrlProtocol protocol, NSUrlResponse response, NSURLCacheStoragePolicy policy);

	//	// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didLoadData:(NSData * _Nonnull)data;
	//	[Abstract]
	//	[Export ("URLProtocol:didLoadData:")]
	//	void URLProtocol (NSUrlProtocol protocol, NSData data);

	//	// @required -(void)URLProtocolDidFinishLoading:(NSURLProtocol * _Nonnull)protocol;
	//	[Abstract]
	//	[Export ("URLProtocolDidFinishLoading:")]
	//	void URLProtocolDidFinishLoading (NSUrlProtocol protocol);

	//	// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didFailWithError:(NSError * _Nonnull)error;
	//	[Abstract]
	//	[Export ("URLProtocol:didFailWithError:")]
	//	void URLProtocol (NSUrlProtocol protocol, NSError error);

	//	// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
	//	[Abstract]
	//	[Export ("URLProtocol:didReceiveAuthenticationChallenge:")]
	//	void URLProtocol (NSUrlProtocol protocol, NSUrlAuthenticationChallenge challenge);

	//	// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
	//	[Abstract]
	//	[Export ("URLProtocol:didCancelAuthenticationChallenge:")]
	//	void URLProtocol (NSUrlProtocol protocol, NSUrlAuthenticationChallenge challenge);
	//}

	//// @interface NSURLProtocol : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSURLProtocol
	//{
	//	// -(instancetype _Nonnull)initWithRequest:(NSURLRequest * _Nonnull)request cachedResponse:(NSCachedURLResponse * _Nullable)cachedResponse client:(id<NSURLProtocolClient> _Nullable)client __attribute__((objc_designated_initializer));
	//	[Export ("initWithRequest:cachedResponse:client:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrlRequest request, [NullAllowed] NSCachedUrlResponse cachedResponse, [NullAllowed] NSURLProtocolClient client);

	//	// @property (readonly, retain) id<NSURLProtocolClient> _Nullable client;
	//	[NullAllowed, Export ("client", ArgumentSemantic.Retain)]
	//	NSURLProtocolClient Client { get; }

	//	// @property (readonly, copy) NSURLRequest * _Nonnull request;
	//	[Export ("request", ArgumentSemantic.Copy)]
	//	NSUrlRequest Request { get; }

	//	// @property (readonly, copy) NSCachedURLResponse * _Nullable cachedResponse;
	//	[NullAllowed, Export ("cachedResponse", ArgumentSemantic.Copy)]
	//	NSCachedUrlResponse CachedResponse { get; }

	//	// +(BOOL)canInitWithRequest:(NSURLRequest * _Nonnull)request;
	//	[Static]
	//	[Export ("canInitWithRequest:")]
	//	bool CanInitWithRequest (NSUrlRequest request);

	//	// +(NSURLRequest * _Nonnull)canonicalRequestForRequest:(NSURLRequest * _Nonnull)request;
	//	[Static]
	//	[Export ("canonicalRequestForRequest:")]
	//	NSUrlRequest CanonicalRequestForRequest (NSUrlRequest request);

	//	// +(BOOL)requestIsCacheEquivalent:(NSURLRequest * _Nonnull)a toRequest:(NSURLRequest * _Nonnull)b;
	//	[Static]
	//	[Export ("requestIsCacheEquivalent:toRequest:")]
	//	bool RequestIsCacheEquivalent (NSUrlRequest a, NSUrlRequest b);

	//	// -(void)startLoading;
	//	[Export ("startLoading")]
	//	void StartLoading ();

	//	// -(void)stopLoading;
	//	[Export ("stopLoading")]
	//	void StopLoading ();

	//	// +(id _Nullable)propertyForKey:(NSString * _Nonnull)key inRequest:(NSURLRequest * _Nonnull)request;
	//	[Static]
	//	[Export ("propertyForKey:inRequest:")]
	//	[return: NullAllowed]
	//	NSObject PropertyForKey (string key, NSUrlRequest request);

	//	// +(void)setProperty:(id _Nonnull)value forKey:(NSString * _Nonnull)key inRequest:(NSMutableURLRequest * _Nonnull)request;
	//	[Static]
	//	[Export ("setProperty:forKey:inRequest:")]
	//	void SetProperty (NSObject value, string key, NSMutableUrlRequest request);

	//	// +(void)removePropertyForKey:(NSString * _Nonnull)key inRequest:(NSMutableURLRequest * _Nonnull)request;
	//	[Static]
	//	[Export ("removePropertyForKey:inRequest:")]
	//	void RemovePropertyForKey (string key, NSMutableUrlRequest request);

	//	// +(BOOL)registerClass:(Class _Nonnull)protocolClass;
	//	[Static]
	//	[Export ("registerClass:")]
	//	bool RegisterClass (Class protocolClass);

	//	// +(void)unregisterClass:(Class _Nonnull)protocolClass;
	//	[Static]
	//	[Export ("unregisterClass:")]
	//	void UnregisterClass (Class protocolClass);
	//}

	//// @interface NSURLSessionTaskAdditions (NSURLProtocol)
	//[Category]
	//[BaseType (typeof(NSUrlProtocol))]
	//interface NSURLProtocol_NSURLSessionTaskAdditions
	//{
	//	// +(BOOL)canInitWithTask:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Static]
	//	[Export ("canInitWithTask:")]
	//	bool CanInitWithTask (NSUrlSessionTask task);

	//	// -(instancetype _Nonnull)initWithTask:(NSURLSessionTask * _Nonnull)task cachedResponse:(NSCachedURLResponse * _Nullable)cachedResponse client:(id<NSURLProtocolClient> _Nullable)client __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("initWithTask:cachedResponse:client:")]
	//	IntPtr Constructor (NSUrlSessionTask task, [NullAllowed] NSCachedUrlResponse cachedResponse, [NullAllowed] NSURLProtocolClient client);

	//	// @property (readonly, copy) NSURLSessionTask * _Nullable task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[NullAllowed, Export ("task", ArgumentSemantic.Copy)]
	//	NSUrlSessionTask Task { get; }
	//}

	//// @interface NSURLRequest : NSObject <NSSecureCoding, NSCopying, NSMutableCopying>
	//[BaseType (typeof(NSObject))]
	//interface NSURLRequest : INSSecureCoding, INSCopying, INSMutableCopying
	//{
	//	// +(instancetype _Nonnull)requestWithURL:(NSURL * _Nonnull)URL;
	//	[Static]
	//	[Export ("requestWithURL:")]
	//	NSUrlRequest RequestWithURL (NSUrl URL);

	//	// @property (readonly, class) BOOL supportsSecureCoding;
	//	[Static]
	//	[Export ("supportsSecureCoding")]
	//	bool SupportsSecureCoding { get; }

	//	// +(instancetype _Nonnull)requestWithURL:(NSURL * _Nonnull)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval;
	//	[Static]
	//	[Export ("requestWithURL:cachePolicy:timeoutInterval:")]
	//	NSUrlRequest RequestWithURL (NSUrl URL, NSURLRequestCachePolicy cachePolicy, double timeoutInterval);

	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL;
	//	[Export ("initWithURL:")]
	//	IntPtr Constructor (NSUrl URL);

	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval __attribute__((objc_designated_initializer));
	//	[Export ("initWithURL:cachePolicy:timeoutInterval:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl URL, NSURLRequestCachePolicy cachePolicy, double timeoutInterval);

	//	// @property (readonly, copy) NSURL * _Nullable URL;
	//	[NullAllowed, Export ("URL", ArgumentSemantic.Copy)]
	//	NSUrl URL { get; }

	//	// @property (readonly) NSURLRequestCachePolicy cachePolicy;
	//	[Export ("cachePolicy")]
	//	NSURLRequestCachePolicy CachePolicy { get; }

	//	// @property (readonly) NSTimeInterval timeoutInterval;
	//	[Export ("timeoutInterval")]
	//	double TimeoutInterval { get; }

	//	// @property (readonly, copy) NSURL * _Nullable mainDocumentURL;
	//	[NullAllowed, Export ("mainDocumentURL", ArgumentSemantic.Copy)]
	//	NSUrl MainDocumentURL { get; }

	//	// @property (readonly) NSURLRequestNetworkServiceType networkServiceType __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[Export ("networkServiceType")]
	//	NSURLRequestNetworkServiceType NetworkServiceType { get; }

	//	// @property (readonly) BOOL allowsCellularAccess __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Export ("allowsCellularAccess")]
	//	bool AllowsCellularAccess { get; }
	//}

	//// @interface NSMutableURLRequest : NSURLRequest
	//[BaseType (typeof(NSUrlRequest))]
	//interface NSMutableURLRequest
	//{
	//	// @property (copy) NSURL * _Nullable URL;
	//	[NullAllowed, Export ("URL", ArgumentSemantic.Copy)]
	//	NSUrl URL { get; set; }

	//	// @property NSURLRequestCachePolicy cachePolicy;
	//	[Export ("cachePolicy", ArgumentSemantic.Assign)]
	//	NSURLRequestCachePolicy CachePolicy { get; set; }

	//	// @property NSTimeInterval timeoutInterval;
	//	[Export ("timeoutInterval")]
	//	double TimeoutInterval { get; set; }

	//	// @property (copy) NSURL * _Nullable mainDocumentURL;
	//	[NullAllowed, Export ("mainDocumentURL", ArgumentSemantic.Copy)]
	//	NSUrl MainDocumentURL { get; set; }

	//	// @property NSURLRequestNetworkServiceType networkServiceType __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[Export ("networkServiceType", ArgumentSemantic.Assign)]
	//	NSURLRequestNetworkServiceType NetworkServiceType { get; set; }

	//	// @property BOOL allowsCellularAccess __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Export ("allowsCellularAccess")]
	//	bool AllowsCellularAccess { get; set; }
	//}

	//// @interface NSHTTPURLRequest (NSURLRequest)
	//[Category]
	//[BaseType (typeof(NSUrlRequest))]
	//interface NSURLRequest_NSHTTPURLRequest
	//{
	//	// @property (readonly, copy) NSString * _Nullable HTTPMethod;
	//	[NullAllowed, Export ("HTTPMethod")]
	//	string HTTPMethod { get; }

	//	// @property (readonly, copy) NSDictionary<NSString *,NSString *> * _Nullable allHTTPHeaderFields;
	//	[NullAllowed, Export ("allHTTPHeaderFields", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSString> AllHTTPHeaderFields { get; }

	//	// -(NSString * _Nullable)valueForHTTPHeaderField:(NSString * _Nonnull)field;
	//	[Export ("valueForHTTPHeaderField:")]
	//	[return: NullAllowed]
	//	string ValueForHTTPHeaderField (string field);

	//	// @property (readonly, copy) NSData * _Nullable HTTPBody;
	//	[NullAllowed, Export ("HTTPBody", ArgumentSemantic.Copy)]
	//	NSData HTTPBody { get; }

	//	// @property (readonly, retain) NSInputStream * _Nullable HTTPBodyStream;
	//	[NullAllowed, Export ("HTTPBodyStream", ArgumentSemantic.Retain)]
	//	NSInputStream HTTPBodyStream { get; }

	//	// @property (readonly) BOOL HTTPShouldHandleCookies;
	//	[Export ("HTTPShouldHandleCookies")]
	//	bool HTTPShouldHandleCookies { get; }

	//	// @property (readonly) BOOL HTTPShouldUsePipelining __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[Export ("HTTPShouldUsePipelining")]
	//	bool HTTPShouldUsePipelining { get; }
	//}

	//// @interface NSMutableHTTPURLRequest (NSMutableURLRequest)
	//[Category]
	//[BaseType (typeof(NSMutableUrlRequest))]
	//interface NSMutableURLRequest_NSMutableHTTPURLRequest
	//{
	//	// @property (copy) NSString * _Nonnull HTTPMethod;
	//	[Export ("HTTPMethod")]
	//	string HTTPMethod { get; set; }

	//	// @property (copy) NSDictionary<NSString *,NSString *> * _Nullable allHTTPHeaderFields;
	//	[NullAllowed, Export ("allHTTPHeaderFields", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSString> AllHTTPHeaderFields { get; set; }

	//	// -(void)setValue:(NSString * _Nullable)value forHTTPHeaderField:(NSString * _Nonnull)field;
	//	[Export ("setValue:forHTTPHeaderField:")]
	//	void SetValue ([NullAllowed] string value, string field);

	//	// -(void)addValue:(NSString * _Nonnull)value forHTTPHeaderField:(NSString * _Nonnull)field;
	//	[Export ("addValue:forHTTPHeaderField:")]
	//	void AddValue (string value, string field);

	//	// @property (copy) NSData * _Nullable HTTPBody;
	//	[NullAllowed, Export ("HTTPBody", ArgumentSemantic.Copy)]
	//	NSData HTTPBody { get; set; }

	//	// @property (retain) NSInputStream * _Nullable HTTPBodyStream;
	//	[NullAllowed, Export ("HTTPBodyStream", ArgumentSemantic.Retain)]
	//	NSInputStream HTTPBodyStream { get; set; }

	//	// @property BOOL HTTPShouldHandleCookies;
	//	[Export ("HTTPShouldHandleCookies")]
	//	bool HTTPShouldHandleCookies { get; set; }

	//	// @property BOOL HTTPShouldUsePipelining __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[Export ("HTTPShouldUsePipelining")]
	//	bool HTTPShouldUsePipelining { get; set; }
	//}

	//// @interface NSURLResponse : NSObject <NSSecureCoding, NSCopying>
	//[BaseType (typeof(NSObject))]
	//interface NSURLResponse : INSSecureCoding, INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL MIMEType:(NSString * _Nullable)MIMEType expectedContentLength:(NSInteger)length textEncodingName:(NSString * _Nullable)name __attribute__((objc_designated_initializer));
	//	[Export ("initWithURL:MIMEType:expectedContentLength:textEncodingName:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl URL, [NullAllowed] string MIMEType, nint length, [NullAllowed] string name);

	//	// @property (readonly, copy) NSURL * _Nullable URL;
	//	[NullAllowed, Export ("URL", ArgumentSemantic.Copy)]
	//	NSUrl URL { get; }

	//	// @property (readonly, copy) NSString * _Nullable MIMEType;
	//	[NullAllowed, Export ("MIMEType")]
	//	string MIMEType { get; }

	//	// @property (readonly) long long expectedContentLength;
	//	[Export ("expectedContentLength")]
	//	long ExpectedContentLength { get; }

	//	// @property (readonly, copy) NSString * _Nullable textEncodingName;
	//	[NullAllowed, Export ("textEncodingName")]
	//	string TextEncodingName { get; }

	//	// @property (readonly, copy) NSString * _Nullable suggestedFilename;
	//	[NullAllowed, Export ("suggestedFilename")]
	//	string SuggestedFilename { get; }
	//}

	//// @interface NSHTTPURLResponse : NSURLResponse
	//[BaseType (typeof(NSUrlResponse))]
	//interface NSHTTPURLResponse
	//{
	//	// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url statusCode:(NSInteger)statusCode HTTPVersion:(NSString * _Nullable)HTTPVersion headerFields:(NSDictionary<NSString *,NSString *> * _Nullable)headerFields __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("initWithURL:statusCode:HTTPVersion:headerFields:")]
	//	IntPtr Constructor (NSUrl url, nint statusCode, [NullAllowed] string HTTPVersion, [NullAllowed] NSDictionary<NSString, NSString> headerFields);

	//	// @property (readonly) NSInteger statusCode;
	//	[Export ("statusCode")]
	//	nint StatusCode { get; }

	//	// @property (readonly, copy) NSDictionary * _Nonnull allHeaderFields;
	//	[Export ("allHeaderFields", ArgumentSemantic.Copy)]
	//	NSDictionary AllHeaderFields { get; }

	//	// +(NSString * _Nonnull)localizedStringForStatusCode:(NSInteger)statusCode;
	//	[Static]
	//	[Export ("localizedStringForStatusCode:")]
	//	string LocalizedStringForStatusCode (nint statusCode);
	//}

	//// @interface NSUserDefaults : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSUserDefaults
	//{
	//	// @property (readonly, strong, class) NSUserDefaults * _Nonnull standardUserDefaults;
	//	[Static]
	//	[Export ("standardUserDefaults", ArgumentSemantic.Strong)]
	//	NSUserDefaults StandardUserDefaults { get; }

	//	// +(void)resetStandardUserDefaults;
	//	[Static]
	//	[Export ("resetStandardUserDefaults")]
	//	void ResetStandardUserDefaults ();

	//	// -(instancetype _Nullable)initWithSuiteName:(NSString * _Nullable)suitename __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("initWithSuiteName:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string suitename);

	//	// -(id _Nullable)initWithUser:(NSString * _Nonnull)username __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Use -init instead")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -init instead")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -init instead")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -init instead")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -init instead")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -init instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -init instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use -init instead")]
	//	[Export ("initWithUser:")]
	//	IntPtr Constructor (string username);

	//	// -(id _Nullable)objectForKey:(NSString * _Nonnull)defaultName;
	//	[Export ("objectForKey:")]
	//	[return: NullAllowed]
	//	NSObject ObjectForKey (string defaultName);

	//	// -(void)setObject:(id _Nullable)value forKey:(NSString * _Nonnull)defaultName;
	//	[Export ("setObject:forKey:")]
	//	void SetObject ([NullAllowed] NSObject value, string defaultName);

	//	// -(void)removeObjectForKey:(NSString * _Nonnull)defaultName;
	//	[Export ("removeObjectForKey:")]
	//	void RemoveObjectForKey (string defaultName);

	//	// -(NSString * _Nullable)stringForKey:(NSString * _Nonnull)defaultName;
	//	[Export ("stringForKey:")]
	//	[return: NullAllowed]
	//	string StringForKey (string defaultName);

	//	// -(NSArray * _Nullable)arrayForKey:(NSString * _Nonnull)defaultName;
	//	[Export ("arrayForKey:")]
	//	[Verify (StronglyTypedNSArray)]
	//	[return: NullAllowed]
	//	NSObject[] ArrayForKey (string defaultName);

	//	// -(NSDictionary<NSString *,id> * _Nullable)dictionaryForKey:(NSString * _Nonnull)defaultName;
	//	[Export ("dictionaryForKey:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> DictionaryForKey (string defaultName);

	//	// -(NSData * _Nullable)dataForKey:(NSString * _Nonnull)defaultName;
	//	[Export ("dataForKey:")]
	//	[return: NullAllowed]
	//	NSData DataForKey (string defaultName);

	//	// -(NSArray<NSString *> * _Nullable)stringArrayForKey:(NSString * _Nonnull)defaultName;
	//	[Export ("stringArrayForKey:")]
	//	[return: NullAllowed]
	//	string[] StringArrayForKey (string defaultName);

	//	// -(NSInteger)integerForKey:(NSString * _Nonnull)defaultName;
	//	[Export ("integerForKey:")]
	//	nint IntegerForKey (string defaultName);

	//	// -(float)floatForKey:(NSString * _Nonnull)defaultName;
	//	[Export ("floatForKey:")]
	//	float FloatForKey (string defaultName);

	//	// -(double)doubleForKey:(NSString * _Nonnull)defaultName;
	//	[Export ("doubleForKey:")]
	//	double DoubleForKey (string defaultName);

	//	// -(BOOL)boolForKey:(NSString * _Nonnull)defaultName;
	//	[Export ("boolForKey:")]
	//	bool BoolForKey (string defaultName);

	//	// -(NSURL * _Nullable)URLForKey:(NSString * _Nonnull)defaultName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("URLForKey:")]
	//	[return: NullAllowed]
	//	NSUrl URLForKey (string defaultName);

	//	// -(void)setInteger:(NSInteger)value forKey:(NSString * _Nonnull)defaultName;
	//	[Export ("setInteger:forKey:")]
	//	void SetInteger (nint value, string defaultName);

	//	// -(void)setFloat:(float)value forKey:(NSString * _Nonnull)defaultName;
	//	[Export ("setFloat:forKey:")]
	//	void SetFloat (float value, string defaultName);

	//	// -(void)setDouble:(double)value forKey:(NSString * _Nonnull)defaultName;
	//	[Export ("setDouble:forKey:")]
	//	void SetDouble (double value, string defaultName);

	//	// -(void)setBool:(BOOL)value forKey:(NSString * _Nonnull)defaultName;
	//	[Export ("setBool:forKey:")]
	//	void SetBool (bool value, string defaultName);

	//	// -(void)setURL:(NSURL * _Nullable)url forKey:(NSString * _Nonnull)defaultName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("setURL:forKey:")]
	//	void SetURL ([NullAllowed] NSUrl url, string defaultName);

	//	// -(void)registerDefaults:(NSDictionary<NSString *,id> * _Nonnull)registrationDictionary;
	//	[Export ("registerDefaults:")]
	//	void RegisterDefaults (NSDictionary<NSString, NSObject> registrationDictionary);

	//	// -(void)addSuiteNamed:(NSString * _Nonnull)suiteName;
	//	[Export ("addSuiteNamed:")]
	//	void AddSuiteNamed (string suiteName);

	//	// -(void)removeSuiteNamed:(NSString * _Nonnull)suiteName;
	//	[Export ("removeSuiteNamed:")]
	//	void RemoveSuiteNamed (string suiteName);

	//	// -(NSDictionary<NSString *,id> * _Nonnull)dictionaryRepresentation;
	//	[Export ("dictionaryRepresentation")]
	//	[Verify (MethodToProperty)]
	//	NSDictionary<NSString, NSObject> DictionaryRepresentation { get; }

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull volatileDomainNames;
	//	[Export ("volatileDomainNames", ArgumentSemantic.Copy)]
	//	string[] VolatileDomainNames { get; }

	//	// -(NSDictionary<NSString *,id> * _Nonnull)volatileDomainForName:(NSString * _Nonnull)domainName;
	//	[Export ("volatileDomainForName:")]
	//	NSDictionary<NSString, NSObject> VolatileDomainForName (string domainName);

	//	// -(void)setVolatileDomain:(NSDictionary<NSString *,id> * _Nonnull)domain forName:(NSString * _Nonnull)domainName;
	//	[Export ("setVolatileDomain:forName:")]
	//	void SetVolatileDomain (NSDictionary<NSString, NSObject> domain, string domainName);

	//	// -(void)removeVolatileDomainForName:(NSString * _Nonnull)domainName;
	//	[Export ("removeVolatileDomainForName:")]
	//	void RemoveVolatileDomainForName (string domainName);

	//	// -(NSArray * _Nonnull)persistentDomainNames __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Not recommended")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Not recommended")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Not recommended")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not recommended")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Not recommended")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Not recommended")]
	//	[Introduced (PlatformName.MacOSX, 10, 0, message: "Not recommended")]
	//	[Deprecated (PlatformName.MacOSX, 10, 9, message: "Not recommended")]
	//	[Export ("persistentDomainNames")]
	//	[Verify (MethodToProperty), Verify (StronglyTypedNSArray)]
	//	NSObject[] PersistentDomainNames { get; }

	//	// -(NSDictionary<NSString *,id> * _Nullable)persistentDomainForName:(NSString * _Nonnull)domainName;
	//	[Export ("persistentDomainForName:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> PersistentDomainForName (string domainName);

	//	// -(void)setPersistentDomain:(NSDictionary<NSString *,id> * _Nonnull)domain forName:(NSString * _Nonnull)domainName;
	//	[Export ("setPersistentDomain:forName:")]
	//	void SetPersistentDomain (NSDictionary<NSString, NSObject> domain, string domainName);

	//	// -(void)removePersistentDomainForName:(NSString * _Nonnull)domainName;
	//	[Export ("removePersistentDomainForName:")]
	//	void RemovePersistentDomainForName (string domainName);

	//	// -(BOOL)synchronize;
	//	[Export ("synchronize")]
	//	[Verify (MethodToProperty)]
	//	bool Synchronize { get; }

	//	// -(BOOL)objectIsForcedForKey:(NSString * _Nonnull)key;
	//	[Export ("objectIsForcedForKey:")]
	//	bool ObjectIsForcedForKey (string key);

	//	// -(BOOL)objectIsForcedForKey:(NSString * _Nonnull)key inDomain:(NSString * _Nonnull)domain;
	//	[Export ("objectIsForcedForKey:inDomain:")]
	//	bool ObjectIsForcedForKey (string key, string domain);
	//}

	//// @interface NSValueTransformer : NSObject
	//[iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSValueTransformer
	//{
	//	// +(void)setValueTransformer:(NSValueTransformer * _Nullable)transformer forName:(NSValueTransformerName _Nonnull)name;
	//	[Static]
	//	[Export ("setValueTransformer:forName:")]
	//	void SetValueTransformer ([NullAllowed] NSValueTransformer transformer, string name);

	//	// +(NSValueTransformer * _Nullable)valueTransformerForName:(NSValueTransformerName _Nonnull)name;
	//	[Static]
	//	[Export ("valueTransformerForName:")]
	//	[return: NullAllowed]
	//	NSValueTransformer ValueTransformerForName (string name);

	//	// +(NSArray<NSValueTransformerName> * _Nonnull)valueTransformerNames;
	//	[Static]
	//	[Export ("valueTransformerNames")]
	//	[Verify (MethodToProperty)]
	//	string[] ValueTransformerNames { get; }

	//	// +(Class _Nonnull)transformedValueClass;
	//	[Static]
	//	[Export ("transformedValueClass")]
	//	[Verify (MethodToProperty)]
	//	Class TransformedValueClass { get; }

	//	// +(BOOL)allowsReverseTransformation;
	//	[Static]
	//	[Export ("allowsReverseTransformation")]
	//	[Verify (MethodToProperty)]
	//	bool AllowsReverseTransformation { get; }

	//	// -(id _Nullable)transformedValue:(id _Nullable)value;
	//	[Export ("transformedValue:")]
	//	[return: NullAllowed]
	//	NSObject TransformedValue ([NullAllowed] NSObject value);

	//	// -(id _Nullable)reverseTransformedValue:(id _Nullable)value;
	//	[Export ("reverseTransformedValue:")]
	//	[return: NullAllowed]
	//	NSObject ReverseTransformedValue ([NullAllowed] NSObject value);
	//}

	//// @interface NSSecureUnarchiveFromDataTransformer : NSValueTransformer
	//[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	//[BaseType (typeof(NSValueTransformer))]
	//interface NSSecureUnarchiveFromDataTransformer
	//{
	//	// @property (readonly, copy, class) NSArray<Class> * _Nonnull allowedTopLevelClasses;
	//	[Static]
	//	[Export ("allowedTopLevelClasses", ArgumentSemantic.Copy)]
	//	Class[] AllowedTopLevelClasses { get; }
	//}

	//// @interface NSXMLParser : NSObject
	//[BaseType (typeof(NSObject))]
	//interface NSXMLParser
	//{
	//	// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Export ("initWithContentsOfURL:")]
	//	IntPtr Constructor (NSUrl url);

	//	// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data __attribute__((objc_designated_initializer));
	//	[Export ("initWithData:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSData data);

	//	// -(instancetype _Nonnull)initWithStream:(NSInputStream * _Nonnull)stream __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("initWithStream:")]
	//	IntPtr Constructor (NSInputStream stream);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSXMLParserDelegate Delegate { get; set; }

	//	// @property (assign) id<NSXMLParserDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property BOOL shouldProcessNamespaces;
	//	[Export ("shouldProcessNamespaces")]
	//	bool ShouldProcessNamespaces { get; set; }

	//	// @property BOOL shouldReportNamespacePrefixes;
	//	[Export ("shouldReportNamespacePrefixes")]
	//	bool ShouldReportNamespacePrefixes { get; set; }

	//	// @property NSXMLParserExternalEntityResolvingPolicy externalEntityResolvingPolicy __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
	//	[Export ("externalEntityResolvingPolicy", ArgumentSemantic.Assign)]
	//	NSXMLParserExternalEntityResolvingPolicy ExternalEntityResolvingPolicy { get; set; }

	//	// @property (copy) NSSet<NSURL *> * _Nullable allowedExternalEntityURLs __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
	//	[NullAllowed, Export ("allowedExternalEntityURLs", ArgumentSemantic.Copy)]
	//	NSSet<NSURL> AllowedExternalEntityURLs { get; set; }

	//	// -(BOOL)parse;
	//	[Export ("parse")]
	//	[Verify (MethodToProperty)]
	//	bool Parse { get; }

	//	// -(void)abortParsing;
	//	[Export ("abortParsing")]
	//	void AbortParsing ();

	//	// @property (readonly, copy) NSError * _Nullable parserError;
	//	[NullAllowed, Export ("parserError", ArgumentSemantic.Copy)]
	//	NSError ParserError { get; }

	//	// @property BOOL shouldResolveExternalEntities;
	//	[Export ("shouldResolveExternalEntities")]
	//	bool ShouldResolveExternalEntities { get; set; }
	//}

	//// @interface NSXMLParserLocatorAdditions (NSXMLParser)
	//[Category]
	//[BaseType (typeof(NSXMLParser))]
	//interface NSXMLParser_NSXMLParserLocatorAdditions
	//{
	//	// @property (readonly, copy) NSString * _Nullable publicID;
	//	[NullAllowed, Export ("publicID")]
	//	string PublicID { get; }

	//	// @property (readonly, copy) NSString * _Nullable systemID;
	//	[NullAllowed, Export ("systemID")]
	//	string SystemID { get; }

	//	// @property (readonly) NSInteger lineNumber;
	//	[Export ("lineNumber")]
	//	nint LineNumber { get; }

	//	// @property (readonly) NSInteger columnNumber;
	//	[Export ("columnNumber")]
	//	nint ColumnNumber { get; }
	//}

	//// @protocol NSXMLParserDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSXMLParserDelegate
	//{
	//	// @optional -(void)parserDidStartDocument:(NSXMLParser * _Nonnull)parser;
	//	[Export ("parserDidStartDocument:")]
	//	void ParserDidStartDocument (NSXMLParser parser);

	//	// @optional -(void)parserDidEndDocument:(NSXMLParser * _Nonnull)parser;
	//	[Export ("parserDidEndDocument:")]
	//	void ParserDidEndDocument (NSXMLParser parser);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundNotationDeclarationWithName:(NSString * _Nonnull)name publicID:(NSString * _Nullable)publicID systemID:(NSString * _Nullable)systemID;
	//	[Export ("parser:foundNotationDeclarationWithName:publicID:systemID:")]
	//	void Parser (NSXMLParser parser, string name, [NullAllowed] string publicID, [NullAllowed] string systemID);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundUnparsedEntityDeclarationWithName:(NSString * _Nonnull)name publicID:(NSString * _Nullable)publicID systemID:(NSString * _Nullable)systemID notationName:(NSString * _Nullable)notationName;
	//	[Export ("parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:")]
	//	void Parser (NSXMLParser parser, string name, [NullAllowed] string publicID, [NullAllowed] string systemID, [NullAllowed] string notationName);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundAttributeDeclarationWithName:(NSString * _Nonnull)attributeName forElement:(NSString * _Nonnull)elementName type:(NSString * _Nullable)type defaultValue:(NSString * _Nullable)defaultValue;
	//	[Export ("parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:")]
	//	void Parser (NSXMLParser parser, string attributeName, string elementName, [NullAllowed] string type, [NullAllowed] string defaultValue);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundElementDeclarationWithName:(NSString * _Nonnull)elementName model:(NSString * _Nonnull)model;
	//	[Export ("parser:foundElementDeclarationWithName:model:")]
	//	void Parser (NSXMLParser parser, string elementName, string model);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundInternalEntityDeclarationWithName:(NSString * _Nonnull)name value:(NSString * _Nullable)value;
	//	[Export ("parser:foundInternalEntityDeclarationWithName:value:")]
	//	void Parser (NSXMLParser parser, string name, [NullAllowed] string value);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundExternalEntityDeclarationWithName:(NSString * _Nonnull)name publicID:(NSString * _Nullable)publicID systemID:(NSString * _Nullable)systemID;
	//	[Export ("parser:foundExternalEntityDeclarationWithName:publicID:systemID:")]
	//	void Parser (NSXMLParser parser, string name, [NullAllowed] string publicID, [NullAllowed] string systemID);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *,NSString *> * _Nonnull)attributeDict;
	//	[Export ("parser:didStartElement:namespaceURI:qualifiedName:attributes:")]
	//	void Parser (NSXMLParser parser, string elementName, [NullAllowed] string namespaceURI, [NullAllowed] string qName, NSDictionary<NSString, NSString> attributeDict);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
	//	[Export ("parser:didEndElement:namespaceURI:qualifiedName:")]
	//	void Parser (NSXMLParser parser, string elementName, [NullAllowed] string namespaceURI, [NullAllowed] string qName);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser didStartMappingPrefix:(NSString * _Nonnull)prefix toURI:(NSString * _Nonnull)namespaceURI;
	//	[Export ("parser:didStartMappingPrefix:toURI:")]
	//	void Parser (NSXMLParser parser, string prefix, string namespaceURI);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser didEndMappingPrefix:(NSString * _Nonnull)prefix;
	//	[Export ("parser:didEndMappingPrefix:")]
	//	void Parser (NSXMLParser parser, string prefix);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
	//	[Export ("parser:foundCharacters:")]
	//	void Parser (NSXMLParser parser, string @string);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundIgnorableWhitespace:(NSString * _Nonnull)whitespaceString;
	//	[Export ("parser:foundIgnorableWhitespace:")]
	//	void Parser (NSXMLParser parser, string whitespaceString);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundProcessingInstructionWithTarget:(NSString * _Nonnull)target data:(NSString * _Nullable)data;
	//	[Export ("parser:foundProcessingInstructionWithTarget:data:")]
	//	void Parser (NSXMLParser parser, string target, [NullAllowed] string data);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundComment:(NSString * _Nonnull)comment;
	//	[Export ("parser:foundComment:")]
	//	void Parser (NSXMLParser parser, string comment);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundCDATA:(NSData * _Nonnull)CDATABlock;
	//	[Export ("parser:foundCDATA:")]
	//	void Parser (NSXMLParser parser, NSData CDATABlock);

	//	// @optional -(NSData * _Nullable)parser:(NSXMLParser * _Nonnull)parser resolveExternalEntityName:(NSString * _Nonnull)name systemID:(NSString * _Nullable)systemID;
	//	[Export ("parser:resolveExternalEntityName:systemID:")]
	//	[return: NullAllowed]
	//	NSData Parser (NSXMLParser parser, string name, [NullAllowed] string systemID);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser parseErrorOccurred:(NSError * _Nonnull)parseError;
	//	[Export ("parser:parseErrorOccurred:")]
	//	void Parser (NSXMLParser parser, NSError parseError);

	//	// @optional -(void)parser:(NSXMLParser * _Nonnull)parser validationErrorOccurred:(NSError * _Nonnull)validationError;
	//	[Export ("parser:validationErrorOccurred:")]
	//	void Parser (NSXMLParser parser, NSError validationError);
	//}

	//// @protocol NSXPCProxyCreating
	//[Protocol, Model]
	//interface NSXPCProxyCreating
	//{
	//	// @required -(id _Nonnull)remoteObjectProxy;
	//	[Abstract]
	//	[Export ("remoteObjectProxy")]
	//	[Verify (MethodToProperty)]
	//	NSObject RemoteObjectProxy { get; }

	//	// @required -(id _Nonnull)remoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler;
	//	[Abstract]
	//	[Export ("remoteObjectProxyWithErrorHandler:")]
	//	NSObject RemoteObjectProxyWithErrorHandler (Action<NSError> handler);

	//	// @optional -(id _Nonnull)synchronousRemoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("synchronousRemoteObjectProxyWithErrorHandler:")]
	//	NSObject SynchronousRemoteObjectProxyWithErrorHandler (Action<NSError> handler);
	//}

	//// @interface NSXPCConnection : NSObject <NSXPCProxyCreating>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSXPCConnection : INSXPCProxyCreating
	//{
	//	// -(instancetype _Nonnull)initWithServiceName:(NSString * _Nonnull)serviceName __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("initWithServiceName:")]
	//	IntPtr Constructor (string serviceName);

	//	// @property (readonly, copy) NSString * _Nullable serviceName;
	//	[NullAllowed, Export ("serviceName")]
	//	string ServiceName { get; }

	//	// -(instancetype _Nonnull)initWithMachServiceName:(NSString * _Nonnull)name options:(NSXPCConnectionOptions)options __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("initWithMachServiceName:options:")]
	//	IntPtr Constructor (string name, NSXPCConnectionOptions options);

	//	// -(instancetype _Nonnull)initWithListenerEndpoint:(NSXPCListenerEndpoint * _Nonnull)endpoint;
	//	[Export ("initWithListenerEndpoint:")]
	//	IntPtr Constructor (NSXpcListenerEndpoint endpoint);

	//	// @property (readonly, retain) NSXPCListenerEndpoint * _Nonnull endpoint;
	//	[Export ("endpoint", ArgumentSemantic.Retain)]
	//	NSXpcListenerEndpoint Endpoint { get; }

	//	// @property (retain) NSXPCInterface * _Nullable exportedInterface;
	//	[NullAllowed, Export ("exportedInterface", ArgumentSemantic.Retain)]
	//	NSXPCInterface ExportedInterface { get; set; }

	//	// @property (retain) id _Nullable exportedObject;
	//	[NullAllowed, Export ("exportedObject", ArgumentSemantic.Retain)]
	//	NSObject ExportedObject { get; set; }

	//	// @property (retain) NSXPCInterface * _Nullable remoteObjectInterface;
	//	[NullAllowed, Export ("remoteObjectInterface", ArgumentSemantic.Retain)]
	//	NSXPCInterface RemoteObjectInterface { get; set; }

	//	// @property (readonly, retain) id _Nonnull remoteObjectProxy;
	//	[Export ("remoteObjectProxy", ArgumentSemantic.Retain)]
	//	NSObject RemoteObjectProxy { get; }

	//	// -(id _Nonnull)remoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler;
	//	[Export ("remoteObjectProxyWithErrorHandler:")]
	//	NSObject RemoteObjectProxyWithErrorHandler (Action<NSError> handler);

	//	// -(id _Nonnull)synchronousRemoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("synchronousRemoteObjectProxyWithErrorHandler:")]
	//	NSObject SynchronousRemoteObjectProxyWithErrorHandler (Action<NSError> handler);

	//	// @property (copy) void (^ _Nullable)(void) interruptionHandler;
	//	[NullAllowed, Export ("interruptionHandler", ArgumentSemantic.Copy)]
	//	Action InterruptionHandler { get; set; }

	//	// @property (copy) void (^ _Nullable)(void) invalidationHandler;
	//	[NullAllowed, Export ("invalidationHandler", ArgumentSemantic.Copy)]
	//	Action InvalidationHandler { get; set; }

	//	// -(void)resume;
	//	[Export ("resume")]
	//	void Resume ();

	//	// -(void)suspend;
	//	[Export ("suspend")]
	//	void Suspend ();

	//	// -(void)invalidate;
	//	[Export ("invalidate")]
	//	void Invalidate ();

	//	// @property (readonly) au_asid_t auditSessionIdentifier;
	//	[Export ("auditSessionIdentifier")]
	//	int AuditSessionIdentifier { get; }

	//	// @property (readonly) pid_t processIdentifier;
	//	[Export ("processIdentifier")]
	//	int ProcessIdentifier { get; }

	//	// @property (readonly) uid_t effectiveUserIdentifier;
	//	[Export ("effectiveUserIdentifier")]
	//	uint EffectiveUserIdentifier { get; }

	//	// @property (readonly) gid_t effectiveGroupIdentifier;
	//	[Export ("effectiveGroupIdentifier")]
	//	uint EffectiveGroupIdentifier { get; }
	//}

	//// @interface NSXPCListener : NSObject
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSXPCListener
	//{
	//	// +(NSXPCListener * _Nonnull)serviceListener;
	//	[Static]
	//	[Export ("serviceListener")]
	//	[Verify (MethodToProperty)]
	//	NSXPCListener ServiceListener { get; }

	//	// +(NSXPCListener * _Nonnull)anonymousListener;
	//	[Static]
	//	[Export ("anonymousListener")]
	//	[Verify (MethodToProperty)]
	//	NSXPCListener AnonymousListener { get; }

	//	// -(instancetype _Nonnull)initWithMachServiceName:(NSString * _Nonnull)name __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((objc_designated_initializer));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("initWithMachServiceName:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string name);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSXPCListenerDelegate Delegate { get; set; }

	//	// @property (assign) id<NSXPCListenerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, retain) NSXPCListenerEndpoint * _Nonnull endpoint;
	//	[Export ("endpoint", ArgumentSemantic.Retain)]
	//	NSXpcListenerEndpoint Endpoint { get; }

	//	// -(void)resume;
	//	[Export ("resume")]
	//	void Resume ();

	//	// -(void)suspend;
	//	[Export ("suspend")]
	//	void Suspend ();

	//	// -(void)invalidate;
	//	[Export ("invalidate")]
	//	void Invalidate ();
	//}

	//// @protocol NSXPCListenerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSXPCListenerDelegate
	//{
	//	// @optional -(BOOL)listener:(NSXPCListener * _Nonnull)listener shouldAcceptNewConnection:(NSXPCConnection * _Nonnull)newConnection;
	//	[Export ("listener:shouldAcceptNewConnection:")]
	//	bool ShouldAcceptNewConnection (NSXPCListener listener, NSXPCConnection newConnection);
	//}

	//// @interface NSXPCInterface : NSObject
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSXPCInterface
	//{
	//	// +(NSXPCInterface * _Nonnull)interfaceWithProtocol:(Protocol * _Nonnull)protocol;
	//	[Static]
	//	[Export ("interfaceWithProtocol:")]
	//	NSXPCInterface InterfaceWithProtocol (Protocol protocol);

	//	// @property (assign) Protocol * _Nonnull protocol;
	//	[Export ("protocol", ArgumentSemantic.Assign)]
	//	Protocol Protocol { get; set; }

	//	// -(void)setClasses:(NSSet<Class> * _Nonnull)classes forSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
	//	[Export ("setClasses:forSelector:argumentIndex:ofReply:")]
	//	void SetClasses (NSSet<Class> classes, Selector sel, nuint arg, bool ofReply);

	//	// -(NSSet<Class> * _Nonnull)classesForSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
	//	[Export ("classesForSelector:argumentIndex:ofReply:")]
	//	NSSet<Class> ClassesForSelector (Selector sel, nuint arg, bool ofReply);

	//	// -(void)setInterface:(NSXPCInterface * _Nonnull)ifc forSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
	//	[Export ("setInterface:forSelector:argumentIndex:ofReply:")]
	//	void SetInterface (NSXPCInterface ifc, Selector sel, nuint arg, bool ofReply);

	//	// -(NSXPCInterface * _Nullable)interfaceForSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
	//	[Export ("interfaceForSelector:argumentIndex:ofReply:")]
	//	[return: NullAllowed]
	//	NSXPCInterface InterfaceForSelector (Selector sel, nuint arg, bool ofReply);
	//}

	//// @interface NSXPCListenerEndpoint : NSObject <NSSecureCoding>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSXPCListenerEndpoint : INSSecureCoding
	//{
	//}

	//// @interface NSByteCountFormatter : NSFormatter
	//[iOS (6,0)]
	//[BaseType (typeof(NSFormatter))]
	//interface NSByteCountFormatter
	//{
	//	// +(NSString * _Nonnull)stringFromByteCount:(long long)byteCount countStyle:(NSByteCountFormatterCountStyle)countStyle;
	//	[Static]
	//	[Export ("stringFromByteCount:countStyle:")]
	//	string StringFromByteCount (long byteCount, NSByteCountFormatterCountStyle countStyle);

	//	// -(NSString * _Nonnull)stringFromByteCount:(long long)byteCount;
	//	[Export ("stringFromByteCount:")]
	//	string StringFromByteCount (long byteCount);

	//	// @property NSByteCountFormatterUnits allowedUnits;
	//	[Export ("allowedUnits", ArgumentSemantic.Assign)]
	//	NSByteCountFormatterUnits AllowedUnits { get; set; }

	//	// @property NSByteCountFormatterCountStyle countStyle;
	//	[Export ("countStyle", ArgumentSemantic.Assign)]
	//	NSByteCountFormatterCountStyle CountStyle { get; set; }

	//	// @property BOOL allowsNonnumericFormatting;
	//	[Export ("allowsNonnumericFormatting")]
	//	bool AllowsNonnumericFormatting { get; set; }

	//	// @property BOOL includesUnit;
	//	[Export ("includesUnit")]
	//	bool IncludesUnit { get; set; }

	//	// @property BOOL includesCount;
	//	[Export ("includesCount")]
	//	bool IncludesCount { get; set; }

	//	// @property BOOL includesActualByteCount;
	//	[Export ("includesActualByteCount")]
	//	bool IncludesActualByteCount { get; set; }

	//	// @property (getter = isAdaptive) BOOL adaptive;
	//	[Export ("adaptive")]
	//	bool Adaptive { [Bind ("isAdaptive")] get; set; }

	//	// @property BOOL zeroPadsFractionDigits;
	//	[Export ("zeroPadsFractionDigits")]
	//	bool ZeroPadsFractionDigits { get; set; }

	//	// @property NSFormattingContext formattingContext __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[Export ("formattingContext", ArgumentSemantic.Assign)]
	//	NSFormattingContext FormattingContext { get; set; }
	//}

	//// audit-objc-generics: @interface NSCache<KeyType, ObjectType> : NSObject
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSCache
	//{
	//	// @property (copy) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSCacheDelegate Delegate { get; set; }

	//	// @property (assign) id<NSCacheDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(ObjectType _Nullable)objectForKey:(KeyType _Nonnull)key;
	//	[Export ("objectForKey:")]
	//	[return: NullAllowed]
	//	NSObject ObjectForKey (NSObject key);

	//	// -(void)setObject:(ObjectType _Nonnull)obj forKey:(KeyType _Nonnull)key;
	//	[Export ("setObject:forKey:")]
	//	void SetObject (NSObject obj, NSObject key);

	//	// -(void)setObject:(ObjectType _Nonnull)obj forKey:(KeyType _Nonnull)key cost:(NSUInteger)g;
	//	[Export ("setObject:forKey:cost:")]
	//	void SetObject (NSObject obj, NSObject key, nuint g);

	//	// -(void)removeObjectForKey:(KeyType _Nonnull)key;
	//	[Export ("removeObjectForKey:")]
	//	void RemoveObjectForKey (NSObject key);

	//	// -(void)removeAllObjects;
	//	[Export ("removeAllObjects")]
	//	void RemoveAllObjects ();

	//	// @property NSUInteger totalCostLimit;
	//	[Export ("totalCostLimit")]
	//	nuint TotalCostLimit { get; set; }

	//	// @property NSUInteger countLimit;
	//	[Export ("countLimit")]
	//	nuint CountLimit { get; set; }

	//	// @property BOOL evictsObjectsWithDiscardedContent;
	//	[Export ("evictsObjectsWithDiscardedContent")]
	//	bool EvictsObjectsWithDiscardedContent { get; set; }
	//}

	//// @protocol NSCacheDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSCacheDelegate
	//{
	//	// @optional -(void)cache:(NSCache * _Nonnull)cache willEvictObject:(id _Nonnull)obj;
	//	[Export ("cache:willEvictObject:")]
	//	void WillEvictObject (NSCache cache, NSObject obj);
	//}

	//// @interface NSPredicate : NSObject <NSSecureCoding, NSCopying>
	//[iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSPredicate : INSSecureCoding, INSCopying
	//{
	//	// +(NSPredicate * _Nonnull)predicateWithFormat:(NSString * _Nonnull)predicateFormat argumentArray:(NSArray * _Nullable)arguments;
	//	[Static]
	//	[Export ("predicateWithFormat:argumentArray:")]
	//	[Verify (StronglyTypedNSArray)]
	//	NSPredicate PredicateWithFormat (string predicateFormat, [NullAllowed] NSObject[] arguments);

	//	// +(NSPredicate * _Nonnull)predicateWithFormat:(NSString * _Nonnull)predicateFormat, ...;
	//	[Static, Internal]
	//	[Export ("predicateWithFormat:", IsVariadic = true)]
	//	NSPredicate PredicateWithFormat (string predicateFormat, IntPtr varArgs);

	//	// +(NSPredicate * _Nonnull)predicateWithFormat:(NSString * _Nonnull)predicateFormat arguments:(va_list)argList;
	//	[Static]
	//	[Export ("predicateWithFormat:arguments:")]
	//	unsafe NSPredicate PredicateWithFormat (string predicateFormat, sbyte* argList);

	//	// +(NSPredicate * _Nullable)predicateFromMetadataQueryString:(NSString * _Nonnull)queryString __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,9)]
	//	[Static]
	//	[Export ("predicateFromMetadataQueryString:")]
	//	[return: NullAllowed]
	//	NSPredicate PredicateFromMetadataQueryString (string queryString);

	//	// +(NSPredicate * _Nonnull)predicateWithValue:(BOOL)value;
	//	[Static]
	//	[Export ("predicateWithValue:")]
	//	NSPredicate PredicateWithValue (bool value);

	//	// +(NSPredicate * _Nonnull)predicateWithBlock:(BOOL (^ _Nonnull)(id _Nullable, NSDictionary<NSString *,id> * _Nullable))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("predicateWithBlock:")]
	//	NSPredicate PredicateWithBlock (Func<NSObject, NSDictionary<NSString, NSObject>, bool> block);

	//	// @property (readonly, copy) NSString * _Nonnull predicateFormat;
	//	[Export ("predicateFormat")]
	//	string PredicateFormat { get; }

	//	// -(instancetype _Nonnull)predicateWithSubstitutionVariables:(NSDictionary<NSString *,id> * _Nonnull)variables;
	//	[Export ("predicateWithSubstitutionVariables:")]
	//	NSPredicate PredicateWithSubstitutionVariables (NSDictionary<NSString, NSObject> variables);

	//	// -(BOOL)evaluateWithObject:(id _Nullable)object;
	//	[Export ("evaluateWithObject:")]
	//	bool EvaluateWithObject ([NullAllowed] NSObject @object);

	//	// -(BOOL)evaluateWithObject:(id _Nullable)object substitutionVariables:(NSDictionary<NSString *,id> * _Nullable)bindings __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
	//	[Export ("evaluateWithObject:substitutionVariables:")]
	//	bool EvaluateWithObject ([NullAllowed] NSObject @object, [NullAllowed] NSDictionary<NSString, NSObject> bindings);

	//	// -(void)allowEvaluation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("allowEvaluation")]
	//	void AllowEvaluation ();
	//}

	//// @interface NSPredicateSupport (NSArray)
	//[Category]
	//[BaseType (typeof(NSArray))]
	//interface NSArray_NSPredicateSupport
	//{
	//	// -(NSArray<ObjectType> * _Nonnull)filteredArrayUsingPredicate:(NSPredicate * _Nonnull)predicate;
	//	[Export ("filteredArrayUsingPredicate:")]
	//	NSObject[] FilteredArrayUsingPredicate (NSPredicate predicate);
	//}

	//// @interface NSPredicateSupport (NSMutableArray)
	//[Category]
	//[BaseType (typeof(NSMutableArray))]
	//interface NSMutableArray_NSPredicateSupport
	//{
	//	// -(void)filterUsingPredicate:(NSPredicate * _Nonnull)predicate;
	//	[Export ("filterUsingPredicate:")]
	//	void FilterUsingPredicate (NSPredicate predicate);
	//}

	//// @interface NSPredicateSupport (NSSet)
	//[Category]
	//[BaseType (typeof(NSSet))]
	//interface NSSet_NSPredicateSupport
	//{
	//	// -(NSSet<ObjectType> * _Nonnull)filteredSetUsingPredicate:(NSPredicate * _Nonnull)predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
	//	[Export ("filteredSetUsingPredicate:")]
	//	NSSet<NSObject> FilteredSetUsingPredicate (NSPredicate predicate);
	//}

	//// @interface NSPredicateSupport (NSMutableSet)
	//[Category]
	//[BaseType (typeof(NSMutableSet))]
	//interface NSMutableSet_NSPredicateSupport
	//{
	//	// -(void)filterUsingPredicate:(NSPredicate * _Nonnull)predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
	//	[Export ("filterUsingPredicate:")]
	//	void FilterUsingPredicate (NSPredicate predicate);
	//}

	//// @interface NSPredicateSupport (NSOrderedSet)
	//[Category]
	//[BaseType (typeof(NSOrderedSet))]
	//interface NSOrderedSet_NSPredicateSupport
	//{
	//	// -(NSOrderedSet<ObjectType> * _Nonnull)filteredOrderedSetUsingPredicate:(NSPredicate * _Nonnull)p __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("filteredOrderedSetUsingPredicate:")]
	//	NSOrderedSet<NSObject> FilteredOrderedSetUsingPredicate (NSPredicate p);
	//}

	//// @interface NSPredicateSupport (NSMutableOrderedSet)
	//[Category]
	//[BaseType (typeof(NSMutableOrderedSet))]
	//interface NSMutableOrderedSet_NSPredicateSupport
	//{
	//	// -(void)filterUsingPredicate:(NSPredicate * _Nonnull)p __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("filterUsingPredicate:")]
	//	void FilterUsingPredicate (NSPredicate p);
	//}

	//// @interface NSComparisonPredicate : NSPredicate
	//[iOS (3,0)]
	//[BaseType (typeof(NSPredicate))]
	//interface NSComparisonPredicate
	//{
	//	// +(NSComparisonPredicate * _Nonnull)predicateWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSComparisonPredicateOptions)options;
	//	[Static]
	//	[Export ("predicateWithLeftExpression:rightExpression:modifier:type:options:")]
	//	NSComparisonPredicate PredicateWithLeftExpression (NSExpression lhs, NSExpression rhs, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, NSComparisonPredicateOptions options);

	//	// +(NSComparisonPredicate * _Nonnull)predicateWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs customSelector:(SEL _Nonnull)selector;
	//	[Static]
	//	[Export ("predicateWithLeftExpression:rightExpression:customSelector:")]
	//	NSComparisonPredicate PredicateWithLeftExpression (NSExpression lhs, NSExpression rhs, Selector selector);

	//	// -(instancetype _Nonnull)initWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSComparisonPredicateOptions)options __attribute__((objc_designated_initializer));
	//	[Export ("initWithLeftExpression:rightExpression:modifier:type:options:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSExpression lhs, NSExpression rhs, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, NSComparisonPredicateOptions options);

	//	// -(instancetype _Nonnull)initWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs customSelector:(SEL _Nonnull)selector __attribute__((objc_designated_initializer));
	//	[Export ("initWithLeftExpression:rightExpression:customSelector:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSExpression lhs, NSExpression rhs, Selector selector);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);

	//	// @property (readonly) NSPredicateOperatorType predicateOperatorType;
	//	[Export ("predicateOperatorType")]
	//	NSPredicateOperatorType PredicateOperatorType { get; }

	//	// @property (readonly) NSComparisonPredicateModifier comparisonPredicateModifier;
	//	[Export ("comparisonPredicateModifier")]
	//	NSComparisonPredicateModifier ComparisonPredicateModifier { get; }

	//	// @property (readonly, retain) NSExpression * _Nonnull leftExpression;
	//	[Export ("leftExpression", ArgumentSemantic.Retain)]
	//	NSExpression LeftExpression { get; }

	//	// @property (readonly, retain) NSExpression * _Nonnull rightExpression;
	//	[Export ("rightExpression", ArgumentSemantic.Retain)]
	//	NSExpression RightExpression { get; }

	//	// @property (readonly) SEL _Nullable customSelector;
	//	[NullAllowed, Export ("customSelector")]
	//	Selector CustomSelector { get; }

	//	// @property (readonly) NSComparisonPredicateOptions options;
	//	[Export ("options")]
	//	NSComparisonPredicateOptions Options { get; }
	//}

	//// @interface NSCompoundPredicate : NSPredicate
	//[iOS (3,0)]
	//[BaseType (typeof(NSPredicate))]
	//interface NSCompoundPredicate
	//{
	//	// -(instancetype _Nonnull)initWithType:(NSCompoundPredicateType)type subpredicates:(NSArray<NSPredicate *> * _Nonnull)subpredicates __attribute__((objc_designated_initializer));
	//	[Export ("initWithType:subpredicates:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCompoundPredicateType type, NSPredicate[] subpredicates);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);

	//	// @property (readonly) NSCompoundPredicateType compoundPredicateType;
	//	[Export ("compoundPredicateType")]
	//	NSCompoundPredicateType CompoundPredicateType { get; }

	//	// @property (readonly, copy) NSArray * _Nonnull subpredicates;
	//	[Export ("subpredicates", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] Subpredicates { get; }

	//	// +(NSCompoundPredicate * _Nonnull)andPredicateWithSubpredicates:(NSArray<NSPredicate *> * _Nonnull)subpredicates;
	//	[Static]
	//	[Export ("andPredicateWithSubpredicates:")]
	//	NSCompoundPredicate AndPredicateWithSubpredicates (NSPredicate[] subpredicates);

	//	// +(NSCompoundPredicate * _Nonnull)orPredicateWithSubpredicates:(NSArray<NSPredicate *> * _Nonnull)subpredicates;
	//	[Static]
	//	[Export ("orPredicateWithSubpredicates:")]
	//	NSCompoundPredicate OrPredicateWithSubpredicates (NSPredicate[] subpredicates);

	//	// +(NSCompoundPredicate * _Nonnull)notPredicateWithSubpredicate:(NSPredicate * _Nonnull)predicate;
	//	[Static]
	//	[Export ("notPredicateWithSubpredicate:")]
	//	NSCompoundPredicate NotPredicateWithSubpredicate (NSPredicate predicate);
	//}

	//// @interface NSDateComponentsFormatter : NSFormatter
	//[iOS (8,0)]
	//[BaseType (typeof(NSFormatter))]
	//interface NSDateComponentsFormatter
	//{
	//	// -(NSString * _Nullable)stringForObjectValue:(id _Nullable)obj;
	//	[Export ("stringForObjectValue:")]
	//	[return: NullAllowed]
	//	string StringForObjectValue ([NullAllowed] NSObject obj);

	//	// -(NSString * _Nullable)stringFromDateComponents:(NSDateComponents * _Nonnull)components;
	//	[Export ("stringFromDateComponents:")]
	//	[return: NullAllowed]
	//	string StringFromDateComponents (NSDateComponents components);

	//	// -(NSString * _Nullable)stringFromDate:(NSDate * _Nonnull)startDate toDate:(NSDate * _Nonnull)endDate;
	//	[Export ("stringFromDate:toDate:")]
	//	[return: NullAllowed]
	//	string StringFromDate (NSDate startDate, NSDate endDate);

	//	// -(NSString * _Nullable)stringFromTimeInterval:(NSTimeInterval)ti;
	//	[Export ("stringFromTimeInterval:")]
	//	[return: NullAllowed]
	//	string StringFromTimeInterval (double ti);

	//	// +(NSString * _Nullable)localizedStringFromDateComponents:(NSDateComponents * _Nonnull)components unitsStyle:(NSDateComponentsFormatterUnitsStyle)unitsStyle;
	//	[Static]
	//	[Export ("localizedStringFromDateComponents:unitsStyle:")]
	//	[return: NullAllowed]
	//	string LocalizedStringFromDateComponents (NSDateComponents components, NSDateComponentsFormatterUnitsStyle unitsStyle);

	//	// @property NSDateComponentsFormatterUnitsStyle unitsStyle;
	//	[Export ("unitsStyle", ArgumentSemantic.Assign)]
	//	NSDateComponentsFormatterUnitsStyle UnitsStyle { get; set; }

	//	// @property NSCalendarUnit allowedUnits;
	//	[Export ("allowedUnits", ArgumentSemantic.Assign)]
	//	NSCalendarUnit AllowedUnits { get; set; }

	//	// @property NSDateComponentsFormatterZeroFormattingBehavior zeroFormattingBehavior;
	//	[Export ("zeroFormattingBehavior", ArgumentSemantic.Assign)]
	//	NSDateComponentsFormatterZeroFormattingBehavior ZeroFormattingBehavior { get; set; }

	//	// @property (copy) NSCalendar * _Nullable calendar;
	//	[NullAllowed, Export ("calendar", ArgumentSemantic.Copy)]
	//	NSCalendar Calendar { get; set; }

	//	// @property (copy) NSDate * _Nullable referenceDate __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("referenceDate", ArgumentSemantic.Copy)]
	//	NSDate ReferenceDate { get; set; }

	//	// @property BOOL allowsFractionalUnits;
	//	[Export ("allowsFractionalUnits")]
	//	bool AllowsFractionalUnits { get; set; }

	//	// @property NSInteger maximumUnitCount;
	//	[Export ("maximumUnitCount")]
	//	nint MaximumUnitCount { get; set; }

	//	// @property BOOL collapsesLargestUnit;
	//	[Export ("collapsesLargestUnit")]
	//	bool CollapsesLargestUnit { get; set; }

	//	// @property BOOL includesApproximationPhrase;
	//	[Export ("includesApproximationPhrase")]
	//	bool IncludesApproximationPhrase { get; set; }

	//	// @property BOOL includesTimeRemainingPhrase;
	//	[Export ("includesTimeRemainingPhrase")]
	//	bool IncludesTimeRemainingPhrase { get; set; }

	//	// @property NSFormattingContext formattingContext;
	//	[Export ("formattingContext", ArgumentSemantic.Assign)]
	//	NSFormattingContext FormattingContext { get; set; }

	//	// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
	//	[Export ("getObjectValue:forString:errorDescription:")]
	//	bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
	//}

	//// @interface NSExpression : NSObject <NSSecureCoding, NSCopying>
	//[iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSExpression : INSSecureCoding, INSCopying
	//{
	//	// +(NSExpression * _Nonnull)expressionWithFormat:(NSString * _Nonnull)expressionFormat argumentArray:(NSArray * _Nonnull)arguments __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("expressionWithFormat:argumentArray:")]
	//	[Verify (StronglyTypedNSArray)]
	//	NSExpression ExpressionWithFormat (string expressionFormat, NSObject[] arguments);

	//	// +(NSExpression * _Nonnull)expressionWithFormat:(NSString * _Nonnull)expressionFormat, ... __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static, Internal]
	//	[Export ("expressionWithFormat:", IsVariadic = true)]
	//	NSExpression ExpressionWithFormat (string expressionFormat, IntPtr varArgs);

	//	// +(NSExpression * _Nonnull)expressionWithFormat:(NSString * _Nonnull)expressionFormat arguments:(va_list)argList __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("expressionWithFormat:arguments:")]
	//	unsafe NSExpression ExpressionWithFormat (string expressionFormat, sbyte* argList);

	//	// +(NSExpression * _Nonnull)expressionForConstantValue:(id _Nullable)obj;
	//	[Static]
	//	[Export ("expressionForConstantValue:")]
	//	NSExpression ExpressionForConstantValue ([NullAllowed] NSObject obj);

	//	// +(NSExpression * _Nonnull)expressionForEvaluatedObject;
	//	[Static]
	//	[Export ("expressionForEvaluatedObject")]
	//	[Verify (MethodToProperty)]
	//	NSExpression ExpressionForEvaluatedObject { get; }

	//	// +(NSExpression * _Nonnull)expressionForVariable:(NSString * _Nonnull)string;
	//	[Static]
	//	[Export ("expressionForVariable:")]
	//	NSExpression ExpressionForVariable (string @string);

	//	// +(NSExpression * _Nonnull)expressionForKeyPath:(NSString * _Nonnull)keyPath;
	//	[Static]
	//	[Export ("expressionForKeyPath:")]
	//	NSExpression ExpressionForKeyPath (string keyPath);

	//	// +(NSExpression * _Nonnull)expressionForFunction:(NSString * _Nonnull)name arguments:(NSArray * _Nonnull)parameters;
	//	[Static]
	//	[Export ("expressionForFunction:arguments:")]
	//	[Verify (StronglyTypedNSArray)]
	//	NSExpression ExpressionForFunction (string name, NSObject[] parameters);

	//	// +(NSExpression * _Nonnull)expressionForAggregate:(NSArray<NSExpression *> * _Nonnull)subexpressions __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
	//	[Static]
	//	[Export ("expressionForAggregate:")]
	//	NSExpression ExpressionForAggregate (NSExpression[] subexpressions);

	//	// +(NSExpression * _Nonnull)expressionForUnionSet:(NSExpression * _Nonnull)left with:(NSExpression * _Nonnull)right __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
	//	[Static]
	//	[Export ("expressionForUnionSet:with:")]
	//	NSExpression ExpressionForUnionSet (NSExpression left, NSExpression right);

	//	// +(NSExpression * _Nonnull)expressionForIntersectSet:(NSExpression * _Nonnull)left with:(NSExpression * _Nonnull)right __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
	//	[Static]
	//	[Export ("expressionForIntersectSet:with:")]
	//	NSExpression ExpressionForIntersectSet (NSExpression left, NSExpression right);

	//	// +(NSExpression * _Nonnull)expressionForMinusSet:(NSExpression * _Nonnull)left with:(NSExpression * _Nonnull)right __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
	//	[Static]
	//	[Export ("expressionForMinusSet:with:")]
	//	NSExpression ExpressionForMinusSet (NSExpression left, NSExpression right);

	//	// +(NSExpression * _Nonnull)expressionForSubquery:(NSExpression * _Nonnull)expression usingIteratorVariable:(NSString * _Nonnull)variable predicate:(NSPredicate * _Nonnull)predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
	//	[Static]
	//	[Export ("expressionForSubquery:usingIteratorVariable:predicate:")]
	//	NSExpression ExpressionForSubquery (NSExpression expression, string variable, NSPredicate predicate);

	//	// +(NSExpression * _Nonnull)expressionForFunction:(NSExpression * _Nonnull)target selectorName:(NSString * _Nonnull)name arguments:(NSArray * _Nullable)parameters __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
	//	[Static]
	//	[Export ("expressionForFunction:selectorName:arguments:")]
	//	[Verify (StronglyTypedNSArray)]
	//	NSExpression ExpressionForFunction (NSExpression target, string name, [NullAllowed] NSObject[] parameters);

	//	// +(NSExpression * _Nonnull)expressionForAnyKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[Static]
	//	[Export ("expressionForAnyKey")]
	//	[Verify (MethodToProperty)]
	//	NSExpression ExpressionForAnyKey { get; }

	//	// +(NSExpression * _Nonnull)expressionForBlock:(id  _Nonnull (^ _Nonnull)(id _Nullable, NSArray<NSExpression *> * _Nonnull, NSMutableDictionary * _Nullable))block arguments:(NSArray<NSExpression *> * _Nullable)arguments __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Static]
	//	[Export ("expressionForBlock:arguments:")]
	//	NSExpression ExpressionForBlock (Func<NSObject, NSArray<NSExpression>, NSMutableDictionary, NSObject> block, [NullAllowed] NSExpression[] arguments);

	//	// +(NSExpression * _Nonnull)expressionForConditional:(NSPredicate * _Nonnull)predicate trueExpression:(NSExpression * _Nonnull)trueExpression falseExpression:(NSExpression * _Nonnull)falseExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Static]
	//	[Export ("expressionForConditional:trueExpression:falseExpression:")]
	//	NSExpression ExpressionForConditional (NSPredicate predicate, NSExpression trueExpression, NSExpression falseExpression);

	//	// -(instancetype _Nonnull)initWithExpressionType:(NSExpressionType)type __attribute__((objc_designated_initializer));
	//	[Export ("initWithExpressionType:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSExpressionType type);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);

	//	// @property (readonly) NSExpressionType expressionType;
	//	[Export ("expressionType")]
	//	NSExpressionType ExpressionType { get; }

	//	// @property (readonly, retain) id _Nullable constantValue;
	//	[NullAllowed, Export ("constantValue", ArgumentSemantic.Retain)]
	//	NSObject ConstantValue { get; }

	//	// @property (readonly, copy) NSString * _Nonnull keyPath;
	//	[Export ("keyPath")]
	//	string KeyPath { get; }

	//	// @property (readonly, copy) NSString * _Nonnull function;
	//	[Export ("function")]
	//	string Function { get; }

	//	// @property (readonly, copy) NSString * _Nonnull variable;
	//	[Export ("variable")]
	//	string Variable { get; }

	//	// @property (readonly, copy) NSExpression * _Nonnull operand;
	//	[Export ("operand", ArgumentSemantic.Copy)]
	//	NSExpression Operand { get; }

	//	// @property (readonly, copy) NSArray<NSExpression *> * _Nullable arguments;
	//	[NullAllowed, Export ("arguments", ArgumentSemantic.Copy)]
	//	NSExpression[] Arguments { get; }

	//	// @property (readonly, retain) id _Nonnull collection __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (3, 0)]
	//	[Export ("collection", ArgumentSemantic.Retain)]
	//	NSObject Collection { get; }

	//	// @property (readonly, copy) NSPredicate * _Nonnull predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (3, 0)]
	//	[Export ("predicate", ArgumentSemantic.Copy)]
	//	NSPredicate Predicate { get; }

	//	// @property (readonly, copy) NSExpression * _Nonnull leftExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (3, 0)]
	//	[Export ("leftExpression", ArgumentSemantic.Copy)]
	//	NSExpression LeftExpression { get; }

	//	// @property (readonly, copy) NSExpression * _Nonnull rightExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (3, 0)]
	//	[Export ("rightExpression", ArgumentSemantic.Copy)]
	//	NSExpression RightExpression { get; }

	//	// @property (readonly, copy) NSExpression * _Nonnull trueExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("trueExpression", ArgumentSemantic.Copy)]
	//	NSExpression TrueExpression { get; }

	//	// @property (readonly, copy) NSExpression * _Nonnull falseExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("falseExpression", ArgumentSemantic.Copy)]
	//	NSExpression FalseExpression { get; }

	//	// @property (readonly, copy) id  _Nonnull (^ _Nonnull)(id _Nullable, NSArray<NSExpression *> * _Nonnull, NSMutableDictionary * _Nullable) expressionBlock __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[Export ("expressionBlock", ArgumentSemantic.Copy)]
	//	Func<NSObject, NSArray<NSExpression>, NSMutableDictionary, NSObject> ExpressionBlock { get; }

	//	// -(id _Nullable)expressionValueWithObject:(id _Nullable)object context:(NSMutableDictionary * _Nullable)context;
	//	[Export ("expressionValueWithObject:context:")]
	//	[return: NullAllowed]
	//	NSObject ExpressionValueWithObject ([NullAllowed] NSObject @object, [NullAllowed] NSMutableDictionary context);

	//	// -(void)allowEvaluation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("allowEvaluation")]
	//	void AllowEvaluation ();
	//}

	//// @interface NSExtensionContext : NSObject
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSExtensionContext
	//{
	//	// @property (readonly, copy, nonatomic) NSArray * _Nonnull inputItems;
	//	[Export ("inputItems", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] InputItems { get; }

	//	// -(void)completeRequestReturningItems:(NSArray * _Nullable)items completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
	//	[Export ("completeRequestReturningItems:completionHandler:")]
	//	[Verify (StronglyTypedNSArray)]
	//	void CompleteRequestReturningItems ([NullAllowed] NSObject[] items, [NullAllowed] Action<bool> completionHandler);

	//	// -(void)cancelRequestWithError:(NSError * _Nonnull)error;
	//	[Export ("cancelRequestWithError:")]
	//	void CancelRequestWithError (NSError error);

	//	// -(void)openURL:(NSURL * _Nonnull)URL completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
	//	[Export ("openURL:completionHandler:")]
	//	void OpenURL (NSUrl URL, [NullAllowed] Action<bool> completionHandler);
	//}

	//// @interface NSExtensionItem : NSObject <NSCopying, NSSecureCoding>
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSExtensionItem : INSCopying, INSSecureCoding
	//{
	//	// @property (copy, nonatomic) NSAttributedString * _Nullable attributedTitle;
	//	[NullAllowed, Export ("attributedTitle", ArgumentSemantic.Copy)]
	//	NSAttributedString AttributedTitle { get; set; }

	//	// @property (copy, nonatomic) NSAttributedString * _Nullable attributedContentText;
	//	[NullAllowed, Export ("attributedContentText", ArgumentSemantic.Copy)]
	//	NSAttributedString AttributedContentText { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSItemProvider *> * _Nullable attachments;
	//	[NullAllowed, Export ("attachments", ArgumentSemantic.Copy)]
	//	NSItemProvider[] Attachments { get; set; }

	//	// @property (copy, nonatomic) NSDictionary * _Nullable userInfo;
	//	[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
	//	NSDictionary UserInfo { get; set; }
	//}

	//// @protocol NSExtensionRequestHandling <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSExtensionRequestHandling
	//{
	//	// @required -(void)beginRequestWithExtensionContext:(NSExtensionContext * _Nonnull)context;
	//	[Abstract]
	//	[Export ("beginRequestWithExtensionContext:")]
	//	void BeginRequestWithExtensionContext (NSExtensionContext context);
	//}

	//// @interface NSFileAccessIntent : NSObject
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSFileAccessIntent
	//{
	//	// +(instancetype _Nonnull)readingIntentWithURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorReadingOptions)options;
	//	[Static]
	//	[Export ("readingIntentWithURL:options:")]
	//	NSFileAccessIntent ReadingIntentWithURL (NSUrl url, NSFileCoordinatorReadingOptions options);

	//	// +(instancetype _Nonnull)writingIntentWithURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorWritingOptions)options;
	//	[Static]
	//	[Export ("writingIntentWithURL:options:")]
	//	NSFileAccessIntent WritingIntentWithURL (NSUrl url, NSFileCoordinatorWritingOptions options);

	//	// @property (readonly, copy) NSURL * _Nonnull URL;
	//	[Export ("URL", ArgumentSemantic.Copy)]
	//	NSUrl URL { get; }
	//}

	//// @interface NSFileCoordinator : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSFileCoordinator
	//{
	//	// +(void)addFilePresenter:(id<NSFilePresenter> _Nonnull)filePresenter;
	//	[Static]
	//	[Export ("addFilePresenter:")]
	//	void AddFilePresenter (NSFilePresenter filePresenter);

	//	// +(void)removeFilePresenter:(id<NSFilePresenter> _Nonnull)filePresenter;
	//	[Static]
	//	[Export ("removeFilePresenter:")]
	//	void RemoveFilePresenter (NSFilePresenter filePresenter);

	//	// @property (readonly, copy, class) NSArray<id<NSFilePresenter>> * _Nonnull filePresenters;
	//	[Static]
	//	[Export ("filePresenters", ArgumentSemantic.Copy)]
	//	NSFilePresenter[] FilePresenters { get; }

	//	// -(instancetype _Nonnull)initWithFilePresenter:(id<NSFilePresenter> _Nullable)filePresenterOrNil __attribute__((objc_designated_initializer));
	//	[Export ("initWithFilePresenter:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSFilePresenter filePresenterOrNil);

	//	// @property (copy) NSString * _Nonnull purposeIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("purposeIdentifier")]
	//	string PurposeIdentifier { get; set; }

	//	// -(void)coordinateAccessWithIntents:(NSArray<NSFileAccessIntent *> * _Nonnull)intents queue:(NSOperationQueue * _Nonnull)queue byAccessor:(void (^ _Nonnull)(NSError * _Nullable))accessor __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Export ("coordinateAccessWithIntents:queue:byAccessor:")]
	//	void CoordinateAccessWithIntents (NSFileAccessIntent[] intents, NSOperationQueue queue, Action<NSError> accessor);

	//	// -(void)coordinateReadingItemAtURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorReadingOptions)options error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull))reader;
	//	[Export ("coordinateReadingItemAtURL:options:error:byAccessor:")]
	//	void CoordinateReadingItemAtURL (NSUrl url, NSFileCoordinatorReadingOptions options, [NullAllowed] out NSError outError, Action<NSURL> reader);

	//	// -(void)coordinateWritingItemAtURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorWritingOptions)options error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull))writer;
	//	[Export ("coordinateWritingItemAtURL:options:error:byAccessor:")]
	//	void CoordinateWritingItemAtURL (NSUrl url, NSFileCoordinatorWritingOptions options, [NullAllowed] out NSError outError, Action<NSURL> writer);

	//	// -(void)coordinateReadingItemAtURL:(NSURL * _Nonnull)readingURL options:(NSFileCoordinatorReadingOptions)readingOptions writingItemAtURL:(NSURL * _Nonnull)writingURL options:(NSFileCoordinatorWritingOptions)writingOptions error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull, NSURL * _Nonnull))readerWriter;
	//	[Export ("coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:")]
	//	void CoordinateReadingItemAtURL (NSUrl readingURL, NSFileCoordinatorReadingOptions readingOptions, NSUrl writingURL, NSFileCoordinatorWritingOptions writingOptions, [NullAllowed] out NSError outError, Action<NSURL, NSURL> readerWriter);

	//	// -(void)coordinateWritingItemAtURL:(NSURL * _Nonnull)url1 options:(NSFileCoordinatorWritingOptions)options1 writingItemAtURL:(NSURL * _Nonnull)url2 options:(NSFileCoordinatorWritingOptions)options2 error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull, NSURL * _Nonnull))writer;
	//	[Export ("coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:")]
	//	void CoordinateWritingItemAtURL (NSUrl url1, NSFileCoordinatorWritingOptions options1, NSUrl url2, NSFileCoordinatorWritingOptions options2, [NullAllowed] out NSError outError, Action<NSURL, NSURL> writer);

	//	// -(void)prepareForReadingItemsAtURLs:(NSArray<NSURL *> * _Nonnull)readingURLs options:(NSFileCoordinatorReadingOptions)readingOptions writingItemsAtURLs:(NSArray<NSURL *> * _Nonnull)writingURLs options:(NSFileCoordinatorWritingOptions)writingOptions error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(void (^ _Nonnull)(void)))batchAccessor;
	//	[Export ("prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:")]
	//	void PrepareForReadingItemsAtURLs (NSUrl[] readingURLs, NSFileCoordinatorReadingOptions readingOptions, NSUrl[] writingURLs, NSFileCoordinatorWritingOptions writingOptions, [NullAllowed] out NSError outError, Action<Action> batchAccessor);

	//	// -(void)itemAtURL:(NSURL * _Nonnull)oldURL willMoveToURL:(NSURL * _Nonnull)newURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	//	[Export ("itemAtURL:willMoveToURL:")]
	//	void ItemAtURL (NSUrl oldURL, NSUrl newURL);

	//	// -(void)itemAtURL:(NSURL * _Nonnull)oldURL didMoveToURL:(NSURL * _Nonnull)newURL;
	//	[Export ("itemAtURL:didMoveToURL:")]
	//	void ItemAtURL (NSUrl oldURL, NSUrl newURL);

	//	// -(void)itemAtURL:(NSURL * _Nonnull)url didChangeUbiquityAttributes:(NSSet<NSURLResourceKey> * _Nonnull)attributes __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[NoWatch, NoTV, Mac (10,13), iOS (11,0)]
	//	[Export ("itemAtURL:didChangeUbiquityAttributes:")]
	//	void ItemAtURL (NSUrl url, NSSet<NSString> attributes);

	//	// -(void)cancel;
	//	[Export ("cancel")]
	//	void Cancel ();
	//}

	//// @protocol NSFilePresenter <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSFilePresenter
	//{
	//	// @required @property (readonly, copy) NSURL * _Nullable presentedItemURL;
	//	[Abstract]
	//	[NullAllowed, Export ("presentedItemURL", ArgumentSemantic.Copy)]
	//	NSUrl PresentedItemURL { get; }

	//	// @required @property (readonly, retain) NSOperationQueue * _Nonnull presentedItemOperationQueue;
	//	[Abstract]
	//	[Export ("presentedItemOperationQueue", ArgumentSemantic.Retain)]
	//	NSOperationQueue PresentedItemOperationQueue { get; }

	//	// @optional @property (readonly, copy) NSURL * _Nullable primaryPresentedItemURL __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.8)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 8)]
	//	[NullAllowed, Export ("primaryPresentedItemURL", ArgumentSemantic.Copy)]
	//	NSUrl PrimaryPresentedItemURL { get; }

	//	// @optional -(void)relinquishPresentedItemToReader:(void (^ _Nonnull)(void (^ _Nullable)(void)))reader;
	//	[Export ("relinquishPresentedItemToReader:")]
	//	void RelinquishPresentedItemToReader (Action<Action> reader);

	//	// @optional -(void)relinquishPresentedItemToWriter:(void (^ _Nonnull)(void (^ _Nullable)(void)))writer;
	//	[Export ("relinquishPresentedItemToWriter:")]
	//	void RelinquishPresentedItemToWriter (Action<Action> writer);

	//	// @optional -(void)savePresentedItemChangesWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
	//	[Export ("savePresentedItemChangesWithCompletionHandler:")]
	//	void SavePresentedItemChangesWithCompletionHandler (Action<NSError> completionHandler);

	//	// @optional -(void)accommodatePresentedItemDeletionWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
	//	[Export ("accommodatePresentedItemDeletionWithCompletionHandler:")]
	//	void AccommodatePresentedItemDeletionWithCompletionHandler (Action<NSError> completionHandler);

	//	// @optional -(void)presentedItemDidMoveToURL:(NSURL * _Nonnull)newURL;
	//	[Export ("presentedItemDidMoveToURL:")]
	//	void PresentedItemDidMoveToURL (NSUrl newURL);

	//	// @optional -(void)presentedItemDidChange;
	//	[Export ("presentedItemDidChange")]
	//	void PresentedItemDidChange ();

	//	// @optional -(void)presentedItemDidChangeUbiquityAttributes:(NSSet<NSURLResourceKey> * _Nonnull)attributes __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[NoWatch, NoTV, Mac (10,13), iOS (11,0)]
	//	[Export ("presentedItemDidChangeUbiquityAttributes:")]
	//	void PresentedItemDidChangeUbiquityAttributes (NSSet<NSString> attributes);

	//	// @optional @property (readonly, strong) NSSet<NSURLResourceKey> * _Nonnull observedPresentedItemUbiquityAttributes __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[NoWatch, NoTV, Mac (10, 13), iOS (11, 0)]
	//	[Export ("observedPresentedItemUbiquityAttributes", ArgumentSemantic.Strong)]
	//	NSSet<NSString> ObservedPresentedItemUbiquityAttributes { get; }

	//	// @optional -(void)presentedItemDidGainVersion:(NSFileVersion * _Nonnull)version;
	//	[Export ("presentedItemDidGainVersion:")]
	//	void PresentedItemDidGainVersion (NSFileVersion version);

	//	// @optional -(void)presentedItemDidLoseVersion:(NSFileVersion * _Nonnull)version;
	//	[Export ("presentedItemDidLoseVersion:")]
	//	void PresentedItemDidLoseVersion (NSFileVersion version);

	//	// @optional -(void)presentedItemDidResolveConflictVersion:(NSFileVersion * _Nonnull)version;
	//	[Export ("presentedItemDidResolveConflictVersion:")]
	//	void PresentedItemDidResolveConflictVersion (NSFileVersion version);

	//	// @optional -(void)accommodatePresentedSubitemDeletionAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
	//	[Export ("accommodatePresentedSubitemDeletionAtURL:completionHandler:")]
	//	void AccommodatePresentedSubitemDeletionAtURL (NSUrl url, Action<NSError> completionHandler);

	//	// @optional -(void)presentedSubitemDidAppearAtURL:(NSURL * _Nonnull)url;
	//	[Export ("presentedSubitemDidAppearAtURL:")]
	//	void PresentedSubitemDidAppearAtURL (NSUrl url);

	//	// @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)oldURL didMoveToURL:(NSURL * _Nonnull)newURL;
	//	[Export ("presentedSubitemAtURL:didMoveToURL:")]
	//	void PresentedSubitemAtURL (NSUrl oldURL, NSUrl newURL);

	//	// @optional -(void)presentedSubitemDidChangeAtURL:(NSURL * _Nonnull)url;
	//	[Export ("presentedSubitemDidChangeAtURL:")]
	//	void PresentedSubitemDidChangeAtURL (NSUrl url);

	//	// @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)url didGainVersion:(NSFileVersion * _Nonnull)version;
	//	[Export ("presentedSubitemAtURL:didGainVersion:")]
	//	void PresentedSubitemAtURL (NSUrl url, NSFileVersion version);

	//	// @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)url didLoseVersion:(NSFileVersion * _Nonnull)version;
	//	[Export ("presentedSubitemAtURL:didLoseVersion:")]
	//	void PresentedSubitemAtURL (NSUrl url, NSFileVersion version);

	//	// @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)url didResolveConflictVersion:(NSFileVersion * _Nonnull)version;
	//	[Export ("presentedSubitemAtURL:didResolveConflictVersion:")]
	//	void PresentedSubitemAtURL (NSUrl url, NSFileVersion version);
	//}

	//// @interface NSFileVersion : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSFileVersion
	//{
	//	// +(NSFileVersion * _Nullable)currentVersionOfItemAtURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("currentVersionOfItemAtURL:")]
	//	[return: NullAllowed]
	//	NSFileVersion CurrentVersionOfItemAtURL (NSUrl url);

	//	// +(NSArray<NSFileVersion *> * _Nullable)otherVersionsOfItemAtURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("otherVersionsOfItemAtURL:")]
	//	[return: NullAllowed]
	//	NSFileVersion[] OtherVersionsOfItemAtURL (NSUrl url);

	//	// +(NSArray<NSFileVersion *> * _Nullable)unresolvedConflictVersionsOfItemAtURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("unresolvedConflictVersionsOfItemAtURL:")]
	//	[return: NullAllowed]
	//	NSFileVersion[] UnresolvedConflictVersionsOfItemAtURL (NSUrl url);

	//	// +(void)getNonlocalVersionsOfItemAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSArray<NSFileVersion *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Static]
	//	[Export ("getNonlocalVersionsOfItemAtURL:completionHandler:")]
	//	void GetNonlocalVersionsOfItemAtURL (NSUrl url, Action<NSArray<NSFileVersion>, NSError> completionHandler);

	//	// +(NSFileVersion * _Nullable)versionOfItemAtURL:(NSURL * _Nonnull)url forPersistentIdentifier:(id _Nonnull)persistentIdentifier;
	//	[Static]
	//	[Export ("versionOfItemAtURL:forPersistentIdentifier:")]
	//	[return: NullAllowed]
	//	NSFileVersion VersionOfItemAtURL (NSUrl url, NSObject persistentIdentifier);

	//	// +(NSFileVersion * _Nullable)addVersionOfItemAtURL:(NSURL * _Nonnull)url withContentsOfURL:(NSURL * _Nonnull)contentsURL options:(NSFileVersionAddingOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,7)]
	//	[Static]
	//	[Export ("addVersionOfItemAtURL:withContentsOfURL:options:error:")]
	//	[return: NullAllowed]
	//	NSFileVersion AddVersionOfItemAtURL (NSUrl url, NSUrl contentsURL, NSFileVersionAddingOptions options, [NullAllowed] out NSError outError);

	//	// +(NSURL * _Nonnull)temporaryDirectoryURLForNewVersionOfItemAtURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,7)]
	//	[Static]
	//	[Export ("temporaryDirectoryURLForNewVersionOfItemAtURL:")]
	//	NSUrl TemporaryDirectoryURLForNewVersionOfItemAtURL (NSUrl url);

	//	// @property (readonly, copy) NSURL * _Nonnull URL;
	//	[Export ("URL", ArgumentSemantic.Copy)]
	//	NSUrl URL { get; }

	//	// @property (readonly, copy) NSString * _Nullable localizedName;
	//	[NullAllowed, Export ("localizedName")]
	//	string LocalizedName { get; }

	//	// @property (readonly, copy) NSString * _Nullable localizedNameOfSavingComputer;
	//	[NullAllowed, Export ("localizedNameOfSavingComputer")]
	//	string LocalizedNameOfSavingComputer { get; }

	//	// @property (readonly, copy) NSPersonNameComponents * _Nullable originatorNameComponents __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
	//	[NullAllowed, Export ("originatorNameComponents", ArgumentSemantic.Copy)]
	//	NSPersonNameComponents OriginatorNameComponents { get; }

	//	// @property (readonly, copy) NSDate * _Nullable modificationDate;
	//	[NullAllowed, Export ("modificationDate", ArgumentSemantic.Copy)]
	//	NSDate ModificationDate { get; }

	//	// @property (readonly, retain) id<NSCoding> _Nonnull persistentIdentifier;
	//	[Export ("persistentIdentifier", ArgumentSemantic.Retain)]
	//	NSCoding PersistentIdentifier { get; }

	//	// @property (readonly, getter = isConflict) BOOL conflict;
	//	[Export ("conflict")]
	//	bool Conflict { [Bind ("isConflict")] get; }

	//	// @property (getter = isResolved) BOOL resolved;
	//	[Export ("resolved")]
	//	bool Resolved { [Bind ("isResolved")] get; set; }

	//	// @property (getter = isDiscardable) BOOL discardable __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 7)]
	//	[Export ("discardable")]
	//	bool Discardable { [Bind ("isDiscardable")] get; set; }

	//	// @property (readonly) BOOL hasLocalContents __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[Export ("hasLocalContents")]
	//	bool HasLocalContents { get; }

	//	// @property (readonly) BOOL hasThumbnail __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[Export ("hasThumbnail")]
	//	bool HasThumbnail { get; }

	//	// -(NSURL * _Nullable)replaceItemAtURL:(NSURL * _Nonnull)url options:(NSFileVersionReplacingOptions)options error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("replaceItemAtURL:options:error:")]
	//	[return: NullAllowed]
	//	NSUrl ReplaceItemAtURL (NSUrl url, NSFileVersionReplacingOptions options, [NullAllowed] out NSError error);

	//	// -(BOOL)removeAndReturnError:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("removeAndReturnError:")]
	//	bool RemoveAndReturnError ([NullAllowed] out NSError outError);

	//	// +(BOOL)removeOtherVersionsOfItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("removeOtherVersionsOfItemAtURL:error:")]
	//	bool RemoveOtherVersionsOfItemAtURL (NSUrl url, [NullAllowed] out NSError outError);
	//}

	//// @interface NSFileWrapper : NSObject <NSSecureCoding>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSFileWrapper : INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url options:(NSFileWrapperReadingOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6))) __attribute__((objc_designated_initializer));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("initWithURL:options:error:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl url, NSFileWrapperReadingOptions options, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nonnull)initDirectoryWithFileWrappers:(NSDictionary<NSString *,NSFileWrapper *> * _Nonnull)childrenByPreferredName __attribute__((objc_designated_initializer));
	//	[Export ("initDirectoryWithFileWrappers:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSDictionary<NSString, NSFileWrapper> childrenByPreferredName);

	//	// -(instancetype _Nonnull)initRegularFileWithContents:(NSData * _Nonnull)contents __attribute__((objc_designated_initializer));
	//	[Export ("initRegularFileWithContents:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSData contents);

	//	// -(instancetype _Nonnull)initSymbolicLinkWithDestinationURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6))) __attribute__((objc_designated_initializer));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("initSymbolicLinkWithDestinationURL:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl url);

	//	// -(instancetype _Nullable)initWithSerializedRepresentation:(NSData * _Nonnull)serializeRepresentation __attribute__((objc_designated_initializer));
	//	[Export ("initWithSerializedRepresentation:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSData serializeRepresentation);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)inCoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder inCoder);

	//	// @property (readonly, getter = isDirectory) BOOL directory;
	//	[Export ("directory")]
	//	bool Directory { [Bind ("isDirectory")] get; }

	//	// @property (readonly, getter = isRegularFile) BOOL regularFile;
	//	[Export ("regularFile")]
	//	bool RegularFile { [Bind ("isRegularFile")] get; }

	//	// @property (readonly, getter = isSymbolicLink) BOOL symbolicLink;
	//	[Export ("symbolicLink")]
	//	bool SymbolicLink { [Bind ("isSymbolicLink")] get; }

	//	// @property (copy) NSString * _Nullable preferredFilename;
	//	[NullAllowed, Export ("preferredFilename")]
	//	string PreferredFilename { get; set; }

	//	// @property (copy) NSString * _Nullable filename;
	//	[NullAllowed, Export ("filename")]
	//	string Filename { get; set; }

	//	// @property (copy) NSDictionary<NSString *,id> * _Nonnull fileAttributes;
	//	[Export ("fileAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> FileAttributes { get; set; }

	//	// -(BOOL)matchesContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("matchesContentsOfURL:")]
	//	bool MatchesContentsOfURL (NSUrl url);

	//	// -(BOOL)readFromURL:(NSURL * _Nonnull)url options:(NSFileWrapperReadingOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("readFromURL:options:error:")]
	//	bool ReadFromURL (NSUrl url, NSFileWrapperReadingOptions options, [NullAllowed] out NSError outError);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)url options:(NSFileWrapperWritingOptions)options originalContentsURL:(NSURL * _Nullable)originalContentsURL error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	//	[Export ("writeToURL:options:originalContentsURL:error:")]
	//	bool WriteToURL (NSUrl url, NSFileWrapperWritingOptions options, [NullAllowed] NSUrl originalContentsURL, [NullAllowed] out NSError outError);

	//	// @property (readonly, copy) NSData * _Nullable serializedRepresentation;
	//	[NullAllowed, Export ("serializedRepresentation", ArgumentSemantic.Copy)]
	//	NSData SerializedRepresentation { get; }

	//	// -(NSString * _Nonnull)addFileWrapper:(NSFileWrapper * _Nonnull)child;
	//	[Export ("addFileWrapper:")]
	//	string AddFileWrapper (NSFileWrapper child);

	//	// -(NSString * _Nonnull)addRegularFileWithContents:(NSData * _Nonnull)data preferredFilename:(NSString * _Nonnull)fileName;
	//	[Export ("addRegularFileWithContents:preferredFilename:")]
	//	string AddRegularFileWithContents (NSData data, string fileName);

	//	// -(void)removeFileWrapper:(NSFileWrapper * _Nonnull)child;
	//	[Export ("removeFileWrapper:")]
	//	void RemoveFileWrapper (NSFileWrapper child);

	//	// @property (readonly, copy) NSDictionary<NSString *,NSFileWrapper *> * _Nullable fileWrappers;
	//	[NullAllowed, Export ("fileWrappers", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSFileWrapper> FileWrappers { get; }

	//	// -(NSString * _Nullable)keyForFileWrapper:(NSFileWrapper * _Nonnull)child;
	//	[Export ("keyForFileWrapper:")]
	//	[return: NullAllowed]
	//	string KeyForFileWrapper (NSFileWrapper child);

	//	// @property (readonly, copy) NSData * _Nullable regularFileContents;
	//	[NullAllowed, Export ("regularFileContents", ArgumentSemantic.Copy)]
	//	NSData RegularFileContents { get; }

	//	// @property (readonly, copy) NSURL * _Nullable symbolicLinkDestinationURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
	//	[NullAllowed, Export ("symbolicLinkDestinationURL", ArgumentSemantic.Copy)]
	//	NSUrl SymbolicLinkDestinationURL { get; }
	//}

	//// @interface NSLinguisticTagger : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSLinguisticTagger
	//{
	//	// -(instancetype _Nonnull)initWithTagSchemes:(NSArray<NSLinguisticTagScheme> * _Nonnull)tagSchemes options:(NSUInteger)opts __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7))) __attribute__((objc_designated_initializer));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("initWithTagSchemes:options:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string[] tagSchemes, nuint opts);

	//	// @property (readonly, copy) NSArray<NSLinguisticTagScheme> * _Nonnull tagSchemes __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("tagSchemes", ArgumentSemantic.Copy)]
	//	string[] TagSchemes { get; }

	//	// @property (retain) NSString * _Nullable string __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[NullAllowed, Export ("string", ArgumentSemantic.Retain)]
	//	string String { get; set; }

	//	// +(NSArray<NSLinguisticTagScheme> * _Nonnull)availableTagSchemesForUnit:(NSLinguisticTaggerUnit)unit language:(NSString * _Nonnull)language __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("availableTagSchemesForUnit:language:")]
	//	string[] AvailableTagSchemesForUnit (NSLinguisticTaggerUnit unit, string language);

	//	// +(NSArray<NSLinguisticTagScheme> * _Nonnull)availableTagSchemesForLanguage:(NSString * _Nonnull)language __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Static]
	//	[Export ("availableTagSchemesForLanguage:")]
	//	string[] AvailableTagSchemesForLanguage (string language);

	//	// -(void)setOrthography:(NSOrthography * _Nullable)orthography range:(NSRange)range __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("setOrthography:range:")]
	//	void SetOrthography ([NullAllowed] NSOrthography orthography, NSRange range);

	//	// -(NSOrthography * _Nullable)orthographyAtIndex:(NSUInteger)charIndex effectiveRange:(NSRangePointer _Nullable)effectiveRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("orthographyAtIndex:effectiveRange:")]
	//	[return: NullAllowed]
	//	unsafe NSOrthography OrthographyAtIndex (nuint charIndex, [NullAllowed] NSRangePointer* effectiveRange);

	//	// -(void)stringEditedInRange:(NSRange)newRange changeInLength:(NSInteger)delta __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("stringEditedInRange:changeInLength:")]
	//	void StringEditedInRange (NSRange newRange, nint delta);

	//	// -(NSRange)tokenRangeAtIndex:(NSUInteger)charIndex unit:(NSLinguisticTaggerUnit)unit __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("tokenRangeAtIndex:unit:")]
	//	NSRange TokenRangeAtIndex (nuint charIndex, NSLinguisticTaggerUnit unit);

	//	// -(NSRange)sentenceRangeForRange:(NSRange)range __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("sentenceRangeForRange:")]
	//	NSRange SentenceRangeForRange (NSRange range);

	//	// -(void)enumerateTagsInRange:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("enumerateTagsInRange:unit:scheme:options:usingBlock:")]
	//	unsafe void EnumerateTagsInRange (NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, Action<NSString, NSRange, bool*> block);

	//	// -(NSLinguisticTag _Nullable)tagAtIndex:(NSUInteger)charIndex unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme tokenRange:(NSRangePointer _Nullable)tokenRange __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("tagAtIndex:unit:scheme:tokenRange:")]
	//	[return: NullAllowed]
	//	unsafe string TagAtIndex (nuint charIndex, NSLinguisticTaggerUnit unit, string scheme, [NullAllowed] NSRangePointer* tokenRange);

	//	// -(NSArray<NSLinguisticTag> * _Nonnull)tagsInRange:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("tagsInRange:unit:scheme:options:tokenRanges:")]
	//	string[] TagsInRange (NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] out NSValue[] tokenRanges);

	//	// -(void)enumerateTagsInRange:(NSRange)range scheme:(NSLinguisticTagScheme _Nonnull)tagScheme options:(NSLinguisticTaggerOptions)opts usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("enumerateTagsInRange:scheme:options:usingBlock:")]
	//	unsafe void EnumerateTagsInRange (NSRange range, string tagScheme, NSLinguisticTaggerOptions opts, Action<NSString, NSRange, NSRange, bool*> block);

	//	// -(NSLinguisticTag _Nullable)tagAtIndex:(NSUInteger)charIndex scheme:(NSLinguisticTagScheme _Nonnull)scheme tokenRange:(NSRangePointer _Nullable)tokenRange sentenceRange:(NSRangePointer _Nullable)sentenceRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("tagAtIndex:scheme:tokenRange:sentenceRange:")]
	//	[return: NullAllowed]
	//	unsafe string TagAtIndex (nuint charIndex, string scheme, [NullAllowed] NSRangePointer* tokenRange, [NullAllowed] NSRangePointer* sentenceRange);

	//	// -(NSArray<NSString *> * _Nonnull)tagsInRange:(NSRange)range scheme:(NSString * _Nonnull)tagScheme options:(NSLinguisticTaggerOptions)opts tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("tagsInRange:scheme:options:tokenRanges:")]
	//	string[] TagsInRange (NSRange range, string tagScheme, NSLinguisticTaggerOptions opts, [NullAllowed] out NSValue[] tokenRanges);

	//	// @property (readonly, copy) NSString * _Nullable dominantLanguage __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("dominantLanguage")]
	//	string DominantLanguage { get; }

	//	// +(NSString * _Nullable)dominantLanguageForString:(NSString * _Nonnull)string __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("dominantLanguageForString:")]
	//	[return: NullAllowed]
	//	string DominantLanguageForString (string @string);

	//	// +(NSLinguisticTag _Nullable)tagForString:(NSString * _Nonnull)string atIndex:(NSUInteger)charIndex unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme orthography:(NSOrthography * _Nullable)orthography tokenRange:(NSRangePointer _Nullable)tokenRange __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("tagForString:atIndex:unit:scheme:orthography:tokenRange:")]
	//	[return: NullAllowed]
	//	unsafe string TagForString (string @string, nuint charIndex, NSLinguisticTaggerUnit unit, string scheme, [NullAllowed] NSOrthography orthography, [NullAllowed] NSRangePointer* tokenRange);

	//	// +(NSArray<NSLinguisticTag> * _Nonnull)tagsForString:(NSString * _Nonnull)string range:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("tagsForString:range:unit:scheme:options:orthography:tokenRanges:")]
	//	string[] TagsForString (string @string, NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, [NullAllowed] out NSValue[] tokenRanges);

	//	// +(void)enumerateTagsForString:(NSString * _Nonnull)string range:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("enumerateTagsForString:range:unit:scheme:options:orthography:usingBlock:")]
	//	unsafe void EnumerateTagsForString (string @string, NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, Action<NSString, NSRange, bool*> block);

	//	// -(NSArray<NSString *> * _Nullable)possibleTagsAtIndex:(NSUInteger)charIndex scheme:(NSString * _Nonnull)tagScheme tokenRange:(NSRangePointer _Nullable)tokenRange sentenceRange:(NSRangePointer _Nullable)sentenceRange scores:(NSArray<NSValue *> * _Nullable * _Nullable)scores __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:")]
	//	[return: NullAllowed]
	//	unsafe string[] PossibleTagsAtIndex (nuint charIndex, string tagScheme, [NullAllowed] NSRangePointer* tokenRange, [NullAllowed] NSRangePointer* sentenceRange, [NullAllowed] out NSValue[] scores);
	//}

	//// @interface NSLinguisticAnalysis (NSString)
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_NSLinguisticAnalysis
	//{
	//	// -(NSArray<NSLinguisticTag> * _Nonnull)linguisticTagsInRange:(NSRange)range scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("linguisticTagsInRange:scheme:options:orthography:tokenRanges:")]
	//	string[] LinguisticTagsInRange (NSRange range, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, [NullAllowed] out NSValue[] tokenRanges);

	//	// -(void)enumerateLinguisticTagsInRange:(NSRange)range scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:")]
	//	unsafe void EnumerateLinguisticTagsInRange (NSRange range, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, Action<NSString, NSRange, NSRange, bool*> block);
	//}

	//// @interface NSMetadataQuery : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSMetadataQuery
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSMetadataQueryDelegate Delegate { get; set; }

	//	// @property (assign) id<NSMetadataQueryDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (copy) NSPredicate * _Nullable predicate;
	//	[NullAllowed, Export ("predicate", ArgumentSemantic.Copy)]
	//	NSPredicate Predicate { get; set; }

	//	// @property (copy) NSArray<NSSortDescriptor *> * _Nonnull sortDescriptors;
	//	[Export ("sortDescriptors", ArgumentSemantic.Copy)]
	//	NSSortDescriptor[] SortDescriptors { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Nonnull valueListAttributes;
	//	[Export ("valueListAttributes", ArgumentSemantic.Copy)]
	//	string[] ValueListAttributes { get; set; }

	//	// @property (copy) NSArray<NSString *> * _Nullable groupingAttributes;
	//	[NullAllowed, Export ("groupingAttributes", ArgumentSemantic.Copy)]
	//	string[] GroupingAttributes { get; set; }

	//	// @property NSTimeInterval notificationBatchingInterval;
	//	[Export ("notificationBatchingInterval")]
	//	double NotificationBatchingInterval { get; set; }

	//	// @property (copy) NSArray * _Nonnull searchScopes;
	//	[Export ("searchScopes", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] SearchScopes { get; set; }

	//	// @property (copy) NSArray * _Nullable searchItems __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[NullAllowed, Export ("searchItems", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] SearchItems { get; set; }

	//	// @property (retain) NSOperationQueue * _Nullable operationQueue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[NullAllowed, Export ("operationQueue", ArgumentSemantic.Retain)]
	//	NSOperationQueue OperationQueue { get; set; }

	//	// -(BOOL)startQuery;
	//	[Export ("startQuery")]
	//	[Verify (MethodToProperty)]
	//	bool StartQuery { get; }

	//	// -(void)stopQuery;
	//	[Export ("stopQuery")]
	//	void StopQuery ();

	//	// @property (readonly, getter = isStarted) BOOL started;
	//	[Export ("started")]
	//	bool Started { [Bind ("isStarted")] get; }

	//	// @property (readonly, getter = isGathering) BOOL gathering;
	//	[Export ("gathering")]
	//	bool Gathering { [Bind ("isGathering")] get; }

	//	// @property (readonly, getter = isStopped) BOOL stopped;
	//	[Export ("stopped")]
	//	bool Stopped { [Bind ("isStopped")] get; }

	//	// -(void)disableUpdates;
	//	[Export ("disableUpdates")]
	//	void DisableUpdates ();

	//	// -(void)enableUpdates;
	//	[Export ("enableUpdates")]
	//	void EnableUpdates ();

	//	// @property (readonly) NSUInteger resultCount;
	//	[Export ("resultCount")]
	//	nuint ResultCount { get; }

	//	// -(id _Nonnull)resultAtIndex:(NSUInteger)idx;
	//	[Export ("resultAtIndex:")]
	//	NSObject ResultAtIndex (nuint idx);

	//	// -(void)enumerateResultsUsingBlock:(void (^ _Nonnull)(id _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("enumerateResultsUsingBlock:")]
	//	unsafe void EnumerateResultsUsingBlock (Action<NSObject, nuint, bool*> block);

	//	// -(void)enumerateResultsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(id _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("enumerateResultsWithOptions:usingBlock:")]
	//	unsafe void EnumerateResultsWithOptions (NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

	//	// @property (readonly, copy) NSArray * _Nonnull results;
	//	[Export ("results", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] Results { get; }

	//	// -(NSUInteger)indexOfResult:(id _Nonnull)result;
	//	[Export ("indexOfResult:")]
	//	nuint IndexOfResult (NSObject result);

	//	// @property (readonly, copy) NSDictionary<NSString *,NSArray<NSMetadataQueryAttributeValueTuple *> *> * _Nonnull valueLists;
	//	[Export ("valueLists", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSArray<NSMetadataQueryAttributeValueTuple>> ValueLists { get; }

	//	// @property (readonly, copy) NSArray<NSMetadataQueryResultGroup *> * _Nonnull groupedResults;
	//	[Export ("groupedResults", ArgumentSemantic.Copy)]
	//	NSMetadataQueryResultGroup[] GroupedResults { get; }

	//	// -(id _Nullable)valueOfAttribute:(NSString * _Nonnull)attrName forResultAtIndex:(NSUInteger)idx;
	//	[Export ("valueOfAttribute:forResultAtIndex:")]
	//	[return: NullAllowed]
	//	NSObject ValueOfAttribute (string attrName, nuint idx);
	//}

	//// @protocol NSMetadataQueryDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSMetadataQueryDelegate
	//{
	//	// @optional -(id _Nonnull)metadataQuery:(NSMetadataQuery * _Nonnull)query replacementObjectForResultObject:(NSMetadataItem * _Nonnull)result;
	//	[Export ("metadataQuery:replacementObjectForResultObject:")]
	//	NSObject ReplacementObjectForResultObject (NSMetadataQuery query, NSMetadataItem result);

	//	// @optional -(id _Nonnull)metadataQuery:(NSMetadataQuery * _Nonnull)query replacementValueForAttribute:(NSString * _Nonnull)attrName value:(id _Nonnull)attrValue;
	//	[Export ("metadataQuery:replacementValueForAttribute:value:")]
	//	NSObject ReplacementValueForAttribute (NSMetadataQuery query, string attrName, NSObject attrValue);
	//}

	//// @interface NSMetadataItem : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSMetadataItem
	//{
	//	// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9))) __attribute__((objc_designated_initializer));
	//	[NoWatch, NoTV, NoiOS, Mac (10,9)]
	//	[Export ("initWithURL:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl url);

	//	// -(id _Nullable)valueForAttribute:(NSString * _Nonnull)key;
	//	[Export ("valueForAttribute:")]
	//	[return: NullAllowed]
	//	NSObject ValueForAttribute (string key);

	//	// -(NSDictionary<NSString *,id> * _Nullable)valuesForAttributes:(NSArray<NSString *> * _Nonnull)keys;
	//	[Export ("valuesForAttributes:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> ValuesForAttributes (string[] keys);

	//	// @property (readonly, copy) NSArray<NSString *> * _Nonnull attributes;
	//	[Export ("attributes", ArgumentSemantic.Copy)]
	//	string[] Attributes { get; }
	//}

	//// @interface NSMetadataQueryAttributeValueTuple : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSMetadataQueryAttributeValueTuple
	//{
	//	// @property (readonly, copy) NSString * _Nonnull attribute;
	//	[Export ("attribute")]
	//	string Attribute { get; }

	//	// @property (readonly, retain) id _Nullable value;
	//	[NullAllowed, Export ("value", ArgumentSemantic.Retain)]
	//	NSObject Value { get; }

	//	// @property (readonly) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }
	//}

	//// @interface NSMetadataQueryResultGroup : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSMetadataQueryResultGroup
	//{
	//	// @property (readonly, copy) NSString * _Nonnull attribute;
	//	[Export ("attribute")]
	//	string Attribute { get; }

	//	// @property (readonly, retain) id _Nonnull value;
	//	[Export ("value", ArgumentSemantic.Retain)]
	//	NSObject Value { get; }

	//	// @property (readonly, copy) NSArray<NSMetadataQueryResultGroup *> * _Nullable subgroups;
	//	[NullAllowed, Export ("subgroups", ArgumentSemantic.Copy)]
	//	NSMetadataQueryResultGroup[] Subgroups { get; }

	//	// @property (readonly) NSUInteger resultCount;
	//	[Export ("resultCount")]
	//	nuint ResultCount { get; }

	//	// -(id _Nonnull)resultAtIndex:(NSUInteger)idx;
	//	[Export ("resultAtIndex:")]
	//	NSObject ResultAtIndex (nuint idx);

	//	// @property (readonly, copy) NSArray * _Nonnull results;
	//	[Export ("results", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] Results { get; }
	//}

	//// @interface NSNetService : NSObject
	//[NoWatch]
	//[BaseType (typeof(NSObject))]
	//interface NSNetService
	//{
	//	// -(instancetype _Nonnull)initWithDomain:(NSString * _Nonnull)domain type:(NSString * _Nonnull)type name:(NSString * _Nonnull)name port:(int)port __attribute__((objc_designated_initializer));
	//	[Export ("initWithDomain:type:name:port:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string domain, string type, string name, int port);

	//	// -(instancetype _Nonnull)initWithDomain:(NSString * _Nonnull)domain type:(NSString * _Nonnull)type name:(NSString * _Nonnull)name;
	//	[Export ("initWithDomain:type:name:")]
	//	IntPtr Constructor (string domain, string type, string name);

	//	// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("scheduleInRunLoop:forMode:")]
	//	void ScheduleInRunLoop (NSRunLoop aRunLoop, string mode);

	//	// -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("removeFromRunLoop:forMode:")]
	//	void RemoveFromRunLoop (NSRunLoop aRunLoop, string mode);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSNetServiceDelegate Delegate { get; set; }

	//	// @property (assign) id<NSNetServiceDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property BOOL includesPeerToPeer __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (7, 0)]
	//	[Export ("includesPeerToPeer")]
	//	bool IncludesPeerToPeer { get; set; }

	//	// @property (readonly, copy) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, copy) NSString * _Nonnull type;
	//	[Export ("type")]
	//	string Type { get; }

	//	// @property (readonly, copy) NSString * _Nonnull domain;
	//	[Export ("domain")]
	//	string Domain { get; }

	//	// @property (readonly, copy) NSString * _Nullable hostName;
	//	[NullAllowed, Export ("hostName")]
	//	string HostName { get; }

	//	// @property (readonly, copy) NSArray<NSData *> * _Nullable addresses;
	//	[NullAllowed, Export ("addresses", ArgumentSemantic.Copy)]
	//	NSData[] Addresses { get; }

	//	// @property (readonly) NSInteger port __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
	//	[Export ("port")]
	//	nint Port { get; }

	//	// -(void)publish;
	//	[Export ("publish")]
	//	void Publish ();

	//	// -(void)publishWithOptions:(NSNetServiceOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//	[Export ("publishWithOptions:")]
	//	void PublishWithOptions (NSNetServiceOptions options);

	//	// -(void)resolve __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.4)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
	//	[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
	//	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Not supported")]
	//	[Deprecated (PlatformName.iOS, 2, 0, message: "Not supported")]
	//	[Introduced (PlatformName.MacOSX, 10, 2, message: "Not supported")]
	//	[Deprecated (PlatformName.MacOSX, 10, 4, message: "Not supported")]
	//	[Export ("resolve")]
	//	void Resolve ();

	//	// -(void)stop;
	//	[Export ("stop")]
	//	void Stop ();

	//	// +(NSDictionary<NSString *,NSData *> * _Nonnull)dictionaryFromTXTRecordData:(NSData * _Nonnull)txtData;
	//	[Static]
	//	[Export ("dictionaryFromTXTRecordData:")]
	//	NSDictionary<NSString, NSData> DictionaryFromTXTRecordData (NSData txtData);

	//	// +(NSData * _Nonnull)dataFromTXTRecordDictionary:(NSDictionary<NSString *,NSData *> * _Nonnull)txtDictionary;
	//	[Static]
	//	[Export ("dataFromTXTRecordDictionary:")]
	//	NSData DataFromTXTRecordDictionary (NSDictionary<NSString, NSData> txtDictionary);

	//	// -(void)resolveWithTimeout:(NSTimeInterval)timeout;
	//	[Export ("resolveWithTimeout:")]
	//	void ResolveWithTimeout (double timeout);

	//	// -(BOOL)getInputStream:(NSInputStream * _Nullable * _Nullable)inputStream outputStream:(NSOutputStream * _Nullable * _Nullable)outputStream;
	//	[Export ("getInputStream:outputStream:")]
	//	bool GetInputStream ([NullAllowed] out NSInputStream inputStream, [NullAllowed] out NSOutputStream outputStream);

	//	// -(BOOL)setTXTRecordData:(NSData * _Nullable)recordData;
	//	[Export ("setTXTRecordData:")]
	//	bool SetTXTRecordData ([NullAllowed] NSData recordData);

	//	// -(NSData * _Nullable)TXTRecordData;
	//	[NullAllowed, Export ("TXTRecordData")]
	//	[Verify (MethodToProperty)]
	//	NSData TXTRecordData { get; }

	//	// -(void)startMonitoring;
	//	[Export ("startMonitoring")]
	//	void StartMonitoring ();

	//	// -(void)stopMonitoring;
	//	[Export ("stopMonitoring")]
	//	void StopMonitoring ();
	//}

	//// @interface NSNetServiceBrowser : NSObject
	//[NoWatch]
	//[BaseType (typeof(NSObject))]
	//interface NSNetServiceBrowser
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSNetServiceBrowserDelegate Delegate { get; set; }

	//	// @property (assign) id<NSNetServiceBrowserDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property BOOL includesPeerToPeer __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (7, 0)]
	//	[Export ("includesPeerToPeer")]
	//	bool IncludesPeerToPeer { get; set; }

	//	// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("scheduleInRunLoop:forMode:")]
	//	void ScheduleInRunLoop (NSRunLoop aRunLoop, string mode);

	//	// -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("removeFromRunLoop:forMode:")]
	//	void RemoveFromRunLoop (NSRunLoop aRunLoop, string mode);

	//	// -(void)searchForBrowsableDomains;
	//	[Export ("searchForBrowsableDomains")]
	//	void SearchForBrowsableDomains ();

	//	// -(void)searchForRegistrationDomains;
	//	[Export ("searchForRegistrationDomains")]
	//	void SearchForRegistrationDomains ();

	//	// -(void)searchForServicesOfType:(NSString * _Nonnull)type inDomain:(NSString * _Nonnull)domainString;
	//	[Export ("searchForServicesOfType:inDomain:")]
	//	void SearchForServicesOfType (string type, string domainString);

	//	// -(void)stop;
	//	[Export ("stop")]
	//	void Stop ();
	//}

	//// @protocol NSNetServiceDelegate <NSObject>
	//[NoWatch]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSNetServiceDelegate
	//{
	//	// @optional -(void)netServiceWillPublish:(NSNetService * _Nonnull)sender;
	//	[Export ("netServiceWillPublish:")]
	//	void NetServiceWillPublish (NSNetService sender);

	//	// @optional -(void)netServiceDidPublish:(NSNetService * _Nonnull)sender;
	//	[Export ("netServiceDidPublish:")]
	//	void NetServiceDidPublish (NSNetService sender);

	//	// @optional -(void)netService:(NSNetService * _Nonnull)sender didNotPublish:(NSDictionary<NSString *,NSNumber *> * _Nonnull)errorDict;
	//	[Export ("netService:didNotPublish:")]
	//	void NetService (NSNetService sender, NSDictionary<NSString, NSNumber> errorDict);

	//	// @optional -(void)netServiceWillResolve:(NSNetService * _Nonnull)sender;
	//	[Export ("netServiceWillResolve:")]
	//	void NetServiceWillResolve (NSNetService sender);

	//	// @optional -(void)netServiceDidResolveAddress:(NSNetService * _Nonnull)sender;
	//	[Export ("netServiceDidResolveAddress:")]
	//	void NetServiceDidResolveAddress (NSNetService sender);

	//	// @optional -(void)netService:(NSNetService * _Nonnull)sender didNotResolve:(NSDictionary<NSString *,NSNumber *> * _Nonnull)errorDict;
	//	[Export ("netService:didNotResolve:")]
	//	void NetService (NSNetService sender, NSDictionary<NSString, NSNumber> errorDict);

	//	// @optional -(void)netServiceDidStop:(NSNetService * _Nonnull)sender;
	//	[Export ("netServiceDidStop:")]
	//	void NetServiceDidStop (NSNetService sender);

	//	// @optional -(void)netService:(NSNetService * _Nonnull)sender didUpdateTXTRecordData:(NSData * _Nonnull)data;
	//	[Export ("netService:didUpdateTXTRecordData:")]
	//	void NetService (NSNetService sender, NSData data);

	//	// @optional -(void)netService:(NSNetService * _Nonnull)sender didAcceptConnectionWithInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("netService:didAcceptConnectionWithInputStream:outputStream:")]
	//	void NetService (NSNetService sender, NSInputStream inputStream, NSOutputStream outputStream);
	//}

	//// @protocol NSNetServiceBrowserDelegate <NSObject>
	//[NoWatch]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSNetServiceBrowserDelegate
	//{
	//	// @optional -(void)netServiceBrowserWillSearch:(NSNetServiceBrowser * _Nonnull)browser;
	//	[Export ("netServiceBrowserWillSearch:")]
	//	void NetServiceBrowserWillSearch (NSNetServiceBrowser browser);

	//	// @optional -(void)netServiceBrowserDidStopSearch:(NSNetServiceBrowser * _Nonnull)browser;
	//	[Export ("netServiceBrowserDidStopSearch:")]
	//	void NetServiceBrowserDidStopSearch (NSNetServiceBrowser browser);

	//	// @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didNotSearch:(NSDictionary<NSString *,NSNumber *> * _Nonnull)errorDict;
	//	[Export ("netServiceBrowser:didNotSearch:")]
	//	void NetServiceBrowser (NSNetServiceBrowser browser, NSDictionary<NSString, NSNumber> errorDict);

	//	// @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didFindDomain:(NSString * _Nonnull)domainString moreComing:(BOOL)moreComing;
	//	[Export ("netServiceBrowser:didFindDomain:moreComing:")]
	//	void NetServiceBrowser (NSNetServiceBrowser browser, string domainString, bool moreComing);

	//	// @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didFindService:(NSNetService * _Nonnull)service moreComing:(BOOL)moreComing;
	//	[Export ("netServiceBrowser:didFindService:moreComing:")]
	//	void NetServiceBrowser (NSNetServiceBrowser browser, NSNetService service, bool moreComing);

	//	// @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didRemoveDomain:(NSString * _Nonnull)domainString moreComing:(BOOL)moreComing;
	//	[Export ("netServiceBrowser:didRemoveDomain:moreComing:")]
	//	void NetServiceBrowser (NSNetServiceBrowser browser, string domainString, bool moreComing);

	//	// @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didRemoveService:(NSNetService * _Nonnull)service moreComing:(BOOL)moreComing;
	//	[Export ("netServiceBrowser:didRemoveService:moreComing:")]
	//	void NetServiceBrowser (NSNetServiceBrowser browser, NSNetService service, bool moreComing);
	//}

	//// @interface NSUbiquitousKeyValueStore : NSObject
	//[NoWatch, iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSUbiquitousKeyValueStore
	//{
	//	// @property (readonly, strong, class) NSUbiquitousKeyValueStore * _Nonnull defaultStore;
	//	[Static]
	//	[Export ("defaultStore", ArgumentSemantic.Strong)]
	//	NSUbiquitousKeyValueStore DefaultStore { get; }

	//	// -(id _Nullable)objectForKey:(NSString * _Nonnull)aKey;
	//	[Export ("objectForKey:")]
	//	[return: NullAllowed]
	//	NSObject ObjectForKey (string aKey);

	//	// -(void)setObject:(id _Nullable)anObject forKey:(NSString * _Nonnull)aKey;
	//	[Export ("setObject:forKey:")]
	//	void SetObject ([NullAllowed] NSObject anObject, string aKey);

	//	// -(void)removeObjectForKey:(NSString * _Nonnull)aKey;
	//	[Export ("removeObjectForKey:")]
	//	void RemoveObjectForKey (string aKey);

	//	// -(NSString * _Nullable)stringForKey:(NSString * _Nonnull)aKey;
	//	[Export ("stringForKey:")]
	//	[return: NullAllowed]
	//	string StringForKey (string aKey);

	//	// -(NSArray * _Nullable)arrayForKey:(NSString * _Nonnull)aKey;
	//	[Export ("arrayForKey:")]
	//	[Verify (StronglyTypedNSArray)]
	//	[return: NullAllowed]
	//	NSObject[] ArrayForKey (string aKey);

	//	// -(NSDictionary<NSString *,id> * _Nullable)dictionaryForKey:(NSString * _Nonnull)aKey;
	//	[Export ("dictionaryForKey:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> DictionaryForKey (string aKey);

	//	// -(NSData * _Nullable)dataForKey:(NSString * _Nonnull)aKey;
	//	[Export ("dataForKey:")]
	//	[return: NullAllowed]
	//	NSData DataForKey (string aKey);

	//	// -(long long)longLongForKey:(NSString * _Nonnull)aKey;
	//	[Export ("longLongForKey:")]
	//	long LongLongForKey (string aKey);

	//	// -(double)doubleForKey:(NSString * _Nonnull)aKey;
	//	[Export ("doubleForKey:")]
	//	double DoubleForKey (string aKey);

	//	// -(BOOL)boolForKey:(NSString * _Nonnull)aKey;
	//	[Export ("boolForKey:")]
	//	bool BoolForKey (string aKey);

	//	// -(void)setString:(NSString * _Nullable)aString forKey:(NSString * _Nonnull)aKey;
	//	[Export ("setString:forKey:")]
	//	void SetString ([NullAllowed] string aString, string aKey);

	//	// -(void)setData:(NSData * _Nullable)aData forKey:(NSString * _Nonnull)aKey;
	//	[Export ("setData:forKey:")]
	//	void SetData ([NullAllowed] NSData aData, string aKey);

	//	// -(void)setArray:(NSArray * _Nullable)anArray forKey:(NSString * _Nonnull)aKey;
	//	[Export ("setArray:forKey:")]
	//	[Verify (StronglyTypedNSArray)]
	//	void SetArray ([NullAllowed] NSObject[] anArray, string aKey);

	//	// -(void)setDictionary:(NSDictionary<NSString *,id> * _Nullable)aDictionary forKey:(NSString * _Nonnull)aKey;
	//	[Export ("setDictionary:forKey:")]
	//	void SetDictionary ([NullAllowed] NSDictionary<NSString, NSObject> aDictionary, string aKey);

	//	// -(void)setLongLong:(long long)value forKey:(NSString * _Nonnull)aKey;
	//	[Export ("setLongLong:forKey:")]
	//	void SetLongLong (long value, string aKey);

	//	// -(void)setDouble:(double)value forKey:(NSString * _Nonnull)aKey;
	//	[Export ("setDouble:forKey:")]
	//	void SetDouble (double value, string aKey);

	//	// -(void)setBool:(BOOL)value forKey:(NSString * _Nonnull)aKey;
	//	[Export ("setBool:forKey:")]
	//	void SetBool (bool value, string aKey);

	//	// @property (readonly, copy) NSDictionary<NSString *,id> * _Nonnull dictionaryRepresentation;
	//	[Export ("dictionaryRepresentation", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> DictionaryRepresentation { get; }

	//	// -(BOOL)synchronize;
	//	[Export ("synchronize")]
	//	[Verify (MethodToProperty)]
	//	bool Synchronize { get; }
	//}

	//// @interface NSUndoManager : NSObject
	//[iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSUndoManager
	//{
	//	// -(void)beginUndoGrouping;
	//	[Export ("beginUndoGrouping")]
	//	void BeginUndoGrouping ();

	//	// -(void)endUndoGrouping;
	//	[Export ("endUndoGrouping")]
	//	void EndUndoGrouping ();

	//	// @property (readonly) NSInteger groupingLevel;
	//	[Export ("groupingLevel")]
	//	nint GroupingLevel { get; }

	//	// -(void)disableUndoRegistration;
	//	[Export ("disableUndoRegistration")]
	//	void DisableUndoRegistration ();

	//	// -(void)enableUndoRegistration;
	//	[Export ("enableUndoRegistration")]
	//	void EnableUndoRegistration ();

	//	// @property (readonly, getter = isUndoRegistrationEnabled) BOOL undoRegistrationEnabled;
	//	[Export ("undoRegistrationEnabled")]
	//	bool UndoRegistrationEnabled { [Bind ("isUndoRegistrationEnabled")] get; }

	//	// @property BOOL groupsByEvent;
	//	[Export ("groupsByEvent")]
	//	bool GroupsByEvent { get; set; }

	//	// @property NSUInteger levelsOfUndo;
	//	[Export ("levelsOfUndo")]
	//	nuint LevelsOfUndo { get; set; }

	//	// @property (copy) NSArray<NSRunLoopMode> * _Nonnull runLoopModes;
	//	[Export ("runLoopModes", ArgumentSemantic.Copy)]
	//	string[] RunLoopModes { get; set; }

	//	// -(void)undo;
	//	[Export ("undo")]
	//	void Undo ();

	//	// -(void)redo;
	//	[Export ("redo")]
	//	void Redo ();

	//	// -(void)undoNestedGroup;
	//	[Export ("undoNestedGroup")]
	//	void UndoNestedGroup ();

	//	// @property (readonly) BOOL canUndo;
	//	[Export ("canUndo")]
	//	bool CanUndo { get; }

	//	// @property (readonly) BOOL canRedo;
	//	[Export ("canRedo")]
	//	bool CanRedo { get; }

	//	// @property (readonly, getter = isUndoing) BOOL undoing;
	//	[Export ("undoing")]
	//	bool Undoing { [Bind ("isUndoing")] get; }

	//	// @property (readonly, getter = isRedoing) BOOL redoing;
	//	[Export ("redoing")]
	//	bool Redoing { [Bind ("isRedoing")] get; }

	//	// -(void)removeAllActions;
	//	[Export ("removeAllActions")]
	//	void RemoveAllActions ();

	//	// -(void)removeAllActionsWithTarget:(id _Nonnull)target;
	//	[Export ("removeAllActionsWithTarget:")]
	//	void RemoveAllActionsWithTarget (NSObject target);

	//	// -(void)registerUndoWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)selector object:(id _Nullable)anObject;
	//	[Export ("registerUndoWithTarget:selector:object:")]
	//	void RegisterUndoWithTarget (NSObject target, Selector selector, [NullAllowed] NSObject anObject);

	//	// -(id _Nonnull)prepareWithInvocationTarget:(id _Nonnull)target;
	//	[Export ("prepareWithInvocationTarget:")]
	//	NSObject PrepareWithInvocationTarget (NSObject target);

	//	// -(void)registerUndoWithTarget:(id _Nonnull)target handler:(void (^ _Nonnull)(id _Nonnull))undoHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("registerUndoWithTarget:handler:")]
	//	void RegisterUndoWithTarget (NSObject target, Action<NSObject> undoHandler);

	//	// -(void)setActionIsDiscardable:(BOOL)discardable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	//	[Export ("setActionIsDiscardable:")]
	//	void SetActionIsDiscardable (bool discardable);

	//	// @property (readonly) BOOL undoActionIsDiscardable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("undoActionIsDiscardable")]
	//	bool UndoActionIsDiscardable { get; }

	//	// @property (readonly) BOOL redoActionIsDiscardable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
	//	[Export ("redoActionIsDiscardable")]
	//	bool RedoActionIsDiscardable { get; }

	//	// @property (readonly, copy) NSString * _Nonnull undoActionName;
	//	[Export ("undoActionName")]
	//	string UndoActionName { get; }

	//	// @property (readonly, copy) NSString * _Nonnull redoActionName;
	//	[Export ("redoActionName")]
	//	string RedoActionName { get; }

	//	// -(void)setActionName:(NSString * _Nonnull)actionName;
	//	[Export ("setActionName:")]
	//	void SetActionName (string actionName);

	//	// @property (readonly, copy) NSString * _Nonnull undoMenuItemTitle;
	//	[Export ("undoMenuItemTitle")]
	//	string UndoMenuItemTitle { get; }

	//	// @property (readonly, copy) NSString * _Nonnull redoMenuItemTitle;
	//	[Export ("redoMenuItemTitle")]
	//	string RedoMenuItemTitle { get; }

	//	// -(NSString * _Nonnull)undoMenuTitleForUndoActionName:(NSString * _Nonnull)actionName;
	//	[Export ("undoMenuTitleForUndoActionName:")]
	//	string UndoMenuTitleForUndoActionName (string actionName);

	//	// -(NSString * _Nonnull)redoMenuTitleForUndoActionName:(NSString * _Nonnull)actionName;
	//	[Export ("redoMenuTitleForUndoActionName:")]
	//	string RedoMenuTitleForUndoActionName (string actionName);
	//}

	//// @interface NSURLSession : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSURLSession
	//{
	//	// @property (readonly, strong, class) NSURLSession * _Nonnull sharedSession;
	//	[Static]
	//	[Export ("sharedSession", ArgumentSemantic.Strong)]
	//	NSUrlSession SharedSession { get; }

	//	// +(NSURLSession * _Nonnull)sessionWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration;
	//	[Static]
	//	[Export ("sessionWithConfiguration:")]
	//	NSUrlSession SessionWithConfiguration (NSUrlSessionConfiguration configuration);

	//	// +(NSURLSession * _Nonnull)sessionWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration delegate:(id<NSURLSessionDelegate> _Nullable)delegate delegateQueue:(NSOperationQueue * _Nullable)queue;
	//	[Static]
	//	[Export ("sessionWithConfiguration:delegate:delegateQueue:")]
	//	NSUrlSession SessionWithConfiguration (NSUrlSessionConfiguration configuration, [NullAllowed] NSUrlSessionDelegate @delegate, [NullAllowed] NSOperationQueue queue);

	//	// @property (readonly, retain) NSOperationQueue * _Nonnull delegateQueue;
	//	[Export ("delegateQueue", ArgumentSemantic.Retain)]
	//	NSOperationQueue DelegateQueue { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSUrlSessionDelegate Delegate { get; }

	//	// @property (readonly, retain) id<NSURLSessionDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Retain)]
	//	NSObject WeakDelegate { get; }

	//	// @property (readonly, copy) NSURLSessionConfiguration * _Nonnull configuration;
	//	[Export ("configuration", ArgumentSemantic.Copy)]
	//	NSUrlSessionConfiguration Configuration { get; }

	//	// @property (copy) NSString * _Nullable sessionDescription;
	//	[NullAllowed, Export ("sessionDescription")]
	//	string SessionDescription { get; set; }

	//	// -(void)finishTasksAndInvalidate;
	//	[Export ("finishTasksAndInvalidate")]
	//	void FinishTasksAndInvalidate ();

	//	// -(void)invalidateAndCancel;
	//	[Export ("invalidateAndCancel")]
	//	void InvalidateAndCancel ();

	//	// -(void)resetWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
	//	[Export ("resetWithCompletionHandler:")]
	//	void ResetWithCompletionHandler (Action completionHandler);

	//	// -(void)flushWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
	//	[Export ("flushWithCompletionHandler:")]
	//	void FlushWithCompletionHandler (Action completionHandler);

	//	// -(void)getTasksWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSURLSessionDataTask *> * _Nonnull, NSArray<NSURLSessionUploadTask *> * _Nonnull, NSArray<NSURLSessionDownloadTask *> * _Nonnull))completionHandler;
	//	[Export ("getTasksWithCompletionHandler:")]
	//	void GetTasksWithCompletionHandler (Action<NSArray<NSURLSessionDataTask>, NSArray<NSURLSessionUploadTask>, NSArray<NSURLSessionDownloadTask>> completionHandler);

	//	// -(void)getAllTasksWithCompletionHandler:(void (^ _Nonnull)(NSArray<__kindof NSURLSessionTask *> * _Nonnull))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("getAllTasksWithCompletionHandler:")]
	//	void GetAllTasksWithCompletionHandler (Action<NSArray<NSURLSessionTask>> completionHandler);

	//	// -(NSURLSessionDataTask * _Nonnull)dataTaskWithRequest:(NSURLRequest * _Nonnull)request;
	//	[Export ("dataTaskWithRequest:")]
	//	NSUrlSessionDataTask DataTaskWithRequest (NSUrlRequest request);

	//	// -(NSURLSessionDataTask * _Nonnull)dataTaskWithURL:(NSURL * _Nonnull)url;
	//	[Export ("dataTaskWithURL:")]
	//	NSUrlSessionDataTask DataTaskWithURL (NSUrl url);

	//	// -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromFile:(NSURL * _Nonnull)fileURL;
	//	[Export ("uploadTaskWithRequest:fromFile:")]
	//	NSUrlSessionUploadTask UploadTaskWithRequest (NSUrlRequest request, NSUrl fileURL);

	//	// -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromData:(NSData * _Nonnull)bodyData;
	//	[Export ("uploadTaskWithRequest:fromData:")]
	//	NSUrlSessionUploadTask UploadTaskWithRequest (NSUrlRequest request, NSData bodyData);

	//	// -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithStreamedRequest:(NSURLRequest * _Nonnull)request;
	//	[Export ("uploadTaskWithStreamedRequest:")]
	//	NSUrlSessionUploadTask UploadTaskWithStreamedRequest (NSUrlRequest request);

	//	// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithRequest:(NSURLRequest * _Nonnull)request;
	//	[Export ("downloadTaskWithRequest:")]
	//	NSUrlSessionDownloadTask DownloadTaskWithRequest (NSUrlRequest request);

	//	// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithURL:(NSURL * _Nonnull)url;
	//	[Export ("downloadTaskWithURL:")]
	//	NSUrlSessionDownloadTask DownloadTaskWithURL (NSUrl url);

	//	// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithResumeData:(NSData * _Nonnull)resumeData;
	//	[Export ("downloadTaskWithResumeData:")]
	//	NSUrlSessionDownloadTask DownloadTaskWithResumeData (NSData resumeData);

	//	// -(NSURLSessionStreamTask * _Nonnull)streamTaskWithHostName:(NSString * _Nonnull)hostname port:(NSInteger)port __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[TV (9,0), NoWatch, Mac (10,11), iOS (9,0)]
	//	[Export ("streamTaskWithHostName:port:")]
	//	NSUrlSessionStreamTask StreamTaskWithHostName (string hostname, nint port);

	//	// -(NSURLSessionStreamTask * _Nonnull)streamTaskWithNetService:(NSNetService * _Nonnull)service __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[TV (9,0), NoWatch, Mac (10,11), iOS (9,0)]
	//	[Export ("streamTaskWithNetService:")]
	//	NSUrlSessionStreamTask StreamTaskWithNetService (NSNetService service);
	//}

	//// @interface NSURLSessionAsynchronousConvenience (NSURLSession)
	//[Category]
	//[BaseType (typeof(NSUrlSession))]
	//interface NSURLSession_NSURLSessionAsynchronousConvenience
	//{
	//	// -(NSURLSessionDataTask * _Nonnull)dataTaskWithRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
	//	[Export ("dataTaskWithRequest:completionHandler:")]
	//	NSUrlSessionDataTask DataTaskWithRequest (NSUrlRequest request, Action<NSData, NSURLResponse, NSError> completionHandler);

	//	// -(NSURLSessionDataTask * _Nonnull)dataTaskWithURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
	//	[Export ("dataTaskWithURL:completionHandler:")]
	//	NSUrlSessionDataTask DataTaskWithURL (NSUrl url, Action<NSData, NSURLResponse, NSError> completionHandler);

	//	// -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromFile:(NSURL * _Nonnull)fileURL completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
	//	[Export ("uploadTaskWithRequest:fromFile:completionHandler:")]
	//	NSUrlSessionUploadTask UploadTaskWithRequest (NSUrlRequest request, NSUrl fileURL, Action<NSData, NSURLResponse, NSError> completionHandler);

	//	// -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromData:(NSData * _Nullable)bodyData completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
	//	[Export ("uploadTaskWithRequest:fromData:completionHandler:")]
	//	NSUrlSessionUploadTask UploadTaskWithRequest (NSUrlRequest request, [NullAllowed] NSData bodyData, Action<NSData, NSURLResponse, NSError> completionHandler);

	//	// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
	//	[Export ("downloadTaskWithRequest:completionHandler:")]
	//	NSUrlSessionDownloadTask DownloadTaskWithRequest (NSUrlRequest request, Action<NSURL, NSURLResponse, NSError> completionHandler);

	//	// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
	//	[Export ("downloadTaskWithURL:completionHandler:")]
	//	NSUrlSessionDownloadTask DownloadTaskWithURL (NSUrl url, Action<NSURL, NSURLResponse, NSError> completionHandler);

	//	// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithResumeData:(NSData * _Nonnull)resumeData completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
	//	[Export ("downloadTaskWithResumeData:completionHandler:")]
	//	NSUrlSessionDownloadTask DownloadTaskWithResumeData (NSData resumeData, Action<NSURL, NSURLResponse, NSError> completionHandler);
	//}

	//// @interface NSURLSessionTask : NSObject <NSCopying, NSProgressReporting>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSURLSessionTask : INSCopying, INSProgressReporting
	//{
	//	// @property (readonly) NSUInteger taskIdentifier;
	//	[Export ("taskIdentifier")]
	//	nuint TaskIdentifier { get; }

	//	// @property (readonly, copy) NSURLRequest * _Nullable originalRequest;
	//	[NullAllowed, Export ("originalRequest", ArgumentSemantic.Copy)]
	//	NSUrlRequest OriginalRequest { get; }

	//	// @property (readonly, copy) NSURLRequest * _Nullable currentRequest;
	//	[NullAllowed, Export ("currentRequest", ArgumentSemantic.Copy)]
	//	NSUrlRequest CurrentRequest { get; }

	//	// @property (readonly, copy) NSURLResponse * _Nullable response;
	//	[NullAllowed, Export ("response", ArgumentSemantic.Copy)]
	//	NSUrlResponse Response { get; }

	//	// @property (readonly, strong) NSProgress * _Nonnull progress __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("progress", ArgumentSemantic.Strong)]
	//	NSProgress Progress { get; }

	//	// @property (copy) NSDate * _Nullable earliestBeginDate __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("earliestBeginDate", ArgumentSemantic.Copy)]
	//	NSDate EarliestBeginDate { get; set; }

	//	// @property int64_t countOfBytesClientExpectsToSend __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("countOfBytesClientExpectsToSend")]
	//	long CountOfBytesClientExpectsToSend { get; set; }

	//	// @property int64_t countOfBytesClientExpectsToReceive __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("countOfBytesClientExpectsToReceive")]
	//	long CountOfBytesClientExpectsToReceive { get; set; }

	//	// @property (readonly) int64_t countOfBytesReceived;
	//	[Export ("countOfBytesReceived")]
	//	long CountOfBytesReceived { get; }

	//	// @property (readonly) int64_t countOfBytesSent;
	//	[Export ("countOfBytesSent")]
	//	long CountOfBytesSent { get; }

	//	// @property (readonly) int64_t countOfBytesExpectedToSend;
	//	[Export ("countOfBytesExpectedToSend")]
	//	long CountOfBytesExpectedToSend { get; }

	//	// @property (readonly) int64_t countOfBytesExpectedToReceive;
	//	[Export ("countOfBytesExpectedToReceive")]
	//	long CountOfBytesExpectedToReceive { get; }

	//	// @property (copy) NSString * _Nullable taskDescription;
	//	[NullAllowed, Export ("taskDescription")]
	//	string TaskDescription { get; set; }

	//	// -(void)cancel;
	//	[Export ("cancel")]
	//	void Cancel ();

	//	// @property (readonly) NSURLSessionTaskState state;
	//	[Export ("state")]
	//	NSURLSessionTaskState State { get; }

	//	// @property (readonly, copy) NSError * _Nullable error;
	//	[NullAllowed, Export ("error", ArgumentSemantic.Copy)]
	//	NSError Error { get; }

	//	// -(void)suspend;
	//	[Export ("suspend")]
	//	void Suspend ();

	//	// -(void)resume;
	//	[Export ("resume")]
	//	void Resume ();

	//	// @property float priority __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[Export ("priority")]
	//	float Priority { get; set; }
	//}

	//// @interface NSURLSessionDataTask : NSURLSessionTask
	//[BaseType (typeof(NSUrlSessionTask))]
	//interface NSURLSessionDataTask
	//{
	//}

	//// @interface NSURLSessionUploadTask : NSURLSessionDataTask
	//[BaseType (typeof(NSUrlSessionDataTask))]
	//interface NSURLSessionUploadTask
	//{
	//}

	//// @interface NSURLSessionDownloadTask : NSURLSessionTask
	//[BaseType (typeof(NSUrlSessionTask))]
	//interface NSURLSessionDownloadTask
	//{
	//	// -(void)cancelByProducingResumeData:(void (^ _Nonnull)(NSData * _Nullable))completionHandler;
	//	[Export ("cancelByProducingResumeData:")]
	//	void CancelByProducingResumeData (Action<NSData> completionHandler);
	//}

	//// @interface NSURLSessionStreamTask : NSURLSessionTask
	//[iOS (9,0)]
	//[BaseType (typeof(NSUrlSessionTask))]
	//interface NSURLSessionStreamTask
	//{
	//	// -(void)readDataOfMinLength:(NSUInteger)minBytes maxLength:(NSUInteger)maxBytes timeout:(NSTimeInterval)timeout completionHandler:(void (^ _Nonnull)(NSData * _Nullable, BOOL, NSError * _Nullable))completionHandler;
	//	[Export ("readDataOfMinLength:maxLength:timeout:completionHandler:")]
	//	void ReadDataOfMinLength (nuint minBytes, nuint maxBytes, double timeout, Action<NSData, bool, NSError> completionHandler);

	//	// -(void)writeData:(NSData * _Nonnull)data timeout:(NSTimeInterval)timeout completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
	//	[Export ("writeData:timeout:completionHandler:")]
	//	void WriteData (NSData data, double timeout, Action<NSError> completionHandler);

	//	// -(void)captureStreams;
	//	[Export ("captureStreams")]
	//	void CaptureStreams ();

	//	// -(void)closeWrite;
	//	[Export ("closeWrite")]
	//	void CloseWrite ();

	//	// -(void)closeRead;
	//	[Export ("closeRead")]
	//	void CloseRead ();

	//	// -(void)startSecureConnection;
	//	[Export ("startSecureConnection")]
	//	void StartSecureConnection ();

	//	// -(void)stopSecureConnection;
	//	[Export ("stopSecureConnection")]
	//	void StopSecureConnection ();
	//}

	//// @interface NSURLSessionConfiguration : NSObject <NSCopying>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSURLSessionConfiguration : INSCopying
	//{
	//	// @property (readonly, strong, class) NSURLSessionConfiguration * _Nonnull defaultSessionConfiguration;
	//	[Static]
	//	[Export ("defaultSessionConfiguration", ArgumentSemantic.Strong)]
	//	NSUrlSessionConfiguration DefaultSessionConfiguration { get; }

	//	// @property (readonly, strong, class) NSURLSessionConfiguration * _Nonnull ephemeralSessionConfiguration;
	//	[Static]
	//	[Export ("ephemeralSessionConfiguration", ArgumentSemantic.Strong)]
	//	NSUrlSessionConfiguration EphemeralSessionConfiguration { get; }

	//	// +(NSURLSessionConfiguration * _Nonnull)backgroundSessionConfigurationWithIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//	[Static]
	//	[Export ("backgroundSessionConfigurationWithIdentifier:")]
	//	NSUrlSessionConfiguration BackgroundSessionConfigurationWithIdentifier (string identifier);

	//	// @property (readonly, copy) NSString * _Nullable identifier;
	//	[NullAllowed, Export ("identifier")]
	//	string Identifier { get; }

	//	// @property NSURLRequestCachePolicy requestCachePolicy;
	//	[Export ("requestCachePolicy", ArgumentSemantic.Assign)]
	//	NSURLRequestCachePolicy RequestCachePolicy { get; set; }

	//	// @property NSTimeInterval timeoutIntervalForRequest;
	//	[Export ("timeoutIntervalForRequest")]
	//	double TimeoutIntervalForRequest { get; set; }

	//	// @property NSTimeInterval timeoutIntervalForResource;
	//	[Export ("timeoutIntervalForResource")]
	//	double TimeoutIntervalForResource { get; set; }

	//	// @property NSURLRequestNetworkServiceType networkServiceType;
	//	[Export ("networkServiceType", ArgumentSemantic.Assign)]
	//	NSURLRequestNetworkServiceType NetworkServiceType { get; set; }

	//	// @property BOOL allowsCellularAccess;
	//	[Export ("allowsCellularAccess")]
	//	bool AllowsCellularAccess { get; set; }

	//	// @property BOOL waitsForConnectivity __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("waitsForConnectivity")]
	//	bool WaitsForConnectivity { get; set; }

	//	// @property (getter = isDiscretionary) BOOL discretionary __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (7, 0)]
	//	[Export ("discretionary")]
	//	bool Discretionary { [Bind ("isDiscretionary")] get; set; }

	//	// @property (copy) NSString * _Nullable sharedContainerIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
	//	[NullAllowed, Export ("sharedContainerIdentifier")]
	//	string SharedContainerIdentifier { get; set; }

	//	// @property BOOL sessionSendsLaunchEvents __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (7, 0)]
	//	[Export ("sessionSendsLaunchEvents")]
	//	bool SessionSendsLaunchEvents { get; set; }

	//	// @property (copy) NSDictionary * _Nullable connectionProxyDictionary;
	//	[NullAllowed, Export ("connectionProxyDictionary", ArgumentSemantic.Copy)]
	//	NSDictionary ConnectionProxyDictionary { get; set; }

	//	// @property SSLProtocol TLSMinimumSupportedProtocol;
	//	[Export ("TLSMinimumSupportedProtocol", ArgumentSemantic.Assign)]
	//	SSLProtocol TLSMinimumSupportedProtocol { get; set; }

	//	// @property SSLProtocol TLSMaximumSupportedProtocol;
	//	[Export ("TLSMaximumSupportedProtocol", ArgumentSemantic.Assign)]
	//	SSLProtocol TLSMaximumSupportedProtocol { get; set; }

	//	// @property BOOL HTTPShouldUsePipelining;
	//	[Export ("HTTPShouldUsePipelining")]
	//	bool HTTPShouldUsePipelining { get; set; }

	//	// @property BOOL HTTPShouldSetCookies;
	//	[Export ("HTTPShouldSetCookies")]
	//	bool HTTPShouldSetCookies { get; set; }

	//	// @property NSHTTPCookieAcceptPolicy HTTPCookieAcceptPolicy;
	//	[Export ("HTTPCookieAcceptPolicy", ArgumentSemantic.Assign)]
	//	NSHTTPCookieAcceptPolicy HTTPCookieAcceptPolicy { get; set; }

	//	// @property (copy) NSDictionary * _Nullable HTTPAdditionalHeaders;
	//	[NullAllowed, Export ("HTTPAdditionalHeaders", ArgumentSemantic.Copy)]
	//	NSDictionary HTTPAdditionalHeaders { get; set; }

	//	// @property NSInteger HTTPMaximumConnectionsPerHost;
	//	[Export ("HTTPMaximumConnectionsPerHost")]
	//	nint HTTPMaximumConnectionsPerHost { get; set; }

	//	// @property (retain) NSHTTPCookieStorage * _Nullable HTTPCookieStorage;
	//	[NullAllowed, Export ("HTTPCookieStorage", ArgumentSemantic.Retain)]
	//	NSHttpCookieStorage HTTPCookieStorage { get; set; }

	//	// @property (retain) NSURLCredentialStorage * _Nullable URLCredentialStorage;
	//	[NullAllowed, Export ("URLCredentialStorage", ArgumentSemantic.Retain)]
	//	NSUrlCredentialStorage URLCredentialStorage { get; set; }

	//	// @property (retain) NSURLCache * _Nullable URLCache;
	//	[NullAllowed, Export ("URLCache", ArgumentSemantic.Retain)]
	//	NSUrlCache URLCache { get; set; }

	//	// @property BOOL shouldUseExtendedBackgroundIdleMode __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("shouldUseExtendedBackgroundIdleMode")]
	//	bool ShouldUseExtendedBackgroundIdleMode { get; set; }

	//	// @property (copy) NSArray<Class> * _Nullable protocolClasses;
	//	[NullAllowed, Export ("protocolClasses", ArgumentSemantic.Copy)]
	//	Class[] ProtocolClasses { get; set; }

	//	// @property NSURLSessionMultipathServiceType multipathServiceType __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11, 0)]
	//	[Export ("multipathServiceType", ArgumentSemantic.Assign)]
	//	NSURLSessionMultipathServiceType MultipathServiceType { get; set; }
	//}

	//// @protocol NSURLSessionDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSURLSessionDelegate
	//{
	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session didBecomeInvalidWithError:(NSError * _Nullable)error;
	//	[Export ("URLSession:didBecomeInvalidWithError:")]
	//	void URLSession (NSUrlSession session, [NullAllowed] NSError error);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
	//	[Export ("URLSession:didReceiveChallenge:completionHandler:")]
	//	void URLSession (NSUrlSession session, NSUrlAuthenticationChallenge challenge, Action<NSURLSessionAuthChallengeDisposition, NSURLCredential> completionHandler);

	//	// @optional -(void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (2,0), TV (9,0), NoMac, iOS (7,0)]
	//	[Export ("URLSessionDidFinishEventsForBackgroundURLSession:")]
	//	void URLSessionDidFinishEventsForBackgroundURLSession (NSUrlSession session);
	//}

	//// @protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>
	//[Protocol, Model]
	//interface NSURLSessionTaskDelegate : INSUrlSessionDelegate
	//{
	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willBeginDelayedRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLSessionDelayedRequestDisposition, NSURLRequest * _Nullable))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("URLSession:task:willBeginDelayedRequest:completionHandler:")]
	//	void Task (NSUrlSession session, NSUrlSessionTask task, NSUrlRequest request, Action<NSURLSessionDelayedRequestDisposition, NSURLRequest> completionHandler);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session taskIsWaitingForConnectivity:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("URLSession:taskIsWaitingForConnectivity:")]
	//	void TaskIsWaitingForConnectivity (NSUrlSession session, NSUrlSessionTask task);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
	//	[Export ("URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:")]
	//	void Task (NSUrlSession session, NSUrlSessionTask task, NSHttpUrlResponse response, NSUrlRequest request, Action<NSURLRequest> completionHandler);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
	//	[Export ("URLSession:task:didReceiveChallenge:completionHandler:")]
	//	void Task (NSUrlSession session, NSUrlSessionTask task, NSUrlAuthenticationChallenge challenge, Action<NSURLSessionAuthChallengeDisposition, NSURLCredential> completionHandler);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task needNewBodyStream:(void (^ _Nonnull)(NSInputStream * _Nullable))completionHandler;
	//	[Export ("URLSession:task:needNewBodyStream:")]
	//	void Task (NSUrlSession session, NSUrlSessionTask task, Action<NSInputStream> completionHandler);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
	//	[Export ("URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:")]
	//	void Task (NSUrlSession session, NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didFinishCollectingMetrics:(NSURLSessionTaskMetrics * _Nonnull)metrics __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("URLSession:task:didFinishCollectingMetrics:")]
	//	void Task (NSUrlSession session, NSUrlSessionTask task, NSUrlSessionTaskMetrics metrics);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
	//	[Export ("URLSession:task:didCompleteWithError:")]
	//	void Task (NSUrlSession session, NSUrlSessionTask task, [NullAllowed] NSError error);
	//}

	//// @protocol NSURLSessionDataDelegate <NSURLSessionTaskDelegate>
	//[Protocol, Model]
	//interface NSURLSessionDataDelegate : INSUrlSessionTaskDelegate
	//{
	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(NSURLSessionResponseDisposition))completionHandler;
	//	[Export ("URLSession:dataTask:didReceiveResponse:completionHandler:")]
	//	void DataTask (NSUrlSession session, NSUrlSessionDataTask dataTask, NSUrlResponse response, Action<NSURLSessionResponseDisposition> completionHandler);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeDownloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask;
	//	[Export ("URLSession:dataTask:didBecomeDownloadTask:")]
	//	void DataTask (NSUrlSession session, NSUrlSessionDataTask dataTask, NSUrlSessionDownloadTask downloadTask);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
	//	[Export ("URLSession:dataTask:didBecomeStreamTask:")]
	//	void DataTask (NSUrlSession session, NSUrlSessionDataTask dataTask, NSUrlSessionStreamTask streamTask);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
	//	[Export ("URLSession:dataTask:didReceiveData:")]
	//	void DataTask (NSUrlSession session, NSUrlSessionDataTask dataTask, NSData data);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask willCacheResponse:(NSCachedURLResponse * _Nonnull)proposedResponse completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler;
	//	[Export ("URLSession:dataTask:willCacheResponse:completionHandler:")]
	//	void DataTask (NSUrlSession session, NSUrlSessionDataTask dataTask, NSCachedUrlResponse proposedResponse, Action<NSCachedURLResponse> completionHandler);
	//}

	//// @protocol NSURLSessionDownloadDelegate <NSURLSessionTaskDelegate>
	//[Protocol, Model]
	//interface NSURLSessionDownloadDelegate : INSUrlSessionTaskDelegate
	//{
	//	// @required -(void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
	//	[Abstract]
	//	[Export ("URLSession:downloadTask:didFinishDownloadingToURL:")]
	//	void DownloadTask (NSUrlSession session, NSUrlSessionDownloadTask downloadTask, NSUrl location);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
	//	[Export ("URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:")]
	//	void DownloadTask (NSUrlSession session, NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
	//	[Export ("URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:")]
	//	void DownloadTask (NSUrlSession session, NSUrlSessionDownloadTask downloadTask, long fileOffset, long expectedTotalBytes);
	//}

	//// @protocol NSURLSessionStreamDelegate <NSURLSessionTaskDelegate>
	//[Protocol, Model]
	//interface NSURLSessionStreamDelegate : INSUrlSessionTaskDelegate
	//{
	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session readClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
	//	[Export ("URLSession:readClosedForStreamTask:")]
	//	void ReadClosedForStreamTask (NSUrlSession session, NSUrlSessionStreamTask streamTask);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session writeClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
	//	[Export ("URLSession:writeClosedForStreamTask:")]
	//	void WriteClosedForStreamTask (NSUrlSession session, NSUrlSessionStreamTask streamTask);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session betterRouteDiscoveredForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
	//	[Export ("URLSession:betterRouteDiscoveredForStreamTask:")]
	//	void BetterRouteDiscoveredForStreamTask (NSUrlSession session, NSUrlSessionStreamTask streamTask);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session streamTask:(NSURLSessionStreamTask * _Nonnull)streamTask didBecomeInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
	//	[Export ("URLSession:streamTask:didBecomeInputStream:outputStream:")]
	//	void StreamTask (NSUrlSession session, NSUrlSessionStreamTask streamTask, NSInputStream inputStream, NSOutputStream outputStream);
	//}

	//// @interface NSURLSessionDeprecated (NSURLSessionConfiguration)
	//[Category]
	//[BaseType (typeof(NSUrlSessionConfiguration))]
	//interface NSURLSessionConfiguration_NSURLSessionDeprecated
	//{
	//	// +(NSURLSessionConfiguration * _Nonnull)backgroundSessionConfiguration:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=7.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 7, 0, message: "Please use backgroundSessionConfigurationWithIdentifier: instead")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Please use backgroundSessionConfigurationWithIdentifier: instead")]
	//	[Static]
	//	[Export ("backgroundSessionConfiguration:")]
	//	NSUrlSessionConfiguration BackgroundSessionConfiguration (string identifier);
	//}

	//// @interface NSURLSessionTaskTransactionMetrics : NSObject
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSURLSessionTaskTransactionMetrics
	//{
	//	// @property (readonly, copy) NSURLRequest * _Nonnull request;
	//	[Export ("request", ArgumentSemantic.Copy)]
	//	NSUrlRequest Request { get; }

	//	// @property (readonly, copy) NSURLResponse * _Nullable response;
	//	[NullAllowed, Export ("response", ArgumentSemantic.Copy)]
	//	NSUrlResponse Response { get; }

	//	// @property (readonly, copy) NSDate * _Nullable fetchStartDate;
	//	[NullAllowed, Export ("fetchStartDate", ArgumentSemantic.Copy)]
	//	NSDate FetchStartDate { get; }

	//	// @property (readonly, copy) NSDate * _Nullable domainLookupStartDate;
	//	[NullAllowed, Export ("domainLookupStartDate", ArgumentSemantic.Copy)]
	//	NSDate DomainLookupStartDate { get; }

	//	// @property (readonly, copy) NSDate * _Nullable domainLookupEndDate;
	//	[NullAllowed, Export ("domainLookupEndDate", ArgumentSemantic.Copy)]
	//	NSDate DomainLookupEndDate { get; }

	//	// @property (readonly, copy) NSDate * _Nullable connectStartDate;
	//	[NullAllowed, Export ("connectStartDate", ArgumentSemantic.Copy)]
	//	NSDate ConnectStartDate { get; }

	//	// @property (readonly, copy) NSDate * _Nullable secureConnectionStartDate;
	//	[NullAllowed, Export ("secureConnectionStartDate", ArgumentSemantic.Copy)]
	//	NSDate SecureConnectionStartDate { get; }

	//	// @property (readonly, copy) NSDate * _Nullable secureConnectionEndDate;
	//	[NullAllowed, Export ("secureConnectionEndDate", ArgumentSemantic.Copy)]
	//	NSDate SecureConnectionEndDate { get; }

	//	// @property (readonly, copy) NSDate * _Nullable connectEndDate;
	//	[NullAllowed, Export ("connectEndDate", ArgumentSemantic.Copy)]
	//	NSDate ConnectEndDate { get; }

	//	// @property (readonly, copy) NSDate * _Nullable requestStartDate;
	//	[NullAllowed, Export ("requestStartDate", ArgumentSemantic.Copy)]
	//	NSDate RequestStartDate { get; }

	//	// @property (readonly, copy) NSDate * _Nullable requestEndDate;
	//	[NullAllowed, Export ("requestEndDate", ArgumentSemantic.Copy)]
	//	NSDate RequestEndDate { get; }

	//	// @property (readonly, copy) NSDate * _Nullable responseStartDate;
	//	[NullAllowed, Export ("responseStartDate", ArgumentSemantic.Copy)]
	//	NSDate ResponseStartDate { get; }

	//	// @property (readonly, copy) NSDate * _Nullable responseEndDate;
	//	[NullAllowed, Export ("responseEndDate", ArgumentSemantic.Copy)]
	//	NSDate ResponseEndDate { get; }

	//	// @property (readonly, copy) NSString * _Nullable networkProtocolName;
	//	[NullAllowed, Export ("networkProtocolName")]
	//	string NetworkProtocolName { get; }

	//	// @property (readonly, getter = isProxyConnection, assign) BOOL proxyConnection;
	//	[Export ("proxyConnection")]
	//	bool ProxyConnection { [Bind ("isProxyConnection")] get; }

	//	// @property (readonly, getter = isReusedConnection, assign) BOOL reusedConnection;
	//	[Export ("reusedConnection")]
	//	bool ReusedConnection { [Bind ("isReusedConnection")] get; }

	//	// @property (readonly, assign) NSURLSessionTaskMetricsResourceFetchType resourceFetchType;
	//	[Export ("resourceFetchType", ArgumentSemantic.Assign)]
	//	NSURLSessionTaskMetricsResourceFetchType ResourceFetchType { get; }
	//}

	//// @interface NSURLSessionTaskMetrics : NSObject
	//[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSURLSessionTaskMetrics
	//{
	//	// @property (readonly, copy) NSArray<NSURLSessionTaskTransactionMetrics *> * _Nonnull transactionMetrics;
	//	[Export ("transactionMetrics", ArgumentSemantic.Copy)]
	//	NSUrlSessionTaskTransactionMetrics[] TransactionMetrics { get; }

	//	// @property (readonly, copy) NSDateInterval * _Nonnull taskInterval;
	//	[Export ("taskInterval", ArgumentSemantic.Copy)]
	//	NSDateInterval TaskInterval { get; }

	//	// @property (readonly, assign) NSUInteger redirectCount;
	//	[Export ("redirectCount")]
	//	nuint RedirectCount { get; }
	//}

	//// @interface NSUserActivity : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSUserActivity
	//{
	//	// -(instancetype _Nonnull)initWithActivityType:(NSString * _Nonnull)activityType __attribute__((objc_designated_initializer));
	//	[Export ("initWithActivityType:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string activityType);

	//	// @property (readonly, copy) NSString * _Nonnull activityType;
	//	[Export ("activityType")]
	//	string ActivityType { get; }

	//	// @property (copy) NSString * _Nullable title;
	//	[NullAllowed, Export ("title")]
	//	string Title { get; set; }

	//	// @property (copy) NSDictionary * _Nullable userInfo;
	//	[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
	//	NSDictionary UserInfo { get; set; }

	//	// -(void)addUserInfoEntriesFromDictionary:(NSDictionary * _Nonnull)otherDictionary;
	//	[Export ("addUserInfoEntriesFromDictionary:")]
	//	void AddUserInfoEntriesFromDictionary (NSDictionary otherDictionary);

	//	// @property (copy) NSSet<NSString *> * _Nullable requiredUserInfoKeys __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
	//	[NullAllowed, Export ("requiredUserInfoKeys", ArgumentSemantic.Copy)]
	//	NSSet<NSString> RequiredUserInfoKeys { get; set; }

	//	// @property (assign) BOOL needsSave;
	//	[Export ("needsSave")]
	//	bool NeedsSave { get; set; }

	//	// @property (copy) NSURL * _Nullable webpageURL;
	//	[NullAllowed, Export ("webpageURL", ArgumentSemantic.Copy)]
	//	NSUrl WebpageURL { get; set; }

	//	// @property (copy) NSURL * _Nullable referrerURL __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("referrerURL", ArgumentSemantic.Copy)]
	//	NSUrl ReferrerURL { get; set; }

	//	// @property (copy) NSDate * _Nullable expirationDate __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
	//	[NullAllowed, Export ("expirationDate", ArgumentSemantic.Copy)]
	//	NSDate ExpirationDate { get; set; }

	//	// @property (copy) NSSet<NSString *> * _Nonnull keywords __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("keywords", ArgumentSemantic.Copy)]
	//	NSSet<NSString> Keywords { get; set; }

	//	// @property BOOL supportsContinuationStreams;
	//	[Export ("supportsContinuationStreams")]
	//	bool SupportsContinuationStreams { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSUserActivityDelegate Delegate { get; set; }

	//	// @property (weak) id<NSUserActivityDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(void)becomeCurrent;
	//	[Export ("becomeCurrent")]
	//	void BecomeCurrent ();

	//	// -(void)resignCurrent __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (3,0), TV (10,0), Mac (10,11), iOS (9,0)]
	//	[Export ("resignCurrent")]
	//	void ResignCurrent ();

	//	// -(void)invalidate;
	//	[Export ("invalidate")]
	//	void Invalidate ();

	//	// -(void)getContinuationStreamsWithCompletionHandler:(void (^ _Nonnull)(NSInputStream * _Nullable, NSOutputStream * _Nullable, NSError * _Nullable))completionHandler;
	//	[Export ("getContinuationStreamsWithCompletionHandler:")]
	//	void GetContinuationStreamsWithCompletionHandler (Action<NSInputStream, NSOutputStream, NSError> completionHandler);

	//	// @property (getter = isEligibleForHandoff) BOOL eligibleForHandoff __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("eligibleForHandoff")]
	//	bool EligibleForHandoff { [Bind ("isEligibleForHandoff")] get; set; }

	//	// @property (getter = isEligibleForSearch) BOOL eligibleForSearch __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("eligibleForSearch")]
	//	bool EligibleForSearch { [Bind ("isEligibleForSearch")] get; set; }

	//	// @property (getter = isEligibleForPublicIndexing) BOOL eligibleForPublicIndexing __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("eligibleForPublicIndexing")]
	//	bool EligibleForPublicIndexing { [Bind ("isEligibleForPublicIndexing")] get; set; }

	//	// @property (getter = isEligibleForPrediction) BOOL eligibleForPrediction __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0)));
	//	[Watch (5, 0), NoTV, NoMac, iOS (12, 0)]
	//	[Export ("eligibleForPrediction")]
	//	bool EligibleForPrediction { [Bind ("isEligibleForPrediction")] get; set; }

	//	// @property (copy) NSUserActivityPersistentIdentifier _Nullable persistentIdentifier __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0)));
	//	[Watch (5, 0), NoTV, NoMac, iOS (12, 0)]
	//	[NullAllowed, Export ("persistentIdentifier")]
	//	string PersistentIdentifier { get; set; }

	//	// +(void)deleteSavedUserActivitiesWithPersistentIdentifiers:(NSArray<NSUserActivityPersistentIdentifier> * _Nonnull)persistentIdentifiers completionHandler:(void (^ _Nonnull)(void))handler __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0)));
	//	[Watch (5,0), NoTV, NoMac, iOS (12,0)]
	//	[Static]
	//	[Export ("deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:")]
	//	void DeleteSavedUserActivitiesWithPersistentIdentifiers (string[] persistentIdentifiers, Action handler);

	//	// +(void)deleteAllSavedUserActivitiesWithCompletionHandler:(void (^ _Nonnull)(void))handler __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0)));
	//	[Watch (5,0), NoTV, NoMac, iOS (12,0)]
	//	[Static]
	//	[Export ("deleteAllSavedUserActivitiesWithCompletionHandler:")]
	//	void DeleteAllSavedUserActivitiesWithCompletionHandler (Action handler);
	//}

	//// @protocol NSUserActivityDelegate <NSObject>
	//[Watch (3,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSUserActivityDelegate
	//{
	//	// @optional -(void)userActivityWillSave:(NSUserActivity * _Nonnull)userActivity;
	//	[Export ("userActivityWillSave:")]
	//	void UserActivityWillSave (NSUserActivity userActivity);

	//	// @optional -(void)userActivityWasContinued:(NSUserActivity * _Nonnull)userActivity;
	//	[Export ("userActivityWasContinued:")]
	//	void UserActivityWasContinued (NSUserActivity userActivity);

	//	// @optional -(void)userActivity:(NSUserActivity * _Nonnull)userActivity didReceiveInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
	//	[Export ("userActivity:didReceiveInputStream:outputStream:")]
	//	void UserActivity (NSUserActivity userActivity, NSInputStream inputStream, NSOutputStream outputStream);
	//}

	//// @interface NSUUID : NSObject <NSCopying, NSSecureCoding>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSUUID : INSCopying, INSSecureCoding
	//{
	//	// +(instancetype _Nonnull)UUID;
	//	[Static]
	//	[Export ("UUID")]
	//	NSUuid UUID ();

	//	// -(instancetype _Nullable)initWithUUIDString:(NSString * _Nonnull)string;
	//	[Export ("initWithUUIDString:")]
	//	IntPtr Constructor (string @string);

	//	// -(instancetype _Nonnull)initWithUUIDBytes:(const unsigned char * _Nullable)bytes;
	//	[Export ("initWithUUIDBytes:")]
	//	IntPtr Constructor ([NullAllowed] byte[] bytes);

	//	// -(void)getUUIDBytes:(unsigned char * _Nonnull)uuid;
	//	[Export ("getUUIDBytes:")]
	//	void GetUUIDBytes (byte[] uuid);

	//	// @property (readonly, copy) NSString * _Nonnull UUIDString;
	//	[Export ("UUIDString")]
	//	string UUIDString { get; }
	//}

	//// typedef void (^CGPathApplyBlock)(const CGPathElement * _Nonnull);
	//unsafe delegate void CGPathApplyBlock (CGPathElement* arg0);

	//// typedef _Bool (^CGPDFArrayApplierBlock)(size_t, CGPDFObjectRef _Nonnull, void * _Nullable);
	//unsafe delegate bool CGPDFArrayApplierBlock (nuint arg0, CGPDFObjectRef* arg1, [NullAllowed] void* arg2);

	//// typedef _Bool (^CGPDFDictionaryApplierBlock)(const char * _Nonnull, CGPDFObjectRef _Nonnull, void * _Nullable);
	//unsafe delegate bool CGPDFDictionaryApplierBlock (sbyte* arg0, CGPDFObjectRef* arg1, [NullAllowed] void* arg2);

	//// typedef void (^MIDINotifyBlock)(const MIDINotification * _Nonnull);
	//unsafe delegate void MIDINotifyBlock (MIDINotification* arg0);

	//// typedef void (^MIDIReadBlock)(const MIDIPacketList * _Nonnull, void * _Nullable);
	//unsafe delegate void MIDIReadBlock (MIDIPacketList* arg0, [NullAllowed] void* arg1);

	//// @interface MIDINetworkHost : NSObject
	//[NoWatch, NoTV, NoMac, iOS (4,2)]
	//[BaseType (typeof(NSObject))]
	//interface MIDINetworkHost
	//{
	//	// +(instancetype _Nonnull)hostWithName:(NSString * _Nonnull)name address:(NSString * _Nonnull)address port:(NSUInteger)port;
	//	[Static]
	//	[Export ("hostWithName:address:port:")]
	//	MidiNetworkHost HostWithName (string name, string address, nuint port);

	//	// +(instancetype _Nonnull)hostWithName:(NSString * _Nonnull)name netService:(NSNetService * _Nonnull)netService;
	//	[Static]
	//	[Export ("hostWithName:netService:")]
	//	MidiNetworkHost HostWithName (string name, NSNetService netService);

	//	// +(instancetype _Nonnull)hostWithName:(NSString * _Nonnull)name netServiceName:(NSString * _Nonnull)netServiceName netServiceDomain:(NSString * _Nonnull)netServiceDomain;
	//	[Static]
	//	[Export ("hostWithName:netServiceName:netServiceDomain:")]
	//	MidiNetworkHost HostWithName (string name, string netServiceName, string netServiceDomain);

	//	// -(BOOL)hasSameAddressAs:(MIDINetworkHost * _Nonnull)other;
	//	[Export ("hasSameAddressAs:")]
	//	bool HasSameAddressAs (MidiNetworkHost other);

	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull address;
	//	[Export ("address")]
	//	string Address { get; }

	//	// @property (readonly, nonatomic) NSUInteger port;
	//	[Export ("port")]
	//	nuint Port { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable netServiceName;
	//	[NullAllowed, Export ("netServiceName")]
	//	string NetServiceName { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable netServiceDomain;
	//	[NullAllowed, Export ("netServiceDomain")]
	//	string NetServiceDomain { get; }
	//}

	//// @interface MIDINetworkConnection : NSObject
	//[NoWatch, NoTV, NoMac, iOS (4,2)]
	//[BaseType (typeof(NSObject))]
	//interface MIDINetworkConnection
	//{
	//	// +(instancetype _Nonnull)connectionWithHost:(MIDINetworkHost * _Nonnull)host;
	//	[Static]
	//	[Export ("connectionWithHost:")]
	//	MidiNetworkConnection ConnectionWithHost (MidiNetworkHost host);

	//	// @property (readonly, nonatomic) MIDINetworkHost * _Nonnull host;
	//	[Export ("host")]
	//	MidiNetworkHost Host { get; }
	//}

	//// @interface MIDINetworkSession : NSObject
	//[NoWatch, NoTV, NoMac, iOS (4,2)]
	//[BaseType (typeof(NSObject))]
	//interface MIDINetworkSession
	//{
	//	// +(MIDINetworkSession * _Nonnull)defaultSession;
	//	[Static]
	//	[Export ("defaultSession")]
	//	[Verify (MethodToProperty)]
	//	MidiNetworkSession DefaultSession { get; }

	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (readonly, nonatomic) NSUInteger networkPort;
	//	[Export ("networkPort")]
	//	nuint NetworkPort { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull networkName;
	//	[Export ("networkName")]
	//	string NetworkName { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull localName;
	//	[Export ("localName")]
	//	string LocalName { get; }

	//	// @property (nonatomic) MIDINetworkConnectionPolicy connectionPolicy;
	//	[Export ("connectionPolicy", ArgumentSemantic.Assign)]
	//	MIDINetworkConnectionPolicy ConnectionPolicy { get; set; }

	//	// -(NSSet<MIDINetworkHost *> * _Nonnull)contacts;
	//	[Export ("contacts")]
	//	[Verify (MethodToProperty)]
	//	NSSet<MIDINetworkHost> Contacts { get; }

	//	// -(BOOL)addContact:(MIDINetworkHost * _Nonnull)contact;
	//	[Export ("addContact:")]
	//	bool AddContact (MidiNetworkHost contact);

	//	// -(BOOL)removeContact:(MIDINetworkHost * _Nonnull)contact;
	//	[Export ("removeContact:")]
	//	bool RemoveContact (MidiNetworkHost contact);

	//	// -(NSSet<MIDINetworkConnection *> * _Nonnull)connections;
	//	[Export ("connections")]
	//	[Verify (MethodToProperty)]
	//	NSSet<MIDINetworkConnection> Connections { get; }

	//	// -(BOOL)addConnection:(MIDINetworkConnection * _Nonnull)connection;
	//	[Export ("addConnection:")]
	//	bool AddConnection (MidiNetworkConnection connection);

	//	// -(BOOL)removeConnection:(MIDINetworkConnection * _Nonnull)connection;
	//	[Export ("removeConnection:")]
	//	bool RemoveConnection (MidiNetworkConnection connection);

	//	// -(MIDIEndpointRef)sourceEndpoint;
	//	[Export ("sourceEndpoint")]
	//	[Verify (MethodToProperty)]
	//	uint SourceEndpoint { get; }

	//	// -(MIDIEndpointRef)destinationEndpoint;
	//	[Export ("destinationEndpoint")]
	//	[Verify (MethodToProperty)]
	//	uint DestinationEndpoint { get; }
	//}

	//// @interface MIDICIProfile : NSObject <NSSecureCoding>
	//[NoWatch, NoTV, Mac (10,14), iOS (12,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MIDICIProfile : INSSecureCoding
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) NSData * _Nonnull profileID;
	//	[Export ("profileID")]
	//	NSData ProfileID { get; }

	//	// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data name:(NSString * _Nonnull)inName;
	//	[Export ("initWithData:name:")]
	//	IntPtr Constructor (NSData data, string inName);
	//}

	//// @interface MIDICIProfileState : NSObject <NSSecureCoding>
	//[NoWatch, NoTV, Mac (10,14), iOS (12,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MIDICIProfileState : INSSecureCoding
	//{
	//	// @property (readonly, nonatomic) NSArray<MIDICIProfile *> * _Nonnull enabledProfiles;
	//	[Export ("enabledProfiles")]
	//	MIDICIProfile[] EnabledProfiles { get; }

	//	// @property (readonly, nonatomic) NSArray<MIDICIProfile *> * _Nonnull disabledProfiles;
	//	[Export ("disabledProfiles")]
	//	MIDICIProfile[] DisabledProfiles { get; }

	//	// -(instancetype _Nonnull)initWithEnabledProfiles:(NSArray<MIDICIProfile *> * _Nonnull)enabled disabledProfiles:(NSArray<MIDICIProfile *> * _Nonnull)disabled;
	//	[Export ("initWithEnabledProfiles:disabledProfiles:")]
	//	IntPtr Constructor (MIDICIProfile[] enabled, MIDICIProfile[] disabled);
	//}

	//// typedef void (^MIDICIProfileChangedBlock)(MIDICISession * _Nonnull, MIDIChannelNumber, MIDICIProfile * _Nonnull, BOOL);
	//delegate void MIDICIProfileChangedBlock (MIDICISession arg0, byte arg1, MIDICIProfile arg2, bool arg3);

	//// typedef void (^MIDICIPropertyChangedBlock)(MIDICISession * _Nonnull, MIDIChannelNumber, NSData * _Nonnull);
	//delegate void MIDICIPropertyChangedBlock (MIDICISession arg0, byte arg1, NSData arg2);

	//// typedef void (^MIDICIPropertyResponseBlock)(MIDICISession * _Nonnull, MIDIChannelNumber, NSData * _Nonnull, NSError * _Nonnull);
	//delegate void MIDICIPropertyResponseBlock (MIDICISession arg0, byte arg1, NSData arg2, NSError arg3);

	//// @interface MIDICISession : NSObject
	//[NoWatch, NoTV, Mac (10,14), iOS (12,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MIDICISession
	//{
	//	// -(instancetype _Nonnull)initWithMIDIEntity:(MIDIEntityRef)entity dataReadyHandler:(void (^ _Nonnull)(void))handler;
	//	[Export ("initWithMIDIEntity:dataReadyHandler:")]
	//	IntPtr Constructor (uint entity, Action handler);

	//	// @property (readonly, nonatomic) MIDIEntityRef entity;
	//	[Export ("entity")]
	//	uint Entity { get; }

	//	// @property (readonly, nonatomic) BOOL supportsProfileCapability;
	//	[Export ("supportsProfileCapability")]
	//	bool SupportsProfileCapability { get; }

	//	// @property (readonly, nonatomic) BOOL supportsPropertyCapability;
	//	[Export ("supportsPropertyCapability")]
	//	bool SupportsPropertyCapability { get; }

	//	// @property (readonly, nonatomic) MIDICIDeviceIdentification deviceIdentification;
	//	[Export ("deviceIdentification")]
	//	MIDICIDeviceIdentification DeviceIdentification { get; }

	//	// -(MIDICIProfileState * _Nonnull)profileStateForChannel:(MIDIChannelNumber)channel;
	//	[Export ("profileStateForChannel:")]
	//	MIDICIProfileState ProfileStateForChannel (byte channel);

	//	// -(BOOL)enableProfile:(MIDICIProfile * _Nonnull)profile onChannel:(MIDIChannelNumber)channel error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("enableProfile:onChannel:error:")]
	//	bool EnableProfile (MIDICIProfile profile, byte channel, [NullAllowed] out NSError outError);

	//	// -(BOOL)disableProfile:(MIDICIProfile * _Nonnull)profile onChannel:(MIDIChannelNumber)channel error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("disableProfile:onChannel:error:")]
	//	bool DisableProfile (MIDICIProfile profile, byte channel, [NullAllowed] out NSError outError);

	//	// @property (nonatomic) MIDICIProfileChangedBlock _Nullable profileChangedCallback;
	//	[NullAllowed, Export ("profileChangedCallback", ArgumentSemantic.Assign)]
	//	MIDICIProfileChangedBlock ProfileChangedCallback { get; set; }

	//	// -(void)hasProperty:(NSData * _Nonnull)inquiry onChannel:(MIDIChannelNumber)channel responseHandler:(MIDICIPropertyResponseBlock _Nonnull)handler;
	//	[Export ("hasProperty:onChannel:responseHandler:")]
	//	void HasProperty (NSData inquiry, byte channel, MIDICIPropertyResponseBlock handler);

	//	// -(void)getProperty:(NSData * _Nonnull)inquiry onChannel:(MIDIChannelNumber)channel responseHandler:(MIDICIPropertyResponseBlock _Nonnull)handler;
	//	[Export ("getProperty:onChannel:responseHandler:")]
	//	void GetProperty (NSData inquiry, byte channel, MIDICIPropertyResponseBlock handler);

	//	// -(void)setProperty:(NSData * _Nonnull)inquiry onChannel:(MIDIChannelNumber)channel responseHandler:(MIDICIPropertyResponseBlock _Nonnull)handler;
	//	[Export ("setProperty:onChannel:responseHandler:")]
	//	void SetProperty (NSData inquiry, byte channel, MIDICIPropertyResponseBlock handler);

	//	// @property (nonatomic) MIDICIPropertyChangedBlock _Nullable propertyChangedCallback;
	//	[NullAllowed, Export ("propertyChangedCallback", ArgumentSemantic.Assign)]
	//	MIDICIPropertyChangedBlock PropertyChangedCallback { get; set; }
	//}

	//// typedef void (^AudioUnitRemoteControlEventListener)(AudioUnitRemoteControlEvent);
	//delegate void AudioUnitRemoteControlEventListener (AudioUnitRemoteControlEvent arg0);

	//// typedef void (^AUParameterObserver)(AUParameterAddress, AUValue);
	//delegate void AUParameterObserver (ulong arg0, float arg1);

	//// typedef void (^AUParameterRecordingObserver)(NSInteger, const AURecordedParameterEvent * _Nonnull);
	//unsafe delegate void AUParameterRecordingObserver (nint arg0, AURecordedParameterEvent* arg1);

	//// typedef void (^AUParameterAutomationObserver)(NSInteger, const AUParameterAutomationEvent * _Nonnull);
	//unsafe delegate void AUParameterAutomationObserver (nint arg0, AUParameterAutomationEvent* arg1);

	//// @interface AUParameterNode : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface AUParameterNode
	//{
	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull keyPath;
	//	[Export ("keyPath")]
	//	string KeyPath { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull displayName;
	//	[Export ("displayName")]
	//	string DisplayName { get; }

	//	// -(NSString * _Nonnull)displayNameWithLength:(NSInteger)maximumLength;
	//	[Export ("displayNameWithLength:")]
	//	string DisplayNameWithLength (nint maximumLength);

	//	// -(AUParameterObserverToken _Nonnull)tokenByAddingParameterObserver:(AUParameterObserver _Nonnull)observer;
	//	[Export ("tokenByAddingParameterObserver:")]
	//	unsafe void* TokenByAddingParameterObserver (AUParameterObserver observer);

	//	// -(AUParameterObserverToken _Nonnull)tokenByAddingParameterRecordingObserver:(AUParameterRecordingObserver _Nonnull)observer;
	//	[Export ("tokenByAddingParameterRecordingObserver:")]
	//	unsafe void* TokenByAddingParameterRecordingObserver (AUParameterRecordingObserver observer);

	//	// -(AUParameterObserverToken _Nonnull)tokenByAddingParameterAutomationObserver:(AUParameterAutomationObserver _Nonnull)observer __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("tokenByAddingParameterAutomationObserver:")]
	//	unsafe void* TokenByAddingParameterAutomationObserver (AUParameterAutomationObserver observer);

	//	// -(void)removeParameterObserver:(AUParameterObserverToken _Nonnull)token;
	//	[Export ("removeParameterObserver:")]
	//	unsafe void RemoveParameterObserver (void* token);
	//}

	//// @interface AUParameterGroup : AUParameterNode <NSSecureCoding>
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(AUParameterNode))]
	//interface AUParameterGroup : INSSecureCoding
	//{
	//	// @property (readonly, nonatomic) NSArray<AUParameterNode *> * _Nonnull children;
	//	[Export ("children")]
	//	AUParameterNode[] Children { get; }

	//	// @property (readonly, nonatomic) NSArray<AUParameter *> * _Nonnull allParameters;
	//	[Export ("allParameters")]
	//	AUParameter[] AllParameters { get; }
	//}

	//// @interface AUParameterTree : AUParameterGroup <NSSecureCoding>
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(AUParameterGroup))]
	//interface AUParameterTree : INSSecureCoding
	//{
	//	// -(AUParameter * _Nullable)parameterWithAddress:(AUParameterAddress)address;
	//	[Export ("parameterWithAddress:")]
	//	[return: NullAllowed]
	//	AUParameter ParameterWithAddress (ulong address);

	//	// -(AUParameter * _Nullable)parameterWithID:(AudioUnitParameterID)paramID scope:(AudioUnitScope)scope element:(AudioUnitElement)element;
	//	[Export ("parameterWithID:scope:element:")]
	//	[return: NullAllowed]
	//	AUParameter ParameterWithID (uint paramID, uint scope, uint element);
	//}

	//// @interface AUParameter : AUParameterNode <NSSecureCoding>
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(AUParameterNode))]
	//interface AUParameter : INSSecureCoding
	//{
	//	// @property (readonly, nonatomic) AUValue minValue;
	//	[Export ("minValue")]
	//	float MinValue { get; }

	//	// @property (readonly, nonatomic) AUValue maxValue;
	//	[Export ("maxValue")]
	//	float MaxValue { get; }

	//	// @property (readonly, nonatomic) AudioUnitParameterUnit unit;
	//	[Export ("unit")]
	//	AudioUnitParameterUnit Unit { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable unitName;
	//	[NullAllowed, Export ("unitName")]
	//	string UnitName { get; }

	//	// @property (readonly, nonatomic) AudioUnitParameterOptions flags;
	//	[Export ("flags")]
	//	AudioUnitParameterOptions Flags { get; }

	//	// @property (readonly, nonatomic) AUParameterAddress address;
	//	[Export ("address")]
	//	ulong Address { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nullable valueStrings;
	//	[NullAllowed, Export ("valueStrings", ArgumentSemantic.Copy)]
	//	string[] ValueStrings { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSNumber *> * _Nullable dependentParameters;
	//	[NullAllowed, Export ("dependentParameters", ArgumentSemantic.Copy)]
	//	NSNumber[] DependentParameters { get; }

	//	// @property (nonatomic) AUValue value;
	//	[Export ("value")]
	//	float Value { get; set; }

	//	// -(void)setValue:(AUValue)value originator:(AUParameterObserverToken _Nullable)originator;
	//	[Export ("setValue:originator:")]
	//	unsafe void SetValue (float value, [NullAllowed] void* originator);

	//	// -(void)setValue:(AUValue)value originator:(AUParameterObserverToken _Nullable)originator atHostTime:(uint64_t)hostTime;
	//	[Export ("setValue:originator:atHostTime:")]
	//	unsafe void SetValue (float value, [NullAllowed] void* originator, ulong hostTime);

	//	// -(void)setValue:(AUValue)value originator:(AUParameterObserverToken _Nullable)originator atHostTime:(uint64_t)hostTime eventType:(AUParameterAutomationEventType)eventType __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("setValue:originator:atHostTime:eventType:")]
	//	unsafe void SetValue (float value, [NullAllowed] void* originator, ulong hostTime, AUParameterAutomationEventType eventType);

	//	// -(NSString * _Nonnull)stringFromValue:(const AUValue * _Nullable)value;
	//	[Export ("stringFromValue:")]
	//	unsafe string StringFromValue ([NullAllowed] float* value);

	//	// -(AUValue)valueFromString:(NSString * _Nonnull)string;
	//	[Export ("valueFromString:")]
	//	float ValueFromString (string @string);
	//}

	//// typedef AUAudioUnitStatus (^AURenderPullInputBlock)(AudioUnitRenderActionFlags * _Nonnull, const AudioTimeStamp * _Nonnull, AUAudioFrameCount, NSInteger, AudioBufferList * _Nonnull);
	//unsafe delegate int AURenderPullInputBlock (AudioUnitRenderActionFlags* arg0, AudioTimeStamp* arg1, uint arg2, nint arg3, AudioBufferList* arg4);

	//// typedef AUAudioUnitStatus (^AURenderBlock)(AudioUnitRenderActionFlags * _Nonnull, const AudioTimeStamp * _Nonnull, AUAudioFrameCount, NSInteger, AudioBufferList * _Nonnull, AURenderPullInputBlock _Nullable);
	//unsafe delegate int AURenderBlock (AudioUnitRenderActionFlags* arg0, AudioTimeStamp* arg1, uint arg2, nint arg3, AudioBufferList* arg4, [NullAllowed] AURenderPullInputBlock arg5);

	//// typedef void (^AURenderObserver)(AudioUnitRenderActionFlags, const AudioTimeStamp * _Nonnull, AUAudioFrameCount, NSInteger);
	//unsafe delegate void AURenderObserver (AudioUnitRenderActionFlags arg0, AudioTimeStamp* arg1, uint arg2, nint arg3);

	//// typedef void (^AUScheduleParameterBlock)(AUEventSampleTime, AUAudioFrameCount, AUParameterAddress, AUValue);
	//delegate void AUScheduleParameterBlock (long arg0, uint arg1, ulong arg2, float arg3);

	//// typedef void (^AUScheduleMIDIEventBlock)(AUEventSampleTime, uint8_t, NSInteger, const uint8_t * _Nonnull);
	//unsafe delegate void AUScheduleMIDIEventBlock (long arg0, byte arg1, nint arg2, byte* arg3);

	//// typedef OSStatus (^AUMIDIOutputEventBlock)(AUEventSampleTime, uint8_t, NSInteger, const uint8_t * _Nonnull);
	//unsafe delegate int AUMIDIOutputEventBlock (long arg0, byte arg1, nint arg2, byte* arg3);

	//// typedef BOOL (^AUHostMusicalContextBlock)(double * _Nullable, double * _Nullable, NSInteger * _Nullable, double * _Nullable, NSInteger * _Nullable, double * _Nullable);
	//unsafe delegate bool AUHostMusicalContextBlock ([NullAllowed] double* arg0, [NullAllowed] double* arg1, [NullAllowed] nint* arg2, [NullAllowed] double* arg3, [NullAllowed] nint* arg4, [NullAllowed] double* arg5);

	//// typedef void (^AUMIDICIProfileChangedBlock)(uint8_t, MIDIChannelNumber, MIDICIProfile * _Nonnull, BOOL);
	//delegate void AUMIDICIProfileChangedBlock (byte arg0, byte arg1, MIDICIProfile arg2, bool arg3);

	//// typedef BOOL (^AUHostTransportStateBlock)(AUHostTransportStateFlags * _Nullable, double * _Nullable, double * _Nullable, double * _Nullable);
	//unsafe delegate bool AUHostTransportStateBlock ([NullAllowed] AUHostTransportStateFlags* arg0, [NullAllowed] double* arg1, [NullAllowed] double* arg2, [NullAllowed] double* arg3);

	//// @interface AUAudioUnit : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AUAudioUnit
	//{
	//	// -(instancetype _Nullable)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((objc_designated_initializer));
	//	[Export ("initWithComponentDescription:options:error:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AudioComponentDescription componentDescription, AudioComponentInstantiationOptions options, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initWithComponentDescription:(AudioComponentDescription)componentDescription error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initWithComponentDescription:error:")]
	//	IntPtr Constructor (AudioComponentDescription componentDescription, [NullAllowed] out NSError outError);

	//	// +(void)instantiateWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options completionHandler:(void (^ _Nonnull)(AUAudioUnit * _Nullable, NSError * _Nullable))completionHandler;
	//	[Static]
	//	[Export ("instantiateWithComponentDescription:options:completionHandler:")]
	//	void InstantiateWithComponentDescription (AudioComponentDescription componentDescription, AudioComponentInstantiationOptions options, Action<AUAudioUnit, NSError> completionHandler);

	//	// @property (readonly, nonatomic) AudioComponentDescription componentDescription;
	//	[Export ("componentDescription")]
	//	AudioComponentDescription ComponentDescription { get; }

	//	// @property (readonly, nonatomic) AudioComponent _Nonnull component;
	//	[Export ("component")]
	//	unsafe AudioComponent* Component { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable componentName;
	//	[NullAllowed, Export ("componentName")]
	//	string ComponentName { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable audioUnitName;
	//	[NullAllowed, Export ("audioUnitName")]
	//	string AudioUnitName { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable manufacturerName;
	//	[NullAllowed, Export ("manufacturerName")]
	//	string ManufacturerName { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable audioUnitShortName __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("audioUnitShortName")]
	//	string AudioUnitShortName { get; }

	//	// @property (readonly, nonatomic) uint32_t componentVersion;
	//	[Export ("componentVersion")]
	//	uint ComponentVersion { get; }

	//	// -(BOOL)allocateRenderResourcesAndReturnError:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("allocateRenderResourcesAndReturnError:")]
	//	bool AllocateRenderResourcesAndReturnError ([NullAllowed] out NSError outError);

	//	// -(void)deallocateRenderResources;
	//	[Export ("deallocateRenderResources")]
	//	void DeallocateRenderResources ();

	//	// @property (readonly, nonatomic) BOOL renderResourcesAllocated;
	//	[Export ("renderResourcesAllocated")]
	//	bool RenderResourcesAllocated { get; }

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();

	//	// @property (readonly, nonatomic) AUAudioUnitBusArray * _Nonnull inputBusses;
	//	[Export ("inputBusses")]
	//	AUAudioUnitBusArray InputBusses { get; }

	//	// @property (readonly, nonatomic) AUAudioUnitBusArray * _Nonnull outputBusses;
	//	[Export ("outputBusses")]
	//	AUAudioUnitBusArray OutputBusses { get; }

	//	// @property (readonly, nonatomic) AURenderBlock _Nonnull renderBlock;
	//	[Export ("renderBlock")]
	//	AURenderBlock RenderBlock { get; }

	//	// @property (readonly, nonatomic) AUScheduleParameterBlock _Nonnull scheduleParameterBlock;
	//	[Export ("scheduleParameterBlock")]
	//	AUScheduleParameterBlock ScheduleParameterBlock { get; }

	//	// -(NSInteger)tokenByAddingRenderObserver:(AURenderObserver _Nonnull)observer;
	//	[Export ("tokenByAddingRenderObserver:")]
	//	nint TokenByAddingRenderObserver (AURenderObserver observer);

	//	// -(void)removeRenderObserver:(NSInteger)token;
	//	[Export ("removeRenderObserver:")]
	//	void RemoveRenderObserver (nint token);

	//	// @property (nonatomic) AUAudioFrameCount maximumFramesToRender;
	//	[Export ("maximumFramesToRender")]
	//	uint MaximumFramesToRender { get; set; }

	//	// @property (readonly, nonatomic) AUParameterTree * _Nullable parameterTree;
	//	[NullAllowed, Export ("parameterTree")]
	//	AUParameterTree ParameterTree { get; }

	//	// -(NSArray<NSNumber *> * _Nonnull)parametersForOverviewWithCount:(NSInteger)count;
	//	[Export ("parametersForOverviewWithCount:")]
	//	NSNumber[] ParametersForOverviewWithCount (nint count);

	//	// @property (readonly, nonatomic) BOOL allParameterValues;
	//	[Export ("allParameterValues")]
	//	bool AllParameterValues { get; }

	//	// @property (readonly, getter = isMusicDeviceOrEffect, nonatomic) BOOL musicDeviceOrEffect;
	//	[Export ("musicDeviceOrEffect")]
	//	bool MusicDeviceOrEffect { [Bind ("isMusicDeviceOrEffect")] get; }

	//	// @property (readonly, nonatomic) NSInteger virtualMIDICableCount;
	//	[Export ("virtualMIDICableCount")]
	//	nint VirtualMIDICableCount { get; }

	//	// @property (readonly, nonatomic) AUScheduleMIDIEventBlock _Nullable scheduleMIDIEventBlock;
	//	[NullAllowed, Export ("scheduleMIDIEventBlock")]
	//	AUScheduleMIDIEventBlock ScheduleMIDIEventBlock { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull MIDIOutputNames __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("MIDIOutputNames", ArgumentSemantic.Copy)]
	//	string[] MIDIOutputNames { get; }

	//	// @property (readonly, nonatomic) BOOL providesUserInterface __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("providesUserInterface")]
	//	bool ProvidesUserInterface { get; }

	//	// @property (copy, nonatomic) AUMIDIOutputEventBlock _Nullable MIDIOutputEventBlock __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("MIDIOutputEventBlock", ArgumentSemantic.Copy)]
	//	AUMIDIOutputEventBlock MIDIOutputEventBlock { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable fullState;
	//	[NullAllowed, Export ("fullState", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> FullState { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable fullStateForDocument;
	//	[NullAllowed, Export ("fullStateForDocument", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> FullStateForDocument { get; set; }

	//	// @property (readonly, copy, nonatomic) NSArray<AUAudioUnitPreset *> * _Nullable factoryPresets;
	//	[NullAllowed, Export ("factoryPresets", ArgumentSemantic.Copy)]
	//	AUAudioUnitPreset[] FactoryPresets { get; }

	//	// @property (retain, nonatomic) AUAudioUnitPreset * _Nullable currentPreset;
	//	[NullAllowed, Export ("currentPreset", ArgumentSemantic.Retain)]
	//	AUAudioUnitPreset CurrentPreset { get; set; }

	//	// @property (readonly, nonatomic) NSTimeInterval latency;
	//	[Export ("latency")]
	//	double Latency { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval tailTime;
	//	[Export ("tailTime")]
	//	double TailTime { get; }

	//	// @property (nonatomic) NSInteger renderQuality;
	//	[Export ("renderQuality")]
	//	nint RenderQuality { get; set; }

	//	// @property (nonatomic) BOOL shouldBypassEffect;
	//	[Export ("shouldBypassEffect")]
	//	bool ShouldBypassEffect { get; set; }

	//	// @property (readonly, nonatomic) BOOL canProcessInPlace;
	//	[Export ("canProcessInPlace")]
	//	bool CanProcessInPlace { get; }

	//	// @property (getter = isRenderingOffline, nonatomic) BOOL renderingOffline;
	//	[Export ("renderingOffline")]
	//	bool RenderingOffline { [Bind ("isRenderingOffline")] get; set; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSNumber *> * _Nullable channelCapabilities;
	//	[NullAllowed, Export ("channelCapabilities", ArgumentSemantic.Copy)]
	//	NSNumber[] ChannelCapabilities { get; }

	//	// @property (copy, nonatomic) AUHostMusicalContextBlock _Nullable musicalContextBlock;
	//	[NullAllowed, Export ("musicalContextBlock", ArgumentSemantic.Copy)]
	//	AUHostMusicalContextBlock MusicalContextBlock { get; set; }

	//	// @property (copy, nonatomic) AUHostTransportStateBlock _Nullable transportStateBlock;
	//	[NullAllowed, Export ("transportStateBlock", ArgumentSemantic.Copy)]
	//	AUHostTransportStateBlock TransportStateBlock { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable contextName;
	//	[NullAllowed, Export ("contextName")]
	//	string ContextName { get; set; }

	//	// @property (readonly, nonatomic) BOOL supportsMPE __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("supportsMPE")]
	//	bool SupportsMPE { get; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nullable channelMap __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[NullAllowed, Export ("channelMap", ArgumentSemantic.Copy)]
	//	NSNumber[] ChannelMap { get; set; }

	//	// -(MIDICIProfileState * _Nonnull)profileStateForCable:(uint8_t)cable channel:(MIDIChannelNumber)channel __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoWatch, NoTV, Mac (10,14), iOS (12,0)]
	//	[Export ("profileStateForCable:channel:")]
	//	MIDICIProfileState ProfileStateForCable (byte cable, byte channel);

	//	// -(BOOL)enableProfile:(MIDICIProfile * _Nonnull)profile cable:(uint8_t)cable onChannel:(MIDIChannelNumber)channel error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoWatch, NoTV, Mac (10,14), iOS (12,0)]
	//	[Export ("enableProfile:cable:onChannel:error:")]
	//	bool EnableProfile (MIDICIProfile profile, byte cable, byte channel, [NullAllowed] out NSError outError);

	//	// -(BOOL)disableProfile:(MIDICIProfile * _Nonnull)profile cable:(uint8_t)cable onChannel:(MIDIChannelNumber)channel error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoWatch, NoTV, Mac (10,14), iOS (12,0)]
	//	[Export ("disableProfile:cable:onChannel:error:")]
	//	bool DisableProfile (MIDICIProfile profile, byte cable, byte channel, [NullAllowed] out NSError outError);

	//	// @property (nonatomic) AUMIDICIProfileChangedBlock _Nullable profileChangedBlock __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoWatch, NoTV, Mac (10, 14), iOS (12, 0)]
	//	[NullAllowed, Export ("profileChangedBlock", ArgumentSemantic.Assign)]
	//	AUMIDICIProfileChangedBlock ProfileChangedBlock { get; set; }
	//}

	//// typedef void (^AUInputHandler)(AudioUnitRenderActionFlags * _Nonnull, const AudioTimeStamp * _Nonnull, AUAudioFrameCount, NSInteger);
	//unsafe delegate void AUInputHandler (AudioUnitRenderActionFlags* arg0, AudioTimeStamp* arg1, uint arg2, nint arg3);

	//// @interface AUAudioInputOutputUnit (AUAudioUnit)
	//[Category]
	//[BaseType (typeof(AUAudioUnit))]
	//interface AUAudioUnit_AUAudioInputOutputUnit
	//{
	//	// @property (readonly, nonatomic) BOOL canPerformInput;
	//	[Export ("canPerformInput")]
	//	bool CanPerformInput { get; }

	//	// @property (readonly, nonatomic) BOOL canPerformOutput;
	//	[Export ("canPerformOutput")]
	//	bool CanPerformOutput { get; }

	//	// @property (getter = isInputEnabled, nonatomic) BOOL inputEnabled;
	//	[Export ("inputEnabled")]
	//	bool InputEnabled { [Bind ("isInputEnabled")] get; set; }

	//	// @property (getter = isOutputEnabled, nonatomic) BOOL outputEnabled;
	//	[Export ("outputEnabled")]
	//	bool OutputEnabled { [Bind ("isOutputEnabled")] get; set; }

	//	// @property (copy, nonatomic) AURenderPullInputBlock _Nullable outputProvider;
	//	[NullAllowed, Export ("outputProvider", ArgumentSemantic.Copy)]
	//	AURenderPullInputBlock OutputProvider { get; set; }

	//	// @property (copy, nonatomic) AUInputHandler _Nullable inputHandler;
	//	[NullAllowed, Export ("inputHandler", ArgumentSemantic.Copy)]
	//	AUInputHandler InputHandler { get; set; }

	//	// @property (readonly, getter = isRunning, nonatomic) BOOL running __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("running")]
	//	bool Running { [Bind ("isRunning")] get; }

	//	// -(BOOL)startHardwareAndReturnError:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("startHardwareAndReturnError:")]
	//	bool StartHardwareAndReturnError ([NullAllowed] out NSError outError);

	//	// -(void)stopHardware;
	//	[Export ("stopHardware")]
	//	void StopHardware ();
	//}

	//// @interface AUAudioUnitBusArray : NSObject <NSFastEnumeration>
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AUAudioUnitBusArray : INSFastEnumeration
	//{
	//	// -(instancetype _Nonnull)initWithAudioUnit:(AUAudioUnit * _Nonnull)owner busType:(AUAudioUnitBusType)busType busses:(NSArray<AUAudioUnitBus *> * _Nonnull)busArray __attribute__((objc_designated_initializer));
	//	[Export ("initWithAudioUnit:busType:busses:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AUAudioUnit owner, AUAudioUnitBusType busType, AUAudioUnitBus[] busArray);

	//	// -(instancetype _Nonnull)initWithAudioUnit:(AUAudioUnit * _Nonnull)owner busType:(AUAudioUnitBusType)busType;
	//	[Export ("initWithAudioUnit:busType:")]
	//	IntPtr Constructor (AUAudioUnit owner, AUAudioUnitBusType busType);

	//	// @property (readonly, nonatomic) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// -(AUAudioUnitBus * _Nonnull)objectAtIndexedSubscript:(NSUInteger)index;
	//	[Export ("objectAtIndexedSubscript:")]
	//	AUAudioUnitBus ObjectAtIndexedSubscript (nuint index);

	//	// @property (readonly, getter = isCountChangeable, nonatomic) BOOL countChangeable;
	//	[Export ("countChangeable")]
	//	bool CountChangeable { [Bind ("isCountChangeable")] get; }

	//	// -(BOOL)setBusCount:(NSUInteger)count error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("setBusCount:error:")]
	//	bool SetBusCount (nuint count, [NullAllowed] out NSError outError);

	//	// -(void)addObserverToAllBusses:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
	//	[Export ("addObserverToAllBusses:forKeyPath:options:context:")]
	//	unsafe void AddObserverToAllBusses (NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

	//	// -(void)removeObserverFromAllBusses:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context;
	//	[Export ("removeObserverFromAllBusses:forKeyPath:context:")]
	//	unsafe void RemoveObserverFromAllBusses (NSObject observer, string keyPath, [NullAllowed] void* context);

	//	// @property (readonly, assign, nonatomic) AUAudioUnit * _Nonnull ownerAudioUnit;
	//	[Export ("ownerAudioUnit", ArgumentSemantic.Assign)]
	//	AUAudioUnit OwnerAudioUnit { get; }

	//	// @property (readonly, nonatomic) AUAudioUnitBusType busType;
	//	[Export ("busType")]
	//	AUAudioUnitBusType BusType { get; }
	//}

	//// @interface AUAudioUnitBus : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface AUAudioUnitBus
	//{
	//	// @property (readonly, nonatomic) AVAudioFormat * _Nonnull format;
	//	[Export ("format")]
	//	AVAudioFormat Format { get; }

	//	// -(BOOL)setFormat:(AVAudioFormat * _Nonnull)format error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("setFormat:error:")]
	//	bool SetFormat (AVAudioFormat format, [NullAllowed] out NSError outError);

	//	// @property (nonatomic) BOOL shouldAllocateBuffer __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("shouldAllocateBuffer")]
	//	bool ShouldAllocateBuffer { get; set; }

	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable name;
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }

	//	// @property (readonly, nonatomic) NSUInteger index;
	//	[Export ("index")]
	//	nuint Index { get; }

	//	// @property (readonly, nonatomic) AUAudioUnitBusType busType;
	//	[Export ("busType")]
	//	AUAudioUnitBusType BusType { get; }

	//	// @property (readonly, assign, nonatomic) AUAudioUnit * _Nonnull ownerAudioUnit;
	//	[Export ("ownerAudioUnit", ArgumentSemantic.Assign)]
	//	AUAudioUnit OwnerAudioUnit { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSNumber *> * _Nullable supportedChannelLayoutTags;
	//	[NullAllowed, Export ("supportedChannelLayoutTags", ArgumentSemantic.Copy)]
	//	NSNumber[] SupportedChannelLayoutTags { get; }

	//	// @property (nonatomic) NSTimeInterval contextPresentationLatency;
	//	[Export ("contextPresentationLatency")]
	//	double ContextPresentationLatency { get; set; }
	//}

	//// @interface AUAudioUnitPreset : NSObject <NSSecureCoding>
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface AUAudioUnitPreset : INSSecureCoding
	//{
	//	// @property (nonatomic) NSInteger number;
	//	[Export ("number")]
	//	nint Number { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }
	//}

	//// typedef AUAudioUnitStatus (^AUInternalRenderBlock)(AudioUnitRenderActionFlags * _Nonnull, const AudioTimeStamp * _Nonnull, AUAudioFrameCount, NSInteger, AudioBufferList * _Nonnull, const AURenderEvent * _Nullable, AURenderPullInputBlock _Nullable);
	//unsafe delegate int AUInternalRenderBlock (AudioUnitRenderActionFlags* arg0, AudioTimeStamp* arg1, uint arg2, nint arg3, AudioBufferList* arg4, [NullAllowed] AURenderEvent* arg5, [NullAllowed] AURenderPullInputBlock arg6);

	//// @interface AUAudioUnitImplementation (AUAudioUnit)
	//[Category]
	//[BaseType (typeof(AUAudioUnit))]
	//interface AUAudioUnit_AUAudioUnitImplementation
	//{
	//	// +(void)registerSubclass:(Class _Nonnull)cls asComponentDescription:(AudioComponentDescription)componentDescription name:(NSString * _Nonnull)name version:(UInt32)version;
	//	[Static]
	//	[Export ("registerSubclass:asComponentDescription:name:version:")]
	//	void RegisterSubclass (Class cls, AudioComponentDescription componentDescription, string name, uint version);

	//	// @property (readonly, nonatomic) AUInternalRenderBlock _Nonnull internalRenderBlock;
	//	[Export ("internalRenderBlock")]
	//	AUInternalRenderBlock InternalRenderBlock { get; }

	//	// @property (nonatomic) NSInteger MIDIOutputBufferSizeHint __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("MIDIOutputBufferSizeHint")]
	//	nint MIDIOutputBufferSizeHint { get; set; }

	//	// -(BOOL)shouldChangeToFormat:(AVAudioFormat * _Nonnull)format forBus:(AUAudioUnitBus * _Nonnull)bus;
	//	[Export ("shouldChangeToFormat:forBus:")]
	//	bool ShouldChangeToFormat (AVAudioFormat format, AUAudioUnitBus bus);

	//	// -(void)setRenderResourcesAllocated:(BOOL)flag;
	//	[Export ("setRenderResourcesAllocated:")]
	//	void SetRenderResourcesAllocated (bool flag);
	//}

	//// @interface AUAudioUnitImplementation (AUAudioUnitBus)
	//[Category]
	//[BaseType (typeof(AUAudioUnitBus))]
	//interface AUAudioUnitBus_AUAudioUnitImplementation
	//{
	//	// -(instancetype _Nullable)initWithFormat:(AVAudioFormat * _Nonnull)format error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initWithFormat:error:")]
	//	IntPtr Constructor (AVAudioFormat format, [NullAllowed] out NSError outError);

	//	// @property (retain, nonatomic) NSArray<NSNumber *> * _Nullable supportedChannelCounts;
	//	[NullAllowed, Export ("supportedChannelCounts", ArgumentSemantic.Retain)]
	//	NSNumber[] SupportedChannelCounts { get; set; }

	//	// @property (nonatomic) AUAudioChannelCount maximumChannelCount;
	//	[Export ("maximumChannelCount")]
	//	uint MaximumChannelCount { get; set; }
	//}

	//// @interface AUAudioUnitBusImplementation (AUAudioUnitBusArray)
	//[Category]
	//[BaseType (typeof(AUAudioUnitBusArray))]
	//interface AUAudioUnitBusArray_AUAudioUnitBusImplementation
	//{
	//	// -(void)replaceBusses:(NSArray<AUAudioUnitBus *> * _Nonnull)busArray;
	//	[Export ("replaceBusses:")]
	//	void ReplaceBusses (AUAudioUnitBus[] busArray);
	//}

	//// @interface Factory (AUParameterTree)
	//[Category]
	//[BaseType (typeof(AUParameterTree))]
	//interface AUParameterTree_Factory
	//{
	//	// +(AUParameter * _Nonnull)createParameterWithIdentifier:(NSString * _Nonnull)identifier name:(NSString * _Nonnull)name address:(AUParameterAddress)address min:(AUValue)min max:(AUValue)max unit:(AudioUnitParameterUnit)unit unitName:(NSString * _Nullable)unitName flags:(AudioUnitParameterOptions)flags valueStrings:(NSArray<NSString *> * _Nullable)valueStrings dependentParameters:(NSArray<NSNumber *> * _Nullable)dependentParameters;
	//	[Static]
	//	[Export ("createParameterWithIdentifier:name:address:min:max:unit:unitName:flags:valueStrings:dependentParameters:")]
	//	AUParameter CreateParameterWithIdentifier (string identifier, string name, ulong address, float min, float max, AudioUnitParameterUnit unit, [NullAllowed] string unitName, AudioUnitParameterOptions flags, [NullAllowed] string[] valueStrings, [NullAllowed] NSNumber[] dependentParameters);

	//	// +(AUParameterGroup * _Nonnull)createGroupWithIdentifier:(NSString * _Nonnull)identifier name:(NSString * _Nonnull)name children:(NSArray<AUParameterNode *> * _Nonnull)children;
	//	[Static]
	//	[Export ("createGroupWithIdentifier:name:children:")]
	//	AUParameterGroup CreateGroupWithIdentifier (string identifier, string name, AUParameterNode[] children);

	//	// +(AUParameterGroup * _Nonnull)createGroupTemplate:(NSArray<AUParameterNode *> * _Nonnull)children;
	//	[Static]
	//	[Export ("createGroupTemplate:")]
	//	AUParameterGroup CreateGroupTemplate (AUParameterNode[] children);

	//	// +(AUParameterGroup * _Nonnull)createGroupFromTemplate:(AUParameterGroup * _Nonnull)templateGroup identifier:(NSString * _Nonnull)identifier name:(NSString * _Nonnull)name addressOffset:(AUParameterAddress)addressOffset;
	//	[Static]
	//	[Export ("createGroupFromTemplate:identifier:name:addressOffset:")]
	//	AUParameterGroup CreateGroupFromTemplate (AUParameterGroup templateGroup, string identifier, string name, ulong addressOffset);

	//	// +(AUParameterTree * _Nonnull)createTreeWithChildren:(NSArray<AUParameterNode *> * _Nonnull)children;
	//	[Static]
	//	[Export ("createTreeWithChildren:")]
	//	AUParameterTree CreateTreeWithChildren (AUParameterNode[] children);
	//}

	//// typedef void (^AUImplementorValueObserver)(AUParameter * _Nonnull, AUValue);
	//delegate void AUImplementorValueObserver (AUParameter arg0, float arg1);

	//// typedef AUValue (^AUImplementorValueProvider)(AUParameter * _Nonnull);
	//delegate float AUImplementorValueProvider (AUParameter arg0);

	//// typedef NSString * _Nonnull (^AUImplementorStringFromValueCallback)(AUParameter * _Nonnull, const AUValue * _Nullable);
	//unsafe delegate string AUImplementorStringFromValueCallback (AUParameter arg0, [NullAllowed] float* arg1);

	//// typedef AUValue (^AUImplementorValueFromStringCallback)(AUParameter * _Nonnull, NSString * _Nonnull);
	//delegate float AUImplementorValueFromStringCallback (AUParameter arg0, string arg1);

	//// typedef NSString * _Nonnull (^AUImplementorDisplayNameWithLengthCallback)(AUParameterNode * _Nonnull, NSInteger);
	//delegate string AUImplementorDisplayNameWithLengthCallback (AUParameterNode arg0, nint arg1);

	//// @interface AUParameterNodeImplementation (AUParameterNode)
	//[Category]
	//[BaseType (typeof(AUParameterNode))]
	//interface AUParameterNode_AUParameterNodeImplementation
	//{
	//	// @property (copy, nonatomic) AUImplementorValueObserver _Nonnull implementorValueObserver;
	//	[Export ("implementorValueObserver", ArgumentSemantic.Copy)]
	//	AUImplementorValueObserver ImplementorValueObserver { get; set; }

	//	// @property (copy, nonatomic) AUImplementorValueProvider _Nonnull implementorValueProvider;
	//	[Export ("implementorValueProvider", ArgumentSemantic.Copy)]
	//	AUImplementorValueProvider ImplementorValueProvider { get; set; }

	//	// @property (copy, nonatomic) AUImplementorStringFromValueCallback _Nonnull implementorStringFromValueCallback;
	//	[Export ("implementorStringFromValueCallback", ArgumentSemantic.Copy)]
	//	AUImplementorStringFromValueCallback ImplementorStringFromValueCallback { get; set; }

	//	// @property (copy, nonatomic) AUImplementorValueFromStringCallback _Nonnull implementorValueFromStringCallback;
	//	[Export ("implementorValueFromStringCallback", ArgumentSemantic.Copy)]
	//	AUImplementorValueFromStringCallback ImplementorValueFromStringCallback { get; set; }

	//	// @property (copy, nonatomic) AUImplementorDisplayNameWithLengthCallback _Nonnull implementorDisplayNameWithLengthCallback;
	//	[Export ("implementorDisplayNameWithLengthCallback", ArgumentSemantic.Copy)]
	//	AUImplementorDisplayNameWithLengthCallback ImplementorDisplayNameWithLengthCallback { get; set; }
	//}

	//// @interface AUAudioUnitV2Bridge : AUAudioUnit
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(AUAudioUnit))]
	//interface AUAudioUnitV2Bridge
	//{
	//}

	//// @protocol AUAudioUnitFactory <NSExtensionRequestHandling>
	//[Protocol, Model]
	//interface AUAudioUnitFactory : INSExtensionRequestHandling
	//{
	//	// @required -(AUAudioUnit * _Nullable)createAudioUnitWithComponentDescription:(AudioComponentDescription)desc error:(NSError * _Nullable * _Nullable)error;
	//	[Abstract]
	//	[Export ("createAudioUnitWithComponentDescription:error:")]
	//	[return: NullAllowed]
	//	AUAudioUnit Error (AudioComponentDescription desc, [NullAllowed] out NSError error);
	//}

	//// typedef void (^AudioQueueOutputCallbackBlock)(AudioQueueRef _Nonnull, AudioQueueBufferRef _Nonnull);
	//unsafe delegate void AudioQueueOutputCallbackBlock (AudioQueueRef* arg0, AudioQueueBufferRef* arg1);

	//// typedef void (^AudioQueueInputCallbackBlock)(AudioQueueRef _Nonnull, AudioQueueBufferRef _Nonnull, const AudioTimeStamp * _Nonnull, UInt32, const AudioStreamPacketDescription * _Nullable);
	//unsafe delegate void AudioQueueInputCallbackBlock (AudioQueueRef* arg0, AudioQueueBufferRef* arg1, AudioTimeStamp* arg2, uint arg3, [NullAllowed] AudioStreamPacketDescription* arg4);

	//// @interface IOSurface : NSObject <NSSecureCoding>
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface IOSurface : INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithProperties:(NSDictionary<IOSurfacePropertyKey,id> * _Nonnull)properties;
	//	[Export ("initWithProperties:")]
	//	IntPtr Constructor (NSDictionary<NSString, NSObject> properties);

	//	// -(kern_return_t)lockWithOptions:(IOSurfaceLockOptions)options seed:(uint32_t * _Nullable)seed;
	//	[Export ("lockWithOptions:seed:")]
	//	unsafe int LockWithOptions (IOSurfaceLockOptions options, [NullAllowed] uint* seed);

	//	// -(kern_return_t)unlockWithOptions:(IOSurfaceLockOptions)options seed:(uint32_t * _Nullable)seed;
	//	[Export ("unlockWithOptions:seed:")]
	//	unsafe int UnlockWithOptions (IOSurfaceLockOptions options, [NullAllowed] uint* seed);

	//	// @property (readonly) NSInteger allocationSize;
	//	[Export ("allocationSize")]
	//	nint AllocationSize { get; }

	//	// @property (readonly) NSInteger width;
	//	[Export ("width")]
	//	nint Width { get; }

	//	// @property (readonly) NSInteger height;
	//	[Export ("height")]
	//	nint Height { get; }

	//	// @property (readonly) void * _Nonnull baseAddress __attribute__((objc_returns_inner_pointer));
	//	[Export ("baseAddress")]
	//	unsafe void* BaseAddress { get; }

	//	// @property (readonly) OSType pixelFormat;
	//	[Export ("pixelFormat")]
	//	uint PixelFormat { get; }

	//	// @property (readonly) NSInteger bytesPerRow;
	//	[Export ("bytesPerRow")]
	//	nint BytesPerRow { get; }

	//	// @property (readonly) NSInteger bytesPerElement;
	//	[Export ("bytesPerElement")]
	//	nint BytesPerElement { get; }

	//	// @property (readonly) NSInteger elementWidth;
	//	[Export ("elementWidth")]
	//	nint ElementWidth { get; }

	//	// @property (readonly) NSInteger elementHeight;
	//	[Export ("elementHeight")]
	//	nint ElementHeight { get; }

	//	// @property (readonly) uint32_t seed;
	//	[Export ("seed")]
	//	uint Seed { get; }

	//	// @property (readonly) NSUInteger planeCount;
	//	[Export ("planeCount")]
	//	nuint PlaneCount { get; }

	//	// -(NSInteger)widthOfPlaneAtIndex:(NSUInteger)planeIndex;
	//	[Export ("widthOfPlaneAtIndex:")]
	//	nint WidthOfPlaneAtIndex (nuint planeIndex);

	//	// -(NSInteger)heightOfPlaneAtIndex:(NSUInteger)planeIndex;
	//	[Export ("heightOfPlaneAtIndex:")]
	//	nint HeightOfPlaneAtIndex (nuint planeIndex);

	//	// -(NSInteger)bytesPerRowOfPlaneAtIndex:(NSUInteger)planeIndex;
	//	[Export ("bytesPerRowOfPlaneAtIndex:")]
	//	nint BytesPerRowOfPlaneAtIndex (nuint planeIndex);

	//	// -(NSInteger)bytesPerElementOfPlaneAtIndex:(NSUInteger)planeIndex;
	//	[Export ("bytesPerElementOfPlaneAtIndex:")]
	//	nint BytesPerElementOfPlaneAtIndex (nuint planeIndex);

	//	// -(NSInteger)elementWidthOfPlaneAtIndex:(NSUInteger)planeIndex;
	//	[Export ("elementWidthOfPlaneAtIndex:")]
	//	nint ElementWidthOfPlaneAtIndex (nuint planeIndex);

	//	// -(NSInteger)elementHeightOfPlaneAtIndex:(NSUInteger)planeIndex;
	//	[Export ("elementHeightOfPlaneAtIndex:")]
	//	nint ElementHeightOfPlaneAtIndex (nuint planeIndex);

	//	// -(void * _Nonnull)baseAddressOfPlaneAtIndex:(NSUInteger)planeIndex __attribute__((objc_returns_inner_pointer));
	//	[Export ("baseAddressOfPlaneAtIndex:")]
	//	unsafe void* BaseAddressOfPlaneAtIndex (nuint planeIndex);

	//	// -(void)setAttachment:(id _Nonnull)anObject forKey:(NSString * _Nonnull)key;
	//	[Export ("setAttachment:forKey:")]
	//	void SetAttachment (NSObject anObject, string key);

	//	// -(id _Nullable)attachmentForKey:(NSString * _Nonnull)key;
	//	[Export ("attachmentForKey:")]
	//	[return: NullAllowed]
	//	NSObject AttachmentForKey (string key);

	//	// -(void)removeAttachmentForKey:(NSString * _Nonnull)key;
	//	[Export ("removeAttachmentForKey:")]
	//	void RemoveAttachmentForKey (string key);

	//	// -(NSDictionary<NSString *,id> * _Nullable)allAttachments;
	//	// -(void)setAllAttachments:(NSDictionary<NSString *,id> * _Nonnull)dict;
	//	[NullAllowed, Export ("allAttachments")]
	//	[Verify (MethodToProperty)]
	//	NSDictionary<NSString, NSObject> AllAttachments { get; set; }

	//	// -(void)removeAllAttachments;
	//	[Export ("removeAllAttachments")]
	//	void RemoveAllAttachments ();

	//	// @property (readonly, getter = isInUse) BOOL inUse;
	//	[Export ("inUse")]
	//	bool InUse { [Bind ("isInUse")] get; }

	//	// -(void)incrementUseCount;
	//	[Export ("incrementUseCount")]
	//	void IncrementUseCount ();

	//	// -(void)decrementUseCount;
	//	[Export ("decrementUseCount")]
	//	void DecrementUseCount ();

	//	// @property (readonly) int32_t localUseCount;
	//	[Export ("localUseCount")]
	//	int LocalUseCount { get; }

	//	// @property (readonly) BOOL allowsPixelSizeCasting;
	//	[Export ("allowsPixelSizeCasting")]
	//	bool AllowsPixelSizeCasting { get; }

	//	// -(kern_return_t)setPurgeable:(IOSurfacePurgeabilityState)newState oldState:(IOSurfacePurgeabilityState * _Nullable)oldState __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("setPurgeable:oldState:")]
	//	unsafe int SetPurgeable (IOSurfacePurgeabilityState newState, [NullAllowed] IOSurfacePurgeabilityState* oldState);
	//}

	//// @interface EAGLSharegroup : NSObject
	//[BaseType (typeof(NSObject))]
	//interface EAGLSharegroup
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable debugLabel __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("debugLabel")]
	//	string DebugLabel { get; set; }
	//}

	//// @interface EAGLContext : NSObject
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 2, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface EAGLContext
	//{
	//	// -(instancetype _Nullable)initWithAPI:(EAGLRenderingAPI)api;
	//	[Export ("initWithAPI:")]
	//	IntPtr Constructor (EAGLRenderingAPI api);

	//	// -(instancetype _Nullable)initWithAPI:(EAGLRenderingAPI)api sharegroup:(EAGLSharegroup * _Nonnull)sharegroup __attribute__((objc_designated_initializer));
	//	[Export ("initWithAPI:sharegroup:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (EAGLRenderingAPI api, EAGLSharegroup sharegroup);

	//	// +(BOOL)setCurrentContext:(EAGLContext * _Nullable)context;
	//	[Static]
	//	[Export ("setCurrentContext:")]
	//	bool SetCurrentContext ([NullAllowed] EAGLContext context);

	//	// +(EAGLContext * _Nullable)currentContext;
	//	[Static]
	//	[NullAllowed, Export ("currentContext")]
	//	[Verify (MethodToProperty)]
	//	EAGLContext CurrentContext { get; }

	//	// @property (readonly) EAGLRenderingAPI API;
	//	[Export ("API")]
	//	EAGLRenderingAPI API { get; }

	//	// @property (readonly) EAGLSharegroup * _Nonnull sharegroup;
	//	[Export ("sharegroup")]
	//	EAGLSharegroup Sharegroup { get; }

	//	// @property (copy, nonatomic) NSString * _Nullable debugLabel __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("debugLabel")]
	//	string DebugLabel { get; set; }

	//	// @property (getter = isMultiThreaded, nonatomic) BOOL multiThreaded __attribute__((availability(ios, introduced=7.1)));
	//	[iOS (7, 1)]
	//	[Export ("multiThreaded")]
	//	bool MultiThreaded { [Bind ("isMultiThreaded")] get; set; }
	//}

	//// @protocol EAGLDrawable
	//[Protocol, Model]
	//interface EAGLDrawable
	//{
	//	// @required @property (copy) NSDictionary<NSString *,id> * _Nullable drawableProperties;
	//	[Abstract]
	//	[NullAllowed, Export ("drawableProperties", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> DrawableProperties { get; set; }
	//}

	//// @interface EAGLContextDrawableAdditions (EAGLContext)
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 2, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Category]
	//[BaseType (typeof(EAGLContext))]
	//interface EAGLContext_EAGLContextDrawableAdditions
	//{
	//	// -(BOOL)renderbufferStorage:(NSUInteger)target fromDrawable:(id<EAGLDrawable> _Nullable)drawable;
	//	[Export ("renderbufferStorage:fromDrawable:")]
	//	bool RenderbufferStorage (nuint target, [NullAllowed] EAGLDrawable drawable);

	//	// -(BOOL)presentRenderbuffer:(NSUInteger)target;
	//	[Export ("presentRenderbuffer:")]
	//	bool PresentRenderbuffer (nuint target);

	//	// -(BOOL)presentRenderbuffer:(NSUInteger)target atTime:(CFTimeInterval)presentationTime;
	//	[Export ("presentRenderbuffer:atTime:")]
	//	bool PresentRenderbuffer (nuint target, double presentationTime);

	//	// -(BOOL)presentRenderbuffer:(NSUInteger)target afterMinimumDuration:(CFTimeInterval)duration;
	//	[Export ("presentRenderbuffer:afterMinimumDuration:")]
	//	bool PresentRenderbuffer (nuint target, double duration);
	//}

	//// @interface IOSurface (EAGLContext)
	//[Category]
	//[BaseType (typeof(EAGLContext))]
	//interface EAGLContext_IOSurface
	//{
	//	// -(BOOL)texImageIOSurface:(IOSurfaceRef _Nonnull)ioSurface target:(NSUInteger)target internalFormat:(NSUInteger)internalFormat width:(uint32_t)width height:(uint32_t)height format:(NSUInteger)format type:(NSUInteger)type plane:(uint32_t)plane __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("texImageIOSurface:target:internalFormat:width:height:format:type:plane:")]
	//	unsafe bool TexImageIOSurface (IOSurfaceRef* ioSurface, nuint target, nuint internalFormat, uint width, uint height, nuint format, nuint type, uint plane);
	//}

	//// @protocol MTLCommandEncoder <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLCommandEncoder
	//{
	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required @property (copy, atomic) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @required -(void)endEncoding;
	//	[Abstract]
	//	[Export ("endEncoding")]
	//	void EndEncoding ();

	//	// @required -(void)insertDebugSignpost:(NSString * _Nonnull)string;
	//	[Abstract]
	//	[Export ("insertDebugSignpost:")]
	//	void InsertDebugSignpost (string @string);

	//	// @required -(void)pushDebugGroup:(NSString * _Nonnull)string;
	//	[Abstract]
	//	[Export ("pushDebugGroup:")]
	//	void PushDebugGroup (string @string);

	//	// @required -(void)popDebugGroup;
	//	[Abstract]
	//	[Export ("popDebugGroup")]
	//	void PopDebugGroup ();
	//}

	//// @protocol MTLResource <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLResource
	//{
	//	// @required @property (copy, atomic) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required @property (readonly) MTLCPUCacheMode cpuCacheMode;
	//	[Abstract]
	//	[Export ("cpuCacheMode")]
	//	MTLCPUCacheMode CpuCacheMode { get; }

	//	// @required @property (readonly) MTLStorageMode storageMode __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (9, 0)]
	//	[Abstract]
	//	[Export ("storageMode")]
	//	MTLStorageMode StorageMode { get; }

	//	// @required -(MTLPurgeableState)setPurgeableState:(MTLPurgeableState)state;
	//	[Abstract]
	//	[Export ("setPurgeableState:")]
	//	MTLPurgeableState SetPurgeableState (MTLPurgeableState state);

	//	// @required @property (readonly) id<MTLHeap> _Nullable heap __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (10, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("heap")]
	//	MTLHeap Heap { get; }

	//	// @required @property (readonly) NSUInteger allocatedSize __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("allocatedSize")]
	//	nuint AllocatedSize { get; }

	//	// @required -(void)makeAliasable __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (10,0)]
	//	[Abstract]
	//	[Export ("makeAliasable")]
	//	void MakeAliasable ();

	//	// @required -(BOOL)isAliasable __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (10, 0)]
	//	[Abstract]
	//	[Export ("isAliasable")]
	//	[Verify (MethodToProperty)]
	//	bool IsAliasable { get; }
	//}

	//// @protocol MTLBuffer <MTLResource>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//interface MTLBuffer : IMTLResource
	//{
	//	// @required @property (readonly) NSUInteger length;
	//	[Abstract]
	//	[Export ("length")]
	//	nuint Length { get; }

	//	// @required -(void * _Nonnull)contents __attribute__((objc_returns_inner_pointer));
	//	[Abstract]
	//	[Export ("contents")]
	//	[Verify (MethodToProperty)]
	//	unsafe void* Contents { get; }

	//	// @required -(void)didModifyRange:(NSRange)range __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
	//	[NoiOS, Mac (10,11)]
	//	[Abstract]
	//	[Export ("didModifyRange:")]
	//	void DidModifyRange (NSRange range);

	//	// @required -(id<MTLTexture> _Nullable)newTextureWithDescriptor:(MTLTextureDescriptor * _Nonnull)descriptor offset:(NSUInteger)offset bytesPerRow:(NSUInteger)bytesPerRow __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (8,0)]
	//	[Abstract]
	//	[Export ("newTextureWithDescriptor:offset:bytesPerRow:")]
	//	[return: NullAllowed]
	//	MTLTexture NewTextureWithDescriptor (MTLTextureDescriptor descriptor, nuint offset, nuint bytesPerRow);

	//	// @required -(void)addDebugMarker:(NSString * _Nonnull)marker range:(NSRange)range __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("addDebugMarker:range:")]
	//	void AddDebugMarker (string marker, NSRange range);

	//	// @required -(void)removeAllDebugMarkers __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("removeAllDebugMarkers")]
	//	void RemoveAllDebugMarkers ();
	//}

	//// @interface MTLTextureDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLTextureDescriptor : INSCopying
	//{
	//	// +(MTLTextureDescriptor * _Nonnull)texture2DDescriptorWithPixelFormat:(MTLPixelFormat)pixelFormat width:(NSUInteger)width height:(NSUInteger)height mipmapped:(BOOL)mipmapped;
	//	[Static]
	//	[Export ("texture2DDescriptorWithPixelFormat:width:height:mipmapped:")]
	//	MTLTextureDescriptor Texture2DDescriptorWithPixelFormat (MTLPixelFormat pixelFormat, nuint width, nuint height, bool mipmapped);

	//	// +(MTLTextureDescriptor * _Nonnull)textureCubeDescriptorWithPixelFormat:(MTLPixelFormat)pixelFormat size:(NSUInteger)size mipmapped:(BOOL)mipmapped;
	//	[Static]
	//	[Export ("textureCubeDescriptorWithPixelFormat:size:mipmapped:")]
	//	MTLTextureDescriptor TextureCubeDescriptorWithPixelFormat (MTLPixelFormat pixelFormat, nuint size, bool mipmapped);

	//	// +(MTLTextureDescriptor * _Nonnull)textureBufferDescriptorWithPixelFormat:(MTLPixelFormat)pixelFormat width:(NSUInteger)width resourceOptions:(MTLResourceOptions)resourceOptions usage:(MTLTextureUsage)usage __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Static]
	//	[Export ("textureBufferDescriptorWithPixelFormat:width:resourceOptions:usage:")]
	//	MTLTextureDescriptor TextureBufferDescriptorWithPixelFormat (MTLPixelFormat pixelFormat, nuint width, MTLResourceOptions resourceOptions, MTLTextureUsage usage);

	//	// @property (readwrite, nonatomic) MTLTextureType textureType;
	//	[Export ("textureType", ArgumentSemantic.Assign)]
	//	MTLTextureType TextureType { get; set; }

	//	// @property (readwrite, nonatomic) MTLPixelFormat pixelFormat;
	//	[Export ("pixelFormat", ArgumentSemantic.Assign)]
	//	MTLPixelFormat PixelFormat { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger width;
	//	[Export ("width")]
	//	nuint Width { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger height;
	//	[Export ("height")]
	//	nuint Height { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger depth;
	//	[Export ("depth")]
	//	nuint Depth { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger mipmapLevelCount;
	//	[Export ("mipmapLevelCount")]
	//	nuint MipmapLevelCount { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger sampleCount;
	//	[Export ("sampleCount")]
	//	nuint SampleCount { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger arrayLength;
	//	[Export ("arrayLength")]
	//	nuint ArrayLength { get; set; }

	//	// @property (readwrite, nonatomic) MTLResourceOptions resourceOptions;
	//	[Export ("resourceOptions", ArgumentSemantic.Assign)]
	//	MTLResourceOptions ResourceOptions { get; set; }

	//	// @property (readwrite, nonatomic) MTLCPUCacheMode cpuCacheMode __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (9, 0)]
	//	[Export ("cpuCacheMode", ArgumentSemantic.Assign)]
	//	MTLCPUCacheMode CpuCacheMode { get; set; }

	//	// @property (readwrite, nonatomic) MTLStorageMode storageMode __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (9, 0)]
	//	[Export ("storageMode", ArgumentSemantic.Assign)]
	//	MTLStorageMode StorageMode { get; set; }

	//	// @property (readwrite, nonatomic) MTLTextureUsage usage __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (9, 0)]
	//	[Export ("usage", ArgumentSemantic.Assign)]
	//	MTLTextureUsage Usage { get; set; }

	//	// @property (readwrite, nonatomic) BOOL allowGPUOptimizedContents __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10, 14), iOS (12, 0)]
	//	[Export ("allowGPUOptimizedContents")]
	//	bool AllowGPUOptimizedContents { get; set; }
	//}

	//// @protocol MTLTexture <MTLResource>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//interface MTLTexture : IMTLResource
	//{
	//	// @required @property (readonly) id<MTLResource> _Nullable rootResource __attribute__((availability(ios, introduced=8.0, deprecated=10.0))) __attribute__((availability(macos, introduced=10.11, deprecated=10.12)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use parentTexture or buffer instead")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use parentTexture or buffer instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 11, message: "Use parentTexture or buffer instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use parentTexture or buffer instead")]
	//	[Abstract]
	//	[NullAllowed, Export ("rootResource")]
	//	MTLResource RootResource { get; }

	//	// @required @property (readonly) id<MTLTexture> _Nullable parentTexture __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (9, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("parentTexture")]
	//	MTLTexture ParentTexture { get; }

	//	// @required @property (readonly) NSUInteger parentRelativeLevel __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (9, 0)]
	//	[Abstract]
	//	[Export ("parentRelativeLevel")]
	//	nuint ParentRelativeLevel { get; }

	//	// @required @property (readonly) NSUInteger parentRelativeSlice __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (9, 0)]
	//	[Abstract]
	//	[Export ("parentRelativeSlice")]
	//	nuint ParentRelativeSlice { get; }

	//	// @required @property (readonly) id<MTLBuffer> _Nullable buffer __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (9, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("buffer")]
	//	MTLBuffer Buffer { get; }

	//	// @required @property (readonly) NSUInteger bufferOffset __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (9, 0)]
	//	[Abstract]
	//	[Export ("bufferOffset")]
	//	nuint BufferOffset { get; }

	//	// @required @property (readonly) NSUInteger bufferBytesPerRow __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (9, 0)]
	//	[Abstract]
	//	[Export ("bufferBytesPerRow")]
	//	nuint BufferBytesPerRow { get; }

	//	// @required @property (readonly) IOSurfaceRef _Nullable iosurface __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (11, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("iosurface")]
	//	unsafe IOSurfaceRef* Iosurface { get; }

	//	// @required @property (readonly) NSUInteger iosurfacePlane __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("iosurfacePlane")]
	//	nuint IosurfacePlane { get; }

	//	// @required @property (readonly) MTLTextureType textureType;
	//	[Abstract]
	//	[Export ("textureType")]
	//	MTLTextureType TextureType { get; }

	//	// @required @property (readonly) MTLPixelFormat pixelFormat;
	//	[Abstract]
	//	[Export ("pixelFormat")]
	//	MTLPixelFormat PixelFormat { get; }

	//	// @required @property (readonly) NSUInteger width;
	//	[Abstract]
	//	[Export ("width")]
	//	nuint Width { get; }

	//	// @required @property (readonly) NSUInteger height;
	//	[Abstract]
	//	[Export ("height")]
	//	nuint Height { get; }

	//	// @required @property (readonly) NSUInteger depth;
	//	[Abstract]
	//	[Export ("depth")]
	//	nuint Depth { get; }

	//	// @required @property (readonly) NSUInteger mipmapLevelCount;
	//	[Abstract]
	//	[Export ("mipmapLevelCount")]
	//	nuint MipmapLevelCount { get; }

	//	// @required @property (readonly) NSUInteger sampleCount;
	//	[Abstract]
	//	[Export ("sampleCount")]
	//	nuint SampleCount { get; }

	//	// @required @property (readonly) NSUInteger arrayLength;
	//	[Abstract]
	//	[Export ("arrayLength")]
	//	nuint ArrayLength { get; }

	//	// @required @property (readonly) MTLTextureUsage usage;
	//	[Abstract]
	//	[Export ("usage")]
	//	MTLTextureUsage Usage { get; }

	//	// @required @property (readonly, getter = isFramebufferOnly) BOOL framebufferOnly;
	//	[Abstract]
	//	[Export ("framebufferOnly")]
	//	bool FramebufferOnly { [Bind ("isFramebufferOnly")] get; }

	//	// @required @property (readonly) BOOL allowGPUOptimizedContents __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10, 14), iOS (12, 0)]
	//	[Abstract]
	//	[Export ("allowGPUOptimizedContents")]
	//	bool AllowGPUOptimizedContents { get; }

	//	// @required -(void)getBytes:(void * _Nonnull)pixelBytes bytesPerRow:(NSUInteger)bytesPerRow bytesPerImage:(NSUInteger)bytesPerImage fromRegion:(MTLRegion)region mipmapLevel:(NSUInteger)level slice:(NSUInteger)slice;
	//	[Abstract]
	//	[Export ("getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:")]
	//	unsafe void GetBytes (void* pixelBytes, nuint bytesPerRow, nuint bytesPerImage, MTLRegion region, nuint level, nuint slice);

	//	// @required -(void)replaceRegion:(MTLRegion)region mipmapLevel:(NSUInteger)level slice:(NSUInteger)slice withBytes:(const void * _Nonnull)pixelBytes bytesPerRow:(NSUInteger)bytesPerRow bytesPerImage:(NSUInteger)bytesPerImage;
	//	[Abstract]
	//	[Export ("replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:")]
	//	unsafe void ReplaceRegion (MTLRegion region, nuint level, nuint slice, void* pixelBytes, nuint bytesPerRow, nuint bytesPerImage);

	//	// @required -(void)getBytes:(void * _Nonnull)pixelBytes bytesPerRow:(NSUInteger)bytesPerRow fromRegion:(MTLRegion)region mipmapLevel:(NSUInteger)level;
	//	[Abstract]
	//	[Export ("getBytes:bytesPerRow:fromRegion:mipmapLevel:")]
	//	unsafe void GetBytes (void* pixelBytes, nuint bytesPerRow, MTLRegion region, nuint level);

	//	// @required -(void)replaceRegion:(MTLRegion)region mipmapLevel:(NSUInteger)level withBytes:(const void * _Nonnull)pixelBytes bytesPerRow:(NSUInteger)bytesPerRow;
	//	[Abstract]
	//	[Export ("replaceRegion:mipmapLevel:withBytes:bytesPerRow:")]
	//	unsafe void ReplaceRegion (MTLRegion region, nuint level, void* pixelBytes, nuint bytesPerRow);

	//	// @required -(id<MTLTexture> _Nullable)newTextureViewWithPixelFormat:(MTLPixelFormat)pixelFormat;
	//	[Abstract]
	//	[Export ("newTextureViewWithPixelFormat:")]
	//	[return: NullAllowed]
	//	MTLTexture NewTextureViewWithPixelFormat (MTLPixelFormat pixelFormat);

	//	// @required -(id<MTLTexture> _Nullable)newTextureViewWithPixelFormat:(MTLPixelFormat)pixelFormat textureType:(MTLTextureType)textureType levels:(NSRange)levelRange slices:(NSRange)sliceRange __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("newTextureViewWithPixelFormat:textureType:levels:slices:")]
	//	[return: NullAllowed]
	//	MTLTexture NewTextureViewWithPixelFormat (MTLPixelFormat pixelFormat, MTLTextureType textureType, NSRange levelRange, NSRange sliceRange);
	//}

	//// @interface MTLType : NSObject
	//[Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLType
	//{
	//	// @property (readonly) MTLDataType dataType;
	//	[Export ("dataType")]
	//	MTLDataType DataType { get; }
	//}

	//// @interface MTLStructMember : NSObject
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLStructMember
	//{
	//	// @property (readonly) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly) NSUInteger offset;
	//	[Export ("offset")]
	//	nuint Offset { get; }

	//	// @property (readonly) MTLDataType dataType;
	//	[Export ("dataType")]
	//	MTLDataType DataType { get; }

	//	// -(MTLStructType * _Nullable)structType;
	//	[NullAllowed, Export ("structType")]
	//	[Verify (MethodToProperty)]
	//	MTLStructType StructType { get; }

	//	// -(MTLArrayType * _Nullable)arrayType;
	//	[NullAllowed, Export ("arrayType")]
	//	[Verify (MethodToProperty)]
	//	MTLArrayType ArrayType { get; }

	//	// -(MTLTextureReferenceType * _Nullable)textureReferenceType __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("textureReferenceType")]
	//	[Verify (MethodToProperty)]
	//	MTLTextureReferenceType TextureReferenceType { get; }

	//	// -(MTLPointerType * _Nullable)pointerType __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("pointerType")]
	//	[Verify (MethodToProperty)]
	//	MTLPointerType PointerType { get; }

	//	// @property (readonly) NSUInteger argumentIndex __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Export ("argumentIndex")]
	//	nuint ArgumentIndex { get; }
	//}

	//// @interface MTLStructType : MTLType
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(MTLType))]
	//interface MTLStructType
	//{
	//	// @property (readonly) NSArray<MTLStructMember *> * _Nonnull members;
	//	[Export ("members")]
	//	MTLStructMember[] Members { get; }

	//	// -(MTLStructMember * _Nullable)memberByName:(NSString * _Nonnull)name;
	//	[Export ("memberByName:")]
	//	[return: NullAllowed]
	//	MTLStructMember MemberByName (string name);
	//}

	//// @interface MTLArrayType : MTLType
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(MTLType))]
	//interface MTLArrayType
	//{
	//	// @property (readonly) MTLDataType elementType;
	//	[Export ("elementType")]
	//	MTLDataType ElementType { get; }

	//	// @property (readonly) NSUInteger arrayLength;
	//	[Export ("arrayLength")]
	//	nuint ArrayLength { get; }

	//	// @property (readonly) NSUInteger stride;
	//	[Export ("stride")]
	//	nuint Stride { get; }

	//	// @property (readonly) NSUInteger argumentIndexStride __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Export ("argumentIndexStride")]
	//	nuint ArgumentIndexStride { get; }

	//	// -(MTLStructType * _Nullable)elementStructType;
	//	[NullAllowed, Export ("elementStructType")]
	//	[Verify (MethodToProperty)]
	//	MTLStructType ElementStructType { get; }

	//	// -(MTLArrayType * _Nullable)elementArrayType;
	//	[NullAllowed, Export ("elementArrayType")]
	//	[Verify (MethodToProperty)]
	//	MTLArrayType ElementArrayType { get; }

	//	// -(MTLTextureReferenceType * _Nullable)elementTextureReferenceType __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("elementTextureReferenceType")]
	//	[Verify (MethodToProperty)]
	//	MTLTextureReferenceType ElementTextureReferenceType { get; }

	//	// -(MTLPointerType * _Nullable)elementPointerType __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("elementPointerType")]
	//	[Verify (MethodToProperty)]
	//	MTLPointerType ElementPointerType { get; }
	//}

	//// @interface MTLPointerType : MTLType
	//[Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MTLType))]
	//interface MTLPointerType
	//{
	//	// @property (readonly) MTLDataType elementType;
	//	[Export ("elementType")]
	//	MTLDataType ElementType { get; }

	//	// @property (readonly) MTLArgumentAccess access;
	//	[Export ("access")]
	//	MTLArgumentAccess Access { get; }

	//	// @property (readonly) NSUInteger alignment;
	//	[Export ("alignment")]
	//	nuint Alignment { get; }

	//	// @property (readonly) NSUInteger dataSize;
	//	[Export ("dataSize")]
	//	nuint DataSize { get; }

	//	// @property (readonly) BOOL elementIsArgumentBuffer __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Export ("elementIsArgumentBuffer")]
	//	bool ElementIsArgumentBuffer { get; }

	//	// -(MTLStructType * _Nullable)elementStructType __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("elementStructType")]
	//	[Verify (MethodToProperty)]
	//	MTLStructType ElementStructType { get; }

	//	// -(MTLArrayType * _Nullable)elementArrayType __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("elementArrayType")]
	//	[Verify (MethodToProperty)]
	//	MTLArrayType ElementArrayType { get; }
	//}

	//// @interface MTLTextureReferenceType : MTLType
	//[Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MTLType))]
	//interface MTLTextureReferenceType
	//{
	//	// @property (readonly) MTLDataType textureDataType;
	//	[Export ("textureDataType")]
	//	MTLDataType TextureDataType { get; }

	//	// @property (readonly) MTLTextureType textureType;
	//	[Export ("textureType")]
	//	MTLTextureType TextureType { get; }

	//	// @property (readonly) MTLArgumentAccess access;
	//	[Export ("access")]
	//	MTLArgumentAccess Access { get; }

	//	// @property (readonly) BOOL isDepthTexture;
	//	[Export ("isDepthTexture")]
	//	bool IsDepthTexture { get; }
	//}

	//// @interface MTLArgument : NSObject
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLArgument
	//{
	//	// @property (readonly) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly) MTLArgumentType type;
	//	[Export ("type")]
	//	MTLArgumentType Type { get; }

	//	// @property (readonly) MTLArgumentAccess access;
	//	[Export ("access")]
	//	MTLArgumentAccess Access { get; }

	//	// @property (readonly) NSUInteger index;
	//	[Export ("index")]
	//	nuint Index { get; }

	//	// @property (readonly, getter = isActive) BOOL active;
	//	[Export ("active")]
	//	bool Active { [Bind ("isActive")] get; }

	//	// @property (readonly) NSUInteger bufferAlignment;
	//	[Export ("bufferAlignment")]
	//	nuint BufferAlignment { get; }

	//	// @property (readonly) NSUInteger bufferDataSize;
	//	[Export ("bufferDataSize")]
	//	nuint BufferDataSize { get; }

	//	// @property (readonly) MTLDataType bufferDataType;
	//	[Export ("bufferDataType")]
	//	MTLDataType BufferDataType { get; }

	//	// @property (readonly) MTLStructType * _Nullable bufferStructType;
	//	[NullAllowed, Export ("bufferStructType")]
	//	MTLStructType BufferStructType { get; }

	//	// @property (readonly) MTLPointerType * _Nullable bufferPointerType __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("bufferPointerType")]
	//	MTLPointerType BufferPointerType { get; }

	//	// @property (readonly) NSUInteger threadgroupMemoryAlignment;
	//	[Export ("threadgroupMemoryAlignment")]
	//	nuint ThreadgroupMemoryAlignment { get; }

	//	// @property (readonly) NSUInteger threadgroupMemoryDataSize;
	//	[Export ("threadgroupMemoryDataSize")]
	//	nuint ThreadgroupMemoryDataSize { get; }

	//	// @property (readonly) MTLTextureType textureType;
	//	[Export ("textureType")]
	//	MTLTextureType TextureType { get; }

	//	// @property (readonly) MTLDataType textureDataType;
	//	[Export ("textureDataType")]
	//	MTLDataType TextureDataType { get; }

	//	// @property (readonly) BOOL isDepthTexture __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("isDepthTexture")]
	//	bool IsDepthTexture { get; }

	//	// @property (readonly) NSUInteger arrayLength __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (10, 0)]
	//	[Export ("arrayLength")]
	//	nuint ArrayLength { get; }
	//}

	//// @interface MTLVertexAttribute : NSObject
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLVertexAttribute
	//{
	//	// @property (readonly) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly) NSUInteger attributeIndex;
	//	[Export ("attributeIndex")]
	//	nuint AttributeIndex { get; }

	//	// @property (readonly) MTLDataType attributeType __attribute__((availability(ios, introduced=8.3))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (8, 3)]
	//	[Export ("attributeType")]
	//	MTLDataType AttributeType { get; }

	//	// @property (readonly, getter = isActive) BOOL active;
	//	[Export ("active")]
	//	bool Active { [Bind ("isActive")] get; }

	//	// @property (readonly, getter = isPatchData) BOOL patchData __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("patchData")]
	//	bool PatchData { [Bind ("isPatchData")] get; }

	//	// @property (readonly, getter = isPatchControlPointData) BOOL patchControlPointData __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("patchControlPointData")]
	//	bool PatchControlPointData { [Bind ("isPatchControlPointData")] get; }
	//}

	//// @interface MTLAttribute : NSObject
	//[Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLAttribute
	//{
	//	// @property (readonly) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly) NSUInteger attributeIndex;
	//	[Export ("attributeIndex")]
	//	nuint AttributeIndex { get; }

	//	// @property (readonly) MTLDataType attributeType;
	//	[Export ("attributeType")]
	//	MTLDataType AttributeType { get; }

	//	// @property (readonly, getter = isActive) BOOL active;
	//	[Export ("active")]
	//	bool Active { [Bind ("isActive")] get; }

	//	// @property (readonly, getter = isPatchData) BOOL patchData __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("patchData")]
	//	bool PatchData { [Bind ("isPatchData")] get; }

	//	// @property (readonly, getter = isPatchControlPointData) BOOL patchControlPointData __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("patchControlPointData")]
	//	bool PatchControlPointData { [Bind ("isPatchControlPointData")] get; }
	//}

	//// @interface MTLFunctionConstant : NSObject
	//[Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLFunctionConstant
	//{
	//	// @property (readonly) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly) MTLDataType type;
	//	[Export ("type")]
	//	MTLDataType Type { get; }

	//	// @property (readonly) NSUInteger index;
	//	[Export ("index")]
	//	nuint Index { get; }

	//	// @property (readonly) BOOL required;
	//	[Export ("required")]
	//	bool Required { get; }
	//}

	//// @protocol MTLFunction <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLFunction
	//{
	//	// @required @property (copy, atomic) NSString * _Nullable label __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required @property (readonly) MTLFunctionType functionType;
	//	[Abstract]
	//	[Export ("functionType")]
	//	MTLFunctionType FunctionType { get; }

	//	// @required @property (readonly) MTLPatchType patchType __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Abstract]
	//	[Export ("patchType")]
	//	MTLPatchType PatchType { get; }

	//	// @required @property (readonly) NSInteger patchControlPointCount __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Abstract]
	//	[Export ("patchControlPointCount")]
	//	nint PatchControlPointCount { get; }

	//	// @required @property (readonly) NSArray<MTLVertexAttribute *> * _Nullable vertexAttributes;
	//	[Abstract]
	//	[NullAllowed, Export ("vertexAttributes")]
	//	MTLVertexAttribute[] VertexAttributes { get; }

	//	// @required @property (readonly) NSArray<MTLAttribute *> * _Nullable stageInputAttributes __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("stageInputAttributes")]
	//	MTLAttribute[] StageInputAttributes { get; }

	//	// @required @property (readonly) NSString * _Nonnull name;
	//	[Abstract]
	//	[Export ("name")]
	//	string Name { get; }

	//	// @required @property (readonly) NSDictionary<NSString *,MTLFunctionConstant *> * _Nonnull functionConstantsDictionary __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Abstract]
	//	[Export ("functionConstantsDictionary")]
	//	NSDictionary<NSString, MTLFunctionConstant> FunctionConstantsDictionary { get; }

	//	// @required -(id<MTLArgumentEncoder> _Nonnull)newArgumentEncoderWithBufferIndex:(NSUInteger)bufferIndex __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("newArgumentEncoderWithBufferIndex:")]
	//	MTLArgumentEncoder NewArgumentEncoderWithBufferIndex (nuint bufferIndex);

	//	// @required -(id<MTLArgumentEncoder> _Nonnull)newArgumentEncoderWithBufferIndex:(NSUInteger)bufferIndex reflection:(MTLAutoreleasedArgument * _Nullable)reflection __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("newArgumentEncoderWithBufferIndex:reflection:")]
	//	MTLArgumentEncoder Reflection (nuint bufferIndex, [NullAllowed] out MTLArgument reflection);
	//}

	//// @interface MTLCompileOptions : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLCompileOptions : INSCopying
	//{
	//	// @property (readwrite, copy, nonatomic) NSDictionary<NSString *,NSObject *> * _Nullable preprocessorMacros;
	//	[NullAllowed, Export ("preprocessorMacros", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> PreprocessorMacros { get; set; }

	//	// @property (readwrite, nonatomic) BOOL fastMathEnabled;
	//	[Export ("fastMathEnabled")]
	//	bool FastMathEnabled { get; set; }

	//	// @property (readwrite, nonatomic) MTLLanguageVersion languageVersion __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (9, 0)]
	//	[Export ("languageVersion", ArgumentSemantic.Assign)]
	//	MTLLanguageVersion LanguageVersion { get; set; }
	//}

	//// @protocol MTLLibrary <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLLibrary
	//{
	//	// @required @property (copy, atomic) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required -(id<MTLFunction> _Nullable)newFunctionWithName:(NSString * _Nonnull)functionName;
	//	[Abstract]
	//	[Export ("newFunctionWithName:")]
	//	[return: NullAllowed]
	//	MTLFunction NewFunctionWithName (string functionName);

	//	// @required -(id<MTLFunction> _Nullable)newFunctionWithName:(NSString * _Nonnull)name constantValues:(MTLFunctionConstantValues * _Nonnull)constantValues error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("newFunctionWithName:constantValues:error:")]
	//	[return: NullAllowed]
	//	MTLFunction NewFunctionWithName (string name, MTLFunctionConstantValues constantValues, [NullAllowed] out NSError error);

	//	// @required -(void)newFunctionWithName:(NSString * _Nonnull)name constantValues:(MTLFunctionConstantValues * _Nonnull)constantValues completionHandler:(void (^ _Nonnull)(id<MTLFunction> _Nullable, NSError * _Nonnull))completionHandler __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("newFunctionWithName:constantValues:completionHandler:")]
	//	void NewFunctionWithName (string name, MTLFunctionConstantValues constantValues, Action<MTLFunction, NSError> completionHandler);

	//	// @required @property (readonly) NSArray<NSString *> * _Nonnull functionNames;
	//	[Abstract]
	//	[Export ("functionNames")]
	//	string[] FunctionNames { get; }
	//}

	//// typedef void (^MTLNewLibraryCompletionHandler)(id<MTLLibrary> _Nullable, NSError * _Nullable);
	//delegate void MTLNewLibraryCompletionHandler ([NullAllowed] MTLLibrary arg0, [NullAllowed] NSError arg1);

	//// typedef void (^MTLNewRenderPipelineStateCompletionHandler)(id<MTLRenderPipelineState> _Nullable, NSError * _Nullable);
	//delegate void MTLNewRenderPipelineStateCompletionHandler ([NullAllowed] MTLRenderPipelineState arg0, [NullAllowed] NSError arg1);

	//// typedef void (^MTLNewRenderPipelineStateWithReflectionCompletionHandler)(id<MTLRenderPipelineState> _Nullable, MTLRenderPipelineReflection * _Nullable, NSError * _Nullable);
	//delegate void MTLNewRenderPipelineStateWithReflectionCompletionHandler ([NullAllowed] MTLRenderPipelineState arg0, [NullAllowed] MTLRenderPipelineReflection arg1, [NullAllowed] NSError arg2);

	//// typedef void (^MTLNewComputePipelineStateCompletionHandler)(id<MTLComputePipelineState> _Nullable, NSError * _Nullable);
	//delegate void MTLNewComputePipelineStateCompletionHandler ([NullAllowed] MTLComputePipelineState arg0, [NullAllowed] NSError arg1);

	//// typedef void (^MTLNewComputePipelineStateWithReflectionCompletionHandler)(id<MTLComputePipelineState> _Nullable, MTLComputePipelineReflection * _Nullable, NSError * _Nullable);
	//delegate void MTLNewComputePipelineStateWithReflectionCompletionHandler ([NullAllowed] MTLComputePipelineState arg0, [NullAllowed] MTLComputePipelineReflection arg1, [NullAllowed] NSError arg2);

	//// @interface MTLArgumentDescriptor : NSObject <NSCopying>
	//[Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLArgumentDescriptor : INSCopying
	//{
	//	// +(MTLArgumentDescriptor * _Nonnull)argumentDescriptor;
	//	[Static]
	//	[Export ("argumentDescriptor")]
	//	[Verify (MethodToProperty)]
	//	MTLArgumentDescriptor ArgumentDescriptor { get; }

	//	// @property (nonatomic) MTLDataType dataType;
	//	[Export ("dataType", ArgumentSemantic.Assign)]
	//	MTLDataType DataType { get; set; }

	//	// @property (nonatomic) NSUInteger index;
	//	[Export ("index")]
	//	nuint Index { get; set; }

	//	// @property (nonatomic) NSUInteger arrayLength;
	//	[Export ("arrayLength")]
	//	nuint ArrayLength { get; set; }

	//	// @property (nonatomic) MTLArgumentAccess access;
	//	[Export ("access", ArgumentSemantic.Assign)]
	//	MTLArgumentAccess Access { get; set; }

	//	// @property (nonatomic) MTLTextureType textureType;
	//	[Export ("textureType", ArgumentSemantic.Assign)]
	//	MTLTextureType TextureType { get; set; }

	//	// @property (nonatomic) NSUInteger constantBlockAlignment;
	//	[Export ("constantBlockAlignment")]
	//	nuint ConstantBlockAlignment { get; set; }
	//}

	//// @protocol MTLDevice <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLDevice
	//{
	//	// @required @property (readonly) NSString * _Nonnull name;
	//	[Abstract]
	//	[Export ("name")]
	//	string Name { get; }

	//	// @required @property (readonly) uint64_t registryID __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("registryID")]
	//	ulong RegistryID { get; }

	//	// @required @property (readonly) MTLSize maxThreadsPerThreadgroup __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (9, 0)]
	//	[Abstract]
	//	[Export ("maxThreadsPerThreadgroup")]
	//	MTLSize MaxThreadsPerThreadgroup { get; }

	//	// @required @property (readonly, getter = isLowPower) BOOL lowPower __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
	//	[NoiOS, Mac (10, 11)]
	//	[Abstract]
	//	[Export ("lowPower")]
	//	bool LowPower { [Bind ("isLowPower")] get; }

	//	// @required @property (readonly, getter = isHeadless) BOOL headless __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
	//	[NoiOS, Mac (10, 11)]
	//	[Abstract]
	//	[Export ("headless")]
	//	bool Headless { [Bind ("isHeadless")] get; }

	//	// @required @property (readonly, getter = isRemovable) BOOL removable __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.13)));
	//	[NoiOS, Mac (10, 13)]
	//	[Abstract]
	//	[Export ("removable")]
	//	bool Removable { [Bind ("isRemovable")] get; }

	//	// @required @property (readonly) uint64_t recommendedMaxWorkingSetSize __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.12)));
	//	[NoiOS, Mac (10, 12)]
	//	[Abstract]
	//	[Export ("recommendedMaxWorkingSetSize")]
	//	ulong RecommendedMaxWorkingSetSize { get; }

	//	// @required @property (readonly, getter = isDepth24Stencil8PixelFormatSupported) BOOL depth24Stencil8PixelFormatSupported __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
	//	[NoiOS, Mac (10, 11)]
	//	[Abstract]
	//	[Export ("depth24Stencil8PixelFormatSupported")]
	//	bool Depth24Stencil8PixelFormatSupported { [Bind ("isDepth24Stencil8PixelFormatSupported")] get; }

	//	// @required @property (readonly) MTLReadWriteTextureTier readWriteTextureSupport __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("readWriteTextureSupport")]
	//	MTLReadWriteTextureTier ReadWriteTextureSupport { get; }

	//	// @required @property (readonly) MTLArgumentBuffersTier argumentBuffersSupport __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("argumentBuffersSupport")]
	//	MTLArgumentBuffersTier ArgumentBuffersSupport { get; }

	//	// @required @property (readonly, getter = areRasterOrderGroupsSupported) BOOL rasterOrderGroupsSupported __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("rasterOrderGroupsSupported")]
	//	bool RasterOrderGroupsSupported { [Bind ("areRasterOrderGroupsSupported")] get; }

	//	// @required @property (readonly) NSUInteger currentAllocatedSize __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("currentAllocatedSize")]
	//	nuint CurrentAllocatedSize { get; }

	//	// @required -(id<MTLCommandQueue> _Nullable)newCommandQueue;
	//	[Abstract]
	//	[NullAllowed, Export ("newCommandQueue")]
	//	[Verify (MethodToProperty)]
	//	MTLCommandQueue NewCommandQueue { get; }

	//	// @required -(id<MTLCommandQueue> _Nullable)newCommandQueueWithMaxCommandBufferCount:(NSUInteger)maxCommandBufferCount;
	//	[Abstract]
	//	[Export ("newCommandQueueWithMaxCommandBufferCount:")]
	//	[return: NullAllowed]
	//	MTLCommandQueue NewCommandQueueWithMaxCommandBufferCount (nuint maxCommandBufferCount);

	//	// @required -(MTLSizeAndAlign)heapTextureSizeAndAlignWithDescriptor:(MTLTextureDescriptor * _Nonnull)desc __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (10,0)]
	//	[Abstract]
	//	[Export ("heapTextureSizeAndAlignWithDescriptor:")]
	//	MTLSizeAndAlign HeapTextureSizeAndAlignWithDescriptor (MTLTextureDescriptor desc);

	//	// @required -(MTLSizeAndAlign)heapBufferSizeAndAlignWithLength:(NSUInteger)length options:(MTLResourceOptions)options __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (10,0)]
	//	[Abstract]
	//	[Export ("heapBufferSizeAndAlignWithLength:options:")]
	//	MTLSizeAndAlign HeapBufferSizeAndAlignWithLength (nuint length, MTLResourceOptions options);

	//	// @required -(id<MTLHeap> _Nullable)newHeapWithDescriptor:(MTLHeapDescriptor * _Nonnull)descriptor __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (10,0)]
	//	[Abstract]
	//	[Export ("newHeapWithDescriptor:")]
	//	[return: NullAllowed]
	//	MTLHeap NewHeapWithDescriptor (MTLHeapDescriptor descriptor);

	//	// @required -(id<MTLBuffer> _Nullable)newBufferWithLength:(NSUInteger)length options:(MTLResourceOptions)options;
	//	[Abstract]
	//	[Export ("newBufferWithLength:options:")]
	//	[return: NullAllowed]
	//	MTLBuffer NewBufferWithLength (nuint length, MTLResourceOptions options);

	//	// @required -(id<MTLBuffer> _Nullable)newBufferWithBytes:(const void * _Nonnull)pointer length:(NSUInteger)length options:(MTLResourceOptions)options;
	//	[Abstract]
	//	[Export ("newBufferWithBytes:length:options:")]
	//	[return: NullAllowed]
	//	unsafe MTLBuffer NewBufferWithBytes (void* pointer, nuint length, MTLResourceOptions options);

	//	// @required -(id<MTLBuffer> _Nullable)newBufferWithBytesNoCopy:(void * _Nonnull)pointer length:(NSUInteger)length options:(MTLResourceOptions)options deallocator:(void (^ _Nullable)(void * _Nonnull, NSUInteger))deallocator;
	//	[Abstract]
	//	[Export ("newBufferWithBytesNoCopy:length:options:deallocator:")]
	//	[return: NullAllowed]
	//	unsafe MTLBuffer NewBufferWithBytesNoCopy (void* pointer, nuint length, MTLResourceOptions options, [NullAllowed] Action<void*, nuint> deallocator);

	//	// @required -(id<MTLDepthStencilState> _Nullable)newDepthStencilStateWithDescriptor:(MTLDepthStencilDescriptor * _Nonnull)descriptor;
	//	[Abstract]
	//	[Export ("newDepthStencilStateWithDescriptor:")]
	//	[return: NullAllowed]
	//	MTLDepthStencilState NewDepthStencilStateWithDescriptor (MTLDepthStencilDescriptor descriptor);

	//	// @required -(id<MTLTexture> _Nullable)newTextureWithDescriptor:(MTLTextureDescriptor * _Nonnull)descriptor;
	//	[Abstract]
	//	[Export ("newTextureWithDescriptor:")]
	//	[return: NullAllowed]
	//	MTLTexture NewTextureWithDescriptor (MTLTextureDescriptor descriptor);

	//	// @required -(id<MTLTexture> _Nullable)newTextureWithDescriptor:(MTLTextureDescriptor * _Nonnull)descriptor iosurface:(IOSurfaceRef _Nonnull)iosurface plane:(NSUInteger)plane __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (11,0)]
	//	[Abstract]
	//	[Export ("newTextureWithDescriptor:iosurface:plane:")]
	//	[return: NullAllowed]
	//	unsafe MTLTexture NewTextureWithDescriptor (MTLTextureDescriptor descriptor, IOSurfaceRef* iosurface, nuint plane);

	//	// @required -(id<MTLSamplerState> _Nullable)newSamplerStateWithDescriptor:(MTLSamplerDescriptor * _Nonnull)descriptor;
	//	[Abstract]
	//	[Export ("newSamplerStateWithDescriptor:")]
	//	[return: NullAllowed]
	//	MTLSamplerState NewSamplerStateWithDescriptor (MTLSamplerDescriptor descriptor);

	//	// @required -(id<MTLLibrary> _Nullable)newDefaultLibrary;
	//	[Abstract]
	//	[NullAllowed, Export ("newDefaultLibrary")]
	//	[Verify (MethodToProperty)]
	//	MTLLibrary NewDefaultLibrary { get; }

	//	// @required -(id<MTLLibrary> _Nullable)newDefaultLibraryWithBundle:(NSBundle * _Nonnull)bundle error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("newDefaultLibraryWithBundle:error:")]
	//	[return: NullAllowed]
	//	MTLLibrary NewDefaultLibraryWithBundle (NSBundle bundle, [NullAllowed] out NSError error);

	//	// @required -(id<MTLLibrary> _Nullable)newLibraryWithFile:(NSString * _Nonnull)filepath error:(NSError * _Nullable * _Nullable)error;
	//	[Abstract]
	//	[Export ("newLibraryWithFile:error:")]
	//	[return: NullAllowed]
	//	MTLLibrary NewLibraryWithFile (string filepath, [NullAllowed] out NSError error);

	//	// @required -(id<MTLLibrary> _Nullable)newLibraryWithURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("newLibraryWithURL:error:")]
	//	[return: NullAllowed]
	//	MTLLibrary NewLibraryWithURL (NSUrl url, [NullAllowed] out NSError error);

	//	// @required -(id<MTLLibrary> _Nullable)newLibraryWithData:(dispatch_data_t _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
	//	[Abstract]
	//	[Export ("newLibraryWithData:error:")]
	//	[return: NullAllowed]
	//	MTLLibrary NewLibraryWithData (OS_dispatch_data data, [NullAllowed] out NSError error);

	//	// @required -(id<MTLLibrary> _Nullable)newLibraryWithSource:(NSString * _Nonnull)source options:(MTLCompileOptions * _Nullable)options error:(NSError * _Nullable * _Nullable)error;
	//	[Abstract]
	//	[Export ("newLibraryWithSource:options:error:")]
	//	[return: NullAllowed]
	//	MTLLibrary NewLibraryWithSource (string source, [NullAllowed] MTLCompileOptions options, [NullAllowed] out NSError error);

	//	// @required -(void)newLibraryWithSource:(NSString * _Nonnull)source options:(MTLCompileOptions * _Nullable)options completionHandler:(MTLNewLibraryCompletionHandler _Nonnull)completionHandler;
	//	[Abstract]
	//	[Export ("newLibraryWithSource:options:completionHandler:")]
	//	void NewLibraryWithSource (string source, [NullAllowed] MTLCompileOptions options, MTLNewLibraryCompletionHandler completionHandler);

	//	// @required -(id<MTLRenderPipelineState> _Nullable)newRenderPipelineStateWithDescriptor:(MTLRenderPipelineDescriptor * _Nonnull)descriptor error:(NSError * _Nullable * _Nullable)error;
	//	[Abstract]
	//	[Export ("newRenderPipelineStateWithDescriptor:error:")]
	//	[return: NullAllowed]
	//	MTLRenderPipelineState NewRenderPipelineStateWithDescriptor (MTLRenderPipelineDescriptor descriptor, [NullAllowed] out NSError error);

	//	// @required -(id<MTLRenderPipelineState> _Nullable)newRenderPipelineStateWithDescriptor:(MTLRenderPipelineDescriptor * _Nonnull)descriptor options:(MTLPipelineOption)options reflection:(MTLAutoreleasedRenderPipelineReflection * _Nullable)reflection error:(NSError * _Nullable * _Nullable)error;
	//	[Abstract]
	//	[Export ("newRenderPipelineStateWithDescriptor:options:reflection:error:")]
	//	[return: NullAllowed]
	//	MTLRenderPipelineState NewRenderPipelineStateWithDescriptor (MTLRenderPipelineDescriptor descriptor, MTLPipelineOption options, [NullAllowed] out MTLRenderPipelineReflection reflection, [NullAllowed] out NSError error);

	//	// @required -(void)newRenderPipelineStateWithDescriptor:(MTLRenderPipelineDescriptor * _Nonnull)descriptor completionHandler:(MTLNewRenderPipelineStateCompletionHandler _Nonnull)completionHandler;
	//	[Abstract]
	//	[Export ("newRenderPipelineStateWithDescriptor:completionHandler:")]
	//	void NewRenderPipelineStateWithDescriptor (MTLRenderPipelineDescriptor descriptor, MTLNewRenderPipelineStateCompletionHandler completionHandler);

	//	// @required -(void)newRenderPipelineStateWithDescriptor:(MTLRenderPipelineDescriptor * _Nonnull)descriptor options:(MTLPipelineOption)options completionHandler:(MTLNewRenderPipelineStateWithReflectionCompletionHandler _Nonnull)completionHandler;
	//	[Abstract]
	//	[Export ("newRenderPipelineStateWithDescriptor:options:completionHandler:")]
	//	void NewRenderPipelineStateWithDescriptor (MTLRenderPipelineDescriptor descriptor, MTLPipelineOption options, MTLNewRenderPipelineStateWithReflectionCompletionHandler completionHandler);

	//	// @required -(id<MTLComputePipelineState> _Nullable)newComputePipelineStateWithFunction:(id<MTLFunction> _Nonnull)computeFunction error:(NSError * _Nullable * _Nullable)error;
	//	[Abstract]
	//	[Export ("newComputePipelineStateWithFunction:error:")]
	//	[return: NullAllowed]
	//	MTLComputePipelineState NewComputePipelineStateWithFunction (MTLFunction computeFunction, [NullAllowed] out NSError error);

	//	// @required -(id<MTLComputePipelineState> _Nullable)newComputePipelineStateWithFunction:(id<MTLFunction> _Nonnull)computeFunction options:(MTLPipelineOption)options reflection:(MTLAutoreleasedComputePipelineReflection * _Nullable)reflection error:(NSError * _Nullable * _Nullable)error;
	//	[Abstract]
	//	[Export ("newComputePipelineStateWithFunction:options:reflection:error:")]
	//	[return: NullAllowed]
	//	MTLComputePipelineState NewComputePipelineStateWithFunction (MTLFunction computeFunction, MTLPipelineOption options, [NullAllowed] out MTLComputePipelineReflection reflection, [NullAllowed] out NSError error);

	//	// @required -(void)newComputePipelineStateWithFunction:(id<MTLFunction> _Nonnull)computeFunction completionHandler:(MTLNewComputePipelineStateCompletionHandler _Nonnull)completionHandler;
	//	[Abstract]
	//	[Export ("newComputePipelineStateWithFunction:completionHandler:")]
	//	void NewComputePipelineStateWithFunction (MTLFunction computeFunction, MTLNewComputePipelineStateCompletionHandler completionHandler);

	//	// @required -(void)newComputePipelineStateWithFunction:(id<MTLFunction> _Nonnull)computeFunction options:(MTLPipelineOption)options completionHandler:(MTLNewComputePipelineStateWithReflectionCompletionHandler _Nonnull)completionHandler;
	//	[Abstract]
	//	[Export ("newComputePipelineStateWithFunction:options:completionHandler:")]
	//	void NewComputePipelineStateWithFunction (MTLFunction computeFunction, MTLPipelineOption options, MTLNewComputePipelineStateWithReflectionCompletionHandler completionHandler);

	//	// @required -(id<MTLComputePipelineState> _Nullable)newComputePipelineStateWithDescriptor:(MTLComputePipelineDescriptor * _Nonnull)descriptor options:(MTLPipelineOption)options reflection:(MTLAutoreleasedComputePipelineReflection * _Nullable)reflection error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("newComputePipelineStateWithDescriptor:options:reflection:error:")]
	//	[return: NullAllowed]
	//	MTLComputePipelineState NewComputePipelineStateWithDescriptor (MTLComputePipelineDescriptor descriptor, MTLPipelineOption options, [NullAllowed] out MTLComputePipelineReflection reflection, [NullAllowed] out NSError error);

	//	// @required -(void)newComputePipelineStateWithDescriptor:(MTLComputePipelineDescriptor * _Nonnull)descriptor options:(MTLPipelineOption)options completionHandler:(MTLNewComputePipelineStateWithReflectionCompletionHandler _Nonnull)completionHandler __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("newComputePipelineStateWithDescriptor:options:completionHandler:")]
	//	void NewComputePipelineStateWithDescriptor (MTLComputePipelineDescriptor descriptor, MTLPipelineOption options, MTLNewComputePipelineStateWithReflectionCompletionHandler completionHandler);

	//	// @required -(id<MTLFence> _Nullable)newFence __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (10, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("newFence")]
	//	[Verify (MethodToProperty)]
	//	MTLFence NewFence { get; }

	//	// @required -(BOOL)supportsFeatureSet:(MTLFeatureSet)featureSet;
	//	[Abstract]
	//	[Export ("supportsFeatureSet:")]
	//	bool SupportsFeatureSet (MTLFeatureSet featureSet);

	//	// @required -(BOOL)supportsTextureSampleCount:(NSUInteger)sampleCount __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("supportsTextureSampleCount:")]
	//	bool SupportsTextureSampleCount (nuint sampleCount);

	//	// @required -(NSUInteger)minimumLinearTextureAlignmentForPixelFormat:(MTLPixelFormat)format __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("minimumLinearTextureAlignmentForPixelFormat:")]
	//	nuint MinimumLinearTextureAlignmentForPixelFormat (MTLPixelFormat format);

	//	// @required -(NSUInteger)minimumTextureBufferAlignmentForPixelFormat:(MTLPixelFormat)format __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("minimumTextureBufferAlignmentForPixelFormat:")]
	//	nuint MinimumTextureBufferAlignmentForPixelFormat (MTLPixelFormat format);

	//	// @required -(id<MTLRenderPipelineState> _Nullable)newRenderPipelineStateWithTileDescriptor:(MTLTileRenderPipelineDescriptor * _Nonnull)descriptor options:(MTLPipelineOption)options reflection:(MTLAutoreleasedRenderPipelineReflection * _Nullable)reflection error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("newRenderPipelineStateWithTileDescriptor:options:reflection:error:")]
	//	[return: NullAllowed]
	//	MTLRenderPipelineState NewRenderPipelineStateWithTileDescriptor (MTLTileRenderPipelineDescriptor descriptor, MTLPipelineOption options, [NullAllowed] out MTLRenderPipelineReflection reflection, [NullAllowed] out NSError error);

	//	// @required -(void)newRenderPipelineStateWithTileDescriptor:(MTLTileRenderPipelineDescriptor * _Nonnull)descriptor options:(MTLPipelineOption)options completionHandler:(MTLNewRenderPipelineStateWithReflectionCompletionHandler _Nonnull)completionHandler __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("newRenderPipelineStateWithTileDescriptor:options:completionHandler:")]
	//	void NewRenderPipelineStateWithTileDescriptor (MTLTileRenderPipelineDescriptor descriptor, MTLPipelineOption options, MTLNewRenderPipelineStateWithReflectionCompletionHandler completionHandler);

	//	// @required @property (readonly) NSUInteger maxThreadgroupMemoryLength __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("maxThreadgroupMemoryLength")]
	//	nuint MaxThreadgroupMemoryLength { get; }

	//	// @required @property (readonly) NSUInteger maxArgumentBufferSamplerCount __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10, 14), iOS (12, 0)]
	//	[Abstract]
	//	[Export ("maxArgumentBufferSamplerCount")]
	//	nuint MaxArgumentBufferSamplerCount { get; }

	//	// @required @property (readonly, getter = areProgrammableSamplePositionsSupported) BOOL programmableSamplePositionsSupported __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("programmableSamplePositionsSupported")]
	//	bool ProgrammableSamplePositionsSupported { [Bind ("areProgrammableSamplePositionsSupported")] get; }

	//	// @required -(void)getDefaultSamplePositions:(MTLSamplePosition * _Nonnull)positions count:(NSUInteger)count __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("getDefaultSamplePositions:count:")]
	//	unsafe void GetDefaultSamplePositions (MTLSamplePosition* positions, nuint count);

	//	// @required -(id<MTLArgumentEncoder> _Nullable)newArgumentEncoderWithArguments:(NSArray<MTLArgumentDescriptor *> * _Nonnull)arguments __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("newArgumentEncoderWithArguments:")]
	//	[return: NullAllowed]
	//	MTLArgumentEncoder NewArgumentEncoderWithArguments (MTLArgumentDescriptor[] arguments);

	//	// @required -(id<MTLIndirectCommandBuffer> _Nullable)newIndirectCommandBufferWithDescriptor:(MTLIndirectCommandBufferDescriptor * _Nonnull)descriptor maxCommandCount:(NSUInteger)maxCount options:(MTLResourceOptions)options __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("newIndirectCommandBufferWithDescriptor:maxCommandCount:options:")]
	//	[return: NullAllowed]
	//	MTLIndirectCommandBuffer NewIndirectCommandBufferWithDescriptor (MTLIndirectCommandBufferDescriptor descriptor, nuint maxCount, MTLResourceOptions options);

	//	// @required -(id<MTLEvent> _Nullable)newEvent __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10, 14), iOS (12, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("newEvent")]
	//	[Verify (MethodToProperty)]
	//	MTLEvent NewEvent { get; }

	//	// @required -(id<MTLSharedEvent> _Nullable)newSharedEvent __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10, 14), iOS (12, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("newSharedEvent")]
	//	[Verify (MethodToProperty)]
	//	MTLSharedEvent NewSharedEvent { get; }

	//	// @required -(id<MTLSharedEvent> _Nullable)newSharedEventWithHandle:(MTLSharedEventHandle * _Nonnull)sharedEventHandle __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("newSharedEventWithHandle:")]
	//	[return: NullAllowed]
	//	MTLSharedEvent NewSharedEventWithHandle (MTLSharedEventHandle sharedEventHandle);

	//	// @required @property (readonly) NSUInteger maxBufferLength;
	//	[Abstract]
	//	[Export ("maxBufferLength")]
	//	nuint MaxBufferLength { get; }
	//}

	//// @protocol MTLFence <NSObject>
	//[Mac (10,13), iOS (10,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLFence
	//{
	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required @property (copy, atomic) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }
	//}

	//// @protocol MTLBlitCommandEncoder <MTLCommandEncoder>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//interface MTLBlitCommandEncoder : IMTLCommandEncoder
	//{
	//	// @required -(void)synchronizeResource:(id<MTLResource> _Nonnull)resource __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
	//	[NoiOS, Mac (10,11)]
	//	[Abstract]
	//	[Export ("synchronizeResource:")]
	//	void SynchronizeResource (MTLResource resource);

	//	// @required -(void)synchronizeTexture:(id<MTLTexture> _Nonnull)texture slice:(NSUInteger)slice level:(NSUInteger)level __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
	//	[NoiOS, Mac (10,11)]
	//	[Abstract]
	//	[Export ("synchronizeTexture:slice:level:")]
	//	void SynchronizeTexture (MTLTexture texture, nuint slice, nuint level);

	//	// @required -(void)copyFromTexture:(id<MTLTexture> _Nonnull)sourceTexture sourceSlice:(NSUInteger)sourceSlice sourceLevel:(NSUInteger)sourceLevel sourceOrigin:(MTLOrigin)sourceOrigin sourceSize:(MTLSize)sourceSize toTexture:(id<MTLTexture> _Nonnull)destinationTexture destinationSlice:(NSUInteger)destinationSlice destinationLevel:(NSUInteger)destinationLevel destinationOrigin:(MTLOrigin)destinationOrigin;
	//	[Abstract]
	//	[Export ("copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:")]
	//	void CopyFromTexture (MTLTexture sourceTexture, nuint sourceSlice, nuint sourceLevel, MTLOrigin sourceOrigin, MTLSize sourceSize, MTLTexture destinationTexture, nuint destinationSlice, nuint destinationLevel, MTLOrigin destinationOrigin);

	//	// @required -(void)copyFromBuffer:(id<MTLBuffer> _Nonnull)sourceBuffer sourceOffset:(NSUInteger)sourceOffset sourceBytesPerRow:(NSUInteger)sourceBytesPerRow sourceBytesPerImage:(NSUInteger)sourceBytesPerImage sourceSize:(MTLSize)sourceSize toTexture:(id<MTLTexture> _Nonnull)destinationTexture destinationSlice:(NSUInteger)destinationSlice destinationLevel:(NSUInteger)destinationLevel destinationOrigin:(MTLOrigin)destinationOrigin;
	//	[Abstract]
	//	[Export ("copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:")]
	//	void CopyFromBuffer (MTLBuffer sourceBuffer, nuint sourceOffset, nuint sourceBytesPerRow, nuint sourceBytesPerImage, MTLSize sourceSize, MTLTexture destinationTexture, nuint destinationSlice, nuint destinationLevel, MTLOrigin destinationOrigin);

	//	// @required -(void)copyFromBuffer:(id<MTLBuffer> _Nonnull)sourceBuffer sourceOffset:(NSUInteger)sourceOffset sourceBytesPerRow:(NSUInteger)sourceBytesPerRow sourceBytesPerImage:(NSUInteger)sourceBytesPerImage sourceSize:(MTLSize)sourceSize toTexture:(id<MTLTexture> _Nonnull)destinationTexture destinationSlice:(NSUInteger)destinationSlice destinationLevel:(NSUInteger)destinationLevel destinationOrigin:(MTLOrigin)destinationOrigin options:(MTLBlitOption)options __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:")]
	//	void CopyFromBuffer (MTLBuffer sourceBuffer, nuint sourceOffset, nuint sourceBytesPerRow, nuint sourceBytesPerImage, MTLSize sourceSize, MTLTexture destinationTexture, nuint destinationSlice, nuint destinationLevel, MTLOrigin destinationOrigin, MTLBlitOption options);

	//	// @required -(void)copyFromTexture:(id<MTLTexture> _Nonnull)sourceTexture sourceSlice:(NSUInteger)sourceSlice sourceLevel:(NSUInteger)sourceLevel sourceOrigin:(MTLOrigin)sourceOrigin sourceSize:(MTLSize)sourceSize toBuffer:(id<MTLBuffer> _Nonnull)destinationBuffer destinationOffset:(NSUInteger)destinationOffset destinationBytesPerRow:(NSUInteger)destinationBytesPerRow destinationBytesPerImage:(NSUInteger)destinationBytesPerImage;
	//	[Abstract]
	//	[Export ("copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:")]
	//	void CopyFromTexture (MTLTexture sourceTexture, nuint sourceSlice, nuint sourceLevel, MTLOrigin sourceOrigin, MTLSize sourceSize, MTLBuffer destinationBuffer, nuint destinationOffset, nuint destinationBytesPerRow, nuint destinationBytesPerImage);

	//	// @required -(void)copyFromTexture:(id<MTLTexture> _Nonnull)sourceTexture sourceSlice:(NSUInteger)sourceSlice sourceLevel:(NSUInteger)sourceLevel sourceOrigin:(MTLOrigin)sourceOrigin sourceSize:(MTLSize)sourceSize toBuffer:(id<MTLBuffer> _Nonnull)destinationBuffer destinationOffset:(NSUInteger)destinationOffset destinationBytesPerRow:(NSUInteger)destinationBytesPerRow destinationBytesPerImage:(NSUInteger)destinationBytesPerImage options:(MTLBlitOption)options __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:")]
	//	void CopyFromTexture (MTLTexture sourceTexture, nuint sourceSlice, nuint sourceLevel, MTLOrigin sourceOrigin, MTLSize sourceSize, MTLBuffer destinationBuffer, nuint destinationOffset, nuint destinationBytesPerRow, nuint destinationBytesPerImage, MTLBlitOption options);

	//	// @required -(void)generateMipmapsForTexture:(id<MTLTexture> _Nonnull)texture;
	//	[Abstract]
	//	[Export ("generateMipmapsForTexture:")]
	//	void GenerateMipmapsForTexture (MTLTexture texture);

	//	// @required -(void)fillBuffer:(id<MTLBuffer> _Nonnull)buffer range:(NSRange)range value:(uint8_t)value;
	//	[Abstract]
	//	[Export ("fillBuffer:range:value:")]
	//	void FillBuffer (MTLBuffer buffer, NSRange range, byte value);

	//	// @required -(void)copyFromBuffer:(id<MTLBuffer> _Nonnull)sourceBuffer sourceOffset:(NSUInteger)sourceOffset toBuffer:(id<MTLBuffer> _Nonnull)destinationBuffer destinationOffset:(NSUInteger)destinationOffset size:(NSUInteger)size;
	//	[Abstract]
	//	[Export ("copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:")]
	//	void CopyFromBuffer (MTLBuffer sourceBuffer, nuint sourceOffset, MTLBuffer destinationBuffer, nuint destinationOffset, nuint size);

	//	// @required -(void)updateFence:(id<MTLFence> _Nonnull)fence __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (10,0)]
	//	[Abstract]
	//	[Export ("updateFence:")]
	//	void UpdateFence (MTLFence fence);

	//	// @required -(void)waitForFence:(id<MTLFence> _Nonnull)fence __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (10,0)]
	//	[Abstract]
	//	[Export ("waitForFence:")]
	//	void WaitForFence (MTLFence fence);

	//	// @required -(void)optimizeContentsForGPUAccess:(id<MTLTexture> _Nonnull)texture __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("optimizeContentsForGPUAccess:")]
	//	void OptimizeContentsForGPUAccess (MTLTexture texture);

	//	// @required -(void)optimizeContentsForGPUAccess:(id<MTLTexture> _Nonnull)texture slice:(NSUInteger)slice level:(NSUInteger)level __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("optimizeContentsForGPUAccess:slice:level:")]
	//	void OptimizeContentsForGPUAccess (MTLTexture texture, nuint slice, nuint level);

	//	// @required -(void)optimizeContentsForCPUAccess:(id<MTLTexture> _Nonnull)texture __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("optimizeContentsForCPUAccess:")]
	//	void OptimizeContentsForCPUAccess (MTLTexture texture);

	//	// @required -(void)optimizeContentsForCPUAccess:(id<MTLTexture> _Nonnull)texture slice:(NSUInteger)slice level:(NSUInteger)level __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("optimizeContentsForCPUAccess:slice:level:")]
	//	void OptimizeContentsForCPUAccess (MTLTexture texture, nuint slice, nuint level);

	//	// @required -(void)resetCommandsInBuffer:(id<MTLIndirectCommandBuffer> _Nonnull)buffer withRange:(NSRange)range __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("resetCommandsInBuffer:withRange:")]
	//	void ResetCommandsInBuffer (MTLIndirectCommandBuffer buffer, NSRange range);

	//	// @required -(void)copyIndirectCommandBuffer:(id<MTLIndirectCommandBuffer> _Nonnull)source sourceRange:(NSRange)sourceRange destination:(id<MTLIndirectCommandBuffer> _Nonnull)destination destinationIndex:(NSUInteger)destinationIndex __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:")]
	//	void CopyIndirectCommandBuffer (MTLIndirectCommandBuffer source, NSRange sourceRange, MTLIndirectCommandBuffer destination, nuint destinationIndex);

	//	// @required -(void)optimizeIndirectCommandBuffer:(id<MTLIndirectCommandBuffer> _Nonnull)indirectCommandBuffer withRange:(NSRange)range __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("optimizeIndirectCommandBuffer:withRange:")]
	//	void OptimizeIndirectCommandBuffer (MTLIndirectCommandBuffer indirectCommandBuffer, NSRange range);
	//}

	//// typedef void (^MTLCommandBufferHandler)(id<MTLCommandBuffer> _Nonnull);
	//delegate void MTLCommandBufferHandler (MTLCommandBuffer arg0);

	//// @protocol MTLCommandBuffer <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLCommandBuffer
	//{
	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required @property (readonly) id<MTLCommandQueue> _Nonnull commandQueue;
	//	[Abstract]
	//	[Export ("commandQueue")]
	//	MTLCommandQueue CommandQueue { get; }

	//	// @required @property (readonly) BOOL retainedReferences;
	//	[Abstract]
	//	[Export ("retainedReferences")]
	//	bool RetainedReferences { get; }

	//	// @required @property (copy, atomic) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @required @property (readonly) CFTimeInterval kernelStartTime __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
	//	[NoMac, iOS (10, 3)]
	//	[Abstract]
	//	[Export ("kernelStartTime")]
	//	double KernelStartTime { get; }

	//	// @required @property (readonly) CFTimeInterval kernelEndTime __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
	//	[NoMac, iOS (10, 3)]
	//	[Abstract]
	//	[Export ("kernelEndTime")]
	//	double KernelEndTime { get; }

	//	// @required @property (readonly) CFTimeInterval GPUStartTime __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
	//	[NoMac, iOS (10, 3)]
	//	[Abstract]
	//	[Export ("GPUStartTime")]
	//	double GPUStartTime { get; }

	//	// @required @property (readonly) CFTimeInterval GPUEndTime __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
	//	[NoMac, iOS (10, 3)]
	//	[Abstract]
	//	[Export ("GPUEndTime")]
	//	double GPUEndTime { get; }

	//	// @required -(void)enqueue;
	//	[Abstract]
	//	[Export ("enqueue")]
	//	void Enqueue ();

	//	// @required -(void)commit;
	//	[Abstract]
	//	[Export ("commit")]
	//	void Commit ();

	//	// @required -(void)addScheduledHandler:(MTLCommandBufferHandler _Nonnull)block;
	//	[Abstract]
	//	[Export ("addScheduledHandler:")]
	//	void AddScheduledHandler (MTLCommandBufferHandler block);

	//	// @required -(void)presentDrawable:(id<MTLDrawable> _Nonnull)drawable;
	//	[Abstract]
	//	[Export ("presentDrawable:")]
	//	void PresentDrawable (MTLDrawable drawable);

	//	// @required -(void)presentDrawable:(id<MTLDrawable> _Nonnull)drawable atTime:(CFTimeInterval)presentationTime;
	//	[Abstract]
	//	[Export ("presentDrawable:atTime:")]
	//	void PresentDrawable (MTLDrawable drawable, double presentationTime);

	//	// @required -(void)presentDrawable:(id<MTLDrawable> _Nonnull)drawable afterMinimumDuration:(CFTimeInterval)duration;
	//	[Abstract]
	//	[Export ("presentDrawable:afterMinimumDuration:")]
	//	void PresentDrawable (MTLDrawable drawable, double duration);

	//	// @required -(void)waitUntilScheduled;
	//	[Abstract]
	//	[Export ("waitUntilScheduled")]
	//	void WaitUntilScheduled ();

	//	// @required -(void)addCompletedHandler:(MTLCommandBufferHandler _Nonnull)block;
	//	[Abstract]
	//	[Export ("addCompletedHandler:")]
	//	void AddCompletedHandler (MTLCommandBufferHandler block);

	//	// @required -(void)waitUntilCompleted;
	//	[Abstract]
	//	[Export ("waitUntilCompleted")]
	//	void WaitUntilCompleted ();

	//	// @required @property (readonly) MTLCommandBufferStatus status;
	//	[Abstract]
	//	[Export ("status")]
	//	MTLCommandBufferStatus Status { get; }

	//	// @required @property (readonly) NSError * _Nullable error;
	//	[Abstract]
	//	[NullAllowed, Export ("error")]
	//	NSError Error { get; }

	//	// @required -(id<MTLBlitCommandEncoder> _Nullable)blitCommandEncoder;
	//	[Abstract]
	//	[NullAllowed, Export ("blitCommandEncoder")]
	//	[Verify (MethodToProperty)]
	//	MTLBlitCommandEncoder BlitCommandEncoder { get; }

	//	// @required -(id<MTLRenderCommandEncoder> _Nullable)renderCommandEncoderWithDescriptor:(MTLRenderPassDescriptor * _Nonnull)renderPassDescriptor;
	//	[Abstract]
	//	[Export ("renderCommandEncoderWithDescriptor:")]
	//	[return: NullAllowed]
	//	MTLRenderCommandEncoder RenderCommandEncoderWithDescriptor (MTLRenderPassDescriptor renderPassDescriptor);

	//	// @required -(id<MTLComputeCommandEncoder> _Nullable)computeCommandEncoder;
	//	[Abstract]
	//	[NullAllowed, Export ("computeCommandEncoder")]
	//	[Verify (MethodToProperty)]
	//	MTLComputeCommandEncoder ComputeCommandEncoder { get; }

	//	// @required -(id<MTLComputeCommandEncoder> _Nullable)computeCommandEncoderWithDispatchType:(MTLDispatchType)dispatchType __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("computeCommandEncoderWithDispatchType:")]
	//	[return: NullAllowed]
	//	MTLComputeCommandEncoder ComputeCommandEncoderWithDispatchType (MTLDispatchType dispatchType);

	//	// @required -(void)encodeWaitForEvent:(id<MTLEvent> _Nonnull)event value:(uint64_t)value __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("encodeWaitForEvent:value:")]
	//	void EncodeWaitForEvent (MTLEvent @event, ulong value);

	//	// @required -(void)encodeSignalEvent:(id<MTLEvent> _Nonnull)event value:(uint64_t)value __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("encodeSignalEvent:value:")]
	//	void EncodeSignalEvent (MTLEvent @event, ulong value);

	//	// @required -(id<MTLParallelRenderCommandEncoder> _Nullable)parallelRenderCommandEncoderWithDescriptor:(MTLRenderPassDescriptor * _Nonnull)renderPassDescriptor;
	//	[Abstract]
	//	[Export ("parallelRenderCommandEncoderWithDescriptor:")]
	//	[return: NullAllowed]
	//	MTLParallelRenderCommandEncoder ParallelRenderCommandEncoderWithDescriptor (MTLRenderPassDescriptor renderPassDescriptor);

	//	// @required -(void)pushDebugGroup:(NSString * _Nonnull)string __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("pushDebugGroup:")]
	//	void PushDebugGroup (string @string);

	//	// @required -(void)popDebugGroup __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("popDebugGroup")]
	//	void PopDebugGroup ();
	//}

	//// @protocol MTLComputeCommandEncoder <MTLCommandEncoder>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//interface MTLComputeCommandEncoder : IMTLCommandEncoder
	//{
	//	// @required @property (readonly) MTLDispatchType dispatchType __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10, 14), iOS (12, 0)]
	//	[Abstract]
	//	[Export ("dispatchType")]
	//	MTLDispatchType DispatchType { get; }

	//	// @required -(void)setComputePipelineState:(id<MTLComputePipelineState> _Nonnull)state;
	//	[Abstract]
	//	[Export ("setComputePipelineState:")]
	//	void SetComputePipelineState (MTLComputePipelineState state);

	//	// @required -(void)setBytes:(const void * _Nonnull)bytes length:(NSUInteger)length atIndex:(NSUInteger)index __attribute__((availability(ios, introduced=8.3))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (8,3)]
	//	[Abstract]
	//	[Export ("setBytes:length:atIndex:")]
	//	unsafe void SetBytes (void* bytes, nuint length, nuint index);

	//	// @required -(void)setBuffer:(id<MTLBuffer> _Nullable)buffer offset:(NSUInteger)offset atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setBuffer:offset:atIndex:")]
	//	void SetBuffer ([NullAllowed] MTLBuffer buffer, nuint offset, nuint index);

	//	// @required -(void)setBufferOffset:(NSUInteger)offset atIndex:(NSUInteger)index __attribute__((availability(ios, introduced=8.3))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (8,3)]
	//	[Abstract]
	//	[Export ("setBufferOffset:atIndex:")]
	//	void SetBufferOffset (nuint offset, nuint index);

	//	// @required -(void)setBuffers:(id<MTLBuffer>  _Nullable const * _Nonnull)buffers offsets:(const NSUInteger * _Nonnull)offsets withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setBuffers:offsets:withRange:")]
	//	void SetBuffers (MTLBuffer[] buffers, nuint[] offsets, NSRange range);

	//	// @required -(void)setTexture:(id<MTLTexture> _Nullable)texture atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setTexture:atIndex:")]
	//	void SetTexture ([NullAllowed] MTLTexture texture, nuint index);

	//	// @required -(void)setTextures:(id<MTLTexture>  _Nullable const * _Nonnull)textures withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setTextures:withRange:")]
	//	void SetTextures (MTLTexture[] textures, NSRange range);

	//	// @required -(void)setSamplerState:(id<MTLSamplerState> _Nullable)sampler atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setSamplerState:atIndex:")]
	//	void SetSamplerState ([NullAllowed] MTLSamplerState sampler, nuint index);

	//	// @required -(void)setSamplerStates:(id<MTLSamplerState>  _Nullable const * _Nonnull)samplers withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setSamplerStates:withRange:")]
	//	void SetSamplerStates (MTLSamplerState[] samplers, NSRange range);

	//	// @required -(void)setSamplerState:(id<MTLSamplerState> _Nullable)sampler lodMinClamp:(float)lodMinClamp lodMaxClamp:(float)lodMaxClamp atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setSamplerState:lodMinClamp:lodMaxClamp:atIndex:")]
	//	void SetSamplerState ([NullAllowed] MTLSamplerState sampler, float lodMinClamp, float lodMaxClamp, nuint index);

	//	// @required -(void)setSamplerStates:(id<MTLSamplerState>  _Nullable const * _Nonnull)samplers lodMinClamps:(const float * _Nonnull)lodMinClamps lodMaxClamps:(const float * _Nonnull)lodMaxClamps withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setSamplerStates:lodMinClamps:lodMaxClamps:withRange:")]
	//	void SetSamplerStates (MTLSamplerState[] samplers, float[] lodMinClamps, float[] lodMaxClamps, NSRange range);

	//	// @required -(void)setThreadgroupMemoryLength:(NSUInteger)length atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setThreadgroupMemoryLength:atIndex:")]
	//	void SetThreadgroupMemoryLength (nuint length, nuint index);

	//	// @required -(void)setImageblockWidth:(NSUInteger)width height:(NSUInteger)height __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("setImageblockWidth:height:")]
	//	void SetImageblockWidth (nuint width, nuint height);

	//	// @required -(void)setStageInRegion:(MTLRegion)region __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("setStageInRegion:")]
	//	void SetStageInRegion (MTLRegion region);

	//	// @required -(void)setStageInRegionWithIndirectBuffer:(id<MTLBuffer> _Nonnull)indirectBuffer indirectBufferOffset:(NSUInteger)indirectBufferOffset __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("setStageInRegionWithIndirectBuffer:indirectBufferOffset:")]
	//	void SetStageInRegionWithIndirectBuffer (MTLBuffer indirectBuffer, nuint indirectBufferOffset);

	//	// @required -(void)dispatchThreadgroups:(MTLSize)threadgroupsPerGrid threadsPerThreadgroup:(MTLSize)threadsPerThreadgroup;
	//	[Abstract]
	//	[Export ("dispatchThreadgroups:threadsPerThreadgroup:")]
	//	void DispatchThreadgroups (MTLSize threadgroupsPerGrid, MTLSize threadsPerThreadgroup);

	//	// @required -(void)dispatchThreadgroupsWithIndirectBuffer:(id<MTLBuffer> _Nonnull)indirectBuffer indirectBufferOffset:(NSUInteger)indirectBufferOffset threadsPerThreadgroup:(MTLSize)threadsPerThreadgroup __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:")]
	//	void DispatchThreadgroupsWithIndirectBuffer (MTLBuffer indirectBuffer, nuint indirectBufferOffset, MTLSize threadsPerThreadgroup);

	//	// @required -(void)dispatchThreads:(MTLSize)threadsPerGrid threadsPerThreadgroup:(MTLSize)threadsPerThreadgroup __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("dispatchThreads:threadsPerThreadgroup:")]
	//	void DispatchThreads (MTLSize threadsPerGrid, MTLSize threadsPerThreadgroup);

	//	// @required -(void)updateFence:(id<MTLFence> _Nonnull)fence __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (10,0)]
	//	[Abstract]
	//	[Export ("updateFence:")]
	//	void UpdateFence (MTLFence fence);

	//	// @required -(void)waitForFence:(id<MTLFence> _Nonnull)fence __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (10,0)]
	//	[Abstract]
	//	[Export ("waitForFence:")]
	//	void WaitForFence (MTLFence fence);

	//	// @required -(void)useResource:(id<MTLResource> _Nonnull)resource usage:(MTLResourceUsage)usage __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("useResource:usage:")]
	//	void UseResource (MTLResource resource, MTLResourceUsage usage);

	//	// @required -(void)useResources:(id<MTLResource>  _Nonnull const * _Nonnull)resources count:(NSUInteger)count usage:(MTLResourceUsage)usage __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("useResources:count:usage:")]
	//	void UseResources (MTLResource[] resources, nuint count, MTLResourceUsage usage);

	//	// @required -(void)useHeap:(id<MTLHeap> _Nonnull)heap __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("useHeap:")]
	//	void UseHeap (MTLHeap heap);

	//	// @required -(void)useHeaps:(id<MTLHeap>  _Nonnull const * _Nonnull)heaps count:(NSUInteger)count __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("useHeaps:count:")]
	//	void UseHeaps (MTLHeap[] heaps, nuint count);

	//	// @required -(void)memoryBarrierWithScope:(MTLBarrierScope)scope __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("memoryBarrierWithScope:")]
	//	void MemoryBarrierWithScope (MTLBarrierScope scope);

	//	// @required -(void)memoryBarrierWithResources:(id<MTLResource>  _Nonnull const * _Nonnull)resources count:(NSUInteger)count __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("memoryBarrierWithResources:count:")]
	//	void MemoryBarrierWithResources (MTLResource[] resources, nuint count);
	//}

	//// @protocol MTLCommandQueue <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLCommandQueue
	//{
	//	// @required @property (copy, atomic) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required -(id<MTLCommandBuffer> _Nullable)commandBuffer;
	//	[Abstract]
	//	[NullAllowed, Export ("commandBuffer")]
	//	[Verify (MethodToProperty)]
	//	MTLCommandBuffer CommandBuffer { get; }

	//	// @required -(id<MTLCommandBuffer> _Nullable)commandBufferWithUnretainedReferences;
	//	[Abstract]
	//	[NullAllowed, Export ("commandBufferWithUnretainedReferences")]
	//	[Verify (MethodToProperty)]
	//	MTLCommandBuffer CommandBufferWithUnretainedReferences { get; }

	//	// @required -(void)insertDebugCaptureBoundary __attribute__((availability(ios, introduced=8.0, deprecated=11.0))) __attribute__((availability(macos, introduced=10.11, deprecated=10.13)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use MTLCaptureScope instead")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use MTLCaptureScope instead")]
	//	[Introduced (PlatformName.MacOSX, 10, 11, message: "Use MTLCaptureScope instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 13, message: "Use MTLCaptureScope instead")]
	//	[Abstract]
	//	[Export ("insertDebugCaptureBoundary")]
	//	void InsertDebugCaptureBoundary ();
	//}

	//// @interface MTLStencilDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLStencilDescriptor : INSCopying
	//{
	//	// @property (nonatomic) MTLCompareFunction stencilCompareFunction;
	//	[Export ("stencilCompareFunction", ArgumentSemantic.Assign)]
	//	MTLCompareFunction StencilCompareFunction { get; set; }

	//	// @property (nonatomic) MTLStencilOperation stencilFailureOperation;
	//	[Export ("stencilFailureOperation", ArgumentSemantic.Assign)]
	//	MTLStencilOperation StencilFailureOperation { get; set; }

	//	// @property (nonatomic) MTLStencilOperation depthFailureOperation;
	//	[Export ("depthFailureOperation", ArgumentSemantic.Assign)]
	//	MTLStencilOperation DepthFailureOperation { get; set; }

	//	// @property (nonatomic) MTLStencilOperation depthStencilPassOperation;
	//	[Export ("depthStencilPassOperation", ArgumentSemantic.Assign)]
	//	MTLStencilOperation DepthStencilPassOperation { get; set; }

	//	// @property (nonatomic) uint32_t readMask;
	//	[Export ("readMask")]
	//	uint ReadMask { get; set; }

	//	// @property (nonatomic) uint32_t writeMask;
	//	[Export ("writeMask")]
	//	uint WriteMask { get; set; }
	//}

	//// @interface MTLDepthStencilDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLDepthStencilDescriptor : INSCopying
	//{
	//	// @property (nonatomic) MTLCompareFunction depthCompareFunction;
	//	[Export ("depthCompareFunction", ArgumentSemantic.Assign)]
	//	MTLCompareFunction DepthCompareFunction { get; set; }

	//	// @property (getter = isDepthWriteEnabled, nonatomic) BOOL depthWriteEnabled;
	//	[Export ("depthWriteEnabled")]
	//	bool DepthWriteEnabled { [Bind ("isDepthWriteEnabled")] get; set; }

	//	// @property (copy, nonatomic) MTLStencilDescriptor * _Null_unspecified frontFaceStencil;
	//	[Export ("frontFaceStencil", ArgumentSemantic.Copy)]
	//	MTLStencilDescriptor FrontFaceStencil { get; set; }

	//	// @property (copy, nonatomic) MTLStencilDescriptor * _Null_unspecified backFaceStencil;
	//	[Export ("backFaceStencil", ArgumentSemantic.Copy)]
	//	MTLStencilDescriptor BackFaceStencil { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable label;
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }
	//}

	//// @protocol MTLDepthStencilState <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLDepthStencilState
	//{
	//	// @required @property (readonly) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; }

	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }
	//}

	//// typedef void (^MTLDrawablePresentedHandler)(id<MTLDrawable> _Nonnull);
	//delegate void MTLDrawablePresentedHandler (MTLDrawable arg0);

	//// @protocol MTLDrawable <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLDrawable
	//{
	//	// @required -(void)present;
	//	[Abstract]
	//	[Export ("present")]
	//	void Present ();

	//	// @required -(void)presentAtTime:(CFTimeInterval)presentationTime;
	//	[Abstract]
	//	[Export ("presentAtTime:")]
	//	void PresentAtTime (double presentationTime);

	//	// @required -(void)presentAfterMinimumDuration:(CFTimeInterval)duration __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
	//	[NoMac, iOS (10,3)]
	//	[Abstract]
	//	[Export ("presentAfterMinimumDuration:")]
	//	void PresentAfterMinimumDuration (double duration);

	//	// @required -(void)addPresentedHandler:(MTLDrawablePresentedHandler _Nonnull)block __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
	//	[NoMac, iOS (10,3)]
	//	[Abstract]
	//	[Export ("addPresentedHandler:")]
	//	void AddPresentedHandler (MTLDrawablePresentedHandler block);

	//	// @required @property (readonly, nonatomic) CFTimeInterval presentedTime __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
	//	[NoMac, iOS (10, 3)]
	//	[Abstract]
	//	[Export ("presentedTime")]
	//	double PresentedTime { get; }

	//	// @required @property (readonly, nonatomic) NSUInteger drawableID __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
	//	[NoMac, iOS (10, 3)]
	//	[Abstract]
	//	[Export ("drawableID")]
	//	nuint DrawableID { get; }
	//}

	//// @interface MTLRenderPassAttachmentDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLRenderPassAttachmentDescriptor : INSCopying
	//{
	//	// @property (nonatomic, strong) id<MTLTexture> _Nullable texture;
	//	[NullAllowed, Export ("texture", ArgumentSemantic.Strong)]
	//	MTLTexture Texture { get; set; }

	//	// @property (nonatomic) NSUInteger level;
	//	[Export ("level")]
	//	nuint Level { get; set; }

	//	// @property (nonatomic) NSUInteger slice;
	//	[Export ("slice")]
	//	nuint Slice { get; set; }

	//	// @property (nonatomic) NSUInteger depthPlane;
	//	[Export ("depthPlane")]
	//	nuint DepthPlane { get; set; }

	//	// @property (nonatomic, strong) id<MTLTexture> _Nullable resolveTexture;
	//	[NullAllowed, Export ("resolveTexture", ArgumentSemantic.Strong)]
	//	MTLTexture ResolveTexture { get; set; }

	//	// @property (nonatomic) NSUInteger resolveLevel;
	//	[Export ("resolveLevel")]
	//	nuint ResolveLevel { get; set; }

	//	// @property (nonatomic) NSUInteger resolveSlice;
	//	[Export ("resolveSlice")]
	//	nuint ResolveSlice { get; set; }

	//	// @property (nonatomic) NSUInteger resolveDepthPlane;
	//	[Export ("resolveDepthPlane")]
	//	nuint ResolveDepthPlane { get; set; }

	//	// @property (nonatomic) MTLLoadAction loadAction;
	//	[Export ("loadAction", ArgumentSemantic.Assign)]
	//	MTLLoadAction LoadAction { get; set; }

	//	// @property (nonatomic) MTLStoreAction storeAction;
	//	[Export ("storeAction", ArgumentSemantic.Assign)]
	//	MTLStoreAction StoreAction { get; set; }

	//	// @property (nonatomic) MTLStoreActionOptions storeActionOptions __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Export ("storeActionOptions", ArgumentSemantic.Assign)]
	//	MTLStoreActionOptions StoreActionOptions { get; set; }
	//}

	//// @interface MTLRenderPassColorAttachmentDescriptor : MTLRenderPassAttachmentDescriptor
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(MTLRenderPassAttachmentDescriptor))]
	//interface MTLRenderPassColorAttachmentDescriptor
	//{
	//	// @property (nonatomic) MTLClearColor clearColor;
	//	[Export ("clearColor", ArgumentSemantic.Assign)]
	//	MTLClearColor ClearColor { get; set; }
	//}

	//// @interface MTLRenderPassDepthAttachmentDescriptor : MTLRenderPassAttachmentDescriptor
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(MTLRenderPassAttachmentDescriptor))]
	//interface MTLRenderPassDepthAttachmentDescriptor
	//{
	//	// @property (nonatomic) double clearDepth;
	//	[Export ("clearDepth")]
	//	double ClearDepth { get; set; }

	//	// @property (nonatomic) MTLMultisampleDepthResolveFilter depthResolveFilter __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10, 14), iOS (9, 0)]
	//	[Export ("depthResolveFilter", ArgumentSemantic.Assign)]
	//	MTLMultisampleDepthResolveFilter DepthResolveFilter { get; set; }
	//}

	//// @interface MTLRenderPassStencilAttachmentDescriptor : MTLRenderPassAttachmentDescriptor
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(MTLRenderPassAttachmentDescriptor))]
	//interface MTLRenderPassStencilAttachmentDescriptor
	//{
	//	// @property (nonatomic) uint32_t clearStencil;
	//	[Export ("clearStencil")]
	//	uint ClearStencil { get; set; }

	//	// @property (nonatomic) MTLMultisampleStencilResolveFilter stencilResolveFilter __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10, 14), iOS (12, 0)]
	//	[Export ("stencilResolveFilter", ArgumentSemantic.Assign)]
	//	MTLMultisampleStencilResolveFilter StencilResolveFilter { get; set; }
	//}

	//// @interface MTLRenderPassColorAttachmentDescriptorArray : NSObject
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLRenderPassColorAttachmentDescriptorArray
	//{
	//	// -(MTLRenderPassColorAttachmentDescriptor * _Nonnull)objectAtIndexedSubscript:(NSUInteger)attachmentIndex;
	//	[Export ("objectAtIndexedSubscript:")]
	//	MTLRenderPassColorAttachmentDescriptor ObjectAtIndexedSubscript (nuint attachmentIndex);

	//	// -(void)setObject:(MTLRenderPassColorAttachmentDescriptor * _Nullable)attachment atIndexedSubscript:(NSUInteger)attachmentIndex;
	//	[Export ("setObject:atIndexedSubscript:")]
	//	void SetObject ([NullAllowed] MTLRenderPassColorAttachmentDescriptor attachment, nuint attachmentIndex);
	//}

	//// @interface MTLRenderPassDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLRenderPassDescriptor : INSCopying
	//{
	//	// +(MTLRenderPassDescriptor * _Nonnull)renderPassDescriptor;
	//	[Static]
	//	[Export ("renderPassDescriptor")]
	//	[Verify (MethodToProperty)]
	//	MTLRenderPassDescriptor RenderPassDescriptor { get; }

	//	// @property (readonly) MTLRenderPassColorAttachmentDescriptorArray * _Nonnull colorAttachments;
	//	[Export ("colorAttachments")]
	//	MTLRenderPassColorAttachmentDescriptorArray ColorAttachments { get; }

	//	// @property (copy, nonatomic) MTLRenderPassDepthAttachmentDescriptor * _Null_unspecified depthAttachment;
	//	[Export ("depthAttachment", ArgumentSemantic.Copy)]
	//	MTLRenderPassDepthAttachmentDescriptor DepthAttachment { get; set; }

	//	// @property (copy, nonatomic) MTLRenderPassStencilAttachmentDescriptor * _Null_unspecified stencilAttachment;
	//	[Export ("stencilAttachment", ArgumentSemantic.Copy)]
	//	MTLRenderPassStencilAttachmentDescriptor StencilAttachment { get; set; }

	//	// @property (nonatomic, strong) id<MTLBuffer> _Nullable visibilityResultBuffer;
	//	[NullAllowed, Export ("visibilityResultBuffer", ArgumentSemantic.Strong)]
	//	MTLBuffer VisibilityResultBuffer { get; set; }

	//	// @property (nonatomic) NSUInteger renderTargetArrayLength __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (12, 0)]
	//	[Export ("renderTargetArrayLength")]
	//	nuint RenderTargetArrayLength { get; set; }

	//	// @property (nonatomic) NSUInteger imageblockSampleLength __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("imageblockSampleLength")]
	//	nuint ImageblockSampleLength { get; set; }

	//	// @property (nonatomic) NSUInteger threadgroupMemoryLength __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("threadgroupMemoryLength")]
	//	nuint ThreadgroupMemoryLength { get; set; }

	//	// @property (nonatomic) NSUInteger tileWidth __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("tileWidth")]
	//	nuint TileWidth { get; set; }

	//	// @property (nonatomic) NSUInteger tileHeight __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("tileHeight")]
	//	nuint TileHeight { get; set; }

	//	// @property (nonatomic) NSUInteger defaultRasterSampleCount __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("defaultRasterSampleCount")]
	//	nuint DefaultRasterSampleCount { get; set; }

	//	// @property (nonatomic) NSUInteger renderTargetWidth __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("renderTargetWidth")]
	//	nuint RenderTargetWidth { get; set; }

	//	// @property (nonatomic) NSUInteger renderTargetHeight __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("renderTargetHeight")]
	//	nuint RenderTargetHeight { get; set; }

	//	// -(void)setSamplePositions:(const MTLSamplePosition * _Nullable)positions count:(NSUInteger)count __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Export ("setSamplePositions:count:")]
	//	unsafe void SetSamplePositions ([NullAllowed] MTLSamplePosition* positions, nuint count);

	//	// -(NSUInteger)getSamplePositions:(MTLSamplePosition * _Nullable)positions count:(NSUInteger)count __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Export ("getSamplePositions:count:")]
	//	unsafe nuint GetSamplePositions ([NullAllowed] MTLSamplePosition* positions, nuint count);
	//}

	//// @interface MTLBufferLayoutDescriptor : NSObject <NSCopying>
	//[Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLBufferLayoutDescriptor : INSCopying
	//{
	//	// @property (assign, nonatomic) NSUInteger stride;
	//	[Export ("stride")]
	//	nuint Stride { get; set; }

	//	// @property (assign, nonatomic) MTLStepFunction stepFunction;
	//	[Export ("stepFunction", ArgumentSemantic.Assign)]
	//	MTLStepFunction StepFunction { get; set; }

	//	// @property (assign, nonatomic) NSUInteger stepRate;
	//	[Export ("stepRate")]
	//	nuint StepRate { get; set; }
	//}

	//// @interface MTLBufferLayoutDescriptorArray : NSObject
	//[Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLBufferLayoutDescriptorArray
	//{
	//	// -(MTLBufferLayoutDescriptor * _Nonnull)objectAtIndexedSubscript:(NSUInteger)index;
	//	[Export ("objectAtIndexedSubscript:")]
	//	MTLBufferLayoutDescriptor ObjectAtIndexedSubscript (nuint index);

	//	// -(void)setObject:(MTLBufferLayoutDescriptor * _Nullable)bufferDesc atIndexedSubscript:(NSUInteger)index;
	//	[Export ("setObject:atIndexedSubscript:")]
	//	void SetObject ([NullAllowed] MTLBufferLayoutDescriptor bufferDesc, nuint index);
	//}

	//// @interface MTLAttributeDescriptor : NSObject <NSCopying>
	//[Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLAttributeDescriptor : INSCopying
	//{
	//	// @property (assign, nonatomic) MTLAttributeFormat format;
	//	[Export ("format", ArgumentSemantic.Assign)]
	//	MTLAttributeFormat Format { get; set; }

	//	// @property (assign, nonatomic) NSUInteger offset;
	//	[Export ("offset")]
	//	nuint Offset { get; set; }

	//	// @property (assign, nonatomic) NSUInteger bufferIndex;
	//	[Export ("bufferIndex")]
	//	nuint BufferIndex { get; set; }
	//}

	//// @interface MTLAttributeDescriptorArray : NSObject
	//[Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLAttributeDescriptorArray
	//{
	//	// -(MTLAttributeDescriptor * _Nonnull)objectAtIndexedSubscript:(NSUInteger)index;
	//	[Export ("objectAtIndexedSubscript:")]
	//	MTLAttributeDescriptor ObjectAtIndexedSubscript (nuint index);

	//	// -(void)setObject:(MTLAttributeDescriptor * _Nullable)attributeDesc atIndexedSubscript:(NSUInteger)index;
	//	[Export ("setObject:atIndexedSubscript:")]
	//	void SetObject ([NullAllowed] MTLAttributeDescriptor attributeDesc, nuint index);
	//}

	//// @interface MTLStageInputOutputDescriptor : NSObject <NSCopying>
	//[Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLStageInputOutputDescriptor : INSCopying
	//{
	//	// +(MTLStageInputOutputDescriptor * _Nonnull)stageInputOutputDescriptor;
	//	[Static]
	//	[Export ("stageInputOutputDescriptor")]
	//	[Verify (MethodToProperty)]
	//	MTLStageInputOutputDescriptor StageInputOutputDescriptor { get; }

	//	// @property (readonly) MTLBufferLayoutDescriptorArray * _Nonnull layouts;
	//	[Export ("layouts")]
	//	MTLBufferLayoutDescriptorArray Layouts { get; }

	//	// @property (readonly) MTLAttributeDescriptorArray * _Nonnull attributes;
	//	[Export ("attributes")]
	//	MTLAttributeDescriptorArray Attributes { get; }

	//	// @property (assign, nonatomic) MTLIndexType indexType;
	//	[Export ("indexType", ArgumentSemantic.Assign)]
	//	MTLIndexType IndexType { get; set; }

	//	// @property (assign, nonatomic) NSUInteger indexBufferIndex;
	//	[Export ("indexBufferIndex")]
	//	nuint IndexBufferIndex { get; set; }

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();
	//}

	//// @interface MTLPipelineBufferDescriptor : NSObject <NSCopying>
	//[Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLPipelineBufferDescriptor : INSCopying
	//{
	//	// @property (nonatomic) MTLMutability mutability;
	//	[Export ("mutability", ArgumentSemantic.Assign)]
	//	MTLMutability Mutability { get; set; }
	//}

	//// @interface MTLPipelineBufferDescriptorArray : NSObject
	//[Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLPipelineBufferDescriptorArray
	//{
	//	// -(MTLPipelineBufferDescriptor * _Nonnull)objectAtIndexedSubscript:(NSUInteger)bufferIndex;
	//	[Export ("objectAtIndexedSubscript:")]
	//	MTLPipelineBufferDescriptor ObjectAtIndexedSubscript (nuint bufferIndex);

	//	// -(void)setObject:(MTLPipelineBufferDescriptor * _Nullable)buffer atIndexedSubscript:(NSUInteger)bufferIndex;
	//	[Export ("setObject:atIndexedSubscript:")]
	//	void SetObject ([NullAllowed] MTLPipelineBufferDescriptor buffer, nuint bufferIndex);
	//}

	//// @interface MTLComputePipelineReflection : NSObject
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLComputePipelineReflection
	//{
	//	// @property (readonly) NSArray<MTLArgument *> * _Nonnull arguments;
	//	[Export ("arguments")]
	//	MTLArgument[] Arguments { get; }
	//}

	//// @interface MTLComputePipelineDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLComputePipelineDescriptor : INSCopying
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable label;
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @property (readwrite, nonatomic, strong) id<MTLFunction> _Nullable computeFunction;
	//	[NullAllowed, Export ("computeFunction", ArgumentSemantic.Strong)]
	//	MTLFunction ComputeFunction { get; set; }

	//	// @property (readwrite, nonatomic) BOOL threadGroupSizeIsMultipleOfThreadExecutionWidth;
	//	[Export ("threadGroupSizeIsMultipleOfThreadExecutionWidth")]
	//	bool ThreadGroupSizeIsMultipleOfThreadExecutionWidth { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger maxTotalThreadsPerThreadgroup __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10, 14), iOS (12, 0)]
	//	[Export ("maxTotalThreadsPerThreadgroup")]
	//	nuint MaxTotalThreadsPerThreadgroup { get; set; }

	//	// @property (copy, nonatomic) MTLStageInputOutputDescriptor * _Nullable stageInputDescriptor __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[NullAllowed, Export ("stageInputDescriptor", ArgumentSemantic.Copy)]
	//	MTLStageInputOutputDescriptor StageInputDescriptor { get; set; }

	//	// @property (readonly) MTLPipelineBufferDescriptorArray * _Nonnull buffers __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Export ("buffers")]
	//	MTLPipelineBufferDescriptorArray Buffers { get; }

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();
	//}

	//// @protocol MTLComputePipelineState <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLComputePipelineState
	//{
	//	// @required @property (readonly) NSString * _Nullable label __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; }

	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required @property (readonly) NSUInteger maxTotalThreadsPerThreadgroup;
	//	[Abstract]
	//	[Export ("maxTotalThreadsPerThreadgroup")]
	//	nuint MaxTotalThreadsPerThreadgroup { get; }

	//	// @required @property (readonly) NSUInteger threadExecutionWidth;
	//	[Abstract]
	//	[Export ("threadExecutionWidth")]
	//	nuint ThreadExecutionWidth { get; }

	//	// @required @property (readonly) NSUInteger staticThreadgroupMemoryLength __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("staticThreadgroupMemoryLength")]
	//	nuint StaticThreadgroupMemoryLength { get; }

	//	// @required -(NSUInteger)imageblockMemoryLengthForDimensions:(MTLSize)imageblockDimensions __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("imageblockMemoryLengthForDimensions:")]
	//	nuint ImageblockMemoryLengthForDimensions (MTLSize imageblockDimensions);
	//}

	//// @protocol MTLRenderCommandEncoder <MTLCommandEncoder>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//interface MTLRenderCommandEncoder : IMTLCommandEncoder
	//{
	//	// @required -(void)setRenderPipelineState:(id<MTLRenderPipelineState> _Nonnull)pipelineState;
	//	[Abstract]
	//	[Export ("setRenderPipelineState:")]
	//	void SetRenderPipelineState (MTLRenderPipelineState pipelineState);

	//	// @required -(void)setVertexBytes:(const void * _Nonnull)bytes length:(NSUInteger)length atIndex:(NSUInteger)index __attribute__((availability(ios, introduced=8.3))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (8,3)]
	//	[Abstract]
	//	[Export ("setVertexBytes:length:atIndex:")]
	//	unsafe void SetVertexBytes (void* bytes, nuint length, nuint index);

	//	// @required -(void)setVertexBuffer:(id<MTLBuffer> _Nullable)buffer offset:(NSUInteger)offset atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setVertexBuffer:offset:atIndex:")]
	//	void SetVertexBuffer ([NullAllowed] MTLBuffer buffer, nuint offset, nuint index);

	//	// @required -(void)setVertexBufferOffset:(NSUInteger)offset atIndex:(NSUInteger)index __attribute__((availability(ios, introduced=8.3))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (8,3)]
	//	[Abstract]
	//	[Export ("setVertexBufferOffset:atIndex:")]
	//	void SetVertexBufferOffset (nuint offset, nuint index);

	//	// @required -(void)setVertexBuffers:(id<MTLBuffer>  _Nullable const * _Nonnull)buffers offsets:(const NSUInteger * _Nonnull)offsets withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setVertexBuffers:offsets:withRange:")]
	//	void SetVertexBuffers (MTLBuffer[] buffers, nuint[] offsets, NSRange range);

	//	// @required -(void)setVertexTexture:(id<MTLTexture> _Nullable)texture atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setVertexTexture:atIndex:")]
	//	void SetVertexTexture ([NullAllowed] MTLTexture texture, nuint index);

	//	// @required -(void)setVertexTextures:(id<MTLTexture>  _Nullable const * _Nonnull)textures withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setVertexTextures:withRange:")]
	//	void SetVertexTextures (MTLTexture[] textures, NSRange range);

	//	// @required -(void)setVertexSamplerState:(id<MTLSamplerState> _Nullable)sampler atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setVertexSamplerState:atIndex:")]
	//	void SetVertexSamplerState ([NullAllowed] MTLSamplerState sampler, nuint index);

	//	// @required -(void)setVertexSamplerStates:(id<MTLSamplerState>  _Nullable const * _Nonnull)samplers withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setVertexSamplerStates:withRange:")]
	//	void SetVertexSamplerStates (MTLSamplerState[] samplers, NSRange range);

	//	// @required -(void)setVertexSamplerState:(id<MTLSamplerState> _Nullable)sampler lodMinClamp:(float)lodMinClamp lodMaxClamp:(float)lodMaxClamp atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:")]
	//	void SetVertexSamplerState ([NullAllowed] MTLSamplerState sampler, float lodMinClamp, float lodMaxClamp, nuint index);

	//	// @required -(void)setVertexSamplerStates:(id<MTLSamplerState>  _Nullable const * _Nonnull)samplers lodMinClamps:(const float * _Nonnull)lodMinClamps lodMaxClamps:(const float * _Nonnull)lodMaxClamps withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:")]
	//	void SetVertexSamplerStates (MTLSamplerState[] samplers, float[] lodMinClamps, float[] lodMaxClamps, NSRange range);

	//	// @required -(void)setViewport:(MTLViewport)viewport;
	//	[Abstract]
	//	[Export ("setViewport:")]
	//	void SetViewport (MTLViewport viewport);

	//	// @required -(void)setViewports:(const MTLViewport * _Nonnull)viewports count:(NSUInteger)count __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (12,0)]
	//	[Abstract]
	//	[Export ("setViewports:count:")]
	//	void SetViewports (MTLViewport[] viewports, nuint count);

	//	// @required -(void)setFrontFacingWinding:(MTLWinding)frontFacingWinding;
	//	[Abstract]
	//	[Export ("setFrontFacingWinding:")]
	//	void SetFrontFacingWinding (MTLWinding frontFacingWinding);

	//	// @required -(void)setCullMode:(MTLCullMode)cullMode;
	//	[Abstract]
	//	[Export ("setCullMode:")]
	//	void SetCullMode (MTLCullMode cullMode);

	//	// @required -(void)setDepthClipMode:(MTLDepthClipMode)depthClipMode __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (11,0)]
	//	[Abstract]
	//	[Export ("setDepthClipMode:")]
	//	void SetDepthClipMode (MTLDepthClipMode depthClipMode);

	//	// @required -(void)setDepthBias:(float)depthBias slopeScale:(float)slopeScale clamp:(float)clamp;
	//	[Abstract]
	//	[Export ("setDepthBias:slopeScale:clamp:")]
	//	void SetDepthBias (float depthBias, float slopeScale, float clamp);

	//	// @required -(void)setScissorRect:(MTLScissorRect)rect;
	//	[Abstract]
	//	[Export ("setScissorRect:")]
	//	void SetScissorRect (MTLScissorRect rect);

	//	// @required -(void)setScissorRects:(const MTLScissorRect * _Nonnull)scissorRects count:(NSUInteger)count __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (12,0)]
	//	[Abstract]
	//	[Export ("setScissorRects:count:")]
	//	void SetScissorRects (MTLScissorRect[] scissorRects, nuint count);

	//	// @required -(void)setTriangleFillMode:(MTLTriangleFillMode)fillMode;
	//	[Abstract]
	//	[Export ("setTriangleFillMode:")]
	//	void SetTriangleFillMode (MTLTriangleFillMode fillMode);

	//	// @required -(void)setFragmentBytes:(const void * _Nonnull)bytes length:(NSUInteger)length atIndex:(NSUInteger)index __attribute__((availability(ios, introduced=8.3))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (8,3)]
	//	[Abstract]
	//	[Export ("setFragmentBytes:length:atIndex:")]
	//	unsafe void SetFragmentBytes (void* bytes, nuint length, nuint index);

	//	// @required -(void)setFragmentBuffer:(id<MTLBuffer> _Nullable)buffer offset:(NSUInteger)offset atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setFragmentBuffer:offset:atIndex:")]
	//	void SetFragmentBuffer ([NullAllowed] MTLBuffer buffer, nuint offset, nuint index);

	//	// @required -(void)setFragmentBufferOffset:(NSUInteger)offset atIndex:(NSUInteger)index __attribute__((availability(ios, introduced=8.3))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (8,3)]
	//	[Abstract]
	//	[Export ("setFragmentBufferOffset:atIndex:")]
	//	void SetFragmentBufferOffset (nuint offset, nuint index);

	//	// @required -(void)setFragmentBuffers:(id<MTLBuffer>  _Nullable const * _Nonnull)buffers offsets:(const NSUInteger * _Nonnull)offsets withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setFragmentBuffers:offsets:withRange:")]
	//	void SetFragmentBuffers (MTLBuffer[] buffers, nuint[] offsets, NSRange range);

	//	// @required -(void)setFragmentTexture:(id<MTLTexture> _Nullable)texture atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setFragmentTexture:atIndex:")]
	//	void SetFragmentTexture ([NullAllowed] MTLTexture texture, nuint index);

	//	// @required -(void)setFragmentTextures:(id<MTLTexture>  _Nullable const * _Nonnull)textures withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setFragmentTextures:withRange:")]
	//	void SetFragmentTextures (MTLTexture[] textures, NSRange range);

	//	// @required -(void)setFragmentSamplerState:(id<MTLSamplerState> _Nullable)sampler atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setFragmentSamplerState:atIndex:")]
	//	void SetFragmentSamplerState ([NullAllowed] MTLSamplerState sampler, nuint index);

	//	// @required -(void)setFragmentSamplerStates:(id<MTLSamplerState>  _Nullable const * _Nonnull)samplers withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setFragmentSamplerStates:withRange:")]
	//	void SetFragmentSamplerStates (MTLSamplerState[] samplers, NSRange range);

	//	// @required -(void)setFragmentSamplerState:(id<MTLSamplerState> _Nullable)sampler lodMinClamp:(float)lodMinClamp lodMaxClamp:(float)lodMaxClamp atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:")]
	//	void SetFragmentSamplerState ([NullAllowed] MTLSamplerState sampler, float lodMinClamp, float lodMaxClamp, nuint index);

	//	// @required -(void)setFragmentSamplerStates:(id<MTLSamplerState>  _Nullable const * _Nonnull)samplers lodMinClamps:(const float * _Nonnull)lodMinClamps lodMaxClamps:(const float * _Nonnull)lodMaxClamps withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:")]
	//	void SetFragmentSamplerStates (MTLSamplerState[] samplers, float[] lodMinClamps, float[] lodMaxClamps, NSRange range);

	//	// @required -(void)setBlendColorRed:(float)red green:(float)green blue:(float)blue alpha:(float)alpha;
	//	[Abstract]
	//	[Export ("setBlendColorRed:green:blue:alpha:")]
	//	void SetBlendColorRed (float red, float green, float blue, float alpha);

	//	// @required -(void)setDepthStencilState:(id<MTLDepthStencilState> _Nullable)depthStencilState;
	//	[Abstract]
	//	[Export ("setDepthStencilState:")]
	//	void SetDepthStencilState ([NullAllowed] MTLDepthStencilState depthStencilState);

	//	// @required -(void)setStencilReferenceValue:(uint32_t)referenceValue;
	//	[Abstract]
	//	[Export ("setStencilReferenceValue:")]
	//	void SetStencilReferenceValue (uint referenceValue);

	//	// @required -(void)setStencilFrontReferenceValue:(uint32_t)frontReferenceValue backReferenceValue:(uint32_t)backReferenceValue __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("setStencilFrontReferenceValue:backReferenceValue:")]
	//	void SetStencilFrontReferenceValue (uint frontReferenceValue, uint backReferenceValue);

	//	// @required -(void)setVisibilityResultMode:(MTLVisibilityResultMode)mode offset:(NSUInteger)offset;
	//	[Abstract]
	//	[Export ("setVisibilityResultMode:offset:")]
	//	void SetVisibilityResultMode (MTLVisibilityResultMode mode, nuint offset);

	//	// @required -(void)setColorStoreAction:(MTLStoreAction)storeAction atIndex:(NSUInteger)colorAttachmentIndex __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("setColorStoreAction:atIndex:")]
	//	void SetColorStoreAction (MTLStoreAction storeAction, nuint colorAttachmentIndex);

	//	// @required -(void)setDepthStoreAction:(MTLStoreAction)storeAction __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("setDepthStoreAction:")]
	//	void SetDepthStoreAction (MTLStoreAction storeAction);

	//	// @required -(void)setStencilStoreAction:(MTLStoreAction)storeAction __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("setStencilStoreAction:")]
	//	void SetStencilStoreAction (MTLStoreAction storeAction);

	//	// @required -(void)setColorStoreActionOptions:(MTLStoreActionOptions)storeActionOptions atIndex:(NSUInteger)colorAttachmentIndex __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("setColorStoreActionOptions:atIndex:")]
	//	void SetColorStoreActionOptions (MTLStoreActionOptions storeActionOptions, nuint colorAttachmentIndex);

	//	// @required -(void)setDepthStoreActionOptions:(MTLStoreActionOptions)storeActionOptions __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("setDepthStoreActionOptions:")]
	//	void SetDepthStoreActionOptions (MTLStoreActionOptions storeActionOptions);

	//	// @required -(void)setStencilStoreActionOptions:(MTLStoreActionOptions)storeActionOptions __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("setStencilStoreActionOptions:")]
	//	void SetStencilStoreActionOptions (MTLStoreActionOptions storeActionOptions);

	//	// @required -(void)drawPrimitives:(MTLPrimitiveType)primitiveType vertexStart:(NSUInteger)vertexStart vertexCount:(NSUInteger)vertexCount instanceCount:(NSUInteger)instanceCount;
	//	[Abstract]
	//	[Export ("drawPrimitives:vertexStart:vertexCount:instanceCount:")]
	//	void DrawPrimitives (MTLPrimitiveType primitiveType, nuint vertexStart, nuint vertexCount, nuint instanceCount);

	//	// @required -(void)drawPrimitives:(MTLPrimitiveType)primitiveType vertexStart:(NSUInteger)vertexStart vertexCount:(NSUInteger)vertexCount;
	//	[Abstract]
	//	[Export ("drawPrimitives:vertexStart:vertexCount:")]
	//	void DrawPrimitives (MTLPrimitiveType primitiveType, nuint vertexStart, nuint vertexCount);

	//	// @required -(void)drawIndexedPrimitives:(MTLPrimitiveType)primitiveType indexCount:(NSUInteger)indexCount indexType:(MTLIndexType)indexType indexBuffer:(id<MTLBuffer> _Nonnull)indexBuffer indexBufferOffset:(NSUInteger)indexBufferOffset instanceCount:(NSUInteger)instanceCount;
	//	[Abstract]
	//	[Export ("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:")]
	//	void DrawIndexedPrimitives (MTLPrimitiveType primitiveType, nuint indexCount, MTLIndexType indexType, MTLBuffer indexBuffer, nuint indexBufferOffset, nuint instanceCount);

	//	// @required -(void)drawIndexedPrimitives:(MTLPrimitiveType)primitiveType indexCount:(NSUInteger)indexCount indexType:(MTLIndexType)indexType indexBuffer:(id<MTLBuffer> _Nonnull)indexBuffer indexBufferOffset:(NSUInteger)indexBufferOffset;
	//	[Abstract]
	//	[Export ("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:")]
	//	void DrawIndexedPrimitives (MTLPrimitiveType primitiveType, nuint indexCount, MTLIndexType indexType, MTLBuffer indexBuffer, nuint indexBufferOffset);

	//	// @required -(void)drawPrimitives:(MTLPrimitiveType)primitiveType vertexStart:(NSUInteger)vertexStart vertexCount:(NSUInteger)vertexCount instanceCount:(NSUInteger)instanceCount baseInstance:(NSUInteger)baseInstance __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:")]
	//	void DrawPrimitives (MTLPrimitiveType primitiveType, nuint vertexStart, nuint vertexCount, nuint instanceCount, nuint baseInstance);

	//	// @required -(void)drawIndexedPrimitives:(MTLPrimitiveType)primitiveType indexCount:(NSUInteger)indexCount indexType:(MTLIndexType)indexType indexBuffer:(id<MTLBuffer> _Nonnull)indexBuffer indexBufferOffset:(NSUInteger)indexBufferOffset instanceCount:(NSUInteger)instanceCount baseVertex:(NSInteger)baseVertex baseInstance:(NSUInteger)baseInstance __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:")]
	//	void DrawIndexedPrimitives (MTLPrimitiveType primitiveType, nuint indexCount, MTLIndexType indexType, MTLBuffer indexBuffer, nuint indexBufferOffset, nuint instanceCount, nint baseVertex, nuint baseInstance);

	//	// @required -(void)drawPrimitives:(MTLPrimitiveType)primitiveType indirectBuffer:(id<MTLBuffer> _Nonnull)indirectBuffer indirectBufferOffset:(NSUInteger)indirectBufferOffset __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("drawPrimitives:indirectBuffer:indirectBufferOffset:")]
	//	void DrawPrimitives (MTLPrimitiveType primitiveType, MTLBuffer indirectBuffer, nuint indirectBufferOffset);

	//	// @required -(void)drawIndexedPrimitives:(MTLPrimitiveType)primitiveType indexType:(MTLIndexType)indexType indexBuffer:(id<MTLBuffer> _Nonnull)indexBuffer indexBufferOffset:(NSUInteger)indexBufferOffset indirectBuffer:(id<MTLBuffer> _Nonnull)indirectBuffer indirectBufferOffset:(NSUInteger)indirectBufferOffset __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:")]
	//	void DrawIndexedPrimitives (MTLPrimitiveType primitiveType, MTLIndexType indexType, MTLBuffer indexBuffer, nuint indexBufferOffset, MTLBuffer indirectBuffer, nuint indirectBufferOffset);

	//	// @required -(void)textureBarrier __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11, deprecated=10.14)));
	//	[Introduced (PlatformName.MacOSX, 10, 11)]
	//	[Deprecated (PlatformName.MacOSX, 10, 14)]
	//	[NoTV, NoiOS]
	//	[Abstract]
	//	[Export ("textureBarrier")]
	//	void TextureBarrier ();

	//	// @required -(void)updateFence:(id<MTLFence> _Nonnull)fence afterStages:(MTLRenderStages)stages __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (10,0)]
	//	[Abstract]
	//	[Export ("updateFence:afterStages:")]
	//	void UpdateFence (MTLFence fence, MTLRenderStages stages);

	//	// @required -(void)waitForFence:(id<MTLFence> _Nonnull)fence beforeStages:(MTLRenderStages)stages __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (10,0)]
	//	[Abstract]
	//	[Export ("waitForFence:beforeStages:")]
	//	void WaitForFence (MTLFence fence, MTLRenderStages stages);

	//	// @required -(void)setTessellationFactorBuffer:(id<MTLBuffer> _Nullable)buffer offset:(NSUInteger)offset instanceStride:(NSUInteger)instanceStride __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("setTessellationFactorBuffer:offset:instanceStride:")]
	//	void SetTessellationFactorBuffer ([NullAllowed] MTLBuffer buffer, nuint offset, nuint instanceStride);

	//	// @required -(void)setTessellationFactorScale:(float)scale __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("setTessellationFactorScale:")]
	//	void SetTessellationFactorScale (float scale);

	//	// @required -(void)drawPatches:(NSUInteger)numberOfPatchControlPoints patchStart:(NSUInteger)patchStart patchCount:(NSUInteger)patchCount patchIndexBuffer:(id<MTLBuffer> _Nullable)patchIndexBuffer patchIndexBufferOffset:(NSUInteger)patchIndexBufferOffset instanceCount:(NSUInteger)instanceCount baseInstance:(NSUInteger)baseInstance __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:")]
	//	void DrawPatches (nuint numberOfPatchControlPoints, nuint patchStart, nuint patchCount, [NullAllowed] MTLBuffer patchIndexBuffer, nuint patchIndexBufferOffset, nuint instanceCount, nuint baseInstance);

	//	// @required -(void)drawPatches:(NSUInteger)numberOfPatchControlPoints patchIndexBuffer:(id<MTLBuffer> _Nullable)patchIndexBuffer patchIndexBufferOffset:(NSUInteger)patchIndexBufferOffset indirectBuffer:(id<MTLBuffer> _Nonnull)indirectBuffer indirectBufferOffset:(NSUInteger)indirectBufferOffset __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (12,0)]
	//	[Abstract]
	//	[Export ("drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:")]
	//	void DrawPatches (nuint numberOfPatchControlPoints, [NullAllowed] MTLBuffer patchIndexBuffer, nuint patchIndexBufferOffset, MTLBuffer indirectBuffer, nuint indirectBufferOffset);

	//	// @required -(void)drawIndexedPatches:(NSUInteger)numberOfPatchControlPoints patchStart:(NSUInteger)patchStart patchCount:(NSUInteger)patchCount patchIndexBuffer:(id<MTLBuffer> _Nullable)patchIndexBuffer patchIndexBufferOffset:(NSUInteger)patchIndexBufferOffset controlPointIndexBuffer:(id<MTLBuffer> _Nonnull)controlPointIndexBuffer controlPointIndexBufferOffset:(NSUInteger)controlPointIndexBufferOffset instanceCount:(NSUInteger)instanceCount baseInstance:(NSUInteger)baseInstance __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:")]
	//	void DrawIndexedPatches (nuint numberOfPatchControlPoints, nuint patchStart, nuint patchCount, [NullAllowed] MTLBuffer patchIndexBuffer, nuint patchIndexBufferOffset, MTLBuffer controlPointIndexBuffer, nuint controlPointIndexBufferOffset, nuint instanceCount, nuint baseInstance);

	//	// @required -(void)drawIndexedPatches:(NSUInteger)numberOfPatchControlPoints patchIndexBuffer:(id<MTLBuffer> _Nullable)patchIndexBuffer patchIndexBufferOffset:(NSUInteger)patchIndexBufferOffset controlPointIndexBuffer:(id<MTLBuffer> _Nonnull)controlPointIndexBuffer controlPointIndexBufferOffset:(NSUInteger)controlPointIndexBufferOffset indirectBuffer:(id<MTLBuffer> _Nonnull)indirectBuffer indirectBufferOffset:(NSUInteger)indirectBufferOffset __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (12,0)]
	//	[Abstract]
	//	[Export ("drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:")]
	//	void DrawIndexedPatches (nuint numberOfPatchControlPoints, [NullAllowed] MTLBuffer patchIndexBuffer, nuint patchIndexBufferOffset, MTLBuffer controlPointIndexBuffer, nuint controlPointIndexBufferOffset, MTLBuffer indirectBuffer, nuint indirectBufferOffset);

	//	// @required @property (readonly) NSUInteger tileWidth __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Abstract]
	//	[Export ("tileWidth")]
	//	nuint TileWidth { get; }

	//	// @required @property (readonly) NSUInteger tileHeight __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Abstract]
	//	[Export ("tileHeight")]
	//	nuint TileHeight { get; }

	//	// @required -(void)setTileBytes:(const void * _Nonnull)bytes length:(NSUInteger)length atIndex:(NSUInteger)index __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("setTileBytes:length:atIndex:")]
	//	unsafe void SetTileBytes (void* bytes, nuint length, nuint index);

	//	// @required -(void)setTileBuffer:(id<MTLBuffer> _Nullable)buffer offset:(NSUInteger)offset atIndex:(NSUInteger)index __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("setTileBuffer:offset:atIndex:")]
	//	void SetTileBuffer ([NullAllowed] MTLBuffer buffer, nuint offset, nuint index);

	//	// @required -(void)setTileBufferOffset:(NSUInteger)offset atIndex:(NSUInteger)index __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("setTileBufferOffset:atIndex:")]
	//	void SetTileBufferOffset (nuint offset, nuint index);

	//	// @required -(void)setTileBuffers:(id<MTLBuffer>  _Nullable const * _Nonnull)buffers offsets:(const NSUInteger * _Nonnull)offsets withRange:(NSRange)range __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("setTileBuffers:offsets:withRange:")]
	//	void SetTileBuffers (MTLBuffer[] buffers, nuint[] offsets, NSRange range);

	//	// @required -(void)setTileTexture:(id<MTLTexture> _Nullable)texture atIndex:(NSUInteger)index __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("setTileTexture:atIndex:")]
	//	void SetTileTexture ([NullAllowed] MTLTexture texture, nuint index);

	//	// @required -(void)setTileTextures:(id<MTLTexture>  _Nullable const * _Nonnull)textures withRange:(NSRange)range __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("setTileTextures:withRange:")]
	//	void SetTileTextures (MTLTexture[] textures, NSRange range);

	//	// @required -(void)setTileSamplerState:(id<MTLSamplerState> _Nullable)sampler atIndex:(NSUInteger)index __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("setTileSamplerState:atIndex:")]
	//	void SetTileSamplerState ([NullAllowed] MTLSamplerState sampler, nuint index);

	//	// @required -(void)setTileSamplerStates:(id<MTLSamplerState>  _Nullable const * _Nonnull)samplers withRange:(NSRange)range __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("setTileSamplerStates:withRange:")]
	//	void SetTileSamplerStates (MTLSamplerState[] samplers, NSRange range);

	//	// @required -(void)setTileSamplerState:(id<MTLSamplerState> _Nullable)sampler lodMinClamp:(float)lodMinClamp lodMaxClamp:(float)lodMaxClamp atIndex:(NSUInteger)index __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:")]
	//	void SetTileSamplerState ([NullAllowed] MTLSamplerState sampler, float lodMinClamp, float lodMaxClamp, nuint index);

	//	// @required -(void)setTileSamplerStates:(id<MTLSamplerState>  _Nullable const * _Nonnull)samplers lodMinClamps:(const float * _Nonnull)lodMinClamps lodMaxClamps:(const float * _Nonnull)lodMaxClamps withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:")]
	//	void SetTileSamplerStates (MTLSamplerState[] samplers, float[] lodMinClamps, float[] lodMaxClamps, NSRange range);

	//	// @required -(void)dispatchThreadsPerTile:(MTLSize)threadsPerTile;
	//	[Abstract]
	//	[Export ("dispatchThreadsPerTile:")]
	//	void DispatchThreadsPerTile (MTLSize threadsPerTile);

	//	// @required -(void)setThreadgroupMemoryLength:(NSUInteger)length offset:(NSUInteger)offset atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setThreadgroupMemoryLength:offset:atIndex:")]
	//	void SetThreadgroupMemoryLength (nuint length, nuint offset, nuint index);

	//	// @required -(void)useResource:(id<MTLResource> _Nonnull)resource usage:(MTLResourceUsage)usage __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("useResource:usage:")]
	//	void UseResource (MTLResource resource, MTLResourceUsage usage);

	//	// @required -(void)useResources:(id<MTLResource>  _Nonnull const * _Nonnull)resources count:(NSUInteger)count usage:(MTLResourceUsage)usage __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("useResources:count:usage:")]
	//	void UseResources (MTLResource[] resources, nuint count, MTLResourceUsage usage);

	//	// @required -(void)useHeap:(id<MTLHeap> _Nonnull)heap __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("useHeap:")]
	//	void UseHeap (MTLHeap heap);

	//	// @required -(void)useHeaps:(id<MTLHeap>  _Nonnull const * _Nonnull)heaps count:(NSUInteger)count __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("useHeaps:count:")]
	//	void UseHeaps (MTLHeap[] heaps, nuint count);

	//	// @required -(void)executeCommandsInBuffer:(id<MTLIndirectCommandBuffer> _Nonnull)indirectCommandBuffer withRange:(NSRange)executionRange __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("executeCommandsInBuffer:withRange:")]
	//	void ExecuteCommandsInBuffer (MTLIndirectCommandBuffer indirectCommandBuffer, NSRange executionRange);

	//	// @required -(void)executeCommandsInBuffer:(id<MTLIndirectCommandBuffer> _Nonnull)indirectCommandbuffer indirectBuffer:(id<MTLBuffer> _Nonnull)indirectRangeBuffer indirectBufferOffset:(NSUInteger)indirectBufferOffset __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoiOS, Mac (10,14)]
	//	[Abstract]
	//	[Export ("executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:")]
	//	void ExecuteCommandsInBuffer (MTLIndirectCommandBuffer indirectCommandbuffer, MTLBuffer indirectRangeBuffer, nuint indirectBufferOffset);

	//	// @required -(void)memoryBarrierWithScope:(MTLBarrierScope)scope afterStages:(MTLRenderStages)after beforeStages:(MTLRenderStages)before __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoiOS, Mac (10,14)]
	//	[Abstract]
	//	[Export ("memoryBarrierWithScope:afterStages:beforeStages:")]
	//	void MemoryBarrierWithScope (MTLBarrierScope scope, MTLRenderStages after, MTLRenderStages before);

	//	// @required -(void)memoryBarrierWithResources:(id<MTLResource>  _Nonnull const * _Nonnull)resources count:(NSUInteger)count afterStages:(MTLRenderStages)after beforeStages:(MTLRenderStages)before __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoiOS, Mac (10,14)]
	//	[Abstract]
	//	[Export ("memoryBarrierWithResources:count:afterStages:beforeStages:")]
	//	void MemoryBarrierWithResources (MTLResource[] resources, nuint count, MTLRenderStages after, MTLRenderStages before);
	//}

	//// @interface MTLFunctionConstantValues : NSObject <NSCopying>
	//[Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLFunctionConstantValues : INSCopying
	//{
	//	// -(void)setConstantValue:(const void * _Nonnull)value type:(MTLDataType)type atIndex:(NSUInteger)index;
	//	[Export ("setConstantValue:type:atIndex:")]
	//	unsafe void SetConstantValue (void* value, MTLDataType type, nuint index);

	//	// -(void)setConstantValues:(const void * _Nonnull)values type:(MTLDataType)type withRange:(NSRange)range;
	//	[Export ("setConstantValues:type:withRange:")]
	//	unsafe void SetConstantValues (void* values, MTLDataType type, NSRange range);

	//	// -(void)setConstantValue:(const void * _Nonnull)value type:(MTLDataType)type withName:(NSString * _Nonnull)name;
	//	[Export ("setConstantValue:type:withName:")]
	//	unsafe void SetConstantValue (void* value, MTLDataType type, string name);

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();
	//}

	//// @interface MTLRenderPipelineColorAttachmentDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLRenderPipelineColorAttachmentDescriptor : INSCopying
	//{
	//	// @property (nonatomic) MTLPixelFormat pixelFormat;
	//	[Export ("pixelFormat", ArgumentSemantic.Assign)]
	//	MTLPixelFormat PixelFormat { get; set; }

	//	// @property (getter = isBlendingEnabled, nonatomic) BOOL blendingEnabled;
	//	[Export ("blendingEnabled")]
	//	bool BlendingEnabled { [Bind ("isBlendingEnabled")] get; set; }

	//	// @property (nonatomic) MTLBlendFactor sourceRGBBlendFactor;
	//	[Export ("sourceRGBBlendFactor", ArgumentSemantic.Assign)]
	//	MTLBlendFactor SourceRGBBlendFactor { get; set; }

	//	// @property (nonatomic) MTLBlendFactor destinationRGBBlendFactor;
	//	[Export ("destinationRGBBlendFactor", ArgumentSemantic.Assign)]
	//	MTLBlendFactor DestinationRGBBlendFactor { get; set; }

	//	// @property (nonatomic) MTLBlendOperation rgbBlendOperation;
	//	[Export ("rgbBlendOperation", ArgumentSemantic.Assign)]
	//	MTLBlendOperation RgbBlendOperation { get; set; }

	//	// @property (nonatomic) MTLBlendFactor sourceAlphaBlendFactor;
	//	[Export ("sourceAlphaBlendFactor", ArgumentSemantic.Assign)]
	//	MTLBlendFactor SourceAlphaBlendFactor { get; set; }

	//	// @property (nonatomic) MTLBlendFactor destinationAlphaBlendFactor;
	//	[Export ("destinationAlphaBlendFactor", ArgumentSemantic.Assign)]
	//	MTLBlendFactor DestinationAlphaBlendFactor { get; set; }

	//	// @property (nonatomic) MTLBlendOperation alphaBlendOperation;
	//	[Export ("alphaBlendOperation", ArgumentSemantic.Assign)]
	//	MTLBlendOperation AlphaBlendOperation { get; set; }

	//	// @property (nonatomic) MTLColorWriteMask writeMask;
	//	[Export ("writeMask", ArgumentSemantic.Assign)]
	//	MTLColorWriteMask WriteMask { get; set; }
	//}

	//// @interface MTLRenderPipelineReflection : NSObject
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLRenderPipelineReflection
	//{
	//	// @property (readonly) NSArray<MTLArgument *> * _Nullable vertexArguments;
	//	[NullAllowed, Export ("vertexArguments")]
	//	MTLArgument[] VertexArguments { get; }

	//	// @property (readonly) NSArray<MTLArgument *> * _Nullable fragmentArguments;
	//	[NullAllowed, Export ("fragmentArguments")]
	//	MTLArgument[] FragmentArguments { get; }

	//	// @property (readonly) NSArray<MTLArgument *> * _Nullable tileArguments __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[NullAllowed, Export ("tileArguments")]
	//	MTLArgument[] TileArguments { get; }
	//}

	//// @interface MTLRenderPipelineDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLRenderPipelineDescriptor : INSCopying
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable label;
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @property (readwrite, nonatomic, strong) id<MTLFunction> _Nullable vertexFunction;
	//	[NullAllowed, Export ("vertexFunction", ArgumentSemantic.Strong)]
	//	MTLFunction VertexFunction { get; set; }

	//	// @property (readwrite, nonatomic, strong) id<MTLFunction> _Nullable fragmentFunction;
	//	[NullAllowed, Export ("fragmentFunction", ArgumentSemantic.Strong)]
	//	MTLFunction FragmentFunction { get; set; }

	//	// @property (copy, nonatomic) MTLVertexDescriptor * _Nullable vertexDescriptor;
	//	[NullAllowed, Export ("vertexDescriptor", ArgumentSemantic.Copy)]
	//	MTLVertexDescriptor VertexDescriptor { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger sampleCount;
	//	[Export ("sampleCount")]
	//	nuint SampleCount { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger rasterSampleCount;
	//	[Export ("rasterSampleCount")]
	//	nuint RasterSampleCount { get; set; }

	//	// @property (getter = isAlphaToCoverageEnabled, readwrite, nonatomic) BOOL alphaToCoverageEnabled;
	//	[Export ("alphaToCoverageEnabled")]
	//	bool AlphaToCoverageEnabled { [Bind ("isAlphaToCoverageEnabled")] get; set; }

	//	// @property (getter = isAlphaToOneEnabled, readwrite, nonatomic) BOOL alphaToOneEnabled;
	//	[Export ("alphaToOneEnabled")]
	//	bool AlphaToOneEnabled { [Bind ("isAlphaToOneEnabled")] get; set; }

	//	// @property (getter = isRasterizationEnabled, readwrite, nonatomic) BOOL rasterizationEnabled;
	//	[Export ("rasterizationEnabled")]
	//	bool RasterizationEnabled { [Bind ("isRasterizationEnabled")] get; set; }

	//	// @property (readonly) MTLRenderPipelineColorAttachmentDescriptorArray * _Nonnull colorAttachments;
	//	[Export ("colorAttachments")]
	//	MTLRenderPipelineColorAttachmentDescriptorArray ColorAttachments { get; }

	//	// @property (nonatomic) MTLPixelFormat depthAttachmentPixelFormat;
	//	[Export ("depthAttachmentPixelFormat", ArgumentSemantic.Assign)]
	//	MTLPixelFormat DepthAttachmentPixelFormat { get; set; }

	//	// @property (nonatomic) MTLPixelFormat stencilAttachmentPixelFormat;
	//	[Export ("stencilAttachmentPixelFormat", ArgumentSemantic.Assign)]
	//	MTLPixelFormat StencilAttachmentPixelFormat { get; set; }

	//	// @property (readwrite, nonatomic) MTLPrimitiveTopologyClass inputPrimitiveTopology __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (12, 0)]
	//	[Export ("inputPrimitiveTopology", ArgumentSemantic.Assign)]
	//	MTLPrimitiveTopologyClass InputPrimitiveTopology { get; set; }

	//	// @property (readwrite, nonatomic) MTLTessellationPartitionMode tessellationPartitionMode __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("tessellationPartitionMode", ArgumentSemantic.Assign)]
	//	MTLTessellationPartitionMode TessellationPartitionMode { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger maxTessellationFactor __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("maxTessellationFactor")]
	//	nuint MaxTessellationFactor { get; set; }

	//	// @property (getter = isTessellationFactorScaleEnabled, readwrite, nonatomic) BOOL tessellationFactorScaleEnabled __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("tessellationFactorScaleEnabled")]
	//	bool TessellationFactorScaleEnabled { [Bind ("isTessellationFactorScaleEnabled")] get; set; }

	//	// @property (readwrite, nonatomic) MTLTessellationFactorFormat tessellationFactorFormat __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("tessellationFactorFormat", ArgumentSemantic.Assign)]
	//	MTLTessellationFactorFormat TessellationFactorFormat { get; set; }

	//	// @property (readwrite, nonatomic) MTLTessellationControlPointIndexType tessellationControlPointIndexType __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("tessellationControlPointIndexType", ArgumentSemantic.Assign)]
	//	MTLTessellationControlPointIndexType TessellationControlPointIndexType { get; set; }

	//	// @property (readwrite, nonatomic) MTLTessellationFactorStepFunction tessellationFactorStepFunction __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("tessellationFactorStepFunction", ArgumentSemantic.Assign)]
	//	MTLTessellationFactorStepFunction TessellationFactorStepFunction { get; set; }

	//	// @property (readwrite, nonatomic) MTLWinding tessellationOutputWindingOrder __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10, 12), iOS (10, 0)]
	//	[Export ("tessellationOutputWindingOrder", ArgumentSemantic.Assign)]
	//	MTLWinding TessellationOutputWindingOrder { get; set; }

	//	// @property (readonly) MTLPipelineBufferDescriptorArray * _Nonnull vertexBuffers __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Export ("vertexBuffers")]
	//	MTLPipelineBufferDescriptorArray VertexBuffers { get; }

	//	// @property (readonly) MTLPipelineBufferDescriptorArray * _Nonnull fragmentBuffers __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Export ("fragmentBuffers")]
	//	MTLPipelineBufferDescriptorArray FragmentBuffers { get; }

	//	// @property (readwrite, nonatomic) BOOL supportIndirectCommandBuffers __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10, 14), iOS (12, 0)]
	//	[Export ("supportIndirectCommandBuffers")]
	//	bool SupportIndirectCommandBuffers { get; set; }

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();
	//}

	//// @protocol MTLRenderPipelineState <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLRenderPipelineState
	//{
	//	// @required @property (readonly) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; }

	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required @property (readonly) NSUInteger maxTotalThreadsPerThreadgroup __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Abstract]
	//	[Export ("maxTotalThreadsPerThreadgroup")]
	//	nuint MaxTotalThreadsPerThreadgroup { get; }

	//	// @required @property (readonly) BOOL threadgroupSizeMatchesTileSize __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Abstract]
	//	[Export ("threadgroupSizeMatchesTileSize")]
	//	bool ThreadgroupSizeMatchesTileSize { get; }

	//	// @required @property (readonly) NSUInteger imageblockSampleLength __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Abstract]
	//	[Export ("imageblockSampleLength")]
	//	nuint ImageblockSampleLength { get; }

	//	// @required -(NSUInteger)imageblockMemoryLengthForDimensions:(MTLSize)imageblockDimensions __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Abstract]
	//	[Export ("imageblockMemoryLengthForDimensions:")]
	//	nuint ImageblockMemoryLengthForDimensions (MTLSize imageblockDimensions);

	//	// @required @property (readonly) BOOL supportIndirectCommandBuffers __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10, 14), iOS (12, 0)]
	//	[Abstract]
	//	[Export ("supportIndirectCommandBuffers")]
	//	bool SupportIndirectCommandBuffers { get; }
	//}

	//// @interface MTLRenderPipelineColorAttachmentDescriptorArray : NSObject
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLRenderPipelineColorAttachmentDescriptorArray
	//{
	//	// -(MTLRenderPipelineColorAttachmentDescriptor * _Nonnull)objectAtIndexedSubscript:(NSUInteger)attachmentIndex;
	//	[Export ("objectAtIndexedSubscript:")]
	//	MTLRenderPipelineColorAttachmentDescriptor ObjectAtIndexedSubscript (nuint attachmentIndex);

	//	// -(void)setObject:(MTLRenderPipelineColorAttachmentDescriptor * _Nullable)attachment atIndexedSubscript:(NSUInteger)attachmentIndex;
	//	[Export ("setObject:atIndexedSubscript:")]
	//	void SetObject ([NullAllowed] MTLRenderPipelineColorAttachmentDescriptor attachment, nuint attachmentIndex);
	//}

	//// @interface MTLTileRenderPipelineColorAttachmentDescriptor : NSObject <NSCopying>
	//[NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLTileRenderPipelineColorAttachmentDescriptor : INSCopying
	//{
	//	// @property (nonatomic) MTLPixelFormat pixelFormat;
	//	[Export ("pixelFormat", ArgumentSemantic.Assign)]
	//	MTLPixelFormat PixelFormat { get; set; }
	//}

	//// @interface MTLTileRenderPipelineColorAttachmentDescriptorArray : NSObject
	//[NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLTileRenderPipelineColorAttachmentDescriptorArray
	//{
	//	// -(MTLTileRenderPipelineColorAttachmentDescriptor * _Nonnull)objectAtIndexedSubscript:(NSUInteger)attachmentIndex;
	//	[Export ("objectAtIndexedSubscript:")]
	//	MTLTileRenderPipelineColorAttachmentDescriptor ObjectAtIndexedSubscript (nuint attachmentIndex);

	//	// -(void)setObject:(MTLTileRenderPipelineColorAttachmentDescriptor * _Nonnull)attachment atIndexedSubscript:(NSUInteger)attachmentIndex;
	//	[Export ("setObject:atIndexedSubscript:")]
	//	void SetObject (MTLTileRenderPipelineColorAttachmentDescriptor attachment, nuint attachmentIndex);
	//}

	//// @interface MTLTileRenderPipelineDescriptor : NSObject <NSCopying>
	//[NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLTileRenderPipelineDescriptor : INSCopying
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable label;
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @property (readwrite, nonatomic, strong) id<MTLFunction> _Nonnull tileFunction;
	//	[Export ("tileFunction", ArgumentSemantic.Strong)]
	//	MTLFunction TileFunction { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger rasterSampleCount;
	//	[Export ("rasterSampleCount")]
	//	nuint RasterSampleCount { get; set; }

	//	// @property (readonly) MTLTileRenderPipelineColorAttachmentDescriptorArray * _Nonnull colorAttachments;
	//	[Export ("colorAttachments")]
	//	MTLTileRenderPipelineColorAttachmentDescriptorArray ColorAttachments { get; }

	//	// @property (readwrite, nonatomic) BOOL threadgroupSizeMatchesTileSize;
	//	[Export ("threadgroupSizeMatchesTileSize")]
	//	bool ThreadgroupSizeMatchesTileSize { get; set; }

	//	// @property (readonly) MTLPipelineBufferDescriptorArray * _Nonnull tileBuffers __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("tileBuffers")]
	//	MTLPipelineBufferDescriptorArray TileBuffers { get; }

	//	// @property (readwrite, nonatomic) NSUInteger maxTotalThreadsPerThreadgroup __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoMac, iOS (12, 0)]
	//	[Export ("maxTotalThreadsPerThreadgroup")]
	//	nuint MaxTotalThreadsPerThreadgroup { get; set; }

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();
	//}

	//// @interface MTLVertexBufferLayoutDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLVertexBufferLayoutDescriptor : INSCopying
	//{
	//	// @property (assign, nonatomic) NSUInteger stride;
	//	[Export ("stride")]
	//	nuint Stride { get; set; }

	//	// @property (assign, nonatomic) MTLVertexStepFunction stepFunction;
	//	[Export ("stepFunction", ArgumentSemantic.Assign)]
	//	MTLVertexStepFunction StepFunction { get; set; }

	//	// @property (assign, nonatomic) NSUInteger stepRate;
	//	[Export ("stepRate")]
	//	nuint StepRate { get; set; }
	//}

	//// @interface MTLVertexBufferLayoutDescriptorArray : NSObject
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLVertexBufferLayoutDescriptorArray
	//{
	//	// -(MTLVertexBufferLayoutDescriptor * _Nonnull)objectAtIndexedSubscript:(NSUInteger)index;
	//	[Export ("objectAtIndexedSubscript:")]
	//	MTLVertexBufferLayoutDescriptor ObjectAtIndexedSubscript (nuint index);

	//	// -(void)setObject:(MTLVertexBufferLayoutDescriptor * _Nullable)bufferDesc atIndexedSubscript:(NSUInteger)index;
	//	[Export ("setObject:atIndexedSubscript:")]
	//	void SetObject ([NullAllowed] MTLVertexBufferLayoutDescriptor bufferDesc, nuint index);
	//}

	//// @interface MTLVertexAttributeDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLVertexAttributeDescriptor : INSCopying
	//{
	//	// @property (assign, nonatomic) MTLVertexFormat format;
	//	[Export ("format", ArgumentSemantic.Assign)]
	//	MTLVertexFormat Format { get; set; }

	//	// @property (assign, nonatomic) NSUInteger offset;
	//	[Export ("offset")]
	//	nuint Offset { get; set; }

	//	// @property (assign, nonatomic) NSUInteger bufferIndex;
	//	[Export ("bufferIndex")]
	//	nuint BufferIndex { get; set; }
	//}

	//// @interface MTLVertexAttributeDescriptorArray : NSObject
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLVertexAttributeDescriptorArray
	//{
	//	// -(MTLVertexAttributeDescriptor * _Nonnull)objectAtIndexedSubscript:(NSUInteger)index;
	//	[Export ("objectAtIndexedSubscript:")]
	//	MTLVertexAttributeDescriptor ObjectAtIndexedSubscript (nuint index);

	//	// -(void)setObject:(MTLVertexAttributeDescriptor * _Nullable)attributeDesc atIndexedSubscript:(NSUInteger)index;
	//	[Export ("setObject:atIndexedSubscript:")]
	//	void SetObject ([NullAllowed] MTLVertexAttributeDescriptor attributeDesc, nuint index);
	//}

	//// @interface MTLVertexDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLVertexDescriptor : INSCopying
	//{
	//	// +(MTLVertexDescriptor * _Nonnull)vertexDescriptor;
	//	[Static]
	//	[Export ("vertexDescriptor")]
	//	[Verify (MethodToProperty)]
	//	MTLVertexDescriptor VertexDescriptor { get; }

	//	// @property (readonly) MTLVertexBufferLayoutDescriptorArray * _Nonnull layouts;
	//	[Export ("layouts")]
	//	MTLVertexBufferLayoutDescriptorArray Layouts { get; }

	//	// @property (readonly) MTLVertexAttributeDescriptorArray * _Nonnull attributes;
	//	[Export ("attributes")]
	//	MTLVertexAttributeDescriptorArray Attributes { get; }

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();
	//}

	//// @protocol MTLParallelRenderCommandEncoder <MTLCommandEncoder>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//interface MTLParallelRenderCommandEncoder : IMTLCommandEncoder
	//{
	//	// @required -(id<MTLRenderCommandEncoder> _Nullable)renderCommandEncoder;
	//	[Abstract]
	//	[NullAllowed, Export ("renderCommandEncoder")]
	//	[Verify (MethodToProperty)]
	//	MTLRenderCommandEncoder RenderCommandEncoder { get; }

	//	// @required -(void)setColorStoreAction:(MTLStoreAction)storeAction atIndex:(NSUInteger)colorAttachmentIndex __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("setColorStoreAction:atIndex:")]
	//	void SetColorStoreAction (MTLStoreAction storeAction, nuint colorAttachmentIndex);

	//	// @required -(void)setDepthStoreAction:(MTLStoreAction)storeAction __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("setDepthStoreAction:")]
	//	void SetDepthStoreAction (MTLStoreAction storeAction);

	//	// @required -(void)setStencilStoreAction:(MTLStoreAction)storeAction __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Mac (10,12), iOS (10,0)]
	//	[Abstract]
	//	[Export ("setStencilStoreAction:")]
	//	void SetStencilStoreAction (MTLStoreAction storeAction);

	//	// @required -(void)setColorStoreActionOptions:(MTLStoreActionOptions)storeActionOptions atIndex:(NSUInteger)colorAttachmentIndex __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("setColorStoreActionOptions:atIndex:")]
	//	void SetColorStoreActionOptions (MTLStoreActionOptions storeActionOptions, nuint colorAttachmentIndex);

	//	// @required -(void)setDepthStoreActionOptions:(MTLStoreActionOptions)storeActionOptions __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("setDepthStoreActionOptions:")]
	//	void SetDepthStoreActionOptions (MTLStoreActionOptions storeActionOptions);

	//	// @required -(void)setStencilStoreActionOptions:(MTLStoreActionOptions)storeActionOptions __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("setStencilStoreActionOptions:")]
	//	void SetStencilStoreActionOptions (MTLStoreActionOptions storeActionOptions);
	//}

	//// @interface MTLSamplerDescriptor : NSObject <NSCopying>
	//[Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLSamplerDescriptor : INSCopying
	//{
	//	// @property (nonatomic) MTLSamplerMinMagFilter minFilter;
	//	[Export ("minFilter", ArgumentSemantic.Assign)]
	//	MTLSamplerMinMagFilter MinFilter { get; set; }

	//	// @property (nonatomic) MTLSamplerMinMagFilter magFilter;
	//	[Export ("magFilter", ArgumentSemantic.Assign)]
	//	MTLSamplerMinMagFilter MagFilter { get; set; }

	//	// @property (nonatomic) MTLSamplerMipFilter mipFilter;
	//	[Export ("mipFilter", ArgumentSemantic.Assign)]
	//	MTLSamplerMipFilter MipFilter { get; set; }

	//	// @property (nonatomic) NSUInteger maxAnisotropy;
	//	[Export ("maxAnisotropy")]
	//	nuint MaxAnisotropy { get; set; }

	//	// @property (nonatomic) MTLSamplerAddressMode sAddressMode;
	//	[Export ("sAddressMode", ArgumentSemantic.Assign)]
	//	MTLSamplerAddressMode SAddressMode { get; set; }

	//	// @property (nonatomic) MTLSamplerAddressMode tAddressMode;
	//	[Export ("tAddressMode", ArgumentSemantic.Assign)]
	//	MTLSamplerAddressMode TAddressMode { get; set; }

	//	// @property (nonatomic) MTLSamplerAddressMode rAddressMode;
	//	[Export ("rAddressMode", ArgumentSemantic.Assign)]
	//	MTLSamplerAddressMode RAddressMode { get; set; }

	//	// @property (nonatomic) MTLSamplerBorderColor borderColor __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.12)));
	//	[NoiOS, Mac (10, 12)]
	//	[Export ("borderColor", ArgumentSemantic.Assign)]
	//	MTLSamplerBorderColor BorderColor { get; set; }

	//	// @property (nonatomic) BOOL normalizedCoordinates;
	//	[Export ("normalizedCoordinates")]
	//	bool NormalizedCoordinates { get; set; }

	//	// @property (nonatomic) float lodMinClamp;
	//	[Export ("lodMinClamp")]
	//	float LodMinClamp { get; set; }

	//	// @property (nonatomic) float lodMaxClamp;
	//	[Export ("lodMaxClamp")]
	//	float LodMaxClamp { get; set; }

	//	// @property (nonatomic) BOOL lodAverage __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=9.0)));
	//	[NoMac, iOS (9, 0)]
	//	[Export ("lodAverage")]
	//	bool LodAverage { get; set; }

	//	// @property (nonatomic) MTLCompareFunction compareFunction __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Mac (10, 11), iOS (9, 0)]
	//	[Export ("compareFunction", ArgumentSemantic.Assign)]
	//	MTLCompareFunction CompareFunction { get; set; }

	//	// @property (nonatomic) BOOL supportArgumentBuffers __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Export ("supportArgumentBuffers")]
	//	bool SupportArgumentBuffers { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable label;
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }
	//}

	//// @protocol MTLSamplerState <NSObject>
	//[Mac (10,11), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLSamplerState
	//{
	//	// @required @property (readonly) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; }

	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }
	//}

	//// @interface MTLHeapDescriptor : NSObject <NSCopying>
	//[Mac (10,13), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLHeapDescriptor : INSCopying
	//{
	//	// @property (readwrite, nonatomic) NSUInteger size;
	//	[Export ("size")]
	//	nuint Size { get; set; }

	//	// @property (readwrite, nonatomic) MTLStorageMode storageMode;
	//	[Export ("storageMode", ArgumentSemantic.Assign)]
	//	MTLStorageMode StorageMode { get; set; }

	//	// @property (readwrite, nonatomic) MTLCPUCacheMode cpuCacheMode;
	//	[Export ("cpuCacheMode", ArgumentSemantic.Assign)]
	//	MTLCPUCacheMode CpuCacheMode { get; set; }
	//}

	//// @protocol MTLHeap <NSObject>
	//[Mac (10,13), iOS (10,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLHeap
	//{
	//	// @required @property (copy, atomic) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required @property (readonly) MTLStorageMode storageMode;
	//	[Abstract]
	//	[Export ("storageMode")]
	//	MTLStorageMode StorageMode { get; }

	//	// @required @property (readonly) MTLCPUCacheMode cpuCacheMode;
	//	[Abstract]
	//	[Export ("cpuCacheMode")]
	//	MTLCPUCacheMode CpuCacheMode { get; }

	//	// @required @property (readonly) NSUInteger size;
	//	[Abstract]
	//	[Export ("size")]
	//	nuint Size { get; }

	//	// @required @property (readonly) NSUInteger usedSize;
	//	[Abstract]
	//	[Export ("usedSize")]
	//	nuint UsedSize { get; }

	//	// @required @property (readonly) NSUInteger currentAllocatedSize __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("currentAllocatedSize")]
	//	nuint CurrentAllocatedSize { get; }

	//	// @required -(NSUInteger)maxAvailableSizeWithAlignment:(NSUInteger)alignment;
	//	[Abstract]
	//	[Export ("maxAvailableSizeWithAlignment:")]
	//	nuint MaxAvailableSizeWithAlignment (nuint alignment);

	//	// @required -(id<MTLBuffer> _Nullable)newBufferWithLength:(NSUInteger)length options:(MTLResourceOptions)options;
	//	[Abstract]
	//	[Export ("newBufferWithLength:options:")]
	//	[return: NullAllowed]
	//	MTLBuffer NewBufferWithLength (nuint length, MTLResourceOptions options);

	//	// @required -(id<MTLTexture> _Nullable)newTextureWithDescriptor:(MTLTextureDescriptor * _Nonnull)desc;
	//	[Abstract]
	//	[Export ("newTextureWithDescriptor:")]
	//	[return: NullAllowed]
	//	MTLTexture NewTextureWithDescriptor (MTLTextureDescriptor desc);

	//	// @required -(MTLPurgeableState)setPurgeableState:(MTLPurgeableState)state;
	//	[Abstract]
	//	[Export ("setPurgeableState:")]
	//	MTLPurgeableState SetPurgeableState (MTLPurgeableState state);
	//}

	//// @protocol MTLArgumentEncoder <NSObject>
	//[Mac (10,13), iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLArgumentEncoder
	//{
	//	// @required @property (readonly) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required @property (copy, atomic) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @required @property (readonly) NSUInteger encodedLength;
	//	[Abstract]
	//	[Export ("encodedLength")]
	//	nuint EncodedLength { get; }

	//	// @required @property (readonly) NSUInteger alignment;
	//	[Abstract]
	//	[Export ("alignment")]
	//	nuint Alignment { get; }

	//	// @required -(void)setArgumentBuffer:(id<MTLBuffer> _Nullable)argumentBuffer offset:(NSUInteger)offset;
	//	[Abstract]
	//	[Export ("setArgumentBuffer:offset:")]
	//	void SetArgumentBuffer ([NullAllowed] MTLBuffer argumentBuffer, nuint offset);

	//	// @required -(void)setArgumentBuffer:(id<MTLBuffer> _Nullable)argumentBuffer startOffset:(NSUInteger)startOffset arrayElement:(NSUInteger)arrayElement;
	//	[Abstract]
	//	[Export ("setArgumentBuffer:startOffset:arrayElement:")]
	//	void SetArgumentBuffer ([NullAllowed] MTLBuffer argumentBuffer, nuint startOffset, nuint arrayElement);

	//	// @required -(void)setBuffer:(id<MTLBuffer> _Nullable)buffer offset:(NSUInteger)offset atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setBuffer:offset:atIndex:")]
	//	void SetBuffer ([NullAllowed] MTLBuffer buffer, nuint offset, nuint index);

	//	// @required -(void)setBuffers:(id<MTLBuffer>  _Nullable const * _Nonnull)buffers offsets:(const NSUInteger * _Nonnull)offsets withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setBuffers:offsets:withRange:")]
	//	void SetBuffers (MTLBuffer[] buffers, nuint[] offsets, NSRange range);

	//	// @required -(void)setTexture:(id<MTLTexture> _Nullable)texture atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setTexture:atIndex:")]
	//	void SetTexture ([NullAllowed] MTLTexture texture, nuint index);

	//	// @required -(void)setTextures:(id<MTLTexture>  _Nullable const * _Nonnull)textures withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setTextures:withRange:")]
	//	void SetTextures (MTLTexture[] textures, NSRange range);

	//	// @required -(void)setSamplerState:(id<MTLSamplerState> _Nullable)sampler atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setSamplerState:atIndex:")]
	//	void SetSamplerState ([NullAllowed] MTLSamplerState sampler, nuint index);

	//	// @required -(void)setSamplerStates:(id<MTLSamplerState>  _Nullable const * _Nonnull)samplers withRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("setSamplerStates:withRange:")]
	//	void SetSamplerStates (MTLSamplerState[] samplers, NSRange range);

	//	// @required -(void * _Nonnull)constantDataAtIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("constantDataAtIndex:")]
	//	unsafe void* ConstantDataAtIndex (nuint index);

	//	// @required -(void)setRenderPipelineState:(id<MTLRenderPipelineState> _Nullable)pipeline atIndex:(NSUInteger)index __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoiOS, Mac (10,14)]
	//	[Abstract]
	//	[Export ("setRenderPipelineState:atIndex:")]
	//	void SetRenderPipelineState ([NullAllowed] MTLRenderPipelineState pipeline, nuint index);

	//	// @required -(void)setRenderPipelineStates:(id<MTLRenderPipelineState>  _Nullable const * _Nonnull)pipelines withRange:(NSRange)range __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoiOS, Mac (10,14)]
	//	[Abstract]
	//	[Export ("setRenderPipelineStates:withRange:")]
	//	void SetRenderPipelineStates (MTLRenderPipelineState[] pipelines, NSRange range);

	//	// @required -(void)setIndirectCommandBuffer:(id<MTLIndirectCommandBuffer> _Nullable)indirectCommandBuffer atIndex:(NSUInteger)index __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("setIndirectCommandBuffer:atIndex:")]
	//	void SetIndirectCommandBuffer ([NullAllowed] MTLIndirectCommandBuffer indirectCommandBuffer, nuint index);

	//	// @required -(void)setIndirectCommandBuffers:(id<MTLIndirectCommandBuffer>  _Nullable const * _Nonnull)buffers withRange:(NSRange)range __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (12,0)]
	//	[Abstract]
	//	[Export ("setIndirectCommandBuffers:withRange:")]
	//	void SetIndirectCommandBuffers (MTLIndirectCommandBuffer[] buffers, NSRange range);

	//	// @required -(id<MTLArgumentEncoder> _Nullable)newArgumentEncoderForBufferAtIndex:(NSUInteger)index __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Mac (10,13), iOS (10,0)]
	//	[Abstract]
	//	[Export ("newArgumentEncoderForBufferAtIndex:")]
	//	[return: NullAllowed]
	//	MTLArgumentEncoder NewArgumentEncoderForBufferAtIndex (nuint index);
	//}

	//// @interface MTLCaptureManager : NSObject
	//[Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MTLCaptureManager
	//{
	//	// +(MTLCaptureManager * _Nonnull)sharedCaptureManager;
	//	[Static]
	//	[Export ("sharedCaptureManager")]
	//	[Verify (MethodToProperty)]
	//	MTLCaptureManager SharedCaptureManager { get; }

	//	// -(id<MTLCaptureScope> _Nonnull)newCaptureScopeWithDevice:(id<MTLDevice> _Nonnull)device;
	//	[Export ("newCaptureScopeWithDevice:")]
	//	MTLCaptureScope NewCaptureScopeWithDevice (MTLDevice device);

	//	// -(id<MTLCaptureScope> _Nonnull)newCaptureScopeWithCommandQueue:(id<MTLCommandQueue> _Nonnull)commandQueue;
	//	[Export ("newCaptureScopeWithCommandQueue:")]
	//	MTLCaptureScope NewCaptureScopeWithCommandQueue (MTLCommandQueue commandQueue);

	//	// -(void)startCaptureWithDevice:(id<MTLDevice> _Nonnull)device;
	//	[Export ("startCaptureWithDevice:")]
	//	void StartCaptureWithDevice (MTLDevice device);

	//	// -(void)startCaptureWithCommandQueue:(id<MTLCommandQueue> _Nonnull)commandQueue;
	//	[Export ("startCaptureWithCommandQueue:")]
	//	void StartCaptureWithCommandQueue (MTLCommandQueue commandQueue);

	//	// -(void)startCaptureWithScope:(id<MTLCaptureScope> _Nonnull)captureScope;
	//	[Export ("startCaptureWithScope:")]
	//	void StartCaptureWithScope (MTLCaptureScope captureScope);

	//	// -(void)stopCapture;
	//	[Export ("stopCapture")]
	//	void StopCapture ();

	//	// @property (readwrite, atomic, strong) id<MTLCaptureScope> _Nullable defaultCaptureScope;
	//	[NullAllowed, Export ("defaultCaptureScope", ArgumentSemantic.Strong)]
	//	MTLCaptureScope DefaultCaptureScope { get; set; }

	//	// @property (readonly) BOOL isCapturing;
	//	[Export ("isCapturing")]
	//	bool IsCapturing { get; }
	//}

	//// @protocol MTLCaptureScope <NSObject>
	//[Mac (10,13), iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLCaptureScope
	//{
	//	// @required -(void)beginScope;
	//	[Abstract]
	//	[Export ("beginScope")]
	//	void BeginScope ();

	//	// @required -(void)endScope;
	//	[Abstract]
	//	[Export ("endScope")]
	//	void EndScope ();

	//	// @required @property (copy, atomic) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }

	//	// @required @property (readonly, nonatomic) id<MTLDevice> _Nonnull device;
	//	[Abstract]
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required @property (readonly, nonatomic) id<MTLCommandQueue> _Nullable commandQueue;
	//	[Abstract]
	//	[NullAllowed, Export ("commandQueue")]
	//	MTLCommandQueue CommandQueue { get; }
	//}

	//// @protocol MTLIndirectRenderCommand <NSObject>
	//[Mac (10,14), iOS (12,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLIndirectRenderCommand
	//{
	//	// @required -(void)setRenderPipelineState:(id<MTLRenderPipelineState> _Nonnull)pipelineState __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoiOS, Mac (10,14)]
	//	[Abstract]
	//	[Export ("setRenderPipelineState:")]
	//	void SetRenderPipelineState (MTLRenderPipelineState pipelineState);

	//	// @required -(void)setVertexBuffer:(id<MTLBuffer> _Nonnull)buffer offset:(NSUInteger)offset atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setVertexBuffer:offset:atIndex:")]
	//	void SetVertexBuffer (MTLBuffer buffer, nuint offset, nuint index);

	//	// @required -(void)setFragmentBuffer:(id<MTLBuffer> _Nonnull)buffer offset:(NSUInteger)offset atIndex:(NSUInteger)index;
	//	[Abstract]
	//	[Export ("setFragmentBuffer:offset:atIndex:")]
	//	void SetFragmentBuffer (MTLBuffer buffer, nuint offset, nuint index);

	//	// @required -(void)drawPatches:(NSUInteger)numberOfPatchControlPoints patchStart:(NSUInteger)patchStart patchCount:(NSUInteger)patchCount patchIndexBuffer:(id<MTLBuffer> _Nullable)patchIndexBuffer patchIndexBufferOffset:(NSUInteger)patchIndexBufferOffset instanceCount:(NSUInteger)instanceCount baseInstance:(NSUInteger)baseInstance tessellationFactorBuffer:(id<MTLBuffer> _Nonnull)buffer tessellationFactorBufferOffset:(NSUInteger)offset tessellationFactorBufferInstanceStride:(NSUInteger)instanceStride;
	//	[Abstract]
	//	[Export ("drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:")]
	//	void DrawPatches (nuint numberOfPatchControlPoints, nuint patchStart, nuint patchCount, [NullAllowed] MTLBuffer patchIndexBuffer, nuint patchIndexBufferOffset, nuint instanceCount, nuint baseInstance, MTLBuffer buffer, nuint offset, nuint instanceStride);

	//	// @required -(void)drawIndexedPatches:(NSUInteger)numberOfPatchControlPoints patchStart:(NSUInteger)patchStart patchCount:(NSUInteger)patchCount patchIndexBuffer:(id<MTLBuffer> _Nullable)patchIndexBuffer patchIndexBufferOffset:(NSUInteger)patchIndexBufferOffset controlPointIndexBuffer:(id<MTLBuffer> _Nonnull)controlPointIndexBuffer controlPointIndexBufferOffset:(NSUInteger)controlPointIndexBufferOffset instanceCount:(NSUInteger)instanceCount baseInstance:(NSUInteger)baseInstance tessellationFactorBuffer:(id<MTLBuffer> _Nonnull)buffer tessellationFactorBufferOffset:(NSUInteger)offset tessellationFactorBufferInstanceStride:(NSUInteger)instanceStride;
	//	[Abstract]
	//	[Export ("drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:")]
	//	void DrawIndexedPatches (nuint numberOfPatchControlPoints, nuint patchStart, nuint patchCount, [NullAllowed] MTLBuffer patchIndexBuffer, nuint patchIndexBufferOffset, MTLBuffer controlPointIndexBuffer, nuint controlPointIndexBufferOffset, nuint instanceCount, nuint baseInstance, MTLBuffer buffer, nuint offset, nuint instanceStride);

	//	// @required -(void)drawPrimitives:(MTLPrimitiveType)primitiveType vertexStart:(NSUInteger)vertexStart vertexCount:(NSUInteger)vertexCount instanceCount:(NSUInteger)instanceCount baseInstance:(NSUInteger)baseInstance;
	//	[Abstract]
	//	[Export ("drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:")]
	//	void DrawPrimitives (MTLPrimitiveType primitiveType, nuint vertexStart, nuint vertexCount, nuint instanceCount, nuint baseInstance);

	//	// @required -(void)drawIndexedPrimitives:(MTLPrimitiveType)primitiveType indexCount:(NSUInteger)indexCount indexType:(MTLIndexType)indexType indexBuffer:(id<MTLBuffer> _Nonnull)indexBuffer indexBufferOffset:(NSUInteger)indexBufferOffset instanceCount:(NSUInteger)instanceCount baseVertex:(NSInteger)baseVertex baseInstance:(NSUInteger)baseInstance;
	//	[Abstract]
	//	[Export ("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:")]
	//	void DrawIndexedPrimitives (MTLPrimitiveType primitiveType, nuint indexCount, MTLIndexType indexType, MTLBuffer indexBuffer, nuint indexBufferOffset, nuint instanceCount, nint baseVertex, nuint baseInstance);

	//	// @required -(void)reset;
	//	[Abstract]
	//	[Export ("reset")]
	//	void Reset ();
	//}

	//// @interface MTLIndirectCommandBufferDescriptor : NSObject
	//[Mac (10,14), iOS (12,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLIndirectCommandBufferDescriptor
	//{
	//	// @property (readwrite, nonatomic) MTLIndirectCommandType commandTypes;
	//	[Export ("commandTypes", ArgumentSemantic.Assign)]
	//	MTLIndirectCommandType CommandTypes { get; set; }

	//	// @property (readwrite, nonatomic) BOOL inheritPipelineState __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.14)));
	//	[NoiOS, Mac (10, 14)]
	//	[Export ("inheritPipelineState")]
	//	bool InheritPipelineState { get; set; }

	//	// @property (readwrite, nonatomic) BOOL inheritBuffers;
	//	[Export ("inheritBuffers")]
	//	bool InheritBuffers { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger maxVertexBufferBindCount;
	//	[Export ("maxVertexBufferBindCount")]
	//	nuint MaxVertexBufferBindCount { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger maxFragmentBufferBindCount;
	//	[Export ("maxFragmentBufferBindCount")]
	//	nuint MaxFragmentBufferBindCount { get; set; }
	//}

	//// @protocol MTLIndirectCommandBuffer <MTLResource>
	//[Mac (10,14), iOS (12,0)]
	//[Protocol, Model]
	//interface MTLIndirectCommandBuffer : IMTLResource
	//{
	//	// @required @property (readonly) NSUInteger size;
	//	[Abstract]
	//	[Export ("size")]
	//	nuint Size { get; }

	//	// @required -(void)resetWithRange:(NSRange)range;
	//	[Abstract]
	//	[Export ("resetWithRange:")]
	//	void ResetWithRange (NSRange range);

	//	// @required -(id<MTLIndirectRenderCommand> _Nonnull)indirectRenderCommandAtIndex:(NSUInteger)commandIndex;
	//	[Abstract]
	//	[Export ("indirectRenderCommandAtIndex:")]
	//	MTLIndirectRenderCommand IndirectRenderCommandAtIndex (nuint commandIndex);
	//}

	//// @protocol MTLEvent <NSObject>
	//[Mac (10,14), iOS (12,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTLEvent
	//{
	//	// @required @property (readonly) id<MTLDevice> _Nullable device;
	//	[Abstract]
	//	[NullAllowed, Export ("device")]
	//	MTLDevice Device { get; }

	//	// @required @property (copy, atomic) NSString * _Nullable label;
	//	[Abstract]
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }
	//}

	//// @interface MTLSharedEventListener : NSObject
	//[Mac (10,14), iOS (12,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLSharedEventListener
	//{
	//	// -(instancetype _Nonnull)initWithDispatchQueue:(dispatch_queue_t _Nonnull)dispatchQueue __attribute__((objc_designated_initializer));
	//	[Export ("initWithDispatchQueue:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (DispatchQueue dispatchQueue);

	//	// @property (readonly) dispatch_queue_t _Nonnull dispatchQueue;
	//	[Export ("dispatchQueue")]
	//	DispatchQueue DispatchQueue { get; }
	//}

	//// typedef void (^MTLSharedEventNotificationBlock)(id<MTLSharedEvent> _Nonnull, uint64_t);
	//delegate void MTLSharedEventNotificationBlock (MTLSharedEvent arg0, ulong arg1);

	//// @protocol MTLSharedEvent <MTLEvent>
	//[Mac (10,14), iOS (12,0)]
	//[Protocol, Model]
	//interface MTLSharedEvent : IMTLEvent
	//{
	//	// @required -(void)notifyListener:(MTLSharedEventListener * _Nonnull)listener atValue:(uint64_t)value block:(MTLSharedEventNotificationBlock _Nonnull)block;
	//	[Abstract]
	//	[Export ("notifyListener:atValue:block:")]
	//	void AtValue (MTLSharedEventListener listener, ulong value, MTLSharedEventNotificationBlock block);

	//	// @required -(MTLSharedEventHandle * _Nonnull)newSharedEventHandle;
	//	[Abstract]
	//	[Export ("newSharedEventHandle")]
	//	[Verify (MethodToProperty)]
	//	MTLSharedEventHandle NewSharedEventHandle { get; }

	//	// @required @property (readwrite) uint64_t signaledValue;
	//	[Abstract]
	//	[Export ("signaledValue")]
	//	ulong SignaledValue { get; set; }
	//}

	//// @interface MTLSharedEventHandle : NSObject <NSSecureCoding>
	//[Mac (10,14), iOS (12,0)]
	//[BaseType (typeof(NSObject))]
	//interface MTLSharedEventHandle : INSSecureCoding
	//{
	//	// @property (readonly) NSString * _Nullable label;
	//	[NullAllowed, Export ("label")]
	//	string Label { get; }
	//}

	//// @interface CATransform3DAdditions (NSValue)
	//[Category]
	//[BaseType (typeof(NSValue))]
	//interface NSValue_CATransform3DAdditions
	//{
	//	// +(NSValue * _Nonnull)valueWithCATransform3D:(CATransform3D)t;
	//	[Static]
	//	[Export ("valueWithCATransform3D:")]
	//	NSValue ValueWithCATransform3D (CATransform3D t);

	//	// @property (readonly) CATransform3D CATransform3DValue;
	//	[Export ("CATransform3DValue")]
	//	CATransform3D CATransform3DValue { get; }
	//}

	//// @protocol CAMediaTiming
	//[Protocol, Model]
	//interface CAMediaTiming
	//{
	//	// @required @property CFTimeInterval beginTime;
	//	[Abstract]
	//	[Export ("beginTime")]
	//	double BeginTime { get; set; }

	//	// @required @property CFTimeInterval duration;
	//	[Abstract]
	//	[Export ("duration")]
	//	double Duration { get; set; }

	//	// @required @property float speed;
	//	[Abstract]
	//	[Export ("speed")]
	//	float Speed { get; set; }

	//	// @required @property CFTimeInterval timeOffset;
	//	[Abstract]
	//	[Export ("timeOffset")]
	//	double TimeOffset { get; set; }

	//	// @required @property float repeatCount;
	//	[Abstract]
	//	[Export ("repeatCount")]
	//	float RepeatCount { get; set; }

	//	// @required @property CFTimeInterval repeatDuration;
	//	[Abstract]
	//	[Export ("repeatDuration")]
	//	double RepeatDuration { get; set; }

	//	// @required @property BOOL autoreverses;
	//	[Abstract]
	//	[Export ("autoreverses")]
	//	bool Autoreverses { get; set; }

	//	// @required @property (copy) CAMediaTimingFillMode _Nonnull fillMode;
	//	[Abstract]
	//	[Export ("fillMode")]
	//	string FillMode { get; set; }
	//}

	//// @interface CALayer : NSObject <NSSecureCoding, CAMediaTiming>
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface CALayer : INSSecureCoding, ICAMediaTiming
	//{
	//	// +(instancetype _Nonnull)layer;
	//	[Static]
	//	[Export ("layer")]
	//	CALayer Layer ();

	//	// -(instancetype _Nonnull)initWithLayer:(id _Nonnull)layer;
	//	[Export ("initWithLayer:")]
	//	IntPtr Constructor (NSObject layer);

	//	// -(instancetype _Nullable)presentationLayer;
	//	[Export ("presentationLayer")]
	//	[return: NullAllowed]
	//	CALayer PresentationLayer ();

	//	// -(instancetype _Nonnull)modelLayer;
	//	[Export ("modelLayer")]
	//	CALayer ModelLayer ();

	//	// +(id _Nullable)defaultValueForKey:(NSString * _Nonnull)key;
	//	[Static]
	//	[Export ("defaultValueForKey:")]
	//	[return: NullAllowed]
	//	NSObject DefaultValueForKey (string key);

	//	// +(BOOL)needsDisplayForKey:(NSString * _Nonnull)key;
	//	[Static]
	//	[Export ("needsDisplayForKey:")]
	//	bool NeedsDisplayForKey (string key);

	//	// -(BOOL)shouldArchiveValueForKey:(NSString * _Nonnull)key;
	//	[Export ("shouldArchiveValueForKey:")]
	//	bool ShouldArchiveValueForKey (string key);

	//	// @property CGRect bounds;
	//	[Export ("bounds", ArgumentSemantic.Assign)]
	//	CGRect Bounds { get; set; }

	//	// @property CGPoint position;
	//	[Export ("position", ArgumentSemantic.Assign)]
	//	CGPoint Position { get; set; }

	//	// @property CGFloat zPosition;
	//	[Export ("zPosition")]
	//	nfloat ZPosition { get; set; }

	//	// @property CGPoint anchorPoint;
	//	[Export ("anchorPoint", ArgumentSemantic.Assign)]
	//	CGPoint AnchorPoint { get; set; }

	//	// @property CGFloat anchorPointZ;
	//	[Export ("anchorPointZ")]
	//	nfloat AnchorPointZ { get; set; }

	//	// @property CATransform3D transform;
	//	[Export ("transform", ArgumentSemantic.Assign)]
	//	CATransform3D Transform { get; set; }

	//	// -(CGAffineTransform)affineTransform;
	//	// -(void)setAffineTransform:(CGAffineTransform)m;
	//	[Export ("affineTransform")]
	//	[Verify (MethodToProperty)]
	//	CGAffineTransform AffineTransform { get; set; }

	//	// @property CGRect frame;
	//	[Export ("frame", ArgumentSemantic.Assign)]
	//	CGRect Frame { get; set; }

	//	// @property (getter = isHidden) BOOL hidden;
	//	[Export ("hidden")]
	//	bool Hidden { [Bind ("isHidden")] get; set; }

	//	// @property (getter = isDoubleSided) BOOL doubleSided;
	//	[Export ("doubleSided")]
	//	bool DoubleSided { [Bind ("isDoubleSided")] get; set; }

	//	// @property (getter = isGeometryFlipped) BOOL geometryFlipped;
	//	[Export ("geometryFlipped")]
	//	bool GeometryFlipped { [Bind ("isGeometryFlipped")] get; set; }

	//	// -(BOOL)contentsAreFlipped;
	//	[Export ("contentsAreFlipped")]
	//	bool ContentsAreFlipped ();

	//	// @property (readonly) CALayer * _Nullable superlayer;
	//	[NullAllowed, Export ("superlayer")]
	//	CALayer Superlayer { get; }

	//	// -(void)removeFromSuperlayer;
	//	[Export ("removeFromSuperlayer")]
	//	void RemoveFromSuperlayer ();

	//	// @property (copy) NSArray<__kindof CALayer *> * _Nullable sublayers;
	//	[NullAllowed, Export ("sublayers", ArgumentSemantic.Copy)]
	//	CALayer[] Sublayers { get; set; }

	//	// -(void)addSublayer:(CALayer * _Nonnull)layer;
	//	[Export ("addSublayer:")]
	//	void AddSublayer (CALayer layer);

	//	// -(void)insertSublayer:(CALayer * _Nonnull)layer atIndex:(unsigned int)idx;
	//	[Export ("insertSublayer:atIndex:")]
	//	void InsertSublayer (CALayer layer, uint idx);

	//	// -(void)insertSublayer:(CALayer * _Nonnull)layer below:(CALayer * _Nullable)sibling;
	//	[Export ("insertSublayer:below:")]
	//	void InsertSublayer (CALayer layer, [NullAllowed] CALayer sibling);

	//	// -(void)insertSublayer:(CALayer * _Nonnull)layer above:(CALayer * _Nullable)sibling;
	//	[Export ("insertSublayer:above:")]
	//	void InsertSublayer (CALayer layer, [NullAllowed] CALayer sibling);

	//	// -(void)replaceSublayer:(CALayer * _Nonnull)oldLayer with:(CALayer * _Nonnull)newLayer;
	//	[Export ("replaceSublayer:with:")]
	//	void ReplaceSublayer (CALayer oldLayer, CALayer newLayer);

	//	// @property CATransform3D sublayerTransform;
	//	[Export ("sublayerTransform", ArgumentSemantic.Assign)]
	//	CATransform3D SublayerTransform { get; set; }

	//	// @property (strong) __kindof CALayer * _Nullable mask;
	//	[Export ("mask", ArgumentSemantic.Strong)]
	//	CALayer Mask { get; set; }

	//	// @property BOOL masksToBounds;
	//	[Export ("masksToBounds")]
	//	bool MasksToBounds { get; set; }

	//	// -(CGPoint)convertPoint:(CGPoint)p fromLayer:(CALayer * _Nullable)l;
	//	[Export ("convertPoint:fromLayer:")]
	//	CGPoint ConvertPoint (CGPoint p, [NullAllowed] CALayer l);

	//	// -(CGPoint)convertPoint:(CGPoint)p toLayer:(CALayer * _Nullable)l;
	//	[Export ("convertPoint:toLayer:")]
	//	CGPoint ConvertPoint (CGPoint p, [NullAllowed] CALayer l);

	//	// -(CGRect)convertRect:(CGRect)r fromLayer:(CALayer * _Nullable)l;
	//	[Export ("convertRect:fromLayer:")]
	//	CGRect ConvertRect (CGRect r, [NullAllowed] CALayer l);

	//	// -(CGRect)convertRect:(CGRect)r toLayer:(CALayer * _Nullable)l;
	//	[Export ("convertRect:toLayer:")]
	//	CGRect ConvertRect (CGRect r, [NullAllowed] CALayer l);

	//	// -(CFTimeInterval)convertTime:(CFTimeInterval)t fromLayer:(CALayer * _Nullable)l;
	//	[Export ("convertTime:fromLayer:")]
	//	double ConvertTime (double t, [NullAllowed] CALayer l);

	//	// -(CFTimeInterval)convertTime:(CFTimeInterval)t toLayer:(CALayer * _Nullable)l;
	//	[Export ("convertTime:toLayer:")]
	//	double ConvertTime (double t, [NullAllowed] CALayer l);

	//	// -(__kindof CALayer * _Nullable)hitTest:(CGPoint)p;
	//	[Export ("hitTest:")]
	//	CALayer HitTest (CGPoint p);

	//	// -(BOOL)containsPoint:(CGPoint)p;
	//	[Export ("containsPoint:")]
	//	bool ContainsPoint (CGPoint p);

	//	// @property (strong) id _Nullable contents;
	//	[NullAllowed, Export ("contents", ArgumentSemantic.Strong)]
	//	NSObject Contents { get; set; }

	//	// @property CGRect contentsRect;
	//	[Export ("contentsRect", ArgumentSemantic.Assign)]
	//	CGRect ContentsRect { get; set; }

	//	// @property (copy) CALayerContentsGravity _Nonnull contentsGravity;
	//	[Export ("contentsGravity")]
	//	string ContentsGravity { get; set; }

	//	// @property CGFloat contentsScale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[Export ("contentsScale")]
	//	nfloat ContentsScale { get; set; }

	//	// @property CGRect contentsCenter;
	//	[Export ("contentsCenter", ArgumentSemantic.Assign)]
	//	CGRect ContentsCenter { get; set; }

	//	// @property (copy) CALayerContentsFormat _Nonnull contentsFormat __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("contentsFormat")]
	//	string ContentsFormat { get; set; }

	//	// @property (copy) CALayerContentsFilter _Nonnull minificationFilter;
	//	[Export ("minificationFilter")]
	//	string MinificationFilter { get; set; }

	//	// @property (copy) CALayerContentsFilter _Nonnull magnificationFilter;
	//	[Export ("magnificationFilter")]
	//	string MagnificationFilter { get; set; }

	//	// @property float minificationFilterBias;
	//	[Export ("minificationFilterBias")]
	//	float MinificationFilterBias { get; set; }

	//	// @property (getter = isOpaque) BOOL opaque;
	//	[Export ("opaque")]
	//	bool Opaque { [Bind ("isOpaque")] get; set; }

	//	// -(void)display;
	//	[Export ("display")]
	//	void Display ();

	//	// -(void)setNeedsDisplay;
	//	[Export ("setNeedsDisplay")]
	//	void SetNeedsDisplay ();

	//	// -(void)setNeedsDisplayInRect:(CGRect)r;
	//	[Export ("setNeedsDisplayInRect:")]
	//	void SetNeedsDisplayInRect (CGRect r);

	//	// -(BOOL)needsDisplay;
	//	[Export ("needsDisplay")]
	//	bool NeedsDisplay ();

	//	// -(void)displayIfNeeded;
	//	[Export ("displayIfNeeded")]
	//	void DisplayIfNeeded ();

	//	// @property BOOL needsDisplayOnBoundsChange;
	//	[Export ("needsDisplayOnBoundsChange")]
	//	bool NeedsDisplayOnBoundsChange { get; set; }

	//	// @property BOOL drawsAsynchronously __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
	//	[Export ("drawsAsynchronously")]
	//	bool DrawsAsynchronously { get; set; }

	//	// -(void)drawInContext:(CGContextRef _Nonnull)ctx;
	//	[Export ("drawInContext:")]
	//	unsafe void DrawInContext (CGContextRef* ctx);

	//	// -(void)renderInContext:(CGContextRef _Nonnull)ctx;
	//	[Export ("renderInContext:")]
	//	unsafe void RenderInContext (CGContextRef* ctx);

	//	// @property CAEdgeAntialiasingMask edgeAntialiasingMask;
	//	[Export ("edgeAntialiasingMask", ArgumentSemantic.Assign)]
	//	CAEdgeAntialiasingMask EdgeAntialiasingMask { get; set; }

	//	// @property BOOL allowsEdgeAntialiasing __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (2, 0)]
	//	[Export ("allowsEdgeAntialiasing")]
	//	bool AllowsEdgeAntialiasing { get; set; }

	//	// @property CGColorRef _Nullable backgroundColor;
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* BackgroundColor { get; set; }

	//	// @property CGFloat cornerRadius;
	//	[Export ("cornerRadius")]
	//	nfloat CornerRadius { get; set; }

	//	// @property CACornerMask maskedCorners __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("maskedCorners", ArgumentSemantic.Assign)]
	//	CACornerMask MaskedCorners { get; set; }

	//	// @property CGFloat borderWidth;
	//	[Export ("borderWidth")]
	//	nfloat BorderWidth { get; set; }

	//	// @property CGColorRef _Nullable borderColor;
	//	[NullAllowed, Export ("borderColor", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* BorderColor { get; set; }

	//	// @property float opacity;
	//	[Export ("opacity")]
	//	float Opacity { get; set; }

	//	// @property BOOL allowsGroupOpacity __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (2, 0)]
	//	[Export ("allowsGroupOpacity")]
	//	bool AllowsGroupOpacity { get; set; }

	//	// @property (strong) id _Nullable compositingFilter;
	//	[NullAllowed, Export ("compositingFilter", ArgumentSemantic.Strong)]
	//	NSObject CompositingFilter { get; set; }

	//	// @property (copy) NSArray * _Nullable filters;
	//	[NullAllowed, Export ("filters", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] Filters { get; set; }

	//	// @property (copy) NSArray * _Nullable backgroundFilters;
	//	[NullAllowed, Export ("backgroundFilters", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] BackgroundFilters { get; set; }

	//	// @property BOOL shouldRasterize;
	//	[Export ("shouldRasterize")]
	//	bool ShouldRasterize { get; set; }

	//	// @property CGFloat rasterizationScale;
	//	[Export ("rasterizationScale")]
	//	nfloat RasterizationScale { get; set; }

	//	// @property CGColorRef _Nullable shadowColor;
	//	[NullAllowed, Export ("shadowColor", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* ShadowColor { get; set; }

	//	// @property float shadowOpacity;
	//	[Export ("shadowOpacity")]
	//	float ShadowOpacity { get; set; }

	//	// @property CGSize shadowOffset;
	//	[Export ("shadowOffset", ArgumentSemantic.Assign)]
	//	CGSize ShadowOffset { get; set; }

	//	// @property CGFloat shadowRadius;
	//	[Export ("shadowRadius")]
	//	nfloat ShadowRadius { get; set; }

	//	// @property CGPathRef _Nullable shadowPath;
	//	[NullAllowed, Export ("shadowPath", ArgumentSemantic.Assign)]
	//	unsafe CGPathRef* ShadowPath { get; set; }

	//	// -(CGSize)preferredFrameSize;
	//	[Export ("preferredFrameSize")]
	//	CGSize PreferredFrameSize ();

	//	// -(void)setNeedsLayout;
	//	[Export ("setNeedsLayout")]
	//	void SetNeedsLayout ();

	//	// -(BOOL)needsLayout;
	//	[Export ("needsLayout")]
	//	bool NeedsLayout ();

	//	// -(void)layoutIfNeeded;
	//	[Export ("layoutIfNeeded")]
	//	void LayoutIfNeeded ();

	//	// -(void)layoutSublayers;
	//	[Export ("layoutSublayers")]
	//	void LayoutSublayers ();

	//	// +(id<CAAction> _Nullable)defaultActionForKey:(NSString * _Nonnull)event;
	//	[Static]
	//	[Export ("defaultActionForKey:")]
	//	[return: NullAllowed]
	//	CAAction DefaultActionForKey (string @event);

	//	// -(id<CAAction> _Nullable)actionForKey:(NSString * _Nonnull)event;
	//	[Export ("actionForKey:")]
	//	[return: NullAllowed]
	//	CAAction ActionForKey (string @event);

	//	// @property (copy) NSDictionary<NSString *,id<CAAction>> * _Nullable actions;
	//	[NullAllowed, Export ("actions", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, CAAction> Actions { get; set; }

	//	// -(void)addAnimation:(CAAnimation * _Nonnull)anim forKey:(NSString * _Nullable)key;
	//	[Export ("addAnimation:forKey:")]
	//	void AddAnimation (CAAnimation anim, [NullAllowed] string key);

	//	// -(void)removeAllAnimations;
	//	[Export ("removeAllAnimations")]
	//	void RemoveAllAnimations ();

	//	// -(void)removeAnimationForKey:(NSString * _Nonnull)key;
	//	[Export ("removeAnimationForKey:")]
	//	void RemoveAnimationForKey (string key);

	//	// -(NSArray<NSString *> * _Nullable)animationKeys;
	//	[Export ("animationKeys")]
	//	[return: NullAllowed]
	//	string[] AnimationKeys ();

	//	// -(__kindof CAAnimation * _Nullable)animationForKey:(NSString * _Nonnull)key;
	//	[Export ("animationForKey:")]
	//	CAAnimation AnimationForKey (string key);

	//	// @property (copy) NSString * _Nullable name;
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	CALayerDelegate Delegate { get; set; }

	//	// @property (weak) id<CALayerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (copy) NSDictionary * _Nullable style;
	//	[NullAllowed, Export ("style", ArgumentSemantic.Copy)]
	//	NSDictionary Style { get; set; }
	//}

	//// @protocol CAAction
	//[Protocol, Model]
	//interface CAAction
	//{
	//	// @required -(void)runActionForKey:(NSString * _Nonnull)event object:(id _Nonnull)anObject arguments:(NSDictionary * _Nullable)dict;
	//	[Abstract]
	//	[Export ("runActionForKey:object:arguments:")]
	//	void Object (string @event, NSObject anObject, [NullAllowed] NSDictionary dict);
	//}

	//// @interface CAActionAdditions (NSNull) <CAAction>
	//[Category]
	//[BaseType (typeof(NSNull))]
	//interface NSNull_CAActionAdditions : ICAAction
	//{
	//}

	//// @protocol CALayerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface CALayerDelegate
	//{
	//	// @optional -(void)displayLayer:(CALayer * _Nonnull)layer;
	//	[Export ("displayLayer:")]
	//	void DisplayLayer (CALayer layer);

	//	// @optional -(void)drawLayer:(CALayer * _Nonnull)layer inContext:(CGContextRef _Nonnull)ctx;
	//	[Export ("drawLayer:inContext:")]
	//	unsafe void DrawLayer (CALayer layer, CGContextRef* ctx);

	//	// @optional -(void)layerWillDraw:(CALayer * _Nonnull)layer __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("layerWillDraw:")]
	//	void LayerWillDraw (CALayer layer);

	//	// @optional -(void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
	//	[Export ("layoutSublayersOfLayer:")]
	//	void LayoutSublayersOfLayer (CALayer layer);

	//	// @optional -(id<CAAction> _Nullable)actionForLayer:(CALayer * _Nonnull)layer forKey:(NSString * _Nonnull)event;
	//	[Export ("actionForLayer:forKey:")]
	//	[return: NullAllowed]
	//	CAAction ActionForLayer (CALayer layer, string @event);
	//}

	//// @interface CAAnimation : NSObject <NSSecureCoding, NSCopying, CAMediaTiming, CAAction>
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface CAAnimation : INSSecureCoding, INSCopying, ICAMediaTiming, ICAAction
	//{
	//	// +(instancetype _Nonnull)animation;
	//	[Static]
	//	[Export ("animation")]
	//	CAAnimation Animation ();

	//	// +(id _Nullable)defaultValueForKey:(NSString * _Nonnull)key;
	//	[Static]
	//	[Export ("defaultValueForKey:")]
	//	[return: NullAllowed]
	//	NSObject DefaultValueForKey (string key);

	//	// -(BOOL)shouldArchiveValueForKey:(NSString * _Nonnull)key;
	//	[Export ("shouldArchiveValueForKey:")]
	//	bool ShouldArchiveValueForKey (string key);

	//	// @property (strong) CAMediaTimingFunction * _Nullable timingFunction;
	//	[NullAllowed, Export ("timingFunction", ArgumentSemantic.Strong)]
	//	CAMediaTimingFunction TimingFunction { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	CAAnimationDelegate Delegate { get; set; }

	//	// @property (strong) id<CAAnimationDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Strong)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (getter = isRemovedOnCompletion) BOOL removedOnCompletion;
	//	[Export ("removedOnCompletion")]
	//	bool RemovedOnCompletion { [Bind ("isRemovedOnCompletion")] get; set; }
	//}

	//// @protocol CAAnimationDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface CAAnimationDelegate
	//{
	//	// @optional -(void)animationDidStart:(CAAnimation * _Nonnull)anim;
	//	[Export ("animationDidStart:")]
	//	void AnimationDidStart (CAAnimation anim);

	//	// @optional -(void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
	//	[Export ("animationDidStop:finished:")]
	//	void AnimationDidStop (CAAnimation anim, bool flag);
	//}

	//// @interface CAPropertyAnimation : CAAnimation
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(CAAnimation))]
	//interface CAPropertyAnimation
	//{
	//	// +(instancetype _Nonnull)animationWithKeyPath:(NSString * _Nullable)path;
	//	[Static]
	//	[Export ("animationWithKeyPath:")]
	//	CAPropertyAnimation AnimationWithKeyPath ([NullAllowed] string path);

	//	// @property (copy) NSString * _Nullable keyPath;
	//	[NullAllowed, Export ("keyPath")]
	//	string KeyPath { get; set; }

	//	// @property (getter = isAdditive) BOOL additive;
	//	[Export ("additive")]
	//	bool Additive { [Bind ("isAdditive")] get; set; }

	//	// @property (getter = isCumulative) BOOL cumulative;
	//	[Export ("cumulative")]
	//	bool Cumulative { [Bind ("isCumulative")] get; set; }

	//	// @property (strong) CAValueFunction * _Nullable valueFunction;
	//	[NullAllowed, Export ("valueFunction", ArgumentSemantic.Strong)]
	//	CAValueFunction ValueFunction { get; set; }
	//}

	//// @interface CABasicAnimation : CAPropertyAnimation
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(CAPropertyAnimation))]
	//interface CABasicAnimation
	//{
	//	// @property (strong) id _Nullable fromValue;
	//	[NullAllowed, Export ("fromValue", ArgumentSemantic.Strong)]
	//	NSObject FromValue { get; set; }

	//	// @property (strong) id _Nullable toValue;
	//	[NullAllowed, Export ("toValue", ArgumentSemantic.Strong)]
	//	NSObject ToValue { get; set; }

	//	// @property (strong) id _Nullable byValue;
	//	[NullAllowed, Export ("byValue", ArgumentSemantic.Strong)]
	//	NSObject ByValue { get; set; }
	//}

	//// @interface CAKeyframeAnimation : CAPropertyAnimation
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(CAPropertyAnimation))]
	//interface CAKeyframeAnimation
	//{
	//	// @property (copy) NSArray * _Nullable values;
	//	[NullAllowed, Export ("values", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] Values { get; set; }

	//	// @property CGPathRef _Nullable path;
	//	[NullAllowed, Export ("path", ArgumentSemantic.Assign)]
	//	unsafe CGPathRef* Path { get; set; }

	//	// @property (copy) NSArray<NSNumber *> * _Nullable keyTimes;
	//	[NullAllowed, Export ("keyTimes", ArgumentSemantic.Copy)]
	//	NSNumber[] KeyTimes { get; set; }

	//	// @property (copy) NSArray<CAMediaTimingFunction *> * _Nullable timingFunctions;
	//	[NullAllowed, Export ("timingFunctions", ArgumentSemantic.Copy)]
	//	CAMediaTimingFunction[] TimingFunctions { get; set; }

	//	// @property (copy) CAAnimationCalculationMode _Nonnull calculationMode;
	//	[Export ("calculationMode")]
	//	string CalculationMode { get; set; }

	//	// @property (copy) NSArray<NSNumber *> * _Nullable tensionValues;
	//	[NullAllowed, Export ("tensionValues", ArgumentSemantic.Copy)]
	//	NSNumber[] TensionValues { get; set; }

	//	// @property (copy) NSArray<NSNumber *> * _Nullable continuityValues;
	//	[NullAllowed, Export ("continuityValues", ArgumentSemantic.Copy)]
	//	NSNumber[] ContinuityValues { get; set; }

	//	// @property (copy) NSArray<NSNumber *> * _Nullable biasValues;
	//	[NullAllowed, Export ("biasValues", ArgumentSemantic.Copy)]
	//	NSNumber[] BiasValues { get; set; }

	//	// @property (copy) CAAnimationRotationMode _Nullable rotationMode;
	//	[NullAllowed, Export ("rotationMode")]
	//	string RotationMode { get; set; }
	//}

	//// @interface CASpringAnimation : CABasicAnimation
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(CABasicAnimation))]
	//interface CASpringAnimation
	//{
	//	// @property CGFloat mass;
	//	[Export ("mass")]
	//	nfloat Mass { get; set; }

	//	// @property CGFloat stiffness;
	//	[Export ("stiffness")]
	//	nfloat Stiffness { get; set; }

	//	// @property CGFloat damping;
	//	[Export ("damping")]
	//	nfloat Damping { get; set; }

	//	// @property CGFloat initialVelocity;
	//	[Export ("initialVelocity")]
	//	nfloat InitialVelocity { get; set; }

	//	// @property (readonly) CFTimeInterval settlingDuration;
	//	[Export ("settlingDuration")]
	//	double SettlingDuration { get; }
	//}

	//// @interface CATransition : CAAnimation
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(CAAnimation))]
	//interface CATransition
	//{
	//	// @property (copy) CATransitionType _Nonnull type;
	//	[Export ("type")]
	//	string Type { get; set; }

	//	// @property (copy) CATransitionSubtype _Nullable subtype;
	//	[NullAllowed, Export ("subtype")]
	//	string Subtype { get; set; }

	//	// @property float startProgress;
	//	[Export ("startProgress")]
	//	float StartProgress { get; set; }

	//	// @property float endProgress;
	//	[Export ("endProgress")]
	//	float EndProgress { get; set; }
	//}

	//// @interface CAAnimationGroup : CAAnimation
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(CAAnimation))]
	//interface CAAnimationGroup
	//{
	//	// @property (copy) NSArray<CAAnimation *> * _Nullable animations;
	//	[NullAllowed, Export ("animations", ArgumentSemantic.Copy)]
	//	CAAnimation[] Animations { get; set; }
	//}

	//// @interface CADisplayLink : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,14), iOS (3,1)]
	//[BaseType (typeof(NSObject))]
	//interface CADisplayLink
	//{
	//	// +(CADisplayLink * _Nonnull)displayLinkWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)sel;
	//	[Static]
	//	[Export ("displayLinkWithTarget:selector:")]
	//	CADisplayLink DisplayLinkWithTarget (NSObject target, Selector sel);

	//	// -(void)addToRunLoop:(NSRunLoop * _Nonnull)runloop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("addToRunLoop:forMode:")]
	//	void AddToRunLoop (NSRunLoop runloop, string mode);

	//	// -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)runloop forMode:(NSRunLoopMode _Nonnull)mode;
	//	[Export ("removeFromRunLoop:forMode:")]
	//	void RemoveFromRunLoop (NSRunLoop runloop, string mode);

	//	// -(void)invalidate;
	//	[Export ("invalidate")]
	//	void Invalidate ();

	//	// @property (readonly, nonatomic) CFTimeInterval timestamp;
	//	[Export ("timestamp")]
	//	double Timestamp { get; }

	//	// @property (readonly, nonatomic) CFTimeInterval duration;
	//	[Export ("duration")]
	//	double Duration { get; }

	//	// @property (readonly, nonatomic) CFTimeInterval targetTimestamp __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 14), iOS (10, 0)]
	//	[Export ("targetTimestamp")]
	//	double TargetTimestamp { get; }

	//	// @property (getter = isPaused, nonatomic) BOOL paused;
	//	[Export ("paused")]
	//	bool Paused { [Bind ("isPaused")] get; set; }

	//	// @property (nonatomic) NSInteger frameInterval __attribute__((availability(tvos, introduced=9.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(ios, introduced=3.1, deprecated=10.0)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "preferredFramesPerSecond")]
	//	[Deprecated (PlatformName.TvOS, 10, 0, message: "preferredFramesPerSecond")]
	//	[Introduced (PlatformName.WatchOS, 2, 0, message: "preferredFramesPerSecond")]
	//	[Deprecated (PlatformName.WatchOS, 3, 0, message: "preferredFramesPerSecond")]
	//	[Introduced (PlatformName.iOS, 3, 1, message: "preferredFramesPerSecond")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "preferredFramesPerSecond")]
	//	[Export ("frameInterval")]
	//	nint FrameInterval { get; set; }

	//	// @property (nonatomic) NSInteger preferredFramesPerSecond __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0)));
	//	[Watch (3, 0), TV (10, 0), iOS (10, 0)]
	//	[Export ("preferredFramesPerSecond")]
	//	nint PreferredFramesPerSecond { get; set; }
	//}

	//// @interface CAEAGLLayer : CALayer <EAGLDrawable>
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES is deprecated")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES is deprecated")]
	//[Introduced (PlatformName.WatchOS, 2, 0, message: "OpenGLES is deprecated")]
	//[Deprecated (PlatformName.WatchOS, 5, 0, message: "OpenGLES is deprecated")]
	//[Introduced (PlatformName.iOS, 2, 0, message: "OpenGLES is deprecated")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES is deprecated")]
	//[NoMac]
	//[BaseType (typeof(CALayer))]
	//interface CAEAGLLayer : IEAGLDrawable
	//{
	//	// @property BOOL presentsWithTransaction __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
	//	[Watch (2, 0), TV (9, 0), iOS (9, 0)]
	//	[Export ("presentsWithTransaction")]
	//	bool PresentsWithTransaction { get; set; }
	//}

	//// @protocol CAMetalDrawable <MTLDrawable>
	//[Protocol, Model]
	//interface CAMetalDrawable : IMTLDrawable
	//{
	//	// @required @property (readonly) id<MTLTexture> _Nonnull texture;
	//	[Abstract]
	//	[Export ("texture")]
	//	MTLTexture Texture { get; }

	//	// @required @property (readonly) CAMetalLayer * _Nonnull layer;
	//	[Abstract]
	//	[Export ("layer")]
	//	CAMetalLayer Layer { get; }
	//}

	//// @interface CAMetalLayer : CALayer
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (8,0)]
	//[BaseType (typeof(CALayer))]
	//interface CAMetalLayer
	//{
	//	// @property (retain) id<MTLDevice> _Nullable device;
	//	[NullAllowed, Export ("device", ArgumentSemantic.Retain)]
	//	MTLDevice Device { get; set; }

	//	// @property MTLPixelFormat pixelFormat;
	//	[Export ("pixelFormat", ArgumentSemantic.Assign)]
	//	MTLPixelFormat PixelFormat { get; set; }

	//	// @property BOOL framebufferOnly;
	//	[Export ("framebufferOnly")]
	//	bool FramebufferOnly { get; set; }

	//	// @property CGSize drawableSize;
	//	[Export ("drawableSize", ArgumentSemantic.Assign)]
	//	CGSize DrawableSize { get; set; }

	//	// -(id<CAMetalDrawable> _Nullable)nextDrawable;
	//	[NullAllowed, Export ("nextDrawable")]
	//	[Verify (MethodToProperty)]
	//	CAMetalDrawable NextDrawable { get; }

	//	// @property NSUInteger maximumDrawableCount __attribute__((availability(tvos, introduced=11.2))) __attribute__((availability(watchos, introduced=4.2))) __attribute__((availability(ios, introduced=11.2))) __attribute__((availability(macos, introduced=10.13.2)));
	//	[Watch (4, 2), TV (11, 2), Mac (10, 13, 2), iOS (11, 2)]
	//	[Export ("maximumDrawableCount")]
	//	nuint MaximumDrawableCount { get; set; }

	//	// @property BOOL presentsWithTransaction;
	//	[Export ("presentsWithTransaction")]
	//	bool PresentsWithTransaction { get; set; }

	//	// @property BOOL allowsNextDrawableTimeout __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("allowsNextDrawableTimeout")]
	//	bool AllowsNextDrawableTimeout { get; set; }
	//}

	//// @interface CAEmitterCell : NSObject <NSSecureCoding, CAMediaTiming>
	//[Watch (2,0), TV (9,0), Mac (10,6), iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface CAEmitterCell : INSSecureCoding, ICAMediaTiming
	//{
	//	// +(instancetype _Nonnull)emitterCell;
	//	[Static]
	//	[Export ("emitterCell")]
	//	CAEmitterCell EmitterCell ();

	//	// +(id _Nullable)defaultValueForKey:(NSString * _Nonnull)key;
	//	[Static]
	//	[Export ("defaultValueForKey:")]
	//	[return: NullAllowed]
	//	NSObject DefaultValueForKey (string key);

	//	// -(BOOL)shouldArchiveValueForKey:(NSString * _Nonnull)key;
	//	[Export ("shouldArchiveValueForKey:")]
	//	bool ShouldArchiveValueForKey (string key);

	//	// @property (copy) NSString * _Nullable name;
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }

	//	// @property (getter = isEnabled) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property float birthRate;
	//	[Export ("birthRate")]
	//	float BirthRate { get; set; }

	//	// @property float lifetime;
	//	[Export ("lifetime")]
	//	float Lifetime { get; set; }

	//	// @property float lifetimeRange;
	//	[Export ("lifetimeRange")]
	//	float LifetimeRange { get; set; }

	//	// @property CGFloat emissionLatitude;
	//	[Export ("emissionLatitude")]
	//	nfloat EmissionLatitude { get; set; }

	//	// @property CGFloat emissionLongitude;
	//	[Export ("emissionLongitude")]
	//	nfloat EmissionLongitude { get; set; }

	//	// @property CGFloat emissionRange;
	//	[Export ("emissionRange")]
	//	nfloat EmissionRange { get; set; }

	//	// @property CGFloat velocity;
	//	[Export ("velocity")]
	//	nfloat Velocity { get; set; }

	//	// @property CGFloat velocityRange;
	//	[Export ("velocityRange")]
	//	nfloat VelocityRange { get; set; }

	//	// @property CGFloat xAcceleration;
	//	[Export ("xAcceleration")]
	//	nfloat XAcceleration { get; set; }

	//	// @property CGFloat yAcceleration;
	//	[Export ("yAcceleration")]
	//	nfloat YAcceleration { get; set; }

	//	// @property CGFloat zAcceleration;
	//	[Export ("zAcceleration")]
	//	nfloat ZAcceleration { get; set; }

	//	// @property CGFloat scale;
	//	[Export ("scale")]
	//	nfloat Scale { get; set; }

	//	// @property CGFloat scaleRange;
	//	[Export ("scaleRange")]
	//	nfloat ScaleRange { get; set; }

	//	// @property CGFloat scaleSpeed;
	//	[Export ("scaleSpeed")]
	//	nfloat ScaleSpeed { get; set; }

	//	// @property CGFloat spin;
	//	[Export ("spin")]
	//	nfloat Spin { get; set; }

	//	// @property CGFloat spinRange;
	//	[Export ("spinRange")]
	//	nfloat SpinRange { get; set; }

	//	// @property CGColorRef _Nullable color;
	//	[NullAllowed, Export ("color", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* Color { get; set; }

	//	// @property float redRange;
	//	[Export ("redRange")]
	//	float RedRange { get; set; }

	//	// @property float greenRange;
	//	[Export ("greenRange")]
	//	float GreenRange { get; set; }

	//	// @property float blueRange;
	//	[Export ("blueRange")]
	//	float BlueRange { get; set; }

	//	// @property float alphaRange;
	//	[Export ("alphaRange")]
	//	float AlphaRange { get; set; }

	//	// @property float redSpeed;
	//	[Export ("redSpeed")]
	//	float RedSpeed { get; set; }

	//	// @property float greenSpeed;
	//	[Export ("greenSpeed")]
	//	float GreenSpeed { get; set; }

	//	// @property float blueSpeed;
	//	[Export ("blueSpeed")]
	//	float BlueSpeed { get; set; }

	//	// @property float alphaSpeed;
	//	[Export ("alphaSpeed")]
	//	float AlphaSpeed { get; set; }

	//	// @property (strong) id _Nullable contents;
	//	[NullAllowed, Export ("contents", ArgumentSemantic.Strong)]
	//	NSObject Contents { get; set; }

	//	// @property CGRect contentsRect;
	//	[Export ("contentsRect", ArgumentSemantic.Assign)]
	//	CGRect ContentsRect { get; set; }

	//	// @property CGFloat contentsScale;
	//	[Export ("contentsScale")]
	//	nfloat ContentsScale { get; set; }

	//	// @property (copy) NSString * _Nonnull minificationFilter;
	//	[Export ("minificationFilter")]
	//	string MinificationFilter { get; set; }

	//	// @property (copy) NSString * _Nonnull magnificationFilter;
	//	[Export ("magnificationFilter")]
	//	string MagnificationFilter { get; set; }

	//	// @property float minificationFilterBias;
	//	[Export ("minificationFilterBias")]
	//	float MinificationFilterBias { get; set; }

	//	// @property (copy) NSArray<CAEmitterCell *> * _Nullable emitterCells;
	//	[NullAllowed, Export ("emitterCells", ArgumentSemantic.Copy)]
	//	CAEmitterCell[] EmitterCells { get; set; }

	//	// @property (copy) NSDictionary * _Nullable style;
	//	[NullAllowed, Export ("style", ArgumentSemantic.Copy)]
	//	NSDictionary Style { get; set; }
	//}

	//// @interface CAEmitterLayer : CALayer
	//[Watch (2,0), TV (9,0), Mac (10,6), iOS (5,0)]
	//[BaseType (typeof(CALayer))]
	//interface CAEmitterLayer
	//{
	//	// @property (copy) NSArray<CAEmitterCell *> * _Nullable emitterCells;
	//	[NullAllowed, Export ("emitterCells", ArgumentSemantic.Copy)]
	//	CAEmitterCell[] EmitterCells { get; set; }

	//	// @property float birthRate;
	//	[Export ("birthRate")]
	//	float BirthRate { get; set; }

	//	// @property float lifetime;
	//	[Export ("lifetime")]
	//	float Lifetime { get; set; }

	//	// @property CGPoint emitterPosition;
	//	[Export ("emitterPosition", ArgumentSemantic.Assign)]
	//	CGPoint EmitterPosition { get; set; }

	//	// @property CGFloat emitterZPosition;
	//	[Export ("emitterZPosition")]
	//	nfloat EmitterZPosition { get; set; }

	//	// @property CGSize emitterSize;
	//	[Export ("emitterSize", ArgumentSemantic.Assign)]
	//	CGSize EmitterSize { get; set; }

	//	// @property CGFloat emitterDepth;
	//	[Export ("emitterDepth")]
	//	nfloat EmitterDepth { get; set; }

	//	// @property (copy) CAEmitterLayerEmitterShape _Nonnull emitterShape;
	//	[Export ("emitterShape")]
	//	string EmitterShape { get; set; }

	//	// @property (copy) CAEmitterLayerEmitterMode _Nonnull emitterMode;
	//	[Export ("emitterMode")]
	//	string EmitterMode { get; set; }

	//	// @property (copy) CAEmitterLayerRenderMode _Nonnull renderMode;
	//	[Export ("renderMode")]
	//	string RenderMode { get; set; }

	//	// @property BOOL preservesDepth;
	//	[Export ("preservesDepth")]
	//	bool PreservesDepth { get; set; }

	//	// @property float velocity;
	//	[Export ("velocity")]
	//	float Velocity { get; set; }

	//	// @property float scale;
	//	[Export ("scale")]
	//	float Scale { get; set; }

	//	// @property float spin;
	//	[Export ("spin")]
	//	float Spin { get; set; }

	//	// @property unsigned int seed;
	//	[Export ("seed")]
	//	uint Seed { get; set; }
	//}

	//// @interface CAMediaTimingFunction : NSObject <NSSecureCoding>
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface CAMediaTimingFunction : INSSecureCoding
	//{
	//	// +(instancetype _Nonnull)functionWithName:(CAMediaTimingFunctionName _Nonnull)name;
	//	[Static]
	//	[Export ("functionWithName:")]
	//	CAMediaTimingFunction FunctionWithName (string name);

	//	// +(instancetype _Nonnull)functionWithControlPoints:(float)c1x :(float)c1y :(float)c2x :(float)c2y;
	//	[Static]
	//	[Export ("functionWithControlPoints::::")]
	//	CAMediaTimingFunction FunctionWithControlPoints (float c1x, float c1y, float c2x, float c2y);

	//	// -(instancetype _Nonnull)initWithControlPoints:(float)c1x :(float)c1y :(float)c2x :(float)c2y;
	//	[Export ("initWithControlPoints::::")]
	//	IntPtr Constructor (float c1x, float c1y, float c2x, float c2y);

	//	// -(void)getControlPointAtIndex:(size_t)idx values:(float * _Nonnull)ptr;
	//	[Export ("getControlPointAtIndex:values:")]
	//	void GetControlPointAtIndex (nuint idx, float[] ptr);
	//}

	//// @interface CAGradientLayer : CALayer
	//[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
	//[BaseType (typeof(CALayer))]
	//interface CAGradientLayer
	//{
	//	// @property (copy) NSArray * _Nullable colors;
	//	[NullAllowed, Export ("colors", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] Colors { get; set; }

	//	// @property (copy) NSArray<NSNumber *> * _Nullable locations;
	//	[NullAllowed, Export ("locations", ArgumentSemantic.Copy)]
	//	NSNumber[] Locations { get; set; }

	//	// @property CGPoint startPoint;
	//	[Export ("startPoint", ArgumentSemantic.Assign)]
	//	CGPoint StartPoint { get; set; }

	//	// @property CGPoint endPoint;
	//	[Export ("endPoint", ArgumentSemantic.Assign)]
	//	CGPoint EndPoint { get; set; }

	//	// @property (copy) CAGradientLayerType _Nonnull type;
	//	[Export ("type")]
	//	string Type { get; set; }
	//}

	//// @interface CAReplicatorLayer : CALayer
	//[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
	//[BaseType (typeof(CALayer))]
	//interface CAReplicatorLayer
	//{
	//	// @property NSInteger instanceCount;
	//	[Export ("instanceCount")]
	//	nint InstanceCount { get; set; }

	//	// @property BOOL preservesDepth;
	//	[Export ("preservesDepth")]
	//	bool PreservesDepth { get; set; }

	//	// @property CFTimeInterval instanceDelay;
	//	[Export ("instanceDelay")]
	//	double InstanceDelay { get; set; }

	//	// @property CATransform3D instanceTransform;
	//	[Export ("instanceTransform", ArgumentSemantic.Assign)]
	//	CATransform3D InstanceTransform { get; set; }

	//	// @property CGColorRef _Nullable instanceColor;
	//	[NullAllowed, Export ("instanceColor", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* InstanceColor { get; set; }

	//	// @property float instanceRedOffset;
	//	[Export ("instanceRedOffset")]
	//	float InstanceRedOffset { get; set; }

	//	// @property float instanceGreenOffset;
	//	[Export ("instanceGreenOffset")]
	//	float InstanceGreenOffset { get; set; }

	//	// @property float instanceBlueOffset;
	//	[Export ("instanceBlueOffset")]
	//	float InstanceBlueOffset { get; set; }

	//	// @property float instanceAlphaOffset;
	//	[Export ("instanceAlphaOffset")]
	//	float InstanceAlphaOffset { get; set; }
	//}

	//// @interface CAScrollLayer : CALayer
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(CALayer))]
	//interface CAScrollLayer
	//{
	//	// -(void)scrollToPoint:(CGPoint)p;
	//	[Export ("scrollToPoint:")]
	//	void ScrollToPoint (CGPoint p);

	//	// -(void)scrollToRect:(CGRect)r;
	//	[Export ("scrollToRect:")]
	//	void ScrollToRect (CGRect r);

	//	// @property (copy) CAScrollLayerScrollMode _Nonnull scrollMode;
	//	[Export ("scrollMode")]
	//	string ScrollMode { get; set; }
	//}

	//// @interface CALayerScrolling (CALayer)
	//[Category]
	//[BaseType (typeof(CALayer))]
	//interface CALayer_CALayerScrolling
	//{
	//	// -(void)scrollPoint:(CGPoint)p;
	//	[Export ("scrollPoint:")]
	//	void ScrollPoint (CGPoint p);

	//	// -(void)scrollRectToVisible:(CGRect)r;
	//	[Export ("scrollRectToVisible:")]
	//	void ScrollRectToVisible (CGRect r);

	//	// @property (readonly) CGRect visibleRect;
	//	[Export ("visibleRect")]
	//	CGRect VisibleRect { get; }
	//}

	//// @interface CAShapeLayer : CALayer
	//[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
	//[BaseType (typeof(CALayer))]
	//interface CAShapeLayer
	//{
	//	// @property CGPathRef _Nullable path;
	//	[NullAllowed, Export ("path", ArgumentSemantic.Assign)]
	//	unsafe CGPathRef* Path { get; set; }

	//	// @property CGColorRef _Nullable fillColor;
	//	[NullAllowed, Export ("fillColor", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* FillColor { get; set; }

	//	// @property (copy) CAShapeLayerFillRule _Nonnull fillRule;
	//	[Export ("fillRule")]
	//	string FillRule { get; set; }

	//	// @property CGColorRef _Nullable strokeColor;
	//	[NullAllowed, Export ("strokeColor", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* StrokeColor { get; set; }

	//	// @property CGFloat strokeStart;
	//	[Export ("strokeStart")]
	//	nfloat StrokeStart { get; set; }

	//	// @property CGFloat strokeEnd;
	//	[Export ("strokeEnd")]
	//	nfloat StrokeEnd { get; set; }

	//	// @property CGFloat lineWidth;
	//	[Export ("lineWidth")]
	//	nfloat LineWidth { get; set; }

	//	// @property CGFloat miterLimit;
	//	[Export ("miterLimit")]
	//	nfloat MiterLimit { get; set; }

	//	// @property (copy) CAShapeLayerLineCap _Nonnull lineCap;
	//	[Export ("lineCap")]
	//	string LineCap { get; set; }

	//	// @property (copy) CAShapeLayerLineJoin _Nonnull lineJoin;
	//	[Export ("lineJoin")]
	//	string LineJoin { get; set; }

	//	// @property CGFloat lineDashPhase;
	//	[Export ("lineDashPhase")]
	//	nfloat LineDashPhase { get; set; }

	//	// @property (copy) NSArray<NSNumber *> * _Nullable lineDashPattern;
	//	[NullAllowed, Export ("lineDashPattern", ArgumentSemantic.Copy)]
	//	NSNumber[] LineDashPattern { get; set; }
	//}

	//// @interface CATextLayer : CALayer
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(CALayer))]
	//interface CATextLayer
	//{
	//	// @property (copy) id _Nullable string;
	//	[NullAllowed, Export ("string", ArgumentSemantic.Copy)]
	//	NSObject String { get; set; }

	//	// @property CFTypeRef _Nullable font;
	//	[NullAllowed, Export ("font", ArgumentSemantic.Assign)]
	//	unsafe void* Font { get; set; }

	//	// @property CGFloat fontSize;
	//	[Export ("fontSize")]
	//	nfloat FontSize { get; set; }

	//	// @property CGColorRef _Nullable foregroundColor;
	//	[NullAllowed, Export ("foregroundColor", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* ForegroundColor { get; set; }

	//	// @property (getter = isWrapped) BOOL wrapped;
	//	[Export ("wrapped")]
	//	bool Wrapped { [Bind ("isWrapped")] get; set; }

	//	// @property (copy) CATextLayerTruncationMode _Nonnull truncationMode;
	//	[Export ("truncationMode")]
	//	string TruncationMode { get; set; }

	//	// @property (copy) CATextLayerAlignmentMode _Nonnull alignmentMode;
	//	[Export ("alignmentMode")]
	//	string AlignmentMode { get; set; }

	//	// @property BOOL allowsFontSubpixelQuantization;
	//	[Export ("allowsFontSubpixelQuantization")]
	//	bool AllowsFontSubpixelQuantization { get; set; }
	//}

	//// @interface CATiledLayer : CALayer
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(CALayer))]
	//interface CATiledLayer
	//{
	//	// +(CFTimeInterval)fadeDuration;
	//	[Static]
	//	[Export ("fadeDuration")]
	//	[Verify (MethodToProperty)]
	//	double FadeDuration { get; }

	//	// @property size_t levelsOfDetail;
	//	[Export ("levelsOfDetail")]
	//	nuint LevelsOfDetail { get; set; }

	//	// @property size_t levelsOfDetailBias;
	//	[Export ("levelsOfDetailBias")]
	//	nuint LevelsOfDetailBias { get; set; }

	//	// @property CGSize tileSize;
	//	[Export ("tileSize", ArgumentSemantic.Assign)]
	//	CGSize TileSize { get; set; }
	//}

	//// @interface CATransaction : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface CATransaction
	//{
	//	// +(void)begin;
	//	[Static]
	//	[Export ("begin")]
	//	void Begin ();

	//	// +(void)commit;
	//	[Static]
	//	[Export ("commit")]
	//	void Commit ();

	//	// +(void)flush;
	//	[Static]
	//	[Export ("flush")]
	//	void Flush ();

	//	// +(void)lock;
	//	[Static]
	//	[Export ("lock")]
	//	void Lock ();

	//	// +(void)unlock;
	//	[Static]
	//	[Export ("unlock")]
	//	void Unlock ();

	//	// +(CFTimeInterval)animationDuration;
	//	// +(void)setAnimationDuration:(CFTimeInterval)dur;
	//	[Static]
	//	[Export ("animationDuration")]
	//	[Verify (MethodToProperty)]
	//	double AnimationDuration { get; set; }

	//	// +(CAMediaTimingFunction * _Nullable)animationTimingFunction;
	//	[Static]
	//	[Export ("animationTimingFunction")]
	//	[return: NullAllowed]
	//	CAMediaTimingFunction AnimationTimingFunction ();

	//	// +(void)setAnimationTimingFunction:(CAMediaTimingFunction * _Nullable)function;
	//	[Static]
	//	[Export ("setAnimationTimingFunction:")]
	//	void SetAnimationTimingFunction ([NullAllowed] CAMediaTimingFunction function);

	//	// +(BOOL)disableActions;
	//	[Static]
	//	[Export ("disableActions")]
	//	bool DisableActions ();

	//	// +(void)setDisableActions:(BOOL)flag;
	//	[Static]
	//	[Export ("setDisableActions:")]
	//	void SetDisableActions (bool flag);

	//	// +(void (^ _Nullable)(void))completionBlock;
	//	[Static]
	//	[Export ("completionBlock")]
	//	[return: NullAllowed]
	//	Action CompletionBlock ();

	//	// +(void)setCompletionBlock:(void (^ _Nullable)(void))block;
	//	[Static]
	//	[Export ("setCompletionBlock:")]
	//	void SetCompletionBlock ([NullAllowed] Action block);

	//	// +(id _Nullable)valueForKey:(NSString * _Nonnull)key;
	//	[Static]
	//	[Export ("valueForKey:")]
	//	[return: NullAllowed]
	//	NSObject ValueForKey (string key);

	//	// +(void)setValue:(id _Nullable)anObject forKey:(NSString * _Nonnull)key;
	//	[Static]
	//	[Export ("setValue:forKey:")]
	//	void SetValue ([NullAllowed] NSObject anObject, string key);
	//}

	//// @interface CATransformLayer : CALayer
	//[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
	//[BaseType (typeof(CALayer))]
	//interface CATransformLayer
	//{
	//}

	//// @interface CAValueFunction : NSObject <NSSecureCoding>
	//[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface CAValueFunction : INSSecureCoding
	//{
	//	// +(instancetype _Nullable)functionWithName:(CAValueFunctionName _Nonnull)name;
	//	[Static]
	//	[Export ("functionWithName:")]
	//	[return: NullAllowed]
	//	CAValueFunction FunctionWithName (string name);

	//	// @property (readonly) CAValueFunctionName _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }
	//}

	//// typedef _Bool (^CGImageMetadataTagBlock)(CFStringRef _Nonnull, CGImageMetadataTagRef _Nonnull);
	//unsafe delegate bool CGImageMetadataTagBlock (CFStringRef* arg0, CGImageMetadataTagRef* arg1);

	//// @protocol AVAsynchronousKeyValueLoading
	//[Protocol, Model]
	//interface AVAsynchronousKeyValueLoading
	//{
	//	// @required -(AVKeyValueStatus)statusOfValueForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)outError;
	//	[Abstract]
	//	[Export ("statusOfValueForKey:error:")]
	//	AVKeyValueStatus StatusOfValueForKey (string key, [NullAllowed] out NSError outError);

	//	// @required -(void)loadValuesAsynchronouslyForKeys:(NSArray<NSString *> * _Nonnull)keys completionHandler:(void (^ _Nullable)(void))handler;
	//	[Abstract]
	//	[Export ("loadValuesAsynchronouslyForKeys:completionHandler:")]
	//	void LoadValuesAsynchronouslyForKeys (string[] keys, [NullAllowed] Action handler);
	//}

	//// @interface AVContentKeySession : NSObject
	//[TV (10,2), NoWatch, Mac (10,12,4), iOS (10,3)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVContentKeySession
	//{
	//	// +(instancetype _Nonnull)contentKeySessionWithKeySystem:(AVContentKeySystem _Nonnull)keySystem __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), NoWatch, Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("contentKeySessionWithKeySystem:")]
	//	AVContentKeySession ContentKeySessionWithKeySystem (string keySystem);

	//	// +(instancetype _Nonnull)contentKeySessionWithKeySystem:(AVContentKeySystem _Nonnull)keySystem storageDirectoryAtURL:(NSURL * _Nonnull)storageURL;
	//	[Static]
	//	[Export ("contentKeySessionWithKeySystem:storageDirectoryAtURL:")]
	//	AVContentKeySession ContentKeySessionWithKeySystem (string keySystem, NSUrl storageURL);

	//	// -(void)setDelegate:(id<AVContentKeySessionDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)delegateQueue;
	//	[Export ("setDelegate:queue:")]
	//	void SetDelegate ([NullAllowed] AVContentKeySessionDelegate @delegate, [NullAllowed] DispatchQueue delegateQueue);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVContentKeySessionDelegate Delegate { get; }

	//	// @property (readonly, weak) id<AVContentKeySessionDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; }

	//	// @property (readonly) dispatch_queue_t _Nullable delegateQueue;
	//	[NullAllowed, Export ("delegateQueue")]
	//	DispatchQueue DelegateQueue { get; }

	//	// @property (readonly) NSURL * _Nullable storageURL;
	//	[NullAllowed, Export ("storageURL")]
	//	NSUrl StorageURL { get; }

	//	// @property (readonly) AVContentKeySystem _Nonnull keySystem;
	//	[Export ("keySystem")]
	//	string KeySystem { get; }

	//	// -(void)expire;
	//	[Export ("expire")]
	//	void Expire ();

	//	// @property (readonly) NSData * _Nullable contentProtectionSessionIdentifier;
	//	[NullAllowed, Export ("contentProtectionSessionIdentifier")]
	//	NSData ContentProtectionSessionIdentifier { get; }

	//	// -(void)processContentKeyRequestWithIdentifier:(id _Nullable)identifier initializationData:(NSData * _Nullable)initializationData options:(NSDictionary<NSString *,id> * _Nullable)options;
	//	[Export ("processContentKeyRequestWithIdentifier:initializationData:options:")]
	//	void ProcessContentKeyRequestWithIdentifier ([NullAllowed] NSObject identifier, [NullAllowed] NSData initializationData, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(void)renewExpiringResponseDataForContentKeyRequest:(AVContentKeyRequest * _Nonnull)contentKeyRequest;
	//	[Export ("renewExpiringResponseDataForContentKeyRequest:")]
	//	void RenewExpiringResponseDataForContentKeyRequest (AVContentKeyRequest contentKeyRequest);

	//	// -(void)makeSecureTokenForExpirationDateOfPersistableContentKey:(NSData * _Nonnull)persistableContentKeyData completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))handler __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("makeSecureTokenForExpirationDateOfPersistableContentKey:completionHandler:")]
	//	void MakeSecureTokenForExpirationDateOfPersistableContentKey (NSData persistableContentKeyData, Action<NSData, NSError> handler);
	//}

	//// @interface AVContentKeyRecipients (AVContentKeySession)
	//[Category]
	//[BaseType (typeof(AVContentKeySession))]
	//interface AVContentKeySession_AVContentKeyRecipients
	//{
	//	// -(void)addContentKeyRecipient:(id<AVContentKeyRecipient> _Nonnull)recipient;
	//	[Export ("addContentKeyRecipient:")]
	//	void AddContentKeyRecipient (AVContentKeyRecipient recipient);

	//	// -(void)removeContentKeyRecipient:(id<AVContentKeyRecipient> _Nonnull)recipient;
	//	[Export ("removeContentKeyRecipient:")]
	//	void RemoveContentKeyRecipient (AVContentKeyRecipient recipient);

	//	// @property (readonly) NSArray<id<AVContentKeyRecipient>> * _Nonnull contentKeyRecipients;
	//	[Export ("contentKeyRecipients")]
	//	AVContentKeyRecipient[] ContentKeyRecipients { get; }
	//}

	//// @interface AVContentKeySessionPendingExpiredSessionReports (AVContentKeySession)
	//[Category]
	//[BaseType (typeof(AVContentKeySession))]
	//interface AVContentKeySession_AVContentKeySessionPendingExpiredSessionReports
	//{
	//	// +(NSArray<NSData *> * _Nonnull)pendingExpiredSessionReportsWithAppIdentifier:(NSData * _Nonnull)appIdentifier storageDirectoryAtURL:(NSURL * _Nonnull)storageURL;
	//	[Static]
	//	[Export ("pendingExpiredSessionReportsWithAppIdentifier:storageDirectoryAtURL:")]
	//	NSData[] PendingExpiredSessionReportsWithAppIdentifier (NSData appIdentifier, NSUrl storageURL);

	//	// +(void)removePendingExpiredSessionReports:(NSArray<NSData *> * _Nonnull)expiredSessionReports withAppIdentifier:(NSData * _Nonnull)appIdentifier storageDirectoryAtURL:(NSURL * _Nonnull)storageURL;
	//	[Static]
	//	[Export ("removePendingExpiredSessionReports:withAppIdentifier:storageDirectoryAtURL:")]
	//	void RemovePendingExpiredSessionReports (NSData[] expiredSessionReports, NSData appIdentifier, NSUrl storageURL);
	//}

	//// @protocol AVContentKeySessionDelegate <NSObject>
	//[TV (10,2), NoWatch, Mac (10,12,4), iOS (10,3)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVContentKeySessionDelegate
	//{
	//	// @required -(void)contentKeySession:(AVContentKeySession * _Nonnull)session didProvideContentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest;
	//	[Abstract]
	//	[Export ("contentKeySession:didProvideContentKeyRequest:")]
	//	void ContentKeySession (AVContentKeySession session, AVContentKeyRequest keyRequest);

	//	// @optional -(void)contentKeySession:(AVContentKeySession * _Nonnull)session didProvideRenewingContentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest;
	//	[Export ("contentKeySession:didProvideRenewingContentKeyRequest:")]
	//	void ContentKeySession (AVContentKeySession session, AVContentKeyRequest keyRequest);

	//	// @optional -(void)contentKeySession:(AVContentKeySession * _Nonnull)session didProvidePersistableContentKeyRequest:(AVPersistableContentKeyRequest * _Nonnull)keyRequest;
	//	[Export ("contentKeySession:didProvidePersistableContentKeyRequest:")]
	//	void ContentKeySession (AVContentKeySession session, AVPersistableContentKeyRequest keyRequest);

	//	// @optional -(void)contentKeySession:(AVContentKeySession * _Nonnull)session didUpdatePersistableContentKey:(NSData * _Nonnull)persistableContentKey forContentKeyIdentifier:(id _Nonnull)keyIdentifier __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("contentKeySession:didUpdatePersistableContentKey:forContentKeyIdentifier:")]
	//	void ContentKeySession (AVContentKeySession session, NSData persistableContentKey, NSObject keyIdentifier);

	//	// @optional -(void)contentKeySession:(AVContentKeySession * _Nonnull)session contentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest didFailWithError:(NSError * _Nonnull)err;
	//	[Export ("contentKeySession:contentKeyRequest:didFailWithError:")]
	//	void ContentKeySession (AVContentKeySession session, AVContentKeyRequest keyRequest, NSError err);

	//	// @optional -(BOOL)contentKeySession:(AVContentKeySession * _Nonnull)session shouldRetryContentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest reason:(AVContentKeyRequestRetryReason _Nonnull)retryReason;
	//	[Export ("contentKeySession:shouldRetryContentKeyRequest:reason:")]
	//	bool ContentKeySession (AVContentKeySession session, AVContentKeyRequest keyRequest, string retryReason);

	//	// @optional -(void)contentKeySession:(AVContentKeySession * _Nonnull)session contentKeyRequestDidSucceed:(AVContentKeyRequest * _Nonnull)keyRequest __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[TV (12,0), NoWatch, Mac (10,14), iOS (12,0)]
	//	[Export ("contentKeySession:contentKeyRequestDidSucceed:")]
	//	void ContentKeySession (AVContentKeySession session, AVContentKeyRequest keyRequest);

	//	// @optional -(void)contentKeySessionContentProtectionSessionIdentifierDidChange:(AVContentKeySession * _Nonnull)session;
	//	[Export ("contentKeySessionContentProtectionSessionIdentifierDidChange:")]
	//	void ContentKeySessionContentProtectionSessionIdentifierDidChange (AVContentKeySession session);

	//	// @optional -(void)contentKeySessionDidGenerateExpiredSessionReport:(AVContentKeySession * _Nonnull)session __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[TV (12,0), NoWatch, Mac (10,14), iOS (12,0)]
	//	[Export ("contentKeySessionDidGenerateExpiredSessionReport:")]
	//	void ContentKeySessionDidGenerateExpiredSessionReport (AVContentKeySession session);
	//}

	//// @interface AVContentKeyRequest : NSObject
	//[TV (10,2), NoWatch, Mac (10,12,4), iOS (10,3)]
	//[BaseType (typeof(NSObject))]
	//interface AVContentKeyRequest
	//{
	//	// @property (readonly) AVContentKeyRequestStatus status;
	//	[Export ("status")]
	//	AVContentKeyRequestStatus Status { get; }

	//	// @property (readonly) NSError * _Nullable error;
	//	[NullAllowed, Export ("error")]
	//	NSError Error { get; }

	//	// @property (readonly) id _Nullable identifier;
	//	[NullAllowed, Export ("identifier")]
	//	NSObject Identifier { get; }

	//	// @property (readonly, nonatomic) NSData * _Nullable initializationData;
	//	[NullAllowed, Export ("initializationData")]
	//	NSData InitializationData { get; }

	//	// @property (readonly) BOOL canProvidePersistableContentKey;
	//	[Export ("canProvidePersistableContentKey")]
	//	bool CanProvidePersistableContentKey { get; }

	//	// -(void)makeStreamingContentKeyRequestDataForApp:(NSData * _Nonnull)appIdentifier contentIdentifier:(NSData * _Nullable)contentIdentifier options:(NSDictionary<NSString *,id> * _Nullable)options completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))handler;
	//	[Export ("makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:")]
	//	void MakeStreamingContentKeyRequestDataForApp (NSData appIdentifier, [NullAllowed] NSData contentIdentifier, [NullAllowed] NSDictionary<NSString, NSObject> options, Action<NSData, NSError> handler);

	//	// -(void)processContentKeyResponse:(AVContentKeyResponse * _Nonnull)keyResponse;
	//	[Export ("processContentKeyResponse:")]
	//	void ProcessContentKeyResponse (AVContentKeyResponse keyResponse);

	//	// -(void)processContentKeyResponseError:(NSError * _Nonnull)error;
	//	[Export ("processContentKeyResponseError:")]
	//	void ProcessContentKeyResponseError (NSError error);

	//	// -(void)respondByRequestingPersistableContentKeyRequest __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3, deprecated=11.2)));
	//	[Introduced (PlatformName.iOS, 10, 3, message: "Use respondByRequestingPersistableContentKeyRequestAndReturnError: instead.")]
	//	[Deprecated (PlatformName.iOS, 11, 2, message: "Use respondByRequestingPersistableContentKeyRequestAndReturnError: instead.")]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("respondByRequestingPersistableContentKeyRequest")]
	//	void RespondByRequestingPersistableContentKeyRequest ();

	//	// -(BOOL)respondByRequestingPersistableContentKeyRequestAndReturnError:(NSError * _Nullable * _Nullable)outError __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.2)));
	//	[NoWatch, NoTV, NoMac, iOS (11,2)]
	//	[Export ("respondByRequestingPersistableContentKeyRequestAndReturnError:")]
	//	bool RespondByRequestingPersistableContentKeyRequestAndReturnError ([NullAllowed] out NSError outError);
	//}

	//// @interface AVPersistableContentKeyRequest : AVContentKeyRequest
	//[TV (10,3), NoWatch, iOS (10,3)]
	//[BaseType (typeof(AVContentKeyRequest))]
	//interface AVPersistableContentKeyRequest
	//{
	//	// -(NSData * _Nullable)persistableContentKeyFromKeyVendorResponse:(NSData * _Nonnull)keyVendorResponse options:(NSDictionary<NSString *,id> * _Nullable)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("persistableContentKeyFromKeyVendorResponse:options:error:")]
	//	[return: NullAllowed]
	//	NSData PersistableContentKeyFromKeyVendorResponse (NSData keyVendorResponse, [NullAllowed] NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError outError);
	//}

	//// @interface AVContentKeyRequestRenewal (AVContentKeyRequest)
	//[Category]
	//[BaseType (typeof(AVContentKeyRequest))]
	//interface AVContentKeyRequest_AVContentKeyRequestRenewal
	//{
	//	// @property (readonly) BOOL renewsExpiringResponseData;
	//	[Export ("renewsExpiringResponseData")]
	//	bool RenewsExpiringResponseData { get; }
	//}

	//// @interface AVContentKeyResponse : NSObject
	//[TV (10,2), NoWatch, Mac (10,12,4), iOS (10,3)]
	//[BaseType (typeof(NSObject))]
	//interface AVContentKeyResponse
	//{
	//	// +(instancetype _Nonnull)contentKeyResponseWithFairPlayStreamingKeyResponseData:(NSData * _Nonnull)keyResponseData;
	//	[Static]
	//	[Export ("contentKeyResponseWithFairPlayStreamingKeyResponseData:")]
	//	AVContentKeyResponse ContentKeyResponseWithFairPlayStreamingKeyResponseData (NSData keyResponseData);

	//	// +(instancetype _Nonnull)contentKeyResponseWithClearKeyData:(NSData * _Nonnull)keyData initializationVector:(NSData * _Nullable)initializationVector __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), NoWatch, Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("contentKeyResponseWithClearKeyData:initializationVector:")]
	//	AVContentKeyResponse ContentKeyResponseWithClearKeyData (NSData keyData, [NullAllowed] NSData initializationVector);
	//}

	//// @protocol AVContentKeyRecipient
	//[Watch (3,3), TV (10,2), Mac (10,12,4), iOS (10,3)]
	//[Protocol, Model]
	//interface AVContentKeyRecipient
	//{
	//	// @required @property (readonly, nonatomic) BOOL mayRequireContentKeysForMediaDataProcessing;
	//	[Abstract]
	//	[Export ("mayRequireContentKeysForMediaDataProcessing")]
	//	bool MayRequireContentKeysForMediaDataProcessing { get; }
	//}

	//// @interface AVAsset : NSObject <NSCopying, AVAsynchronousKeyValueLoading>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAsset : INSCopying, IAVAsynchronousKeyValueLoading
	//{
	//	// +(instancetype _Nonnull)assetWithURL:(NSURL * _Nonnull)URL;
	//	[Static]
	//	[Export ("assetWithURL:")]
	//	AVAsset AssetWithURL (NSUrl URL);

	//	// @property (readonly, nonatomic) CMTime duration;
	//	[Export ("duration")]
	//	CMTime Duration { get; }

	//	// @property (readonly, nonatomic) float preferredRate;
	//	[Export ("preferredRate")]
	//	float PreferredRate { get; }

	//	// @property (readonly, nonatomic) float preferredVolume;
	//	[Export ("preferredVolume")]
	//	float PreferredVolume { get; }

	//	// @property (readonly, nonatomic) CGAffineTransform preferredTransform;
	//	[Export ("preferredTransform")]
	//	CGAffineTransform PreferredTransform { get; }

	//	// @property (readonly, nonatomic) CGSize naturalSize __attribute__((availability(ios, introduced=4.0, deprecated=5.0)));
	//	[Introduced (PlatformName.iOS, 4, 0)]
	//	[Deprecated (PlatformName.iOS, 5, 0)]
	//	[Export ("naturalSize")]
	//	CGSize NaturalSize { get; }

	//	// @property (readonly, nonatomic) AVDisplayCriteria * _Nonnull preferredDisplayCriteria __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.2)));
	//	[TV (11, 2), NoWatch, NoMac, NoiOS]
	//	[Export ("preferredDisplayCriteria")]
	//	AVDisplayCriteria PreferredDisplayCriteria { get; }
	//}

	//// @interface AVAssetAsynchronousLoading (AVAsset)
	//[Category]
	//[BaseType (typeof(AVAsset))]
	//interface AVAsset_AVAssetAsynchronousLoading
	//{
	//	// @property (readonly, nonatomic) BOOL providesPreciseDurationAndTiming;
	//	[Export ("providesPreciseDurationAndTiming")]
	//	bool ProvidesPreciseDurationAndTiming { get; }

	//	// -(void)cancelLoading;
	//	[Export ("cancelLoading")]
	//	void CancelLoading ();
	//}

	//// @interface AVAssetReferenceRestrictions (AVAsset)
	//[Category]
	//[BaseType (typeof(AVAsset))]
	//interface AVAsset_AVAssetReferenceRestrictions
	//{
	//	// @property (readonly, nonatomic) AVAssetReferenceRestrictions referenceRestrictions __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("referenceRestrictions")]
	//	AVAssetReferenceRestrictions ReferenceRestrictions { get; }
	//}

	//// @interface AVAssetTrackInspection (AVAsset)
	//[Category]
	//[BaseType (typeof(AVAsset))]
	//interface AVAsset_AVAssetTrackInspection
	//{
	//	// @property (readonly, nonatomic) NSArray<AVAssetTrack *> * _Nonnull tracks;
	//	[Export ("tracks")]
	//	AVAssetTrack[] Tracks { get; }

	//	// -(AVAssetTrack * _Nullable)trackWithTrackID:(CMPersistentTrackID)trackID;
	//	[Export ("trackWithTrackID:")]
	//	[return: NullAllowed]
	//	AVAssetTrack TrackWithTrackID (int trackID);

	//	// -(NSArray<AVAssetTrack *> * _Nonnull)tracksWithMediaType:(AVMediaType _Nonnull)mediaType;
	//	[Export ("tracksWithMediaType:")]
	//	AVAssetTrack[] TracksWithMediaType (string mediaType);

	//	// -(NSArray<AVAssetTrack *> * _Nonnull)tracksWithMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic;
	//	[Export ("tracksWithMediaCharacteristic:")]
	//	AVAssetTrack[] TracksWithMediaCharacteristic (string mediaCharacteristic);

	//	// @property (readonly, nonatomic) NSArray<AVAssetTrackGroup *> * _Nonnull trackGroups __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("trackGroups")]
	//	AVAssetTrackGroup[] TrackGroups { get; }
	//}

	//// @interface AVAssetMetadataReading (AVAsset)
	//[Category]
	//[BaseType (typeof(AVAsset))]
	//interface AVAsset_AVAssetMetadataReading
	//{
	//	// @property (readonly, nonatomic) AVMetadataItem * _Nullable creationDate __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("creationDate")]
	//	AVMetadataItem CreationDate { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable lyrics;
	//	[NullAllowed, Export ("lyrics")]
	//	string Lyrics { get; }

	//	// @property (readonly, nonatomic) NSArray<AVMetadataItem *> * _Nonnull commonMetadata;
	//	[Export ("commonMetadata")]
	//	AVMetadataItem[] CommonMetadata { get; }

	//	// @property (readonly, nonatomic) NSArray<AVMetadataItem *> * _Nonnull metadata __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("metadata")]
	//	AVMetadataItem[] Metadata { get; }

	//	// @property (readonly, nonatomic) NSArray<AVMetadataFormat> * _Nonnull availableMetadataFormats;
	//	[Export ("availableMetadataFormats")]
	//	string[] AvailableMetadataFormats { get; }

	//	// -(NSArray<AVMetadataItem *> * _Nonnull)metadataForFormat:(AVMetadataFormat _Nonnull)format;
	//	[Export ("metadataForFormat:")]
	//	AVMetadataItem[] MetadataForFormat (string format);
	//}

	//// @interface AVAssetChapterInspection (AVAsset)
	//[Category]
	//[BaseType (typeof(AVAsset))]
	//interface AVAsset_AVAssetChapterInspection
	//{
	//	// @property (readonly) NSArray<NSLocale *> * _Nonnull availableChapterLocales __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[Export ("availableChapterLocales")]
	//	NSLocale[] AvailableChapterLocales { get; }

	//	// -(NSArray<AVTimedMetadataGroup *> * _Nonnull)chapterMetadataGroupsWithTitleLocale:(NSLocale * _Nonnull)locale containingItemsWithCommonKeys:(NSArray<AVMetadataKey> * _Nullable)commonKeys __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4,3)]
	//	[Export ("chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:")]
	//	AVTimedMetadataGroup[] ChapterMetadataGroupsWithTitleLocale (NSLocale locale, [NullAllowed] string[] commonKeys);

	//	// -(NSArray<AVTimedMetadataGroup *> * _Nonnull)chapterMetadataGroupsBestMatchingPreferredLanguages:(NSArray<NSString *> * _Nonnull)preferredLanguages __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("chapterMetadataGroupsBestMatchingPreferredLanguages:")]
	//	AVTimedMetadataGroup[] ChapterMetadataGroupsBestMatchingPreferredLanguages (string[] preferredLanguages);
	//}

	//// @interface AVAssetMediaSelection (AVAsset)
	//[Category]
	//[BaseType (typeof(AVAsset))]
	//interface AVAsset_AVAssetMediaSelection
	//{
	//	// @property (readonly, nonatomic) NSArray<AVMediaCharacteristic> * _Nonnull availableMediaCharacteristicsWithMediaSelectionOptions __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("availableMediaCharacteristicsWithMediaSelectionOptions")]
	//	string[] AvailableMediaCharacteristicsWithMediaSelectionOptions { get; }

	//	// -(AVMediaSelectionGroup * _Nullable)mediaSelectionGroupForMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("mediaSelectionGroupForMediaCharacteristic:")]
	//	[return: NullAllowed]
	//	AVMediaSelectionGroup MediaSelectionGroupForMediaCharacteristic (string mediaCharacteristic);

	//	// @property (readonly, nonatomic) AVMediaSelection * _Nonnull preferredMediaSelection __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("preferredMediaSelection")]
	//	AVMediaSelection PreferredMediaSelection { get; }

	//	// @property (readonly, nonatomic) NSArray<AVMediaSelection *> * _Nonnull allMediaSelections __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("allMediaSelections")]
	//	AVMediaSelection[] AllMediaSelections { get; }
	//}

	//// @interface AVAssetProtectedContent (AVAsset)
	//[Category]
	//[BaseType (typeof(AVAsset))]
	//interface AVAsset_AVAssetProtectedContent
	//{
	//	// @property (readonly, nonatomic) BOOL hasProtectedContent __attribute__((availability(ios, introduced=4.2)));
	//	[iOS (4, 2)]
	//	[Export ("hasProtectedContent")]
	//	bool HasProtectedContent { get; }
	//}

	//// @interface AVAssetFragments (AVAsset)
	//[Category]
	//[BaseType (typeof(AVAsset))]
	//interface AVAsset_AVAssetFragments
	//{
	//	// @property (readonly, nonatomic) BOOL canContainFragments __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("canContainFragments")]
	//	bool CanContainFragments { get; }

	//	// @property (readonly, nonatomic) BOOL containsFragments __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("containsFragments")]
	//	bool ContainsFragments { get; }

	//	// @property (readonly, nonatomic) CMTime overallDurationHint __attribute__((availability(ios, introduced=10.2)));
	//	[iOS (10, 2)]
	//	[Export ("overallDurationHint")]
	//	CMTime OverallDurationHint { get; }
	//}

	//// @interface AVAssetUsability (AVAsset)
	//[Category]
	//[BaseType (typeof(AVAsset))]
	//interface AVAsset_AVAssetUsability
	//{
	//	// @property (readonly, getter = isPlayable, nonatomic) BOOL playable __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[Export ("playable")]
	//	bool Playable { [Bind ("isPlayable")] get; }

	//	// @property (readonly, getter = isExportable, nonatomic) BOOL exportable __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[Export ("exportable")]
	//	bool Exportable { [Bind ("isExportable")] get; }

	//	// @property (readonly, getter = isReadable, nonatomic) BOOL readable __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[Export ("readable")]
	//	bool Readable { [Bind ("isReadable")] get; }

	//	// @property (readonly, getter = isComposable, nonatomic) BOOL composable __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[Export ("composable")]
	//	bool Composable { [Bind ("isComposable")] get; }

	//	// @property (readonly, getter = isCompatibleWithSavedPhotosAlbum, nonatomic) BOOL compatibleWithSavedPhotosAlbum __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("compatibleWithSavedPhotosAlbum")]
	//	bool CompatibleWithSavedPhotosAlbum { [Bind ("isCompatibleWithSavedPhotosAlbum")] get; }

	//	// @property (readonly, getter = isCompatibleWithAirPlayVideo, nonatomic) BOOL compatibleWithAirPlayVideo __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("compatibleWithAirPlayVideo")]
	//	bool CompatibleWithAirPlayVideo { [Bind ("isCompatibleWithAirPlayVideo")] get; }
	//}

	//// @interface AVURLAsset : AVAsset
	//[iOS (4,0)]
	//[BaseType (typeof(AVAsset))]
	//[DisableDefaultCtor]
	//interface AVURLAsset
	//{
	//	// +(NSArray<AVFileType> * _Nonnull)audiovisualTypes __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Static]
	//	[Export ("audiovisualTypes")]
	//	[Verify (MethodToProperty)]
	//	string[] AudiovisualTypes { get; }

	//	// +(NSArray<NSString *> * _Nonnull)audiovisualMIMETypes __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Static]
	//	[Export ("audiovisualMIMETypes")]
	//	[Verify (MethodToProperty)]
	//	string[] AudiovisualMIMETypes { get; }

	//	// +(BOOL)isPlayableExtendedMIMEType:(NSString * _Nonnull)extendedMIMEType __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("isPlayableExtendedMIMEType:")]
	//	bool IsPlayableExtendedMIMEType (string extendedMIMEType);

	//	// +(instancetype _Nonnull)URLAssetWithURL:(NSURL * _Nonnull)URL options:(NSDictionary<NSString *,id> * _Nullable)options;
	//	[Static]
	//	[Export ("URLAssetWithURL:options:")]
	//	AVUrlAsset URLAssetWithURL (NSUrl URL, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((objc_designated_initializer));
	//	[Export ("initWithURL:options:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl URL, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// @property (readonly, copy, nonatomic) NSURL * _Nonnull URL;
	//	[Export ("URL", ArgumentSemantic.Copy)]
	//	NSUrl URL { get; }
	//}

	//// @interface AVURLAssetURLHandling (AVURLAsset)
	//[Category]
	//[BaseType (typeof(AVUrlAsset))]
	//interface AVURLAsset_AVURLAssetURLHandling
	//{
	//	// @property (readonly, nonatomic) AVAssetResourceLoader * _Nonnull resourceLoader __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("resourceLoader")]
	//	AVAssetResourceLoader ResourceLoader { get; }
	//}

	//// @interface AVURLAssetCache (AVURLAsset)
	//[Category]
	//[BaseType (typeof(AVUrlAsset))]
	//interface AVURLAsset_AVURLAssetCache
	//{
	//	// @property (readonly, nonatomic) AVAssetCache * _Nullable assetCache __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("assetCache")]
	//	AVAssetCache AssetCache { get; }
	//}

	//// @interface AVAssetCompositionUtility (AVURLAsset)
	//[Category]
	//[BaseType (typeof(AVUrlAsset))]
	//interface AVURLAsset_AVAssetCompositionUtility
	//{
	//	// -(AVAssetTrack * _Nullable)compatibleTrackForCompositionTrack:(AVCompositionTrack * _Nonnull)compositionTrack;
	//	[Export ("compatibleTrackForCompositionTrack:")]
	//	[return: NullAllowed]
	//	AVAssetTrack CompatibleTrackForCompositionTrack (AVCompositionTrack compositionTrack);
	//}

	//// @protocol AVFragmentMinding
	//[Protocol, Model]
	//interface AVFragmentMinding
	//{
	//	// @required @property (readonly, getter = isAssociatedWithFragmentMinder, nonatomic) BOOL associatedWithFragmentMinder __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[TV (12, 0), NoWatch, Mac (10, 11), iOS (12, 0)]
	//	[Abstract]
	//	[Export ("associatedWithFragmentMinder")]
	//	bool AssociatedWithFragmentMinder { [Bind ("isAssociatedWithFragmentMinder")] get; }
	//}

	//// @interface AVFragmentedAsset : AVURLAsset <AVFragmentMinding>
	//[TV (12,0), NoWatch, Mac (10,11), iOS (12,0)]
	//[BaseType (typeof(AVUrlAsset))]
	//interface AVFragmentedAsset : IAVFragmentMinding
	//{
	//	// +(instancetype _Nonnull)fragmentedAssetWithURL:(NSURL * _Nonnull)URL options:(NSDictionary<NSString *,id> * _Nullable)options;
	//	[Static]
	//	[Export ("fragmentedAssetWithURL:options:")]
	//	AVFragmentedAsset FragmentedAssetWithURL (NSUrl URL, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// @property (readonly, nonatomic) NSArray<AVFragmentedAssetTrack *> * _Nonnull tracks;
	//	[Export ("tracks")]
	//	AVFragmentedAssetTrack[] Tracks { get; }
	//}

	//// @interface AVFragmentedAssetTrackInspection (AVFragmentedAsset)
	//[Category]
	//[BaseType (typeof(AVFragmentedAsset))]
	//interface AVFragmentedAsset_AVFragmentedAssetTrackInspection
	//{
	//	// -(AVFragmentedAssetTrack * _Nullable)trackWithTrackID:(CMPersistentTrackID)trackID;
	//	[Export ("trackWithTrackID:")]
	//	[return: NullAllowed]
	//	AVFragmentedAssetTrack TrackWithTrackID (int trackID);

	//	// -(NSArray<AVFragmentedAssetTrack *> * _Nonnull)tracksWithMediaType:(AVMediaType _Nonnull)mediaType;
	//	[Export ("tracksWithMediaType:")]
	//	AVFragmentedAssetTrack[] TracksWithMediaType (string mediaType);

	//	// -(NSArray<AVFragmentedAssetTrack *> * _Nonnull)tracksWithMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic;
	//	[Export ("tracksWithMediaCharacteristic:")]
	//	AVFragmentedAssetTrack[] TracksWithMediaCharacteristic (string mediaCharacteristic);
	//}

	//// @interface AVFragmentedAssetMinder : NSObject
	//[TV (12,0), NoWatch, Mac (10,11), iOS (12,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVFragmentedAssetMinder
	//{
	//	// +(instancetype _Nonnull)fragmentedAssetMinderWithAsset:(AVAsset<AVFragmentMinding> * _Nonnull)asset mindingInterval:(NSTimeInterval)mindingInterval;
	//	[Static]
	//	[Export ("fragmentedAssetMinderWithAsset:mindingInterval:")]
	//	AVFragmentedAssetMinder FragmentedAssetMinderWithAsset (AVFragmentMinding asset, double mindingInterval);

	//	// -(instancetype _Nonnull)initWithAsset:(AVAsset<AVFragmentMinding> * _Nonnull)asset mindingInterval:(NSTimeInterval)mindingInterval;
	//	[Export ("initWithAsset:mindingInterval:")]
	//	IntPtr Constructor (AVFragmentMinding asset, double mindingInterval);

	//	// @property (nonatomic) NSTimeInterval mindingInterval;
	//	[Export ("mindingInterval")]
	//	double MindingInterval { get; set; }

	//	// @property (readonly, nonatomic) NSArray<AVAsset<AVFragmentMinding> *> * _Nonnull assets;
	//	[Export ("assets")]
	//	AVFragmentMinding[] Assets { get; }

	//	// -(void)addFragmentedAsset:(AVAsset<AVFragmentMinding> * _Nonnull)asset;
	//	[Export ("addFragmentedAsset:")]
	//	void AddFragmentedAsset (AVFragmentMinding asset);

	//	// -(void)removeFragmentedAsset:(AVAsset<AVFragmentMinding> * _Nonnull)asset;
	//	[Export ("removeFragmentedAsset:")]
	//	void RemoveFragmentedAsset (AVFragmentMinding asset);
	//}

	//// @interface AVURLAssetContentKeyEligibility (AVURLAsset) <AVContentKeyRecipient>
	//[Category]
	//[BaseType (typeof(AVUrlAsset))]
	//interface AVURLAsset_AVURLAssetContentKeyEligibility : IAVContentKeyRecipient
	//{
	//	// @property (readonly, nonatomic) BOOL mayRequireContentKeysForMediaDataProcessing __attribute__((availability(watchos, introduced=3.3))) __attribute__((availability(tvos, introduced=10.2))) __attribute__((availability(ios, introduced=10.3))) __attribute__((availability(macos, introduced=10.12.4)));
	//	[Watch (3, 3), TV (10, 2), Mac (10, 12, 4), iOS (10, 3)]
	//	[Export ("mayRequireContentKeysForMediaDataProcessing")]
	//	bool MayRequireContentKeysForMediaDataProcessing { get; }
	//}

	//// @interface AVAssetCache : NSObject
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetCache
	//{
	//	// @property (readonly, getter = isPlayableOffline, nonatomic) BOOL playableOffline;
	//	[Export ("playableOffline")]
	//	bool PlayableOffline { [Bind ("isPlayableOffline")] get; }

	//	// -(NSArray<AVMediaSelectionOption *> * _Nonnull)mediaSelectionOptionsInMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
	//	[Export ("mediaSelectionOptionsInMediaSelectionGroup:")]
	//	AVMediaSelectionOption[] MediaSelectionOptionsInMediaSelectionGroup (AVMediaSelectionGroup mediaSelectionGroup);
	//}

	//// @interface AVAssetExportSession : NSObject
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetExportSession
	//{
	//	// +(instancetype _Nullable)exportSessionWithAsset:(AVAsset * _Nonnull)asset presetName:(NSString * _Nonnull)presetName __attribute__((availability(ios, introduced=4.1)));
	//	[iOS (4,1)]
	//	[Static]
	//	[Export ("exportSessionWithAsset:presetName:")]
	//	[return: NullAllowed]
	//	AVAssetExportSession ExportSessionWithAsset (AVAsset asset, string presetName);

	//	// -(instancetype _Nullable)initWithAsset:(AVAsset * _Nonnull)asset presetName:(NSString * _Nonnull)presetName __attribute__((objc_designated_initializer));
	//	[Export ("initWithAsset:presetName:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAsset asset, string presetName);

	//	// @property (readonly, nonatomic) NSString * _Nonnull presetName;
	//	[Export ("presetName")]
	//	string PresetName { get; }

	//	// @property (readonly, retain, nonatomic) AVAsset * _Nonnull asset __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("asset", ArgumentSemantic.Retain)]
	//	AVAsset Asset { get; }

	//	// @property (copy, nonatomic) AVFileType _Nullable outputFileType;
	//	[NullAllowed, Export ("outputFileType")]
	//	string OutputFileType { get; set; }

	//	// @property (copy, nonatomic) NSURL * _Nullable outputURL;
	//	[NullAllowed, Export ("outputURL", ArgumentSemantic.Copy)]
	//	NSUrl OutputURL { get; set; }

	//	// @property (nonatomic) BOOL shouldOptimizeForNetworkUse;
	//	[Export ("shouldOptimizeForNetworkUse")]
	//	bool ShouldOptimizeForNetworkUse { get; set; }

	//	// @property (readonly, nonatomic) AVAssetExportSessionStatus status;
	//	[Export ("status")]
	//	AVAssetExportSessionStatus Status { get; }

	//	// @property (readonly, nonatomic) NSError * _Nullable error;
	//	[NullAllowed, Export ("error")]
	//	NSError Error { get; }

	//	// -(void)exportAsynchronouslyWithCompletionHandler:(void (^ _Nonnull)(void))handler;
	//	[Export ("exportAsynchronouslyWithCompletionHandler:")]
	//	void ExportAsynchronouslyWithCompletionHandler (Action handler);

	//	// @property (readonly, nonatomic) float progress;
	//	[Export ("progress")]
	//	float Progress { get; }

	//	// -(void)cancelExport;
	//	[Export ("cancelExport")]
	//	void CancelExport ();
	//}

	//// @interface AVAssetExportSessionPresets (AVAssetExportSession)
	//[Category]
	//[BaseType (typeof(AVAssetExportSession))]
	//interface AVAssetExportSession_AVAssetExportSessionPresets
	//{
	//	// +(NSArray<NSString *> * _Nonnull)allExportPresets;
	//	[Static]
	//	[Export ("allExportPresets")]
	//	[Verify (MethodToProperty)]
	//	string[] AllExportPresets { get; }

	//	// +(NSArray<NSString *> * _Nonnull)exportPresetsCompatibleWithAsset:(AVAsset * _Nonnull)asset;
	//	[Static]
	//	[Export ("exportPresetsCompatibleWithAsset:")]
	//	string[] ExportPresetsCompatibleWithAsset (AVAsset asset);

	//	// +(void)determineCompatibilityOfExportPreset:(NSString * _Nonnull)presetName withAsset:(AVAsset * _Nonnull)asset outputFileType:(AVFileType _Nullable)outputFileType completionHandler:(void (^ _Nonnull)(BOOL))handler __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("determineCompatibilityOfExportPreset:withAsset:outputFileType:completionHandler:")]
	//	void DetermineCompatibilityOfExportPreset (string presetName, AVAsset asset, [NullAllowed] string outputFileType, Action<bool> handler);
	//}

	//// @interface AVAssetExportSessionFileTypes (AVAssetExportSession)
	//[Category]
	//[BaseType (typeof(AVAssetExportSession))]
	//interface AVAssetExportSession_AVAssetExportSessionFileTypes
	//{
	//	// @property (readonly, nonatomic) NSArray<AVFileType> * _Nonnull supportedFileTypes;
	//	[Export ("supportedFileTypes")]
	//	string[] SupportedFileTypes { get; }

	//	// -(void)determineCompatibleFileTypesWithCompletionHandler:(void (^ _Nonnull)(NSArray<AVFileType> * _Nonnull))handler __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("determineCompatibleFileTypesWithCompletionHandler:")]
	//	void DetermineCompatibleFileTypesWithCompletionHandler (Action<NSArray<NSString>> handler);
	//}

	//// @interface AVAssetExportSessionDurationAndLength (AVAssetExportSession)
	//[Category]
	//[BaseType (typeof(AVAssetExportSession))]
	//interface AVAssetExportSession_AVAssetExportSessionDurationAndLength
	//{
	//	// @property (nonatomic) CMTimeRange timeRange;
	//	[Export ("timeRange", ArgumentSemantic.Assign)]
	//	CMTimeRange TimeRange { get; set; }

	//	// @property (readonly, nonatomic) CMTime maxDuration __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[TV (9, 0), NoWatch, Mac (10, 14), iOS (4, 0)]
	//	[Export ("maxDuration")]
	//	CMTime MaxDuration { get; }

	//	// @property (readonly, nonatomic) long long estimatedOutputFileLength __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("estimatedOutputFileLength")]
	//	long EstimatedOutputFileLength { get; }

	//	// @property (nonatomic) long long fileLengthLimit __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[TV (9, 0), NoWatch, Mac (10, 14), iOS (4, 0)]
	//	[Export ("fileLengthLimit")]
	//	long FileLengthLimit { get; set; }
	//}

	//// @interface AVAssetExportSessionMetadata (AVAssetExportSession)
	//[Category]
	//[BaseType (typeof(AVAssetExportSession))]
	//interface AVAssetExportSession_AVAssetExportSessionMetadata
	//{
	//	// @property (copy, nonatomic) NSArray<AVMetadataItem *> * _Nullable metadata;
	//	[NullAllowed, Export ("metadata", ArgumentSemantic.Copy)]
	//	AVMetadataItem[] Metadata { get; set; }

	//	// @property (retain, nonatomic) AVMetadataItemFilter * _Nullable metadataItemFilter __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("metadataItemFilter", ArgumentSemantic.Retain)]
	//	AVMetadataItemFilter MetadataItemFilter { get; set; }
	//}

	//// @interface AVAssetExportSessionMediaProcessing (AVAssetExportSession)
	//[Category]
	//[BaseType (typeof(AVAssetExportSession))]
	//interface AVAssetExportSession_AVAssetExportSessionMediaProcessing
	//{
	//	// @property (copy, nonatomic) AVAudioTimePitchAlgorithm _Nonnull audioTimePitchAlgorithm __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("audioTimePitchAlgorithm")]
	//	string AudioTimePitchAlgorithm { get; set; }

	//	// @property (copy, nonatomic) AVAudioMix * _Nullable audioMix;
	//	[NullAllowed, Export ("audioMix", ArgumentSemantic.Copy)]
	//	AVAudioMix AudioMix { get; set; }

	//	// @property (copy, nonatomic) AVVideoComposition * _Nullable videoComposition;
	//	[NullAllowed, Export ("videoComposition", ArgumentSemantic.Copy)]
	//	AVVideoComposition VideoComposition { get; set; }

	//	// @property (readonly, nonatomic) id<AVVideoCompositing> _Nullable customVideoCompositor __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("customVideoCompositor")]
	//	AVVideoCompositing CustomVideoCompositor { get; }
	//}

	//// @interface AVAssetExportSessionMultipass (AVAssetExportSession)
	//[Category]
	//[BaseType (typeof(AVAssetExportSession))]
	//interface AVAssetExportSession_AVAssetExportSessionMultipass
	//{
	//	// @property (nonatomic) BOOL canPerformMultiplePassesOverSourceMediaData __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("canPerformMultiplePassesOverSourceMediaData")]
	//	bool CanPerformMultiplePassesOverSourceMediaData { get; set; }

	//	// @property (copy, nonatomic) NSURL * _Nullable directoryForTemporaryFiles __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("directoryForTemporaryFiles", ArgumentSemantic.Copy)]
	//	NSUrl DirectoryForTemporaryFiles { get; set; }
	//}

	//// @interface AVAssetImageGenerator : NSObject
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetImageGenerator
	//{
	//	// @property (readonly, nonatomic) AVAsset * _Nonnull asset __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("asset")]
	//	AVAsset Asset { get; }

	//	// @property (nonatomic) BOOL appliesPreferredTrackTransform;
	//	[Export ("appliesPreferredTrackTransform")]
	//	bool AppliesPreferredTrackTransform { get; set; }

	//	// @property (nonatomic) CGSize maximumSize;
	//	[Export ("maximumSize", ArgumentSemantic.Assign)]
	//	CGSize MaximumSize { get; set; }

	//	// @property (copy, nonatomic) AVAssetImageGeneratorApertureMode _Nullable apertureMode;
	//	[NullAllowed, Export ("apertureMode")]
	//	string ApertureMode { get; set; }

	//	// @property (copy, nonatomic) AVVideoComposition * _Nullable videoComposition;
	//	[NullAllowed, Export ("videoComposition", ArgumentSemantic.Copy)]
	//	AVVideoComposition VideoComposition { get; set; }

	//	// @property (readonly, nonatomic) id<AVVideoCompositing> _Nullable customVideoCompositor __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("customVideoCompositor")]
	//	AVVideoCompositing CustomVideoCompositor { get; }

	//	// @property (nonatomic) CMTime requestedTimeToleranceBefore __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("requestedTimeToleranceBefore", ArgumentSemantic.Assign)]
	//	CMTime RequestedTimeToleranceBefore { get; set; }

	//	// @property (nonatomic) CMTime requestedTimeToleranceAfter __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("requestedTimeToleranceAfter", ArgumentSemantic.Assign)]
	//	CMTime RequestedTimeToleranceAfter { get; set; }

	//	// +(instancetype _Nonnull)assetImageGeneratorWithAsset:(AVAsset * _Nonnull)asset;
	//	[Static]
	//	[Export ("assetImageGeneratorWithAsset:")]
	//	AVAssetImageGenerator AssetImageGeneratorWithAsset (AVAsset asset);

	//	// -(instancetype _Nonnull)initWithAsset:(AVAsset * _Nonnull)asset __attribute__((objc_designated_initializer));
	//	[Export ("initWithAsset:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAsset asset);

	//	// -(CGImageRef _Nullable)copyCGImageAtTime:(CMTime)requestedTime actualTime:(CMTime * _Nullable)actualTime error:(NSError * _Nullable * _Nullable)outError __attribute__((cf_returns_retained));
	//	[Export ("copyCGImageAtTime:actualTime:error:")]
	//	[return: NullAllowed]
	//	unsafe CGImageRef* CopyCGImageAtTime (CMTime requestedTime, [NullAllowed] CMTime* actualTime, [NullAllowed] out NSError outError);

	//	// -(void)generateCGImagesAsynchronouslyForTimes:(NSArray<NSValue *> * _Nonnull)requestedTimes completionHandler:(AVAssetImageGeneratorCompletionHandler _Nonnull)handler;
	//	[Export ("generateCGImagesAsynchronouslyForTimes:completionHandler:")]
	//	void GenerateCGImagesAsynchronouslyForTimes (NSValue[] requestedTimes, AVAssetImageGeneratorCompletionHandler handler);

	//	// -(void)cancelAllCGImageGeneration;
	//	[Export ("cancelAllCGImageGeneration")]
	//	void CancelAllCGImageGeneration ();
	//}

	//// typedef void (^AVAssetImageGeneratorCompletionHandler)(CMTime, CGImageRef _Nullable, CMTime, AVAssetImageGeneratorResult, NSError * _Nullable);
	//unsafe delegate void AVAssetImageGeneratorCompletionHandler (CMTime arg0, [NullAllowed] CGImageRef* arg1, CMTime arg2, AVAssetImageGeneratorResult arg3, [NullAllowed] NSError arg4);

	//// @interface AVAssetReader : NSObject
	//[iOS (4,1)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetReader
	//{
	//	// +(instancetype _Nullable)assetReaderWithAsset:(AVAsset * _Nonnull)asset error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("assetReaderWithAsset:error:")]
	//	[return: NullAllowed]
	//	AVAssetReader AssetReaderWithAsset (AVAsset asset, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initWithAsset:(AVAsset * _Nonnull)asset error:(NSError * _Nullable * _Nullable)outError __attribute__((objc_designated_initializer));
	//	[Export ("initWithAsset:error:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAsset asset, [NullAllowed] out NSError outError);

	//	// @property (readonly, retain, nonatomic) AVAsset * _Nonnull asset;
	//	[Export ("asset", ArgumentSemantic.Retain)]
	//	AVAsset Asset { get; }

	//	// @property (readonly) AVAssetReaderStatus status;
	//	[Export ("status")]
	//	AVAssetReaderStatus Status { get; }

	//	// @property (readonly) NSError * _Nullable error;
	//	[NullAllowed, Export ("error")]
	//	NSError Error { get; }

	//	// @property (nonatomic) CMTimeRange timeRange;
	//	[Export ("timeRange", ArgumentSemantic.Assign)]
	//	CMTimeRange TimeRange { get; set; }

	//	// @property (readonly, nonatomic) NSArray<AVAssetReaderOutput *> * _Nonnull outputs;
	//	[Export ("outputs")]
	//	AVAssetReaderOutput[] Outputs { get; }

	//	// -(BOOL)canAddOutput:(AVAssetReaderOutput * _Nonnull)output;
	//	[Export ("canAddOutput:")]
	//	bool CanAddOutput (AVAssetReaderOutput output);

	//	// -(void)addOutput:(AVAssetReaderOutput * _Nonnull)output;
	//	[Export ("addOutput:")]
	//	void AddOutput (AVAssetReaderOutput output);

	//	// -(BOOL)startReading;
	//	[Export ("startReading")]
	//	[Verify (MethodToProperty)]
	//	bool StartReading { get; }

	//	// -(void)cancelReading;
	//	[Export ("cancelReading")]
	//	void CancelReading ();
	//}

	//// @interface AVVideoCompositionRenderContext : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVVideoCompositionRenderContext
	//{
	//	// @property (readonly, nonatomic) CGSize size;
	//	[Export ("size")]
	//	CGSize Size { get; }

	//	// @property (readonly, nonatomic) CGAffineTransform renderTransform;
	//	[Export ("renderTransform")]
	//	CGAffineTransform RenderTransform { get; }

	//	// @property (readonly, nonatomic) float renderScale;
	//	[Export ("renderScale")]
	//	float RenderScale { get; }

	//	// @property (readonly, nonatomic) AVPixelAspectRatio pixelAspectRatio;
	//	[Export ("pixelAspectRatio")]
	//	AVPixelAspectRatio PixelAspectRatio { get; }

	//	// @property (readonly, nonatomic) AVEdgeWidths edgeWidths;
	//	[Export ("edgeWidths")]
	//	AVEdgeWidths EdgeWidths { get; }

	//	// @property (readonly, nonatomic) BOOL highQualityRendering;
	//	[Export ("highQualityRendering")]
	//	bool HighQualityRendering { get; }

	//	// @property (readonly, nonatomic) AVVideoComposition * _Nonnull videoComposition;
	//	[Export ("videoComposition")]
	//	AVVideoComposition VideoComposition { get; }

	//	// -(CVPixelBufferRef _Nullable)newPixelBuffer __attribute__((cf_returns_retained));
	//	[NullAllowed, Export ("newPixelBuffer")]
	//	[Verify (MethodToProperty)]
	//	unsafe CVPixelBufferRef* NewPixelBuffer { get; }
	//}

	//// @protocol AVVideoCompositing <NSObject>
	//[iOS (7,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVVideoCompositing
	//{
	//	// @required @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nullable sourcePixelBufferAttributes;
	//	[Abstract]
	//	[NullAllowed, Export ("sourcePixelBufferAttributes")]
	//	NSDictionary<NSString, NSObject> SourcePixelBufferAttributes { get; }

	//	// @required @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nonnull requiredPixelBufferAttributesForRenderContext;
	//	[Abstract]
	//	[Export ("requiredPixelBufferAttributesForRenderContext")]
	//	NSDictionary<NSString, NSObject> RequiredPixelBufferAttributesForRenderContext { get; }

	//	// @required -(void)renderContextChanged:(AVVideoCompositionRenderContext * _Nonnull)newRenderContext;
	//	[Abstract]
	//	[Export ("renderContextChanged:")]
	//	void RenderContextChanged (AVVideoCompositionRenderContext newRenderContext);

	//	// @required -(void)startVideoCompositionRequest:(AVAsynchronousVideoCompositionRequest * _Nonnull)asyncVideoCompositionRequest;
	//	[Abstract]
	//	[Export ("startVideoCompositionRequest:")]
	//	void StartVideoCompositionRequest (AVAsynchronousVideoCompositionRequest asyncVideoCompositionRequest);

	//	// @optional -(void)cancelAllPendingVideoCompositionRequests;
	//	[Export ("cancelAllPendingVideoCompositionRequests")]
	//	void CancelAllPendingVideoCompositionRequests ();

	//	// @optional @property (readonly, nonatomic) BOOL supportsWideColorSourceFrames __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("supportsWideColorSourceFrames")]
	//	bool SupportsWideColorSourceFrames { get; }
	//}

	//// @interface AVAsynchronousVideoCompositionRequest : NSObject <NSCopying>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAsynchronousVideoCompositionRequest : INSCopying
	//{
	//	// @property (readonly, nonatomic) AVVideoCompositionRenderContext * _Nonnull renderContext;
	//	[Export ("renderContext")]
	//	AVVideoCompositionRenderContext RenderContext { get; }

	//	// @property (readonly, nonatomic) CMTime compositionTime;
	//	[Export ("compositionTime")]
	//	CMTime CompositionTime { get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull sourceTrackIDs;
	//	[Export ("sourceTrackIDs")]
	//	NSNumber[] SourceTrackIDs { get; }

	//	// @property (readonly, nonatomic) id<AVVideoCompositionInstruction> _Nonnull videoCompositionInstruction;
	//	[Export ("videoCompositionInstruction")]
	//	AVVideoCompositionInstruction VideoCompositionInstruction { get; }

	//	// -(CVPixelBufferRef _Nullable)sourceFrameByTrackID:(CMPersistentTrackID)trackID __attribute__((cf_returns_not_retained));
	//	[Export ("sourceFrameByTrackID:")]
	//	[return: NullAllowed]
	//	unsafe CVPixelBufferRef* SourceFrameByTrackID (int trackID);

	//	// -(void)finishWithComposedVideoFrame:(CVPixelBufferRef _Nonnull)composedVideoFrame;
	//	[Export ("finishWithComposedVideoFrame:")]
	//	unsafe void FinishWithComposedVideoFrame (CVPixelBufferRef* composedVideoFrame);

	//	// -(void)finishWithError:(NSError * _Nonnull)error;
	//	[Export ("finishWithError:")]
	//	void FinishWithError (NSError error);

	//	// -(void)finishCancelledRequest;
	//	[Export ("finishCancelledRequest")]
	//	void FinishCancelledRequest ();
	//}

	//// @interface AVAsynchronousCIImageFilteringRequest : NSObject <NSCopying>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAsynchronousCIImageFilteringRequest : INSCopying
	//{
	//	// @property (readonly, nonatomic) CGSize renderSize;
	//	[Export ("renderSize")]
	//	CGSize RenderSize { get; }

	//	// @property (readonly, nonatomic) CMTime compositionTime;
	//	[Export ("compositionTime")]
	//	CMTime CompositionTime { get; }

	//	// @property (readonly, nonatomic) CIImage * _Nonnull sourceImage;
	//	[Export ("sourceImage")]
	//	CIImage SourceImage { get; }

	//	// -(void)finishWithImage:(CIImage * _Nonnull)filteredImage context:(CIContext * _Nullable)context;
	//	[Export ("finishWithImage:context:")]
	//	void FinishWithImage (CIImage filteredImage, [NullAllowed] CIContext context);

	//	// -(void)finishWithError:(NSError * _Nonnull)error;
	//	[Export ("finishWithError:")]
	//	void FinishWithError (NSError error);
	//}

	//// @protocol AVVideoCompositionInstruction <NSObject>
	//[iOS (7,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVVideoCompositionInstruction
	//{
	//	// @required @property (readonly, nonatomic) CMTimeRange timeRange;
	//	[Abstract]
	//	[Export ("timeRange")]
	//	CMTimeRange TimeRange { get; }

	//	// @required @property (readonly, nonatomic) BOOL enablePostProcessing;
	//	[Abstract]
	//	[Export ("enablePostProcessing")]
	//	bool EnablePostProcessing { get; }

	//	// @required @property (readonly, nonatomic) BOOL containsTweening;
	//	[Abstract]
	//	[Export ("containsTweening")]
	//	bool ContainsTweening { get; }

	//	// @required @property (readonly, nonatomic) NSArray<NSValue *> * _Nullable requiredSourceTrackIDs;
	//	[Abstract]
	//	[NullAllowed, Export ("requiredSourceTrackIDs")]
	//	NSValue[] RequiredSourceTrackIDs { get; }

	//	// @required @property (readonly, nonatomic) CMPersistentTrackID passthroughTrackID;
	//	[Abstract]
	//	[Export ("passthroughTrackID")]
	//	int PassthroughTrackID { get; }
	//}

	//// @interface AVVideoComposition : NSObject <NSCopying, NSMutableCopying>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVVideoComposition : INSCopying, INSMutableCopying
	//{
	//	// +(AVVideoComposition * _Nonnull)videoCompositionWithPropertiesOfAsset:(AVAsset * _Nonnull)asset __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("videoCompositionWithPropertiesOfAsset:")]
	//	AVVideoComposition VideoCompositionWithPropertiesOfAsset (AVAsset asset);

	//	// @property (readonly, nonatomic) Class<AVVideoCompositing> _Nullable customVideoCompositorClass __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("customVideoCompositorClass")]
	//	AVVideoCompositing CustomVideoCompositorClass { get; }

	//	// @property (readonly, nonatomic) CMTime frameDuration;
	//	[Export ("frameDuration")]
	//	CMTime FrameDuration { get; }

	//	// @property (readonly, nonatomic) CMPersistentTrackID sourceTrackIDForFrameTiming __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("sourceTrackIDForFrameTiming")]
	//	int SourceTrackIDForFrameTiming { get; }

	//	// @property (readonly, nonatomic) CGSize renderSize;
	//	[Export ("renderSize")]
	//	CGSize RenderSize { get; }

	//	// @property (readonly, nonatomic) float renderScale __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[TV (9, 0), NoWatch, Mac (10, 14), iOS (4, 0)]
	//	[Export ("renderScale")]
	//	float RenderScale { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<id<AVVideoCompositionInstruction>> * _Nonnull instructions;
	//	[Export ("instructions", ArgumentSemantic.Copy)]
	//	AVVideoCompositionInstruction[] Instructions { get; }

	//	// @property (readonly, retain, nonatomic) AVVideoCompositionCoreAnimationTool * _Nullable animationTool;
	//	[NullAllowed, Export ("animationTool", ArgumentSemantic.Retain)]
	//	AVVideoCompositionCoreAnimationTool AnimationTool { get; }
	//}

	//// @interface AVVideoCompositionColorimetery (AVVideoComposition)
	//[Category]
	//[BaseType (typeof(AVVideoComposition))]
	//interface AVVideoComposition_AVVideoCompositionColorimetery
	//{
	//	// @property (readonly, nonatomic) NSString * _Nullable colorPrimaries __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("colorPrimaries")]
	//	string ColorPrimaries { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable colorYCbCrMatrix __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("colorYCbCrMatrix")]
	//	string ColorYCbCrMatrix { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable colorTransferFunction __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("colorTransferFunction")]
	//	string ColorTransferFunction { get; }
	//}

	//// @interface AVVideoCompositionFiltering (AVVideoComposition)
	//[Category]
	//[BaseType (typeof(AVVideoComposition))]
	//interface AVVideoComposition_AVVideoCompositionFiltering
	//{
	//	// +(AVVideoComposition * _Nonnull)videoCompositionWithAsset:(AVAsset * _Nonnull)asset applyingCIFiltersWithHandler:(void (^ _Nonnull)(AVAsynchronousCIImageFilteringRequest * _Nonnull))applier __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("videoCompositionWithAsset:applyingCIFiltersWithHandler:")]
	//	AVVideoComposition VideoCompositionWithAsset (AVAsset asset, Action<AVAsynchronousCIImageFilteringRequest> applier);
	//}

	//// @interface AVMutableVideoComposition : AVVideoComposition
	//[iOS (4,0)]
	//[BaseType (typeof(AVVideoComposition))]
	//interface AVMutableVideoComposition
	//{
	//	// +(AVMutableVideoComposition * _Nonnull)videoComposition;
	//	[Static]
	//	[Export ("videoComposition")]
	//	[Verify (MethodToProperty)]
	//	AVMutableVideoComposition VideoComposition { get; }

	//	// +(AVMutableVideoComposition * _Nonnull)videoCompositionWithPropertiesOfAsset:(AVAsset * _Nonnull)asset __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("videoCompositionWithPropertiesOfAsset:")]
	//	AVMutableVideoComposition VideoCompositionWithPropertiesOfAsset (AVAsset asset);

	//	// @property (retain, nonatomic) Class<AVVideoCompositing> _Nullable customVideoCompositorClass __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("customVideoCompositorClass", ArgumentSemantic.Retain)]
	//	AVVideoCompositing CustomVideoCompositorClass { get; set; }

	//	// @property (nonatomic) CMTime frameDuration;
	//	[Export ("frameDuration", ArgumentSemantic.Assign)]
	//	CMTime FrameDuration { get; set; }

	//	// @property (nonatomic) CMPersistentTrackID sourceTrackIDForFrameTiming __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("sourceTrackIDForFrameTiming")]
	//	int SourceTrackIDForFrameTiming { get; set; }

	//	// @property (nonatomic) CGSize renderSize;
	//	[Export ("renderSize", ArgumentSemantic.Assign)]
	//	CGSize RenderSize { get; set; }

	//	// @property (nonatomic) float renderScale __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[TV (9, 0), NoWatch, Mac (10, 14), iOS (4, 0)]
	//	[Export ("renderScale")]
	//	float RenderScale { get; set; }

	//	// @property (copy, nonatomic) NSArray<id<AVVideoCompositionInstruction>> * _Nonnull instructions;
	//	[Export ("instructions", ArgumentSemantic.Copy)]
	//	AVVideoCompositionInstruction[] Instructions { get; set; }

	//	// @property (retain, nonatomic) AVVideoCompositionCoreAnimationTool * _Nullable animationTool;
	//	[NullAllowed, Export ("animationTool", ArgumentSemantic.Retain)]
	//	AVVideoCompositionCoreAnimationTool AnimationTool { get; set; }
	//}

	//// @interface AVMutableVideoCompositionColorimetery (AVMutableVideoComposition)
	//[Category]
	//[BaseType (typeof(AVMutableVideoComposition))]
	//interface AVMutableVideoComposition_AVMutableVideoCompositionColorimetery
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable colorPrimaries __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("colorPrimaries")]
	//	string ColorPrimaries { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable colorYCbCrMatrix __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("colorYCbCrMatrix")]
	//	string ColorYCbCrMatrix { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable colorTransferFunction __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("colorTransferFunction")]
	//	string ColorTransferFunction { get; set; }
	//}

	//// @interface AVMutableVideoCompositionFiltering (AVMutableVideoComposition)
	//[Category]
	//[BaseType (typeof(AVMutableVideoComposition))]
	//interface AVMutableVideoComposition_AVMutableVideoCompositionFiltering
	//{
	//	// +(AVMutableVideoComposition * _Nonnull)videoCompositionWithAsset:(AVAsset * _Nonnull)asset applyingCIFiltersWithHandler:(void (^ _Nonnull)(AVAsynchronousCIImageFilteringRequest * _Nonnull))applier __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("videoCompositionWithAsset:applyingCIFiltersWithHandler:")]
	//	AVMutableVideoComposition VideoCompositionWithAsset (AVAsset asset, Action<AVAsynchronousCIImageFilteringRequest> applier);
	//}

	//// @interface AVVideoCompositionInstruction : NSObject <NSSecureCoding, NSCopying, NSMutableCopying, AVVideoCompositionInstruction>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVVideoCompositionInstruction : INSSecureCoding, INSCopying, INSMutableCopying, IAVVideoCompositionInstruction
	//{
	//	// @property (readonly, nonatomic) CMTimeRange timeRange;
	//	[Export ("timeRange")]
	//	CMTimeRange TimeRange { get; }

	//	// @property (readonly, retain, nonatomic) CGColorRef _Nullable backgroundColor __attribute__((NSObject));
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Retain)]
	//	unsafe CGColorRef* BackgroundColor { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<AVVideoCompositionLayerInstruction *> * _Nonnull layerInstructions;
	//	[Export ("layerInstructions", ArgumentSemantic.Copy)]
	//	AVVideoCompositionLayerInstruction[] LayerInstructions { get; }

	//	// @property (readonly, nonatomic) BOOL enablePostProcessing;
	//	[Export ("enablePostProcessing")]
	//	bool EnablePostProcessing { get; }

	//	// @property (readonly, nonatomic) NSArray<NSValue *> * _Nonnull requiredSourceTrackIDs __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("requiredSourceTrackIDs")]
	//	NSValue[] RequiredSourceTrackIDs { get; }

	//	// @property (readonly, nonatomic) CMPersistentTrackID passthroughTrackID __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("passthroughTrackID")]
	//	int PassthroughTrackID { get; }
	//}

	//// @interface AVMutableVideoCompositionInstruction : AVVideoCompositionInstruction
	//[iOS (4,0)]
	//[BaseType (typeof(AVVideoCompositionInstruction))]
	//interface AVMutableVideoCompositionInstruction
	//{
	//	// +(instancetype _Nonnull)videoCompositionInstruction;
	//	[Static]
	//	[Export ("videoCompositionInstruction")]
	//	AVMutableVideoCompositionInstruction VideoCompositionInstruction ();

	//	// @property (assign, nonatomic) CMTimeRange timeRange;
	//	[Export ("timeRange", ArgumentSemantic.Assign)]
	//	CMTimeRange TimeRange { get; set; }

	//	// @property (retain, nonatomic) CGColorRef _Nullable backgroundColor __attribute__((NSObject));
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Retain)]
	//	unsafe CGColorRef* BackgroundColor { get; set; }

	//	// @property (copy, nonatomic) NSArray<AVVideoCompositionLayerInstruction *> * _Nonnull layerInstructions;
	//	[Export ("layerInstructions", ArgumentSemantic.Copy)]
	//	AVVideoCompositionLayerInstruction[] LayerInstructions { get; set; }

	//	// @property (assign, nonatomic) BOOL enablePostProcessing;
	//	[Export ("enablePostProcessing")]
	//	bool EnablePostProcessing { get; set; }
	//}

	//// @interface AVVideoCompositionLayerInstruction : NSObject <NSSecureCoding, NSCopying, NSMutableCopying>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVVideoCompositionLayerInstruction : INSSecureCoding, INSCopying, INSMutableCopying
	//{
	//	// @property (readonly, assign, nonatomic) CMPersistentTrackID trackID;
	//	[Export ("trackID")]
	//	int TrackID { get; }

	//	// -(BOOL)getTransformRampForTime:(CMTime)time startTransform:(CGAffineTransform * _Nullable)startTransform endTransform:(CGAffineTransform * _Nullable)endTransform timeRange:(CMTimeRange * _Nullable)timeRange;
	//	[Export ("getTransformRampForTime:startTransform:endTransform:timeRange:")]
	//	unsafe bool GetTransformRampForTime (CMTime time, [NullAllowed] CGAffineTransform* startTransform, [NullAllowed] CGAffineTransform* endTransform, [NullAllowed] CMTimeRange* timeRange);

	//	// -(BOOL)getOpacityRampForTime:(CMTime)time startOpacity:(float * _Nullable)startOpacity endOpacity:(float * _Nullable)endOpacity timeRange:(CMTimeRange * _Nullable)timeRange;
	//	[Export ("getOpacityRampForTime:startOpacity:endOpacity:timeRange:")]
	//	unsafe bool GetOpacityRampForTime (CMTime time, [NullAllowed] float* startOpacity, [NullAllowed] float* endOpacity, [NullAllowed] CMTimeRange* timeRange);

	//	// -(BOOL)getCropRectangleRampForTime:(CMTime)time startCropRectangle:(CGRect * _Nullable)startCropRectangle endCropRectangle:(CGRect * _Nullable)endCropRectangle timeRange:(CMTimeRange * _Nullable)timeRange __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("getCropRectangleRampForTime:startCropRectangle:endCropRectangle:timeRange:")]
	//	unsafe bool GetCropRectangleRampForTime (CMTime time, [NullAllowed] CGRect* startCropRectangle, [NullAllowed] CGRect* endCropRectangle, [NullAllowed] CMTimeRange* timeRange);
	//}

	//// @interface AVMutableVideoCompositionLayerInstruction : AVVideoCompositionLayerInstruction
	//[iOS (4,0)]
	//[BaseType (typeof(AVVideoCompositionLayerInstruction))]
	//interface AVMutableVideoCompositionLayerInstruction
	//{
	//	// +(instancetype _Nonnull)videoCompositionLayerInstructionWithAssetTrack:(AVAssetTrack * _Nonnull)track;
	//	[Static]
	//	[Export ("videoCompositionLayerInstructionWithAssetTrack:")]
	//	AVMutableVideoCompositionLayerInstruction VideoCompositionLayerInstructionWithAssetTrack (AVAssetTrack track);

	//	// +(instancetype _Nonnull)videoCompositionLayerInstruction;
	//	[Static]
	//	[Export ("videoCompositionLayerInstruction")]
	//	AVMutableVideoCompositionLayerInstruction VideoCompositionLayerInstruction ();

	//	// @property (assign, nonatomic) CMPersistentTrackID trackID;
	//	[Export ("trackID")]
	//	int TrackID { get; set; }

	//	// -(void)setTransformRampFromStartTransform:(CGAffineTransform)startTransform toEndTransform:(CGAffineTransform)endTransform timeRange:(CMTimeRange)timeRange;
	//	[Export ("setTransformRampFromStartTransform:toEndTransform:timeRange:")]
	//	void SetTransformRampFromStartTransform (CGAffineTransform startTransform, CGAffineTransform endTransform, CMTimeRange timeRange);

	//	// -(void)setTransform:(CGAffineTransform)transform atTime:(CMTime)time;
	//	[Export ("setTransform:atTime:")]
	//	void SetTransform (CGAffineTransform transform, CMTime time);

	//	// -(void)setOpacityRampFromStartOpacity:(float)startOpacity toEndOpacity:(float)endOpacity timeRange:(CMTimeRange)timeRange;
	//	[Export ("setOpacityRampFromStartOpacity:toEndOpacity:timeRange:")]
	//	void SetOpacityRampFromStartOpacity (float startOpacity, float endOpacity, CMTimeRange timeRange);

	//	// -(void)setOpacity:(float)opacity atTime:(CMTime)time;
	//	[Export ("setOpacity:atTime:")]
	//	void SetOpacity (float opacity, CMTime time);

	//	// -(void)setCropRectangleRampFromStartCropRectangle:(CGRect)startCropRectangle toEndCropRectangle:(CGRect)endCropRectangle timeRange:(CMTimeRange)timeRange __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("setCropRectangleRampFromStartCropRectangle:toEndCropRectangle:timeRange:")]
	//	void SetCropRectangleRampFromStartCropRectangle (CGRect startCropRectangle, CGRect endCropRectangle, CMTimeRange timeRange);

	//	// -(void)setCropRectangle:(CGRect)cropRectangle atTime:(CMTime)time __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("setCropRectangle:atTime:")]
	//	void SetCropRectangle (CGRect cropRectangle, CMTime time);
	//}

	//// @interface AVVideoCompositionCoreAnimationTool : NSObject
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVVideoCompositionCoreAnimationTool
	//{
	//	// +(instancetype _Nonnull)videoCompositionCoreAnimationToolWithAdditionalLayer:(CALayer * _Nonnull)layer asTrackID:(CMPersistentTrackID)trackID;
	//	[Static]
	//	[Export ("videoCompositionCoreAnimationToolWithAdditionalLayer:asTrackID:")]
	//	AVVideoCompositionCoreAnimationTool VideoCompositionCoreAnimationToolWithAdditionalLayer (CALayer layer, int trackID);

	//	// +(instancetype _Nonnull)videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:(CALayer * _Nonnull)videoLayer inLayer:(CALayer * _Nonnull)animationLayer;
	//	[Static]
	//	[Export ("videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:inLayer:")]
	//	AVVideoCompositionCoreAnimationTool VideoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer (CALayer videoLayer, CALayer animationLayer);

	//	// +(instancetype _Nonnull)videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers:(NSArray<CALayer *> * _Nonnull)videoLayers inLayer:(CALayer * _Nonnull)animationLayer __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers:inLayer:")]
	//	AVVideoCompositionCoreAnimationTool VideoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers (CALayer[] videoLayers, CALayer animationLayer);
	//}

	//// @interface AVAssetVideoCompositionUtility (AVAsset)
	//[Category]
	//[BaseType (typeof(AVAsset))]
	//interface AVAsset_AVAssetVideoCompositionUtility
	//{
	//	// -(CMPersistentTrackID)unusedTrackID;
	//	[Export ("unusedTrackID")]
	//	[Verify (MethodToProperty)]
	//	int UnusedTrackID { get; }
	//}

	//// @interface AVVideoCompositionValidation (AVVideoComposition)
	//[Category]
	//[BaseType (typeof(AVVideoComposition))]
	//interface AVVideoComposition_AVVideoCompositionValidation
	//{
	//	// -(BOOL)isValidForAsset:(AVAsset * _Nullable)asset timeRange:(CMTimeRange)timeRange validationDelegate:(id<AVVideoCompositionValidationHandling> _Nullable)validationDelegate __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("isValidForAsset:timeRange:validationDelegate:")]
	//	bool IsValidForAsset ([NullAllowed] AVAsset asset, CMTimeRange timeRange, [NullAllowed] AVVideoCompositionValidationHandling validationDelegate);
	//}

	//// @protocol AVVideoCompositionValidationHandling <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVVideoCompositionValidationHandling
	//{
	//	// @optional -(BOOL)videoComposition:(AVVideoComposition * _Nonnull)videoComposition shouldContinueValidatingAfterFindingInvalidValueForKey:(NSString * _Nonnull)key __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("videoComposition:shouldContinueValidatingAfterFindingInvalidValueForKey:")]
	//	bool ShouldContinueValidatingAfterFindingInvalidValueForKey (AVVideoComposition videoComposition, string key);

	//	// @optional -(BOOL)videoComposition:(AVVideoComposition * _Nonnull)videoComposition shouldContinueValidatingAfterFindingEmptyTimeRange:(CMTimeRange)timeRange __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:")]
	//	bool ShouldContinueValidatingAfterFindingEmptyTimeRange (AVVideoComposition videoComposition, CMTimeRange timeRange);

	//	// @optional -(BOOL)videoComposition:(AVVideoComposition * _Nonnull)videoComposition shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:(id<AVVideoCompositionInstruction> _Nonnull)videoCompositionInstruction __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("videoComposition:shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:")]
	//	bool ShouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction (AVVideoComposition videoComposition, AVVideoCompositionInstruction videoCompositionInstruction);

	//	// @optional -(BOOL)videoComposition:(AVVideoComposition * _Nonnull)videoComposition shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:(id<AVVideoCompositionInstruction> _Nonnull)videoCompositionInstruction layerInstruction:(AVVideoCompositionLayerInstruction * _Nonnull)layerInstruction asset:(AVAsset * _Nonnull)asset __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("videoComposition:shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:layerInstruction:asset:")]
	//	bool ShouldContinueValidatingAfterFindingInvalidTrackIDInInstruction (AVVideoComposition videoComposition, AVVideoCompositionInstruction videoCompositionInstruction, AVVideoCompositionLayerInstruction layerInstruction, AVAsset asset);
	//}

	//// @interface AVAssetReaderOutput : NSObject
	//[iOS (4,1)]
	//[BaseType (typeof(NSObject))]
	//interface AVAssetReaderOutput
	//{
	//	// @property (readonly, nonatomic) AVMediaType _Nonnull mediaType;
	//	[Export ("mediaType")]
	//	string MediaType { get; }

	//	// @property (nonatomic) BOOL alwaysCopiesSampleData __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("alwaysCopiesSampleData")]
	//	bool AlwaysCopiesSampleData { get; set; }

	//	// -(CMSampleBufferRef _Nullable)copyNextSampleBuffer __attribute__((cf_returns_retained));
	//	[NullAllowed, Export ("copyNextSampleBuffer")]
	//	[Verify (MethodToProperty)]
	//	unsafe CMSampleBufferRef* CopyNextSampleBuffer { get; }
	//}

	//// @interface AVAssetReaderOutputRandomAccess (AVAssetReaderOutput)
	//[Category]
	//[BaseType (typeof(AVAssetReaderOutput))]
	//interface AVAssetReaderOutput_AVAssetReaderOutputRandomAccess
	//{
	//	// @property (nonatomic) BOOL supportsRandomAccess __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("supportsRandomAccess")]
	//	bool SupportsRandomAccess { get; set; }

	//	// -(void)resetForReadingTimeRanges:(NSArray<NSValue *> * _Nonnull)timeRanges __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("resetForReadingTimeRanges:")]
	//	void ResetForReadingTimeRanges (NSValue[] timeRanges);

	//	// -(void)markConfigurationAsFinal __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("markConfigurationAsFinal")]
	//	void MarkConfigurationAsFinal ();
	//}

	//// @interface AVAssetReaderTrackOutput : AVAssetReaderOutput
	//[iOS (4,1)]
	//[BaseType (typeof(AVAssetReaderOutput))]
	//[DisableDefaultCtor]
	//interface AVAssetReaderTrackOutput
	//{
	//	// +(instancetype _Nonnull)assetReaderTrackOutputWithTrack:(AVAssetTrack * _Nonnull)track outputSettings:(NSDictionary<NSString *,id> * _Nullable)outputSettings;
	//	[Static]
	//	[Export ("assetReaderTrackOutputWithTrack:outputSettings:")]
	//	AVAssetReaderTrackOutput AssetReaderTrackOutputWithTrack (AVAssetTrack track, [NullAllowed] NSDictionary<NSString, NSObject> outputSettings);

	//	// -(instancetype _Nonnull)initWithTrack:(AVAssetTrack * _Nonnull)track outputSettings:(NSDictionary<NSString *,id> * _Nullable)outputSettings __attribute__((objc_designated_initializer));
	//	[Export ("initWithTrack:outputSettings:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAssetTrack track, [NullAllowed] NSDictionary<NSString, NSObject> outputSettings);

	//	// @property (readonly, nonatomic) AVAssetTrack * _Nonnull track;
	//	[Export ("track")]
	//	AVAssetTrack Track { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nullable outputSettings;
	//	[NullAllowed, Export ("outputSettings")]
	//	NSDictionary<NSString, NSObject> OutputSettings { get; }

	//	// @property (copy, nonatomic) AVAudioTimePitchAlgorithm _Nonnull audioTimePitchAlgorithm __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("audioTimePitchAlgorithm")]
	//	string AudioTimePitchAlgorithm { get; set; }
	//}

	//// @interface AVAssetReaderAudioMixOutput : AVAssetReaderOutput
	//[iOS (4,1)]
	//[BaseType (typeof(AVAssetReaderOutput))]
	//[DisableDefaultCtor]
	//interface AVAssetReaderAudioMixOutput
	//{
	//	// +(instancetype _Nonnull)assetReaderAudioMixOutputWithAudioTracks:(NSArray<AVAssetTrack *> * _Nonnull)audioTracks audioSettings:(NSDictionary<NSString *,id> * _Nullable)audioSettings;
	//	[Static]
	//	[Export ("assetReaderAudioMixOutputWithAudioTracks:audioSettings:")]
	//	AVAssetReaderAudioMixOutput AssetReaderAudioMixOutputWithAudioTracks (AVAssetTrack[] audioTracks, [NullAllowed] NSDictionary<NSString, NSObject> audioSettings);

	//	// -(instancetype _Nonnull)initWithAudioTracks:(NSArray<AVAssetTrack *> * _Nonnull)audioTracks audioSettings:(NSDictionary<NSString *,id> * _Nullable)audioSettings __attribute__((objc_designated_initializer));
	//	[Export ("initWithAudioTracks:audioSettings:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAssetTrack[] audioTracks, [NullAllowed] NSDictionary<NSString, NSObject> audioSettings);

	//	// @property (readonly, nonatomic) NSArray<AVAssetTrack *> * _Nonnull audioTracks;
	//	[Export ("audioTracks")]
	//	AVAssetTrack[] AudioTracks { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nullable audioSettings;
	//	[NullAllowed, Export ("audioSettings")]
	//	NSDictionary<NSString, NSObject> AudioSettings { get; }

	//	// @property (copy, nonatomic) AVAudioMix * _Nullable audioMix;
	//	[NullAllowed, Export ("audioMix", ArgumentSemantic.Copy)]
	//	AVAudioMix AudioMix { get; set; }

	//	// @property (copy, nonatomic) AVAudioTimePitchAlgorithm _Nonnull audioTimePitchAlgorithm __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("audioTimePitchAlgorithm")]
	//	string AudioTimePitchAlgorithm { get; set; }
	//}

	//// @interface AVAssetReaderVideoCompositionOutput : AVAssetReaderOutput
	//[iOS (4,1)]
	//[BaseType (typeof(AVAssetReaderOutput))]
	//[DisableDefaultCtor]
	//interface AVAssetReaderVideoCompositionOutput
	//{
	//	// +(instancetype _Nonnull)assetReaderVideoCompositionOutputWithVideoTracks:(NSArray<AVAssetTrack *> * _Nonnull)videoTracks videoSettings:(NSDictionary<NSString *,id> * _Nullable)videoSettings;
	//	[Static]
	//	[Export ("assetReaderVideoCompositionOutputWithVideoTracks:videoSettings:")]
	//	AVAssetReaderVideoCompositionOutput AssetReaderVideoCompositionOutputWithVideoTracks (AVAssetTrack[] videoTracks, [NullAllowed] NSDictionary<NSString, NSObject> videoSettings);

	//	// -(instancetype _Nonnull)initWithVideoTracks:(NSArray<AVAssetTrack *> * _Nonnull)videoTracks videoSettings:(NSDictionary<NSString *,id> * _Nullable)videoSettings __attribute__((objc_designated_initializer));
	//	[Export ("initWithVideoTracks:videoSettings:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAssetTrack[] videoTracks, [NullAllowed] NSDictionary<NSString, NSObject> videoSettings);

	//	// @property (readonly, nonatomic) NSArray<AVAssetTrack *> * _Nonnull videoTracks;
	//	[Export ("videoTracks")]
	//	AVAssetTrack[] VideoTracks { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nullable videoSettings;
	//	[NullAllowed, Export ("videoSettings")]
	//	NSDictionary<NSString, NSObject> VideoSettings { get; }

	//	// @property (copy, nonatomic) AVVideoComposition * _Nullable videoComposition;
	//	[NullAllowed, Export ("videoComposition", ArgumentSemantic.Copy)]
	//	AVVideoComposition VideoComposition { get; set; }

	//	// @property (readonly, nonatomic) id<AVVideoCompositing> _Nullable customVideoCompositor __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("customVideoCompositor")]
	//	AVVideoCompositing CustomVideoCompositor { get; }
	//}

	//// @interface AVAssetReaderOutputMetadataAdaptor : NSObject
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetReaderOutputMetadataAdaptor
	//{
	//	// +(instancetype _Nonnull)assetReaderOutputMetadataAdaptorWithAssetReaderTrackOutput:(AVAssetReaderTrackOutput * _Nonnull)trackOutput;
	//	[Static]
	//	[Export ("assetReaderOutputMetadataAdaptorWithAssetReaderTrackOutput:")]
	//	AVAssetReaderOutputMetadataAdaptor AssetReaderOutputMetadataAdaptorWithAssetReaderTrackOutput (AVAssetReaderTrackOutput trackOutput);

	//	// -(instancetype _Nonnull)initWithAssetReaderTrackOutput:(AVAssetReaderTrackOutput * _Nonnull)trackOutput __attribute__((objc_designated_initializer));
	//	[Export ("initWithAssetReaderTrackOutput:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAssetReaderTrackOutput trackOutput);

	//	// @property (readonly, nonatomic) AVAssetReaderTrackOutput * _Nonnull assetReaderTrackOutput;
	//	[Export ("assetReaderTrackOutput")]
	//	AVAssetReaderTrackOutput AssetReaderTrackOutput { get; }

	//	// -(AVTimedMetadataGroup * _Nullable)nextTimedMetadataGroup;
	//	[NullAllowed, Export ("nextTimedMetadataGroup")]
	//	[Verify (MethodToProperty)]
	//	AVTimedMetadataGroup NextTimedMetadataGroup { get; }
	//}

	//// @interface AVAssetReaderSampleReferenceOutput : AVAssetReaderOutput
	//[iOS (8,0)]
	//[BaseType (typeof(AVAssetReaderOutput))]
	//[DisableDefaultCtor]
	//interface AVAssetReaderSampleReferenceOutput
	//{
	//	// +(instancetype _Nonnull)assetReaderSampleReferenceOutputWithTrack:(AVAssetTrack * _Nonnull)track;
	//	[Static]
	//	[Export ("assetReaderSampleReferenceOutputWithTrack:")]
	//	AVAssetReaderSampleReferenceOutput AssetReaderSampleReferenceOutputWithTrack (AVAssetTrack track);

	//	// -(instancetype _Nonnull)initWithTrack:(AVAssetTrack * _Nonnull)track __attribute__((objc_designated_initializer));
	//	[Export ("initWithTrack:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAssetTrack track);

	//	// @property (readonly, nonatomic) AVAssetTrack * _Nonnull track;
	//	[Export ("track")]
	//	AVAssetTrack Track { get; }
	//}

	//// @interface AVAssetResourceLoader : NSObject
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetResourceLoader
	//{
	//	// -(void)setDelegate:(id<AVAssetResourceLoaderDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)delegateQueue;
	//	[Export ("setDelegate:queue:")]
	//	void SetDelegate ([NullAllowed] AVAssetResourceLoaderDelegate @delegate, [NullAllowed] DispatchQueue delegateQueue);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVAssetResourceLoaderDelegate Delegate { get; }

	//	// @property (readonly, nonatomic, weak) id<AVAssetResourceLoaderDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; }

	//	// @property (readonly, nonatomic) dispatch_queue_t _Nullable delegateQueue;
	//	[NullAllowed, Export ("delegateQueue")]
	//	DispatchQueue DelegateQueue { get; }
	//}

	//// @protocol AVAssetResourceLoaderDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVAssetResourceLoaderDelegate
	//{
	//	// @optional -(BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("resourceLoader:shouldWaitForLoadingOfRequestedResource:")]
	//	bool ResourceLoader (AVAssetResourceLoader resourceLoader, AVAssetResourceLoadingRequest loadingRequest);

	//	// @optional -(BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForRenewalOfRequestedResource:(AVAssetResourceRenewalRequest * _Nonnull)renewalRequest __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("resourceLoader:shouldWaitForRenewalOfRequestedResource:")]
	//	bool ResourceLoader (AVAssetResourceLoader resourceLoader, AVAssetResourceRenewalRequest renewalRequest);

	//	// @optional -(void)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader didCancelLoadingRequest:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("resourceLoader:didCancelLoadingRequest:")]
	//	void ResourceLoader (AVAssetResourceLoader resourceLoader, AVAssetResourceLoadingRequest loadingRequest);

	//	// @optional -(BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForResponseToAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)authenticationChallenge __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("resourceLoader:shouldWaitForResponseToAuthenticationChallenge:")]
	//	bool ResourceLoader (AVAssetResourceLoader resourceLoader, NSUrlAuthenticationChallenge authenticationChallenge);

	//	// @optional -(void)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)authenticationChallenge __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("resourceLoader:didCancelAuthenticationChallenge:")]
	//	void ResourceLoader (AVAssetResourceLoader resourceLoader, NSUrlAuthenticationChallenge authenticationChallenge);
	//}

	//// @interface AVAssetResourceLoadingRequestor : NSObject
	//[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetResourceLoadingRequestor
	//{
	//	// @property (readonly, nonatomic) BOOL providesExpiredSessionReports;
	//	[Export ("providesExpiredSessionReports")]
	//	bool ProvidesExpiredSessionReports { get; }
	//}

	//// @interface AVAssetResourceLoadingRequest : NSObject
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetResourceLoadingRequest
	//{
	//	// @property (readonly, nonatomic) NSURLRequest * _Nonnull request;
	//	[Export ("request")]
	//	NSUrlRequest Request { get; }

	//	// @property (readonly, getter = isFinished, nonatomic) BOOL finished;
	//	[Export ("finished")]
	//	bool Finished { [Bind ("isFinished")] get; }

	//	// @property (readonly, getter = isCancelled, nonatomic) BOOL cancelled __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("cancelled")]
	//	bool Cancelled { [Bind ("isCancelled")] get; }

	//	// @property (readonly, nonatomic) AVAssetResourceLoadingContentInformationRequest * _Nullable contentInformationRequest __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("contentInformationRequest")]
	//	AVAssetResourceLoadingContentInformationRequest ContentInformationRequest { get; }

	//	// @property (readonly, nonatomic) AVAssetResourceLoadingDataRequest * _Nullable dataRequest __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("dataRequest")]
	//	AVAssetResourceLoadingDataRequest DataRequest { get; }

	//	// @property (copy, nonatomic) NSURLResponse * _Nullable response __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("response", ArgumentSemantic.Copy)]
	//	NSUrlResponse Response { get; set; }

	//	// @property (copy, nonatomic) NSURLRequest * _Nullable redirect __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("redirect", ArgumentSemantic.Copy)]
	//	NSUrlRequest Redirect { get; set; }

	//	// @property (readonly, nonatomic) AVAssetResourceLoadingRequestor * _Nonnull requestor __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Watch (5, 0), TV (12, 0), Mac (10, 14), iOS (12, 0)]
	//	[Export ("requestor")]
	//	AVAssetResourceLoadingRequestor Requestor { get; }

	//	// -(void)finishLoading __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("finishLoading")]
	//	void FinishLoading ();

	//	// -(void)finishLoadingWithError:(NSError * _Nullable)error;
	//	[Export ("finishLoadingWithError:")]
	//	void FinishLoadingWithError ([NullAllowed] NSError error);
	//}

	//// @interface AVAssetResourceRenewalRequest : AVAssetResourceLoadingRequest
	//[iOS (8,0)]
	//[BaseType (typeof(AVAssetResourceLoadingRequest))]
	//interface AVAssetResourceRenewalRequest
	//{
	//}

	//// @interface AVAssetResourceLoadingContentInformationRequest : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetResourceLoadingContentInformationRequest
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable contentType;
	//	[NullAllowed, Export ("contentType")]
	//	string ContentType { get; set; }

	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nullable allowedContentTypes __attribute__((availability(watchos, introduced=4.2))) __attribute__((availability(macos, introduced=10.13.2))) __attribute__((availability(tvos, introduced=11.2))) __attribute__((availability(ios, introduced=11.2)));
	//	[Watch (4, 2), TV (11, 2), Mac (10, 13, 2), iOS (11, 2)]
	//	[NullAllowed, Export ("allowedContentTypes")]
	//	string[] AllowedContentTypes { get; }

	//	// @property (nonatomic) long long contentLength;
	//	[Export ("contentLength")]
	//	long ContentLength { get; set; }

	//	// @property (getter = isByteRangeAccessSupported, nonatomic) BOOL byteRangeAccessSupported;
	//	[Export ("byteRangeAccessSupported")]
	//	bool ByteRangeAccessSupported { [Bind ("isByteRangeAccessSupported")] get; set; }

	//	// @property (copy, nonatomic) NSDate * _Nullable renewalDate __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("renewalDate", ArgumentSemantic.Copy)]
	//	NSDate RenewalDate { get; set; }
	//}

	//// @interface AVAssetResourceLoadingDataRequest : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetResourceLoadingDataRequest
	//{
	//	// @property (readonly, nonatomic) long long requestedOffset;
	//	[Export ("requestedOffset")]
	//	long RequestedOffset { get; }

	//	// @property (readonly, nonatomic) NSInteger requestedLength;
	//	[Export ("requestedLength")]
	//	nint RequestedLength { get; }

	//	// @property (readonly, nonatomic) BOOL requestsAllDataToEndOfResource __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("requestsAllDataToEndOfResource")]
	//	bool RequestsAllDataToEndOfResource { get; }

	//	// @property (readonly, nonatomic) long long currentOffset;
	//	[Export ("currentOffset")]
	//	long CurrentOffset { get; }

	//	// -(void)respondWithData:(NSData * _Nonnull)data;
	//	[Export ("respondWithData:")]
	//	void RespondWithData (NSData data);
	//}

	//// @interface AVAssetResourceLoaderContentKeySupport (AVAssetResourceLoader)
	//[Category]
	//[BaseType (typeof(AVAssetResourceLoader))]
	//interface AVAssetResourceLoader_AVAssetResourceLoaderContentKeySupport
	//{
	//	// @property (nonatomic) BOOL preloadsEligibleContentKeys __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("preloadsEligibleContentKeys")]
	//	bool PreloadsEligibleContentKeys { get; set; }
	//}

	//// @interface AVAssetResourceLoadingRequestContentKeyRequestSupport (AVAssetResourceLoadingRequest)
	//[Category]
	//[BaseType (typeof(AVAssetResourceLoadingRequest))]
	//interface AVAssetResourceLoadingRequest_AVAssetResourceLoadingRequestContentKeyRequestSupport
	//{
	//	// -(NSData * _Nullable)streamingContentKeyRequestDataForApp:(NSData * _Nonnull)appIdentifier contentIdentifier:(NSData * _Nonnull)contentIdentifier options:(NSDictionary<NSString *,id> * _Nullable)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("streamingContentKeyRequestDataForApp:contentIdentifier:options:error:")]
	//	[return: NullAllowed]
	//	NSData StreamingContentKeyRequestDataForApp (NSData appIdentifier, NSData contentIdentifier, [NullAllowed] NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError outError);

	//	// -(NSData * _Nullable)persistentContentKeyFromKeyVendorResponse:(NSData * _Nonnull)keyVendorResponse options:(NSDictionary<NSString *,id> * _Nullable)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("persistentContentKeyFromKeyVendorResponse:options:error:")]
	//	[return: NullAllowed]
	//	NSData PersistentContentKeyFromKeyVendorResponse (NSData keyVendorResponse, [NullAllowed] NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError outError);
	//}

	//// @interface AVAssetResourceLoadingRequestDeprecated (AVAssetResourceLoadingRequest)
	//[Category]
	//[BaseType (typeof(AVAssetResourceLoadingRequest))]
	//interface AVAssetResourceLoadingRequest_AVAssetResourceLoadingRequestDeprecated
	//{
	//	// -(void)finishLoadingWithResponse:(NSURLResponse * _Nullable)response data:(NSData * _Nullable)data redirect:(NSURLRequest * _Nullable)redirect __attribute__((availability(ios, introduced=6.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 6, 0)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[Export ("finishLoadingWithResponse:data:redirect:")]
	//	void FinishLoadingWithResponse ([NullAllowed] NSUrlResponse response, [NullAllowed] NSData data, [NullAllowed] NSUrlRequest redirect);
	//}

	//// @interface AVAssetTrackSegment : NSObject
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetTrackSegment
	//{
	//	// @property (readonly, nonatomic) CMTimeMapping timeMapping;
	//	[Export ("timeMapping")]
	//	CMTimeMapping TimeMapping { get; }

	//	// @property (readonly, getter = isEmpty, nonatomic) BOOL empty;
	//	[Export ("empty")]
	//	bool Empty { [Bind ("isEmpty")] get; }
	//}

	//// @interface AVAssetTrack : NSObject <NSCopying, AVAsynchronousKeyValueLoading>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetTrack : INSCopying, IAVAsynchronousKeyValueLoading
	//{
	//	// @property (readonly, nonatomic, weak) AVAsset * _Nullable asset;
	//	[NullAllowed, Export ("asset", ArgumentSemantic.Weak)]
	//	AVAsset Asset { get; }

	//	// @property (readonly, nonatomic) CMPersistentTrackID trackID;
	//	[Export ("trackID")]
	//	int TrackID { get; }
	//}

	//// @interface AVAssetTrackBasicPropertiesAndCharacteristics (AVAssetTrack)
	//[Category]
	//[BaseType (typeof(AVAssetTrack))]
	//interface AVAssetTrack_AVAssetTrackBasicPropertiesAndCharacteristics
	//{
	//	// @property (readonly, nonatomic) AVMediaType _Nonnull mediaType;
	//	[Export ("mediaType")]
	//	string MediaType { get; }

	//	// @property (readonly, nonatomic) NSArray * _Nonnull formatDescriptions;
	//	[Export ("formatDescriptions")]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] FormatDescriptions { get; }

	//	// @property (readonly, getter = isPlayable, nonatomic) BOOL playable __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("playable")]
	//	bool Playable { [Bind ("isPlayable")] get; }

	//	// @property (readonly, getter = isDecodable, nonatomic) BOOL decodable __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("decodable")]
	//	bool Decodable { [Bind ("isDecodable")] get; }

	//	// @property (readonly, getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; }

	//	// @property (readonly, getter = isSelfContained, nonatomic) BOOL selfContained;
	//	[Export ("selfContained")]
	//	bool SelfContained { [Bind ("isSelfContained")] get; }

	//	// @property (readonly, nonatomic) long long totalSampleDataLength;
	//	[Export ("totalSampleDataLength")]
	//	long TotalSampleDataLength { get; }

	//	// -(BOOL)hasMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic;
	//	[Export ("hasMediaCharacteristic:")]
	//	bool HasMediaCharacteristic (string mediaCharacteristic);
	//}

	//// @interface AVAssetTrackTemporalProperties (AVAssetTrack)
	//[Category]
	//[BaseType (typeof(AVAssetTrack))]
	//interface AVAssetTrack_AVAssetTrackTemporalProperties
	//{
	//	// @property (readonly, nonatomic) CMTimeRange timeRange;
	//	[Export ("timeRange")]
	//	CMTimeRange TimeRange { get; }

	//	// @property (readonly, nonatomic) CMTimeScale naturalTimeScale;
	//	[Export ("naturalTimeScale")]
	//	int NaturalTimeScale { get; }

	//	// @property (readonly, nonatomic) float estimatedDataRate;
	//	[Export ("estimatedDataRate")]
	//	float EstimatedDataRate { get; }
	//}

	//// @interface AVAssetTrackLanguageProperties (AVAssetTrack)
	//[Category]
	//[BaseType (typeof(AVAssetTrack))]
	//interface AVAssetTrack_AVAssetTrackLanguageProperties
	//{
	//	// @property (readonly, nonatomic) NSString * _Nullable languageCode;
	//	[NullAllowed, Export ("languageCode")]
	//	string LanguageCode { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable extendedLanguageTag;
	//	[NullAllowed, Export ("extendedLanguageTag")]
	//	string ExtendedLanguageTag { get; }
	//}

	//// @interface AVAssetTrackPropertiesForVisualCharacteristic (AVAssetTrack)
	//[Category]
	//[BaseType (typeof(AVAssetTrack))]
	//interface AVAssetTrack_AVAssetTrackPropertiesForVisualCharacteristic
	//{
	//	// @property (readonly, nonatomic) CGSize naturalSize;
	//	[Export ("naturalSize")]
	//	CGSize NaturalSize { get; }

	//	// @property (readonly, nonatomic) CGAffineTransform preferredTransform;
	//	[Export ("preferredTransform")]
	//	CGAffineTransform PreferredTransform { get; }
	//}

	//// @interface AVAssetTrackPropertiesForAudibleCharacteristic (AVAssetTrack)
	//[Category]
	//[BaseType (typeof(AVAssetTrack))]
	//interface AVAssetTrack_AVAssetTrackPropertiesForAudibleCharacteristic
	//{
	//	// @property (readonly, nonatomic) float preferredVolume;
	//	[Export ("preferredVolume")]
	//	float PreferredVolume { get; }
	//}

	//// @interface AVAssetTrackPropertiesForFrameBasedCharacteristic (AVAssetTrack)
	//[Category]
	//[BaseType (typeof(AVAssetTrack))]
	//interface AVAssetTrack_AVAssetTrackPropertiesForFrameBasedCharacteristic
	//{
	//	// @property (readonly, nonatomic) float nominalFrameRate;
	//	[Export ("nominalFrameRate")]
	//	float NominalFrameRate { get; }

	//	// @property (readonly, nonatomic) CMTime minFrameDuration __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("minFrameDuration")]
	//	CMTime MinFrameDuration { get; }

	//	// @property (readonly, nonatomic) BOOL requiresFrameReordering __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("requiresFrameReordering")]
	//	bool RequiresFrameReordering { get; }
	//}

	//// @interface AVAssetTrackSegments (AVAssetTrack)
	//[Category]
	//[BaseType (typeof(AVAssetTrack))]
	//interface AVAssetTrack_AVAssetTrackSegments
	//{
	//	// @property (readonly, copy, nonatomic) NSArray<AVAssetTrackSegment *> * _Nonnull segments;
	//	[Export ("segments", ArgumentSemantic.Copy)]
	//	AVAssetTrackSegment[] Segments { get; }

	//	// -(AVAssetTrackSegment * _Nullable)segmentForTrackTime:(CMTime)trackTime;
	//	[Export ("segmentForTrackTime:")]
	//	[return: NullAllowed]
	//	AVAssetTrackSegment SegmentForTrackTime (CMTime trackTime);

	//	// -(CMTime)samplePresentationTimeForTrackTime:(CMTime)trackTime;
	//	[Export ("samplePresentationTimeForTrackTime:")]
	//	CMTime SamplePresentationTimeForTrackTime (CMTime trackTime);
	//}

	//// @interface AVAssetTrackMetadataReading (AVAssetTrack)
	//[Category]
	//[BaseType (typeof(AVAssetTrack))]
	//interface AVAssetTrack_AVAssetTrackMetadataReading
	//{
	//	// @property (readonly, nonatomic) NSArray<AVMetadataItem *> * _Nonnull commonMetadata;
	//	[Export ("commonMetadata")]
	//	AVMetadataItem[] CommonMetadata { get; }

	//	// @property (readonly, nonatomic) NSArray<AVMetadataItem *> * _Nonnull metadata __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("metadata")]
	//	AVMetadataItem[] Metadata { get; }

	//	// @property (readonly, nonatomic) NSArray<AVMetadataFormat> * _Nonnull availableMetadataFormats;
	//	[Export ("availableMetadataFormats")]
	//	string[] AvailableMetadataFormats { get; }

	//	// -(NSArray<AVMetadataItem *> * _Nonnull)metadataForFormat:(AVMetadataFormat _Nonnull)format;
	//	[Export ("metadataForFormat:")]
	//	AVMetadataItem[] MetadataForFormat (string format);
	//}

	//// @interface AVAssetTrackTrackAssociations (AVAssetTrack)
	//[Category]
	//[BaseType (typeof(AVAssetTrack))]
	//interface AVAssetTrack_AVAssetTrackTrackAssociations
	//{
	//	// @property (readonly, nonatomic) NSArray<AVTrackAssociationType> * _Nonnull availableTrackAssociationTypes __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("availableTrackAssociationTypes")]
	//	string[] AvailableTrackAssociationTypes { get; }

	//	// -(NSArray<AVAssetTrack *> * _Nonnull)associatedTracksOfType:(AVTrackAssociationType _Nonnull)trackAssociationType __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("associatedTracksOfType:")]
	//	AVAssetTrack[] AssociatedTracksOfType (string trackAssociationType);
	//}

	//// @interface AVFragmentedAssetTrack : AVAssetTrack
	//[TV (12,0), NoWatch, Mac (10,11), iOS (12,0)]
	//[BaseType (typeof(AVAssetTrack))]
	//interface AVFragmentedAssetTrack
	//{
	//}

	//// @interface AVAssetTrackGroup : NSObject <NSCopying>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAssetTrackGroup : INSCopying
	//{
	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull trackIDs;
	//	[Export ("trackIDs")]
	//	NSNumber[] TrackIDs { get; }
	//}

	//// @interface AVMediaSelectionGroup : NSObject <NSCopying>
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVMediaSelectionGroup : INSCopying
	//{
	//	// @property (readonly, nonatomic) NSArray<AVMediaSelectionOption *> * _Nonnull options;
	//	[Export ("options")]
	//	AVMediaSelectionOption[] Options { get; }

	//	// @property (readonly, nonatomic) AVMediaSelectionOption * _Nullable defaultOption __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("defaultOption")]
	//	AVMediaSelectionOption DefaultOption { get; }

	//	// @property (readonly, nonatomic) BOOL allowsEmptySelection;
	//	[Export ("allowsEmptySelection")]
	//	bool AllowsEmptySelection { get; }

	//	// -(AVMediaSelectionOption * _Nullable)mediaSelectionOptionWithPropertyList:(id _Nonnull)plist;
	//	[Export ("mediaSelectionOptionWithPropertyList:")]
	//	[return: NullAllowed]
	//	AVMediaSelectionOption MediaSelectionOptionWithPropertyList (NSObject plist);
	//}

	//// @interface AVMediaSelectionOptionFiltering (AVMediaSelectionGroup)
	//[Category]
	//[BaseType (typeof(AVMediaSelectionGroup))]
	//interface AVMediaSelectionGroup_AVMediaSelectionOptionFiltering
	//{
	//	// +(NSArray<AVMediaSelectionOption *> * _Nonnull)playableMediaSelectionOptionsFromArray:(NSArray<AVMediaSelectionOption *> * _Nonnull)mediaSelectionOptions;
	//	[Static]
	//	[Export ("playableMediaSelectionOptionsFromArray:")]
	//	AVMediaSelectionOption[] PlayableMediaSelectionOptionsFromArray (AVMediaSelectionOption[] mediaSelectionOptions);

	//	// +(NSArray<AVMediaSelectionOption *> * _Nonnull)mediaSelectionOptionsFromArray:(NSArray<AVMediaSelectionOption *> * _Nonnull)mediaSelectionOptions filteredAndSortedAccordingToPreferredLanguages:(NSArray<NSString *> * _Nonnull)preferredLanguages __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("mediaSelectionOptionsFromArray:filteredAndSortedAccordingToPreferredLanguages:")]
	//	AVMediaSelectionOption[] MediaSelectionOptionsFromArray (AVMediaSelectionOption[] mediaSelectionOptions, string[] preferredLanguages);

	//	// +(NSArray<AVMediaSelectionOption *> * _Nonnull)mediaSelectionOptionsFromArray:(NSArray<AVMediaSelectionOption *> * _Nonnull)mediaSelectionOptions withLocale:(NSLocale * _Nonnull)locale;
	//	[Static]
	//	[Export ("mediaSelectionOptionsFromArray:withLocale:")]
	//	AVMediaSelectionOption[] MediaSelectionOptionsFromArray (AVMediaSelectionOption[] mediaSelectionOptions, NSLocale locale);

	//	// +(NSArray<AVMediaSelectionOption *> * _Nonnull)mediaSelectionOptionsFromArray:(NSArray<AVMediaSelectionOption *> * _Nonnull)mediaSelectionOptions withMediaCharacteristics:(NSArray<AVMediaCharacteristic> * _Nonnull)mediaCharacteristics;
	//	[Static]
	//	[Export ("mediaSelectionOptionsFromArray:withMediaCharacteristics:")]
	//	AVMediaSelectionOption[] MediaSelectionOptionsFromArray (AVMediaSelectionOption[] mediaSelectionOptions, string[] mediaCharacteristics);

	//	// +(NSArray<AVMediaSelectionOption *> * _Nonnull)mediaSelectionOptionsFromArray:(NSArray<AVMediaSelectionOption *> * _Nonnull)mediaSelectionOptions withoutMediaCharacteristics:(NSArray<AVMediaCharacteristic> * _Nonnull)mediaCharacteristics;
	//	[Static]
	//	[Export ("mediaSelectionOptionsFromArray:withoutMediaCharacteristics:")]
	//	AVMediaSelectionOption[] MediaSelectionOptionsFromArray (AVMediaSelectionOption[] mediaSelectionOptions, string[] mediaCharacteristics);
	//}

	//// @interface AVMediaSelectionOption : NSObject <NSCopying>
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVMediaSelectionOption : INSCopying
	//{
	//	// @property (readonly, nonatomic) AVMediaType _Nonnull mediaType;
	//	[Export ("mediaType")]
	//	string MediaType { get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull mediaSubTypes;
	//	[Export ("mediaSubTypes")]
	//	NSNumber[] MediaSubTypes { get; }

	//	// -(BOOL)hasMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic;
	//	[Export ("hasMediaCharacteristic:")]
	//	bool HasMediaCharacteristic (string mediaCharacteristic);

	//	// @property (readonly, getter = isPlayable, nonatomic) BOOL playable;
	//	[Export ("playable")]
	//	bool Playable { [Bind ("isPlayable")] get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable extendedLanguageTag __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("extendedLanguageTag")]
	//	string ExtendedLanguageTag { get; }

	//	// @property (readonly, nonatomic) NSLocale * _Nullable locale;
	//	[NullAllowed, Export ("locale")]
	//	NSLocale Locale { get; }

	//	// @property (readonly, nonatomic) NSArray<AVMetadataItem *> * _Nonnull commonMetadata;
	//	[Export ("commonMetadata")]
	//	AVMetadataItem[] CommonMetadata { get; }

	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull availableMetadataFormats;
	//	[Export ("availableMetadataFormats")]
	//	string[] AvailableMetadataFormats { get; }

	//	// -(NSArray<AVMetadataItem *> * _Nonnull)metadataForFormat:(NSString * _Nonnull)format;
	//	[Export ("metadataForFormat:")]
	//	AVMetadataItem[] MetadataForFormat (string format);

	//	// -(AVMediaSelectionOption * _Nullable)associatedMediaSelectionOptionInMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
	//	[Export ("associatedMediaSelectionOptionInMediaSelectionGroup:")]
	//	[return: NullAllowed]
	//	AVMediaSelectionOption AssociatedMediaSelectionOptionInMediaSelectionGroup (AVMediaSelectionGroup mediaSelectionGroup);

	//	// -(id _Nonnull)propertyList;
	//	[Export ("propertyList")]
	//	[Verify (MethodToProperty)]
	//	NSObject PropertyList { get; }

	//	// -(NSString * _Nonnull)displayNameWithLocale:(NSLocale * _Nonnull)locale __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("displayNameWithLocale:")]
	//	string DisplayNameWithLocale (NSLocale locale);

	//	// @property (readonly, nonatomic) NSString * _Nonnull displayName __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("displayName")]
	//	string DisplayName { get; }
	//}

	//// @interface AVAssetWriter : NSObject
	//[iOS (4,1)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetWriter
	//{
	//	// +(instancetype _Nullable)assetWriterWithURL:(NSURL * _Nonnull)outputURL fileType:(AVFileType _Nonnull)outputFileType error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("assetWriterWithURL:fileType:error:")]
	//	[return: NullAllowed]
	//	AVAssetWriter AssetWriterWithURL (NSUrl outputURL, string outputFileType, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)outputURL fileType:(AVFileType _Nonnull)outputFileType error:(NSError * _Nullable * _Nullable)outError __attribute__((objc_designated_initializer));
	//	[Export ("initWithURL:fileType:error:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl outputURL, string outputFileType, [NullAllowed] out NSError outError);

	//	// @property (readonly, copy, nonatomic) NSURL * _Nonnull outputURL;
	//	[Export ("outputURL", ArgumentSemantic.Copy)]
	//	NSUrl OutputURL { get; }

	//	// @property (readonly, copy, nonatomic) AVFileType _Nonnull outputFileType;
	//	[Export ("outputFileType")]
	//	string OutputFileType { get; }

	//	// @property (readonly, nonatomic) NSArray<AVMediaType> * _Nonnull availableMediaTypes;
	//	[Export ("availableMediaTypes")]
	//	string[] AvailableMediaTypes { get; }

	//	// @property (readonly) AVAssetWriterStatus status;
	//	[Export ("status")]
	//	AVAssetWriterStatus Status { get; }

	//	// @property (readonly) NSError * _Nullable error;
	//	[NullAllowed, Export ("error")]
	//	NSError Error { get; }

	//	// @property (copy, nonatomic) NSArray<AVMetadataItem *> * _Nonnull metadata;
	//	[Export ("metadata", ArgumentSemantic.Copy)]
	//	AVMetadataItem[] Metadata { get; set; }

	//	// @property (nonatomic) BOOL shouldOptimizeForNetworkUse;
	//	[Export ("shouldOptimizeForNetworkUse")]
	//	bool ShouldOptimizeForNetworkUse { get; set; }

	//	// @property (copy, nonatomic) NSURL * _Nullable directoryForTemporaryFiles __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("directoryForTemporaryFiles", ArgumentSemantic.Copy)]
	//	NSUrl DirectoryForTemporaryFiles { get; set; }

	//	// @property (readonly, nonatomic) NSArray<AVAssetWriterInput *> * _Nonnull inputs;
	//	[Export ("inputs")]
	//	AVAssetWriterInput[] Inputs { get; }

	//	// -(BOOL)canApplyOutputSettings:(NSDictionary<NSString *,id> * _Nullable)outputSettings forMediaType:(AVMediaType _Nonnull)mediaType;
	//	[Export ("canApplyOutputSettings:forMediaType:")]
	//	bool CanApplyOutputSettings ([NullAllowed] NSDictionary<NSString, NSObject> outputSettings, string mediaType);

	//	// -(BOOL)canAddInput:(AVAssetWriterInput * _Nonnull)input;
	//	[Export ("canAddInput:")]
	//	bool CanAddInput (AVAssetWriterInput input);

	//	// -(void)addInput:(AVAssetWriterInput * _Nonnull)input;
	//	[Export ("addInput:")]
	//	void AddInput (AVAssetWriterInput input);

	//	// -(BOOL)startWriting;
	//	[Export ("startWriting")]
	//	[Verify (MethodToProperty)]
	//	bool StartWriting { get; }

	//	// -(void)startSessionAtSourceTime:(CMTime)startTime;
	//	[Export ("startSessionAtSourceTime:")]
	//	void StartSessionAtSourceTime (CMTime startTime);

	//	// -(void)endSessionAtSourceTime:(CMTime)endTime;
	//	[Export ("endSessionAtSourceTime:")]
	//	void EndSessionAtSourceTime (CMTime endTime);

	//	// -(void)cancelWriting;
	//	[Export ("cancelWriting")]
	//	void CancelWriting ();

	//	// -(BOOL)finishWriting __attribute__((availability(ios, introduced=4.1, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 1)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[Export ("finishWriting")]
	//	[Verify (MethodToProperty)]
	//	bool FinishWriting { get; }

	//	// -(void)finishWritingWithCompletionHandler:(void (^ _Nonnull)(void))handler __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("finishWritingWithCompletionHandler:")]
	//	void FinishWritingWithCompletionHandler (Action handler);
	//}

	//// @interface AVAssetWriterFileTypeSpecificProperties (AVAssetWriter)
	//[Category]
	//[BaseType (typeof(AVAssetWriter))]
	//interface AVAssetWriter_AVAssetWriterFileTypeSpecificProperties
	//{
	//	// @property (nonatomic) CMTime movieFragmentInterval;
	//	[Export ("movieFragmentInterval", ArgumentSemantic.Assign)]
	//	CMTime MovieFragmentInterval { get; set; }

	//	// @property (nonatomic) CMTime overallDurationHint;
	//	[Export ("overallDurationHint", ArgumentSemantic.Assign)]
	//	CMTime OverallDurationHint { get; set; }

	//	// @property (nonatomic) CMTimeScale movieTimeScale __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[Export ("movieTimeScale")]
	//	int MovieTimeScale { get; set; }
	//}

	//// @interface AVAssetWriterInputGroups (AVAssetWriter)
	//[Category]
	//[BaseType (typeof(AVAssetWriter))]
	//interface AVAssetWriter_AVAssetWriterInputGroups
	//{
	//	// -(BOOL)canAddInputGroup:(AVAssetWriterInputGroup * _Nonnull)inputGroup __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("canAddInputGroup:")]
	//	bool CanAddInputGroup (AVAssetWriterInputGroup inputGroup);

	//	// -(void)addInputGroup:(AVAssetWriterInputGroup * _Nonnull)inputGroup __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("addInputGroup:")]
	//	void AddInputGroup (AVAssetWriterInputGroup inputGroup);

	//	// @property (readonly, nonatomic) NSArray<AVAssetWriterInputGroup *> * _Nonnull inputGroups __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("inputGroups")]
	//	AVAssetWriterInputGroup[] InputGroups { get; }
	//}

	//// @interface AVAssetWriterInputGroup : AVMediaSelectionGroup
	//[iOS (7,0)]
	//[BaseType (typeof(AVMediaSelectionGroup))]
	//[DisableDefaultCtor]
	//interface AVAssetWriterInputGroup
	//{
	//	// +(instancetype _Nonnull)assetWriterInputGroupWithInputs:(NSArray<AVAssetWriterInput *> * _Nonnull)inputs defaultInput:(AVAssetWriterInput * _Nullable)defaultInput;
	//	[Static]
	//	[Export ("assetWriterInputGroupWithInputs:defaultInput:")]
	//	AVAssetWriterInputGroup AssetWriterInputGroupWithInputs (AVAssetWriterInput[] inputs, [NullAllowed] AVAssetWriterInput defaultInput);

	//	// -(instancetype _Nonnull)initWithInputs:(NSArray<AVAssetWriterInput *> * _Nonnull)inputs defaultInput:(AVAssetWriterInput * _Nullable)defaultInput __attribute__((objc_designated_initializer));
	//	[Export ("initWithInputs:defaultInput:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAssetWriterInput[] inputs, [NullAllowed] AVAssetWriterInput defaultInput);

	//	// @property (readonly, nonatomic) NSArray<AVAssetWriterInput *> * _Nonnull inputs;
	//	[Export ("inputs")]
	//	AVAssetWriterInput[] Inputs { get; }

	//	// @property (readonly, nonatomic) AVAssetWriterInput * _Nullable defaultInput;
	//	[NullAllowed, Export ("defaultInput")]
	//	AVAssetWriterInput DefaultInput { get; }
	//}

	//// @interface AVAssetWriterInput : NSObject
	//[iOS (4,1)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetWriterInput
	//{
	//	// +(instancetype _Nonnull)assetWriterInputWithMediaType:(AVMediaType _Nonnull)mediaType outputSettings:(NSDictionary<NSString *,id> * _Nullable)outputSettings;
	//	[Static]
	//	[Export ("assetWriterInputWithMediaType:outputSettings:")]
	//	AVAssetWriterInput AssetWriterInputWithMediaType (string mediaType, [NullAllowed] NSDictionary<NSString, NSObject> outputSettings);

	//	// +(instancetype _Nonnull)assetWriterInputWithMediaType:(AVMediaType _Nonnull)mediaType outputSettings:(NSDictionary<NSString *,id> * _Nullable)outputSettings sourceFormatHint:(CMFormatDescriptionRef _Nullable)sourceFormatHint __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("assetWriterInputWithMediaType:outputSettings:sourceFormatHint:")]
	//	unsafe AVAssetWriterInput AssetWriterInputWithMediaType (string mediaType, [NullAllowed] NSDictionary<NSString, NSObject> outputSettings, [NullAllowed] CMFormatDescriptionRef* sourceFormatHint);

	//	// -(instancetype _Nonnull)initWithMediaType:(AVMediaType _Nonnull)mediaType outputSettings:(NSDictionary<NSString *,id> * _Nullable)outputSettings;
	//	[Export ("initWithMediaType:outputSettings:")]
	//	IntPtr Constructor (string mediaType, [NullAllowed] NSDictionary<NSString, NSObject> outputSettings);

	//	// -(instancetype _Nonnull)initWithMediaType:(AVMediaType _Nonnull)mediaType outputSettings:(NSDictionary<NSString *,id> * _Nullable)outputSettings sourceFormatHint:(CMFormatDescriptionRef _Nullable)sourceFormatHint __attribute__((objc_designated_initializer)) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("initWithMediaType:outputSettings:sourceFormatHint:")]
	//	[DesignatedInitializer]
	//	unsafe IntPtr Constructor (string mediaType, [NullAllowed] NSDictionary<NSString, NSObject> outputSettings, [NullAllowed] CMFormatDescriptionRef* sourceFormatHint);

	//	// @property (readonly, nonatomic) AVMediaType _Nonnull mediaType;
	//	[Export ("mediaType")]
	//	string MediaType { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nullable outputSettings;
	//	[NullAllowed, Export ("outputSettings")]
	//	NSDictionary<NSString, NSObject> OutputSettings { get; }

	//	// @property (readonly, nonatomic) CMFormatDescriptionRef _Nullable sourceFormatHint __attribute__((NSObject)) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("sourceFormatHint")]
	//	unsafe CMFormatDescriptionRef* SourceFormatHint { get; }

	//	// @property (copy, nonatomic) NSArray<AVMetadataItem *> * _Nonnull metadata;
	//	[Export ("metadata", ArgumentSemantic.Copy)]
	//	AVMetadataItem[] Metadata { get; set; }

	//	// @property (readonly, getter = isReadyForMoreMediaData, nonatomic) BOOL readyForMoreMediaData;
	//	[Export ("readyForMoreMediaData")]
	//	bool ReadyForMoreMediaData { [Bind ("isReadyForMoreMediaData")] get; }

	//	// @property (nonatomic) BOOL expectsMediaDataInRealTime;
	//	[Export ("expectsMediaDataInRealTime")]
	//	bool ExpectsMediaDataInRealTime { get; set; }

	//	// -(void)requestMediaDataWhenReadyOnQueue:(dispatch_queue_t _Nonnull)queue usingBlock:(void (^ _Nonnull)(void))block;
	//	[Export ("requestMediaDataWhenReadyOnQueue:usingBlock:")]
	//	void RequestMediaDataWhenReadyOnQueue (DispatchQueue queue, Action block);

	//	// -(BOOL)appendSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer;
	//	[Export ("appendSampleBuffer:")]
	//	unsafe bool AppendSampleBuffer (CMSampleBufferRef* sampleBuffer);

	//	// -(void)markAsFinished;
	//	[Export ("markAsFinished")]
	//	void MarkAsFinished ();
	//}

	//// @interface AVAssetWriterInputLanguageProperties (AVAssetWriterInput)
	//[Category]
	//[BaseType (typeof(AVAssetWriterInput))]
	//interface AVAssetWriterInput_AVAssetWriterInputLanguageProperties
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable languageCode __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("languageCode")]
	//	string LanguageCode { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable extendedLanguageTag __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("extendedLanguageTag")]
	//	string ExtendedLanguageTag { get; set; }
	//}

	//// @interface AVAssetWriterInputPropertiesForVisualCharacteristic (AVAssetWriterInput)
	//[Category]
	//[BaseType (typeof(AVAssetWriterInput))]
	//interface AVAssetWriterInput_AVAssetWriterInputPropertiesForVisualCharacteristic
	//{
	//	// @property (nonatomic) CGSize naturalSize __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("naturalSize", ArgumentSemantic.Assign)]
	//	CGSize NaturalSize { get; set; }

	//	// @property (nonatomic) CGAffineTransform transform;
	//	[Export ("transform", ArgumentSemantic.Assign)]
	//	CGAffineTransform Transform { get; set; }
	//}

	//// @interface AVAssetWriterInputPropertiesForAudibleCharacteristic (AVAssetWriterInput)
	//[Category]
	//[BaseType (typeof(AVAssetWriterInput))]
	//interface AVAssetWriterInput_AVAssetWriterInputPropertiesForAudibleCharacteristic
	//{
	//	// @property (nonatomic) float preferredVolume __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("preferredVolume")]
	//	float PreferredVolume { get; set; }
	//}

	//// @interface AVAssetWriterInputFileTypeSpecificProperties (AVAssetWriterInput)
	//[Category]
	//[BaseType (typeof(AVAssetWriterInput))]
	//interface AVAssetWriterInput_AVAssetWriterInputFileTypeSpecificProperties
	//{
	//	// @property (nonatomic) BOOL marksOutputTrackAsEnabled __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("marksOutputTrackAsEnabled")]
	//	bool MarksOutputTrackAsEnabled { get; set; }

	//	// @property (nonatomic) CMTimeScale mediaTimeScale __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[Export ("mediaTimeScale")]
	//	int MediaTimeScale { get; set; }

	//	// @property (nonatomic) CMTime preferredMediaChunkDuration __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("preferredMediaChunkDuration", ArgumentSemantic.Assign)]
	//	CMTime PreferredMediaChunkDuration { get; set; }

	//	// @property (nonatomic) NSInteger preferredMediaChunkAlignment __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("preferredMediaChunkAlignment")]
	//	nint PreferredMediaChunkAlignment { get; set; }

	//	// @property (copy, nonatomic) NSURL * _Nullable sampleReferenceBaseURL __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("sampleReferenceBaseURL", ArgumentSemantic.Copy)]
	//	NSUrl SampleReferenceBaseURL { get; set; }

	//	// @property (copy, nonatomic) AVAssetWriterInputMediaDataLocation _Nonnull mediaDataLocation __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("mediaDataLocation")]
	//	string MediaDataLocation { get; set; }
	//}

	//// @interface AVAssetWriterInputTrackAssociations (AVAssetWriterInput)
	//[Category]
	//[BaseType (typeof(AVAssetWriterInput))]
	//interface AVAssetWriterInput_AVAssetWriterInputTrackAssociations
	//{
	//	// -(BOOL)canAddTrackAssociationWithTrackOfInput:(AVAssetWriterInput * _Nonnull)input type:(NSString * _Nonnull)trackAssociationType __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("canAddTrackAssociationWithTrackOfInput:type:")]
	//	bool CanAddTrackAssociationWithTrackOfInput (AVAssetWriterInput input, string trackAssociationType);

	//	// -(void)addTrackAssociationWithTrackOfInput:(AVAssetWriterInput * _Nonnull)input type:(NSString * _Nonnull)trackAssociationType __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("addTrackAssociationWithTrackOfInput:type:")]
	//	void AddTrackAssociationWithTrackOfInput (AVAssetWriterInput input, string trackAssociationType);
	//}

	//// @interface AVAssetWriterInputMultiPass (AVAssetWriterInput)
	//[Category]
	//[BaseType (typeof(AVAssetWriterInput))]
	//interface AVAssetWriterInput_AVAssetWriterInputMultiPass
	//{
	//	// @property (nonatomic) BOOL performsMultiPassEncodingIfSupported __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("performsMultiPassEncodingIfSupported")]
	//	bool PerformsMultiPassEncodingIfSupported { get; set; }

	//	// @property (readonly, nonatomic) BOOL canPerformMultiplePasses __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("canPerformMultiplePasses")]
	//	bool CanPerformMultiplePasses { get; }

	//	// @property (readonly) AVAssetWriterInputPassDescription * _Nullable currentPassDescription __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("currentPassDescription")]
	//	AVAssetWriterInputPassDescription CurrentPassDescription { get; }

	//	// -(void)respondToEachPassDescriptionOnQueue:(dispatch_queue_t _Nonnull)queue usingBlock:(dispatch_block_t _Nonnull)block __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("respondToEachPassDescriptionOnQueue:usingBlock:")]
	//	void RespondToEachPassDescriptionOnQueue (DispatchQueue queue, dispatch_block_t block);

	//	// -(void)markCurrentPassAsFinished __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("markCurrentPassAsFinished")]
	//	void MarkCurrentPassAsFinished ();
	//}

	//// @interface AVAssetWriterInputPassDescription : NSObject
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetWriterInputPassDescription
	//{
	//	// @property (readonly, nonatomic) NSArray<NSValue *> * _Nonnull sourceTimeRanges;
	//	[Export ("sourceTimeRanges")]
	//	NSValue[] SourceTimeRanges { get; }
	//}

	//// @interface AVAssetWriterInputPixelBufferAdaptor : NSObject
	//[iOS (4,1)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetWriterInputPixelBufferAdaptor
	//{
	//	// +(instancetype _Nonnull)assetWriterInputPixelBufferAdaptorWithAssetWriterInput:(AVAssetWriterInput * _Nonnull)input sourcePixelBufferAttributes:(NSDictionary<NSString *,id> * _Nullable)sourcePixelBufferAttributes;
	//	[Static]
	//	[Export ("assetWriterInputPixelBufferAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:")]
	//	AVAssetWriterInputPixelBufferAdaptor AssetWriterInputPixelBufferAdaptorWithAssetWriterInput (AVAssetWriterInput input, [NullAllowed] NSDictionary<NSString, NSObject> sourcePixelBufferAttributes);

	//	// -(instancetype _Nonnull)initWithAssetWriterInput:(AVAssetWriterInput * _Nonnull)input sourcePixelBufferAttributes:(NSDictionary<NSString *,id> * _Nullable)sourcePixelBufferAttributes __attribute__((objc_designated_initializer));
	//	[Export ("initWithAssetWriterInput:sourcePixelBufferAttributes:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAssetWriterInput input, [NullAllowed] NSDictionary<NSString, NSObject> sourcePixelBufferAttributes);

	//	// @property (readonly, nonatomic) AVAssetWriterInput * _Nonnull assetWriterInput;
	//	[Export ("assetWriterInput")]
	//	AVAssetWriterInput AssetWriterInput { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nullable sourcePixelBufferAttributes;
	//	[NullAllowed, Export ("sourcePixelBufferAttributes")]
	//	NSDictionary<NSString, NSObject> SourcePixelBufferAttributes { get; }

	//	// @property (readonly, nonatomic) CVPixelBufferPoolRef _Nullable pixelBufferPool;
	//	[NullAllowed, Export ("pixelBufferPool")]
	//	unsafe CVPixelBufferPoolRef* PixelBufferPool { get; }

	//	// -(BOOL)appendPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer withPresentationTime:(CMTime)presentationTime;
	//	[Export ("appendPixelBuffer:withPresentationTime:")]
	//	unsafe bool AppendPixelBuffer (CVPixelBufferRef* pixelBuffer, CMTime presentationTime);
	//}

	//// @interface AVAssetWriterInputMetadataAdaptor : NSObject
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAssetWriterInputMetadataAdaptor
	//{
	//	// +(instancetype _Nonnull)assetWriterInputMetadataAdaptorWithAssetWriterInput:(AVAssetWriterInput * _Nonnull)input;
	//	[Static]
	//	[Export ("assetWriterInputMetadataAdaptorWithAssetWriterInput:")]
	//	AVAssetWriterInputMetadataAdaptor AssetWriterInputMetadataAdaptorWithAssetWriterInput (AVAssetWriterInput input);

	//	// -(instancetype _Nonnull)initWithAssetWriterInput:(AVAssetWriterInput * _Nonnull)input __attribute__((objc_designated_initializer));
	//	[Export ("initWithAssetWriterInput:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAssetWriterInput input);

	//	// @property (readonly, nonatomic) AVAssetWriterInput * _Nonnull assetWriterInput;
	//	[Export ("assetWriterInput")]
	//	AVAssetWriterInput AssetWriterInput { get; }

	//	// -(BOOL)appendTimedMetadataGroup:(AVTimedMetadataGroup * _Nonnull)timedMetadataGroup;
	//	[Export ("appendTimedMetadataGroup:")]
	//	bool AppendTimedMetadataGroup (AVTimedMetadataGroup timedMetadataGroup);
	//}

	//// @interface AVAudioMix : NSObject <NSCopying, NSMutableCopying>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioMix : INSCopying, INSMutableCopying
	//{
	//	// @property (readonly, copy, nonatomic) NSArray<AVAudioMixInputParameters *> * _Nonnull inputParameters;
	//	[Export ("inputParameters", ArgumentSemantic.Copy)]
	//	AVAudioMixInputParameters[] InputParameters { get; }
	//}

	//// @interface AVMutableAudioMix : AVAudioMix
	//[iOS (4,0)]
	//[BaseType (typeof(AVAudioMix))]
	//interface AVMutableAudioMix
	//{
	//	// +(instancetype _Nonnull)audioMix;
	//	[Static]
	//	[Export ("audioMix")]
	//	AVMutableAudioMix AudioMix ();

	//	// @property (copy, nonatomic) NSArray<AVAudioMixInputParameters *> * _Nonnull inputParameters;
	//	[Export ("inputParameters", ArgumentSemantic.Copy)]
	//	AVAudioMixInputParameters[] InputParameters { get; set; }
	//}

	//// @interface AVAudioMixInputParameters : NSObject <NSCopying, NSMutableCopying>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioMixInputParameters : INSCopying, INSMutableCopying
	//{
	//	// @property (readonly, nonatomic) CMPersistentTrackID trackID;
	//	[Export ("trackID")]
	//	int TrackID { get; }

	//	// @property (readonly, copy, nonatomic) AVAudioTimePitchAlgorithm _Nullable audioTimePitchAlgorithm __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("audioTimePitchAlgorithm")]
	//	string AudioTimePitchAlgorithm { get; }

	//	// @property (readonly, retain, nonatomic) MTAudioProcessingTapRef _Nullable audioTapProcessor __attribute__((NSObject)) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("audioTapProcessor", ArgumentSemantic.Retain)]
	//	unsafe MTAudioProcessingTapRef* AudioTapProcessor { get; }

	//	// -(BOOL)getVolumeRampForTime:(CMTime)time startVolume:(float * _Nullable)startVolume endVolume:(float * _Nullable)endVolume timeRange:(CMTimeRange * _Nullable)timeRange;
	//	[Export ("getVolumeRampForTime:startVolume:endVolume:timeRange:")]
	//	unsafe bool GetVolumeRampForTime (CMTime time, [NullAllowed] float* startVolume, [NullAllowed] float* endVolume, [NullAllowed] CMTimeRange* timeRange);
	//}

	//// @interface AVMutableAudioMixInputParameters : AVAudioMixInputParameters
	//[iOS (4,0)]
	//[BaseType (typeof(AVAudioMixInputParameters))]
	//interface AVMutableAudioMixInputParameters
	//{
	//	// +(instancetype _Nonnull)audioMixInputParametersWithTrack:(AVAssetTrack * _Nullable)track;
	//	[Static]
	//	[Export ("audioMixInputParametersWithTrack:")]
	//	AVMutableAudioMixInputParameters AudioMixInputParametersWithTrack ([NullAllowed] AVAssetTrack track);

	//	// +(instancetype _Nonnull)audioMixInputParameters;
	//	[Static]
	//	[Export ("audioMixInputParameters")]
	//	AVMutableAudioMixInputParameters AudioMixInputParameters ();

	//	// @property (nonatomic) CMPersistentTrackID trackID;
	//	[Export ("trackID")]
	//	int TrackID { get; set; }

	//	// @property (copy, nonatomic) AVAudioTimePitchAlgorithm _Nullable audioTimePitchAlgorithm __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("audioTimePitchAlgorithm")]
	//	string AudioTimePitchAlgorithm { get; set; }

	//	// @property (retain, nonatomic) MTAudioProcessingTapRef _Nullable audioTapProcessor __attribute__((NSObject)) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("audioTapProcessor", ArgumentSemantic.Retain)]
	//	unsafe MTAudioProcessingTapRef* AudioTapProcessor { get; set; }

	//	// -(void)setVolumeRampFromStartVolume:(float)startVolume toEndVolume:(float)endVolume timeRange:(CMTimeRange)timeRange;
	//	[Export ("setVolumeRampFromStartVolume:toEndVolume:timeRange:")]
	//	void SetVolumeRampFromStartVolume (float startVolume, float endVolume, CMTimeRange timeRange);

	//	// -(void)setVolume:(float)volume atTime:(CMTime)time;
	//	[Export ("setVolume:atTime:")]
	//	void SetVolume (float volume, CMTime time);
	//}

	//// @interface AVMediaSelection : NSObject <NSCopying, NSMutableCopying>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVMediaSelection : INSCopying, INSMutableCopying
	//{
	//	// @property (readonly, nonatomic, weak) AVAsset * _Nullable asset;
	//	[NullAllowed, Export ("asset", ArgumentSemantic.Weak)]
	//	AVAsset Asset { get; }

	//	// -(AVMediaSelectionOption * _Nullable)selectedMediaOptionInMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
	//	[Export ("selectedMediaOptionInMediaSelectionGroup:")]
	//	[return: NullAllowed]
	//	AVMediaSelectionOption SelectedMediaOptionInMediaSelectionGroup (AVMediaSelectionGroup mediaSelectionGroup);

	//	// -(BOOL)mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
	//	[Export ("mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup:")]
	//	bool MediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup (AVMediaSelectionGroup mediaSelectionGroup);
	//}

	//// @interface AVMutableMediaSelection : AVMediaSelection
	//[iOS (9,0)]
	//[BaseType (typeof(AVMediaSelection))]
	//interface AVMutableMediaSelection
	//{
	//	// -(void)selectMediaOption:(AVMediaSelectionOption * _Nullable)mediaSelectionOption inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
	//	[Export ("selectMediaOption:inMediaSelectionGroup:")]
	//	void SelectMediaOption ([NullAllowed] AVMediaSelectionOption mediaSelectionOption, AVMediaSelectionGroup mediaSelectionGroup);
	//}

	//// @interface AVAssetDownloadTask : NSURLSessionTask
	//[NoWatch, NoTV, iOS (9,0)]
	//[BaseType (typeof(NSUrlSessionTask))]
	//[DisableDefaultCtor]
	//interface AVAssetDownloadTask
	//{
	//	// @property (readonly, nonatomic) AVURLAsset * _Nonnull URLAsset;
	//	[Export ("URLAsset")]
	//	AVUrlAsset URLAsset { get; }

	//	// @property (readonly, nonatomic) NSURL * _Nonnull destinationURL __attribute__((availability(ios, introduced=9.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 9, 0)]
	//	[Deprecated (PlatformName.iOS, 10, 0)]
	//	[Export ("destinationURL")]
	//	NSUrl DestinationURL { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nullable options;
	//	[NullAllowed, Export ("options")]
	//	NSDictionary<NSString, NSObject> Options { get; }

	//	// @property (readonly, nonatomic) NSArray<NSValue *> * _Nonnull loadedTimeRanges;
	//	[Export ("loadedTimeRanges")]
	//	NSValue[] LoadedTimeRanges { get; }
	//}

	//// @interface AVAggregateAssetDownloadTask : NSURLSessionTask
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSUrlSessionTask))]
	//[DisableDefaultCtor]
	//interface AVAggregateAssetDownloadTask
	//{
	//	// @property (readonly, nonatomic) AVURLAsset * _Nonnull URLAsset;
	//	[Export ("URLAsset")]
	//	AVUrlAsset URLAsset { get; }
	//}

	//// @protocol AVAssetDownloadDelegate <NSURLSessionTaskDelegate>
	//[NoWatch, NoTV]
	//[Protocol, Model]
	//interface AVAssetDownloadDelegate : INSUrlSessionTaskDelegate
	//{
	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("URLSession:assetDownloadTask:didFinishDownloadingToURL:")]
	//	void AssetDownloadTask (NSUrlSession session, AVAssetDownloadTask assetDownloadTask, NSUrl location);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask didLoadTimeRange:(CMTimeRange)timeRange totalTimeRangesLoaded:(NSArray<NSValue *> * _Nonnull)loadedTimeRanges timeRangeExpectedToLoad:(CMTimeRange)timeRangeExpectedToLoad __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("URLSession:assetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:")]
	//	void AssetDownloadTask (NSUrlSession session, AVAssetDownloadTask assetDownloadTask, CMTimeRange timeRange, NSValue[] loadedTimeRanges, CMTimeRange timeRangeExpectedToLoad);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask didResolveMediaSelection:(AVMediaSelection * _Nonnull)resolvedMediaSelection __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("URLSession:assetDownloadTask:didResolveMediaSelection:")]
	//	void AssetDownloadTask (NSUrlSession session, AVAssetDownloadTask assetDownloadTask, AVMediaSelection resolvedMediaSelection);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session aggregateAssetDownloadTask:(AVAggregateAssetDownloadTask * _Nonnull)aggregateAssetDownloadTask willDownloadToURL:(NSURL * _Nonnull)location __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("URLSession:aggregateAssetDownloadTask:willDownloadToURL:")]
	//	void AggregateAssetDownloadTask (NSUrlSession session, AVAggregateAssetDownloadTask aggregateAssetDownloadTask, NSUrl location);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session aggregateAssetDownloadTask:(AVAggregateAssetDownloadTask * _Nonnull)aggregateAssetDownloadTask didCompleteForMediaSelection:(AVMediaSelection * _Nonnull)mediaSelection __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("URLSession:aggregateAssetDownloadTask:didCompleteForMediaSelection:")]
	//	void AggregateAssetDownloadTask (NSUrlSession session, AVAggregateAssetDownloadTask aggregateAssetDownloadTask, AVMediaSelection mediaSelection);

	//	// @optional -(void)URLSession:(NSURLSession * _Nonnull)session aggregateAssetDownloadTask:(AVAggregateAssetDownloadTask * _Nonnull)aggregateAssetDownloadTask didLoadTimeRange:(CMTimeRange)timeRange totalTimeRangesLoaded:(NSArray<NSValue *> * _Nonnull)loadedTimeRanges timeRangeExpectedToLoad:(CMTimeRange)timeRangeExpectedToLoad forMediaSelection:(AVMediaSelection * _Nonnull)mediaSelection __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("URLSession:aggregateAssetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:forMediaSelection:")]
	//	void AggregateAssetDownloadTask (NSUrlSession session, AVAggregateAssetDownloadTask aggregateAssetDownloadTask, CMTimeRange timeRange, NSValue[] loadedTimeRanges, CMTimeRange timeRangeExpectedToLoad, AVMediaSelection mediaSelection);
	//}

	//// @interface AVAssetDownloadURLSession : NSURLSession
	//[NoTV, iOS (9,0)]
	//[BaseType (typeof(NSUrlSession))]
	//[DisableDefaultCtor]
	//interface AVAssetDownloadURLSession
	//{
	//	// +(AVAssetDownloadURLSession * _Nonnull)sessionWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration assetDownloadDelegate:(id<AVAssetDownloadDelegate> _Nullable)delegate delegateQueue:(NSOperationQueue * _Nullable)delegateQueue;
	//	[Static]
	//	[Export ("sessionWithConfiguration:assetDownloadDelegate:delegateQueue:")]
	//	AVAssetDownloadUrlSession SessionWithConfiguration (NSUrlSessionConfiguration configuration, [NullAllowed] AVAssetDownloadDelegate @delegate, [NullAllowed] NSOperationQueue delegateQueue);

	//	// -(AVAssetDownloadTask * _Nullable)assetDownloadTaskWithURLAsset:(AVURLAsset * _Nonnull)URLAsset destinationURL:(NSURL * _Nonnull)destinationURL options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=9.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 9, 0)]
	//	[Deprecated (PlatformName.iOS, 10, 0)]
	//	[Export ("assetDownloadTaskWithURLAsset:destinationURL:options:")]
	//	[return: NullAllowed]
	//	AVAssetDownloadTask AssetDownloadTaskWithURLAsset (AVUrlAsset URLAsset, NSUrl destinationURL, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(AVAssetDownloadTask * _Nullable)assetDownloadTaskWithURLAsset:(AVURLAsset * _Nonnull)URLAsset assetTitle:(NSString * _Nonnull)title assetArtworkData:(NSData * _Nullable)artworkData options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("assetDownloadTaskWithURLAsset:assetTitle:assetArtworkData:options:")]
	//	[return: NullAllowed]
	//	AVAssetDownloadTask AssetDownloadTaskWithURLAsset (AVUrlAsset URLAsset, string title, [NullAllowed] NSData artworkData, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(AVAggregateAssetDownloadTask * _Nullable)aggregateAssetDownloadTaskWithURLAsset:(AVURLAsset * _Nonnull)URLAsset mediaSelections:(NSArray<AVMediaSelection *> * _Nonnull)mediaSelections assetTitle:(NSString * _Nonnull)title assetArtworkData:(NSData * _Nullable)artworkData options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("aggregateAssetDownloadTaskWithURLAsset:mediaSelections:assetTitle:assetArtworkData:options:")]
	//	[return: NullAllowed]
	//	AVAggregateAssetDownloadTask AggregateAssetDownloadTaskWithURLAsset (AVUrlAsset URLAsset, AVMediaSelection[] mediaSelections, string title, [NullAllowed] NSData artworkData, [NullAllowed] NSDictionary<NSString, NSObject> options);
	//}

	//// @interface AVAssetDownloadStorageManager : NSObject
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAssetDownloadStorageManager
	//{
	//	// +(AVAssetDownloadStorageManager * _Nonnull)sharedDownloadStorageManager;
	//	[Static]
	//	[Export ("sharedDownloadStorageManager")]
	//	[Verify (MethodToProperty)]
	//	AVAssetDownloadStorageManager SharedDownloadStorageManager { get; }

	//	// -(void)setStorageManagementPolicy:(AVAssetDownloadStorageManagementPolicy * _Nonnull)storageManagementPolicy forURL:(NSURL * _Nonnull)downloadStorageURL;
	//	[Export ("setStorageManagementPolicy:forURL:")]
	//	void SetStorageManagementPolicy (AVAssetDownloadStorageManagementPolicy storageManagementPolicy, NSUrl downloadStorageURL);

	//	// -(AVAssetDownloadStorageManagementPolicy * _Nullable)storageManagementPolicyForURL:(NSURL * _Nonnull)downloadStorageURL;
	//	[Export ("storageManagementPolicyForURL:")]
	//	[return: NullAllowed]
	//	AVAssetDownloadStorageManagementPolicy StorageManagementPolicyForURL (NSUrl downloadStorageURL);
	//}

	//// @interface AVAssetDownloadStorageManagementPolicy : NSObject <NSCopying, NSMutableCopying>
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAssetDownloadStorageManagementPolicy : INSCopying, INSMutableCopying
	//{
	//	// @property (readonly, copy, nonatomic) AVAssetDownloadedAssetEvictionPriority _Nonnull priority;
	//	[Export ("priority")]
	//	string Priority { get; }

	//	// @property (readonly, copy, nonatomic) NSDate * _Nonnull expirationDate;
	//	[Export ("expirationDate", ArgumentSemantic.Copy)]
	//	NSDate ExpirationDate { get; }
	//}

	//// @interface AVMutableAssetDownloadStorageManagementPolicy : AVAssetDownloadStorageManagementPolicy
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(AVAssetDownloadStorageManagementPolicy))]
	//interface AVMutableAssetDownloadStorageManagementPolicy
	//{
	//	// @property (copy, nonatomic) AVAssetDownloadedAssetEvictionPriority _Nonnull priority;
	//	[Export ("priority")]
	//	string Priority { get; set; }

	//	// @property (copy, nonatomic) NSDate * _Nonnull expirationDate;
	//	[Export ("expirationDate", ArgumentSemantic.Copy)]
	//	NSDate ExpirationDate { get; set; }
	//}

	//// @interface AVCaptureDevice : NSObject
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureDevice
	//{
	//	// +(NSArray<AVCaptureDevice *> * _Nonnull)devices __attribute__((availability(ios, introduced=4.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use AVCaptureDeviceDiscoverySession instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use AVCaptureDeviceDiscoverySession instead.")]
	//	[Static]
	//	[Export ("devices")]
	//	[Verify (MethodToProperty)]
	//	AVCaptureDevice[] Devices { get; }

	//	// +(NSArray<AVCaptureDevice *> * _Nonnull)devicesWithMediaType:(AVMediaType _Nonnull)mediaType __attribute__((availability(ios, introduced=4.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use AVCaptureDeviceDiscoverySession instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use AVCaptureDeviceDiscoverySession instead.")]
	//	[Static]
	//	[Export ("devicesWithMediaType:")]
	//	AVCaptureDevice[] DevicesWithMediaType (string mediaType);

	//	// +(AVCaptureDevice * _Nullable)defaultDeviceWithMediaType:(AVMediaType _Nonnull)mediaType;
	//	[Static]
	//	[Export ("defaultDeviceWithMediaType:")]
	//	[return: NullAllowed]
	//	AVCaptureDevice DefaultDeviceWithMediaType (string mediaType);

	//	// +(AVCaptureDevice * _Nullable)deviceWithUniqueID:(NSString * _Nonnull)deviceUniqueID;
	//	[Static]
	//	[Export ("deviceWithUniqueID:")]
	//	[return: NullAllowed]
	//	AVCaptureDevice DeviceWithUniqueID (string deviceUniqueID);

	//	// @property (readonly, nonatomic) NSString * _Nonnull uniqueID;
	//	[Export ("uniqueID")]
	//	string UniqueID { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull modelID;
	//	[Export ("modelID")]
	//	string ModelID { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull localizedName;
	//	[Export ("localizedName")]
	//	string LocalizedName { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull manufacturer __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 9)]
	//	[Export ("manufacturer")]
	//	string Manufacturer { get; }

	//	// @property (readonly, nonatomic) int32_t transportType __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("transportType")]
	//	int TransportType { get; }

	//	// -(BOOL)hasMediaType:(AVMediaType _Nonnull)mediaType;
	//	[Export ("hasMediaType:")]
	//	bool HasMediaType (string mediaType);

	//	// -(BOOL)lockForConfiguration:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("lockForConfiguration:")]
	//	bool LockForConfiguration ([NullAllowed] out NSError outError);

	//	// -(void)unlockForConfiguration;
	//	[Export ("unlockForConfiguration")]
	//	void UnlockForConfiguration ();

	//	// -(BOOL)supportsAVCaptureSessionPreset:(AVCaptureSessionPreset _Nonnull)preset;
	//	[Export ("supportsAVCaptureSessionPreset:")]
	//	bool SupportsAVCaptureSessionPreset (string preset);

	//	// @property (readonly, getter = isConnected, nonatomic) BOOL connected;
	//	[Export ("connected")]
	//	bool Connected { [Bind ("isConnected")] get; }

	//	// @property (readonly, getter = isInUseByAnotherApplication, nonatomic) BOOL inUseByAnotherApplication __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("inUseByAnotherApplication")]
	//	bool InUseByAnotherApplication { [Bind ("isInUseByAnotherApplication")] get; }

	//	// @property (readonly, getter = isSuspended, nonatomic) BOOL suspended __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("suspended")]
	//	bool Suspended { [Bind ("isSuspended")] get; }

	//	// @property (readonly, nonatomic) NSArray<AVCaptureDevice *> * _Nonnull linkedDevices __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("linkedDevices")]
	//	AVCaptureDevice[] LinkedDevices { get; }

	//	// @property (readonly, nonatomic) NSArray<AVCaptureDeviceFormat *> * _Nonnull formats __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("formats")]
	//	AVCaptureDeviceFormat[] Formats { get; }

	//	// @property (retain, nonatomic) AVCaptureDeviceFormat * _Nonnull activeFormat __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("activeFormat", ArgumentSemantic.Retain)]
	//	AVCaptureDeviceFormat ActiveFormat { get; set; }

	//	// @property (nonatomic) CMTime activeVideoMinFrameDuration __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("activeVideoMinFrameDuration", ArgumentSemantic.Assign)]
	//	CMTime ActiveVideoMinFrameDuration { get; set; }

	//	// @property (nonatomic) CMTime activeVideoMaxFrameDuration __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Mac (10, 9), iOS (7, 0)]
	//	[Export ("activeVideoMaxFrameDuration", ArgumentSemantic.Assign)]
	//	CMTime ActiveVideoMaxFrameDuration { get; set; }

	//	// @property (readonly, nonatomic) NSArray<AVCaptureDeviceInputSource *> * _Nonnull inputSources __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("inputSources")]
	//	AVCaptureDeviceInputSource[] InputSources { get; }

	//	// @property (retain, nonatomic) AVCaptureDeviceInputSource * _Nullable activeInputSource __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[NullAllowed, Export ("activeInputSource", ArgumentSemantic.Retain)]
	//	AVCaptureDeviceInputSource ActiveInputSource { get; set; }
	//}

	//// @interface AVCaptureDevicePosition (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDevicePosition
	//{
	//	// @property (readonly, nonatomic) AVCaptureDevicePosition position;
	//	[Export ("position")]
	//	AVCaptureDevicePosition Position { get; }
	//}

	//// @interface AVCaptureDeviceType (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceType
	//{
	//	// @property (readonly, nonatomic) AVCaptureDeviceType _Nonnull deviceType __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoMac, iOS (10, 0)]
	//	[Export ("deviceType")]
	//	string DeviceType { get; }

	//	// +(AVCaptureDevice * _Nullable)defaultDeviceWithDeviceType:(AVCaptureDeviceType _Nonnull)deviceType mediaType:(AVMediaType _Nullable)mediaType position:(AVCaptureDevicePosition)position __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoMac, iOS (10,0)]
	//	[Static]
	//	[Export ("defaultDeviceWithDeviceType:mediaType:position:")]
	//	[return: NullAllowed]
	//	AVCaptureDevice DefaultDeviceWithDeviceType (string deviceType, [NullAllowed] string mediaType, AVCaptureDevicePosition position);
	//}

	//// @interface AVCaptureDeviceSystemPressure (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceSystemPressure
	//{
	//	// @property (readonly, nonatomic) AVCaptureSystemPressureState * _Nonnull systemPressureState __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.1)));
	//	[NoWatch, NoTV, NoMac, iOS (11, 1)]
	//	[Export ("systemPressureState")]
	//	AVCaptureSystemPressureState SystemPressureState { get; }
	//}

	//// @interface AVCaptureDeviceFlash (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceFlash
	//{
	//	// @property (readonly, nonatomic) BOOL hasFlash;
	//	[Export ("hasFlash")]
	//	bool HasFlash { get; }

	//	// @property (readonly, getter = isFlashAvailable, nonatomic) BOOL flashAvailable __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoMac, iOS (5, 0)]
	//	[Export ("flashAvailable")]
	//	bool FlashAvailable { [Bind ("isFlashAvailable")] get; }

	//	// @property (readonly, getter = isFlashActive, nonatomic) BOOL flashActive __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=5.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use AVCapturePhotoOutput's -isFlashScene instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use AVCapturePhotoOutput's -isFlashScene instead.")]
	//	[NoMac]
	//	[Export ("flashActive")]
	//	bool FlashActive { [Bind ("isFlashActive")] get; }

	//	// -(BOOL)isFlashModeSupported:(AVCaptureFlashMode)flashMode __attribute__((availability(ios, introduced=4.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use AVCapturePhotoOutput's -supportedFlashModes instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use AVCapturePhotoOutput's -supportedFlashModes instead.")]
	//	[Export ("isFlashModeSupported:")]
	//	bool IsFlashModeSupported (AVCaptureFlashMode flashMode);

	//	// @property (nonatomic) AVCaptureFlashMode flashMode __attribute__((availability(ios, introduced=4.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use AVCapturePhotoSettings.flashMode instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use AVCapturePhotoSettings.flashMode instead.")]
	//	[Export ("flashMode", ArgumentSemantic.Assign)]
	//	AVCaptureFlashMode FlashMode { get; set; }
	//}

	//// @interface AVCaptureDeviceTorch (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceTorch
	//{
	//	// @property (readonly, nonatomic) BOOL hasTorch;
	//	[Export ("hasTorch")]
	//	bool HasTorch { get; }

	//	// @property (readonly, getter = isTorchAvailable, nonatomic) BOOL torchAvailable __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoMac, iOS (5, 0)]
	//	[Export ("torchAvailable")]
	//	bool TorchAvailable { [Bind ("isTorchAvailable")] get; }

	//	// @property (readonly, getter = isTorchActive, nonatomic) BOOL torchActive __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoMac, iOS (6, 0)]
	//	[Export ("torchActive")]
	//	bool TorchActive { [Bind ("isTorchActive")] get; }

	//	// @property (readonly, nonatomic) float torchLevel __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoMac, iOS (5, 0)]
	//	[Export ("torchLevel")]
	//	float TorchLevel { get; }

	//	// -(BOOL)isTorchModeSupported:(AVCaptureTorchMode)torchMode;
	//	[Export ("isTorchModeSupported:")]
	//	bool IsTorchModeSupported (AVCaptureTorchMode torchMode);

	//	// @property (nonatomic) AVCaptureTorchMode torchMode;
	//	[Export ("torchMode", ArgumentSemantic.Assign)]
	//	AVCaptureTorchMode TorchMode { get; set; }

	//	// -(BOOL)setTorchModeOnWithLevel:(float)torchLevel error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoMac, iOS (6,0)]
	//	[Export ("setTorchModeOnWithLevel:error:")]
	//	bool SetTorchModeOnWithLevel (float torchLevel, [NullAllowed] out NSError outError);
	//}

	//// @interface AVCaptureDeviceFocus (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceFocus
	//{
	//	// -(BOOL)isFocusModeSupported:(AVCaptureFocusMode)focusMode;
	//	[Export ("isFocusModeSupported:")]
	//	bool IsFocusModeSupported (AVCaptureFocusMode focusMode);

	//	// @property (readonly, getter = isLockingFocusWithCustomLensPositionSupported, nonatomic) BOOL lockingFocusWithCustomLensPositionSupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoMac, iOS (10, 0)]
	//	[Export ("lockingFocusWithCustomLensPositionSupported")]
	//	bool LockingFocusWithCustomLensPositionSupported { [Bind ("isLockingFocusWithCustomLensPositionSupported")] get; }

	//	// @property (nonatomic) AVCaptureFocusMode focusMode;
	//	[Export ("focusMode", ArgumentSemantic.Assign)]
	//	AVCaptureFocusMode FocusMode { get; set; }

	//	// @property (readonly, getter = isFocusPointOfInterestSupported, nonatomic) BOOL focusPointOfInterestSupported;
	//	[Export ("focusPointOfInterestSupported")]
	//	bool FocusPointOfInterestSupported { [Bind ("isFocusPointOfInterestSupported")] get; }

	//	// @property (nonatomic) CGPoint focusPointOfInterest;
	//	[Export ("focusPointOfInterest", ArgumentSemantic.Assign)]
	//	CGPoint FocusPointOfInterest { get; set; }

	//	// @property (readonly, getter = isAdjustingFocus, nonatomic) BOOL adjustingFocus;
	//	[Export ("adjustingFocus")]
	//	bool AdjustingFocus { [Bind ("isAdjustingFocus")] get; }

	//	// @property (readonly, getter = isAutoFocusRangeRestrictionSupported, nonatomic) BOOL autoFocusRangeRestrictionSupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7, 0)]
	//	[Export ("autoFocusRangeRestrictionSupported")]
	//	bool AutoFocusRangeRestrictionSupported { [Bind ("isAutoFocusRangeRestrictionSupported")] get; }

	//	// @property (nonatomic) AVCaptureAutoFocusRangeRestriction autoFocusRangeRestriction __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7, 0)]
	//	[Export ("autoFocusRangeRestriction", ArgumentSemantic.Assign)]
	//	AVCaptureAutoFocusRangeRestriction AutoFocusRangeRestriction { get; set; }

	//	// @property (readonly, getter = isSmoothAutoFocusSupported, nonatomic) BOOL smoothAutoFocusSupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7, 0)]
	//	[Export ("smoothAutoFocusSupported")]
	//	bool SmoothAutoFocusSupported { [Bind ("isSmoothAutoFocusSupported")] get; }

	//	// @property (getter = isSmoothAutoFocusEnabled, nonatomic) BOOL smoothAutoFocusEnabled __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7, 0)]
	//	[Export ("smoothAutoFocusEnabled")]
	//	bool SmoothAutoFocusEnabled { [Bind ("isSmoothAutoFocusEnabled")] get; set; }

	//	// @property (readonly, nonatomic) float lensPosition __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("lensPosition")]
	//	float LensPosition { get; }

	//	// -(void)setFocusModeLockedWithLensPosition:(float)lensPosition completionHandler:(void (^ _Nullable)(CMTime))handler __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8,0)]
	//	[Export ("setFocusModeLockedWithLensPosition:completionHandler:")]
	//	void SetFocusModeLockedWithLensPosition (float lensPosition, [NullAllowed] Action<CMTime> handler);
	//}

	//// @interface AVCaptureDeviceExposure (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceExposure
	//{
	//	// -(BOOL)isExposureModeSupported:(AVCaptureExposureMode)exposureMode;
	//	[Export ("isExposureModeSupported:")]
	//	bool IsExposureModeSupported (AVCaptureExposureMode exposureMode);

	//	// @property (nonatomic) AVCaptureExposureMode exposureMode;
	//	[Export ("exposureMode", ArgumentSemantic.Assign)]
	//	AVCaptureExposureMode ExposureMode { get; set; }

	//	// @property (readonly, getter = isExposurePointOfInterestSupported, nonatomic) BOOL exposurePointOfInterestSupported;
	//	[Export ("exposurePointOfInterestSupported")]
	//	bool ExposurePointOfInterestSupported { [Bind ("isExposurePointOfInterestSupported")] get; }

	//	// @property (nonatomic) CGPoint exposurePointOfInterest;
	//	[Export ("exposurePointOfInterest", ArgumentSemantic.Assign)]
	//	CGPoint ExposurePointOfInterest { get; set; }

	//	// @property (nonatomic) CMTime activeMaxExposureDuration __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("activeMaxExposureDuration", ArgumentSemantic.Assign)]
	//	CMTime ActiveMaxExposureDuration { get; set; }

	//	// @property (readonly, getter = isAdjustingExposure, nonatomic) BOOL adjustingExposure;
	//	[Export ("adjustingExposure")]
	//	bool AdjustingExposure { [Bind ("isAdjustingExposure")] get; }

	//	// @property (readonly, nonatomic) float lensAperture __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("lensAperture")]
	//	float LensAperture { get; }

	//	// @property (readonly, nonatomic) CMTime exposureDuration __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("exposureDuration")]
	//	CMTime ExposureDuration { get; }

	//	// @property (readonly, nonatomic) float ISO __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("ISO")]
	//	float ISO { get; }

	//	// -(void)setExposureModeCustomWithDuration:(CMTime)duration ISO:(float)ISO completionHandler:(void (^ _Nullable)(CMTime))handler __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8,0)]
	//	[Export ("setExposureModeCustomWithDuration:ISO:completionHandler:")]
	//	void SetExposureModeCustomWithDuration (CMTime duration, float ISO, [NullAllowed] Action<CMTime> handler);

	//	// @property (readonly, nonatomic) float exposureTargetOffset __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("exposureTargetOffset")]
	//	float ExposureTargetOffset { get; }

	//	// @property (readonly, nonatomic) float exposureTargetBias __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("exposureTargetBias")]
	//	float ExposureTargetBias { get; }

	//	// @property (readonly, nonatomic) float minExposureTargetBias __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("minExposureTargetBias")]
	//	float MinExposureTargetBias { get; }

	//	// @property (readonly, nonatomic) float maxExposureTargetBias __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("maxExposureTargetBias")]
	//	float MaxExposureTargetBias { get; }

	//	// -(void)setExposureTargetBias:(float)bias completionHandler:(void (^ _Nullable)(CMTime))handler __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8,0)]
	//	[Export ("setExposureTargetBias:completionHandler:")]
	//	void SetExposureTargetBias (float bias, [NullAllowed] Action<CMTime> handler);
	//}

	//// @interface AVCaptureDeviceWhiteBalance (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceWhiteBalance
	//{
	//	// -(BOOL)isWhiteBalanceModeSupported:(AVCaptureWhiteBalanceMode)whiteBalanceMode;
	//	[Export ("isWhiteBalanceModeSupported:")]
	//	bool IsWhiteBalanceModeSupported (AVCaptureWhiteBalanceMode whiteBalanceMode);

	//	// @property (readonly, getter = isLockingWhiteBalanceWithCustomDeviceGainsSupported, nonatomic) BOOL lockingWhiteBalanceWithCustomDeviceGainsSupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoMac, iOS (10, 0)]
	//	[Export ("lockingWhiteBalanceWithCustomDeviceGainsSupported")]
	//	bool LockingWhiteBalanceWithCustomDeviceGainsSupported { [Bind ("isLockingWhiteBalanceWithCustomDeviceGainsSupported")] get; }

	//	// @property (nonatomic) AVCaptureWhiteBalanceMode whiteBalanceMode;
	//	[Export ("whiteBalanceMode", ArgumentSemantic.Assign)]
	//	AVCaptureWhiteBalanceMode WhiteBalanceMode { get; set; }

	//	// @property (readonly, getter = isAdjustingWhiteBalance, nonatomic) BOOL adjustingWhiteBalance;
	//	[Export ("adjustingWhiteBalance")]
	//	bool AdjustingWhiteBalance { [Bind ("isAdjustingWhiteBalance")] get; }

	//	// @property (readonly, nonatomic) AVCaptureWhiteBalanceGains deviceWhiteBalanceGains __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("deviceWhiteBalanceGains")]
	//	AVCaptureWhiteBalanceGains DeviceWhiteBalanceGains { get; }

	//	// @property (readonly, nonatomic) AVCaptureWhiteBalanceGains grayWorldDeviceWhiteBalanceGains __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("grayWorldDeviceWhiteBalanceGains")]
	//	AVCaptureWhiteBalanceGains GrayWorldDeviceWhiteBalanceGains { get; }

	//	// @property (readonly, nonatomic) float maxWhiteBalanceGain __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("maxWhiteBalanceGain")]
	//	float MaxWhiteBalanceGain { get; }

	//	// -(void)setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains:(AVCaptureWhiteBalanceGains)whiteBalanceGains completionHandler:(void (^ _Nullable)(CMTime))handler __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8,0)]
	//	[Export ("setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains:completionHandler:")]
	//	void SetWhiteBalanceModeLockedWithDeviceWhiteBalanceGains (AVCaptureWhiteBalanceGains whiteBalanceGains, [NullAllowed] Action<CMTime> handler);

	//	// -(AVCaptureWhiteBalanceChromaticityValues)chromaticityValuesForDeviceWhiteBalanceGains:(AVCaptureWhiteBalanceGains)whiteBalanceGains __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8,0)]
	//	[Export ("chromaticityValuesForDeviceWhiteBalanceGains:")]
	//	AVCaptureWhiteBalanceChromaticityValues ChromaticityValuesForDeviceWhiteBalanceGains (AVCaptureWhiteBalanceGains whiteBalanceGains);

	//	// -(AVCaptureWhiteBalanceGains)deviceWhiteBalanceGainsForChromaticityValues:(AVCaptureWhiteBalanceChromaticityValues)chromaticityValues __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8,0)]
	//	[Export ("deviceWhiteBalanceGainsForChromaticityValues:")]
	//	AVCaptureWhiteBalanceGains DeviceWhiteBalanceGainsForChromaticityValues (AVCaptureWhiteBalanceChromaticityValues chromaticityValues);

	//	// -(AVCaptureWhiteBalanceTemperatureAndTintValues)temperatureAndTintValuesForDeviceWhiteBalanceGains:(AVCaptureWhiteBalanceGains)whiteBalanceGains __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8,0)]
	//	[Export ("temperatureAndTintValuesForDeviceWhiteBalanceGains:")]
	//	AVCaptureWhiteBalanceTemperatureAndTintValues TemperatureAndTintValuesForDeviceWhiteBalanceGains (AVCaptureWhiteBalanceGains whiteBalanceGains);

	//	// -(AVCaptureWhiteBalanceGains)deviceWhiteBalanceGainsForTemperatureAndTintValues:(AVCaptureWhiteBalanceTemperatureAndTintValues)tempAndTintValues __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8,0)]
	//	[Export ("deviceWhiteBalanceGainsForTemperatureAndTintValues:")]
	//	AVCaptureWhiteBalanceGains DeviceWhiteBalanceGainsForTemperatureAndTintValues (AVCaptureWhiteBalanceTemperatureAndTintValues tempAndTintValues);
	//}

	//// @interface AVCaptureDeviceSubjectAreaChangeMonitoring (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceSubjectAreaChangeMonitoring
	//{
	//	// @property (getter = isSubjectAreaChangeMonitoringEnabled, nonatomic) BOOL subjectAreaChangeMonitoringEnabled __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoMac, iOS (5, 0)]
	//	[Export ("subjectAreaChangeMonitoringEnabled")]
	//	bool SubjectAreaChangeMonitoringEnabled { [Bind ("isSubjectAreaChangeMonitoringEnabled")] get; set; }
	//}

	//// @interface AVCaptureDeviceLowLightBoost (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceLowLightBoost
	//{
	//	// @property (readonly, getter = isLowLightBoostSupported, nonatomic) BOOL lowLightBoostSupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoMac, iOS (6, 0)]
	//	[Export ("lowLightBoostSupported")]
	//	bool LowLightBoostSupported { [Bind ("isLowLightBoostSupported")] get; }

	//	// @property (readonly, getter = isLowLightBoostEnabled, nonatomic) BOOL lowLightBoostEnabled __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoMac, iOS (6, 0)]
	//	[Export ("lowLightBoostEnabled")]
	//	bool LowLightBoostEnabled { [Bind ("isLowLightBoostEnabled")] get; }

	//	// @property (nonatomic) BOOL automaticallyEnablesLowLightBoostWhenAvailable __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoMac, iOS (6, 0)]
	//	[Export ("automaticallyEnablesLowLightBoostWhenAvailable")]
	//	bool AutomaticallyEnablesLowLightBoostWhenAvailable { get; set; }
	//}

	//// @interface AVCaptureDeviceVideoZoom (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceVideoZoom
	//{
	//	// @property (nonatomic) CGFloat videoZoomFactor __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7, 0)]
	//	[Export ("videoZoomFactor")]
	//	nfloat VideoZoomFactor { get; set; }

	//	// -(void)rampToVideoZoomFactor:(CGFloat)factor withRate:(float)rate __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7,0)]
	//	[Export ("rampToVideoZoomFactor:withRate:")]
	//	void RampToVideoZoomFactor (nfloat factor, float rate);

	//	// @property (readonly, getter = isRampingVideoZoom, nonatomic) BOOL rampingVideoZoom __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7, 0)]
	//	[Export ("rampingVideoZoom")]
	//	bool RampingVideoZoom { [Bind ("isRampingVideoZoom")] get; }

	//	// -(void)cancelVideoZoomRamp __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7,0)]
	//	[Export ("cancelVideoZoomRamp")]
	//	void CancelVideoZoomRamp ();

	//	// @property (readonly, atomic) CGFloat dualCameraSwitchOverVideoZoomFactor __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("dualCameraSwitchOverVideoZoomFactor")]
	//	nfloat DualCameraSwitchOverVideoZoomFactor { get; }
	//}

	//// @interface AVCaptureDeviceAuthorization (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceAuthorization
	//{
	//	// +(AVAuthorizationStatus)authorizationStatusForMediaType:(AVMediaType _Nonnull)mediaType __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (7,0)]
	//	[Static]
	//	[Export ("authorizationStatusForMediaType:")]
	//	AVAuthorizationStatus AuthorizationStatusForMediaType (string mediaType);

	//	// +(void)requestAccessForMediaType:(AVMediaType _Nonnull)mediaType completionHandler:(void (^ _Nonnull)(BOOL))handler __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Mac (10,14), iOS (7,0)]
	//	[Static]
	//	[Export ("requestAccessForMediaType:completionHandler:")]
	//	void RequestAccessForMediaType (string mediaType, Action<bool> handler);
	//}

	//// @interface AVCaptureDeviceTransportControls (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceTransportControls
	//{
	//	// @property (readonly, nonatomic) BOOL transportControlsSupported __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("transportControlsSupported")]
	//	bool TransportControlsSupported { get; }

	//	// @property (readonly, nonatomic) AVCaptureDeviceTransportControlsPlaybackMode transportControlsPlaybackMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("transportControlsPlaybackMode")]
	//	AVCaptureDeviceTransportControlsPlaybackMode TransportControlsPlaybackMode { get; }

	//	// @property (readonly, nonatomic) AVCaptureDeviceTransportControlsSpeed transportControlsSpeed __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("transportControlsSpeed")]
	//	float TransportControlsSpeed { get; }

	//	// -(void)setTransportControlsPlaybackMode:(AVCaptureDeviceTransportControlsPlaybackMode)mode speed:(AVCaptureDeviceTransportControlsSpeed)speed __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("setTransportControlsPlaybackMode:speed:")]
	//	void SetTransportControlsPlaybackMode (AVCaptureDeviceTransportControlsPlaybackMode mode, float speed);
	//}

	//// @interface AVCaptureDeviceHighDynamicRangeSupport (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceHighDynamicRangeSupport
	//{
	//	// @property (nonatomic) BOOL automaticallyAdjustsVideoHDREnabled __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("automaticallyAdjustsVideoHDREnabled")]
	//	bool AutomaticallyAdjustsVideoHDREnabled { get; set; }

	//	// @property (getter = isVideoHDREnabled, nonatomic) BOOL videoHDREnabled __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("videoHDREnabled")]
	//	bool VideoHDREnabled { [Bind ("isVideoHDREnabled")] get; set; }
	//}

	//// @interface AVCaptureDeviceColorSpaceSupport (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceColorSpaceSupport
	//{
	//	// @property (nonatomic) AVCaptureColorSpace activeColorSpace __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoMac, iOS (10, 0)]
	//	[Export ("activeColorSpace", ArgumentSemantic.Assign)]
	//	AVCaptureColorSpace ActiveColorSpace { get; set; }
	//}

	//// @interface AVCaptureDeviceDepthSupport (AVCaptureDevice)
	//[Category]
	//[BaseType (typeof(AVCaptureDevice))]
	//interface AVCaptureDevice_AVCaptureDeviceDepthSupport
	//{
	//	// @property (retain, nonatomic) AVCaptureDeviceFormat * _Nullable activeDepthDataFormat __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[NullAllowed, Export ("activeDepthDataFormat", ArgumentSemantic.Retain)]
	//	AVCaptureDeviceFormat ActiveDepthDataFormat { get; set; }

	//	// @property (nonatomic) CMTime activeDepthDataMinFrameDuration __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoMac, iOS (12, 0)]
	//	[Export ("activeDepthDataMinFrameDuration", ArgumentSemantic.Assign)]
	//	CMTime ActiveDepthDataMinFrameDuration { get; set; }

	//	// @property (readonly, nonatomic) CGFloat minAvailableVideoZoomFactor __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("minAvailableVideoZoomFactor")]
	//	nfloat MinAvailableVideoZoomFactor { get; }

	//	// @property (readonly, nonatomic) CGFloat maxAvailableVideoZoomFactor __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("maxAvailableVideoZoomFactor")]
	//	nfloat MaxAvailableVideoZoomFactor { get; }
	//}

	//// @interface AVCaptureDeviceDiscoverySession : NSObject
	//[NoWatch, NoTV, NoMac, iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureDeviceDiscoverySession
	//{
	//	// +(instancetype _Nonnull)discoverySessionWithDeviceTypes:(NSArray<AVCaptureDeviceType> * _Nonnull)deviceTypes mediaType:(AVMediaType _Nullable)mediaType position:(AVCaptureDevicePosition)position;
	//	[Static]
	//	[Export ("discoverySessionWithDeviceTypes:mediaType:position:")]
	//	AVCaptureDeviceDiscoverySession DiscoverySessionWithDeviceTypes (string[] deviceTypes, [NullAllowed] string mediaType, AVCaptureDevicePosition position);

	//	// @property (readonly, nonatomic) NSArray<AVCaptureDevice *> * _Nonnull devices;
	//	[Export ("devices")]
	//	AVCaptureDevice[] Devices { get; }
	//}

	//// @interface AVFrameRateRange : NSObject
	//[NoWatch, NoTV, Mac (10,7), iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVFrameRateRange
	//{
	//	// @property (readonly) Float64 minFrameRate;
	//	[Export ("minFrameRate")]
	//	double MinFrameRate { get; }

	//	// @property (readonly) Float64 maxFrameRate;
	//	[Export ("maxFrameRate")]
	//	double MaxFrameRate { get; }

	//	// @property (readonly) CMTime maxFrameDuration;
	//	[Export ("maxFrameDuration")]
	//	CMTime MaxFrameDuration { get; }

	//	// @property (readonly) CMTime minFrameDuration;
	//	[Export ("minFrameDuration")]
	//	CMTime MinFrameDuration { get; }
	//}

	//// @interface AVCaptureDeviceFormat : NSObject
	//[NoWatch, NoTV, Mac (10,7), iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureDeviceFormat
	//{
	//	// @property (readonly, nonatomic) AVMediaType _Nonnull mediaType;
	//	[Export ("mediaType")]
	//	string MediaType { get; }

	//	// @property (readonly, nonatomic) CMFormatDescriptionRef _Nonnull formatDescription;
	//	[Export ("formatDescription")]
	//	unsafe CMFormatDescriptionRef* FormatDescription { get; }

	//	// @property (readonly, nonatomic) NSArray<AVFrameRateRange *> * _Nonnull videoSupportedFrameRateRanges;
	//	[Export ("videoSupportedFrameRateRanges")]
	//	AVFrameRateRange[] VideoSupportedFrameRateRanges { get; }

	//	// @property (readonly, nonatomic) float videoFieldOfView __attribute__((availability(macos, unavailable)));
	//	[NoMac]
	//	[Export ("videoFieldOfView")]
	//	float VideoFieldOfView { get; }

	//	// @property (readonly, getter = isVideoBinned, nonatomic) BOOL videoBinned __attribute__((availability(macos, unavailable)));
	//	[NoMac]
	//	[Export ("videoBinned")]
	//	bool VideoBinned { [Bind ("isVideoBinned")] get; }

	//	// -(BOOL)isVideoStabilizationModeSupported:(AVCaptureVideoStabilizationMode)videoStabilizationMode __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8,0)]
	//	[Export ("isVideoStabilizationModeSupported:")]
	//	bool IsVideoStabilizationModeSupported (AVCaptureVideoStabilizationMode videoStabilizationMode);

	//	// @property (readonly, getter = isVideoStabilizationSupported, nonatomic) BOOL videoStabilizationSupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 7, 0, message: "Use isVideoStabilizationModeSupported: instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use isVideoStabilizationModeSupported: instead.")]
	//	[NoMac]
	//	[Export ("videoStabilizationSupported")]
	//	bool VideoStabilizationSupported { [Bind ("isVideoStabilizationSupported")] get; }

	//	// @property (readonly, nonatomic) CGFloat videoMaxZoomFactor __attribute__((availability(macos, unavailable)));
	//	[NoMac]
	//	[Export ("videoMaxZoomFactor")]
	//	nfloat VideoMaxZoomFactor { get; }

	//	// @property (readonly, nonatomic) CGFloat videoZoomFactorUpscaleThreshold __attribute__((availability(macos, unavailable)));
	//	[NoMac]
	//	[Export ("videoZoomFactorUpscaleThreshold")]
	//	nfloat VideoZoomFactorUpscaleThreshold { get; }

	//	// @property (readonly, nonatomic) CMTime minExposureDuration __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("minExposureDuration")]
	//	CMTime MinExposureDuration { get; }

	//	// @property (readonly, nonatomic) CMTime maxExposureDuration __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("maxExposureDuration")]
	//	CMTime MaxExposureDuration { get; }

	//	// @property (readonly, nonatomic) float minISO __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("minISO")]
	//	float MinISO { get; }

	//	// @property (readonly, nonatomic) float maxISO __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("maxISO")]
	//	float MaxISO { get; }

	//	// @property (readonly, getter = isVideoHDRSupported, nonatomic) BOOL videoHDRSupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("videoHDRSupported")]
	//	bool VideoHDRSupported { [Bind ("isVideoHDRSupported")] get; }

	//	// @property (readonly, nonatomic) CMVideoDimensions highResolutionStillImageDimensions __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("highResolutionStillImageDimensions")]
	//	CMVideoDimensions HighResolutionStillImageDimensions { get; }

	//	// @property (readonly, nonatomic) AVCaptureAutoFocusSystem autoFocusSystem __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("autoFocusSystem")]
	//	AVCaptureAutoFocusSystem AutoFocusSystem { get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull supportedColorSpaces __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoMac, iOS (10, 0)]
	//	[Export ("supportedColorSpaces")]
	//	NSNumber[] SupportedColorSpaces { get; }

	//	// @property (readonly, nonatomic) CGFloat videoMinZoomFactorForDepthDataDelivery __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("videoMinZoomFactorForDepthDataDelivery")]
	//	nfloat VideoMinZoomFactorForDepthDataDelivery { get; }

	//	// @property (readonly, nonatomic) CGFloat videoMaxZoomFactorForDepthDataDelivery __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("videoMaxZoomFactorForDepthDataDelivery")]
	//	nfloat VideoMaxZoomFactorForDepthDataDelivery { get; }

	//	// @property (readonly, nonatomic) NSArray<AVCaptureDeviceFormat *> * _Nonnull supportedDepthDataFormats __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("supportedDepthDataFormats")]
	//	AVCaptureDeviceFormat[] SupportedDepthDataFormats { get; }

	//	// @property (readonly, nonatomic) NSArray<Class> * _Nonnull unsupportedCaptureOutputClasses __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("unsupportedCaptureOutputClasses")]
	//	Class[] UnsupportedCaptureOutputClasses { get; }
	//}

	//// @interface AVCaptureDeviceFormatDepthDataAdditions (AVCaptureDeviceFormat)
	//[Category]
	//[BaseType (typeof(AVCaptureDeviceFormat))]
	//interface AVCaptureDeviceFormat_AVCaptureDeviceFormatDepthDataAdditions
	//{
	//	// @property (readonly, getter = isPortraitEffectsMatteStillImageDeliverySupported, nonatomic) BOOL portraitEffectsMatteStillImageDeliverySupported __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("portraitEffectsMatteStillImageDeliverySupported")]
	//	bool PortraitEffectsMatteStillImageDeliverySupported { [Bind ("isPortraitEffectsMatteStillImageDeliverySupported")] get; }
	//}

	//// @interface AVCaptureDeviceInputSource : NSObject
	//[NoWatch, NoTV, NoiOS, Mac (10,7)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureDeviceInputSource
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull inputSourceID;
	//	[Export ("inputSourceID")]
	//	string InputSourceID { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull localizedName;
	//	[Export ("localizedName")]
	//	string LocalizedName { get; }
	//}

	//// @interface AVCaptureSession : NSObject
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVCaptureSession
	//{
	//	// -(BOOL)canSetSessionPreset:(AVCaptureSessionPreset _Nonnull)preset;
	//	[Export ("canSetSessionPreset:")]
	//	bool CanSetSessionPreset (string preset);

	//	// @property (copy, nonatomic) AVCaptureSessionPreset _Nonnull sessionPreset;
	//	[Export ("sessionPreset")]
	//	string SessionPreset { get; set; }

	//	// @property (readonly, nonatomic) NSArray<__kindof AVCaptureInput *> * _Nonnull inputs;
	//	[Export ("inputs")]
	//	AVCaptureInput[] Inputs { get; }

	//	// -(BOOL)canAddInput:(AVCaptureInput * _Nonnull)input;
	//	[Export ("canAddInput:")]
	//	bool CanAddInput (AVCaptureInput input);

	//	// -(void)addInput:(AVCaptureInput * _Nonnull)input;
	//	[Export ("addInput:")]
	//	void AddInput (AVCaptureInput input);

	//	// -(void)removeInput:(AVCaptureInput * _Nonnull)input;
	//	[Export ("removeInput:")]
	//	void RemoveInput (AVCaptureInput input);

	//	// @property (readonly, nonatomic) NSArray<__kindof AVCaptureOutput *> * _Nonnull outputs;
	//	[Export ("outputs")]
	//	AVCaptureOutput[] Outputs { get; }

	//	// -(BOOL)canAddOutput:(AVCaptureOutput * _Nonnull)output;
	//	[Export ("canAddOutput:")]
	//	bool CanAddOutput (AVCaptureOutput output);

	//	// -(void)addOutput:(AVCaptureOutput * _Nonnull)output;
	//	[Export ("addOutput:")]
	//	void AddOutput (AVCaptureOutput output);

	//	// -(void)removeOutput:(AVCaptureOutput * _Nonnull)output;
	//	[Export ("removeOutput:")]
	//	void RemoveOutput (AVCaptureOutput output);

	//	// -(void)addInputWithNoConnections:(AVCaptureInput * _Nonnull)input __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("addInputWithNoConnections:")]
	//	void AddInputWithNoConnections (AVCaptureInput input);

	//	// -(void)addOutputWithNoConnections:(AVCaptureOutput * _Nonnull)output __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("addOutputWithNoConnections:")]
	//	void AddOutputWithNoConnections (AVCaptureOutput output);

	//	// -(BOOL)canAddConnection:(AVCaptureConnection * _Nonnull)connection __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("canAddConnection:")]
	//	bool CanAddConnection (AVCaptureConnection connection);

	//	// -(void)addConnection:(AVCaptureConnection * _Nonnull)connection __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("addConnection:")]
	//	void AddConnection (AVCaptureConnection connection);

	//	// -(void)removeConnection:(AVCaptureConnection * _Nonnull)connection __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("removeConnection:")]
	//	void RemoveConnection (AVCaptureConnection connection);

	//	// -(void)beginConfiguration;
	//	[Export ("beginConfiguration")]
	//	void BeginConfiguration ();

	//	// -(void)commitConfiguration;
	//	[Export ("commitConfiguration")]
	//	void CommitConfiguration ();

	//	// @property (readonly, getter = isRunning, nonatomic) BOOL running;
	//	[Export ("running")]
	//	bool Running { [Bind ("isRunning")] get; }

	//	// @property (readonly, getter = isInterrupted, nonatomic) BOOL interrupted __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoMac, iOS (4, 0)]
	//	[Export ("interrupted")]
	//	bool Interrupted { [Bind ("isInterrupted")] get; }

	//	// @property (nonatomic) BOOL usesApplicationAudioSession __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7, 0)]
	//	[Export ("usesApplicationAudioSession")]
	//	bool UsesApplicationAudioSession { get; set; }

	//	// @property (nonatomic) BOOL automaticallyConfiguresApplicationAudioSession __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7, 0)]
	//	[Export ("automaticallyConfiguresApplicationAudioSession")]
	//	bool AutomaticallyConfiguresApplicationAudioSession { get; set; }

	//	// @property (nonatomic) BOOL automaticallyConfiguresCaptureDeviceForWideColor __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoMac, iOS (10, 0)]
	//	[Export ("automaticallyConfiguresCaptureDeviceForWideColor")]
	//	bool AutomaticallyConfiguresCaptureDeviceForWideColor { get; set; }

	//	// -(void)startRunning;
	//	[Export ("startRunning")]
	//	void StartRunning ();

	//	// -(void)stopRunning;
	//	[Export ("stopRunning")]
	//	void StopRunning ();

	//	// @property (readonly, nonatomic) CMClockRef _Nullable masterClock __attribute__((NSObject)) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Mac (10, 9), iOS (7, 0)]
	//	[NullAllowed, Export ("masterClock")]
	//	unsafe CMClockRef* MasterClock { get; }
	//}

	//// @interface AVCaptureConnection : NSObject
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVCaptureConnection
	//{
	//	// +(instancetype _Nonnull)connectionWithInputPorts:(NSArray<AVCaptureInputPort *> * _Nonnull)ports output:(AVCaptureOutput * _Nonnull)output __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static]
	//	[Export ("connectionWithInputPorts:output:")]
	//	AVCaptureConnection ConnectionWithInputPorts (AVCaptureInputPort[] ports, AVCaptureOutput output);

	//	// +(instancetype _Nonnull)connectionWithInputPort:(AVCaptureInputPort * _Nonnull)port videoPreviewLayer:(AVCaptureVideoPreviewLayer * _Nonnull)layer __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static]
	//	[Export ("connectionWithInputPort:videoPreviewLayer:")]
	//	AVCaptureConnection ConnectionWithInputPort (AVCaptureInputPort port, AVCaptureVideoPreviewLayer layer);

	//	// -(instancetype _Nonnull)initWithInputPorts:(NSArray<AVCaptureInputPort *> * _Nonnull)ports output:(AVCaptureOutput * _Nonnull)output __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("initWithInputPorts:output:")]
	//	IntPtr Constructor (AVCaptureInputPort[] ports, AVCaptureOutput output);

	//	// -(instancetype _Nonnull)initWithInputPort:(AVCaptureInputPort * _Nonnull)port videoPreviewLayer:(AVCaptureVideoPreviewLayer * _Nonnull)layer __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("initWithInputPort:videoPreviewLayer:")]
	//	IntPtr Constructor (AVCaptureInputPort port, AVCaptureVideoPreviewLayer layer);

	//	// @property (readonly, nonatomic) NSArray<AVCaptureInputPort *> * _Nonnull inputPorts;
	//	[Export ("inputPorts")]
	//	AVCaptureInputPort[] InputPorts { get; }

	//	// @property (readonly, nonatomic) AVCaptureOutput * _Nonnull output;
	//	[Export ("output")]
	//	AVCaptureOutput Output { get; }

	//	// @property (readonly, nonatomic) AVCaptureVideoPreviewLayer * _Nonnull videoPreviewLayer __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("videoPreviewLayer")]
	//	AVCaptureVideoPreviewLayer VideoPreviewLayer { get; }

	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (readonly, getter = isActive, nonatomic) BOOL active;
	//	[Export ("active")]
	//	bool Active { [Bind ("isActive")] get; }

	//	// @property (readonly, nonatomic) NSArray<AVCaptureAudioChannel *> * _Nonnull audioChannels;
	//	[Export ("audioChannels")]
	//	AVCaptureAudioChannel[] AudioChannels { get; }

	//	// @property (readonly, getter = isVideoMirroringSupported, nonatomic) BOOL supportsVideoMirroring;
	//	[Export ("supportsVideoMirroring")]
	//	bool SupportsVideoMirroring { [Bind ("isVideoMirroringSupported")] get; }

	//	// @property (getter = isVideoMirrored, nonatomic) BOOL videoMirrored;
	//	[Export ("videoMirrored")]
	//	bool VideoMirrored { [Bind ("isVideoMirrored")] get; set; }

	//	// @property (nonatomic) BOOL automaticallyAdjustsVideoMirroring __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("automaticallyAdjustsVideoMirroring")]
	//	bool AutomaticallyAdjustsVideoMirroring { get; set; }

	//	// @property (readonly, getter = isVideoOrientationSupported, nonatomic) BOOL supportsVideoOrientation;
	//	[Export ("supportsVideoOrientation")]
	//	bool SupportsVideoOrientation { [Bind ("isVideoOrientationSupported")] get; }

	//	// @property (nonatomic) AVCaptureVideoOrientation videoOrientation;
	//	[Export ("videoOrientation", ArgumentSemantic.Assign)]
	//	AVCaptureVideoOrientation VideoOrientation { get; set; }

	//	// @property (readonly, getter = isVideoFieldModeSupported, nonatomic) BOOL supportsVideoFieldMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("supportsVideoFieldMode")]
	//	bool SupportsVideoFieldMode { [Bind ("isVideoFieldModeSupported")] get; }

	//	// @property (nonatomic) AVVideoFieldMode videoFieldMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("videoFieldMode", ArgumentSemantic.Assign)]
	//	AVVideoFieldMode VideoFieldMode { get; set; }

	//	// @property (readonly, getter = isVideoMinFrameDurationSupported, nonatomic) BOOL supportsVideoMinFrameDuration __attribute__((availability(ios, introduced=5.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use AVCaptureDevice's activeFormat.videoSupportedFrameRateRanges instead.")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use AVCaptureDevice's activeFormat.videoSupportedFrameRateRanges instead.")]
	//	[Export ("supportsVideoMinFrameDuration")]
	//	bool SupportsVideoMinFrameDuration { [Bind ("isVideoMinFrameDurationSupported")] get; }

	//	// @property (nonatomic) CMTime videoMinFrameDuration __attribute__((availability(ios, introduced=5.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use AVCaptureDevice's activeVideoMinFrameDuration instead.")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use AVCaptureDevice's activeVideoMinFrameDuration instead.")]
	//	[Export ("videoMinFrameDuration", ArgumentSemantic.Assign)]
	//	CMTime VideoMinFrameDuration { get; set; }

	//	// @property (readonly, getter = isVideoMaxFrameDurationSupported, nonatomic) BOOL supportsVideoMaxFrameDuration __attribute__((availability(ios, introduced=5.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use AVCaptureDevice's activeFormat.videoSupportedFrameRateRanges instead.")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use AVCaptureDevice's activeFormat.videoSupportedFrameRateRanges instead.")]
	//	[Mac (10, 9)]
	//	[Export ("supportsVideoMaxFrameDuration")]
	//	bool SupportsVideoMaxFrameDuration { [Bind ("isVideoMaxFrameDurationSupported")] get; }

	//	// @property (nonatomic) CMTime videoMaxFrameDuration __attribute__((availability(ios, introduced=5.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use AVCaptureDevice's activeVideoMaxFrameDuration instead.")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use AVCaptureDevice's activeVideoMaxFrameDuration instead.")]
	//	[Mac (10, 9)]
	//	[Export ("videoMaxFrameDuration", ArgumentSemantic.Assign)]
	//	CMTime VideoMaxFrameDuration { get; set; }

	//	// @property (readonly, nonatomic) CGFloat videoMaxScaleAndCropFactor __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoMac, iOS (5, 0)]
	//	[Export ("videoMaxScaleAndCropFactor")]
	//	nfloat VideoMaxScaleAndCropFactor { get; }

	//	// @property (nonatomic) CGFloat videoScaleAndCropFactor __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoMac, iOS (5, 0)]
	//	[Export ("videoScaleAndCropFactor")]
	//	nfloat VideoScaleAndCropFactor { get; set; }

	//	// @property (nonatomic) AVCaptureVideoStabilizationMode preferredVideoStabilizationMode __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("preferredVideoStabilizationMode", ArgumentSemantic.Assign)]
	//	AVCaptureVideoStabilizationMode PreferredVideoStabilizationMode { get; set; }

	//	// @property (readonly, nonatomic) AVCaptureVideoStabilizationMode activeVideoStabilizationMode __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("activeVideoStabilizationMode")]
	//	AVCaptureVideoStabilizationMode ActiveVideoStabilizationMode { get; }

	//	// @property (readonly, getter = isVideoStabilizationSupported, nonatomic) BOOL supportsVideoStabilization __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoMac, iOS (6, 0)]
	//	[Export ("supportsVideoStabilization")]
	//	bool SupportsVideoStabilization { [Bind ("isVideoStabilizationSupported")] get; }

	//	// @property (readonly, getter = isVideoStabilizationEnabled, nonatomic) BOOL videoStabilizationEnabled __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 6, 0, message: "Use activeVideoStabilizationMode instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use activeVideoStabilizationMode instead.")]
	//	[NoMac]
	//	[Export ("videoStabilizationEnabled")]
	//	bool VideoStabilizationEnabled { [Bind ("isVideoStabilizationEnabled")] get; }

	//	// @property (nonatomic) BOOL enablesVideoStabilizationWhenAvailable __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 6, 0, message: "Use preferredVideoStabilizationMode instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use preferredVideoStabilizationMode instead.")]
	//	[NoMac]
	//	[Export ("enablesVideoStabilizationWhenAvailable")]
	//	bool EnablesVideoStabilizationWhenAvailable { get; set; }

	//	// @property (readonly, getter = isCameraIntrinsicMatrixDeliverySupported, nonatomic) BOOL cameraIntrinsicMatrixDeliverySupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("cameraIntrinsicMatrixDeliverySupported")]
	//	bool CameraIntrinsicMatrixDeliverySupported { [Bind ("isCameraIntrinsicMatrixDeliverySupported")] get; }

	//	// @property (getter = isCameraIntrinsicMatrixDeliveryEnabled, nonatomic) BOOL cameraIntrinsicMatrixDeliveryEnabled __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11, 0)]
	//	[Export ("cameraIntrinsicMatrixDeliveryEnabled")]
	//	bool CameraIntrinsicMatrixDeliveryEnabled { [Bind ("isCameraIntrinsicMatrixDeliveryEnabled")] get; set; }
	//}

	//// @interface AVCaptureAudioChannel : NSObject
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVCaptureAudioChannel
	//{
	//	// @property (readonly, nonatomic) float averagePowerLevel;
	//	[Export ("averagePowerLevel")]
	//	float AveragePowerLevel { get; }

	//	// @property (readonly, nonatomic) float peakHoldLevel;
	//	[Export ("peakHoldLevel")]
	//	float PeakHoldLevel { get; }

	//	// @property (nonatomic) float volume __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("volume")]
	//	float Volume { get; set; }

	//	// @property (getter = isEnabled, nonatomic) BOOL enabled __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }
	//}

	//// @interface AVCaptureOutput : NSObject
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureOutput
	//{
	//	// @property (readonly, nonatomic) NSArray<AVCaptureConnection *> * _Nonnull connections;
	//	[Export ("connections")]
	//	AVCaptureConnection[] Connections { get; }

	//	// -(AVCaptureConnection * _Nullable)connectionWithMediaType:(AVMediaType _Nonnull)mediaType __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("connectionWithMediaType:")]
	//	[return: NullAllowed]
	//	AVCaptureConnection ConnectionWithMediaType (string mediaType);

	//	// -(AVMetadataObject * _Nullable)transformedMetadataObjectForMetadataObject:(AVMetadataObject * _Nonnull)metadataObject connection:(AVCaptureConnection * _Nonnull)connection __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoMac, iOS (6,0)]
	//	[Export ("transformedMetadataObjectForMetadataObject:connection:")]
	//	[return: NullAllowed]
	//	AVMetadataObject TransformedMetadataObjectForMetadataObject (AVMetadataObject metadataObject, AVCaptureConnection connection);

	//	// -(CGRect)metadataOutputRectOfInterestForRect:(CGRect)rectInOutputCoordinates __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7,0)]
	//	[Export ("metadataOutputRectOfInterestForRect:")]
	//	CGRect MetadataOutputRectOfInterestForRect (CGRect rectInOutputCoordinates);

	//	// -(CGRect)rectForMetadataOutputRectOfInterest:(CGRect)rectInMetadataOutputCoordinates __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7,0)]
	//	[Export ("rectForMetadataOutputRectOfInterest:")]
	//	CGRect RectForMetadataOutputRectOfInterest (CGRect rectInMetadataOutputCoordinates);
	//}

	//// @interface AVCaptureAudioDataOutput : AVCaptureOutput
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(AVCaptureOutput))]
	//interface AVCaptureAudioDataOutput
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	AVCaptureAudioDataOutput New ();

	//	// -(void)setSampleBufferDelegate:(id<AVCaptureAudioDataOutputSampleBufferDelegate> _Nullable)sampleBufferDelegate queue:(dispatch_queue_t _Nullable)sampleBufferCallbackQueue;
	//	[Export ("setSampleBufferDelegate:queue:")]
	//	void SetSampleBufferDelegate ([NullAllowed] AVCaptureAudioDataOutputSampleBufferDelegate sampleBufferDelegate, [NullAllowed] DispatchQueue sampleBufferCallbackQueue);

	//	[Wrap ("WeakSampleBufferDelegate")]
	//	[NullAllowed]
	//	AVCaptureAudioDataOutputSampleBufferDelegate SampleBufferDelegate { get; }

	//	// @property (readonly, nonatomic) id<AVCaptureAudioDataOutputSampleBufferDelegate> _Nullable sampleBufferDelegate;
	//	[NullAllowed, Export ("sampleBufferDelegate")]
	//	NSObject WeakSampleBufferDelegate { get; }

	//	// @property (readonly, nonatomic) dispatch_queue_t _Nullable sampleBufferCallbackQueue;
	//	[NullAllowed, Export ("sampleBufferCallbackQueue")]
	//	DispatchQueue SampleBufferCallbackQueue { get; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Null_unspecified audioSettings __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("audioSettings", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> AudioSettings { get; set; }

	//	// -(NSDictionary * _Nullable)recommendedAudioSettingsForAssetWriterWithOutputFileType:(AVFileType _Nonnull)outputFileType __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7,0)]
	//	[Export ("recommendedAudioSettingsForAssetWriterWithOutputFileType:")]
	//	[return: NullAllowed]
	//	NSDictionary RecommendedAudioSettingsForAssetWriterWithOutputFileType (string outputFileType);
	//}

	//// @protocol AVCaptureAudioDataOutputSampleBufferDelegate <NSObject>
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVCaptureAudioDataOutputSampleBufferDelegate
	//{
	//	// @optional -(void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
	//	[Export ("captureOutput:didOutputSampleBuffer:fromConnection:")]
	//	unsafe void DidOutputSampleBuffer (AVCaptureOutput output, CMSampleBufferRef* sampleBuffer, AVCaptureConnection connection);
	//}

	//// @interface AVCaptureAudioPreviewOutput : AVCaptureOutput
	//[NoWatch, NoTV, NoiOS, Mac (10,7)]
	//[BaseType (typeof(AVCaptureOutput))]
	//interface AVCaptureAudioPreviewOutput
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	AVCaptureAudioPreviewOutput New ();

	//	// @property (copy, nonatomic) NSString * _Nullable outputDeviceUniqueID;
	//	[NullAllowed, Export ("outputDeviceUniqueID")]
	//	string OutputDeviceUniqueID { get; set; }

	//	// @property (nonatomic) float volume;
	//	[Export ("volume")]
	//	float Volume { get; set; }
	//}

	//// @interface AVCaptureDepthDataOutput : AVCaptureOutput
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(AVCaptureOutput))]
	//interface AVCaptureDepthDataOutput
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	AVCaptureDepthDataOutput New ();

	//	// -(void)setDelegate:(id<AVCaptureDepthDataOutputDelegate> _Nullable)delegate callbackQueue:(dispatch_queue_t _Nullable)callbackQueue;
	//	[Export ("setDelegate:callbackQueue:")]
	//	void SetDelegate ([NullAllowed] AVCaptureDepthDataOutputDelegate @delegate, [NullAllowed] DispatchQueue callbackQueue);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVCaptureDepthDataOutputDelegate Delegate { get; }

	//	// @property (readonly, nonatomic) id<AVCaptureDepthDataOutputDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate")]
	//	NSObject WeakDelegate { get; }

	//	// @property (readonly, nonatomic) dispatch_queue_t _Nullable delegateCallbackQueue;
	//	[NullAllowed, Export ("delegateCallbackQueue")]
	//	DispatchQueue DelegateCallbackQueue { get; }

	//	// @property (nonatomic) BOOL alwaysDiscardsLateDepthData;
	//	[Export ("alwaysDiscardsLateDepthData")]
	//	bool AlwaysDiscardsLateDepthData { get; set; }

	//	// @property (getter = isFilteringEnabled, nonatomic) BOOL filteringEnabled;
	//	[Export ("filteringEnabled")]
	//	bool FilteringEnabled { [Bind ("isFilteringEnabled")] get; set; }
	//}

	//// @protocol AVCaptureDepthDataOutputDelegate <NSObject>
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVCaptureDepthDataOutputDelegate
	//{
	//	// @optional -(void)depthDataOutput:(AVCaptureDepthDataOutput * _Nonnull)output didOutputDepthData:(AVDepthData * _Nonnull)depthData timestamp:(CMTime)timestamp connection:(AVCaptureConnection * _Nonnull)connection;
	//	[Export ("depthDataOutput:didOutputDepthData:timestamp:connection:")]
	//	void DidOutputDepthData (AVCaptureDepthDataOutput output, AVDepthData depthData, CMTime timestamp, AVCaptureConnection connection);

	//	// @optional -(void)depthDataOutput:(AVCaptureDepthDataOutput * _Nonnull)output didDropDepthData:(AVDepthData * _Nonnull)depthData timestamp:(CMTime)timestamp connection:(AVCaptureConnection * _Nonnull)connection reason:(AVCaptureOutputDataDroppedReason)reason;
	//	[Export ("depthDataOutput:didDropDepthData:timestamp:connection:reason:")]
	//	void DidDropDepthData (AVCaptureDepthDataOutput output, AVDepthData depthData, CMTime timestamp, AVCaptureConnection connection, AVCaptureOutputDataDroppedReason reason);
	//}

	//// @interface AVCaptureFileOutput : AVCaptureOutput
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(AVCaptureOutput))]
	//interface AVCaptureFileOutput
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVCaptureFileOutputDelegate Delegate { get; set; }

	//	// @property (assign, nonatomic) id<AVCaptureFileOutputDelegate> _Nullable delegate __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, nonatomic) NSURL * _Nullable outputFileURL;
	//	[NullAllowed, Export ("outputFileURL")]
	//	NSUrl OutputFileURL { get; }

	//	// -(void)startRecordingToOutputFileURL:(NSURL * _Nonnull)outputFileURL recordingDelegate:(id<AVCaptureFileOutputRecordingDelegate> _Nonnull)delegate;
	//	[Export ("startRecordingToOutputFileURL:recordingDelegate:")]
	//	void StartRecordingToOutputFileURL (NSUrl outputFileURL, AVCaptureFileOutputRecordingDelegate @delegate);

	//	// -(void)stopRecording;
	//	[Export ("stopRecording")]
	//	void StopRecording ();

	//	// @property (readonly, getter = isRecording, nonatomic) BOOL recording;
	//	[Export ("recording")]
	//	bool Recording { [Bind ("isRecording")] get; }

	//	// @property (readonly, getter = isRecordingPaused, nonatomic) BOOL recordingPaused __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("recordingPaused")]
	//	bool RecordingPaused { [Bind ("isRecordingPaused")] get; }

	//	// -(void)pauseRecording __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("pauseRecording")]
	//	void PauseRecording ();

	//	// -(void)resumeRecording __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("resumeRecording")]
	//	void ResumeRecording ();

	//	// @property (readonly, nonatomic) CMTime recordedDuration;
	//	[Export ("recordedDuration")]
	//	CMTime RecordedDuration { get; }

	//	// @property (readonly, nonatomic) int64_t recordedFileSize;
	//	[Export ("recordedFileSize")]
	//	long RecordedFileSize { get; }

	//	// @property (nonatomic) CMTime maxRecordedDuration;
	//	[Export ("maxRecordedDuration", ArgumentSemantic.Assign)]
	//	CMTime MaxRecordedDuration { get; set; }

	//	// @property (nonatomic) int64_t maxRecordedFileSize;
	//	[Export ("maxRecordedFileSize")]
	//	long MaxRecordedFileSize { get; set; }

	//	// @property (nonatomic) int64_t minFreeDiskSpaceLimit;
	//	[Export ("minFreeDiskSpaceLimit")]
	//	long MinFreeDiskSpaceLimit { get; set; }
	//}

	//// @protocol AVCaptureFileOutputRecordingDelegate <NSObject>
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVCaptureFileOutputRecordingDelegate
	//{
	//	// @optional -(void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didStartRecordingToOutputFileAtURL:(NSURL * _Nonnull)fileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections;
	//	[Export ("captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:")]
	//	void DidStartRecordingToOutputFileAtURL (AVCaptureFileOutput output, NSUrl fileURL, AVCaptureConnection[] connections);

	//	// @optional -(void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didPauseRecordingToOutputFileAtURL:(NSURL * _Nonnull)fileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("captureOutput:didPauseRecordingToOutputFileAtURL:fromConnections:")]
	//	void DidPauseRecordingToOutputFileAtURL (AVCaptureFileOutput output, NSUrl fileURL, AVCaptureConnection[] connections);

	//	// @optional -(void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didResumeRecordingToOutputFileAtURL:(NSURL * _Nonnull)fileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("captureOutput:didResumeRecordingToOutputFileAtURL:fromConnections:")]
	//	void DidResumeRecordingToOutputFileAtURL (AVCaptureFileOutput output, NSUrl fileURL, AVCaptureConnection[] connections);

	//	// @optional -(void)captureOutput:(AVCaptureFileOutput * _Nonnull)output willFinishRecordingToOutputFileAtURL:(NSURL * _Nonnull)fileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections error:(NSError * _Nullable)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[NoWatch, NoTV, NoiOS]
	//	[Export ("captureOutput:willFinishRecordingToOutputFileAtURL:fromConnections:error:")]
	//	void WillFinishRecordingToOutputFileAtURL (AVCaptureFileOutput output, NSUrl fileURL, AVCaptureConnection[] connections, [NullAllowed] NSError error);

	//	// @required -(void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didFinishRecordingToOutputFileAtURL:(NSURL * _Nonnull)outputFileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections error:(NSError * _Nullable)error;
	//	[Abstract]
	//	[Export ("captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:")]
	//	void DidFinishRecordingToOutputFileAtURL (AVCaptureFileOutput output, NSUrl outputFileURL, AVCaptureConnection[] connections, [NullAllowed] NSError error);
	//}

	//// @protocol AVCaptureFileOutputDelegate <NSObject>
	//[NoWatch, NoTV, NoiOS, Mac (10,7)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVCaptureFileOutputDelegate
	//{
	//	// @required -(BOOL)captureOutputShouldProvideSampleAccurateRecordingStart:(AVCaptureOutput * _Nonnull)output __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.8)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,8)]
	//	[Abstract]
	//	[Export ("captureOutputShouldProvideSampleAccurateRecordingStart:")]
	//	bool CaptureOutputShouldProvideSampleAccurateRecordingStart (AVCaptureOutput output);

	//	// @optional -(void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
	//	[Export ("captureOutput:didOutputSampleBuffer:fromConnection:")]
	//	unsafe void CaptureOutput (AVCaptureFileOutput output, CMSampleBufferRef* sampleBuffer, AVCaptureConnection connection);
	//}

	//// @interface AVCaptureMovieFileOutput : AVCaptureFileOutput
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(AVCaptureFileOutput))]
	//interface AVCaptureMovieFileOutput
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	AVCaptureMovieFileOutput New ();

	//	// @property (nonatomic) CMTime movieFragmentInterval;
	//	[Export ("movieFragmentInterval", ArgumentSemantic.Assign)]
	//	CMTime MovieFragmentInterval { get; set; }

	//	// @property (copy, nonatomic) NSArray<AVMetadataItem *> * _Nullable metadata;
	//	[NullAllowed, Export ("metadata", ArgumentSemantic.Copy)]
	//	AVMetadataItem[] Metadata { get; set; }

	//	// @property (readonly, nonatomic) NSArray<AVVideoCodecType> * _Nonnull availableVideoCodecTypes __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoMac, iOS (10, 0)]
	//	[Export ("availableVideoCodecTypes")]
	//	string[] AvailableVideoCodecTypes { get; }

	//	// -(NSArray<NSString *> * _Nonnull)supportedOutputSettingsKeysForConnection:(AVCaptureConnection * _Nonnull)connection __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12,0)]
	//	[Export ("supportedOutputSettingsKeysForConnection:")]
	//	string[] SupportedOutputSettingsKeysForConnection (AVCaptureConnection connection);

	//	// -(NSDictionary<NSString *,id> * _Nonnull)outputSettingsForConnection:(AVCaptureConnection * _Nonnull)connection __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("outputSettingsForConnection:")]
	//	NSDictionary<NSString, NSObject> OutputSettingsForConnection (AVCaptureConnection connection);

	//	// -(void)setOutputSettings:(NSDictionary<NSString *,id> * _Nullable)outputSettings forConnection:(AVCaptureConnection * _Nonnull)connection __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("setOutputSettings:forConnection:")]
	//	void SetOutputSettings ([NullAllowed] NSDictionary<NSString, NSObject> outputSettings, AVCaptureConnection connection);

	//	// -(BOOL)recordsVideoOrientationAndMirroringChangesAsMetadataTrackForConnection:(AVCaptureConnection * _Nonnull)connection __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=9.0)));
	//	[NoMac, iOS (9,0)]
	//	[Export ("recordsVideoOrientationAndMirroringChangesAsMetadataTrackForConnection:")]
	//	bool RecordsVideoOrientationAndMirroringChangesAsMetadataTrackForConnection (AVCaptureConnection connection);

	//	// -(void)setRecordsVideoOrientationAndMirroringChanges:(BOOL)doRecordChanges asMetadataTrackForConnection:(AVCaptureConnection * _Nonnull)connection __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=9.0)));
	//	[NoMac, iOS (9,0)]
	//	[Export ("setRecordsVideoOrientationAndMirroringChanges:asMetadataTrackForConnection:")]
	//	void SetRecordsVideoOrientationAndMirroringChanges (bool doRecordChanges, AVCaptureConnection connection);
	//}

	//// @interface AVCaptureAudioFileOutput : AVCaptureFileOutput
	//[NoWatch, NoTV, NoiOS, Mac (10,7)]
	//[BaseType (typeof(AVCaptureFileOutput))]
	//interface AVCaptureAudioFileOutput
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	AVCaptureAudioFileOutput New ();

	//	// +(NSArray<AVFileType> * _Nonnull)availableOutputFileTypes;
	//	[Static]
	//	[Export ("availableOutputFileTypes")]
	//	[Verify (MethodToProperty)]
	//	string[] AvailableOutputFileTypes { get; }

	//	// -(void)startRecordingToOutputFileURL:(NSURL * _Nonnull)outputFileURL outputFileType:(AVFileType _Nonnull)fileType recordingDelegate:(id<AVCaptureFileOutputRecordingDelegate> _Nonnull)delegate;
	//	[Export ("startRecordingToOutputFileURL:outputFileType:recordingDelegate:")]
	//	void StartRecordingToOutputFileURL (NSUrl outputFileURL, string fileType, AVCaptureFileOutputRecordingDelegate @delegate);

	//	// @property (copy, nonatomic) NSArray<AVMetadataItem *> * _Nonnull metadata;
	//	[Export ("metadata", ArgumentSemantic.Copy)]
	//	AVMetadataItem[] Metadata { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable audioSettings;
	//	[NullAllowed, Export ("audioSettings", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> AudioSettings { get; set; }
	//}

	//// @interface AVMetadataObject : NSObject
	//[NoWatch, NoTV, Mac (10,10), iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVMetadataObject
	//{
	//	// @property (readonly) CMTime time;
	//	[Export ("time")]
	//	CMTime Time { get; }

	//	// @property (readonly) CMTime duration;
	//	[Export ("duration")]
	//	CMTime Duration { get; }

	//	// @property (readonly) CGRect bounds;
	//	[Export ("bounds")]
	//	CGRect Bounds { get; }

	//	// @property (readonly) AVMetadataObjectType _Nonnull type;
	//	[Export ("type")]
	//	string Type { get; }
	//}

	//// @interface AVMetadataFaceObject : AVMetadataObject <NSCopying>
	//[NoWatch, NoTV, Mac (10,10), iOS (6,0)]
	//[BaseType (typeof(AVMetadataObject))]
	//interface AVMetadataFaceObject : INSCopying
	//{
	//	// @property (readonly) NSInteger faceID;
	//	[Export ("faceID")]
	//	nint FaceID { get; }

	//	// @property (readonly) BOOL hasRollAngle;
	//	[Export ("hasRollAngle")]
	//	bool HasRollAngle { get; }

	//	// @property (readonly) CGFloat rollAngle;
	//	[Export ("rollAngle")]
	//	nfloat RollAngle { get; }

	//	// @property (readonly) BOOL hasYawAngle;
	//	[Export ("hasYawAngle")]
	//	bool HasYawAngle { get; }

	//	// @property (readonly) CGFloat yawAngle;
	//	[Export ("yawAngle")]
	//	nfloat YawAngle { get; }
	//}

	//// @interface AVMetadataMachineReadableCodeObject : AVMetadataObject
	//[NoWatch, NoTV, NoMac, iOS (7,0)]
	//[BaseType (typeof(AVMetadataObject))]
	//interface AVMetadataMachineReadableCodeObject
	//{
	//	// @property (readonly) NSArray<NSDictionary *> * _Nonnull corners;
	//	[Export ("corners")]
	//	NSDictionary[] Corners { get; }

	//	// @property (readonly) NSString * _Nullable stringValue;
	//	[NullAllowed, Export ("stringValue")]
	//	string StringValue { get; }
	//}

	//// @interface AVMetadataMachineReadableCodeDescriptor (AVMetadataMachineReadableCodeObject)
	//[Category]
	//[BaseType (typeof(AVMetadataMachineReadableCodeObject))]
	//interface AVMetadataMachineReadableCodeObject_AVMetadataMachineReadableCodeDescriptor
	//{
	//	// @property (readonly) CIBarcodeDescriptor * _Nullable descriptor __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[NullAllowed, Export ("descriptor")]
	//	CIBarcodeDescriptor Descriptor { get; }
	//}

	//// @interface AVCaptureMetadataOutput : AVCaptureOutput
	//[NoWatch, NoTV, NoMac, iOS (6,0)]
	//[BaseType (typeof(AVCaptureOutput))]
	//interface AVCaptureMetadataOutput
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	AVCaptureMetadataOutput New ();

	//	// -(void)setMetadataObjectsDelegate:(id<AVCaptureMetadataOutputObjectsDelegate> _Nullable)objectsDelegate queue:(dispatch_queue_t _Nullable)objectsCallbackQueue;
	//	[Export ("setMetadataObjectsDelegate:queue:")]
	//	void SetMetadataObjectsDelegate ([NullAllowed] AVCaptureMetadataOutputObjectsDelegate objectsDelegate, [NullAllowed] DispatchQueue objectsCallbackQueue);

	//	[Wrap ("WeakMetadataObjectsDelegate")]
	//	[NullAllowed]
	//	AVCaptureMetadataOutputObjectsDelegate MetadataObjectsDelegate { get; }

	//	// @property (readonly, nonatomic) id<AVCaptureMetadataOutputObjectsDelegate> _Nullable metadataObjectsDelegate;
	//	[NullAllowed, Export ("metadataObjectsDelegate")]
	//	NSObject WeakMetadataObjectsDelegate { get; }

	//	// @property (readonly, nonatomic) dispatch_queue_t _Nullable metadataObjectsCallbackQueue;
	//	[NullAllowed, Export ("metadataObjectsCallbackQueue")]
	//	DispatchQueue MetadataObjectsCallbackQueue { get; }

	//	// @property (readonly, nonatomic) NSArray<AVMetadataObjectType> * _Nonnull availableMetadataObjectTypes;
	//	[Export ("availableMetadataObjectTypes")]
	//	string[] AvailableMetadataObjectTypes { get; }

	//	// @property (copy, nonatomic) NSArray<AVMetadataObjectType> * _Null_unspecified metadataObjectTypes;
	//	[Export ("metadataObjectTypes", ArgumentSemantic.Copy)]
	//	string[] MetadataObjectTypes { get; set; }

	//	// @property (nonatomic) CGRect rectOfInterest __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("rectOfInterest", ArgumentSemantic.Assign)]
	//	CGRect RectOfInterest { get; set; }
	//}

	//// @protocol AVCaptureMetadataOutputObjectsDelegate <NSObject>
	//[NoWatch, NoTV, NoMac, iOS (6,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVCaptureMetadataOutputObjectsDelegate
	//{
	//	// @optional -(void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputMetadataObjects:(NSArray<__kindof AVMetadataObject *> * _Nonnull)metadataObjects fromConnection:(AVCaptureConnection * _Nonnull)connection;
	//	[Export ("captureOutput:didOutputMetadataObjects:fromConnection:")]
	//	void DidOutputMetadataObjects (AVCaptureOutput output, AVMetadataObject[] metadataObjects, AVCaptureConnection connection);
	//}

	//// @interface AVCapturePhotoOutput : AVCaptureOutput
	//[NoWatch, NoTV, NoMac, iOS (10,0)]
	//[BaseType (typeof(AVCaptureOutput))]
	//interface AVCapturePhotoOutput
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	AVCapturePhotoOutput New ();

	//	// -(void)capturePhotoWithSettings:(AVCapturePhotoSettings * _Nonnull)settings delegate:(id<AVCapturePhotoCaptureDelegate> _Nonnull)delegate;
	//	[Export ("capturePhotoWithSettings:delegate:")]
	//	void CapturePhotoWithSettings (AVCapturePhotoSettings settings, AVCapturePhotoCaptureDelegate @delegate);

	//	// @property (readonly, nonatomic) NSArray<AVCapturePhotoSettings *> * _Nonnull preparedPhotoSettingsArray;
	//	[Export ("preparedPhotoSettingsArray")]
	//	AVCapturePhotoSettings[] PreparedPhotoSettingsArray { get; }

	//	// -(void)setPreparedPhotoSettingsArray:(NSArray<AVCapturePhotoSettings *> * _Nonnull)preparedPhotoSettingsArray completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
	//	[Export ("setPreparedPhotoSettingsArray:completionHandler:")]
	//	void SetPreparedPhotoSettingsArray (AVCapturePhotoSettings[] preparedPhotoSettingsArray, [NullAllowed] Action<bool, NSError> completionHandler);

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull availablePhotoPixelFormatTypes;
	//	[Export ("availablePhotoPixelFormatTypes")]
	//	NSNumber[] AvailablePhotoPixelFormatTypes { get; }

	//	// @property (readonly, nonatomic) NSArray<AVVideoCodecType> * _Nonnull availablePhotoCodecTypes;
	//	[Export ("availablePhotoCodecTypes")]
	//	string[] AvailablePhotoCodecTypes { get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull availableRawPhotoPixelFormatTypes;
	//	[Export ("availableRawPhotoPixelFormatTypes")]
	//	NSNumber[] AvailableRawPhotoPixelFormatTypes { get; }

	//	// @property (readonly, nonatomic) NSArray<AVFileType> * _Nonnull availablePhotoFileTypes __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("availablePhotoFileTypes")]
	//	string[] AvailablePhotoFileTypes { get; }

	//	// @property (readonly, nonatomic) NSArray<AVFileType> * _Nonnull availableRawPhotoFileTypes __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("availableRawPhotoFileTypes")]
	//	string[] AvailableRawPhotoFileTypes { get; }

	//	// -(NSArray<NSNumber *> * _Nonnull)supportedPhotoPixelFormatTypesForFileType:(AVFileType _Nonnull)fileType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("supportedPhotoPixelFormatTypesForFileType:")]
	//	NSNumber[] SupportedPhotoPixelFormatTypesForFileType (string fileType);

	//	// -(NSArray<AVVideoCodecType> * _Nonnull)supportedPhotoCodecTypesForFileType:(AVFileType _Nonnull)fileType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("supportedPhotoCodecTypesForFileType:")]
	//	string[] SupportedPhotoCodecTypesForFileType (string fileType);

	//	// -(NSArray<NSNumber *> * _Nonnull)supportedRawPhotoPixelFormatTypesForFileType:(AVFileType _Nonnull)fileType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("supportedRawPhotoPixelFormatTypesForFileType:")]
	//	NSNumber[] SupportedRawPhotoPixelFormatTypesForFileType (string fileType);

	//	// @property (readonly, getter = isStillImageStabilizationSupported, nonatomic) BOOL stillImageStabilizationSupported;
	//	[Export ("stillImageStabilizationSupported")]
	//	bool StillImageStabilizationSupported { [Bind ("isStillImageStabilizationSupported")] get; }

	//	// @property (readonly, nonatomic) BOOL isStillImageStabilizationScene;
	//	[Export ("isStillImageStabilizationScene")]
	//	bool IsStillImageStabilizationScene { get; }

	//	// @property (readonly, getter = isDualCameraFusionSupported, nonatomic) BOOL dualCameraFusionSupported __attribute__((availability(ios, introduced=10.2)));
	//	[iOS (10, 2)]
	//	[Export ("dualCameraFusionSupported")]
	//	bool DualCameraFusionSupported { [Bind ("isDualCameraFusionSupported")] get; }

	//	// @property (readonly, getter = isDualCameraDualPhotoDeliverySupported, nonatomic) BOOL dualCameraDualPhotoDeliverySupported __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("dualCameraDualPhotoDeliverySupported")]
	//	bool DualCameraDualPhotoDeliverySupported { [Bind ("isDualCameraDualPhotoDeliverySupported")] get; }

	//	// @property (getter = isDualCameraDualPhotoDeliveryEnabled, nonatomic) BOOL dualCameraDualPhotoDeliveryEnabled __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("dualCameraDualPhotoDeliveryEnabled")]
	//	bool DualCameraDualPhotoDeliveryEnabled { [Bind ("isDualCameraDualPhotoDeliveryEnabled")] get; set; }

	//	// @property (readonly, getter = isCameraCalibrationDataDeliverySupported, nonatomic) BOOL cameraCalibrationDataDeliverySupported __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("cameraCalibrationDataDeliverySupported")]
	//	bool CameraCalibrationDataDeliverySupported { [Bind ("isCameraCalibrationDataDeliverySupported")] get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull supportedFlashModes;
	//	[Export ("supportedFlashModes")]
	//	NSNumber[] SupportedFlashModes { get; }

	//	// @property (readonly, getter = isAutoRedEyeReductionSupported, nonatomic) BOOL autoRedEyeReductionSupported __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("autoRedEyeReductionSupported")]
	//	bool AutoRedEyeReductionSupported { [Bind ("isAutoRedEyeReductionSupported")] get; }

	//	// @property (readonly, nonatomic) BOOL isFlashScene;
	//	[Export ("isFlashScene")]
	//	bool IsFlashScene { get; }

	//	// @property (copy, nonatomic) AVCapturePhotoSettings * _Nullable photoSettingsForSceneMonitoring;
	//	[NullAllowed, Export ("photoSettingsForSceneMonitoring", ArgumentSemantic.Copy)]
	//	AVCapturePhotoSettings PhotoSettingsForSceneMonitoring { get; set; }

	//	// @property (getter = isHighResolutionCaptureEnabled, nonatomic) BOOL highResolutionCaptureEnabled;
	//	[Export ("highResolutionCaptureEnabled")]
	//	bool HighResolutionCaptureEnabled { [Bind ("isHighResolutionCaptureEnabled")] get; set; }

	//	// @property (readonly, nonatomic) NSUInteger maxBracketedCapturePhotoCount;
	//	[Export ("maxBracketedCapturePhotoCount")]
	//	nuint MaxBracketedCapturePhotoCount { get; }

	//	// @property (readonly, getter = isLensStabilizationDuringBracketedCaptureSupported, nonatomic) BOOL lensStabilizationDuringBracketedCaptureSupported;
	//	[Export ("lensStabilizationDuringBracketedCaptureSupported")]
	//	bool LensStabilizationDuringBracketedCaptureSupported { [Bind ("isLensStabilizationDuringBracketedCaptureSupported")] get; }

	//	// @property (readonly, getter = isLivePhotoCaptureSupported, nonatomic) BOOL livePhotoCaptureSupported;
	//	[Export ("livePhotoCaptureSupported")]
	//	bool LivePhotoCaptureSupported { [Bind ("isLivePhotoCaptureSupported")] get; }

	//	// @property (getter = isLivePhotoCaptureEnabled, nonatomic) BOOL livePhotoCaptureEnabled;
	//	[Export ("livePhotoCaptureEnabled")]
	//	bool LivePhotoCaptureEnabled { [Bind ("isLivePhotoCaptureEnabled")] get; set; }

	//	// @property (getter = isLivePhotoCaptureSuspended, nonatomic) BOOL livePhotoCaptureSuspended;
	//	[Export ("livePhotoCaptureSuspended")]
	//	bool LivePhotoCaptureSuspended { [Bind ("isLivePhotoCaptureSuspended")] get; set; }

	//	// @property (getter = isLivePhotoAutoTrimmingEnabled, nonatomic) BOOL livePhotoAutoTrimmingEnabled;
	//	[Export ("livePhotoAutoTrimmingEnabled")]
	//	bool LivePhotoAutoTrimmingEnabled { [Bind ("isLivePhotoAutoTrimmingEnabled")] get; set; }

	//	// @property (readonly, nonatomic) NSArray<AVVideoCodecType> * _Nonnull availableLivePhotoVideoCodecTypes __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("availableLivePhotoVideoCodecTypes")]
	//	string[] AvailableLivePhotoVideoCodecTypes { get; }

	//	// +(NSData * _Nullable)JPEGPhotoDataRepresentationForJPEGSampleBuffer:(CMSampleBufferRef _Nonnull)JPEGSampleBuffer previewPhotoSampleBuffer:(CMSampleBufferRef _Nullable)previewPhotoSampleBuffer __attribute__((availability(ios, introduced=10.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 10, 0, message: "Use -[AVCapturePhoto fileDataRepresentation] instead.")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use -[AVCapturePhoto fileDataRepresentation] instead.")]
	//	[Static]
	//	[Export ("JPEGPhotoDataRepresentationForJPEGSampleBuffer:previewPhotoSampleBuffer:")]
	//	[return: NullAllowed]
	//	unsafe NSData JPEGPhotoDataRepresentationForJPEGSampleBuffer (CMSampleBufferRef* JPEGSampleBuffer, [NullAllowed] CMSampleBufferRef* previewPhotoSampleBuffer);

	//	// +(NSData * _Nullable)DNGPhotoDataRepresentationForRawSampleBuffer:(CMSampleBufferRef _Nonnull)rawSampleBuffer previewPhotoSampleBuffer:(CMSampleBufferRef _Nullable)previewPhotoSampleBuffer __attribute__((availability(ios, introduced=10.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 10, 0, message: "Use -[AVCapturePhoto fileDataRepresentation] instead.")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use -[AVCapturePhoto fileDataRepresentation] instead.")]
	//	[Static]
	//	[Export ("DNGPhotoDataRepresentationForRawSampleBuffer:previewPhotoSampleBuffer:")]
	//	[return: NullAllowed]
	//	unsafe NSData DNGPhotoDataRepresentationForRawSampleBuffer (CMSampleBufferRef* rawSampleBuffer, [NullAllowed] CMSampleBufferRef* previewPhotoSampleBuffer);
	//}

	//// @interface AVCapturePhotoOutputDepthDataDeliverySupport (AVCapturePhotoOutput)
	//[Category]
	//[BaseType (typeof(AVCapturePhotoOutput))]
	//interface AVCapturePhotoOutput_AVCapturePhotoOutputDepthDataDeliverySupport
	//{
	//	// @property (readonly, getter = isDepthDataDeliverySupported, nonatomic) BOOL depthDataDeliverySupported __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("depthDataDeliverySupported")]
	//	bool DepthDataDeliverySupported { [Bind ("isDepthDataDeliverySupported")] get; }

	//	// @property (getter = isDepthDataDeliveryEnabled, nonatomic) BOOL depthDataDeliveryEnabled __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("depthDataDeliveryEnabled")]
	//	bool DepthDataDeliveryEnabled { [Bind ("isDepthDataDeliveryEnabled")] get; set; }

	//	// @property (readonly, getter = isPortraitEffectsMatteDeliverySupported, nonatomic) BOOL portraitEffectsMatteDeliverySupported __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("portraitEffectsMatteDeliverySupported")]
	//	bool PortraitEffectsMatteDeliverySupported { [Bind ("isPortraitEffectsMatteDeliverySupported")] get; }

	//	// @property (getter = isPortraitEffectsMatteDeliveryEnabled, nonatomic) BOOL portraitEffectsMatteDeliveryEnabled __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("portraitEffectsMatteDeliveryEnabled")]
	//	bool PortraitEffectsMatteDeliveryEnabled { [Bind ("isPortraitEffectsMatteDeliveryEnabled")] get; set; }
	//}

	//// @protocol AVCapturePhotoCaptureDelegate <NSObject>
	//[NoWatch, NoTV, NoMac, iOS (10,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVCapturePhotoCaptureDelegate
	//{
	//	// @optional -(void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output willBeginCaptureForResolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings;
	//	[Export ("captureOutput:willBeginCaptureForResolvedSettings:")]
	//	void WillBeginCaptureForResolvedSettings (AVCapturePhotoOutput output, AVCaptureResolvedPhotoSettings resolvedSettings);

	//	// @optional -(void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output willCapturePhotoForResolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings;
	//	[Export ("captureOutput:willCapturePhotoForResolvedSettings:")]
	//	void WillCapturePhotoForResolvedSettings (AVCapturePhotoOutput output, AVCaptureResolvedPhotoSettings resolvedSettings);

	//	// @optional -(void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didCapturePhotoForResolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings;
	//	[Export ("captureOutput:didCapturePhotoForResolvedSettings:")]
	//	void DidCapturePhotoForResolvedSettings (AVCapturePhotoOutput output, AVCaptureResolvedPhotoSettings resolvedSettings);

	//	// @optional -(void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishProcessingPhoto:(AVCapturePhoto * _Nonnull)photo error:(NSError * _Nullable)error __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("captureOutput:didFinishProcessingPhoto:error:")]
	//	void DidFinishProcessingPhoto (AVCapturePhotoOutput output, AVCapturePhoto photo, [NullAllowed] NSError error);

	//	// @optional -(void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishProcessingPhotoSampleBuffer:(CMSampleBufferRef _Nullable)photoSampleBuffer previewPhotoSampleBuffer:(CMSampleBufferRef _Nullable)previewPhotoSampleBuffer resolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings bracketSettings:(AVCaptureBracketedStillImageSettings * _Nullable)bracketSettings error:(NSError * _Nullable)error __attribute__((availability(ios, introduced=10.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 10, 0, message: "Use -captureOutput:didFinishProcessingPhoto:error: instead.")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use -captureOutput:didFinishProcessingPhoto:error: instead.")]
	//	[Export ("captureOutput:didFinishProcessingPhotoSampleBuffer:previewPhotoSampleBuffer:resolvedSettings:bracketSettings:error:")]
	//	unsafe void DidFinishProcessingPhotoSampleBuffer (AVCapturePhotoOutput output, [NullAllowed] CMSampleBufferRef* photoSampleBuffer, [NullAllowed] CMSampleBufferRef* previewPhotoSampleBuffer, AVCaptureResolvedPhotoSettings resolvedSettings, [NullAllowed] AVCaptureBracketedStillImageSettings bracketSettings, [NullAllowed] NSError error);

	//	// @optional -(void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishProcessingRawPhotoSampleBuffer:(CMSampleBufferRef _Nullable)rawSampleBuffer previewPhotoSampleBuffer:(CMSampleBufferRef _Nullable)previewPhotoSampleBuffer resolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings bracketSettings:(AVCaptureBracketedStillImageSettings * _Nullable)bracketSettings error:(NSError * _Nullable)error __attribute__((availability(ios, introduced=10.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 10, 0, message: "Use -captureOutput:didFinishProcessingPhoto:error: instead.")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use -captureOutput:didFinishProcessingPhoto:error: instead.")]
	//	[Export ("captureOutput:didFinishProcessingRawPhotoSampleBuffer:previewPhotoSampleBuffer:resolvedSettings:bracketSettings:error:")]
	//	unsafe void DidFinishProcessingRawPhotoSampleBuffer (AVCapturePhotoOutput output, [NullAllowed] CMSampleBufferRef* rawSampleBuffer, [NullAllowed] CMSampleBufferRef* previewPhotoSampleBuffer, AVCaptureResolvedPhotoSettings resolvedSettings, [NullAllowed] AVCaptureBracketedStillImageSettings bracketSettings, [NullAllowed] NSError error);

	//	// @optional -(void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishRecordingLivePhotoMovieForEventualFileAtURL:(NSURL * _Nonnull)outputFileURL resolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings;
	//	[Export ("captureOutput:didFinishRecordingLivePhotoMovieForEventualFileAtURL:resolvedSettings:")]
	//	void DidFinishRecordingLivePhotoMovieForEventualFileAtURL (AVCapturePhotoOutput output, NSUrl outputFileURL, AVCaptureResolvedPhotoSettings resolvedSettings);

	//	// @optional -(void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishProcessingLivePhotoToMovieFileAtURL:(NSURL * _Nonnull)outputFileURL duration:(CMTime)duration photoDisplayTime:(CMTime)photoDisplayTime resolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings error:(NSError * _Nullable)error;
	//	[Export ("captureOutput:didFinishProcessingLivePhotoToMovieFileAtURL:duration:photoDisplayTime:resolvedSettings:error:")]
	//	void DidFinishProcessingLivePhotoToMovieFileAtURL (AVCapturePhotoOutput output, NSUrl outputFileURL, CMTime duration, CMTime photoDisplayTime, AVCaptureResolvedPhotoSettings resolvedSettings, [NullAllowed] NSError error);

	//	// @optional -(void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishCaptureForResolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings error:(NSError * _Nullable)error;
	//	[Export ("captureOutput:didFinishCaptureForResolvedSettings:error:")]
	//	void DidFinishCaptureForResolvedSettings (AVCapturePhotoOutput output, AVCaptureResolvedPhotoSettings resolvedSettings, [NullAllowed] NSError error);
	//}

	//// @interface AVCapturePhotoSettings : NSObject <NSCopying>
	//[NoWatch, NoTV, NoMac, iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVCapturePhotoSettings : INSCopying
	//{
	//	// +(instancetype _Nonnull)photoSettings;
	//	[Static]
	//	[Export ("photoSettings")]
	//	AVCapturePhotoSettings PhotoSettings ();

	//	// +(instancetype _Nonnull)photoSettingsWithFormat:(NSDictionary<NSString *,id> * _Nullable)format;
	//	[Static]
	//	[Export ("photoSettingsWithFormat:")]
	//	AVCapturePhotoSettings PhotoSettingsWithFormat ([NullAllowed] NSDictionary<NSString, NSObject> format);

	//	// +(instancetype _Nonnull)photoSettingsWithRawPixelFormatType:(OSType)rawPixelFormatType;
	//	[Static]
	//	[Export ("photoSettingsWithRawPixelFormatType:")]
	//	AVCapturePhotoSettings PhotoSettingsWithRawPixelFormatType (uint rawPixelFormatType);

	//	// +(instancetype _Nonnull)photoSettingsWithRawPixelFormatType:(OSType)rawPixelFormatType processedFormat:(NSDictionary<NSString *,id> * _Nullable)processedFormat;
	//	[Static]
	//	[Export ("photoSettingsWithRawPixelFormatType:processedFormat:")]
	//	AVCapturePhotoSettings PhotoSettingsWithRawPixelFormatType (uint rawPixelFormatType, [NullAllowed] NSDictionary<NSString, NSObject> processedFormat);

	//	// +(instancetype _Nonnull)photoSettingsWithRawPixelFormatType:(OSType)rawPixelFormatType rawFileType:(AVFileType _Nullable)rawFileType processedFormat:(NSDictionary<NSString *,id> * _Nullable)processedFormat processedFileType:(AVFileType _Nullable)processedFileType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Static]
	//	[Export ("photoSettingsWithRawPixelFormatType:rawFileType:processedFormat:processedFileType:")]
	//	AVCapturePhotoSettings PhotoSettingsWithRawPixelFormatType (uint rawPixelFormatType, [NullAllowed] string rawFileType, [NullAllowed] NSDictionary<NSString, NSObject> processedFormat, [NullAllowed] string processedFileType);

	//	// +(instancetype _Nonnull)photoSettingsFromPhotoSettings:(AVCapturePhotoSettings * _Nonnull)photoSettings;
	//	[Static]
	//	[Export ("photoSettingsFromPhotoSettings:")]
	//	AVCapturePhotoSettings PhotoSettingsFromPhotoSettings (AVCapturePhotoSettings photoSettings);

	//	// @property (readonly) int64_t uniqueID;
	//	[Export ("uniqueID")]
	//	long UniqueID { get; }

	//	// @property (readonly, copy) NSDictionary<NSString *,id> * _Nullable format;
	//	[NullAllowed, Export ("format", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> Format { get; }

	//	// @property (readonly) AVFileType _Nullable processedFileType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[NullAllowed, Export ("processedFileType")]
	//	string ProcessedFileType { get; }

	//	// @property (readonly) OSType rawPhotoPixelFormatType;
	//	[Export ("rawPhotoPixelFormatType")]
	//	uint RawPhotoPixelFormatType { get; }

	//	// @property (readonly) AVFileType _Nullable rawFileType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[NullAllowed, Export ("rawFileType")]
	//	string RawFileType { get; }

	//	// @property (nonatomic) AVCaptureFlashMode flashMode;
	//	[Export ("flashMode", ArgumentSemantic.Assign)]
	//	AVCaptureFlashMode FlashMode { get; set; }

	//	// @property (getter = isAutoRedEyeReductionEnabled, nonatomic) BOOL autoRedEyeReductionEnabled __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("autoRedEyeReductionEnabled")]
	//	bool AutoRedEyeReductionEnabled { [Bind ("isAutoRedEyeReductionEnabled")] get; set; }

	//	// @property (getter = isAutoStillImageStabilizationEnabled, nonatomic) BOOL autoStillImageStabilizationEnabled;
	//	[Export ("autoStillImageStabilizationEnabled")]
	//	bool AutoStillImageStabilizationEnabled { [Bind ("isAutoStillImageStabilizationEnabled")] get; set; }

	//	// @property (getter = isAutoDualCameraFusionEnabled, nonatomic) BOOL autoDualCameraFusionEnabled __attribute__((availability(ios, introduced=10.2)));
	//	[iOS (10, 2)]
	//	[Export ("autoDualCameraFusionEnabled")]
	//	bool AutoDualCameraFusionEnabled { [Bind ("isAutoDualCameraFusionEnabled")] get; set; }

	//	// @property (getter = isDualCameraDualPhotoDeliveryEnabled, nonatomic) BOOL dualCameraDualPhotoDeliveryEnabled __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("dualCameraDualPhotoDeliveryEnabled")]
	//	bool DualCameraDualPhotoDeliveryEnabled { [Bind ("isDualCameraDualPhotoDeliveryEnabled")] get; set; }

	//	// @property (getter = isHighResolutionPhotoEnabled, nonatomic) BOOL highResolutionPhotoEnabled;
	//	[Export ("highResolutionPhotoEnabled")]
	//	bool HighResolutionPhotoEnabled { [Bind ("isHighResolutionPhotoEnabled")] get; set; }

	//	// @property (getter = isDepthDataDeliveryEnabled, nonatomic) BOOL depthDataDeliveryEnabled __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("depthDataDeliveryEnabled")]
	//	bool DepthDataDeliveryEnabled { [Bind ("isDepthDataDeliveryEnabled")] get; set; }

	//	// @property (nonatomic) BOOL embedsDepthDataInPhoto __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("embedsDepthDataInPhoto")]
	//	bool EmbedsDepthDataInPhoto { get; set; }

	//	// @property (getter = isDepthDataFiltered, nonatomic) BOOL depthDataFiltered __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("depthDataFiltered")]
	//	bool DepthDataFiltered { [Bind ("isDepthDataFiltered")] get; set; }

	//	// @property (getter = isCameraCalibrationDataDeliveryEnabled, nonatomic) BOOL cameraCalibrationDataDeliveryEnabled __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("cameraCalibrationDataDeliveryEnabled")]
	//	bool CameraCalibrationDataDeliveryEnabled { [Bind ("isCameraCalibrationDataDeliveryEnabled")] get; set; }

	//	// @property (getter = isPortraitEffectsMatteDeliveryEnabled, nonatomic) BOOL portraitEffectsMatteDeliveryEnabled __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("portraitEffectsMatteDeliveryEnabled")]
	//	bool PortraitEffectsMatteDeliveryEnabled { [Bind ("isPortraitEffectsMatteDeliveryEnabled")] get; set; }

	//	// @property (nonatomic) BOOL embedsPortraitEffectsMatteInPhoto __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("embedsPortraitEffectsMatteInPhoto")]
	//	bool EmbedsPortraitEffectsMatteInPhoto { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nonnull metadata __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("metadata", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> Metadata { get; set; }

	//	// @property (copy, nonatomic) NSURL * _Nullable livePhotoMovieFileURL;
	//	[NullAllowed, Export ("livePhotoMovieFileURL", ArgumentSemantic.Copy)]
	//	NSUrl LivePhotoMovieFileURL { get; set; }

	//	// @property (copy, nonatomic) AVVideoCodecType _Nonnull livePhotoVideoCodecType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("livePhotoVideoCodecType")]
	//	string LivePhotoVideoCodecType { get; set; }

	//	// @property (copy, nonatomic) NSArray<AVMetadataItem *> * _Null_unspecified livePhotoMovieMetadata;
	//	[Export ("livePhotoMovieMetadata", ArgumentSemantic.Copy)]
	//	AVMetadataItem[] LivePhotoMovieMetadata { get; set; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull availablePreviewPhotoPixelFormatTypes;
	//	[Export ("availablePreviewPhotoPixelFormatTypes")]
	//	NSNumber[] AvailablePreviewPhotoPixelFormatTypes { get; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable previewPhotoFormat;
	//	[NullAllowed, Export ("previewPhotoFormat", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> PreviewPhotoFormat { get; set; }

	//	// @property (readonly, nonatomic) NSArray<AVVideoCodecType> * _Nonnull availableEmbeddedThumbnailPhotoCodecTypes __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("availableEmbeddedThumbnailPhotoCodecTypes")]
	//	string[] AvailableEmbeddedThumbnailPhotoCodecTypes { get; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable embeddedThumbnailPhotoFormat __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[NullAllowed, Export ("embeddedThumbnailPhotoFormat", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> EmbeddedThumbnailPhotoFormat { get; set; }

	//	// @property (readonly, nonatomic) NSArray<AVVideoCodecType> * _Nonnull availableRawEmbeddedThumbnailPhotoCodecTypes __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("availableRawEmbeddedThumbnailPhotoCodecTypes")]
	//	string[] AvailableRawEmbeddedThumbnailPhotoCodecTypes { get; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable rawEmbeddedThumbnailPhotoFormat __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[NullAllowed, Export ("rawEmbeddedThumbnailPhotoFormat", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> RawEmbeddedThumbnailPhotoFormat { get; set; }
	//}

	//// @interface AVCapturePhotoBracketSettings : AVCapturePhotoSettings
	//[NoWatch, NoTV, NoMac, iOS (10,0)]
	//[BaseType (typeof(AVCapturePhotoSettings))]
	//interface AVCapturePhotoBracketSettings
	//{
	//	// +(instancetype _Nonnull)photoBracketSettingsWithRawPixelFormatType:(OSType)rawPixelFormatType processedFormat:(NSDictionary<NSString *,id> * _Nullable)processedFormat bracketedSettings:(NSArray<__kindof AVCaptureBracketedStillImageSettings *> * _Nonnull)bracketedSettings;
	//	[Static]
	//	[Export ("photoBracketSettingsWithRawPixelFormatType:processedFormat:bracketedSettings:")]
	//	AVCapturePhotoBracketSettings PhotoBracketSettingsWithRawPixelFormatType (uint rawPixelFormatType, [NullAllowed] NSDictionary<NSString, NSObject> processedFormat, AVCaptureBracketedStillImageSettings[] bracketedSettings);

	//	// +(instancetype _Nonnull)photoBracketSettingsWithRawPixelFormatType:(OSType)rawPixelFormatType rawFileType:(AVFileType _Nullable)rawFileType processedFormat:(NSDictionary<NSString *,id> * _Nullable)processedFormat processedFileType:(AVFileType _Nullable)processedFileType bracketedSettings:(NSArray<AVCaptureBracketedStillImageSettings *> * _Nonnull)bracketedSettings __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Static]
	//	[Export ("photoBracketSettingsWithRawPixelFormatType:rawFileType:processedFormat:processedFileType:bracketedSettings:")]
	//	AVCapturePhotoBracketSettings PhotoBracketSettingsWithRawPixelFormatType (uint rawPixelFormatType, [NullAllowed] string rawFileType, [NullAllowed] NSDictionary<NSString, NSObject> processedFormat, [NullAllowed] string processedFileType, AVCaptureBracketedStillImageSettings[] bracketedSettings);

	//	// @property (readonly, nonatomic) NSArray<__kindof AVCaptureBracketedStillImageSettings *> * _Nonnull bracketedSettings;
	//	[Export ("bracketedSettings")]
	//	AVCaptureBracketedStillImageSettings[] BracketedSettings { get; }

	//	// @property (getter = isLensStabilizationEnabled, nonatomic) BOOL lensStabilizationEnabled;
	//	[Export ("lensStabilizationEnabled")]
	//	bool LensStabilizationEnabled { [Bind ("isLensStabilizationEnabled")] get; set; }
	//}

	//// @interface AVCaptureResolvedPhotoSettings : NSObject
	//[NoWatch, NoTV, NoMac, iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureResolvedPhotoSettings
	//{
	//	// @property (readonly) int64_t uniqueID;
	//	[Export ("uniqueID")]
	//	long UniqueID { get; }

	//	// @property (readonly) CMVideoDimensions photoDimensions;
	//	[Export ("photoDimensions")]
	//	CMVideoDimensions PhotoDimensions { get; }

	//	// @property (readonly) CMVideoDimensions rawPhotoDimensions;
	//	[Export ("rawPhotoDimensions")]
	//	CMVideoDimensions RawPhotoDimensions { get; }

	//	// @property (readonly) CMVideoDimensions previewDimensions;
	//	[Export ("previewDimensions")]
	//	CMVideoDimensions PreviewDimensions { get; }

	//	// @property (readonly) CMVideoDimensions embeddedThumbnailDimensions __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("embeddedThumbnailDimensions")]
	//	CMVideoDimensions EmbeddedThumbnailDimensions { get; }

	//	// @property (readonly) CMVideoDimensions rawEmbeddedThumbnailDimensions __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("rawEmbeddedThumbnailDimensions")]
	//	CMVideoDimensions RawEmbeddedThumbnailDimensions { get; }

	//	// @property (readonly) CMVideoDimensions portraitEffectsMatteDimensions __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("portraitEffectsMatteDimensions")]
	//	CMVideoDimensions PortraitEffectsMatteDimensions { get; }

	//	// @property (readonly) CMVideoDimensions livePhotoMovieDimensions;
	//	[Export ("livePhotoMovieDimensions")]
	//	CMVideoDimensions LivePhotoMovieDimensions { get; }

	//	// @property (readonly, getter = isFlashEnabled) BOOL flashEnabled;
	//	[Export ("flashEnabled")]
	//	bool FlashEnabled { [Bind ("isFlashEnabled")] get; }

	//	// @property (readonly, getter = isRedEyeReductionEnabled) BOOL redEyeReductionEnabled __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("redEyeReductionEnabled")]
	//	bool RedEyeReductionEnabled { [Bind ("isRedEyeReductionEnabled")] get; }

	//	// @property (readonly, getter = isStillImageStabilizationEnabled) BOOL stillImageStabilizationEnabled;
	//	[Export ("stillImageStabilizationEnabled")]
	//	bool StillImageStabilizationEnabled { [Bind ("isStillImageStabilizationEnabled")] get; }

	//	// @property (readonly, getter = isDualCameraFusionEnabled) BOOL dualCameraFusionEnabled __attribute__((availability(ios, introduced=10.2)));
	//	[iOS (10, 2)]
	//	[Export ("dualCameraFusionEnabled")]
	//	bool DualCameraFusionEnabled { [Bind ("isDualCameraFusionEnabled")] get; }

	//	// @property (readonly) NSUInteger expectedPhotoCount __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("expectedPhotoCount")]
	//	nuint ExpectedPhotoCount { get; }
	//}

	//// @interface AVCapturePhoto : NSObject
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCapturePhoto
	//{
	//	// @property (readonly) CMTime timestamp;
	//	[Export ("timestamp")]
	//	CMTime Timestamp { get; }

	//	// @property (readonly, getter = isRawPhoto) BOOL rawPhoto;
	//	[Export ("rawPhoto")]
	//	bool RawPhoto { [Bind ("isRawPhoto")] get; }

	//	// @property (readonly) CVPixelBufferRef _Nullable pixelBuffer __attribute__((objc_returns_inner_pointer));
	//	[NullAllowed, Export ("pixelBuffer")]
	//	unsafe CVPixelBufferRef* PixelBuffer { get; }

	//	// @property (readonly) CVPixelBufferRef _Nullable previewPixelBuffer __attribute__((objc_returns_inner_pointer));
	//	[NullAllowed, Export ("previewPixelBuffer")]
	//	unsafe CVPixelBufferRef* PreviewPixelBuffer { get; }

	//	// @property (readonly) NSDictionary<NSString *,id> * _Nullable embeddedThumbnailPhotoFormat;
	//	[NullAllowed, Export ("embeddedThumbnailPhotoFormat")]
	//	NSDictionary<NSString, NSObject> EmbeddedThumbnailPhotoFormat { get; }

	//	// @property (readonly) AVDepthData * _Nullable depthData;
	//	[NullAllowed, Export ("depthData")]
	//	AVDepthData DepthData { get; }

	//	// @property (readonly) AVPortraitEffectsMatte * _Nullable portraitEffectsMatte __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[NullAllowed, Export ("portraitEffectsMatte")]
	//	AVPortraitEffectsMatte PortraitEffectsMatte { get; }

	//	// @property (readonly) NSDictionary<NSString *,id> * _Nonnull metadata;
	//	[Export ("metadata")]
	//	NSDictionary<NSString, NSObject> Metadata { get; }

	//	// @property (readonly) AVCameraCalibrationData * _Nullable cameraCalibrationData;
	//	[NullAllowed, Export ("cameraCalibrationData")]
	//	AVCameraCalibrationData CameraCalibrationData { get; }

	//	// @property (readonly) AVCaptureResolvedPhotoSettings * _Nonnull resolvedSettings;
	//	[Export ("resolvedSettings")]
	//	AVCaptureResolvedPhotoSettings ResolvedSettings { get; }

	//	// @property (readonly) NSInteger photoCount;
	//	[Export ("photoCount")]
	//	nint PhotoCount { get; }

	//	// @property (readonly) AVCaptureDeviceType _Nullable sourceDeviceType;
	//	[NullAllowed, Export ("sourceDeviceType")]
	//	string SourceDeviceType { get; }
	//}

	//// @interface AVCapturePhotoConversions (AVCapturePhoto)
	//[Category]
	//[BaseType (typeof(AVCapturePhoto))]
	//interface AVCapturePhoto_AVCapturePhotoConversions
	//{
	//	// -(NSData * _Nullable)fileDataRepresentation __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[NullAllowed, Export ("fileDataRepresentation")]
	//	[Verify (MethodToProperty)]
	//	NSData FileDataRepresentation { get; }

	//	// -(NSData * _Nullable)fileDataRepresentationWithCustomizer:(id<AVCapturePhotoFileDataRepresentationCustomizer> _Nonnull)customizer __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12,0)]
	//	[Export ("fileDataRepresentationWithCustomizer:")]
	//	[return: NullAllowed]
	//	NSData FileDataRepresentationWithCustomizer (AVCapturePhotoFileDataRepresentationCustomizer customizer);

	//	// -(NSData * _Nullable)fileDataRepresentationWithReplacementMetadata:(NSDictionary<NSString *,id> * _Nullable)replacementMetadata replacementEmbeddedThumbnailPhotoFormat:(NSDictionary<NSString *,id> * _Nullable)replacementEmbeddedThumbnailPhotoFormat replacementEmbeddedThumbnailPixelBuffer:(CVPixelBufferRef _Nullable)replacementEmbeddedThumbnailPixelBuffer replacementDepthData:(AVDepthData * _Nullable)replacementDepthData __attribute__((availability(ios, introduced=11.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 11, 0, message: "Use fileDataRepresentationWithCustomizer: instead")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Use fileDataRepresentationWithCustomizer: instead")]
	//	[Export ("fileDataRepresentationWithReplacementMetadata:replacementEmbeddedThumbnailPhotoFormat:replacementEmbeddedThumbnailPixelBuffer:replacementDepthData:")]
	//	[return: NullAllowed]
	//	unsafe NSData FileDataRepresentationWithReplacementMetadata ([NullAllowed] NSDictionary<NSString, NSObject> replacementMetadata, [NullAllowed] NSDictionary<NSString, NSObject> replacementEmbeddedThumbnailPhotoFormat, [NullAllowed] CVPixelBufferRef* replacementEmbeddedThumbnailPixelBuffer, [NullAllowed] AVDepthData replacementDepthData);

	//	// -(CGImageRef _Nullable)CGImageRepresentation __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[NullAllowed, Export ("CGImageRepresentation")]
	//	[Verify (MethodToProperty)]
	//	unsafe CGImageRef* CGImageRepresentation { get; }

	//	// -(CGImageRef _Nullable)previewCGImageRepresentation __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[NullAllowed, Export ("previewCGImageRepresentation")]
	//	[Verify (MethodToProperty)]
	//	unsafe CGImageRef* PreviewCGImageRepresentation { get; }
	//}

	//// @interface AVCapturePhotoBracketedCapture (AVCapturePhoto)
	//[Category]
	//[BaseType (typeof(AVCapturePhoto))]
	//interface AVCapturePhoto_AVCapturePhotoBracketedCapture
	//{
	//	// @property (readonly) AVCaptureBracketedStillImageSettings * _Nullable bracketSettings __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[NullAllowed, Export ("bracketSettings")]
	//	AVCaptureBracketedStillImageSettings BracketSettings { get; }

	//	// @property (readonly) NSInteger sequenceCount __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("sequenceCount")]
	//	nint SequenceCount { get; }

	//	// @property (readonly) AVCaptureLensStabilizationStatus lensStabilizationStatus __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("lensStabilizationStatus")]
	//	AVCaptureLensStabilizationStatus LensStabilizationStatus { get; }
	//}

	//// @protocol AVCapturePhotoFileDataRepresentationCustomizer <NSObject>
	//[NoWatch, NoTV, NoMac, iOS (12,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVCapturePhotoFileDataRepresentationCustomizer
	//{
	//	// @optional -(NSDictionary<NSString *,id> * _Nullable)replacementMetadataForPhoto:(AVCapturePhoto * _Nonnull)photo;
	//	[Export ("replacementMetadataForPhoto:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> ReplacementMetadataForPhoto (AVCapturePhoto photo);

	//	// @optional -(CVPixelBufferRef _Nullable)replacementEmbeddedThumbnailPixelBufferWithPhotoFormat:(NSDictionary<NSString *,id> * _Nullable * _Nonnull)replacementEmbeddedThumbnailPhotoFormatOut forPhoto:(AVCapturePhoto * _Nonnull)photo;
	//	[Export ("replacementEmbeddedThumbnailPixelBufferWithPhotoFormat:forPhoto:")]
	//	[return: NullAllowed]
	//	unsafe CVPixelBufferRef* ReplacementEmbeddedThumbnailPixelBufferWithPhotoFormat ([NullAllowed] out NSDictionary<NSString, NSObject> replacementEmbeddedThumbnailPhotoFormatOut, AVCapturePhoto photo);

	//	// @optional -(AVDepthData * _Nullable)replacementDepthDataForPhoto:(AVCapturePhoto * _Nonnull)photo;
	//	[Export ("replacementDepthDataForPhoto:")]
	//	[return: NullAllowed]
	//	AVDepthData ReplacementDepthDataForPhoto (AVCapturePhoto photo);

	//	// @optional -(AVPortraitEffectsMatte * _Nullable)replacementPortraitEffectsMatteForPhoto:(AVCapturePhoto * _Nonnull)photo;
	//	[Export ("replacementPortraitEffectsMatteForPhoto:")]
	//	[return: NullAllowed]
	//	AVPortraitEffectsMatte ReplacementPortraitEffectsMatteForPhoto (AVCapturePhoto photo);
	//}

	//// @interface AVCaptureStillImageOutput : AVCaptureOutput
	//[Introduced (PlatformName.iOS, 4, 0, message: "Use AVCapturePhotoOutput instead.")]
	//[Deprecated (PlatformName.iOS, 10, 0, message: "Use AVCapturePhotoOutput instead.")]
	//[NoWatch, NoTV, Mac (10,7)]
	//[BaseType (typeof(AVCaptureOutput))]
	//interface AVCaptureStillImageOutput
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	AVCaptureStillImageOutput New ();

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nonnull outputSettings;
	//	[Export ("outputSettings", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> OutputSettings { get; set; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull availableImageDataCVPixelFormatTypes;
	//	[Export ("availableImageDataCVPixelFormatTypes")]
	//	NSNumber[] AvailableImageDataCVPixelFormatTypes { get; }

	//	// @property (readonly, nonatomic) NSArray<AVVideoCodecType> * _Nonnull availableImageDataCodecTypes;
	//	[Export ("availableImageDataCodecTypes")]
	//	string[] AvailableImageDataCodecTypes { get; }

	//	// @property (readonly, getter = isStillImageStabilizationSupported, nonatomic) BOOL stillImageStabilizationSupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7, 0)]
	//	[Export ("stillImageStabilizationSupported")]
	//	bool StillImageStabilizationSupported { [Bind ("isStillImageStabilizationSupported")] get; }

	//	// @property (nonatomic) BOOL automaticallyEnablesStillImageStabilizationWhenAvailable __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7, 0)]
	//	[Export ("automaticallyEnablesStillImageStabilizationWhenAvailable")]
	//	bool AutomaticallyEnablesStillImageStabilizationWhenAvailable { get; set; }

	//	// @property (readonly, getter = isStillImageStabilizationActive, nonatomic) BOOL stillImageStabilizationActive __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7, 0)]
	//	[Export ("stillImageStabilizationActive")]
	//	bool StillImageStabilizationActive { [Bind ("isStillImageStabilizationActive")] get; }

	//	// @property (getter = isHighResolutionStillImageOutputEnabled, nonatomic) BOOL highResolutionStillImageOutputEnabled __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[Export ("highResolutionStillImageOutputEnabled")]
	//	bool HighResolutionStillImageOutputEnabled { [Bind ("isHighResolutionStillImageOutputEnabled")] get; set; }

	//	// @property (readonly, getter = isCapturingStillImage) BOOL capturingStillImage __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Mac (10, 8), iOS (5, 0)]
	//	[Export ("capturingStillImage")]
	//	bool CapturingStillImage { [Bind ("isCapturingStillImage")] get; }

	//	// -(void)captureStillImageAsynchronouslyFromConnection:(AVCaptureConnection * _Nonnull)connection completionHandler:(void (^ _Nonnull)(CMSampleBufferRef _Nullable, NSError * _Nullable))handler;
	//	[Export ("captureStillImageAsynchronouslyFromConnection:completionHandler:")]
	//	unsafe void CaptureStillImageAsynchronouslyFromConnection (AVCaptureConnection connection, Action<CoreMedia.CMSampleBufferRef*, NSError> handler);

	//	// +(NSData * _Nullable)jpegStillImageNSDataRepresentation:(CMSampleBufferRef _Nonnull)jpegSampleBuffer;
	//	[Static]
	//	[Export ("jpegStillImageNSDataRepresentation:")]
	//	[return: NullAllowed]
	//	unsafe NSData JpegStillImageNSDataRepresentation (CMSampleBufferRef* jpegSampleBuffer);
	//}

	//// @interface AVCaptureBracketedStillImageSettings : NSObject
	//[NoWatch, NoTV, NoMac, iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureBracketedStillImageSettings
	//{
	//}

	//// @interface AVCaptureManualExposureBracketedStillImageSettings : AVCaptureBracketedStillImageSettings
	//[NoWatch, NoTV, NoMac, iOS (8,0)]
	//[BaseType (typeof(AVCaptureBracketedStillImageSettings))]
	//interface AVCaptureManualExposureBracketedStillImageSettings
	//{
	//	// +(instancetype _Nonnull)manualExposureSettingsWithExposureDuration:(CMTime)duration ISO:(float)ISO;
	//	[Static]
	//	[Export ("manualExposureSettingsWithExposureDuration:ISO:")]
	//	AVCaptureManualExposureBracketedStillImageSettings ManualExposureSettingsWithExposureDuration (CMTime duration, float ISO);

	//	// @property (readonly) CMTime exposureDuration;
	//	[Export ("exposureDuration")]
	//	CMTime ExposureDuration { get; }

	//	// @property (readonly) float ISO;
	//	[Export ("ISO")]
	//	float ISO { get; }
	//}

	//// @interface AVCaptureAutoExposureBracketedStillImageSettings : AVCaptureBracketedStillImageSettings
	//[NoWatch, NoTV, NoMac, iOS (8,0)]
	//[BaseType (typeof(AVCaptureBracketedStillImageSettings))]
	//interface AVCaptureAutoExposureBracketedStillImageSettings
	//{
	//	// +(instancetype _Nonnull)autoExposureSettingsWithExposureTargetBias:(float)exposureTargetBias;
	//	[Static]
	//	[Export ("autoExposureSettingsWithExposureTargetBias:")]
	//	AVCaptureAutoExposureBracketedStillImageSettings AutoExposureSettingsWithExposureTargetBias (float exposureTargetBias);

	//	// @property (readonly) float exposureTargetBias;
	//	[Export ("exposureTargetBias")]
	//	float ExposureTargetBias { get; }
	//}

	//// @interface AVCaptureStillImageOutputBracketedCapture (AVCaptureStillImageOutput)
	//[Category]
	//[BaseType (typeof(AVCaptureStillImageOutput))]
	//interface AVCaptureStillImageOutput_AVCaptureStillImageOutputBracketedCapture
	//{
	//	// @property (readonly, nonatomic) NSUInteger maxBracketedCaptureStillImageCount __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use AVCapturePhotoOutput maxBracketedCapturePhotoCount instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use AVCapturePhotoOutput maxBracketedCapturePhotoCount instead.")]
	//	[NoMac]
	//	[Export ("maxBracketedCaptureStillImageCount")]
	//	nuint MaxBracketedCaptureStillImageCount { get; }

	//	// @property (readonly, getter = isLensStabilizationDuringBracketedCaptureSupported, nonatomic) BOOL lensStabilizationDuringBracketedCaptureSupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=9.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 9, 0, message: "Use AVCapturePhotoOutput lensStabilizationDuringBracketedCaptureSupported instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use AVCapturePhotoOutput lensStabilizationDuringBracketedCaptureSupported instead.")]
	//	[NoMac]
	//	[Export ("lensStabilizationDuringBracketedCaptureSupported")]
	//	bool LensStabilizationDuringBracketedCaptureSupported { [Bind ("isLensStabilizationDuringBracketedCaptureSupported")] get; }

	//	// @property (getter = isLensStabilizationDuringBracketedCaptureEnabled, nonatomic) BOOL lensStabilizationDuringBracketedCaptureEnabled __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=9.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 9, 0, message: "Use AVCapturePhotoOutput with AVCapturePhotoBracketSettings instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use AVCapturePhotoOutput with AVCapturePhotoBracketSettings instead.")]
	//	[NoMac]
	//	[Export ("lensStabilizationDuringBracketedCaptureEnabled")]
	//	bool LensStabilizationDuringBracketedCaptureEnabled { [Bind ("isLensStabilizationDuringBracketedCaptureEnabled")] get; set; }

	//	// -(void)prepareToCaptureStillImageBracketFromConnection:(AVCaptureConnection * _Nonnull)connection withSettingsArray:(NSArray<__kindof AVCaptureBracketedStillImageSettings *> * _Nonnull)settings completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))handler __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use AVCapturePhotoOutput setPreparedPhotoSettingsArray:completionHandler: instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use AVCapturePhotoOutput setPreparedPhotoSettingsArray:completionHandler: instead.")]
	//	[NoMac]
	//	[Export ("prepareToCaptureStillImageBracketFromConnection:withSettingsArray:completionHandler:")]
	//	void PrepareToCaptureStillImageBracketFromConnection (AVCaptureConnection connection, AVCaptureBracketedStillImageSettings[] settings, Action<bool, NSError> handler);

	//	// -(void)captureStillImageBracketAsynchronouslyFromConnection:(AVCaptureConnection * _Nonnull)connection withSettingsArray:(NSArray<__kindof AVCaptureBracketedStillImageSettings *> * _Nonnull)settings completionHandler:(void (^ _Nonnull)(CMSampleBufferRef _Nullable, AVCaptureBracketedStillImageSettings * _Nullable, NSError * _Nullable))handler __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use AVCapturePhotoOutput capturePhotoWithSettings:delegate: instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use AVCapturePhotoOutput capturePhotoWithSettings:delegate: instead.")]
	//	[NoMac]
	//	[Export ("captureStillImageBracketAsynchronouslyFromConnection:withSettingsArray:completionHandler:")]
	//	unsafe void CaptureStillImageBracketAsynchronouslyFromConnection (AVCaptureConnection connection, AVCaptureBracketedStillImageSettings[] settings, Action<CoreMedia.CMSampleBufferRef*, AVCaptureBracketedStillImageSettings, NSError> handler);
	//}

	//// @interface AVCaptureVideoDataOutput : AVCaptureOutput
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(AVCaptureOutput))]
	//interface AVCaptureVideoDataOutput
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	AVCaptureVideoDataOutput New ();

	//	// -(void)setSampleBufferDelegate:(id<AVCaptureVideoDataOutputSampleBufferDelegate> _Nullable)sampleBufferDelegate queue:(dispatch_queue_t _Nullable)sampleBufferCallbackQueue;
	//	[Export ("setSampleBufferDelegate:queue:")]
	//	void SetSampleBufferDelegate ([NullAllowed] AVCaptureVideoDataOutputSampleBufferDelegate sampleBufferDelegate, [NullAllowed] DispatchQueue sampleBufferCallbackQueue);

	//	[Wrap ("WeakSampleBufferDelegate")]
	//	[NullAllowed]
	//	AVCaptureVideoDataOutputSampleBufferDelegate SampleBufferDelegate { get; }

	//	// @property (readonly, nonatomic) id<AVCaptureVideoDataOutputSampleBufferDelegate> _Nullable sampleBufferDelegate;
	//	[NullAllowed, Export ("sampleBufferDelegate")]
	//	NSObject WeakSampleBufferDelegate { get; }

	//	// @property (readonly, nonatomic) dispatch_queue_t _Nullable sampleBufferCallbackQueue;
	//	[NullAllowed, Export ("sampleBufferCallbackQueue")]
	//	DispatchQueue SampleBufferCallbackQueue { get; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Null_unspecified videoSettings;
	//	[Export ("videoSettings", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> VideoSettings { get; set; }

	//	// -(NSDictionary<NSString *,id> * _Nullable)recommendedVideoSettingsForAssetWriterWithOutputFileType:(AVFileType _Nonnull)outputFileType __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7,0)]
	//	[Export ("recommendedVideoSettingsForAssetWriterWithOutputFileType:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> RecommendedVideoSettingsForAssetWriterWithOutputFileType (string outputFileType);

	//	// -(NSArray<AVVideoCodecType> * _Nonnull)availableVideoCodecTypesForAssetWriterWithOutputFileType:(AVFileType _Nonnull)outputFileType __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Export ("availableVideoCodecTypesForAssetWriterWithOutputFileType:")]
	//	string[] AvailableVideoCodecTypesForAssetWriterWithOutputFileType (string outputFileType);

	//	// -(NSDictionary * _Nullable)recommendedVideoSettingsForVideoCodecType:(AVVideoCodecType _Nonnull)videoCodecType assetWriterOutputFileType:(AVFileType _Nonnull)outputFileType __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoMac, iOS (11,0)]
	//	[Export ("recommendedVideoSettingsForVideoCodecType:assetWriterOutputFileType:")]
	//	[return: NullAllowed]
	//	NSDictionary RecommendedVideoSettingsForVideoCodecType (string videoCodecType, string outputFileType);

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull availableVideoCVPixelFormatTypes __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("availableVideoCVPixelFormatTypes")]
	//	NSNumber[] AvailableVideoCVPixelFormatTypes { get; }

	//	// @property (readonly, nonatomic) NSArray<AVVideoCodecType> * _Nonnull availableVideoCodecTypes __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("availableVideoCodecTypes")]
	//	string[] AvailableVideoCodecTypes { get; }

	//	// @property (nonatomic) CMTime minFrameDuration __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=5.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use AVCaptureConnection's videoMinFrameDuration property instead.")]
	//	[Deprecated (PlatformName.iOS, 5, 0, message: "Use AVCaptureConnection's videoMinFrameDuration property instead.")]
	//	[NoMac]
	//	[Export ("minFrameDuration", ArgumentSemantic.Assign)]
	//	CMTime MinFrameDuration { get; set; }

	//	// @property (nonatomic) BOOL alwaysDiscardsLateVideoFrames;
	//	[Export ("alwaysDiscardsLateVideoFrames")]
	//	bool AlwaysDiscardsLateVideoFrames { get; set; }
	//}

	//// @protocol AVCaptureVideoDataOutputSampleBufferDelegate <NSObject>
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVCaptureVideoDataOutputSampleBufferDelegate
	//{
	//	// @optional -(void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
	//	[Export ("captureOutput:didOutputSampleBuffer:fromConnection:")]
	//	unsafe void DidOutputSampleBuffer (AVCaptureOutput output, CMSampleBufferRef* sampleBuffer, AVCaptureConnection connection);

	//	// @optional -(void)captureOutput:(AVCaptureOutput * _Nonnull)output didDropSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("captureOutput:didDropSampleBuffer:fromConnection:")]
	//	unsafe void DidDropSampleBuffer (AVCaptureOutput output, CMSampleBufferRef* sampleBuffer, AVCaptureConnection connection);
	//}

	//// @interface AVCaptureDataOutputSynchronizer : NSObject
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureDataOutputSynchronizer
	//{
	//	// -(instancetype _Nonnull)initWithDataOutputs:(NSArray<AVCaptureOutput *> * _Nonnull)dataOutputs;
	//	[Export ("initWithDataOutputs:")]
	//	IntPtr Constructor (AVCaptureOutput[] dataOutputs);

	//	// @property (readonly, retain) NSArray<AVCaptureOutput *> * _Nonnull dataOutputs;
	//	[Export ("dataOutputs", ArgumentSemantic.Retain)]
	//	AVCaptureOutput[] DataOutputs { get; }

	//	// -(void)setDelegate:(id<AVCaptureDataOutputSynchronizerDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)delegateCallbackQueue;
	//	[Export ("setDelegate:queue:")]
	//	void SetDelegate ([NullAllowed] AVCaptureDataOutputSynchronizerDelegate @delegate, [NullAllowed] DispatchQueue delegateCallbackQueue);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVCaptureDataOutputSynchronizerDelegate Delegate { get; }

	//	// @property (readonly, nonatomic) id<AVCaptureDataOutputSynchronizerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate")]
	//	NSObject WeakDelegate { get; }

	//	// @property (readonly, nonatomic) dispatch_queue_t _Nullable delegateCallbackQueue;
	//	[NullAllowed, Export ("delegateCallbackQueue")]
	//	DispatchQueue DelegateCallbackQueue { get; }
	//}

	//// @protocol AVCaptureDataOutputSynchronizerDelegate <NSObject>
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVCaptureDataOutputSynchronizerDelegate
	//{
	//	// @required -(void)dataOutputSynchronizer:(AVCaptureDataOutputSynchronizer * _Nonnull)synchronizer didOutputSynchronizedDataCollection:(AVCaptureSynchronizedDataCollection * _Nonnull)synchronizedDataCollection;
	//	[Abstract]
	//	[Export ("dataOutputSynchronizer:didOutputSynchronizedDataCollection:")]
	//	void DidOutputSynchronizedDataCollection (AVCaptureDataOutputSynchronizer synchronizer, AVCaptureSynchronizedDataCollection synchronizedDataCollection);
	//}

	//// @interface AVCaptureSynchronizedDataCollection : NSObject <NSFastEnumeration>
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureSynchronizedDataCollection : INSFastEnumeration
	//{
	//	// -(AVCaptureSynchronizedData * _Nullable)synchronizedDataForCaptureOutput:(AVCaptureOutput * _Nonnull)captureOutput;
	//	[Export ("synchronizedDataForCaptureOutput:")]
	//	[return: NullAllowed]
	//	AVCaptureSynchronizedData SynchronizedDataForCaptureOutput (AVCaptureOutput captureOutput);

	//	// -(AVCaptureSynchronizedData * _Nullable)objectForKeyedSubscript:(AVCaptureOutput * _Nonnull)key;
	//	[Export ("objectForKeyedSubscript:")]
	//	[return: NullAllowed]
	//	AVCaptureSynchronizedData ObjectForKeyedSubscript (AVCaptureOutput key);

	//	// @property (readonly) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }
	//}

	//// @interface AVCaptureSynchronizedData : NSObject
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureSynchronizedData
	//{
	//	// @property (readonly) CMTime timestamp;
	//	[Export ("timestamp")]
	//	CMTime Timestamp { get; }
	//}

	//// @interface AVCaptureSynchronizedSampleBufferData : AVCaptureSynchronizedData
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(AVCaptureSynchronizedData))]
	//interface AVCaptureSynchronizedSampleBufferData
	//{
	//	// @property (readonly) CMSampleBufferRef _Nonnull sampleBuffer;
	//	[Export ("sampleBuffer")]
	//	unsafe CMSampleBufferRef* SampleBuffer { get; }

	//	// @property (readonly) BOOL sampleBufferWasDropped;
	//	[Export ("sampleBufferWasDropped")]
	//	bool SampleBufferWasDropped { get; }

	//	// @property (readonly) AVCaptureOutputDataDroppedReason droppedReason;
	//	[Export ("droppedReason")]
	//	AVCaptureOutputDataDroppedReason DroppedReason { get; }
	//}

	//// @interface AVCaptureSynchronizedMetadataObjectData : AVCaptureSynchronizedData
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(AVCaptureSynchronizedData))]
	//interface AVCaptureSynchronizedMetadataObjectData
	//{
	//	// @property (readonly) NSArray<AVMetadataObject *> * _Nonnull metadataObjects;
	//	[Export ("metadataObjects")]
	//	AVMetadataObject[] MetadataObjects { get; }
	//}

	//// @interface AVCaptureSynchronizedDepthData : AVCaptureSynchronizedData
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(AVCaptureSynchronizedData))]
	//interface AVCaptureSynchronizedDepthData
	//{
	//	// @property (readonly) AVDepthData * _Nonnull depthData;
	//	[Export ("depthData")]
	//	AVDepthData DepthData { get; }

	//	// @property (readonly) BOOL depthDataWasDropped;
	//	[Export ("depthDataWasDropped")]
	//	bool DepthDataWasDropped { get; }

	//	// @property (readonly) AVCaptureOutputDataDroppedReason droppedReason;
	//	[Export ("droppedReason")]
	//	AVCaptureOutputDataDroppedReason DroppedReason { get; }
	//}

	//// @interface AVCaptureInput : NSObject
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureInput
	//{
	//	// @property (readonly, nonatomic) NSArray<AVCaptureInputPort *> * _Nonnull ports;
	//	[Export ("ports")]
	//	AVCaptureInputPort[] Ports { get; }
	//}

	//// @interface AVCaptureInputPort : NSObject
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureInputPort
	//{
	//	// @property (readonly, nonatomic) AVCaptureInput * _Nonnull input;
	//	[Export ("input")]
	//	AVCaptureInput Input { get; }

	//	// @property (readonly, nonatomic) AVMediaType _Nonnull mediaType;
	//	[Export ("mediaType")]
	//	string MediaType { get; }

	//	// @property (readonly, nonatomic) CMFormatDescriptionRef _Nullable formatDescription __attribute__((NSObject));
	//	[NullAllowed, Export ("formatDescription")]
	//	unsafe CMFormatDescriptionRef* FormatDescription { get; }

	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (readonly, nonatomic) CMClockRef _Nullable clock __attribute__((NSObject)) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Mac (10, 9), iOS (7, 0)]
	//	[NullAllowed, Export ("clock")]
	//	unsafe CMClockRef* Clock { get; }
	//}

	//// @interface AVCaptureDeviceInput : AVCaptureInput
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(AVCaptureInput))]
	//interface AVCaptureDeviceInput
	//{
	//	// +(instancetype _Nullable)deviceInputWithDevice:(AVCaptureDevice * _Nonnull)device error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("deviceInputWithDevice:error:")]
	//	[return: NullAllowed]
	//	AVCaptureDeviceInput DeviceInputWithDevice (AVCaptureDevice device, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initWithDevice:(AVCaptureDevice * _Nonnull)device error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initWithDevice:error:")]
	//	IntPtr Constructor (AVCaptureDevice device, [NullAllowed] out NSError outError);

	//	// @property (readonly, nonatomic) AVCaptureDevice * _Nonnull device;
	//	[Export ("device")]
	//	AVCaptureDevice Device { get; }

	//	// @property (nonatomic) BOOL unifiedAutoExposureDefaultsEnabled __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=12.0)));
	//	[NoWatch, NoTV, NoMac, iOS (12, 0)]
	//	[Export ("unifiedAutoExposureDefaultsEnabled")]
	//	bool UnifiedAutoExposureDefaultsEnabled { get; set; }
	//}

	//// @interface AVCaptureScreenInput : AVCaptureInput
	//[NoWatch, NoTV, NoiOS, Mac (10,7)]
	//[BaseType (typeof(AVCaptureInput))]
	//interface AVCaptureScreenInput
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	AVCaptureScreenInput New ();

	//	// @property (nonatomic) CMTime minFrameDuration;
	//	[Export ("minFrameDuration", ArgumentSemantic.Assign)]
	//	CMTime MinFrameDuration { get; set; }

	//	// @property (nonatomic) CGRect cropRect;
	//	[Export ("cropRect", ArgumentSemantic.Assign)]
	//	CGRect CropRect { get; set; }

	//	// @property (nonatomic) CGFloat scaleFactor;
	//	[Export ("scaleFactor")]
	//	nfloat ScaleFactor { get; set; }

	//	// @property (nonatomic) BOOL capturesMouseClicks;
	//	[Export ("capturesMouseClicks")]
	//	bool CapturesMouseClicks { get; set; }

	//	// @property (nonatomic) BOOL capturesCursor __attribute__((availability(macos, introduced=10.8)));
	//	[Mac (10, 8)]
	//	[Export ("capturesCursor")]
	//	bool CapturesCursor { get; set; }

	//	// @property (nonatomic) BOOL removesDuplicateFrames __attribute__((availability(macos, introduced=10.8, deprecated=10.10)));
	//	[Introduced (PlatformName.MacOSX, 10, 8, message: "No longer supported.")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "No longer supported.")]
	//	[Export ("removesDuplicateFrames")]
	//	bool RemovesDuplicateFrames { get; set; }
	//}

	//// @interface AVCaptureMetadataInput : AVCaptureInput
	//[NoWatch, NoTV, NoMac, iOS (9,0)]
	//[BaseType (typeof(AVCaptureInput))]
	//interface AVCaptureMetadataInput
	//{
	//	// +(instancetype _Nonnull)metadataInputWithFormatDescription:(CMMetadataFormatDescriptionRef _Nonnull)desc clock:(CMClockRef _Nonnull)clock;
	//	[Static]
	//	[Export ("metadataInputWithFormatDescription:clock:")]
	//	unsafe AVCaptureMetadataInput MetadataInputWithFormatDescription (CMMetadataFormatDescriptionRef* desc, CMClockRef* clock);

	//	// -(instancetype _Nonnull)initWithFormatDescription:(CMMetadataFormatDescriptionRef _Nonnull)desc clock:(CMClockRef _Nonnull)clock;
	//	[Export ("initWithFormatDescription:clock:")]
	//	unsafe IntPtr Constructor (CMMetadataFormatDescriptionRef* desc, CMClockRef* clock);

	//	// -(BOOL)appendTimedMetadataGroup:(AVTimedMetadataGroup * _Nonnull)metadata error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("appendTimedMetadataGroup:error:")]
	//	bool AppendTimedMetadataGroup (AVTimedMetadataGroup metadata, [NullAllowed] out NSError outError);
	//}

	//// @interface AVCaptureSystemPressureState : NSObject
	//[NoWatch, NoTV, NoMac, iOS (11,1)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCaptureSystemPressureState
	//{
	//	// @property (readonly, atomic) AVCaptureSystemPressureLevel _Nonnull level;
	//	[Export ("level")]
	//	string Level { get; }

	//	// @property (readonly, atomic) AVCaptureSystemPressureFactors factors;
	//	[Export ("factors")]
	//	AVCaptureSystemPressureFactors Factors { get; }
	//}

	//// @interface AVCaptureVideoPreviewLayer : CALayer
	//[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(CALayer))]
	//interface AVCaptureVideoPreviewLayer
	//{
	//	// +(instancetype _Nonnull)layerWithSession:(AVCaptureSession * _Nonnull)session;
	//	[Static]
	//	[Export ("layerWithSession:")]
	//	AVCaptureVideoPreviewLayer LayerWithSession (AVCaptureSession session);

	//	// -(instancetype _Nonnull)initWithSession:(AVCaptureSession * _Nonnull)session;
	//	[Export ("initWithSession:")]
	//	IntPtr Constructor (AVCaptureSession session);

	//	// +(instancetype _Nonnull)layerWithSessionWithNoConnection:(AVCaptureSession * _Nonnull)session __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static]
	//	[Export ("layerWithSessionWithNoConnection:")]
	//	AVCaptureVideoPreviewLayer LayerWithSessionWithNoConnection (AVCaptureSession session);

	//	// -(instancetype _Nonnull)initWithSessionWithNoConnection:(AVCaptureSession * _Nonnull)session __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("initWithSessionWithNoConnection:")]
	//	IntPtr Constructor (AVCaptureSession session);

	//	// @property (retain, nonatomic) AVCaptureSession * _Nullable session;
	//	[NullAllowed, Export ("session", ArgumentSemantic.Retain)]
	//	AVCaptureSession Session { get; set; }

	//	// -(void)setSessionWithNoConnection:(AVCaptureSession * _Nonnull)session __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("setSessionWithNoConnection:")]
	//	void SetSessionWithNoConnection (AVCaptureSession session);

	//	// @property (readonly, nonatomic) AVCaptureConnection * _Nullable connection __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("connection")]
	//	AVCaptureConnection Connection { get; }

	//	// @property (copy) AVLayerVideoGravity _Nonnull videoGravity;
	//	[Export ("videoGravity")]
	//	string VideoGravity { get; set; }

	//	// -(CGPoint)captureDevicePointOfInterestForPoint:(CGPoint)pointInLayer __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoMac, iOS (6,0)]
	//	[Export ("captureDevicePointOfInterestForPoint:")]
	//	CGPoint CaptureDevicePointOfInterestForPoint (CGPoint pointInLayer);

	//	// -(CGPoint)pointForCaptureDevicePointOfInterest:(CGPoint)captureDevicePointOfInterest __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoMac, iOS (6,0)]
	//	[Export ("pointForCaptureDevicePointOfInterest:")]
	//	CGPoint PointForCaptureDevicePointOfInterest (CGPoint captureDevicePointOfInterest);

	//	// -(CGRect)metadataOutputRectOfInterestForRect:(CGRect)rectInLayerCoordinates __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7,0)]
	//	[Export ("metadataOutputRectOfInterestForRect:")]
	//	CGRect MetadataOutputRectOfInterestForRect (CGRect rectInLayerCoordinates);

	//	// -(CGRect)rectForMetadataOutputRectOfInterest:(CGRect)rectInMetadataOutputCoordinates __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoMac, iOS (7,0)]
	//	[Export ("rectForMetadataOutputRectOfInterest:")]
	//	CGRect RectForMetadataOutputRectOfInterest (CGRect rectInMetadataOutputCoordinates);

	//	// -(AVMetadataObject * _Nullable)transformedMetadataObjectForMetadataObject:(AVMetadataObject * _Nonnull)metadataObject __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoMac, iOS (6,0)]
	//	[Export ("transformedMetadataObjectForMetadataObject:")]
	//	[return: NullAllowed]
	//	AVMetadataObject TransformedMetadataObjectForMetadataObject (AVMetadataObject metadataObject);

	//	// @property (readonly, getter = isOrientationSupported, nonatomic) BOOL orientationSupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use AVCaptureConnection's isVideoOrientationSupported instead.")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "Use AVCaptureConnection's isVideoOrientationSupported instead.")]
	//	[NoMac]
	//	[Export ("orientationSupported")]
	//	bool OrientationSupported { [Bind ("isOrientationSupported")] get; }

	//	// @property (nonatomic) AVCaptureVideoOrientation orientation __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use AVCaptureConnection's videoOrientation instead.")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "Use AVCaptureConnection's videoOrientation instead.")]
	//	[NoMac]
	//	[Export ("orientation", ArgumentSemantic.Assign)]
	//	AVCaptureVideoOrientation Orientation { get; set; }

	//	// @property (readonly, getter = isMirroringSupported, nonatomic) BOOL mirroringSupported __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use AVCaptureConnection's isVideoMirroringSupported instead.")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "Use AVCaptureConnection's isVideoMirroringSupported instead.")]
	//	[NoMac]
	//	[Export ("mirroringSupported")]
	//	bool MirroringSupported { [Bind ("isMirroringSupported")] get; }

	//	// @property (nonatomic) BOOL automaticallyAdjustsMirroring __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use AVCaptureConnection's automaticallyAdjustsVideoMirroring instead.")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "Use AVCaptureConnection's automaticallyAdjustsVideoMirroring instead.")]
	//	[NoMac]
	//	[Export ("automaticallyAdjustsMirroring")]
	//	bool AutomaticallyAdjustsMirroring { get; set; }

	//	// @property (getter = isMirrored, nonatomic) BOOL mirrored __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use AVCaptureConnection's videoMirrored instead.")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "Use AVCaptureConnection's videoMirrored instead.")]
	//	[NoMac]
	//	[Export ("mirrored")]
	//	bool Mirrored { [Bind ("isMirrored")] get; set; }
	//}

	//// @interface AVCompositionTrack : AVAssetTrack
	//[iOS (4,0)]
	//[BaseType (typeof(AVAssetTrack))]
	//interface AVCompositionTrack
	//{
	//	// @property (readonly, copy, nonatomic) NSArray<AVCompositionTrackSegment *> * _Nonnull segments;
	//	[Export ("segments", ArgumentSemantic.Copy)]
	//	AVCompositionTrackSegment[] Segments { get; }

	//	// -(AVCompositionTrackSegment * _Nullable)segmentForTrackTime:(CMTime)trackTime;
	//	[Export ("segmentForTrackTime:")]
	//	[return: NullAllowed]
	//	AVCompositionTrackSegment SegmentForTrackTime (CMTime trackTime);
	//}

	//// @interface AVMutableCompositionTrack : AVCompositionTrack
	//[iOS (4,0)]
	//[BaseType (typeof(AVCompositionTrack))]
	//interface AVMutableCompositionTrack
	//{
	//	// @property (nonatomic) CMTimeScale naturalTimeScale;
	//	[Export ("naturalTimeScale")]
	//	int NaturalTimeScale { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable languageCode;
	//	[NullAllowed, Export ("languageCode")]
	//	string LanguageCode { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable extendedLanguageTag;
	//	[NullAllowed, Export ("extendedLanguageTag")]
	//	string ExtendedLanguageTag { get; set; }

	//	// @property (nonatomic) CGAffineTransform preferredTransform;
	//	[Export ("preferredTransform", ArgumentSemantic.Assign)]
	//	CGAffineTransform PreferredTransform { get; set; }

	//	// @property (nonatomic) float preferredVolume;
	//	[Export ("preferredVolume")]
	//	float PreferredVolume { get; set; }

	//	// @property (copy, nonatomic) NSArray<AVCompositionTrackSegment *> * _Null_unspecified segments;
	//	[Export ("segments", ArgumentSemantic.Copy)]
	//	AVCompositionTrackSegment[] Segments { get; set; }

	//	// -(BOOL)insertTimeRange:(CMTimeRange)timeRange ofTrack:(AVAssetTrack * _Nonnull)track atTime:(CMTime)startTime error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("insertTimeRange:ofTrack:atTime:error:")]
	//	bool InsertTimeRange (CMTimeRange timeRange, AVAssetTrack track, CMTime startTime, [NullAllowed] out NSError outError);

	//	// -(BOOL)insertTimeRanges:(NSArray<NSValue *> * _Nonnull)timeRanges ofTracks:(NSArray<AVAssetTrack *> * _Nonnull)tracks atTime:(CMTime)startTime error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("insertTimeRanges:ofTracks:atTime:error:")]
	//	bool InsertTimeRanges (NSValue[] timeRanges, AVAssetTrack[] tracks, CMTime startTime, [NullAllowed] out NSError outError);

	//	// -(void)insertEmptyTimeRange:(CMTimeRange)timeRange;
	//	[Export ("insertEmptyTimeRange:")]
	//	void InsertEmptyTimeRange (CMTimeRange timeRange);

	//	// -(void)removeTimeRange:(CMTimeRange)timeRange;
	//	[Export ("removeTimeRange:")]
	//	void RemoveTimeRange (CMTimeRange timeRange);

	//	// -(void)scaleTimeRange:(CMTimeRange)timeRange toDuration:(CMTime)duration;
	//	[Export ("scaleTimeRange:toDuration:")]
	//	void ScaleTimeRange (CMTimeRange timeRange, CMTime duration);

	//	// -(BOOL)validateTrackSegments:(NSArray<AVCompositionTrackSegment *> * _Nonnull)trackSegments error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("validateTrackSegments:error:")]
	//	bool ValidateTrackSegments (AVCompositionTrackSegment[] trackSegments, [NullAllowed] out NSError outError);

	//	// -(void)addTrackAssociationToTrack:(AVCompositionTrack * _Nonnull)compositionTrack type:(AVTrackAssociationType _Nonnull)trackAssociationType __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	//	[Export ("addTrackAssociationToTrack:type:")]
	//	void AddTrackAssociationToTrack (AVCompositionTrack compositionTrack, string trackAssociationType);

	//	// -(void)removeTrackAssociationToTrack:(AVCompositionTrack * _Nonnull)compositionTrack type:(AVTrackAssociationType _Nonnull)trackAssociationType __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	//	[Export ("removeTrackAssociationToTrack:type:")]
	//	void RemoveTrackAssociationToTrack (AVCompositionTrack compositionTrack, string trackAssociationType);
	//}

	//// @interface AVComposition : AVAsset <NSMutableCopying>
	//[iOS (4,0)]
	//[BaseType (typeof(AVAsset))]
	//interface AVComposition : INSMutableCopying
	//{
	//	// @property (readonly, nonatomic) NSArray<AVCompositionTrack *> * _Nonnull tracks;
	//	[Export ("tracks")]
	//	AVCompositionTrack[] Tracks { get; }

	//	// @property (readonly, nonatomic) CGSize naturalSize;
	//	[Export ("naturalSize")]
	//	CGSize NaturalSize { get; }

	//	// @property (readonly, copy, nonatomic) NSDictionary<NSString *,id> * _Nonnull URLAssetInitializationOptions __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("URLAssetInitializationOptions", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> URLAssetInitializationOptions { get; }
	//}

	//// @interface AVCompositionTrackInspection (AVComposition)
	//[Category]
	//[BaseType (typeof(AVComposition))]
	//interface AVComposition_AVCompositionTrackInspection
	//{
	//	// -(AVCompositionTrack * _Nullable)trackWithTrackID:(CMPersistentTrackID)trackID;
	//	[Export ("trackWithTrackID:")]
	//	[return: NullAllowed]
	//	AVCompositionTrack TrackWithTrackID (int trackID);

	//	// -(NSArray<AVCompositionTrack *> * _Nonnull)tracksWithMediaType:(AVMediaType _Nonnull)mediaType;
	//	[Export ("tracksWithMediaType:")]
	//	AVCompositionTrack[] TracksWithMediaType (string mediaType);

	//	// -(NSArray<AVCompositionTrack *> * _Nonnull)tracksWithMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic;
	//	[Export ("tracksWithMediaCharacteristic:")]
	//	AVCompositionTrack[] TracksWithMediaCharacteristic (string mediaCharacteristic);
	//}

	//// @interface AVMutableComposition : AVComposition
	//[iOS (4,0)]
	//[BaseType (typeof(AVComposition))]
	//interface AVMutableComposition
	//{
	//	// @property (readonly, nonatomic) NSArray<AVMutableCompositionTrack *> * _Nonnull tracks;
	//	[Export ("tracks")]
	//	AVMutableCompositionTrack[] Tracks { get; }

	//	// @property (nonatomic) CGSize naturalSize;
	//	[Export ("naturalSize", ArgumentSemantic.Assign)]
	//	CGSize NaturalSize { get; set; }

	//	// +(instancetype _Nonnull)composition;
	//	[Static]
	//	[Export ("composition")]
	//	AVMutableComposition Composition ();

	//	// +(instancetype _Nonnull)compositionWithURLAssetInitializationOptions:(NSDictionary<NSString *,id> * _Nullable)URLAssetInitializationOptions __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("compositionWithURLAssetInitializationOptions:")]
	//	AVMutableComposition CompositionWithURLAssetInitializationOptions ([NullAllowed] NSDictionary<NSString, NSObject> URLAssetInitializationOptions);
	//}

	//// @interface AVMutableCompositionCompositionLevelEditing (AVMutableComposition)
	//[Category]
	//[BaseType (typeof(AVMutableComposition))]
	//interface AVMutableComposition_AVMutableCompositionCompositionLevelEditing
	//{
	//	// -(BOOL)insertTimeRange:(CMTimeRange)timeRange ofAsset:(AVAsset * _Nonnull)asset atTime:(CMTime)startTime error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("insertTimeRange:ofAsset:atTime:error:")]
	//	bool InsertTimeRange (CMTimeRange timeRange, AVAsset asset, CMTime startTime, [NullAllowed] out NSError outError);

	//	// -(void)insertEmptyTimeRange:(CMTimeRange)timeRange;
	//	[Export ("insertEmptyTimeRange:")]
	//	void InsertEmptyTimeRange (CMTimeRange timeRange);

	//	// -(void)removeTimeRange:(CMTimeRange)timeRange;
	//	[Export ("removeTimeRange:")]
	//	void RemoveTimeRange (CMTimeRange timeRange);

	//	// -(void)scaleTimeRange:(CMTimeRange)timeRange toDuration:(CMTime)duration;
	//	[Export ("scaleTimeRange:toDuration:")]
	//	void ScaleTimeRange (CMTimeRange timeRange, CMTime duration);
	//}

	//// @interface AVMutableCompositionTrackLevelEditing (AVMutableComposition)
	//[Category]
	//[BaseType (typeof(AVMutableComposition))]
	//interface AVMutableComposition_AVMutableCompositionTrackLevelEditing
	//{
	//	// -(AVMutableCompositionTrack * _Nullable)addMutableTrackWithMediaType:(AVMediaType _Nonnull)mediaType preferredTrackID:(CMPersistentTrackID)preferredTrackID;
	//	[Export ("addMutableTrackWithMediaType:preferredTrackID:")]
	//	[return: NullAllowed]
	//	AVMutableCompositionTrack AddMutableTrackWithMediaType (string mediaType, int preferredTrackID);

	//	// -(void)removeTrack:(AVCompositionTrack * _Nonnull)track;
	//	[Export ("removeTrack:")]
	//	void RemoveTrack (AVCompositionTrack track);

	//	// -(AVMutableCompositionTrack * _Nullable)mutableTrackCompatibleWithTrack:(AVAssetTrack * _Nonnull)track;
	//	[Export ("mutableTrackCompatibleWithTrack:")]
	//	[return: NullAllowed]
	//	AVMutableCompositionTrack MutableTrackCompatibleWithTrack (AVAssetTrack track);
	//}

	//// @interface AVMutableCompositionTrackInspection (AVMutableComposition)
	//[Category]
	//[BaseType (typeof(AVMutableComposition))]
	//interface AVMutableComposition_AVMutableCompositionTrackInspection
	//{
	//	// -(AVMutableCompositionTrack * _Nullable)trackWithTrackID:(CMPersistentTrackID)trackID;
	//	[Export ("trackWithTrackID:")]
	//	[return: NullAllowed]
	//	AVMutableCompositionTrack TrackWithTrackID (int trackID);

	//	// -(NSArray<AVMutableCompositionTrack *> * _Nonnull)tracksWithMediaType:(AVMediaType _Nonnull)mediaType;
	//	[Export ("tracksWithMediaType:")]
	//	AVMutableCompositionTrack[] TracksWithMediaType (string mediaType);

	//	// -(NSArray<AVMutableCompositionTrack *> * _Nonnull)tracksWithMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic;
	//	[Export ("tracksWithMediaCharacteristic:")]
	//	AVMutableCompositionTrack[] TracksWithMediaCharacteristic (string mediaCharacteristic);
	//}

	//// @interface AVCompositionTrackSegment : AVAssetTrackSegment
	//[iOS (4,0)]
	//[BaseType (typeof(AVAssetTrackSegment))]
	//interface AVCompositionTrackSegment
	//{
	//	// +(instancetype _Nonnull)compositionTrackSegmentWithURL:(NSURL * _Nonnull)URL trackID:(CMPersistentTrackID)trackID sourceTimeRange:(CMTimeRange)sourceTimeRange targetTimeRange:(CMTimeRange)targetTimeRange;
	//	[Static]
	//	[Export ("compositionTrackSegmentWithURL:trackID:sourceTimeRange:targetTimeRange:")]
	//	AVCompositionTrackSegment CompositionTrackSegmentWithURL (NSUrl URL, int trackID, CMTimeRange sourceTimeRange, CMTimeRange targetTimeRange);

	//	// +(instancetype _Nonnull)compositionTrackSegmentWithTimeRange:(CMTimeRange)timeRange;
	//	[Static]
	//	[Export ("compositionTrackSegmentWithTimeRange:")]
	//	AVCompositionTrackSegment CompositionTrackSegmentWithTimeRange (CMTimeRange timeRange);

	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL trackID:(CMPersistentTrackID)trackID sourceTimeRange:(CMTimeRange)sourceTimeRange targetTimeRange:(CMTimeRange)targetTimeRange __attribute__((objc_designated_initializer));
	//	[Export ("initWithURL:trackID:sourceTimeRange:targetTimeRange:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl URL, int trackID, CMTimeRange sourceTimeRange, CMTimeRange targetTimeRange);

	//	// -(instancetype _Nonnull)initWithTimeRange:(CMTimeRange)timeRange __attribute__((objc_designated_initializer));
	//	[Export ("initWithTimeRange:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CMTimeRange timeRange);

	//	// @property (readonly, getter = isEmpty, nonatomic) BOOL empty;
	//	[Export ("empty")]
	//	bool Empty { [Bind ("isEmpty")] get; }

	//	// @property (readonly, nonatomic) NSURL * _Nullable sourceURL;
	//	[NullAllowed, Export ("sourceURL")]
	//	NSUrl SourceURL { get; }

	//	// @property (readonly, nonatomic) CMPersistentTrackID sourceTrackID;
	//	[Export ("sourceTrackID")]
	//	int SourceTrackID { get; }
	//}

	//// @interface AVCameraCalibrationData : NSObject
	//[TV (11,0), NoWatch, Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVCameraCalibrationData
	//{
	//	// @property (readonly, nonatomic) matrix_float3x3 intrinsicMatrix;
	//	[Export ("intrinsicMatrix")]
	//	matrix_float3x3 IntrinsicMatrix { get; }

	//	// @property (readonly, nonatomic) CGSize intrinsicMatrixReferenceDimensions;
	//	[Export ("intrinsicMatrixReferenceDimensions")]
	//	CGSize IntrinsicMatrixReferenceDimensions { get; }

	//	// @property (readonly, nonatomic) matrix_float4x3 extrinsicMatrix;
	//	[Export ("extrinsicMatrix")]
	//	matrix_float4x3 ExtrinsicMatrix { get; }

	//	// @property (readonly, nonatomic) float pixelSize;
	//	[Export ("pixelSize")]
	//	float PixelSize { get; }

	//	// @property (readonly, nonatomic) NSData * _Nullable lensDistortionLookupTable;
	//	[NullAllowed, Export ("lensDistortionLookupTable")]
	//	NSData LensDistortionLookupTable { get; }

	//	// @property (readonly, nonatomic) NSData * _Nullable inverseLensDistortionLookupTable;
	//	[NullAllowed, Export ("inverseLensDistortionLookupTable")]
	//	NSData InverseLensDistortionLookupTable { get; }

	//	// @property (readonly, nonatomic) CGPoint lensDistortionCenter;
	//	[Export ("lensDistortionCenter")]
	//	CGPoint LensDistortionCenter { get; }
	//}

	//// @interface AVDepthData : NSObject
	//[TV (11,0), NoWatch, Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVDepthData
	//{
	//	// +(instancetype _Nullable)depthDataFromDictionaryRepresentation:(NSDictionary * _Nonnull)imageSourceAuxDataInfoDictionary error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("depthDataFromDictionaryRepresentation:error:")]
	//	[return: NullAllowed]
	//	AVDepthData DepthDataFromDictionaryRepresentation (NSDictionary imageSourceAuxDataInfoDictionary, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nonnull)depthDataByConvertingToDepthDataType:(OSType)depthDataType;
	//	[Export ("depthDataByConvertingToDepthDataType:")]
	//	AVDepthData DepthDataByConvertingToDepthDataType (uint depthDataType);

	//	// -(instancetype _Nonnull)depthDataByApplyingExifOrientation:(CGImagePropertyOrientation)exifOrientation;
	//	[Export ("depthDataByApplyingExifOrientation:")]
	//	AVDepthData DepthDataByApplyingExifOrientation (CGImagePropertyOrientation exifOrientation);

	//	// -(instancetype _Nullable)depthDataByReplacingDepthDataMapWithPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("depthDataByReplacingDepthDataMapWithPixelBuffer:error:")]
	//	[return: NullAllowed]
	//	unsafe AVDepthData DepthDataByReplacingDepthDataMapWithPixelBuffer (CVPixelBufferRef* pixelBuffer, [NullAllowed] out NSError outError);

	//	// @property (readonly) NSArray<NSNumber *> * _Nonnull availableDepthDataTypes;
	//	[Export ("availableDepthDataTypes")]
	//	NSNumber[] AvailableDepthDataTypes { get; }

	//	// -(NSDictionary * _Nullable)dictionaryRepresentationForAuxiliaryDataType:(NSString * _Nullable * _Nullable)outAuxDataType;
	//	[Export ("dictionaryRepresentationForAuxiliaryDataType:")]
	//	[return: NullAllowed]
	//	NSDictionary DictionaryRepresentationForAuxiliaryDataType ([NullAllowed] out string outAuxDataType);

	//	// @property (readonly) OSType depthDataType;
	//	[Export ("depthDataType")]
	//	uint DepthDataType { get; }

	//	// @property (readonly) CVPixelBufferRef _Nonnull depthDataMap __attribute__((NSObject)) __attribute__((objc_returns_inner_pointer));
	//	[Export ("depthDataMap")]
	//	unsafe CVPixelBufferRef* DepthDataMap { get; }

	//	// @property (readonly) AVDepthDataQuality depthDataQuality;
	//	[Export ("depthDataQuality")]
	//	AVDepthDataQuality DepthDataQuality { get; }

	//	// @property (readonly, getter = isDepthDataFiltered) BOOL depthDataFiltered;
	//	[Export ("depthDataFiltered")]
	//	bool DepthDataFiltered { [Bind ("isDepthDataFiltered")] get; }

	//	// @property (readonly) AVDepthDataAccuracy depthDataAccuracy;
	//	[Export ("depthDataAccuracy")]
	//	AVDepthDataAccuracy DepthDataAccuracy { get; }

	//	// @property (readonly) AVCameraCalibrationData * _Nullable cameraCalibrationData;
	//	[NullAllowed, Export ("cameraCalibrationData")]
	//	AVCameraCalibrationData CameraCalibrationData { get; }
	//}

	//// @interface AVPortraitEffectsMatte : NSObject
	//[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVPortraitEffectsMatte
	//{
	//	// +(instancetype _Nullable)portraitEffectsMatteFromDictionaryRepresentation:(NSDictionary * _Nonnull)imageSourceAuxDataInfoDictionary error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("portraitEffectsMatteFromDictionaryRepresentation:error:")]
	//	[return: NullAllowed]
	//	AVPortraitEffectsMatte PortraitEffectsMatteFromDictionaryRepresentation (NSDictionary imageSourceAuxDataInfoDictionary, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nonnull)portraitEffectsMatteByApplyingExifOrientation:(CGImagePropertyOrientation)exifOrientation;
	//	[Export ("portraitEffectsMatteByApplyingExifOrientation:")]
	//	AVPortraitEffectsMatte PortraitEffectsMatteByApplyingExifOrientation (CGImagePropertyOrientation exifOrientation);

	//	// -(instancetype _Nullable)portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer:error:")]
	//	[return: NullAllowed]
	//	unsafe AVPortraitEffectsMatte PortraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer (CVPixelBufferRef* pixelBuffer, [NullAllowed] out NSError outError);

	//	// -(NSDictionary * _Nullable)dictionaryRepresentationForAuxiliaryDataType:(NSString * _Nullable * _Nullable)outAuxDataType;
	//	[Export ("dictionaryRepresentationForAuxiliaryDataType:")]
	//	[return: NullAllowed]
	//	NSDictionary DictionaryRepresentationForAuxiliaryDataType ([NullAllowed] out string outAuxDataType);

	//	// @property (readonly) OSType pixelFormatType;
	//	[Export ("pixelFormatType")]
	//	uint PixelFormatType { get; }

	//	// @property (readonly) CVPixelBufferRef _Nonnull mattingImage __attribute__((NSObject)) __attribute__((objc_returns_inner_pointer));
	//	[Export ("mattingImage")]
	//	unsafe CVPixelBufferRef* MattingImage { get; }
	//}

	//// typedef void (^AVAudioNodeCompletionHandler)();
	//delegate void AVAudioNodeCompletionHandler ();

	//// @interface AVAudioBuffer : NSObject <NSCopying, NSMutableCopying>
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioBuffer : INSCopying, INSMutableCopying
	//{
	//	// @property (readonly, nonatomic) AVAudioFormat * _Nonnull format;
	//	[Export ("format")]
	//	AVAudioFormat Format { get; }

	//	// @property (readonly, nonatomic) const AudioBufferList * _Nonnull audioBufferList;
	//	[Export ("audioBufferList")]
	//	unsafe AudioBufferList* AudioBufferList { get; }

	//	// @property (readonly, nonatomic) AudioBufferList * _Nonnull mutableAudioBufferList;
	//	[Export ("mutableAudioBufferList")]
	//	unsafe AudioBufferList* MutableAudioBufferList { get; }
	//}

	//// @interface AVAudioPCMBuffer : AVAudioBuffer
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioBuffer))]
	//interface AVAudioPCMBuffer
	//{
	//	// -(instancetype _Nullable)initWithPCMFormat:(AVAudioFormat * _Nonnull)format frameCapacity:(AVAudioFrameCount)frameCapacity __attribute__((objc_designated_initializer));
	//	[Export ("initWithPCMFormat:frameCapacity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAudioFormat format, uint frameCapacity);

	//	// @property (readonly, nonatomic) AVAudioFrameCount frameCapacity;
	//	[Export ("frameCapacity")]
	//	uint FrameCapacity { get; }

	//	// @property (nonatomic) AVAudioFrameCount frameLength;
	//	[Export ("frameLength")]
	//	uint FrameLength { get; set; }

	//	// @property (readonly, nonatomic) NSUInteger stride;
	//	[Export ("stride")]
	//	nuint Stride { get; }

	//	// @property (readonly, nonatomic) float *const  _Nonnull * _Nullable floatChannelData;
	//	[Export ("floatChannelData")]
	//	unsafe float** FloatChannelData { get; }

	//	// @property (readonly, nonatomic) int16_t *const  _Nonnull * _Nullable int16ChannelData;
	//	[Export ("int16ChannelData")]
	//	unsafe short** Int16ChannelData { get; }

	//	// @property (readonly, nonatomic) int32_t *const  _Nonnull * _Nullable int32ChannelData;
	//	[Export ("int32ChannelData")]
	//	unsafe int** Int32ChannelData { get; }
	//}

	//// @interface AVAudioCompressedBuffer : AVAudioBuffer
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(AVAudioBuffer))]
	//interface AVAudioCompressedBuffer
	//{
	//	// -(instancetype _Nonnull)initWithFormat:(AVAudioFormat * _Nonnull)format packetCapacity:(AVAudioPacketCount)packetCapacity maximumPacketSize:(NSInteger)maximumPacketSize;
	//	[Export ("initWithFormat:packetCapacity:maximumPacketSize:")]
	//	IntPtr Constructor (AVAudioFormat format, uint packetCapacity, nint maximumPacketSize);

	//	// -(instancetype _Nonnull)initWithFormat:(AVAudioFormat * _Nonnull)format packetCapacity:(AVAudioPacketCount)packetCapacity;
	//	[Export ("initWithFormat:packetCapacity:")]
	//	IntPtr Constructor (AVAudioFormat format, uint packetCapacity);

	//	// @property (readonly, nonatomic) AVAudioPacketCount packetCapacity;
	//	[Export ("packetCapacity")]
	//	uint PacketCapacity { get; }

	//	// @property (nonatomic) AVAudioPacketCount packetCount;
	//	[Export ("packetCount")]
	//	uint PacketCount { get; set; }

	//	// @property (readonly, nonatomic) NSInteger maximumPacketSize;
	//	[Export ("maximumPacketSize")]
	//	nint MaximumPacketSize { get; }

	//	// @property (readonly, nonatomic) void * _Nonnull data;
	//	[Export ("data")]
	//	unsafe void* Data { get; }

	//	// @property (readonly, nonatomic) uint32_t byteCapacity __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("byteCapacity")]
	//	uint ByteCapacity { get; }

	//	// @property (nonatomic) uint32_t byteLength __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("byteLength")]
	//	uint ByteLength { get; set; }

	//	// @property (readonly, nonatomic) AudioStreamPacketDescription * _Nullable packetDescriptions;
	//	[NullAllowed, Export ("packetDescriptions")]
	//	unsafe AudioStreamPacketDescription* PacketDescriptions { get; }
	//}

	//// @interface AVAudioChannelLayout : NSObject <NSSecureCoding>
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAudioChannelLayout : INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithLayoutTag:(AudioChannelLayoutTag)layoutTag;
	//	[Export ("initWithLayoutTag:")]
	//	IntPtr Constructor (uint layoutTag);

	//	// -(instancetype _Nonnull)initWithLayout:(const AudioChannelLayout * _Nonnull)layout __attribute__((objc_designated_initializer));
	//	[Export ("initWithLayout:")]
	//	[DesignatedInitializer]
	//	unsafe IntPtr Constructor (AudioChannelLayout* layout);

	//	// -(BOOL)isEqual:(id _Nonnull)object;
	//	[Export ("isEqual:")]
	//	bool IsEqual (NSObject @object);

	//	// +(instancetype _Nonnull)layoutWithLayoutTag:(AudioChannelLayoutTag)layoutTag;
	//	[Static]
	//	[Export ("layoutWithLayoutTag:")]
	//	AVAudioChannelLayout LayoutWithLayoutTag (uint layoutTag);

	//	// +(instancetype _Nonnull)layoutWithLayout:(const AudioChannelLayout * _Nonnull)layout;
	//	[Static]
	//	[Export ("layoutWithLayout:")]
	//	unsafe AVAudioChannelLayout LayoutWithLayout (AudioChannelLayout* layout);

	//	// @property (readonly, nonatomic) AudioChannelLayoutTag layoutTag;
	//	[Export ("layoutTag")]
	//	uint LayoutTag { get; }

	//	// @property (readonly, nonatomic) const AudioChannelLayout * _Nonnull layout;
	//	[Export ("layout")]
	//	unsafe AudioChannelLayout* Layout { get; }

	//	// @property (readonly, nonatomic) AVAudioChannelCount channelCount;
	//	[Export ("channelCount")]
	//	uint ChannelCount { get; }
	//}

	//// @interface AVAudioConnectionPoint : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAudioConnectionPoint
	//{
	//	// -(instancetype _Nonnull)initWithNode:(AVAudioNode * _Nonnull)node bus:(AVAudioNodeBus)bus __attribute__((objc_designated_initializer));
	//	[Export ("initWithNode:bus:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAudioNode node, nuint bus);

	//	// @property (readonly, nonatomic, weak) AVAudioNode * _Nullable node;
	//	[NullAllowed, Export ("node", ArgumentSemantic.Weak)]
	//	AVAudioNode Node { get; }

	//	// @property (readonly, nonatomic) AVAudioNodeBus bus;
	//	[Export ("bus")]
	//	nuint Bus { get; }
	//}

	//// @interface AVAudioFormat : NSObject <NSSecureCoding>
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioFormat : INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithStreamDescription:(const AudioStreamBasicDescription * _Nonnull)asbd;
	//	[Export ("initWithStreamDescription:")]
	//	unsafe IntPtr Constructor (AudioStreamBasicDescription* asbd);

	//	// -(instancetype _Nullable)initWithStreamDescription:(const AudioStreamBasicDescription * _Nonnull)asbd channelLayout:(AVAudioChannelLayout * _Nullable)layout;
	//	[Export ("initWithStreamDescription:channelLayout:")]
	//	unsafe IntPtr Constructor (AudioStreamBasicDescription* asbd, [NullAllowed] AVAudioChannelLayout layout);

	//	// -(instancetype _Nullable)initStandardFormatWithSampleRate:(double)sampleRate channels:(AVAudioChannelCount)channels;
	//	[Export ("initStandardFormatWithSampleRate:channels:")]
	//	IntPtr Constructor (double sampleRate, uint channels);

	//	// -(instancetype _Nonnull)initStandardFormatWithSampleRate:(double)sampleRate channelLayout:(AVAudioChannelLayout * _Nonnull)layout;
	//	[Export ("initStandardFormatWithSampleRate:channelLayout:")]
	//	IntPtr Constructor (double sampleRate, AVAudioChannelLayout layout);

	//	// -(instancetype _Nullable)initWithCommonFormat:(AVAudioCommonFormat)format sampleRate:(double)sampleRate channels:(AVAudioChannelCount)channels interleaved:(BOOL)interleaved;
	//	[Export ("initWithCommonFormat:sampleRate:channels:interleaved:")]
	//	IntPtr Constructor (AVAudioCommonFormat format, double sampleRate, uint channels, bool interleaved);

	//	// -(instancetype _Nonnull)initWithCommonFormat:(AVAudioCommonFormat)format sampleRate:(double)sampleRate interleaved:(BOOL)interleaved channelLayout:(AVAudioChannelLayout * _Nonnull)layout;
	//	[Export ("initWithCommonFormat:sampleRate:interleaved:channelLayout:")]
	//	IntPtr Constructor (AVAudioCommonFormat format, double sampleRate, bool interleaved, AVAudioChannelLayout layout);

	//	// -(instancetype _Nullable)initWithSettings:(NSDictionary<NSString *,id> * _Nonnull)settings;
	//	[Export ("initWithSettings:")]
	//	IntPtr Constructor (NSDictionary<NSString, NSObject> settings);

	//	// -(instancetype _Nonnull)initWithCMAudioFormatDescription:(CMAudioFormatDescriptionRef _Nonnull)formatDescription __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("initWithCMAudioFormatDescription:")]
	//	unsafe IntPtr Constructor (CMAudioFormatDescriptionRef* formatDescription);

	//	// -(BOOL)isEqual:(id _Nonnull)object;
	//	[Export ("isEqual:")]
	//	bool IsEqual (NSObject @object);

	//	// @property (readonly, getter = isStandard, nonatomic) BOOL standard;
	//	[Export ("standard")]
	//	bool Standard { [Bind ("isStandard")] get; }

	//	// @property (readonly, nonatomic) AVAudioCommonFormat commonFormat;
	//	[Export ("commonFormat")]
	//	AVAudioCommonFormat CommonFormat { get; }

	//	// @property (readonly, nonatomic) AVAudioChannelCount channelCount;
	//	[Export ("channelCount")]
	//	uint ChannelCount { get; }

	//	// @property (readonly, nonatomic) double sampleRate;
	//	[Export ("sampleRate")]
	//	double SampleRate { get; }

	//	// @property (readonly, getter = isInterleaved, nonatomic) BOOL interleaved;
	//	[Export ("interleaved")]
	//	bool Interleaved { [Bind ("isInterleaved")] get; }

	//	// @property (readonly, nonatomic) const AudioStreamBasicDescription * _Nonnull streamDescription;
	//	[Export ("streamDescription")]
	//	unsafe AudioStreamBasicDescription* StreamDescription { get; }

	//	// @property (readonly, nonatomic) AVAudioChannelLayout * _Nullable channelLayout;
	//	[NullAllowed, Export ("channelLayout")]
	//	AVAudioChannelLayout ChannelLayout { get; }

	//	// @property (retain, nonatomic) NSData * _Nullable magicCookie __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[NullAllowed, Export ("magicCookie", ArgumentSemantic.Retain)]
	//	NSData MagicCookie { get; set; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nonnull settings;
	//	[Export ("settings")]
	//	NSDictionary<NSString, NSObject> Settings { get; }

	//	// @property (readonly, nonatomic) CMAudioFormatDescriptionRef _Nonnull formatDescription __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("formatDescription")]
	//	unsafe CMAudioFormatDescriptionRef* FormatDescription { get; }
	//}

	//// typedef AVAudioBuffer * _Nullable (^AVAudioConverterInputBlock)(AVAudioPacketCount, AVAudioConverterInputStatus * _Nonnull);
	//unsafe delegate AVAudioBuffer AVAudioConverterInputBlock (uint arg0, AVAudioConverterInputStatus* arg1);

	//// @interface AVAudioConverter : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioConverter
	//{
	//	// -(instancetype _Nullable)initFromFormat:(AVAudioFormat * _Nonnull)fromFormat toFormat:(AVAudioFormat * _Nonnull)toFormat;
	//	[Export ("initFromFormat:toFormat:")]
	//	IntPtr Constructor (AVAudioFormat fromFormat, AVAudioFormat toFormat);

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();

	//	// @property (readonly, nonatomic) AVAudioFormat * _Nonnull inputFormat;
	//	[Export ("inputFormat")]
	//	AVAudioFormat InputFormat { get; }

	//	// @property (readonly, nonatomic) AVAudioFormat * _Nonnull outputFormat;
	//	[Export ("outputFormat")]
	//	AVAudioFormat OutputFormat { get; }

	//	// @property (retain, nonatomic) NSArray<NSNumber *> * _Nonnull channelMap;
	//	[Export ("channelMap", ArgumentSemantic.Retain)]
	//	NSNumber[] ChannelMap { get; set; }

	//	// @property (retain, nonatomic) NSData * _Nullable magicCookie;
	//	[NullAllowed, Export ("magicCookie", ArgumentSemantic.Retain)]
	//	NSData MagicCookie { get; set; }

	//	// @property (nonatomic) BOOL downmix;
	//	[Export ("downmix")]
	//	bool Downmix { get; set; }

	//	// @property (nonatomic) BOOL dither;
	//	[Export ("dither")]
	//	bool Dither { get; set; }

	//	// @property (nonatomic) NSInteger sampleRateConverterQuality;
	//	[Export ("sampleRateConverterQuality")]
	//	nint SampleRateConverterQuality { get; set; }

	//	// @property (retain, nonatomic) NSString * _Nullable sampleRateConverterAlgorithm;
	//	[NullAllowed, Export ("sampleRateConverterAlgorithm", ArgumentSemantic.Retain)]
	//	string SampleRateConverterAlgorithm { get; set; }

	//	// @property (nonatomic) AVAudioConverterPrimeMethod primeMethod;
	//	[Export ("primeMethod", ArgumentSemantic.Assign)]
	//	AVAudioConverterPrimeMethod PrimeMethod { get; set; }

	//	// @property (nonatomic) AVAudioConverterPrimeInfo primeInfo;
	//	[Export ("primeInfo", ArgumentSemantic.Assign)]
	//	AVAudioConverterPrimeInfo PrimeInfo { get; set; }

	//	// -(BOOL)convertToBuffer:(AVAudioPCMBuffer * _Nonnull)outputBuffer fromBuffer:(const AVAudioPCMBuffer * _Nonnull)inputBuffer error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("convertToBuffer:fromBuffer:error:")]
	//	bool ConvertToBuffer (AVAudioPcmBuffer outputBuffer, AVAudioPcmBuffer inputBuffer, [NullAllowed] out NSError outError);

	//	// -(AVAudioConverterOutputStatus)convertToBuffer:(AVAudioBuffer * _Nonnull)outputBuffer error:(NSError * _Nullable * _Nullable)outError withInputFromBlock:(AVAudioConverterInputBlock _Nonnull)inputBlock;
	//	[Export ("convertToBuffer:error:withInputFromBlock:")]
	//	AVAudioConverterOutputStatus ConvertToBuffer (AVAudioBuffer outputBuffer, [NullAllowed] out NSError outError, AVAudioConverterInputBlock inputBlock);
	//}

	//// @interface Encoding (AVAudioConverter)
	//[Category]
	//[BaseType (typeof(AVAudioConverter))]
	//interface AVAudioConverter_Encoding
	//{
	//	// @property (nonatomic) NSInteger bitRate;
	//	[Export ("bitRate")]
	//	nint BitRate { get; set; }

	//	// @property (retain, nonatomic) NSString * _Nullable bitRateStrategy;
	//	[NullAllowed, Export ("bitRateStrategy", ArgumentSemantic.Retain)]
	//	string BitRateStrategy { get; set; }

	//	// @property (readonly, nonatomic) NSInteger maximumOutputPacketSize;
	//	[Export ("maximumOutputPacketSize")]
	//	nint MaximumOutputPacketSize { get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nullable availableEncodeBitRates;
	//	[NullAllowed, Export ("availableEncodeBitRates")]
	//	NSNumber[] AvailableEncodeBitRates { get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nullable applicableEncodeBitRates;
	//	[NullAllowed, Export ("applicableEncodeBitRates")]
	//	NSNumber[] ApplicableEncodeBitRates { get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nullable availableEncodeSampleRates;
	//	[NullAllowed, Export ("availableEncodeSampleRates")]
	//	NSNumber[] AvailableEncodeSampleRates { get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nullable applicableEncodeSampleRates;
	//	[NullAllowed, Export ("applicableEncodeSampleRates")]
	//	NSNumber[] ApplicableEncodeSampleRates { get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nullable availableEncodeChannelLayoutTags;
	//	[NullAllowed, Export ("availableEncodeChannelLayoutTags")]
	//	NSNumber[] AvailableEncodeChannelLayoutTags { get; }
	//}

	//// typedef void (^AVAudioNodeTapBlock)(AVAudioPCMBuffer * _Nonnull, AVAudioTime * _Nonnull);
	//delegate void AVAudioNodeTapBlock (AVAudioPcmBuffer arg0, AVAudioTime arg1);

	//// @interface AVAudioNode : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioNode
	//{
	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();

	//	// -(AVAudioFormat * _Nonnull)inputFormatForBus:(AVAudioNodeBus)bus;
	//	[Export ("inputFormatForBus:")]
	//	AVAudioFormat InputFormatForBus (nuint bus);

	//	// -(AVAudioFormat * _Nonnull)outputFormatForBus:(AVAudioNodeBus)bus;
	//	[Export ("outputFormatForBus:")]
	//	AVAudioFormat OutputFormatForBus (nuint bus);

	//	// -(NSString * _Nullable)nameForInputBus:(AVAudioNodeBus)bus;
	//	[Export ("nameForInputBus:")]
	//	[return: NullAllowed]
	//	string NameForInputBus (nuint bus);

	//	// -(NSString * _Nullable)nameForOutputBus:(AVAudioNodeBus)bus;
	//	[Export ("nameForOutputBus:")]
	//	[return: NullAllowed]
	//	string NameForOutputBus (nuint bus);

	//	// -(void)installTapOnBus:(AVAudioNodeBus)bus bufferSize:(AVAudioFrameCount)bufferSize format:(AVAudioFormat * _Nullable)format block:(AVAudioNodeTapBlock _Nonnull)tapBlock;
	//	[Export ("installTapOnBus:bufferSize:format:block:")]
	//	void InstallTapOnBus (nuint bus, uint bufferSize, [NullAllowed] AVAudioFormat format, AVAudioNodeTapBlock tapBlock);

	//	// -(void)removeTapOnBus:(AVAudioNodeBus)bus;
	//	[Export ("removeTapOnBus:")]
	//	void RemoveTapOnBus (nuint bus);

	//	// @property (readonly, nonatomic) AVAudioEngine * _Nullable engine;
	//	[NullAllowed, Export ("engine")]
	//	AVAudioEngine Engine { get; }

	//	// @property (readonly, nonatomic) NSUInteger numberOfInputs;
	//	[Export ("numberOfInputs")]
	//	nuint NumberOfInputs { get; }

	//	// @property (readonly, nonatomic) NSUInteger numberOfOutputs;
	//	[Export ("numberOfOutputs")]
	//	nuint NumberOfOutputs { get; }

	//	// @property (readonly, nonatomic) AVAudioTime * _Nullable lastRenderTime;
	//	[NullAllowed, Export ("lastRenderTime")]
	//	AVAudioTime LastRenderTime { get; }

	//	// @property (readonly, nonatomic) AUAudioUnit * _Nonnull AUAudioUnit __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("AUAudioUnit")]
	//	AUAudioUnit AUAudioUnit { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval latency __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("latency")]
	//	double Latency { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval outputPresentationLatency __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("outputPresentationLatency")]
	//	double OutputPresentationLatency { get; }
	//}

	//// @protocol AVAudioMixing <AVAudioStereoMixing, AVAudio3DMixing>
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[Protocol, Model]
	//interface AVAudioMixing : IAVAudioStereoMixing, IAVAudio3DMixing
	//{
	//	// @required -(AVAudioMixingDestination * _Nullable)destinationForMixer:(AVAudioNode * _Nonnull)mixer bus:(AVAudioNodeBus)bus __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Abstract]
	//	[Export ("destinationForMixer:bus:")]
	//	[return: NullAllowed]
	//	AVAudioMixingDestination Bus (AVAudioNode mixer, nuint bus);

	//	// @required @property (nonatomic) float volume;
	//	[Abstract]
	//	[Export ("volume")]
	//	float Volume { get; set; }
	//}

	//// @protocol AVAudioStereoMixing <NSObject>
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioStereoMixing
	//{
	//	// @required @property (nonatomic) float pan;
	//	[Abstract]
	//	[Export ("pan")]
	//	float Pan { get; set; }
	//}

	//// @protocol AVAudio3DMixing <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVAudio3DMixing
	//{
	//	// @required @property (nonatomic) AVAudio3DMixingRenderingAlgorithm renderingAlgorithm __attribute__((availability(watchos, unavailable)));
	//	[NoWatch]
	//	[Abstract]
	//	[Export ("renderingAlgorithm", ArgumentSemantic.Assign)]
	//	AVAudio3DMixingRenderingAlgorithm RenderingAlgorithm { get; set; }

	//	// @required @property (nonatomic) float rate __attribute__((availability(watchos, unavailable)));
	//	[NoWatch]
	//	[Abstract]
	//	[Export ("rate")]
	//	float Rate { get; set; }

	//	// @required @property (nonatomic) float reverbBlend __attribute__((availability(watchos, unavailable)));
	//	[NoWatch]
	//	[Abstract]
	//	[Export ("reverbBlend")]
	//	float ReverbBlend { get; set; }

	//	// @required @property (nonatomic) float obstruction __attribute__((availability(watchos, unavailable)));
	//	[NoWatch]
	//	[Abstract]
	//	[Export ("obstruction")]
	//	float Obstruction { get; set; }

	//	// @required @property (nonatomic) float occlusion __attribute__((availability(watchos, unavailable)));
	//	[NoWatch]
	//	[Abstract]
	//	[Export ("occlusion")]
	//	float Occlusion { get; set; }

	//	// @required @property (nonatomic) AVAudio3DPoint position __attribute__((availability(watchos, unavailable)));
	//	[NoWatch]
	//	[Abstract]
	//	[Export ("position", ArgumentSemantic.Assign)]
	//	AVAudio3DPoint Position { get; set; }
	//}

	//// @interface AVAudioMixingDestination : NSObject <AVAudioMixing>
	//[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAudioMixingDestination : IAVAudioMixing
	//{
	//	// @property (readonly, nonatomic) AVAudioConnectionPoint * _Nonnull connectionPoint;
	//	[Export ("connectionPoint")]
	//	AVAudioConnectionPoint ConnectionPoint { get; }
	//}

	//// typedef const AudioBufferList * _Nullable (^AVAudioIONodeInputBlock)(AVAudioFrameCount);
	//unsafe delegate AudioBufferList* AVAudioIONodeInputBlock (uint arg0);

	//// @interface AVAudioIONode : AVAudioNode
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioNode))]
	//interface AVAudioIONode
	//{
	//	// @property (readonly, nonatomic) NSTimeInterval presentationLatency;
	//	[Export ("presentationLatency")]
	//	double PresentationLatency { get; }

	//	// @property (readonly, nonatomic) AudioUnit _Nullable audioUnit;
	//	[NullAllowed, Export ("audioUnit")]
	//	unsafe AudioUnit* AudioUnit { get; }
	//}

	//// @interface AVAudioInputNode : AVAudioIONode <AVAudioMixing>
	//[Watch (4,0), TV (11,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioIONode))]
	//[DisableDefaultCtor]
	//interface AVAudioInputNode : IAVAudioMixing
	//{
	//	// -(BOOL)setManualRenderingInputPCMFormat:(AVAudioFormat * _Nonnull)format inputBlock:(AVAudioIONodeInputBlock _Nonnull)block __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("setManualRenderingInputPCMFormat:inputBlock:")]
	//	bool SetManualRenderingInputPCMFormat (AVAudioFormat format, AVAudioIONodeInputBlock block);
	//}

	//// @interface AVAudioOutputNode : AVAudioIONode
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioIONode))]
	//[DisableDefaultCtor]
	//interface AVAudioOutputNode
	//{
	//}

	//// @interface AVAudioTime : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioTime
	//{
	//	// -(instancetype _Nonnull)initWithAudioTimeStamp:(const AudioTimeStamp * _Nonnull)ts sampleRate:(double)sampleRate;
	//	[Export ("initWithAudioTimeStamp:sampleRate:")]
	//	unsafe IntPtr Constructor (AudioTimeStamp* ts, double sampleRate);

	//	// -(instancetype _Nonnull)initWithHostTime:(uint64_t)hostTime;
	//	[Export ("initWithHostTime:")]
	//	IntPtr Constructor (ulong hostTime);

	//	// -(instancetype _Nonnull)initWithSampleTime:(AVAudioFramePosition)sampleTime atRate:(double)sampleRate;
	//	[Export ("initWithSampleTime:atRate:")]
	//	IntPtr Constructor (long sampleTime, double sampleRate);

	//	// -(instancetype _Nonnull)initWithHostTime:(uint64_t)hostTime sampleTime:(AVAudioFramePosition)sampleTime atRate:(double)sampleRate;
	//	[Export ("initWithHostTime:sampleTime:atRate:")]
	//	IntPtr Constructor (ulong hostTime, long sampleTime, double sampleRate);

	//	// +(instancetype _Nonnull)timeWithAudioTimeStamp:(const AudioTimeStamp * _Nonnull)ts sampleRate:(double)sampleRate;
	//	[Static]
	//	[Export ("timeWithAudioTimeStamp:sampleRate:")]
	//	unsafe AVAudioTime TimeWithAudioTimeStamp (AudioTimeStamp* ts, double sampleRate);

	//	// +(instancetype _Nonnull)timeWithHostTime:(uint64_t)hostTime;
	//	[Static]
	//	[Export ("timeWithHostTime:")]
	//	AVAudioTime TimeWithHostTime (ulong hostTime);

	//	// +(instancetype _Nonnull)timeWithSampleTime:(AVAudioFramePosition)sampleTime atRate:(double)sampleRate;
	//	[Static]
	//	[Export ("timeWithSampleTime:atRate:")]
	//	AVAudioTime TimeWithSampleTime (long sampleTime, double sampleRate);

	//	// +(instancetype _Nonnull)timeWithHostTime:(uint64_t)hostTime sampleTime:(AVAudioFramePosition)sampleTime atRate:(double)sampleRate;
	//	[Static]
	//	[Export ("timeWithHostTime:sampleTime:atRate:")]
	//	AVAudioTime TimeWithHostTime (ulong hostTime, long sampleTime, double sampleRate);

	//	// +(uint64_t)hostTimeForSeconds:(NSTimeInterval)seconds;
	//	[Static]
	//	[Export ("hostTimeForSeconds:")]
	//	ulong HostTimeForSeconds (double seconds);

	//	// +(NSTimeInterval)secondsForHostTime:(uint64_t)hostTime;
	//	[Static]
	//	[Export ("secondsForHostTime:")]
	//	double SecondsForHostTime (ulong hostTime);

	//	// -(AVAudioTime * _Nullable)extrapolateTimeFromAnchor:(AVAudioTime * _Nonnull)anchorTime;
	//	[Export ("extrapolateTimeFromAnchor:")]
	//	[return: NullAllowed]
	//	AVAudioTime ExtrapolateTimeFromAnchor (AVAudioTime anchorTime);

	//	// @property (readonly, getter = isHostTimeValid, nonatomic) BOOL hostTimeValid;
	//	[Export ("hostTimeValid")]
	//	bool HostTimeValid { [Bind ("isHostTimeValid")] get; }

	//	// @property (readonly, nonatomic) uint64_t hostTime;
	//	[Export ("hostTime")]
	//	ulong HostTime { get; }

	//	// @property (readonly, getter = isSampleTimeValid, nonatomic) BOOL sampleTimeValid;
	//	[Export ("sampleTimeValid")]
	//	bool SampleTimeValid { [Bind ("isSampleTimeValid")] get; }

	//	// @property (readonly, nonatomic) AVAudioFramePosition sampleTime;
	//	[Export ("sampleTime")]
	//	long SampleTime { get; }

	//	// @property (readonly, nonatomic) double sampleRate;
	//	[Export ("sampleRate")]
	//	double SampleRate { get; }

	//	// @property (readonly, nonatomic) AudioTimeStamp audioTimeStamp;
	//	[Export ("audioTimeStamp")]
	//	AudioTimeStamp AudioTimeStamp { get; }
	//}

	//// typedef AVAudioEngineManualRenderingStatus (^AVAudioEngineManualRenderingBlock)(AVAudioFrameCount, AudioBufferList * _Nonnull, OSStatus * _Nullable);
	//unsafe delegate AVAudioEngineManualRenderingStatus AVAudioEngineManualRenderingBlock (uint arg0, AudioBufferList* arg1, [NullAllowed] int* arg2);

	//// @interface AVAudioEngine : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioEngine
	//{
	//	// -(void)attachNode:(AVAudioNode * _Nonnull)node;
	//	[Export ("attachNode:")]
	//	void AttachNode (AVAudioNode node);

	//	// -(void)detachNode:(AVAudioNode * _Nonnull)node;
	//	[Export ("detachNode:")]
	//	void DetachNode (AVAudioNode node);

	//	// -(void)connect:(AVAudioNode * _Nonnull)node1 to:(AVAudioNode * _Nonnull)node2 fromBus:(AVAudioNodeBus)bus1 toBus:(AVAudioNodeBus)bus2 format:(AVAudioFormat * _Nullable)format;
	//	[Export ("connect:to:fromBus:toBus:format:")]
	//	void Connect (AVAudioNode node1, AVAudioNode node2, nuint bus1, nuint bus2, [NullAllowed] AVAudioFormat format);

	//	// -(void)connect:(AVAudioNode * _Nonnull)node1 to:(AVAudioNode * _Nonnull)node2 format:(AVAudioFormat * _Nullable)format;
	//	[Export ("connect:to:format:")]
	//	void Connect (AVAudioNode node1, AVAudioNode node2, [NullAllowed] AVAudioFormat format);

	//	// -(void)connect:(AVAudioNode * _Nonnull)sourceNode toConnectionPoints:(NSArray<AVAudioConnectionPoint *> * _Nonnull)destNodes fromBus:(AVAudioNodeBus)sourceBus format:(AVAudioFormat * _Nullable)format __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("connect:toConnectionPoints:fromBus:format:")]
	//	void Connect (AVAudioNode sourceNode, AVAudioConnectionPoint[] destNodes, nuint sourceBus, [NullAllowed] AVAudioFormat format);

	//	// -(void)disconnectNodeInput:(AVAudioNode * _Nonnull)node bus:(AVAudioNodeBus)bus;
	//	[Export ("disconnectNodeInput:bus:")]
	//	void DisconnectNodeInput (AVAudioNode node, nuint bus);

	//	// -(void)disconnectNodeInput:(AVAudioNode * _Nonnull)node;
	//	[Export ("disconnectNodeInput:")]
	//	void DisconnectNodeInput (AVAudioNode node);

	//	// -(void)disconnectNodeOutput:(AVAudioNode * _Nonnull)node bus:(AVAudioNodeBus)bus;
	//	[Export ("disconnectNodeOutput:bus:")]
	//	void DisconnectNodeOutput (AVAudioNode node, nuint bus);

	//	// -(void)disconnectNodeOutput:(AVAudioNode * _Nonnull)node;
	//	[Export ("disconnectNodeOutput:")]
	//	void DisconnectNodeOutput (AVAudioNode node);

	//	// -(void)prepare;
	//	[Export ("prepare")]
	//	void Prepare ();

	//	// -(BOOL)startAndReturnError:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("startAndReturnError:")]
	//	bool StartAndReturnError ([NullAllowed] out NSError outError);

	//	// -(void)pause;
	//	[Export ("pause")]
	//	void Pause ();

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();

	//	// -(void)stop;
	//	[Export ("stop")]
	//	void Stop ();

	//	// -(AVAudioConnectionPoint * _Nullable)inputConnectionPointForNode:(AVAudioNode * _Nonnull)node inputBus:(AVAudioNodeBus)bus __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("inputConnectionPointForNode:inputBus:")]
	//	[return: NullAllowed]
	//	AVAudioConnectionPoint InputConnectionPointForNode (AVAudioNode node, nuint bus);

	//	// -(NSArray<AVAudioConnectionPoint *> * _Nonnull)outputConnectionPointsForNode:(AVAudioNode * _Nonnull)node outputBus:(AVAudioNodeBus)bus __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Export ("outputConnectionPointsForNode:outputBus:")]
	//	AVAudioConnectionPoint[] OutputConnectionPointsForNode (AVAudioNode node, nuint bus);

	//	// @property (nonatomic) MusicSequence _Nullable musicSequence;
	//	[NullAllowed, Export ("musicSequence", ArgumentSemantic.Assign)]
	//	unsafe MusicSequence* MusicSequence { get; set; }

	//	// @property (readonly, nonatomic) AVAudioOutputNode * _Nonnull outputNode;
	//	[Export ("outputNode")]
	//	AVAudioOutputNode OutputNode { get; }

	//	// @property (readonly, nonatomic) AVAudioInputNode * _Nonnull inputNode __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 10), iOS (8, 0)]
	//	[Export ("inputNode")]
	//	AVAudioInputNode InputNode { get; }

	//	// @property (readonly, nonatomic) AVAudioMixerNode * _Nonnull mainMixerNode;
	//	[Export ("mainMixerNode")]
	//	AVAudioMixerNode MainMixerNode { get; }

	//	// @property (readonly, getter = isRunning, nonatomic) BOOL running;
	//	[Export ("running")]
	//	bool Running { [Bind ("isRunning")] get; }

	//	// @property (getter = isAutoShutdownEnabled, nonatomic) BOOL autoShutdownEnabled __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11, 0), NoWatch, Mac (10, 13), iOS (11, 0)]
	//	[Export ("autoShutdownEnabled")]
	//	bool AutoShutdownEnabled { [Bind ("isAutoShutdownEnabled")] get; set; }

	//	// -(BOOL)enableManualRenderingMode:(AVAudioEngineManualRenderingMode)mode format:(AVAudioFormat * _Nonnull)pcmFormat maximumFrameCount:(AVAudioFrameCount)maximumFrameCount error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("enableManualRenderingMode:format:maximumFrameCount:error:")]
	//	bool EnableManualRenderingMode (AVAudioEngineManualRenderingMode mode, AVAudioFormat pcmFormat, uint maximumFrameCount, [NullAllowed] out NSError outError);

	//	// -(void)disableManualRenderingMode __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("disableManualRenderingMode")]
	//	void DisableManualRenderingMode ();

	//	// -(AVAudioEngineManualRenderingStatus)renderOffline:(AVAudioFrameCount)numberOfFrames toBuffer:(AVAudioPCMBuffer * _Nonnull)buffer error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("renderOffline:toBuffer:error:")]
	//	AVAudioEngineManualRenderingStatus RenderOffline (uint numberOfFrames, AVAudioPcmBuffer buffer, [NullAllowed] out NSError outError);

	//	// @property (readonly, nonatomic) AVAudioEngineManualRenderingBlock _Nonnull manualRenderingBlock __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("manualRenderingBlock")]
	//	AVAudioEngineManualRenderingBlock ManualRenderingBlock { get; }

	//	// @property (readonly, nonatomic) BOOL isInManualRenderingMode __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("isInManualRenderingMode")]
	//	bool IsInManualRenderingMode { get; }

	//	// @property (readonly, nonatomic) AVAudioEngineManualRenderingMode manualRenderingMode __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("manualRenderingMode")]
	//	AVAudioEngineManualRenderingMode ManualRenderingMode { get; }

	//	// @property (readonly, nonatomic) AVAudioFormat * _Nonnull manualRenderingFormat __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("manualRenderingFormat")]
	//	AVAudioFormat ManualRenderingFormat { get; }

	//	// @property (readonly, nonatomic) AVAudioFrameCount manualRenderingMaximumFrameCount __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("manualRenderingMaximumFrameCount")]
	//	uint ManualRenderingMaximumFrameCount { get; }

	//	// @property (readonly, nonatomic) AVAudioFramePosition manualRenderingSampleTime __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("manualRenderingSampleTime")]
	//	long ManualRenderingSampleTime { get; }

	//	// -(void)connectMIDI:(AVAudioNode * _Nonnull)sourceNode to:(AVAudioNode * _Nonnull)destinationNode format:(AVAudioFormat * _Nullable)format block:(AUMIDIOutputEventBlock _Nullable)tapBlock __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	//	[Export ("connectMIDI:to:format:block:")]
	//	void ConnectMIDI (AVAudioNode sourceNode, AVAudioNode destinationNode, [NullAllowed] AVAudioFormat format, [NullAllowed] AUMIDIOutputEventBlock tapBlock);

	//	// -(void)connectMIDI:(AVAudioNode * _Nonnull)sourceNode toNodes:(NSArray<AVAudioNode *> * _Nonnull)destinationNodes format:(AVAudioFormat * _Nullable)format block:(AUMIDIOutputEventBlock _Nullable)tapBlock __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	//	[Export ("connectMIDI:toNodes:format:block:")]
	//	void ConnectMIDI (AVAudioNode sourceNode, AVAudioNode[] destinationNodes, [NullAllowed] AVAudioFormat format, [NullAllowed] AUMIDIOutputEventBlock tapBlock);

	//	// -(void)disconnectMIDI:(AVAudioNode * _Nonnull)sourceNode from:(AVAudioNode * _Nonnull)destinationNode __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	//	[Export ("disconnectMIDI:from:")]
	//	void DisconnectMIDI (AVAudioNode sourceNode, AVAudioNode destinationNode);

	//	// -(void)disconnectMIDI:(AVAudioNode * _Nonnull)sourceNode fromNodes:(NSArray<AVAudioNode *> * _Nonnull)destinationNodes __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	//	[Export ("disconnectMIDI:fromNodes:")]
	//	void DisconnectMIDI (AVAudioNode sourceNode, AVAudioNode[] destinationNodes);

	//	// -(void)disconnectMIDIInput:(AVAudioNode * _Nonnull)node __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	//	[Export ("disconnectMIDIInput:")]
	//	void DisconnectMIDIInput (AVAudioNode node);

	//	// -(void)disconnectMIDIOutput:(AVAudioNode * _Nonnull)node __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	//	[Export ("disconnectMIDIOutput:")]
	//	void DisconnectMIDIOutput (AVAudioNode node);
	//}

	//// @interface AVAudioUnit : AVAudioNode
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioNode))]
	//interface AVAudioUnit
	//{
	//	// +(void)instantiateWithComponentDescription:(AudioComponentDescription)audioComponentDescription options:(AudioComponentInstantiationOptions)options completionHandler:(void (^ _Nonnull)(__kindof AVAudioUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[TV (9,0), Mac (10,11), iOS (9,0)]
	//	[Static]
	//	[Export ("instantiateWithComponentDescription:options:completionHandler:")]
	//	void InstantiateWithComponentDescription (AudioComponentDescription audioComponentDescription, AudioComponentInstantiationOptions options, Action<AVAudioUnit, NSError> completionHandler);

	//	// -(BOOL)loadAudioUnitPresetAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("loadAudioUnitPresetAtURL:error:")]
	//	bool LoadAudioUnitPresetAtURL (NSUrl url, [NullAllowed] out NSError outError);

	//	// @property (readonly, nonatomic) AudioComponentDescription audioComponentDescription;
	//	[Export ("audioComponentDescription")]
	//	AudioComponentDescription AudioComponentDescription { get; }

	//	// @property (readonly, nonatomic) AudioUnit _Nonnull audioUnit;
	//	[Export ("audioUnit")]
	//	unsafe AudioUnit* AudioUnit { get; }

	//	// @property (readonly, nonatomic) AUAudioUnit * _Nonnull AUAudioUnit __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
	//	[TV (9, 0), Mac (10, 11), iOS (9, 0)]
	//	[Export ("AUAudioUnit")]
	//	AUAudioUnit AUAudioUnit { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull manufacturerName;
	//	[Export ("manufacturerName")]
	//	string ManufacturerName { get; }

	//	// @property (readonly, nonatomic) NSUInteger version;
	//	[Export ("version")]
	//	nuint Version { get; }
	//}

	//// @interface AVAudioUnitEffect : AVAudioUnit
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioUnit))]
	//interface AVAudioUnitEffect
	//{
	//	// -(instancetype _Nonnull)initWithAudioComponentDescription:(AudioComponentDescription)audioComponentDescription;
	//	[Export ("initWithAudioComponentDescription:")]
	//	IntPtr Constructor (AudioComponentDescription audioComponentDescription);

	//	// @property (nonatomic) BOOL bypass;
	//	[Export ("bypass")]
	//	bool Bypass { get; set; }
	//}

	//// @interface AVAudioUnitReverb : AVAudioUnitEffect
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioUnitEffect))]
	//interface AVAudioUnitReverb
	//{
	//	// -(void)loadFactoryPreset:(AVAudioUnitReverbPreset)preset;
	//	[Export ("loadFactoryPreset:")]
	//	void LoadFactoryPreset (AVAudioUnitReverbPreset preset);

	//	// @property (nonatomic) float wetDryMix;
	//	[Export ("wetDryMix")]
	//	float WetDryMix { get; set; }
	//}

	//// @interface AVAudioUnitEQFilterParameters : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAudioUnitEQFilterParameters
	//{
	//	// @property (nonatomic) AVAudioUnitEQFilterType filterType;
	//	[Export ("filterType", ArgumentSemantic.Assign)]
	//	AVAudioUnitEQFilterType FilterType { get; set; }

	//	// @property (nonatomic) float frequency;
	//	[Export ("frequency")]
	//	float Frequency { get; set; }

	//	// @property (nonatomic) float bandwidth;
	//	[Export ("bandwidth")]
	//	float Bandwidth { get; set; }

	//	// @property (nonatomic) float gain;
	//	[Export ("gain")]
	//	float Gain { get; set; }

	//	// @property (nonatomic) BOOL bypass;
	//	[Export ("bypass")]
	//	bool Bypass { get; set; }
	//}

	//// @interface AVAudioUnitEQ : AVAudioUnitEffect
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioUnitEffect))]
	//interface AVAudioUnitEQ
	//{
	//	// -(instancetype _Nonnull)initWithNumberOfBands:(NSUInteger)numberOfBands;
	//	[Export ("initWithNumberOfBands:")]
	//	IntPtr Constructor (nuint numberOfBands);

	//	// @property (readonly, nonatomic) NSArray<AVAudioUnitEQFilterParameters *> * _Nonnull bands;
	//	[Export ("bands")]
	//	AVAudioUnitEQFilterParameters[] Bands { get; }

	//	// @property (nonatomic) float globalGain;
	//	[Export ("globalGain")]
	//	float GlobalGain { get; set; }
	//}

	//// @interface AVAudioEnvironmentDistanceAttenuationParameters : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAudioEnvironmentDistanceAttenuationParameters
	//{
	//	// @property (nonatomic) AVAudioEnvironmentDistanceAttenuationModel distanceAttenuationModel;
	//	[Export ("distanceAttenuationModel", ArgumentSemantic.Assign)]
	//	AVAudioEnvironmentDistanceAttenuationModel DistanceAttenuationModel { get; set; }

	//	// @property (nonatomic) float referenceDistance;
	//	[Export ("referenceDistance")]
	//	float ReferenceDistance { get; set; }

	//	// @property (nonatomic) float maximumDistance;
	//	[Export ("maximumDistance")]
	//	float MaximumDistance { get; set; }

	//	// @property (nonatomic) float rolloffFactor;
	//	[Export ("rolloffFactor")]
	//	float RolloffFactor { get; set; }
	//}

	//// @interface AVAudioEnvironmentReverbParameters : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAudioEnvironmentReverbParameters
	//{
	//	// @property (nonatomic) BOOL enable;
	//	[Export ("enable")]
	//	bool Enable { get; set; }

	//	// @property (nonatomic) float level;
	//	[Export ("level")]
	//	float Level { get; set; }

	//	// @property (readonly, nonatomic) AVAudioUnitEQFilterParameters * _Nonnull filterParameters;
	//	[Export ("filterParameters")]
	//	AVAudioUnitEQFilterParameters FilterParameters { get; }

	//	// -(void)loadFactoryReverbPreset:(AVAudioUnitReverbPreset)preset;
	//	[Export ("loadFactoryReverbPreset:")]
	//	void LoadFactoryReverbPreset (AVAudioUnitReverbPreset preset);
	//}

	//// @interface AVAudioEnvironmentNode : AVAudioNode <AVAudioMixing>
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioNode))]
	//interface AVAudioEnvironmentNode : IAVAudioMixing
	//{
	//	// @property (nonatomic) float outputVolume;
	//	[Export ("outputVolume")]
	//	float OutputVolume { get; set; }

	//	// @property (readonly, nonatomic) AVAudioNodeBus nextAvailableInputBus;
	//	[Export ("nextAvailableInputBus")]
	//	nuint NextAvailableInputBus { get; }

	//	// @property (nonatomic) AVAudio3DPoint listenerPosition;
	//	[Export ("listenerPosition", ArgumentSemantic.Assign)]
	//	AVAudio3DPoint ListenerPosition { get; set; }

	//	// @property (nonatomic) AVAudio3DVectorOrientation listenerVectorOrientation;
	//	[Export ("listenerVectorOrientation", ArgumentSemantic.Assign)]
	//	AVAudio3DVectorOrientation ListenerVectorOrientation { get; set; }

	//	// @property (nonatomic) AVAudio3DAngularOrientation listenerAngularOrientation;
	//	[Export ("listenerAngularOrientation", ArgumentSemantic.Assign)]
	//	AVAudio3DAngularOrientation ListenerAngularOrientation { get; set; }

	//	// @property (readonly, nonatomic) AVAudioEnvironmentDistanceAttenuationParameters * _Nonnull distanceAttenuationParameters;
	//	[Export ("distanceAttenuationParameters")]
	//	AVAudioEnvironmentDistanceAttenuationParameters DistanceAttenuationParameters { get; }

	//	// @property (readonly, nonatomic) AVAudioEnvironmentReverbParameters * _Nonnull reverbParameters;
	//	[Export ("reverbParameters")]
	//	AVAudioEnvironmentReverbParameters ReverbParameters { get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull applicableRenderingAlgorithms;
	//	[Export ("applicableRenderingAlgorithms")]
	//	NSNumber[] ApplicableRenderingAlgorithms { get; }
	//}

	//// @interface AVAudioFile : NSObject
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioFile
	//{
	//	// -(instancetype _Nullable)initForReading:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initForReading:error:")]
	//	IntPtr Constructor (NSUrl fileURL, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initForReading:(NSURL * _Nonnull)fileURL commonFormat:(AVAudioCommonFormat)format interleaved:(BOOL)interleaved error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initForReading:commonFormat:interleaved:error:")]
	//	IntPtr Constructor (NSUrl fileURL, AVAudioCommonFormat format, bool interleaved, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initForWriting:(NSURL * _Nonnull)fileURL settings:(NSDictionary<NSString *,id> * _Nonnull)settings error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initForWriting:settings:error:")]
	//	IntPtr Constructor (NSUrl fileURL, NSDictionary<NSString, NSObject> settings, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initForWriting:(NSURL * _Nonnull)fileURL settings:(NSDictionary<NSString *,id> * _Nonnull)settings commonFormat:(AVAudioCommonFormat)format interleaved:(BOOL)interleaved error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initForWriting:settings:commonFormat:interleaved:error:")]
	//	IntPtr Constructor (NSUrl fileURL, NSDictionary<NSString, NSObject> settings, AVAudioCommonFormat format, bool interleaved, [NullAllowed] out NSError outError);

	//	// -(BOOL)readIntoBuffer:(AVAudioPCMBuffer * _Nonnull)buffer error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("readIntoBuffer:error:")]
	//	bool ReadIntoBuffer (AVAudioPcmBuffer buffer, [NullAllowed] out NSError outError);

	//	// -(BOOL)readIntoBuffer:(AVAudioPCMBuffer * _Nonnull)buffer frameCount:(AVAudioFrameCount)frames error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("readIntoBuffer:frameCount:error:")]
	//	bool ReadIntoBuffer (AVAudioPcmBuffer buffer, uint frames, [NullAllowed] out NSError outError);

	//	// -(BOOL)writeFromBuffer:(const AVAudioPCMBuffer * _Nonnull)buffer error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("writeFromBuffer:error:")]
	//	bool WriteFromBuffer (AVAudioPcmBuffer buffer, [NullAllowed] out NSError outError);

	//	// @property (readonly, nonatomic) NSURL * _Nonnull url;
	//	[Export ("url")]
	//	NSUrl Url { get; }

	//	// @property (readonly, nonatomic) AVAudioFormat * _Nonnull fileFormat;
	//	[Export ("fileFormat")]
	//	AVAudioFormat FileFormat { get; }

	//	// @property (readonly, nonatomic) AVAudioFormat * _Nonnull processingFormat;
	//	[Export ("processingFormat")]
	//	AVAudioFormat ProcessingFormat { get; }

	//	// @property (readonly, nonatomic) AVAudioFramePosition length;
	//	[Export ("length")]
	//	long Length { get; }

	//	// @property (nonatomic) AVAudioFramePosition framePosition;
	//	[Export ("framePosition")]
	//	long FramePosition { get; set; }
	//}

	//// @interface AVAudioMixerNode : AVAudioNode <AVAudioMixing>
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioNode))]
	//interface AVAudioMixerNode : IAVAudioMixing
	//{
	//	// @property (nonatomic) float outputVolume;
	//	[Export ("outputVolume")]
	//	float OutputVolume { get; set; }

	//	// @property (readonly, nonatomic) AVAudioNodeBus nextAvailableInputBus;
	//	[Export ("nextAvailableInputBus")]
	//	nuint NextAvailableInputBus { get; }
	//}

	//// @interface AVAudioSession : NSObject
	//[Watch (2,0), TV (9,0), NoMac, iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioSession
	//{
	//	// +(AVAudioSession * _Nonnull)sharedInstance __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (3, 0)]
	//	[Static]
	//	[Export ("sharedInstance")]
	//	[Verify (MethodToProperty)]
	//	AVAudioSession SharedInstance { get; }

	//	// -(BOOL)setActive:(BOOL)active error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0)));
	//	[Watch (2,0), TV (9,0), NoMac, iOS (3,0)]
	//	[Export ("setActive:error:")]
	//	bool SetActive (bool active, [NullAllowed] out NSError outError);

	//	// -(BOOL)setActive:(BOOL)active withOptions:(AVAudioSessionSetActiveOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2,0), TV (9,0), NoMac, iOS (6,0)]
	//	[Export ("setActive:withOptions:error:")]
	//	bool SetActive (bool active, AVAudioSessionSetActiveOptions options, [NullAllowed] out NSError outError);

	//	// -(void)activateWithOptions:(AVAudioSessionActivationOptions)options completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))handler __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, introduced=5.0)));
	//	[Watch (5,0), NoTV, NoMac, NoiOS]
	//	[Export ("activateWithOptions:completionHandler:")]
	//	void ActivateWithOptions (AVAudioSessionActivationOptions options, Action<bool, NSError> handler);

	//	// @property (readonly) NSArray<AVAudioSessionCategory> * _Nonnull availableCategories __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 0)]
	//	[Export ("availableCategories")]
	//	string[] AvailableCategories { get; }

	//	// -(BOOL)setCategory:(AVAudioSessionCategory _Nonnull)category error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0)));
	//	[Watch (2,0), TV (9,0), NoMac, iOS (3,0)]
	//	[Export ("setCategory:error:")]
	//	bool SetCategory (string category, [NullAllowed] out NSError outError);

	//	// -(BOOL)setCategory:(AVAudioSessionCategory _Nonnull)category withOptions:(AVAudioSessionCategoryOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2,0), TV (9,0), NoMac, iOS (6,0)]
	//	[Export ("setCategory:withOptions:error:")]
	//	bool SetCategory (string category, AVAudioSessionCategoryOptions options, [NullAllowed] out NSError outError);

	//	// -(BOOL)setCategory:(AVAudioSessionCategory _Nonnull)category mode:(AVAudioSessionMode _Nonnull)mode options:(AVAudioSessionCategoryOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0)));
	//	[Watch (3,0), TV (10,0), NoMac, iOS (10,0)]
	//	[Export ("setCategory:mode:options:error:")]
	//	bool SetCategory (string category, string mode, AVAudioSessionCategoryOptions options, [NullAllowed] out NSError outError);

	//	// -(BOOL)setCategory:(AVAudioSessionCategory _Nonnull)category mode:(AVAudioSessionMode _Nonnull)mode routeSharingPolicy:(AVAudioSessionRouteSharingPolicy)policy options:(AVAudioSessionCategoryOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[Watch (5,0), TV (11,0), NoMac, iOS (11,0)]
	//	[Export ("setCategory:mode:routeSharingPolicy:options:error:")]
	//	bool SetCategory (string category, string mode, AVAudioSessionRouteSharingPolicy policy, AVAudioSessionCategoryOptions options, [NullAllowed] out NSError outError);

	//	// @property (readonly) AVAudioSessionCategory _Nonnull category __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (3, 0)]
	//	[Export ("category")]
	//	string Category { get; }

	//	// @property (readonly) AVAudioSessionCategoryOptions categoryOptions __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("categoryOptions")]
	//	AVAudioSessionCategoryOptions CategoryOptions { get; }

	//	// @property (readonly) AVAudioSessionRouteSharingPolicy routeSharingPolicy __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[Watch (5, 0), TV (11, 0), NoMac, iOS (11, 0)]
	//	[Export ("routeSharingPolicy")]
	//	AVAudioSessionRouteSharingPolicy RouteSharingPolicy { get; }

	//	// @property (readonly) NSArray<AVAudioSessionMode> * _Nonnull availableModes __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 0)]
	//	[Export ("availableModes")]
	//	string[] AvailableModes { get; }

	//	// -(BOOL)setMode:(AVAudioSessionMode _Nonnull)mode error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0)));
	//	[Watch (2,0), TV (9,0), NoMac, iOS (5,0)]
	//	[Export ("setMode:error:")]
	//	bool SetMode (string mode, [NullAllowed] out NSError outError);

	//	// @property (readonly) AVAudioSessionMode _Nonnull mode __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (5, 0)]
	//	[Export ("mode")]
	//	string Mode { get; }

	//	// @property (readonly) AVAudioSessionRecordPermission recordPermission __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=8.0)));
	//	[Watch (4, 0), NoTV, NoMac, iOS (8, 0)]
	//	[Export ("recordPermission")]
	//	AVAudioSessionRecordPermission RecordPermission { get; }

	//	// -(void)requestRecordPermission:(PermissionBlock _Nonnull)response __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (4,0), NoTV, NoMac, iOS (7,0)]
	//	[Export ("requestRecordPermission:")]
	//	void RequestRecordPermission (PermissionBlock response);

	//	// -(BOOL)overrideOutputAudioPort:(AVAudioSessionPortOverride)portOverride error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2,0), TV (9,0), NoMac, iOS (6,0)]
	//	[Export ("overrideOutputAudioPort:error:")]
	//	bool OverrideOutputAudioPort (AVAudioSessionPortOverride portOverride, [NullAllowed] out NSError outError);

	//	// @property (readonly, getter = isOtherAudioPlaying) BOOL otherAudioPlaying __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("otherAudioPlaying")]
	//	bool OtherAudioPlaying { [Bind ("isOtherAudioPlaying")] get; }

	//	// @property (readonly) BOOL secondaryAudioShouldBeSilencedHint __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (8, 0)]
	//	[Export ("secondaryAudioShouldBeSilencedHint")]
	//	bool SecondaryAudioShouldBeSilencedHint { get; }

	//	// @property (readonly) AVAudioSessionRouteDescription * _Nonnull currentRoute __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("currentRoute")]
	//	AVAudioSessionRouteDescription CurrentRoute { get; }

	//	// -(BOOL)setPreferredInput:(AVAudioSessionPortDescription * _Nullable)inPort error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9,0), NoWatch, NoMac, iOS (7,0)]
	//	[Export ("setPreferredInput:error:")]
	//	bool SetPreferredInput ([NullAllowed] AVAudioSessionPortDescription inPort, [NullAllowed] out NSError outError);

	//	// @property (readonly) AVAudioSessionPortDescription * _Nullable preferredInput __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (7, 0)]
	//	[NullAllowed, Export ("preferredInput")]
	//	AVAudioSessionPortDescription PreferredInput { get; }

	//	// @property (readonly) NSArray<AVAudioSessionPortDescription *> * _Nullable availableInputs __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (7, 0)]
	//	[NullAllowed, Export ("availableInputs")]
	//	AVAudioSessionPortDescription[] AvailableInputs { get; }
	//}

	//// typedef void (^PermissionBlock)(BOOL);
	//delegate void PermissionBlock (bool arg0);

	//// @interface AVAudioSessionHardwareConfiguration (AVAudioSession)
	//[Category]
	//[BaseType (typeof(AVAudioSession))]
	//interface AVAudioSession_AVAudioSessionHardwareConfiguration
	//{
	//	// -(BOOL)setPreferredSampleRate:(double)sampleRate error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[TV (9,0), NoWatch, NoMac, iOS (6,0)]
	//	[Export ("setPreferredSampleRate:error:")]
	//	bool SetPreferredSampleRate (double sampleRate, [NullAllowed] out NSError outError);

	//	// @property (readonly) double preferredSampleRate __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (6, 0)]
	//	[Export ("preferredSampleRate")]
	//	double PreferredSampleRate { get; }

	//	// -(BOOL)setPreferredIOBufferDuration:(NSTimeInterval)duration error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=3.0)));
	//	[TV (9,0), NoWatch, NoMac, iOS (3,0)]
	//	[Export ("setPreferredIOBufferDuration:error:")]
	//	bool SetPreferredIOBufferDuration (double duration, [NullAllowed] out NSError outError);

	//	// @property (readonly) NSTimeInterval preferredIOBufferDuration __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=3.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (3, 0)]
	//	[Export ("preferredIOBufferDuration")]
	//	double PreferredIOBufferDuration { get; }

	//	// -(BOOL)setPreferredInputNumberOfChannels:(NSInteger)count error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9,0), NoWatch, NoMac, iOS (7,0)]
	//	[Export ("setPreferredInputNumberOfChannels:error:")]
	//	bool SetPreferredInputNumberOfChannels (nint count, [NullAllowed] out NSError outError);

	//	// @property (readonly) NSInteger preferredInputNumberOfChannels __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (7, 0)]
	//	[Export ("preferredInputNumberOfChannels")]
	//	nint PreferredInputNumberOfChannels { get; }

	//	// -(BOOL)setPreferredOutputNumberOfChannels:(NSInteger)count error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9,0), NoWatch, NoMac, iOS (7,0)]
	//	[Export ("setPreferredOutputNumberOfChannels:error:")]
	//	bool SetPreferredOutputNumberOfChannels (nint count, [NullAllowed] out NSError outError);

	//	// @property (readonly) NSInteger preferredOutputNumberOfChannels __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (7, 0)]
	//	[Export ("preferredOutputNumberOfChannels")]
	//	nint PreferredOutputNumberOfChannels { get; }

	//	// @property (readonly) NSInteger maximumInputNumberOfChannels __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (7, 0)]
	//	[Export ("maximumInputNumberOfChannels")]
	//	nint MaximumInputNumberOfChannels { get; }

	//	// @property (readonly) NSInteger maximumOutputNumberOfChannels __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (7, 0)]
	//	[Export ("maximumOutputNumberOfChannels")]
	//	nint MaximumOutputNumberOfChannels { get; }

	//	// -(BOOL)setInputGain:(float)gain error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[TV (9,0), NoWatch, NoMac, iOS (6,0)]
	//	[Export ("setInputGain:error:")]
	//	bool SetInputGain (float gain, [NullAllowed] out NSError outError);

	//	// @property (readonly) float inputGain __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (6, 0)]
	//	[Export ("inputGain")]
	//	float InputGain { get; }

	//	// @property (readonly, getter = isInputGainSettable) BOOL inputGainSettable __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (6, 0)]
	//	[Export ("inputGainSettable")]
	//	bool InputGainSettable { [Bind ("isInputGainSettable")] get; }

	//	// @property (readonly, getter = isInputAvailable) BOOL inputAvailable __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("inputAvailable")]
	//	bool InputAvailable { [Bind ("isInputAvailable")] get; }

	//	// @property (readonly) NSArray<AVAudioSessionDataSourceDescription *> * _Nullable inputDataSources __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[NullAllowed, Export ("inputDataSources")]
	//	AVAudioSessionDataSourceDescription[] InputDataSources { get; }

	//	// @property (readonly) AVAudioSessionDataSourceDescription * _Nullable inputDataSource __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[NullAllowed, Export ("inputDataSource")]
	//	AVAudioSessionDataSourceDescription InputDataSource { get; }

	//	// -(BOOL)setInputDataSource:(AVAudioSessionDataSourceDescription * _Nullable)dataSource error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[TV (9,0), NoWatch, NoMac, iOS (6,0)]
	//	[Export ("setInputDataSource:error:")]
	//	bool SetInputDataSource ([NullAllowed] AVAudioSessionDataSourceDescription dataSource, [NullAllowed] out NSError outError);

	//	// @property (readonly) NSArray<AVAudioSessionDataSourceDescription *> * _Nullable outputDataSources __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[NullAllowed, Export ("outputDataSources")]
	//	AVAudioSessionDataSourceDescription[] OutputDataSources { get; }

	//	// @property (readonly) AVAudioSessionDataSourceDescription * _Nullable outputDataSource __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[NullAllowed, Export ("outputDataSource")]
	//	AVAudioSessionDataSourceDescription OutputDataSource { get; }

	//	// -(BOOL)setOutputDataSource:(AVAudioSessionDataSourceDescription * _Nullable)dataSource error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[TV (9,0), NoWatch, NoMac, iOS (6,0)]
	//	[Export ("setOutputDataSource:error:")]
	//	bool SetOutputDataSource ([NullAllowed] AVAudioSessionDataSourceDescription dataSource, [NullAllowed] out NSError outError);

	//	// @property (readonly) double sampleRate __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("sampleRate")]
	//	double SampleRate { get; }

	//	// @property (readonly) NSInteger inputNumberOfChannels __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("inputNumberOfChannels")]
	//	nint InputNumberOfChannels { get; }

	//	// @property (readonly) NSInteger outputNumberOfChannels __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("outputNumberOfChannels")]
	//	nint OutputNumberOfChannels { get; }

	//	// @property (readonly) float outputVolume __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("outputVolume")]
	//	float OutputVolume { get; }

	//	// @property (readonly) NSTimeInterval inputLatency __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("inputLatency")]
	//	double InputLatency { get; }

	//	// @property (readonly) NSTimeInterval outputLatency __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("outputLatency")]
	//	double OutputLatency { get; }

	//	// @property (readonly) NSTimeInterval IOBufferDuration __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("IOBufferDuration")]
	//	double IOBufferDuration { get; }

	//	// -(BOOL)setAggregatedIOPreference:(AVAudioSessionIOType)inIOType error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoWatch, NoTV, NoMac, iOS (10,0)]
	//	[Export ("setAggregatedIOPreference:error:")]
	//	bool SetAggregatedIOPreference (AVAudioSessionIOType inIOType, [NullAllowed] out NSError outError);
	//}

	//// @interface AVAudioSessionChannelDescription : NSObject
	//[Watch (2,0), TV (9,0), NoMac, iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioSessionChannelDescription
	//{
	//	// @property (readonly) NSString * _Nonnull channelName __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("channelName")]
	//	string ChannelName { get; }

	//	// @property (readonly) NSString * _Nonnull owningPortUID __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("owningPortUID")]
	//	string OwningPortUID { get; }

	//	// @property (readonly) NSUInteger channelNumber __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("channelNumber")]
	//	nuint ChannelNumber { get; }

	//	// @property (readonly) AudioChannelLabel channelLabel __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("channelLabel")]
	//	uint ChannelLabel { get; }
	//}

	//// @interface AVAudioSessionPortDescription : NSObject
	//[Watch (2,0), TV (9,0), NoMac, iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioSessionPortDescription
	//{
	//	// @property (readonly) AVAudioSessionPort _Nonnull portType __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("portType")]
	//	string PortType { get; }

	//	// @property (readonly) NSString * _Nonnull portName __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("portName")]
	//	string PortName { get; }

	//	// @property (readonly) NSString * _Nonnull UID __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("UID")]
	//	string UID { get; }

	//	// @property (readonly) BOOL hasHardwareVoiceCallProcessing __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0)));
	//	[Watch (3, 0), TV (10, 0), NoMac, iOS (10, 0)]
	//	[Export ("hasHardwareVoiceCallProcessing")]
	//	bool HasHardwareVoiceCallProcessing { get; }

	//	// @property (readonly) NSArray<AVAudioSessionChannelDescription *> * _Nullable channels __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[NullAllowed, Export ("channels")]
	//	AVAudioSessionChannelDescription[] Channels { get; }

	//	// @property (readonly) NSArray<AVAudioSessionDataSourceDescription *> * _Nullable dataSources __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (7, 0)]
	//	[NullAllowed, Export ("dataSources")]
	//	AVAudioSessionDataSourceDescription[] DataSources { get; }

	//	// @property (readonly) AVAudioSessionDataSourceDescription * _Nullable selectedDataSource __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (7, 0)]
	//	[NullAllowed, Export ("selectedDataSource")]
	//	AVAudioSessionDataSourceDescription SelectedDataSource { get; }

	//	// @property (readonly) AVAudioSessionDataSourceDescription * _Nullable preferredDataSource __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (7, 0)]
	//	[NullAllowed, Export ("preferredDataSource")]
	//	AVAudioSessionDataSourceDescription PreferredDataSource { get; }

	//	// -(BOOL)setPreferredDataSource:(AVAudioSessionDataSourceDescription * _Nullable)dataSource error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9,0), NoWatch, NoMac, iOS (7,0)]
	//	[Export ("setPreferredDataSource:error:")]
	//	bool SetPreferredDataSource ([NullAllowed] AVAudioSessionDataSourceDescription dataSource, [NullAllowed] out NSError outError);
	//}

	//// @interface AVAudioSessionRouteDescription : NSObject
	//[Watch (2,0), TV (9,0), NoMac, iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioSessionRouteDescription
	//{
	//	// @property (readonly) NSArray<AVAudioSessionPortDescription *> * _Nonnull inputs __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("inputs")]
	//	AVAudioSessionPortDescription[] Inputs { get; }

	//	// @property (readonly) NSArray<AVAudioSessionPortDescription *> * _Nonnull outputs __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("outputs")]
	//	AVAudioSessionPortDescription[] Outputs { get; }
	//}

	//// @interface AVAudioSessionDataSourceDescription : NSObject
	//[Watch (2,0), TV (9,0), NoMac, iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioSessionDataSourceDescription
	//{
	//	// @property (readonly) NSNumber * _Nonnull dataSourceID __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("dataSourceID")]
	//	NSNumber DataSourceID { get; }

	//	// @property (readonly) NSString * _Nonnull dataSourceName __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (6, 0)]
	//	[Export ("dataSourceName")]
	//	string DataSourceName { get; }

	//	// @property (readonly) AVAudioSessionLocation _Nullable location __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (7, 0)]
	//	[NullAllowed, Export ("location")]
	//	string Location { get; }

	//	// @property (readonly) AVAudioSessionOrientation _Nullable orientation __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (2, 0), TV (9, 0), NoMac, iOS (7, 0)]
	//	[NullAllowed, Export ("orientation")]
	//	string Orientation { get; }

	//	// @property (readonly) NSArray<AVAudioSessionPolarPattern> * _Nullable supportedPolarPatterns __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (7, 0)]
	//	[NullAllowed, Export ("supportedPolarPatterns")]
	//	string[] SupportedPolarPatterns { get; }

	//	// @property (readonly) AVAudioSessionPolarPattern _Nullable selectedPolarPattern __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (7, 0)]
	//	[NullAllowed, Export ("selectedPolarPattern")]
	//	string SelectedPolarPattern { get; }

	//	// @property (readonly) AVAudioSessionPolarPattern _Nullable preferredPolarPattern __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9, 0), NoWatch, NoMac, iOS (7, 0)]
	//	[NullAllowed, Export ("preferredPolarPattern")]
	//	string PreferredPolarPattern { get; }

	//	// -(BOOL)setPreferredPolarPattern:(AVAudioSessionPolarPattern _Nullable)pattern error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (9,0), NoWatch, NoMac, iOS (7,0)]
	//	[Export ("setPreferredPolarPattern:error:")]
	//	bool SetPreferredPolarPattern ([NullAllowed] string pattern, [NullAllowed] out NSError outError);
	//}

	//// @interface AVAudioSessionDeprecated (AVAudioSession)
	//[Category]
	//[BaseType (typeof(AVAudioSession))]
	//[DisableDefaultCtor]
	//interface AVAudioSession_AVAudioSessionDeprecated
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVAudioSessionDelegate Delegate { get; set; }

	//	// @property (assign) id<AVAudioSessionDelegate> _Nullable delegate __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "No longer supported")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "No longer supported")]
	//	[NoWatch, NoTV, NoMac]
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(BOOL)setActive:(BOOL)active withFlags:(NSInteger)flags error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("setActive:withFlags:error:")]
	//	bool SetActive (bool active, nint flags, [NullAllowed] out NSError outError);

	//	// @property (readonly) BOOL inputIsAvailable __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("inputIsAvailable")]
	//	bool InputIsAvailable { get; }

	//	// @property (readonly) double currentHardwareSampleRate __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("currentHardwareSampleRate")]
	//	double CurrentHardwareSampleRate { get; }

	//	// @property (readonly) NSInteger currentHardwareInputNumberOfChannels __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("currentHardwareInputNumberOfChannels")]
	//	nint CurrentHardwareInputNumberOfChannels { get; }

	//	// @property (readonly) NSInteger currentHardwareOutputNumberOfChannels __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("currentHardwareOutputNumberOfChannels")]
	//	nint CurrentHardwareOutputNumberOfChannels { get; }

	//	// -(BOOL)setPreferredHardwareSampleRate:(double)sampleRate error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("setPreferredHardwareSampleRate:error:")]
	//	bool SetPreferredHardwareSampleRate (double sampleRate, [NullAllowed] out NSError outError);

	//	// @property (readonly) double preferredHardwareSampleRate __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("preferredHardwareSampleRate")]
	//	double PreferredHardwareSampleRate { get; }
	//}

	//// @protocol AVAudioSessionDelegate <NSObject>
	//[Introduced (PlatformName.iOS, 3, 0, message: "No longer supported")]
	//[Deprecated (PlatformName.iOS, 6, 0, message: "No longer supported")]
	//[NoWatch, NoTV, NoMac]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioSessionDelegate
	//{
	//	// @optional -(void)beginInterruption __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 0, message: "No longer supported")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "No longer supported")]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("beginInterruption")]
	//	void BeginInterruption ();

	//	// @optional -(void)endInterruptionWithFlags:(NSUInteger)flags __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "No longer supported")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "No longer supported")]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("endInterruptionWithFlags:")]
	//	void EndInterruptionWithFlags (nuint flags);

	//	// @optional -(void)endInterruption __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 0, message: "No longer supported")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "No longer supported")]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("endInterruption")]
	//	void EndInterruption ();

	//	// @optional -(void)inputIsAvailableChanged:(BOOL)isInputAvailable __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 0, message: "No longer supported")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "No longer supported")]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("inputIsAvailableChanged:")]
	//	void InputIsAvailableChanged (bool isInputAvailable);
	//}

	//// @interface AVAudioPlayer : NSObject
	//[Watch (3,0), TV (9,0), Mac (10,7), iOS (2,2)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioPlayer
	//{
	//	// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initWithContentsOfURL:error:")]
	//	IntPtr Constructor (NSUrl url, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initWithData:error:")]
	//	IntPtr Constructor (NSData data, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url fileTypeHint:(NSString * _Nullable)utiString error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("initWithContentsOfURL:fileTypeHint:error:")]
	//	IntPtr Constructor (NSUrl url, [NullAllowed] string utiString, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data fileTypeHint:(NSString * _Nullable)utiString error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	//	[Export ("initWithData:fileTypeHint:error:")]
	//	IntPtr Constructor (NSData data, [NullAllowed] string utiString, [NullAllowed] out NSError outError);

	//	// -(BOOL)prepareToPlay;
	//	[Export ("prepareToPlay")]
	//	[Verify (MethodToProperty)]
	//	bool PrepareToPlay { get; }

	//	// -(BOOL)play;
	//	[Export ("play")]
	//	[Verify (MethodToProperty)]
	//	bool Play { get; }

	//	// -(BOOL)playAtTime:(NSTimeInterval)time __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,0)]
	//	[Export ("playAtTime:")]
	//	bool PlayAtTime (double time);

	//	// -(void)pause;
	//	[Export ("pause")]
	//	void Pause ();

	//	// -(void)stop;
	//	[Export ("stop")]
	//	void Stop ();

	//	// @property (readonly, getter = isPlaying) BOOL playing;
	//	[Export ("playing")]
	//	bool Playing { [Bind ("isPlaying")] get; }

	//	// @property (readonly) NSUInteger numberOfChannels;
	//	[Export ("numberOfChannels")]
	//	nuint NumberOfChannels { get; }

	//	// @property (readonly) NSTimeInterval duration;
	//	[Export ("duration")]
	//	double Duration { get; }

	//	// @property (copy) NSString * _Nullable currentDevice __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.13)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 13)]
	//	[NullAllowed, Export ("currentDevice")]
	//	string CurrentDevice { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVAudioPlayerDelegate Delegate { get; set; }

	//	// @property (assign) id<AVAudioPlayerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly) NSURL * _Nullable url;
	//	[NullAllowed, Export ("url")]
	//	NSUrl Url { get; }

	//	// @property (readonly) NSData * _Nullable data;
	//	[NullAllowed, Export ("data")]
	//	NSData Data { get; }

	//	// @property float pan __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[Export ("pan")]
	//	float Pan { get; set; }

	//	// @property float volume;
	//	[Export ("volume")]
	//	float Volume { get; set; }

	//	// -(void)setVolume:(float)volume fadeDuration:(NSTimeInterval)duration __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	//	[Export ("setVolume:fadeDuration:")]
	//	void SetVolume (float volume, double duration);

	//	// @property BOOL enableRate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (5, 0)]
	//	[Export ("enableRate")]
	//	bool EnableRate { get; set; }

	//	// @property float rate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.8)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (5, 0)]
	//	[Export ("rate")]
	//	float Rate { get; set; }

	//	// @property NSTimeInterval currentTime;
	//	[Export ("currentTime")]
	//	double CurrentTime { get; set; }

	//	// @property (readonly) NSTimeInterval deviceCurrentTime __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[Export ("deviceCurrentTime")]
	//	double DeviceCurrentTime { get; }

	//	// @property NSInteger numberOfLoops;
	//	[Export ("numberOfLoops")]
	//	nint NumberOfLoops { get; set; }

	//	// @property (readonly) NSDictionary<NSString *,id> * _Nonnull settings __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
	//	[Export ("settings")]
	//	NSDictionary<NSString, NSObject> Settings { get; }

	//	// @property (readonly) AVAudioFormat * _Nonnull format __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
	//	[Export ("format")]
	//	AVAudioFormat Format { get; }

	//	// @property (getter = isMeteringEnabled) BOOL meteringEnabled;
	//	[Export ("meteringEnabled")]
	//	bool MeteringEnabled { [Bind ("isMeteringEnabled")] get; set; }

	//	// -(void)updateMeters;
	//	[Export ("updateMeters")]
	//	void UpdateMeters ();

	//	// -(float)peakPowerForChannel:(NSUInteger)channelNumber;
	//	[Export ("peakPowerForChannel:")]
	//	float PeakPowerForChannel (nuint channelNumber);

	//	// -(float)averagePowerForChannel:(NSUInteger)channelNumber;
	//	[Export ("averagePowerForChannel:")]
	//	float AveragePowerForChannel (nuint channelNumber);

	//	// @property (copy, nonatomic) NSArray<AVAudioSessionChannelDescription *> * _Nullable channelAssignments __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
	//	[NullAllowed, Export ("channelAssignments", ArgumentSemantic.Copy)]
	//	AVAudioSessionChannelDescription[] ChannelAssignments { get; set; }
	//}

	//// @protocol AVAudioPlayerDelegate <NSObject>
	//[Watch (3,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioPlayerDelegate
	//{
	//	// @optional -(void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)player successfully:(BOOL)flag;
	//	[Export ("audioPlayerDidFinishPlaying:successfully:")]
	//	void AudioPlayerDidFinishPlaying (AVAudioPlayer player, bool flag);

	//	// @optional -(void)audioPlayerDecodeErrorDidOccur:(AVAudioPlayer * _Nonnull)player error:(NSError * _Nullable)error;
	//	[Export ("audioPlayerDecodeErrorDidOccur:error:")]
	//	void AudioPlayerDecodeErrorDidOccur (AVAudioPlayer player, [NullAllowed] NSError error);

	//	// @optional -(void)audioPlayerBeginInterruption:(AVAudioPlayer * _Nonnull)player __attribute__((availability(ios, introduced=2.2, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 2, 2)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("audioPlayerBeginInterruption:")]
	//	void AudioPlayerBeginInterruption (AVAudioPlayer player);

	//	// @optional -(void)audioPlayerEndInterruption:(AVAudioPlayer * _Nonnull)player withOptions:(NSUInteger)flags __attribute__((availability(ios, introduced=6.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 6, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("audioPlayerEndInterruption:withOptions:")]
	//	void AudioPlayerEndInterruption (AVAudioPlayer player, nuint flags);

	//	// @optional -(void)audioPlayerEndInterruption:(AVAudioPlayer * _Nonnull)player withFlags:(NSUInteger)flags __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[Export ("audioPlayerEndInterruption:withFlags:")]
	//	void AudioPlayerEndInterruption (AVAudioPlayer player, nuint flags);

	//	// @optional -(void)audioPlayerEndInterruption:(AVAudioPlayer * _Nonnull)player __attribute__((availability(ios, introduced=2.2, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 2, 2)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[Export ("audioPlayerEndInterruption:")]
	//	void AudioPlayerEndInterruption (AVAudioPlayer player);
	//}

	//// typedef void (^AVAudioPlayerNodeCompletionHandler)(AVAudioPlayerNodeCompletionCallbackType);
	//delegate void AVAudioPlayerNodeCompletionHandler (AVAudioPlayerNodeCompletionCallbackType arg0);

	//// @interface AVAudioPlayerNode : AVAudioNode <AVAudioMixing>
	//[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioNode))]
	//interface AVAudioPlayerNode : IAVAudioMixing
	//{
	//	// -(void)scheduleBuffer:(AVAudioPCMBuffer * _Nonnull)buffer completionHandler:(AVAudioNodeCompletionHandler _Nullable)completionHandler;
	//	[Export ("scheduleBuffer:completionHandler:")]
	//	void ScheduleBuffer (AVAudioPcmBuffer buffer, [NullAllowed] AVAudioNodeCompletionHandler completionHandler);

	//	// -(void)scheduleBuffer:(AVAudioPCMBuffer * _Nonnull)buffer completionCallbackType:(AVAudioPlayerNodeCompletionCallbackType)callbackType completionHandler:(AVAudioPlayerNodeCompletionHandler _Nullable)completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("scheduleBuffer:completionCallbackType:completionHandler:")]
	//	void ScheduleBuffer (AVAudioPcmBuffer buffer, AVAudioPlayerNodeCompletionCallbackType callbackType, [NullAllowed] AVAudioPlayerNodeCompletionHandler completionHandler);

	//	// -(void)scheduleBuffer:(AVAudioPCMBuffer * _Nonnull)buffer atTime:(AVAudioTime * _Nullable)when options:(AVAudioPlayerNodeBufferOptions)options completionHandler:(AVAudioNodeCompletionHandler _Nullable)completionHandler;
	//	[Export ("scheduleBuffer:atTime:options:completionHandler:")]
	//	void ScheduleBuffer (AVAudioPcmBuffer buffer, [NullAllowed] AVAudioTime when, AVAudioPlayerNodeBufferOptions options, [NullAllowed] AVAudioNodeCompletionHandler completionHandler);

	//	// -(void)scheduleBuffer:(AVAudioPCMBuffer * _Nonnull)buffer atTime:(AVAudioTime * _Nullable)when options:(AVAudioPlayerNodeBufferOptions)options completionCallbackType:(AVAudioPlayerNodeCompletionCallbackType)callbackType completionHandler:(AVAudioPlayerNodeCompletionHandler _Nullable)completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("scheduleBuffer:atTime:options:completionCallbackType:completionHandler:")]
	//	void ScheduleBuffer (AVAudioPcmBuffer buffer, [NullAllowed] AVAudioTime when, AVAudioPlayerNodeBufferOptions options, AVAudioPlayerNodeCompletionCallbackType callbackType, [NullAllowed] AVAudioPlayerNodeCompletionHandler completionHandler);

	//	// -(void)scheduleFile:(AVAudioFile * _Nonnull)file atTime:(AVAudioTime * _Nullable)when completionHandler:(AVAudioNodeCompletionHandler _Nullable)completionHandler;
	//	[Export ("scheduleFile:atTime:completionHandler:")]
	//	void ScheduleFile (AVAudioFile file, [NullAllowed] AVAudioTime when, [NullAllowed] AVAudioNodeCompletionHandler completionHandler);

	//	// -(void)scheduleFile:(AVAudioFile * _Nonnull)file atTime:(AVAudioTime * _Nullable)when completionCallbackType:(AVAudioPlayerNodeCompletionCallbackType)callbackType completionHandler:(AVAudioPlayerNodeCompletionHandler _Nullable)completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("scheduleFile:atTime:completionCallbackType:completionHandler:")]
	//	void ScheduleFile (AVAudioFile file, [NullAllowed] AVAudioTime when, AVAudioPlayerNodeCompletionCallbackType callbackType, [NullAllowed] AVAudioPlayerNodeCompletionHandler completionHandler);

	//	// -(void)scheduleSegment:(AVAudioFile * _Nonnull)file startingFrame:(AVAudioFramePosition)startFrame frameCount:(AVAudioFrameCount)numberFrames atTime:(AVAudioTime * _Nullable)when completionHandler:(AVAudioNodeCompletionHandler _Nullable)completionHandler;
	//	[Export ("scheduleSegment:startingFrame:frameCount:atTime:completionHandler:")]
	//	void ScheduleSegment (AVAudioFile file, long startFrame, uint numberFrames, [NullAllowed] AVAudioTime when, [NullAllowed] AVAudioNodeCompletionHandler completionHandler);

	//	// -(void)scheduleSegment:(AVAudioFile * _Nonnull)file startingFrame:(AVAudioFramePosition)startFrame frameCount:(AVAudioFrameCount)numberFrames atTime:(AVAudioTime * _Nullable)when completionCallbackType:(AVAudioPlayerNodeCompletionCallbackType)callbackType completionHandler:(AVAudioPlayerNodeCompletionHandler _Nullable)completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("scheduleSegment:startingFrame:frameCount:atTime:completionCallbackType:completionHandler:")]
	//	void ScheduleSegment (AVAudioFile file, long startFrame, uint numberFrames, [NullAllowed] AVAudioTime when, AVAudioPlayerNodeCompletionCallbackType callbackType, [NullAllowed] AVAudioPlayerNodeCompletionHandler completionHandler);

	//	// -(void)stop;
	//	[Export ("stop")]
	//	void Stop ();

	//	// -(void)prepareWithFrameCount:(AVAudioFrameCount)frameCount;
	//	[Export ("prepareWithFrameCount:")]
	//	void PrepareWithFrameCount (uint frameCount);

	//	// -(void)play;
	//	[Export ("play")]
	//	void Play ();

	//	// -(void)playAtTime:(AVAudioTime * _Nullable)when;
	//	[Export ("playAtTime:")]
	//	void PlayAtTime ([NullAllowed] AVAudioTime when);

	//	// -(void)pause;
	//	[Export ("pause")]
	//	void Pause ();

	//	// -(AVAudioTime * _Nullable)nodeTimeForPlayerTime:(AVAudioTime * _Nonnull)playerTime;
	//	[Export ("nodeTimeForPlayerTime:")]
	//	[return: NullAllowed]
	//	AVAudioTime NodeTimeForPlayerTime (AVAudioTime playerTime);

	//	// -(AVAudioTime * _Nullable)playerTimeForNodeTime:(AVAudioTime * _Nonnull)nodeTime;
	//	[Export ("playerTimeForNodeTime:")]
	//	[return: NullAllowed]
	//	AVAudioTime PlayerTimeForNodeTime (AVAudioTime nodeTime);

	//	// @property (readonly, getter = isPlaying, nonatomic) BOOL playing;
	//	[Export ("playing")]
	//	bool Playing { [Bind ("isPlaying")] get; }
	//}

	//// @interface AVAudioRecorder : NSObject
	//[Watch (4,0), NoTV, Mac (10,7), iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioRecorder
	//{
	//	// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url settings:(NSDictionary<NSString *,id> * _Nonnull)settings error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initWithURL:settings:error:")]
	//	IntPtr Constructor (NSUrl url, NSDictionary<NSString, NSObject> settings, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url format:(AVAudioFormat * _Nonnull)format error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (4,0), NoTV, Mac (10,12), iOS (10,0)]
	//	[Export ("initWithURL:format:error:")]
	//	IntPtr Constructor (NSUrl url, AVAudioFormat format, [NullAllowed] out NSError outError);

	//	// -(BOOL)prepareToRecord;
	//	[Export ("prepareToRecord")]
	//	[Verify (MethodToProperty)]
	//	bool PrepareToRecord { get; }

	//	// -(BOOL)record;
	//	[Export ("record")]
	//	[Verify (MethodToProperty)]
	//	bool Record { get; }

	//	// -(BOOL)recordAtTime:(NSTimeInterval)time __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (4,0), NoTV, Mac (10,9), iOS (6,0)]
	//	[Export ("recordAtTime:")]
	//	bool RecordAtTime (double time);

	//	// -(BOOL)recordForDuration:(NSTimeInterval)duration;
	//	[Export ("recordForDuration:")]
	//	bool RecordForDuration (double duration);

	//	// -(BOOL)recordAtTime:(NSTimeInterval)time forDuration:(NSTimeInterval)duration __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (4,0), NoTV, Mac (10,9), iOS (6,0)]
	//	[Export ("recordAtTime:forDuration:")]
	//	bool RecordAtTime (double time, double duration);

	//	// -(void)pause;
	//	[Export ("pause")]
	//	void Pause ();

	//	// -(void)stop;
	//	[Export ("stop")]
	//	void Stop ();

	//	// -(BOOL)deleteRecording;
	//	[Export ("deleteRecording")]
	//	[Verify (MethodToProperty)]
	//	bool DeleteRecording { get; }

	//	// @property (readonly, getter = isRecording) BOOL recording;
	//	[Export ("recording")]
	//	bool Recording { [Bind ("isRecording")] get; }

	//	// @property (readonly) NSURL * _Nonnull url;
	//	[Export ("url")]
	//	NSUrl Url { get; }

	//	// @property (readonly) NSDictionary<NSString *,id> * _Nonnull settings;
	//	[Export ("settings")]
	//	NSDictionary<NSString, NSObject> Settings { get; }

	//	// @property (readonly) AVAudioFormat * _Nonnull format __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
	//	[Watch (4, 0), NoTV, Mac (10, 12), iOS (10, 0)]
	//	[Export ("format")]
	//	AVAudioFormat Format { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVAudioRecorderDelegate Delegate { get; set; }

	//	// @property (assign) id<AVAudioRecorderDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly) NSTimeInterval currentTime;
	//	[Export ("currentTime")]
	//	double CurrentTime { get; }

	//	// @property (readonly) NSTimeInterval deviceCurrentTime __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (4, 0), NoTV, Mac (10, 9), iOS (6, 0)]
	//	[Export ("deviceCurrentTime")]
	//	double DeviceCurrentTime { get; }

	//	// @property (getter = isMeteringEnabled) BOOL meteringEnabled;
	//	[Export ("meteringEnabled")]
	//	bool MeteringEnabled { [Bind ("isMeteringEnabled")] get; set; }

	//	// -(void)updateMeters;
	//	[Export ("updateMeters")]
	//	void UpdateMeters ();

	//	// -(float)peakPowerForChannel:(NSUInteger)channelNumber;
	//	[Export ("peakPowerForChannel:")]
	//	float PeakPowerForChannel (nuint channelNumber);

	//	// -(float)averagePowerForChannel:(NSUInteger)channelNumber;
	//	[Export ("averagePowerForChannel:")]
	//	float AveragePowerForChannel (nuint channelNumber);

	//	// @property (copy, nonatomic) NSArray<AVAudioSessionChannelDescription *> * _Nullable channelAssignments __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
	//	[Watch (4, 0), NoTV, Mac (10, 9), iOS (7, 0)]
	//	[NullAllowed, Export ("channelAssignments", ArgumentSemantic.Copy)]
	//	AVAudioSessionChannelDescription[] ChannelAssignments { get; set; }
	//}

	//// @protocol AVAudioRecorderDelegate <NSObject>
	//[Watch (4,0), NoTV, Mac (10,7), iOS (3,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioRecorderDelegate
	//{
	//	// @optional -(void)audioRecorderDidFinishRecording:(AVAudioRecorder * _Nonnull)recorder successfully:(BOOL)flag;
	//	[Export ("audioRecorderDidFinishRecording:successfully:")]
	//	void AudioRecorderDidFinishRecording (AVAudioRecorder recorder, bool flag);

	//	// @optional -(void)audioRecorderEncodeErrorDidOccur:(AVAudioRecorder * _Nonnull)recorder error:(NSError * _Nullable)error;
	//	[Export ("audioRecorderEncodeErrorDidOccur:error:")]
	//	void AudioRecorderEncodeErrorDidOccur (AVAudioRecorder recorder, [NullAllowed] NSError error);

	//	// @optional -(void)audioRecorderBeginInterruption:(AVAudioRecorder * _Nonnull)recorder __attribute__((availability(ios, introduced=2.2, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 2, 2)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("audioRecorderBeginInterruption:")]
	//	void AudioRecorderBeginInterruption (AVAudioRecorder recorder);

	//	// @optional -(void)audioRecorderEndInterruption:(AVAudioRecorder * _Nonnull)recorder withOptions:(NSUInteger)flags __attribute__((availability(ios, introduced=6.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 6, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("audioRecorderEndInterruption:withOptions:")]
	//	void AudioRecorderEndInterruption (AVAudioRecorder recorder, nuint flags);

	//	// @optional -(void)audioRecorderEndInterruption:(AVAudioRecorder * _Nonnull)recorder withFlags:(NSUInteger)flags __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[Export ("audioRecorderEndInterruption:withFlags:")]
	//	void AudioRecorderEndInterruption (AVAudioRecorder recorder, nuint flags);

	//	// @optional -(void)audioRecorderEndInterruption:(AVAudioRecorder * _Nonnull)recorder __attribute__((availability(ios, introduced=2.2, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 2, 2)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[Export ("audioRecorderEndInterruption:")]
	//	void AudioRecorderEndInterruption (AVAudioRecorder recorder);
	//}

	//// @interface AVAudioSequencer : NSObject
	//[TV (9,0), NoWatch, Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVAudioSequencer
	//{
	//	// -(instancetype _Nonnull)initWithAudioEngine:(AVAudioEngine * _Nonnull)engine;
	//	[Export ("initWithAudioEngine:")]
	//	IntPtr Constructor (AVAudioEngine engine);

	//	// -(BOOL)loadFromURL:(NSURL * _Nonnull)fileURL options:(AVMusicSequenceLoadOptions)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("loadFromURL:options:error:")]
	//	bool LoadFromURL (NSUrl fileURL, AVMusicSequenceLoadOptions options, [NullAllowed] out NSError outError);

	//	// -(BOOL)loadFromData:(NSData * _Nonnull)data options:(AVMusicSequenceLoadOptions)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("loadFromData:options:error:")]
	//	bool LoadFromData (NSData data, AVMusicSequenceLoadOptions options, [NullAllowed] out NSError outError);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)fileURL SMPTEResolution:(NSInteger)resolution replaceExisting:(BOOL)replace error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("writeToURL:SMPTEResolution:replaceExisting:error:")]
	//	bool WriteToURL (NSUrl fileURL, nint resolution, bool replace, [NullAllowed] out NSError outError);

	//	// -(NSData * _Nonnull)dataWithSMPTEResolution:(NSInteger)SMPTEResolution error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("dataWithSMPTEResolution:error:")]
	//	NSData DataWithSMPTEResolution (nint SMPTEResolution, [NullAllowed] out NSError outError);

	//	// -(NSTimeInterval)secondsForBeats:(AVMusicTimeStamp)beats;
	//	[Export ("secondsForBeats:")]
	//	double SecondsForBeats (double beats);

	//	// -(AVMusicTimeStamp)beatsForSeconds:(NSTimeInterval)seconds;
	//	[Export ("beatsForSeconds:")]
	//	double BeatsForSeconds (double seconds);

	//	// @property (readonly, nonatomic) NSArray<AVMusicTrack *> * _Nonnull tracks;
	//	[Export ("tracks")]
	//	AVMusicTrack[] Tracks { get; }

	//	// @property (readonly, nonatomic) AVMusicTrack * _Nonnull tempoTrack;
	//	[Export ("tempoTrack")]
	//	AVMusicTrack TempoTrack { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nonnull userInfo;
	//	[Export ("userInfo")]
	//	NSDictionary<NSString, NSObject> UserInfo { get; }
	//}

	//// @interface AVAudioSequencer_Player (AVAudioSequencer)
	//[Category]
	//[BaseType (typeof(AVAudioSequencer))]
	//interface AVAudioSequencer_AVAudioSequencer_Player
	//{
	//	// @property (nonatomic) NSTimeInterval currentPositionInSeconds;
	//	[Export ("currentPositionInSeconds")]
	//	double CurrentPositionInSeconds { get; set; }

	//	// @property (nonatomic) NSTimeInterval currentPositionInBeats;
	//	[Export ("currentPositionInBeats")]
	//	double CurrentPositionInBeats { get; set; }

	//	// @property (readonly, getter = isPlaying, nonatomic) BOOL playing;
	//	[Export ("playing")]
	//	bool Playing { [Bind ("isPlaying")] get; }

	//	// @property (nonatomic) float rate;
	//	[Export ("rate")]
	//	float Rate { get; set; }

	//	// -(UInt64)hostTimeForBeats:(AVMusicTimeStamp)inBeats error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("hostTimeForBeats:error:")]
	//	ulong HostTimeForBeats (double inBeats, [NullAllowed] out NSError outError);

	//	// -(AVMusicTimeStamp)beatsForHostTime:(UInt64)inHostTime error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("beatsForHostTime:error:")]
	//	double BeatsForHostTime (ulong inHostTime, [NullAllowed] out NSError outError);

	//	// -(void)prepareToPlay;
	//	[Export ("prepareToPlay")]
	//	void PrepareToPlay ();

	//	// -(BOOL)startAndReturnError:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("startAndReturnError:")]
	//	bool StartAndReturnError ([NullAllowed] out NSError outError);

	//	// -(void)stop;
	//	[Export ("stop")]
	//	void Stop ();
	//}

	//// @interface AVMusicTrack : NSObject
	//[TV (9,0), NoWatch, Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVMusicTrack
	//{
	//	// @property (retain, nonatomic) AVAudioUnit * _Nullable destinationAudioUnit;
	//	[NullAllowed, Export ("destinationAudioUnit", ArgumentSemantic.Retain)]
	//	AVAudioUnit DestinationAudioUnit { get; set; }

	//	// @property (nonatomic) MIDIEndpointRef destinationMIDIEndpoint;
	//	[Export ("destinationMIDIEndpoint")]
	//	uint DestinationMIDIEndpoint { get; set; }

	//	// @property (nonatomic) AVBeatRange loopRange;
	//	[Export ("loopRange", ArgumentSemantic.Assign)]
	//	AVBeatRange LoopRange { get; set; }

	//	// @property (getter = isLoopingEnabled, nonatomic) BOOL loopingEnabled;
	//	[Export ("loopingEnabled")]
	//	bool LoopingEnabled { [Bind ("isLoopingEnabled")] get; set; }

	//	// @property (nonatomic) NSInteger numberOfLoops;
	//	[Export ("numberOfLoops")]
	//	nint NumberOfLoops { get; set; }

	//	// @property (nonatomic) AVMusicTimeStamp offsetTime;
	//	[Export ("offsetTime")]
	//	double OffsetTime { get; set; }

	//	// @property (getter = isMuted, nonatomic) BOOL muted;
	//	[Export ("muted")]
	//	bool Muted { [Bind ("isMuted")] get; set; }

	//	// @property (getter = isSoloed, nonatomic) BOOL soloed;
	//	[Export ("soloed")]
	//	bool Soloed { [Bind ("isSoloed")] get; set; }

	//	// @property (nonatomic) AVMusicTimeStamp lengthInBeats;
	//	[Export ("lengthInBeats")]
	//	double LengthInBeats { get; set; }

	//	// @property (nonatomic) NSTimeInterval lengthInSeconds;
	//	[Export ("lengthInSeconds")]
	//	double LengthInSeconds { get; set; }

	//	// @property (readonly, nonatomic) NSUInteger timeResolution;
	//	[Export ("timeResolution")]
	//	nuint TimeResolution { get; }
	//}

	//// @interface AVAudioUnitComponent : NSObject
	//[TV (9,0), NoWatch, Mac (10,10), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioUnitComponent
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull typeName;
	//	[Export ("typeName")]
	//	string TypeName { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull localizedTypeName;
	//	[Export ("localizedTypeName")]
	//	string LocalizedTypeName { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull manufacturerName;
	//	[Export ("manufacturerName")]
	//	string ManufacturerName { get; }

	//	// @property (readonly, nonatomic) NSUInteger version;
	//	[Export ("version")]
	//	nuint Version { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull versionString;
	//	[Export ("versionString")]
	//	string VersionString { get; }

	//	// @property (readonly, nonatomic) NSURL * _Nullable componentURL __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[NullAllowed, Export ("componentURL")]
	//	NSUrl ComponentURL { get; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull availableArchitectures __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.10)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 10)]
	//	[Export ("availableArchitectures")]
	//	NSNumber[] AvailableArchitectures { get; }

	//	// @property (readonly, getter = isSandboxSafe, nonatomic) BOOL sandboxSafe;
	//	[Export ("sandboxSafe")]
	//	bool SandboxSafe { [Bind ("isSandboxSafe")] get; }

	//	// @property (readonly, nonatomic) BOOL hasMIDIInput;
	//	[Export ("hasMIDIInput")]
	//	bool HasMIDIInput { get; }

	//	// @property (readonly, nonatomic) BOOL hasMIDIOutput;
	//	[Export ("hasMIDIOutput")]
	//	bool HasMIDIOutput { get; }

	//	// @property (readonly, nonatomic) AudioComponent _Nonnull audioComponent;
	//	[Export ("audioComponent")]
	//	unsafe AudioComponent* AudioComponent { get; }

	//	// @property (copy) NSArray<NSString *> * _Nonnull userTagNames __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.10)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 10)]
	//	[Export ("userTagNames", ArgumentSemantic.Copy)]
	//	string[] UserTagNames { get; set; }

	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull allTagNames;
	//	[Export ("allTagNames")]
	//	string[] AllTagNames { get; }

	//	// @property (readonly, nonatomic) AudioComponentDescription audioComponentDescription;
	//	[Export ("audioComponentDescription")]
	//	AudioComponentDescription AudioComponentDescription { get; }

	//	// @property (readonly, nonatomic) NSURL * _Nullable iconURL __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.10)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 10)]
	//	[NullAllowed, Export ("iconURL")]
	//	NSUrl IconURL { get; }

	//	// @property (readonly, nonatomic) BOOL passesAUVal __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.10)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 10)]
	//	[Export ("passesAUVal")]
	//	bool PassesAUVal { get; }

	//	// @property (readonly, nonatomic) BOOL hasCustomView __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.10)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 10)]
	//	[Export ("hasCustomView")]
	//	bool HasCustomView { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nonnull configurationDictionary __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.10)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 10)]
	//	[Export ("configurationDictionary")]
	//	NSDictionary<NSString, NSObject> ConfigurationDictionary { get; }

	//	// -(BOOL)supportsNumberInputChannels:(NSInteger)numInputChannels outputChannels:(NSInteger)numOutputChannels __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.10)));
	//	[NoWatch, NoTV, NoiOS, Mac (10,10)]
	//	[Export ("supportsNumberInputChannels:outputChannels:")]
	//	bool SupportsNumberInputChannels (nint numInputChannels, nint numOutputChannels);
	//}

	//// @interface AVAudioUnitComponentManager : NSObject
	//[TV (9,0), NoWatch, Mac (10,10), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVAudioUnitComponentManager
	//{
	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull tagNames;
	//	[Export ("tagNames")]
	//	string[] TagNames { get; }

	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull standardLocalizedTagNames;
	//	[Export ("standardLocalizedTagNames")]
	//	string[] StandardLocalizedTagNames { get; }

	//	// +(instancetype _Nonnull)sharedAudioUnitComponentManager;
	//	[Static]
	//	[Export ("sharedAudioUnitComponentManager")]
	//	AVAudioUnitComponentManager SharedAudioUnitComponentManager ();

	//	// -(NSArray<AVAudioUnitComponent *> * _Nonnull)componentsMatchingPredicate:(NSPredicate * _Nonnull)predicate;
	//	[Export ("componentsMatchingPredicate:")]
	//	AVAudioUnitComponent[] ComponentsMatchingPredicate (NSPredicate predicate);

	//	// -(NSArray<AVAudioUnitComponent *> * _Nonnull)componentsPassingTest:(BOOL (^ _Nonnull)(AVAudioUnitComponent * _Nonnull, BOOL * _Nonnull))testHandler;
	//	[Export ("componentsPassingTest:")]
	//	unsafe AVAudioUnitComponent[] ComponentsPassingTest (Func<AVAudioUnitComponent, bool*, bool> testHandler);

	//	// -(NSArray<AVAudioUnitComponent *> * _Nonnull)componentsMatchingDescription:(AudioComponentDescription)desc;
	//	[Export ("componentsMatchingDescription:")]
	//	AVAudioUnitComponent[] ComponentsMatchingDescription (AudioComponentDescription desc);
	//}

	//// @interface AVAudioUnitDelay : AVAudioUnitEffect
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioUnitEffect))]
	//interface AVAudioUnitDelay
	//{
	//	// @property (nonatomic) NSTimeInterval delayTime;
	//	[Export ("delayTime")]
	//	double DelayTime { get; set; }

	//	// @property (nonatomic) float feedback;
	//	[Export ("feedback")]
	//	float Feedback { get; set; }

	//	// @property (nonatomic) float lowPassCutoff;
	//	[Export ("lowPassCutoff")]
	//	float LowPassCutoff { get; set; }

	//	// @property (nonatomic) float wetDryMix;
	//	[Export ("wetDryMix")]
	//	float WetDryMix { get; set; }
	//}

	//// @interface AVAudioUnitDistortion : AVAudioUnitEffect
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioUnitEffect))]
	//interface AVAudioUnitDistortion
	//{
	//	// -(void)loadFactoryPreset:(AVAudioUnitDistortionPreset)preset;
	//	[Export ("loadFactoryPreset:")]
	//	void LoadFactoryPreset (AVAudioUnitDistortionPreset preset);

	//	// @property (nonatomic) float preGain;
	//	[Export ("preGain")]
	//	float PreGain { get; set; }

	//	// @property (nonatomic) float wetDryMix;
	//	[Export ("wetDryMix")]
	//	float WetDryMix { get; set; }
	//}

	//// @interface AVAudioUnitGenerator : AVAudioUnit <AVAudioMixing>
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioUnit))]
	//interface AVAudioUnitGenerator : IAVAudioMixing
	//{
	//	// -(instancetype _Nonnull)initWithAudioComponentDescription:(AudioComponentDescription)audioComponentDescription;
	//	[Export ("initWithAudioComponentDescription:")]
	//	IntPtr Constructor (AudioComponentDescription audioComponentDescription);

	//	// @property (nonatomic) BOOL bypass;
	//	[Export ("bypass")]
	//	bool Bypass { get; set; }
	//}

	//// @interface AVAudioUnitMIDIInstrument : AVAudioUnit <AVAudioMixing>
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioUnit))]
	//interface AVAudioUnitMIDIInstrument : IAVAudioMixing
	//{
	//	// -(instancetype _Nonnull)initWithAudioComponentDescription:(AudioComponentDescription)description;
	//	[Export ("initWithAudioComponentDescription:")]
	//	IntPtr Constructor (AudioComponentDescription description);

	//	// -(void)startNote:(uint8_t)note withVelocity:(uint8_t)velocity onChannel:(uint8_t)channel;
	//	[Export ("startNote:withVelocity:onChannel:")]
	//	void StartNote (byte note, byte velocity, byte channel);

	//	// -(void)stopNote:(uint8_t)note onChannel:(uint8_t)channel;
	//	[Export ("stopNote:onChannel:")]
	//	void StopNote (byte note, byte channel);

	//	// -(void)sendController:(uint8_t)controller withValue:(uint8_t)value onChannel:(uint8_t)channel;
	//	[Export ("sendController:withValue:onChannel:")]
	//	void SendController (byte controller, byte value, byte channel);

	//	// -(void)sendPitchBend:(uint16_t)pitchbend onChannel:(uint8_t)channel;
	//	[Export ("sendPitchBend:onChannel:")]
	//	void SendPitchBend (ushort pitchbend, byte channel);

	//	// -(void)sendPressure:(uint8_t)pressure onChannel:(uint8_t)channel;
	//	[Export ("sendPressure:onChannel:")]
	//	void SendPressure (byte pressure, byte channel);

	//	// -(void)sendPressureForKey:(uint8_t)key withValue:(uint8_t)value onChannel:(uint8_t)channel;
	//	[Export ("sendPressureForKey:withValue:onChannel:")]
	//	void SendPressureForKey (byte key, byte value, byte channel);

	//	// -(void)sendProgramChange:(uint8_t)program onChannel:(uint8_t)channel;
	//	[Export ("sendProgramChange:onChannel:")]
	//	void SendProgramChange (byte program, byte channel);

	//	// -(void)sendProgramChange:(uint8_t)program bankMSB:(uint8_t)bankMSB bankLSB:(uint8_t)bankLSB onChannel:(uint8_t)channel;
	//	[Export ("sendProgramChange:bankMSB:bankLSB:onChannel:")]
	//	void SendProgramChange (byte program, byte bankMSB, byte bankLSB, byte channel);

	//	// -(void)sendMIDIEvent:(uint8_t)midiStatus data1:(uint8_t)data1 data2:(uint8_t)data2;
	//	[Export ("sendMIDIEvent:data1:data2:")]
	//	void SendMIDIEvent (byte midiStatus, byte data1, byte data2);

	//	// -(void)sendMIDIEvent:(uint8_t)midiStatus data1:(uint8_t)data1;
	//	[Export ("sendMIDIEvent:data1:")]
	//	void SendMIDIEvent (byte midiStatus, byte data1);

	//	// -(void)sendMIDISysExEvent:(NSData * _Nonnull)midiData;
	//	[Export ("sendMIDISysExEvent:")]
	//	void SendMIDISysExEvent (NSData midiData);
	//}

	//// @interface AVAudioUnitSampler : AVAudioUnitMIDIInstrument
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioUnitMidiInstrument))]
	//interface AVAudioUnitSampler
	//{
	//	// -(BOOL)loadSoundBankInstrumentAtURL:(NSURL * _Nonnull)bankURL program:(uint8_t)program bankMSB:(uint8_t)bankMSB bankLSB:(uint8_t)bankLSB error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("loadSoundBankInstrumentAtURL:program:bankMSB:bankLSB:error:")]
	//	bool LoadSoundBankInstrumentAtURL (NSUrl bankURL, byte program, byte bankMSB, byte bankLSB, [NullAllowed] out NSError outError);

	//	// -(BOOL)loadInstrumentAtURL:(NSURL * _Nonnull)instrumentURL error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("loadInstrumentAtURL:error:")]
	//	bool LoadInstrumentAtURL (NSUrl instrumentURL, [NullAllowed] out NSError outError);

	//	// -(BOOL)loadAudioFilesAtURLs:(NSArray<NSURL *> * _Nonnull)audioFiles error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("loadAudioFilesAtURLs:error:")]
	//	bool LoadAudioFilesAtURLs (NSUrl[] audioFiles, [NullAllowed] out NSError outError);

	//	// @property (nonatomic) float stereoPan;
	//	[Export ("stereoPan")]
	//	float StereoPan { get; set; }

	//	// @property (nonatomic) float masterGain;
	//	[Export ("masterGain")]
	//	float MasterGain { get; set; }

	//	// @property (nonatomic) float globalTuning;
	//	[Export ("globalTuning")]
	//	float GlobalTuning { get; set; }
	//}

	//// @interface AVAudioUnitTimeEffect : AVAudioUnit
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioUnit))]
	//interface AVAudioUnitTimeEffect
	//{
	//	// -(instancetype _Nonnull)initWithAudioComponentDescription:(AudioComponentDescription)audioComponentDescription;
	//	[Export ("initWithAudioComponentDescription:")]
	//	IntPtr Constructor (AudioComponentDescription audioComponentDescription);

	//	// @property (nonatomic) BOOL bypass;
	//	[Export ("bypass")]
	//	bool Bypass { get; set; }
	//}

	//// @interface AVAudioUnitTimePitch : AVAudioUnitTimeEffect
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioUnitTimeEffect))]
	//interface AVAudioUnitTimePitch
	//{
	//	// @property (nonatomic) float rate;
	//	[Export ("rate")]
	//	float Rate { get; set; }

	//	// @property (nonatomic) float pitch;
	//	[Export ("pitch")]
	//	float Pitch { get; set; }

	//	// @property (nonatomic) float overlap;
	//	[Export ("overlap")]
	//	float Overlap { get; set; }
	//}

	//// @interface AVAudioUnitVarispeed : AVAudioUnitTimeEffect
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(AVAudioUnitTimeEffect))]
	//interface AVAudioUnitVarispeed
	//{
	//	// @property (nonatomic) float rate;
	//	[Export ("rate")]
	//	float Rate { get; set; }
	//}

	//// typedef void (^AVMIDIPlayerCompletionHandler)();
	//delegate void AVMIDIPlayerCompletionHandler ();

	//// @interface AVMIDIPlayer : NSObject
	//[TV (9,0), NoWatch, Mac (10,10), iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVMIDIPlayer
	//{
	//	// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)inURL soundBankURL:(NSURL * _Nullable)bankURL error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initWithContentsOfURL:soundBankURL:error:")]
	//	IntPtr Constructor (NSUrl inURL, [NullAllowed] NSUrl bankURL, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data soundBankURL:(NSURL * _Nullable)bankURL error:(NSError * _Nullable * _Nullable)outError;
	//	[Export ("initWithData:soundBankURL:error:")]
	//	IntPtr Constructor (NSData data, [NullAllowed] NSUrl bankURL, [NullAllowed] out NSError outError);

	//	// -(void)prepareToPlay;
	//	[Export ("prepareToPlay")]
	//	void PrepareToPlay ();

	//	// -(void)play:(AVMIDIPlayerCompletionHandler _Nullable)completionHandler;
	//	[Export ("play:")]
	//	void Play ([NullAllowed] AVMIDIPlayerCompletionHandler completionHandler);

	//	// -(void)stop;
	//	[Export ("stop")]
	//	void Stop ();

	//	// @property (readonly, nonatomic) NSTimeInterval duration;
	//	[Export ("duration")]
	//	double Duration { get; }

	//	// @property (readonly, getter = isPlaying, nonatomic) BOOL playing;
	//	[Export ("playing")]
	//	bool Playing { [Bind ("isPlaying")] get; }

	//	// @property (nonatomic) float rate;
	//	[Export ("rate")]
	//	float Rate { get; set; }

	//	// @property (nonatomic) NSTimeInterval currentPosition;
	//	[Export ("currentPosition")]
	//	double CurrentPosition { get; set; }
	//}

	//// @interface AVSpeechSynthesisVoice : NSObject <NSSecureCoding>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVSpeechSynthesisVoice : INSSecureCoding
	//{
	//	// +(NSArray<AVSpeechSynthesisVoice *> * _Nonnull)speechVoices;
	//	[Static]
	//	[Export ("speechVoices")]
	//	[Verify (MethodToProperty)]
	//	AVSpeechSynthesisVoice[] SpeechVoices { get; }

	//	// +(NSString * _Nonnull)currentLanguageCode;
	//	[Static]
	//	[Export ("currentLanguageCode")]
	//	[Verify (MethodToProperty)]
	//	string CurrentLanguageCode { get; }

	//	// +(AVSpeechSynthesisVoice * _Nullable)voiceWithLanguage:(NSString * _Nullable)languageCode;
	//	[Static]
	//	[Export ("voiceWithLanguage:")]
	//	[return: NullAllowed]
	//	AVSpeechSynthesisVoice VoiceWithLanguage ([NullAllowed] string languageCode);

	//	// +(AVSpeechSynthesisVoice * _Nullable)voiceWithIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
	//	[Watch (2,0), TV (9,0), Mac (10,14), iOS (9,0)]
	//	[Static]
	//	[Export ("voiceWithIdentifier:")]
	//	[return: NullAllowed]
	//	AVSpeechSynthesisVoice VoiceWithIdentifier (string identifier);

	//	// @property (readonly, nonatomic) NSString * _Nonnull language;
	//	[Export ("language")]
	//	string Language { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull identifier __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 14), iOS (9, 0)]
	//	[Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull name __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 14), iOS (9, 0)]
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) AVSpeechSynthesisVoiceQuality quality __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
	//	[Watch (2, 0), TV (9, 0), Mac (10, 14), iOS (9, 0)]
	//	[Export ("quality")]
	//	AVSpeechSynthesisVoiceQuality Quality { get; }
	//}

	//// @interface AVSpeechUtterance : NSObject <NSCopying, NSSecureCoding>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVSpeechUtterance : INSCopying, INSSecureCoding
	//{
	//	// +(instancetype _Nonnull)speechUtteranceWithString:(NSString * _Nonnull)string;
	//	[Static]
	//	[Export ("speechUtteranceWithString:")]
	//	AVSpeechUtterance SpeechUtteranceWithString (string @string);

	//	// +(instancetype _Nonnull)speechUtteranceWithAttributedString:(NSAttributedString * _Nonnull)string __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0)));
	//	[Watch (3,0), TV (10,0), Mac (10,14), iOS (10,0)]
	//	[Static]
	//	[Export ("speechUtteranceWithAttributedString:")]
	//	AVSpeechUtterance SpeechUtteranceWithAttributedString (NSAttributedString @string);

	//	// -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)string;
	//	[Export ("initWithString:")]
	//	IntPtr Constructor (string @string);

	//	// -(instancetype _Nonnull)initWithAttributedString:(NSAttributedString * _Nonnull)string __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0)));
	//	[Watch (3,0), TV (10,0), Mac (10,14), iOS (10,0)]
	//	[Export ("initWithAttributedString:")]
	//	IntPtr Constructor (NSAttributedString @string);

	//	// @property (retain, nonatomic) AVSpeechSynthesisVoice * _Nullable voice;
	//	[NullAllowed, Export ("voice", ArgumentSemantic.Retain)]
	//	AVSpeechSynthesisVoice Voice { get; set; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull speechString;
	//	[Export ("speechString")]
	//	string SpeechString { get; }

	//	// @property (readonly, nonatomic) NSAttributedString * _Nonnull attributedSpeechString __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 14), iOS (10, 0)]
	//	[Export ("attributedSpeechString")]
	//	NSAttributedString AttributedSpeechString { get; }

	//	// @property (nonatomic) float rate;
	//	[Export ("rate")]
	//	float Rate { get; set; }

	//	// @property (nonatomic) float pitchMultiplier;
	//	[Export ("pitchMultiplier")]
	//	float PitchMultiplier { get; set; }

	//	// @property (nonatomic) float volume;
	//	[Export ("volume")]
	//	float Volume { get; set; }

	//	// @property (nonatomic) NSTimeInterval preUtteranceDelay;
	//	[Export ("preUtteranceDelay")]
	//	double PreUtteranceDelay { get; set; }

	//	// @property (nonatomic) NSTimeInterval postUtteranceDelay;
	//	[Export ("postUtteranceDelay")]
	//	double PostUtteranceDelay { get; set; }
	//}

	//// @interface AVSpeechSynthesizer : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVSpeechSynthesizer
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVSpeechSynthesizerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<AVSpeechSynthesizerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, getter = isSpeaking, nonatomic) BOOL speaking;
	//	[Export ("speaking")]
	//	bool Speaking { [Bind ("isSpeaking")] get; }

	//	// @property (readonly, getter = isPaused, nonatomic) BOOL paused;
	//	[Export ("paused")]
	//	bool Paused { [Bind ("isPaused")] get; }

	//	// -(void)speakUtterance:(AVSpeechUtterance * _Nonnull)utterance;
	//	[Export ("speakUtterance:")]
	//	void SpeakUtterance (AVSpeechUtterance utterance);

	//	// -(BOOL)stopSpeakingAtBoundary:(AVSpeechBoundary)boundary;
	//	[Export ("stopSpeakingAtBoundary:")]
	//	bool StopSpeakingAtBoundary (AVSpeechBoundary boundary);

	//	// -(BOOL)pauseSpeakingAtBoundary:(AVSpeechBoundary)boundary;
	//	[Export ("pauseSpeakingAtBoundary:")]
	//	bool PauseSpeakingAtBoundary (AVSpeechBoundary boundary);

	//	// -(BOOL)continueSpeaking;
	//	[Export ("continueSpeaking")]
	//	[Verify (MethodToProperty)]
	//	bool ContinueSpeaking { get; }

	//	// @property (retain, nonatomic) NSArray<AVAudioSessionChannelDescription *> * _Nullable outputChannels __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0)));
	//	[Watch (3, 0), TV (10, 0), Mac (10, 14), iOS (10, 0)]
	//	[NullAllowed, Export ("outputChannels", ArgumentSemantic.Retain)]
	//	AVAudioSessionChannelDescription[] OutputChannels { get; set; }
	//}

	//// @protocol AVSpeechSynthesizerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVSpeechSynthesizerDelegate
	//{
	//	// @optional -(void)speechSynthesizer:(AVSpeechSynthesizer * _Nonnull)synthesizer didStartSpeechUtterance:(AVSpeechUtterance * _Nonnull)utterance __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=7.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (1,0), TV (7,0), Mac (10,14), iOS (7,0)]
	//	[Export ("speechSynthesizer:didStartSpeechUtterance:")]
	//	void DidStartSpeechUtterance (AVSpeechSynthesizer synthesizer, AVSpeechUtterance utterance);

	//	// @optional -(void)speechSynthesizer:(AVSpeechSynthesizer * _Nonnull)synthesizer didFinishSpeechUtterance:(AVSpeechUtterance * _Nonnull)utterance __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=7.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (1,0), TV (7,0), Mac (10,14), iOS (7,0)]
	//	[Export ("speechSynthesizer:didFinishSpeechUtterance:")]
	//	void DidFinishSpeechUtterance (AVSpeechSynthesizer synthesizer, AVSpeechUtterance utterance);

	//	// @optional -(void)speechSynthesizer:(AVSpeechSynthesizer * _Nonnull)synthesizer didPauseSpeechUtterance:(AVSpeechUtterance * _Nonnull)utterance __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=7.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (1,0), TV (7,0), Mac (10,14), iOS (7,0)]
	//	[Export ("speechSynthesizer:didPauseSpeechUtterance:")]
	//	void DidPauseSpeechUtterance (AVSpeechSynthesizer synthesizer, AVSpeechUtterance utterance);

	//	// @optional -(void)speechSynthesizer:(AVSpeechSynthesizer * _Nonnull)synthesizer didContinueSpeechUtterance:(AVSpeechUtterance * _Nonnull)utterance __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=7.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (1,0), TV (7,0), Mac (10,14), iOS (7,0)]
	//	[Export ("speechSynthesizer:didContinueSpeechUtterance:")]
	//	void DidContinueSpeechUtterance (AVSpeechSynthesizer synthesizer, AVSpeechUtterance utterance);

	//	// @optional -(void)speechSynthesizer:(AVSpeechSynthesizer * _Nonnull)synthesizer didCancelSpeechUtterance:(AVSpeechUtterance * _Nonnull)utterance __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=7.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (1,0), TV (7,0), Mac (10,14), iOS (7,0)]
	//	[Export ("speechSynthesizer:didCancelSpeechUtterance:")]
	//	void DidCancelSpeechUtterance (AVSpeechSynthesizer synthesizer, AVSpeechUtterance utterance);

	//	// @optional -(void)speechSynthesizer:(AVSpeechSynthesizer * _Nonnull)synthesizer willSpeakRangeOfSpeechString:(NSRange)characterRange utterance:(AVSpeechUtterance * _Nonnull)utterance __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=7.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[Watch (1,0), TV (7,0), Mac (10,14), iOS (7,0)]
	//	[Export ("speechSynthesizer:willSpeakRangeOfSpeechString:utterance:")]
	//	void WillSpeakRangeOfSpeechString (AVSpeechSynthesizer synthesizer, NSRange characterRange, AVSpeechUtterance utterance);
	//}

	//// @interface AVMetadataItem : NSObject <AVAsynchronousKeyValueLoading, NSCopying, NSMutableCopying>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVMetadataItem : IAVAsynchronousKeyValueLoading, INSCopying, INSMutableCopying
	//{
	//	// @property (readonly, copy, nonatomic) AVMetadataIdentifier _Nullable identifier __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable extendedLanguageTag __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("extendedLanguageTag")]
	//	string ExtendedLanguageTag { get; }

	//	// @property (readonly, copy, nonatomic) NSLocale * _Nullable locale;
	//	[NullAllowed, Export ("locale", ArgumentSemantic.Copy)]
	//	NSLocale Locale { get; }

	//	// @property (readonly, nonatomic) CMTime time;
	//	[Export ("time")]
	//	CMTime Time { get; }

	//	// @property (readonly, nonatomic) CMTime duration __attribute__((availability(ios, introduced=4.2)));
	//	[iOS (4, 2)]
	//	[Export ("duration")]
	//	CMTime Duration { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable dataType __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("dataType")]
	//	string DataType { get; }

	//	// @property (readonly, copy, nonatomic) id<NSObject,NSCopying> _Nullable value;
	//	[NullAllowed, Export ("value", ArgumentSemantic.Copy)]
	//	NSObject<NSObject, NSCopying> Value { get; }

	//	// @property (readonly, copy, nonatomic) NSDictionary<AVMetadataExtraAttributeKey,id> * _Nullable extraAttributes;
	//	[NullAllowed, Export ("extraAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> ExtraAttributes { get; }
	//}

	//// @interface AVMetadataItemDateRepresentation (AVMetadataItem)
	//[Category]
	//[BaseType (typeof(AVMetadataItem))]
	//interface AVMetadataItem_AVMetadataItemDateRepresentation
	//{
	//	// @property (readonly, copy, nonatomic) NSDate * _Nullable startDate __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("startDate", ArgumentSemantic.Copy)]
	//	NSDate StartDate { get; }
	//}

	//// @interface AVMetadataItemTypeCoercion (AVMetadataItem)
	//[Category]
	//[BaseType (typeof(AVMetadataItem))]
	//interface AVMetadataItem_AVMetadataItemTypeCoercion
	//{
	//	// @property (readonly, nonatomic) NSString * _Nullable stringValue;
	//	[NullAllowed, Export ("stringValue")]
	//	string StringValue { get; }

	//	// @property (readonly, nonatomic) NSNumber * _Nullable numberValue;
	//	[NullAllowed, Export ("numberValue")]
	//	NSNumber NumberValue { get; }

	//	// @property (readonly, nonatomic) NSDate * _Nullable dateValue;
	//	[NullAllowed, Export ("dateValue")]
	//	NSDate DateValue { get; }

	//	// @property (readonly, nonatomic) NSData * _Nullable dataValue;
	//	[NullAllowed, Export ("dataValue")]
	//	NSData DataValue { get; }
	//}

	//// @interface AVAsynchronousKeyValueLoading (AVMetadataItem)
	//[Category]
	//[BaseType (typeof(AVMetadataItem))]
	//interface AVMetadataItem_AVAsynchronousKeyValueLoading
	//{
	//	// -(AVKeyValueStatus)statusOfValueForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(ios, introduced=4.2)));
	//	[iOS (4,2)]
	//	[Export ("statusOfValueForKey:error:")]
	//	AVKeyValueStatus StatusOfValueForKey (string key, [NullAllowed] out NSError outError);

	//	// -(void)loadValuesAsynchronouslyForKeys:(NSArray<NSString *> * _Nonnull)keys completionHandler:(void (^ _Nullable)(void))handler __attribute__((availability(ios, introduced=4.2)));
	//	[iOS (4,2)]
	//	[Export ("loadValuesAsynchronouslyForKeys:completionHandler:")]
	//	void LoadValuesAsynchronouslyForKeys (string[] keys, [NullAllowed] Action handler);
	//}

	//// @interface AVMetadataItemArrayFiltering (AVMetadataItem)
	//[Category]
	//[BaseType (typeof(AVMetadataItem))]
	//interface AVMetadataItem_AVMetadataItemArrayFiltering
	//{
	//	// +(NSArray<AVMetadataItem *> * _Nonnull)metadataItemsFromArray:(NSArray<AVMetadataItem *> * _Nonnull)metadataItems filteredAndSortedAccordingToPreferredLanguages:(NSArray<NSString *> * _Nonnull)preferredLanguages __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("metadataItemsFromArray:filteredAndSortedAccordingToPreferredLanguages:")]
	//	AVMetadataItem[] MetadataItemsFromArray (AVMetadataItem[] metadataItems, string[] preferredLanguages);

	//	// +(NSArray<AVMetadataItem *> * _Nonnull)metadataItemsFromArray:(NSArray<AVMetadataItem *> * _Nonnull)metadataItems filteredByIdentifier:(AVMetadataIdentifier _Nonnull)identifier __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static]
	//	[Export ("metadataItemsFromArray:filteredByIdentifier:")]
	//	AVMetadataItem[] MetadataItemsFromArray (AVMetadataItem[] metadataItems, string identifier);

	//	// +(NSArray<AVMetadataItem *> * _Nonnull)metadataItemsFromArray:(NSArray<AVMetadataItem *> * _Nonnull)metadataItems filteredByMetadataItemFilter:(AVMetadataItemFilter * _Nonnull)metadataItemFilter __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("metadataItemsFromArray:filteredByMetadataItemFilter:")]
	//	AVMetadataItem[] MetadataItemsFromArray (AVMetadataItem[] metadataItems, AVMetadataItemFilter metadataItemFilter);
	//}

	//// @interface AVMetadataItemKeyAndKeyspace (AVMetadataItem)
	//[Category]
	//[BaseType (typeof(AVMetadataItem))]
	//interface AVMetadataItem_AVMetadataItemKeyAndKeyspace
	//{
	//	// +(AVMetadataIdentifier _Nullable)identifierForKey:(id _Nonnull)key keySpace:(AVMetadataKeySpace _Nonnull)keySpace __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static]
	//	[Export ("identifierForKey:keySpace:")]
	//	[return: NullAllowed]
	//	string IdentifierForKey (NSObject key, string keySpace);

	//	// +(AVMetadataKeySpace _Nullable)keySpaceForIdentifier:(AVMetadataIdentifier _Nonnull)identifier __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static]
	//	[Export ("keySpaceForIdentifier:")]
	//	[return: NullAllowed]
	//	string KeySpaceForIdentifier (string identifier);

	//	// +(id _Nullable)keyForIdentifier:(AVMetadataIdentifier _Nonnull)identifier __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static]
	//	[Export ("keyForIdentifier:")]
	//	[return: NullAllowed]
	//	NSObject KeyForIdentifier (string identifier);

	//	// @property (readonly, copy, nonatomic) id<NSObject,NSCopying> _Nullable key;
	//	[NullAllowed, Export ("key", ArgumentSemantic.Copy)]
	//	NSObject<NSObject, NSCopying> Key { get; }

	//	// @property (readonly, copy, nonatomic) AVMetadataKey _Nullable commonKey;
	//	[NullAllowed, Export ("commonKey")]
	//	string CommonKey { get; }

	//	// @property (readonly, copy, nonatomic) AVMetadataKeySpace _Nullable keySpace;
	//	[NullAllowed, Export ("keySpace")]
	//	string KeySpace { get; }
	//}

	//// @interface AVMutableMetadataItem : AVMetadataItem
	//[iOS (4,0)]
	//[BaseType (typeof(AVMetadataItem))]
	//interface AVMutableMetadataItem
	//{
	//	// @property (readwrite, copy, nonatomic) AVMetadataIdentifier _Nullable identifier __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("identifier")]
	//	string Identifier { get; set; }

	//	// @property (readwrite, copy, nonatomic) NSString * _Nullable extendedLanguageTag __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("extendedLanguageTag")]
	//	string ExtendedLanguageTag { get; set; }

	//	// @property (readwrite, copy, nonatomic) NSLocale * _Nullable locale;
	//	[NullAllowed, Export ("locale", ArgumentSemantic.Copy)]
	//	NSLocale Locale { get; set; }

	//	// @property (readwrite, nonatomic) CMTime time;
	//	[Export ("time", ArgumentSemantic.Assign)]
	//	CMTime Time { get; set; }

	//	// @property (readwrite, nonatomic) CMTime duration __attribute__((availability(ios, introduced=4.2)));
	//	[iOS (4, 2)]
	//	[Export ("duration", ArgumentSemantic.Assign)]
	//	CMTime Duration { get; set; }

	//	// @property (readwrite, copy, nonatomic) NSString * _Nullable dataType __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("dataType")]
	//	string DataType { get; set; }

	//	// @property (readwrite, copy, nonatomic) id<NSObject,NSCopying> _Nullable value;
	//	[NullAllowed, Export ("value", ArgumentSemantic.Copy)]
	//	NSObject<NSObject, NSCopying> Value { get; set; }

	//	// @property (readwrite, copy, nonatomic) NSDictionary<AVMetadataExtraAttributeKey,id> * _Nullable extraAttributes;
	//	[NullAllowed, Export ("extraAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> ExtraAttributes { get; set; }

	//	// +(AVMutableMetadataItem * _Nonnull)metadataItem;
	//	[Static]
	//	[Export ("metadataItem")]
	//	[Verify (MethodToProperty)]
	//	AVMutableMetadataItem MetadataItem { get; }
	//}

	//// @interface AVMutableMetadataItemDateRepresentation (AVMutableMetadataItem)
	//[Category]
	//[BaseType (typeof(AVMutableMetadataItem))]
	//interface AVMutableMetadataItem_AVMutableMetadataItemDateRepresentation
	//{
	//	// @property (readwrite, copy, nonatomic) NSDate * _Nullable startDate __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("startDate", ArgumentSemantic.Copy)]
	//	NSDate StartDate { get; set; }
	//}

	//// @interface AVMutableMetadataItemKeyAndKeyspace (AVMutableMetadataItem)
	//[Category]
	//[BaseType (typeof(AVMutableMetadataItem))]
	//interface AVMutableMetadataItem_AVMutableMetadataItemKeyAndKeyspace
	//{
	//	// @property (readwrite, copy, nonatomic) AVMetadataKeySpace _Nullable keySpace;
	//	[NullAllowed, Export ("keySpace")]
	//	string KeySpace { get; set; }

	//	// @property (readwrite, copy, nonatomic) id<NSObject,NSCopying> _Nullable key;
	//	[NullAllowed, Export ("key", ArgumentSemantic.Copy)]
	//	NSObject<NSObject, NSCopying> Key { get; set; }
	//}

	//// @interface AVMetadataItemLazyValueLoading (AVMetadataItem)
	//[Category]
	//[BaseType (typeof(AVMetadataItem))]
	//interface AVMetadataItem_AVMetadataItemLazyValueLoading
	//{
	//	// +(AVMetadataItem * _Nonnull)metadataItemWithPropertiesOfMetadataItem:(AVMetadataItem * _Nonnull)metadataItem valueLoadingHandler:(void (^ _Nonnull)(AVMetadataItemValueRequest * _Nonnull))handler __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("metadataItemWithPropertiesOfMetadataItem:valueLoadingHandler:")]
	//	AVMetadataItem MetadataItemWithPropertiesOfMetadataItem (AVMetadataItem metadataItem, Action<AVMetadataItemValueRequest> handler);
	//}

	//// @interface AVMetadataItemValueRequest : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVMetadataItemValueRequest
	//{
	//	// @property (readonly, weak) AVMetadataItem * _Nullable metadataItem;
	//	[NullAllowed, Export ("metadataItem", ArgumentSemantic.Weak)]
	//	AVMetadataItem MetadataItem { get; }

	//	// -(void)respondWithValue:(id<NSObject,NSCopying> _Nonnull)value;
	//	[Export ("respondWithValue:")]
	//	void RespondWithValue (NSObject<NSObject, NSCopying> value);

	//	// -(void)respondWithError:(NSError * _Nonnull)error;
	//	[Export ("respondWithError:")]
	//	void RespondWithError (NSError error);
	//}

	//// @interface AVMetadataItemFilter : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVMetadataItemFilter
	//{
	//	// +(AVMetadataItemFilter * _Nonnull)metadataItemFilterForSharing;
	//	[Static]
	//	[Export ("metadataItemFilterForSharing")]
	//	[Verify (MethodToProperty)]
	//	AVMetadataItemFilter MetadataItemFilterForSharing { get; }
	//}

	//// @interface AVMetadataItemArrayFilteringDeprecable (AVMetadataItem)
	//[Category]
	//[BaseType (typeof(AVMetadataItem))]
	//interface AVMetadataItem_AVMetadataItemArrayFilteringDeprecable
	//{
	//	// +(NSArray<AVMetadataItem *> * _Nonnull)metadataItemsFromArray:(NSArray<AVMetadataItem *> * _Nonnull)metadataItems withLocale:(NSLocale * _Nonnull)locale;
	//	[Static]
	//	[Export ("metadataItemsFromArray:withLocale:")]
	//	AVMetadataItem[] MetadataItemsFromArray (AVMetadataItem[] metadataItems, NSLocale locale);

	//	// +(NSArray<AVMetadataItem *> * _Nonnull)metadataItemsFromArray:(NSArray<AVMetadataItem *> * _Nonnull)metadataItems withKey:(id _Nullable)key keySpace:(AVMetadataKeySpace _Nullable)keySpace;
	//	[Static]
	//	[Export ("metadataItemsFromArray:withKey:keySpace:")]
	//	AVMetadataItem[] MetadataItemsFromArray (AVMetadataItem[] metadataItems, [NullAllowed] NSObject key, [NullAllowed] string keySpace);
	//}

	//// @interface AVOutputSettingsAssistant : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVOutputSettingsAssistant
	//{
	//	// +(NSArray<AVOutputSettingsPreset> * _Nonnull)availableOutputSettingsPresets __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Static]
	//	[Export ("availableOutputSettingsPresets")]
	//	[Verify (MethodToProperty)]
	//	string[] AvailableOutputSettingsPresets { get; }

	//	// +(instancetype _Nullable)outputSettingsAssistantWithPreset:(AVOutputSettingsPreset _Nonnull)presetIdentifier;
	//	[Static]
	//	[Export ("outputSettingsAssistantWithPreset:")]
	//	[return: NullAllowed]
	//	AVOutputSettingsAssistant OutputSettingsAssistantWithPreset (string presetIdentifier);

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nullable audioSettings;
	//	[NullAllowed, Export ("audioSettings")]
	//	NSDictionary<NSString, NSObject> AudioSettings { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nullable videoSettings;
	//	[NullAllowed, Export ("videoSettings")]
	//	NSDictionary<NSString, NSObject> VideoSettings { get; }

	//	// @property (readonly, nonatomic) AVFileType _Nonnull outputFileType;
	//	[Export ("outputFileType")]
	//	string OutputFileType { get; }
	//}

	//// @interface AVOutputSettingsAssistant_SourceInformation (AVOutputSettingsAssistant)
	//[Category]
	//[BaseType (typeof(AVOutputSettingsAssistant))]
	//interface AVOutputSettingsAssistant_AVOutputSettingsAssistant_SourceInformation
	//{
	//	// @property (retain, nonatomic) CMAudioFormatDescriptionRef _Nullable sourceAudioFormat __attribute__((NSObject));
	//	[NullAllowed, Export ("sourceAudioFormat", ArgumentSemantic.Retain)]
	//	unsafe CMAudioFormatDescriptionRef* SourceAudioFormat { get; set; }

	//	// @property (retain, nonatomic) CMVideoFormatDescriptionRef _Nullable sourceVideoFormat __attribute__((NSObject));
	//	[NullAllowed, Export ("sourceVideoFormat", ArgumentSemantic.Retain)]
	//	unsafe CMVideoFormatDescriptionRef* SourceVideoFormat { get; set; }

	//	// @property (nonatomic) CMTime sourceVideoAverageFrameDuration;
	//	[Export ("sourceVideoAverageFrameDuration", ArgumentSemantic.Assign)]
	//	CMTime SourceVideoAverageFrameDuration { get; set; }

	//	// @property (nonatomic) CMTime sourceVideoMinFrameDuration __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("sourceVideoMinFrameDuration", ArgumentSemantic.Assign)]
	//	CMTime SourceVideoMinFrameDuration { get; set; }
	//}

	//// @interface AVPlayer : NSObject
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVPlayer
	//{
	//	// +(instancetype _Nonnull)playerWithURL:(NSURL * _Nonnull)URL;
	//	[Static]
	//	[Export ("playerWithURL:")]
	//	AVPlayer PlayerWithURL (NSUrl URL);

	//	// +(instancetype _Nonnull)playerWithPlayerItem:(AVPlayerItem * _Nullable)item;
	//	[Static]
	//	[Export ("playerWithPlayerItem:")]
	//	AVPlayer PlayerWithPlayerItem ([NullAllowed] AVPlayerItem item);

	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL;
	//	[Export ("initWithURL:")]
	//	IntPtr Constructor (NSUrl URL);

	//	// -(instancetype _Nonnull)initWithPlayerItem:(AVPlayerItem * _Nullable)item;
	//	[Export ("initWithPlayerItem:")]
	//	IntPtr Constructor ([NullAllowed] AVPlayerItem item);

	//	// @property (readonly, nonatomic) AVPlayerStatus status;
	//	[Export ("status")]
	//	AVPlayerStatus Status { get; }

	//	// @property (readonly, nonatomic) NSError * _Nullable error;
	//	[NullAllowed, Export ("error")]
	//	NSError Error { get; }
	//}

	//// @interface AVPlayerPlaybackControl (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerPlaybackControl
	//{
	//	// @property (nonatomic) float rate;
	//	[Export ("rate")]
	//	float Rate { get; set; }

	//	// -(void)play;
	//	[Export ("play")]
	//	void Play ();

	//	// -(void)pause;
	//	[Export ("pause")]
	//	void Pause ();

	//	// @property (readonly, nonatomic) AVPlayerTimeControlStatus timeControlStatus __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("timeControlStatus")]
	//	AVPlayerTimeControlStatus TimeControlStatus { get; }

	//	// @property (readonly, nonatomic) AVPlayerWaitingReason _Nullable reasonForWaitingToPlay __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("reasonForWaitingToPlay")]
	//	string ReasonForWaitingToPlay { get; }

	//	// -(void)playImmediatelyAtRate:(float)rate __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("playImmediatelyAtRate:")]
	//	void PlayImmediatelyAtRate (float rate);
	//}

	//// @interface AVPlayerItemControl (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerItemControl
	//{
	//	// @property (readonly, nonatomic) AVPlayerItem * _Nullable currentItem;
	//	[NullAllowed, Export ("currentItem")]
	//	AVPlayerItem CurrentItem { get; }

	//	// -(void)replaceCurrentItemWithPlayerItem:(AVPlayerItem * _Nullable)item;
	//	[Export ("replaceCurrentItemWithPlayerItem:")]
	//	void ReplaceCurrentItemWithPlayerItem ([NullAllowed] AVPlayerItem item);

	//	// @property (nonatomic) AVPlayerActionAtItemEnd actionAtItemEnd;
	//	[Export ("actionAtItemEnd", ArgumentSemantic.Assign)]
	//	AVPlayerActionAtItemEnd ActionAtItemEnd { get; set; }
	//}

	//// @interface AVPlayerTimeControl (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerTimeControl
	//{
	//	// -(CMTime)currentTime;
	//	[Export ("currentTime")]
	//	[Verify (MethodToProperty)]
	//	CMTime CurrentTime { get; }

	//	// -(void)seekToDate:(NSDate * _Nonnull)date;
	//	[Export ("seekToDate:")]
	//	void SeekToDate (NSDate date);

	//	// -(void)seekToDate:(NSDate * _Nonnull)date completionHandler:(void (^ _Nonnull)(BOOL))completionHandler __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("seekToDate:completionHandler:")]
	//	void SeekToDate (NSDate date, Action<bool> completionHandler);

	//	// -(void)seekToTime:(CMTime)time;
	//	[Export ("seekToTime:")]
	//	void SeekToTime (CMTime time);

	//	// -(void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter;
	//	[Export ("seekToTime:toleranceBefore:toleranceAfter:")]
	//	void SeekToTime (CMTime time, CMTime toleranceBefore, CMTime toleranceAfter);

	//	// -(void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("seekToTime:completionHandler:")]
	//	void SeekToTime (CMTime time, Action<bool> completionHandler);

	//	// -(void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("seekToTime:toleranceBefore:toleranceAfter:completionHandler:")]
	//	void SeekToTime (CMTime time, CMTime toleranceBefore, CMTime toleranceAfter, Action<bool> completionHandler);
	//}

	//// @interface AVPlayerAdvancedRateControl (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerAdvancedRateControl
	//{
	//	// @property (nonatomic) BOOL automaticallyWaitsToMinimizeStalling __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("automaticallyWaitsToMinimizeStalling")]
	//	bool AutomaticallyWaitsToMinimizeStalling { get; set; }

	//	// -(void)setRate:(float)rate time:(CMTime)itemTime atHostTime:(CMTime)hostClockTime __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("setRate:time:atHostTime:")]
	//	void SetRate (float rate, CMTime itemTime, CMTime hostClockTime);

	//	// -(void)prerollAtRate:(float)rate completionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("prerollAtRate:completionHandler:")]
	//	void PrerollAtRate (float rate, [NullAllowed] Action<bool> completionHandler);

	//	// -(void)cancelPendingPrerolls __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("cancelPendingPrerolls")]
	//	void CancelPendingPrerolls ();

	//	// @property (retain, nonatomic) CMClockRef _Nullable masterClock __attribute__((NSObject)) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("masterClock", ArgumentSemantic.Retain)]
	//	unsafe CMClockRef* MasterClock { get; set; }
	//}

	//// @interface AVPlayerTimeObservation (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerTimeObservation
	//{
	//	// -(id _Nonnull)addPeriodicTimeObserverForInterval:(CMTime)interval queue:(dispatch_queue_t _Nullable)queue usingBlock:(void (^ _Nonnull)(CMTime))block;
	//	[Export ("addPeriodicTimeObserverForInterval:queue:usingBlock:")]
	//	NSObject AddPeriodicTimeObserverForInterval (CMTime interval, [NullAllowed] DispatchQueue queue, Action<CMTime> block);

	//	// -(id _Nonnull)addBoundaryTimeObserverForTimes:(NSArray<NSValue *> * _Nonnull)times queue:(dispatch_queue_t _Nullable)queue usingBlock:(void (^ _Nonnull)(void))block;
	//	[Export ("addBoundaryTimeObserverForTimes:queue:usingBlock:")]
	//	NSObject AddBoundaryTimeObserverForTimes (NSValue[] times, [NullAllowed] DispatchQueue queue, Action block);

	//	// -(void)removeTimeObserver:(id _Nonnull)observer;
	//	[Export ("removeTimeObserver:")]
	//	void RemoveTimeObserver (NSObject observer);
	//}

	//// @interface AVPlayerMediaControl (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerMediaControl
	//{
	//	// @property (nonatomic) float volume __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("volume")]
	//	float Volume { get; set; }

	//	// @property (getter = isMuted, nonatomic) BOOL muted __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("muted")]
	//	bool Muted { [Bind ("isMuted")] get; set; }
	//}

	//// @interface AVPlayerAutomaticMediaSelection (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerAutomaticMediaSelection
	//{
	//	// @property (nonatomic) BOOL appliesMediaSelectionCriteriaAutomatically __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("appliesMediaSelectionCriteriaAutomatically")]
	//	bool AppliesMediaSelectionCriteriaAutomatically { get; set; }

	//	// -(void)setMediaSelectionCriteria:(AVPlayerMediaSelectionCriteria * _Nullable)criteria forMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("setMediaSelectionCriteria:forMediaCharacteristic:")]
	//	void SetMediaSelectionCriteria ([NullAllowed] AVPlayerMediaSelectionCriteria criteria, string mediaCharacteristic);

	//	// -(AVPlayerMediaSelectionCriteria * _Nullable)mediaSelectionCriteriaForMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("mediaSelectionCriteriaForMediaCharacteristic:")]
	//	[return: NullAllowed]
	//	AVPlayerMediaSelectionCriteria MediaSelectionCriteriaForMediaCharacteristic (string mediaCharacteristic);
	//}

	//// @interface AVPlayerAudioDeviceSupport (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerAudioDeviceSupport
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable audioOutputDeviceUniqueID __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[NullAllowed, Export ("audioOutputDeviceUniqueID")]
	//	string AudioOutputDeviceUniqueID { get; set; }
	//}

	//// @interface AVPlayerExternalPlaybackSupport (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerExternalPlaybackSupport
	//{
	//	// @property (nonatomic) BOOL allowsExternalPlayback __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("allowsExternalPlayback")]
	//	bool AllowsExternalPlayback { get; set; }

	//	// @property (readonly, getter = isExternalPlaybackActive, nonatomic) BOOL externalPlaybackActive __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("externalPlaybackActive")]
	//	bool ExternalPlaybackActive { [Bind ("isExternalPlaybackActive")] get; }

	//	// @property (nonatomic) BOOL usesExternalPlaybackWhileExternalScreenIsActive __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("usesExternalPlaybackWhileExternalScreenIsActive")]
	//	bool UsesExternalPlaybackWhileExternalScreenIsActive { get; set; }

	//	// @property (copy, nonatomic) AVLayerVideoGravity _Nonnull externalPlaybackVideoGravity __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("externalPlaybackVideoGravity")]
	//	string ExternalPlaybackVideoGravity { get; set; }
	//}

	//// @interface AVPlayerAirPlaySupport (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerAirPlaySupport
	//{
	//	// @property (nonatomic) BOOL allowsAirPlayVideo __attribute__((availability(ios, introduced=5.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 5, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[Export ("allowsAirPlayVideo")]
	//	bool AllowsAirPlayVideo { get; set; }

	//	// @property (readonly, getter = isAirPlayVideoActive, nonatomic) BOOL airPlayVideoActive __attribute__((availability(ios, introduced=5.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 5, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[Export ("airPlayVideoActive")]
	//	bool AirPlayVideoActive { [Bind ("isAirPlayVideoActive")] get; }

	//	// @property (nonatomic) BOOL usesAirPlayVideoWhileAirPlayScreenIsActive __attribute__((availability(ios, introduced=5.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 5, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[Export ("usesAirPlayVideoWhileAirPlayScreenIsActive")]
	//	bool UsesAirPlayVideoWhileAirPlayScreenIsActive { get; set; }
	//}

	//// @interface AVPlayerProtectedContent (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerProtectedContent
	//{
	//	// @property (readonly, nonatomic) BOOL outputObscuredDueToInsufficientExternalProtection __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("outputObscuredDueToInsufficientExternalProtection")]
	//	bool OutputObscuredDueToInsufficientExternalProtection { get; }
	//}

	//// @interface AVPlayerPlaybackCapabilities (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerPlaybackCapabilities
	//{
	//	// @property (readonly, nonatomic, class) AVPlayerHDRMode availableHDRModes __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=11.2))) __attribute__((availability(ios, introduced=11.2)));
	//	[TV (11, 2), NoWatch, NoMac, iOS (11, 2)]
	//	[Static]
	//	[Export ("availableHDRModes")]
	//	AVPlayerHDRMode AvailableHDRModes { get; }
	//}

	//// @interface AVPlayerVideoDecoderGPUSupport (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerVideoDecoderGPUSupport
	//{
	//	// @property (nonatomic) uint64_t preferredVideoDecoderGPURegistryID __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.13)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 13)]
	//	[Export ("preferredVideoDecoderGPURegistryID")]
	//	ulong PreferredVideoDecoderGPURegistryID { get; set; }
	//}

	//// @interface AVPlayerVideoDisplaySleepPrevention (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerVideoDisplaySleepPrevention
	//{
	//	// @property (nonatomic) BOOL preventsDisplaySleepDuringVideoPlayback __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(ios, introduced=12.0)));
	//	[TV (12, 0), NoWatch, Mac (10, 14), iOS (12, 0)]
	//	[Export ("preventsDisplaySleepDuringVideoPlayback")]
	//	bool PreventsDisplaySleepDuringVideoPlayback { get; set; }
	//}

	//// @interface AVPlayerDeprecated (AVPlayer)
	//[Category]
	//[BaseType (typeof(AVPlayer))]
	//interface AVPlayer_AVPlayerDeprecated
	//{
	//	// @property (getter = isClosedCaptionDisplayEnabled, nonatomic) BOOL closedCaptionDisplayEnabled __attribute__((availability(ios, introduced=4.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Allow AVPlayer to enable closed captions automatically according to user preferences by ensuring that the value of appliesMediaSelectionCriteriaAutomatically is YES.")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Allow AVPlayer to enable closed captions automatically according to user preferences by ensuring that the value of appliesMediaSelectionCriteriaAutomatically is YES.")]
	//	[Export ("closedCaptionDisplayEnabled")]
	//	bool ClosedCaptionDisplayEnabled { [Bind ("isClosedCaptionDisplayEnabled")] get; set; }
	//}

	//// @interface AVQueuePlayer : AVPlayer
	//[iOS (4,1)]
	//[BaseType (typeof(AVPlayer))]
	//interface AVQueuePlayer
	//{
	//	// +(instancetype _Nonnull)queuePlayerWithItems:(NSArray<AVPlayerItem *> * _Nonnull)items;
	//	[Static]
	//	[Export ("queuePlayerWithItems:")]
	//	AVQueuePlayer QueuePlayerWithItems (AVPlayerItem[] items);

	//	// -(AVQueuePlayer * _Nonnull)initWithItems:(NSArray<AVPlayerItem *> * _Nonnull)items;
	//	[Export ("initWithItems:")]
	//	IntPtr Constructor (AVPlayerItem[] items);

	//	// -(NSArray<AVPlayerItem *> * _Nonnull)items;
	//	[Export ("items")]
	//	[Verify (MethodToProperty)]
	//	AVPlayerItem[] Items { get; }

	//	// -(void)advanceToNextItem;
	//	[Export ("advanceToNextItem")]
	//	void AdvanceToNextItem ();

	//	// -(BOOL)canInsertItem:(AVPlayerItem * _Nonnull)item afterItem:(AVPlayerItem * _Nullable)afterItem;
	//	[Export ("canInsertItem:afterItem:")]
	//	bool CanInsertItem (AVPlayerItem item, [NullAllowed] AVPlayerItem afterItem);

	//	// -(void)insertItem:(AVPlayerItem * _Nonnull)item afterItem:(AVPlayerItem * _Nullable)afterItem;
	//	[Export ("insertItem:afterItem:")]
	//	void InsertItem (AVPlayerItem item, [NullAllowed] AVPlayerItem afterItem);

	//	// -(void)removeItem:(AVPlayerItem * _Nonnull)item;
	//	[Export ("removeItem:")]
	//	void RemoveItem (AVPlayerItem item);

	//	// -(void)removeAllItems;
	//	[Export ("removeAllItems")]
	//	void RemoveAllItems ();
	//}

	//// @interface AVPlayerItem : NSObject <NSCopying>
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVPlayerItem : INSCopying
	//{
	//	// +(instancetype _Nonnull)playerItemWithURL:(NSURL * _Nonnull)URL;
	//	[Static]
	//	[Export ("playerItemWithURL:")]
	//	AVPlayerItem PlayerItemWithURL (NSUrl URL);

	//	// +(instancetype _Nonnull)playerItemWithAsset:(AVAsset * _Nonnull)asset;
	//	[Static]
	//	[Export ("playerItemWithAsset:")]
	//	AVPlayerItem PlayerItemWithAsset (AVAsset asset);

	//	// +(instancetype _Nonnull)playerItemWithAsset:(AVAsset * _Nonnull)asset automaticallyLoadedAssetKeys:(NSArray<NSString *> * _Nullable)automaticallyLoadedAssetKeys __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("playerItemWithAsset:automaticallyLoadedAssetKeys:")]
	//	AVPlayerItem PlayerItemWithAsset (AVAsset asset, [NullAllowed] string[] automaticallyLoadedAssetKeys);

	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL;
	//	[Export ("initWithURL:")]
	//	IntPtr Constructor (NSUrl URL);

	//	// -(instancetype _Nonnull)initWithAsset:(AVAsset * _Nonnull)asset;
	//	[Export ("initWithAsset:")]
	//	IntPtr Constructor (AVAsset asset);

	//	// -(instancetype _Nonnull)initWithAsset:(AVAsset * _Nonnull)asset automaticallyLoadedAssetKeys:(NSArray<NSString *> * _Nullable)automaticallyLoadedAssetKeys __attribute__((availability(ios, introduced=7.0))) __attribute__((objc_designated_initializer));
	//	[iOS (7,0)]
	//	[Export ("initWithAsset:automaticallyLoadedAssetKeys:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVAsset asset, [NullAllowed] string[] automaticallyLoadedAssetKeys);

	//	// @property (readonly, nonatomic) AVPlayerItemStatus status;
	//	[Export ("status")]
	//	AVPlayerItemStatus Status { get; }

	//	// @property (readonly, nonatomic) NSError * _Nullable error;
	//	[NullAllowed, Export ("error")]
	//	NSError Error { get; }
	//}

	//// @interface AVPlayerItemInspection (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemInspection
	//{
	//	// @property (readonly, nonatomic) AVAsset * _Nonnull asset;
	//	[Export ("asset")]
	//	AVAsset Asset { get; }

	//	// @property (readonly, nonatomic) NSArray<AVPlayerItemTrack *> * _Nonnull tracks;
	//	[Export ("tracks")]
	//	AVPlayerItemTrack[] Tracks { get; }

	//	// @property (readonly, nonatomic) CMTime duration __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[Export ("duration")]
	//	CMTime Duration { get; }

	//	// @property (readonly, nonatomic) CGSize presentationSize;
	//	[Export ("presentationSize")]
	//	CGSize PresentationSize { get; }

	//	// @property (readonly, nonatomic) NSArray<AVMetadataItem *> * _Nullable timedMetadata;
	//	[NullAllowed, Export ("timedMetadata")]
	//	AVMetadataItem[] TimedMetadata { get; }

	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull automaticallyLoadedAssetKeys __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("automaticallyLoadedAssetKeys")]
	//	string[] AutomaticallyLoadedAssetKeys { get; }
	//}

	//// @interface AVPlayerItemRateAndSteppingSupport (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemRateAndSteppingSupport
	//{
	//	// @property (readonly, nonatomic) BOOL canPlayFastForward __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("canPlayFastForward")]
	//	bool CanPlayFastForward { get; }

	//	// @property (readonly, nonatomic) BOOL canPlaySlowForward __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("canPlaySlowForward")]
	//	bool CanPlaySlowForward { get; }

	//	// @property (readonly, nonatomic) BOOL canPlayReverse __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("canPlayReverse")]
	//	bool CanPlayReverse { get; }

	//	// @property (readonly, nonatomic) BOOL canPlaySlowReverse __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("canPlaySlowReverse")]
	//	bool CanPlaySlowReverse { get; }

	//	// @property (readonly, nonatomic) BOOL canPlayFastReverse __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("canPlayFastReverse")]
	//	bool CanPlayFastReverse { get; }

	//	// @property (readonly, nonatomic) BOOL canStepForward __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("canStepForward")]
	//	bool CanStepForward { get; }

	//	// @property (readonly, nonatomic) BOOL canStepBackward __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("canStepBackward")]
	//	bool CanStepBackward { get; }
	//}

	//// @interface AVPlayerItemTimeControl (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemTimeControl
	//{
	//	// -(CMTime)currentTime;
	//	[Export ("currentTime")]
	//	[Verify (MethodToProperty)]
	//	CMTime CurrentTime { get; }

	//	// @property (nonatomic) CMTime forwardPlaybackEndTime;
	//	[Export ("forwardPlaybackEndTime", ArgumentSemantic.Assign)]
	//	CMTime ForwardPlaybackEndTime { get; set; }

	//	// @property (nonatomic) CMTime reversePlaybackEndTime;
	//	[Export ("reversePlaybackEndTime", ArgumentSemantic.Assign)]
	//	CMTime ReversePlaybackEndTime { get; set; }

	//	// @property (readonly, nonatomic) NSArray<NSValue *> * _Nonnull seekableTimeRanges;
	//	[Export ("seekableTimeRanges")]
	//	NSValue[] SeekableTimeRanges { get; }

	//	// -(void)seekToTime:(CMTime)time completionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("seekToTime:completionHandler:")]
	//	void SeekToTime (CMTime time, [NullAllowed] Action<bool> completionHandler);

	//	// -(void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("seekToTime:toleranceBefore:toleranceAfter:completionHandler:")]
	//	void SeekToTime (CMTime time, CMTime toleranceBefore, CMTime toleranceAfter, [NullAllowed] Action<bool> completionHandler);

	//	// -(void)cancelPendingSeeks __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("cancelPendingSeeks")]
	//	void CancelPendingSeeks ();

	//	// -(NSDate * _Nullable)currentDate;
	//	[NullAllowed, Export ("currentDate")]
	//	[Verify (MethodToProperty)]
	//	NSDate CurrentDate { get; }

	//	// -(BOOL)seekToDate:(NSDate * _Nonnull)date completionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("seekToDate:completionHandler:")]
	//	bool SeekToDate (NSDate date, [NullAllowed] Action<bool> completionHandler);

	//	// -(void)stepByCount:(NSInteger)stepCount;
	//	[Export ("stepByCount:")]
	//	void StepByCount (nint stepCount);

	//	// @property (readonly, nonatomic) CMTimebaseRef _Nullable timebase __attribute__((NSObject)) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("timebase")]
	//	unsafe CMTimebaseRef* Timebase { get; }
	//}

	//// @interface AVPlayerItemVisualPresentation (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemVisualPresentation
	//{
	//	// @property (copy, nonatomic) AVVideoComposition * _Nullable videoComposition;
	//	[NullAllowed, Export ("videoComposition", ArgumentSemantic.Copy)]
	//	AVVideoComposition VideoComposition { get; set; }

	//	// @property (readonly, nonatomic) id<AVVideoCompositing> _Nullable customVideoCompositor __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("customVideoCompositor")]
	//	AVVideoCompositing CustomVideoCompositor { get; }

	//	// @property (nonatomic) BOOL seekingWaitsForVideoCompositionRendering __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("seekingWaitsForVideoCompositionRendering")]
	//	bool SeekingWaitsForVideoCompositionRendering { get; set; }

	//	// @property (copy, nonatomic) NSArray<AVTextStyleRule *> * _Nullable textStyleRules __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("textStyleRules", ArgumentSemantic.Copy)]
	//	AVTextStyleRule[] TextStyleRules { get; set; }

	//	// @property (copy, nonatomic) AVVideoApertureMode _Nonnull videoApertureMode __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11, 0), NoWatch, Mac (10, 13), iOS (11, 0)]
	//	[Export ("videoApertureMode")]
	//	string VideoApertureMode { get; set; }
	//}

	//// @interface AVPlayerItemAudioProcessing (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemAudioProcessing
	//{
	//	// @property (copy, nonatomic) AVAudioTimePitchAlgorithm _Nonnull audioTimePitchAlgorithm __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("audioTimePitchAlgorithm")]
	//	string AudioTimePitchAlgorithm { get; set; }

	//	// @property (copy, nonatomic) AVAudioMix * _Nullable audioMix;
	//	[NullAllowed, Export ("audioMix", ArgumentSemantic.Copy)]
	//	AVAudioMix AudioMix { get; set; }
	//}

	//// @interface AVPlayerItemPlayability (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemPlayability
	//{
	//	// @property (readonly, nonatomic) NSArray<NSValue *> * _Nonnull loadedTimeRanges;
	//	[Export ("loadedTimeRanges")]
	//	NSValue[] LoadedTimeRanges { get; }

	//	// @property (readonly, getter = isPlaybackLikelyToKeepUp, nonatomic) BOOL playbackLikelyToKeepUp;
	//	[Export ("playbackLikelyToKeepUp")]
	//	bool PlaybackLikelyToKeepUp { [Bind ("isPlaybackLikelyToKeepUp")] get; }

	//	// @property (readonly, getter = isPlaybackBufferFull, nonatomic) BOOL playbackBufferFull;
	//	[Export ("playbackBufferFull")]
	//	bool PlaybackBufferFull { [Bind ("isPlaybackBufferFull")] get; }

	//	// @property (readonly, getter = isPlaybackBufferEmpty, nonatomic) BOOL playbackBufferEmpty;
	//	[Export ("playbackBufferEmpty")]
	//	bool PlaybackBufferEmpty { [Bind ("isPlaybackBufferEmpty")] get; }

	//	// @property (assign, nonatomic) BOOL canUseNetworkResourcesForLiveStreamingWhilePaused __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("canUseNetworkResourcesForLiveStreamingWhilePaused")]
	//	bool CanUseNetworkResourcesForLiveStreamingWhilePaused { get; set; }

	//	// @property (nonatomic) NSTimeInterval preferredForwardBufferDuration __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("preferredForwardBufferDuration")]
	//	double PreferredForwardBufferDuration { get; set; }
	//}

	//// @interface AVPlayerItemVariantControl (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemVariantControl
	//{
	//	// @property (nonatomic) double preferredPeakBitRate __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("preferredPeakBitRate")]
	//	double PreferredPeakBitRate { get; set; }

	//	// @property (nonatomic) CGSize preferredMaximumResolution __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("preferredMaximumResolution", ArgumentSemantic.Assign)]
	//	CGSize PreferredMaximumResolution { get; set; }
	//}

	//// @interface AVPlayerItemMediaSelection (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemMediaSelection
	//{
	//	// -(void)selectMediaOption:(AVMediaSelectionOption * _Nullable)mediaSelectionOption inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("selectMediaOption:inMediaSelectionGroup:")]
	//	void SelectMediaOption ([NullAllowed] AVMediaSelectionOption mediaSelectionOption, AVMediaSelectionGroup mediaSelectionGroup);

	//	// -(void)selectMediaOptionAutomaticallyInMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("selectMediaOptionAutomaticallyInMediaSelectionGroup:")]
	//	void SelectMediaOptionAutomaticallyInMediaSelectionGroup (AVMediaSelectionGroup mediaSelectionGroup);

	//	// @property (readonly, nonatomic) AVMediaSelection * _Nonnull currentMediaSelection __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("currentMediaSelection")]
	//	AVMediaSelection CurrentMediaSelection { get; }
	//}

	//// @interface AVPlayerItemLogging (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemLogging
	//{
	//	// -(AVPlayerItemAccessLog * _Nullable)accessLog __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[NullAllowed, Export ("accessLog")]
	//	[Verify (MethodToProperty)]
	//	AVPlayerItemAccessLog AccessLog { get; }

	//	// -(AVPlayerItemErrorLog * _Nullable)errorLog __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[NullAllowed, Export ("errorLog")]
	//	[Verify (MethodToProperty)]
	//	AVPlayerItemErrorLog ErrorLog { get; }
	//}

	//// @interface AVPlayerItemOutputs (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemOutputs
	//{
	//	// -(void)addOutput:(AVPlayerItemOutput * _Nonnull)output __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("addOutput:")]
	//	void AddOutput (AVPlayerItemOutput output);

	//	// -(void)removeOutput:(AVPlayerItemOutput * _Nonnull)output __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("removeOutput:")]
	//	void RemoveOutput (AVPlayerItemOutput output);

	//	// @property (readonly, nonatomic) NSArray<AVPlayerItemOutput *> * _Nonnull outputs __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("outputs")]
	//	AVPlayerItemOutput[] Outputs { get; }
	//}

	//// @interface AVPlayerItemMediaDataCollectors (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemMediaDataCollectors
	//{
	//	// -(void)addMediaDataCollector:(AVPlayerItemMediaDataCollector * _Nonnull)collector __attribute__((availability(ios, introduced=9.3)));
	//	[iOS (9,3)]
	//	[Export ("addMediaDataCollector:")]
	//	void AddMediaDataCollector (AVPlayerItemMediaDataCollector collector);

	//	// -(void)removeMediaDataCollector:(AVPlayerItemMediaDataCollector * _Nonnull)collector __attribute__((availability(ios, introduced=9.3)));
	//	[iOS (9,3)]
	//	[Export ("removeMediaDataCollector:")]
	//	void RemoveMediaDataCollector (AVPlayerItemMediaDataCollector collector);

	//	// @property (readonly, nonatomic) NSArray<AVPlayerItemMediaDataCollector *> * _Nonnull mediaDataCollectors __attribute__((availability(ios, introduced=9.3)));
	//	[iOS (9, 3)]
	//	[Export ("mediaDataCollectors")]
	//	AVPlayerItemMediaDataCollector[] MediaDataCollectors { get; }
	//}

	//// @interface AVPlayerItemDeprecated (AVPlayerItem)
	//[Category]
	//[BaseType (typeof(AVPlayerItem))]
	//interface AVPlayerItem_AVPlayerItemDeprecated
	//{
	//	// -(void)seekToTime:(CMTime)time __attribute__((availability(ios, introduced=4.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use -seekToTime:completionHandler:, passing nil for the completionHandler if you don't require notification of completion")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use -seekToTime:completionHandler:, passing nil for the completionHandler if you don't require notification of completion")]
	//	[Export ("seekToTime:")]
	//	void SeekToTime (CMTime time);

	//	// -(void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter __attribute__((availability(ios, introduced=4.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use -seekToTime:toleranceBefore:toleranceAfter:completionHandler:, passing nil for the completionHandler if you don't require notification of completion")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use -seekToTime:toleranceBefore:toleranceAfter:completionHandler:, passing nil for the completionHandler if you don't require notification of completion")]
	//	[Export ("seekToTime:toleranceBefore:toleranceAfter:")]
	//	void SeekToTime (CMTime time, CMTime toleranceBefore, CMTime toleranceAfter);

	//	// -(BOOL)seekToDate:(NSDate * _Nonnull)date __attribute__((availability(ios, introduced=4.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use -seekToDate:completionHandler:, passing nil for the completionHandler if you don't require notification of completion")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use -seekToDate:completionHandler:, passing nil for the completionHandler if you don't require notification of completion")]
	//	[Export ("seekToDate:")]
	//	bool SeekToDate (NSDate date);

	//	// -(AVMediaSelectionOption * _Nullable)selectedMediaOptionInMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup __attribute__((availability(ios, introduced=5.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use currentMediaSelection to obtain an instance of AVMediaSelection, which encompasses the currently selected AVMediaSelectionOption in each of the available AVMediaSelectionGroups")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use currentMediaSelection to obtain an instance of AVMediaSelection, which encompasses the currently selected AVMediaSelectionOption in each of the available AVMediaSelectionGroups")]
	//	[Export ("selectedMediaOptionInMediaSelectionGroup:")]
	//	[return: NullAllowed]
	//	AVMediaSelectionOption SelectedMediaOptionInMediaSelectionGroup (AVMediaSelectionGroup mediaSelectionGroup);
	//}

	//// @interface AVPlayerItemAccessLog : NSObject <NSCopying>
	//[iOS (4,3)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVPlayerItemAccessLog : INSCopying
	//{
	//	// -(NSData * _Nullable)extendedLogData;
	//	[NullAllowed, Export ("extendedLogData")]
	//	[Verify (MethodToProperty)]
	//	NSData ExtendedLogData { get; }

	//	// @property (readonly, nonatomic) NSStringEncoding extendedLogDataStringEncoding;
	//	[Export ("extendedLogDataStringEncoding")]
	//	nuint ExtendedLogDataStringEncoding { get; }

	//	// @property (readonly, nonatomic) NSArray<AVPlayerItemAccessLogEvent *> * _Nonnull events;
	//	[Export ("events")]
	//	AVPlayerItemAccessLogEvent[] Events { get; }
	//}

	//// @interface AVPlayerItemErrorLog : NSObject <NSCopying>
	//[iOS (4,3)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVPlayerItemErrorLog : INSCopying
	//{
	//	// -(NSData * _Nullable)extendedLogData;
	//	[NullAllowed, Export ("extendedLogData")]
	//	[Verify (MethodToProperty)]
	//	NSData ExtendedLogData { get; }

	//	// @property (readonly, nonatomic) NSStringEncoding extendedLogDataStringEncoding;
	//	[Export ("extendedLogDataStringEncoding")]
	//	nuint ExtendedLogDataStringEncoding { get; }

	//	// @property (readonly, nonatomic) NSArray<AVPlayerItemErrorLogEvent *> * _Nonnull events;
	//	[Export ("events")]
	//	AVPlayerItemErrorLogEvent[] Events { get; }
	//}

	//// @interface AVPlayerItemAccessLogEvent : NSObject <NSCopying>
	//[iOS (4,3)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVPlayerItemAccessLogEvent : INSCopying
	//{
	//	// @property (readonly, nonatomic) NSInteger numberOfSegmentsDownloaded __attribute__((availability(ios, introduced=4.3, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 4, 3)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[Export ("numberOfSegmentsDownloaded")]
	//	nint NumberOfSegmentsDownloaded { get; }

	//	// @property (readonly, nonatomic) NSInteger numberOfMediaRequests __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("numberOfMediaRequests")]
	//	nint NumberOfMediaRequests { get; }

	//	// @property (readonly, nonatomic) NSDate * _Nullable playbackStartDate;
	//	[NullAllowed, Export ("playbackStartDate")]
	//	NSDate PlaybackStartDate { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable URI;
	//	[NullAllowed, Export ("URI")]
	//	string URI { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable serverAddress;
	//	[NullAllowed, Export ("serverAddress")]
	//	string ServerAddress { get; }

	//	// @property (readonly, nonatomic) NSInteger numberOfServerAddressChanges;
	//	[Export ("numberOfServerAddressChanges")]
	//	nint NumberOfServerAddressChanges { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable playbackSessionID;
	//	[NullAllowed, Export ("playbackSessionID")]
	//	string PlaybackSessionID { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval playbackStartOffset;
	//	[Export ("playbackStartOffset")]
	//	double PlaybackStartOffset { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval segmentsDownloadedDuration;
	//	[Export ("segmentsDownloadedDuration")]
	//	double SegmentsDownloadedDuration { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval durationWatched;
	//	[Export ("durationWatched")]
	//	double DurationWatched { get; }

	//	// @property (readonly, nonatomic) NSInteger numberOfStalls;
	//	[Export ("numberOfStalls")]
	//	nint NumberOfStalls { get; }

	//	// @property (readonly, nonatomic) long long numberOfBytesTransferred;
	//	[Export ("numberOfBytesTransferred")]
	//	long NumberOfBytesTransferred { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval transferDuration __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("transferDuration")]
	//	double TransferDuration { get; }

	//	// @property (readonly, nonatomic) double observedBitrate;
	//	[Export ("observedBitrate")]
	//	double ObservedBitrate { get; }

	//	// @property (readonly, nonatomic) double indicatedBitrate;
	//	[Export ("indicatedBitrate")]
	//	double IndicatedBitrate { get; }

	//	// @property (readonly, nonatomic) double indicatedAverageBitrate __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("indicatedAverageBitrate")]
	//	double IndicatedAverageBitrate { get; }

	//	// @property (readonly, nonatomic) double averageVideoBitrate __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("averageVideoBitrate")]
	//	double AverageVideoBitrate { get; }

	//	// @property (readonly, nonatomic) double averageAudioBitrate __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("averageAudioBitrate")]
	//	double AverageAudioBitrate { get; }

	//	// @property (readonly, nonatomic) NSInteger numberOfDroppedVideoFrames;
	//	[Export ("numberOfDroppedVideoFrames")]
	//	nint NumberOfDroppedVideoFrames { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval startupTime __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("startupTime")]
	//	double StartupTime { get; }

	//	// @property (readonly, nonatomic) NSInteger downloadOverdue __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("downloadOverdue")]
	//	nint DownloadOverdue { get; }

	//	// @property (readonly, nonatomic) double observedMaxBitrate __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("observedMaxBitrate")]
	//	double ObservedMaxBitrate { get; }

	//	// @property (readonly, nonatomic) double observedMinBitrate __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("observedMinBitrate")]
	//	double ObservedMinBitrate { get; }

	//	// @property (readonly, nonatomic) double observedBitrateStandardDeviation __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("observedBitrateStandardDeviation")]
	//	double ObservedBitrateStandardDeviation { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable playbackType __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("playbackType")]
	//	string PlaybackType { get; }

	//	// @property (readonly, nonatomic) NSInteger mediaRequestsWWAN __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("mediaRequestsWWAN")]
	//	nint MediaRequestsWWAN { get; }

	//	// @property (readonly, nonatomic) double switchBitrate __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("switchBitrate")]
	//	double SwitchBitrate { get; }
	//}

	//// @interface AVPlayerItemErrorLogEvent : NSObject <NSCopying>
	//[iOS (4,3)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVPlayerItemErrorLogEvent : INSCopying
	//{
	//	// @property (readonly, nonatomic) NSDate * _Nullable date;
	//	[NullAllowed, Export ("date")]
	//	NSDate Date { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable URI;
	//	[NullAllowed, Export ("URI")]
	//	string URI { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable serverAddress;
	//	[NullAllowed, Export ("serverAddress")]
	//	string ServerAddress { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable playbackSessionID;
	//	[NullAllowed, Export ("playbackSessionID")]
	//	string PlaybackSessionID { get; }

	//	// @property (readonly, nonatomic) NSInteger errorStatusCode;
	//	[Export ("errorStatusCode")]
	//	nint ErrorStatusCode { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull errorDomain;
	//	[Export ("errorDomain")]
	//	string ErrorDomain { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable errorComment;
	//	[NullAllowed, Export ("errorComment")]
	//	string ErrorComment { get; }
	//}

	//// @interface AVPlayerItemMediaDataCollector : NSObject
	//[iOS (9,3)]
	//[BaseType (typeof(NSObject))]
	//interface AVPlayerItemMediaDataCollector
	//{
	//}

	//// @interface AVPlayerItemMetadataCollector : AVPlayerItemMediaDataCollector
	//[iOS (9,3)]
	//[BaseType (typeof(AVPlayerItemMediaDataCollector))]
	//interface AVPlayerItemMetadataCollector
	//{
	//	// -(instancetype _Nonnull)initWithIdentifiers:(NSArray<NSString *> * _Nullable)identifiers classifyingLabels:(NSArray<NSString *> * _Nullable)classifyingLabels;
	//	[Export ("initWithIdentifiers:classifyingLabels:")]
	//	IntPtr Constructor ([NullAllowed] string[] identifiers, [NullAllowed] string[] classifyingLabels);

	//	// -(void)setDelegate:(id<AVPlayerItemMetadataCollectorPushDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)delegateQueue;
	//	[Export ("setDelegate:queue:")]
	//	void SetDelegate ([NullAllowed] AVPlayerItemMetadataCollectorPushDelegate @delegate, [NullAllowed] DispatchQueue delegateQueue);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVPlayerItemMetadataCollectorPushDelegate Delegate { get; }

	//	// @property (readonly, nonatomic, weak) id<AVPlayerItemMetadataCollectorPushDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; }

	//	// @property (readonly, nonatomic) dispatch_queue_t _Nullable delegateQueue;
	//	[NullAllowed, Export ("delegateQueue")]
	//	DispatchQueue DelegateQueue { get; }
	//}

	//// @protocol AVPlayerItemMetadataCollectorPushDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVPlayerItemMetadataCollectorPushDelegate
	//{
	//	// @required -(void)metadataCollector:(AVPlayerItemMetadataCollector * _Nonnull)metadataCollector didCollectDateRangeMetadataGroups:(NSArray<AVDateRangeMetadataGroup *> * _Nonnull)metadataGroups indexesOfNewGroups:(NSIndexSet * _Nonnull)indexesOfNewGroups indexesOfModifiedGroups:(NSIndexSet * _Nonnull)indexesOfModifiedGroups;
	//	[Abstract]
	//	[Export ("metadataCollector:didCollectDateRangeMetadataGroups:indexesOfNewGroups:indexesOfModifiedGroups:")]
	//	void DidCollectDateRangeMetadataGroups (AVPlayerItemMetadataCollector metadataCollector, AVDateRangeMetadataGroup[] metadataGroups, NSIndexSet indexesOfNewGroups, NSIndexSet indexesOfModifiedGroups);
	//}

	//// @interface AVPlayerItemOutput : NSObject
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVPlayerItemOutput
	//{
	//	// -(CMTime)itemTimeForHostTime:(CFTimeInterval)hostTimeInSeconds;
	//	[Export ("itemTimeForHostTime:")]
	//	CMTime ItemTimeForHostTime (double hostTimeInSeconds);

	//	// -(CMTime)itemTimeForMachAbsoluteTime:(int64_t)machAbsoluteTime;
	//	[Export ("itemTimeForMachAbsoluteTime:")]
	//	CMTime ItemTimeForMachAbsoluteTime (long machAbsoluteTime);

	//	// @property (readwrite, nonatomic) BOOL suppressesPlayerRendering __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("suppressesPlayerRendering")]
	//	bool SuppressesPlayerRendering { get; set; }
	//}

	//// @interface AVPlayerItemVideoOutput : AVPlayerItemOutput
	//[iOS (6,0)]
	//[BaseType (typeof(AVPlayerItemOutput))]
	//interface AVPlayerItemVideoOutput
	//{
	//	// -(instancetype _Nonnull)initWithPixelBufferAttributes:(NSDictionary<NSString *,id> * _Nullable)pixelBufferAttributes __attribute__((objc_designated_initializer));
	//	[Export ("initWithPixelBufferAttributes:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSDictionary<NSString, NSObject> pixelBufferAttributes);

	//	// -(instancetype _Nonnull)initWithOutputSettings:(NSDictionary<NSString *,id> * _Nullable)outputSettings __attribute__((objc_designated_initializer)) __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("initWithOutputSettings:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSDictionary<NSString, NSObject> outputSettings);

	//	// -(BOOL)hasNewPixelBufferForItemTime:(CMTime)itemTime;
	//	[Export ("hasNewPixelBufferForItemTime:")]
	//	bool HasNewPixelBufferForItemTime (CMTime itemTime);

	//	// -(CVPixelBufferRef _Nullable)copyPixelBufferForItemTime:(CMTime)itemTime itemTimeForDisplay:(CMTime * _Nullable)outItemTimeForDisplay __attribute__((cf_returns_retained));
	//	[Export ("copyPixelBufferForItemTime:itemTimeForDisplay:")]
	//	[return: NullAllowed]
	//	unsafe CVPixelBufferRef* CopyPixelBufferForItemTime (CMTime itemTime, [NullAllowed] CMTime* outItemTimeForDisplay);

	//	// -(void)setDelegate:(id<AVPlayerItemOutputPullDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)delegateQueue;
	//	[Export ("setDelegate:queue:")]
	//	void SetDelegate ([NullAllowed] AVPlayerItemOutputPullDelegate @delegate, [NullAllowed] DispatchQueue delegateQueue);

	//	// -(void)requestNotificationOfMediaDataChangeWithAdvanceInterval:(NSTimeInterval)interval;
	//	[Export ("requestNotificationOfMediaDataChangeWithAdvanceInterval:")]
	//	void RequestNotificationOfMediaDataChangeWithAdvanceInterval (double interval);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVPlayerItemOutputPullDelegate Delegate { get; }

	//	// @property (readonly, assign, nonatomic) id<AVPlayerItemOutputPullDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; }

	//	// @property (readonly, nonatomic) dispatch_queue_t _Nullable delegateQueue;
	//	[NullAllowed, Export ("delegateQueue")]
	//	DispatchQueue DelegateQueue { get; }
	//}

	//// @protocol AVPlayerItemOutputPullDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVPlayerItemOutputPullDelegate
	//{
	//	// @optional -(void)outputMediaDataWillChange:(AVPlayerItemOutput * _Nonnull)sender __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("outputMediaDataWillChange:")]
	//	void OutputMediaDataWillChange (AVPlayerItemOutput sender);

	//	// @optional -(void)outputSequenceWasFlushed:(AVPlayerItemOutput * _Nonnull)output __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("outputSequenceWasFlushed:")]
	//	void OutputSequenceWasFlushed (AVPlayerItemOutput output);
	//}

	//// @interface AVPlayerItemLegibleOutput : AVPlayerItemOutput
	//[iOS (7,0)]
	//[BaseType (typeof(AVPlayerItemOutput))]
	//interface AVPlayerItemLegibleOutput
	//{
	//	// -(void)setDelegate:(id<AVPlayerItemLegibleOutputPushDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)delegateQueue;
	//	[Export ("setDelegate:queue:")]
	//	void SetDelegate ([NullAllowed] AVPlayerItemLegibleOutputPushDelegate @delegate, [NullAllowed] DispatchQueue delegateQueue);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVPlayerItemLegibleOutputPushDelegate Delegate { get; }

	//	// @property (readonly, nonatomic, weak) id<AVPlayerItemLegibleOutputPushDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; }

	//	// @property (readonly, nonatomic) dispatch_queue_t _Nullable delegateQueue;
	//	[NullAllowed, Export ("delegateQueue")]
	//	DispatchQueue DelegateQueue { get; }

	//	// @property (readwrite, nonatomic) NSTimeInterval advanceIntervalForDelegateInvocation;
	//	[Export ("advanceIntervalForDelegateInvocation")]
	//	double AdvanceIntervalForDelegateInvocation { get; set; }
	//}

	//// @interface AVPlayerItemLegibleOutput_NativeRepresentation (AVPlayerItemLegibleOutput)
	//[Category]
	//[BaseType (typeof(AVPlayerItemLegibleOutput))]
	//interface AVPlayerItemLegibleOutput_AVPlayerItemLegibleOutput_NativeRepresentation
	//{
	//	// -(instancetype _Nonnull)initWithMediaSubtypesForNativeRepresentation:(NSArray<NSNumber *> * _Nonnull)subtypes;
	//	[Export ("initWithMediaSubtypesForNativeRepresentation:")]
	//	IntPtr Constructor (NSNumber[] subtypes);
	//}

	//// @interface AVPlayerItemLegibleOutput_TextStylingResolution (AVPlayerItemLegibleOutput)
	//[Category]
	//[BaseType (typeof(AVPlayerItemLegibleOutput))]
	//interface AVPlayerItemLegibleOutput_AVPlayerItemLegibleOutput_TextStylingResolution
	//{
	//	// @property (copy, nonatomic) AVPlayerItemLegibleOutputTextStylingResolution _Nonnull textStylingResolution;
	//	[Export ("textStylingResolution")]
	//	string TextStylingResolution { get; set; }
	//}

	//// @protocol AVPlayerItemLegibleOutputPushDelegate <AVPlayerItemOutputPushDelegate>
	//[Protocol, Model]
	//interface AVPlayerItemLegibleOutputPushDelegate : IAVPlayerItemOutputPushDelegate
	//{
	//	// @optional -(void)legibleOutput:(AVPlayerItemLegibleOutput * _Nonnull)output didOutputAttributedStrings:(NSArray<NSAttributedString *> * _Nonnull)strings nativeSampleBuffers:(NSArray * _Nonnull)nativeSamples forItemTime:(CMTime)itemTime __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("legibleOutput:didOutputAttributedStrings:nativeSampleBuffers:forItemTime:")]
	//	[Verify (StronglyTypedNSArray)]
	//	void DidOutputAttributedStrings (AVPlayerItemLegibleOutput output, NSAttributedString[] strings, NSObject[] nativeSamples, CMTime itemTime);
	//}

	//// @protocol AVPlayerItemOutputPushDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVPlayerItemOutputPushDelegate
	//{
	//	// @optional -(void)outputSequenceWasFlushed:(AVPlayerItemOutput * _Nonnull)output;
	//	[Export ("outputSequenceWasFlushed:")]
	//	void OutputSequenceWasFlushed (AVPlayerItemOutput output);
	//}

	//// @interface AVPlayerItemMetadataOutput : AVPlayerItemOutput
	//[iOS (8,0)]
	//[BaseType (typeof(AVPlayerItemOutput))]
	//interface AVPlayerItemMetadataOutput
	//{
	//	// -(instancetype _Nonnull)initWithIdentifiers:(NSArray<NSString *> * _Nullable)identifiers __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifiers:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string[] identifiers);

	//	// -(void)setDelegate:(id<AVPlayerItemMetadataOutputPushDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)delegateQueue;
	//	[Export ("setDelegate:queue:")]
	//	void SetDelegate ([NullAllowed] AVPlayerItemMetadataOutputPushDelegate @delegate, [NullAllowed] DispatchQueue delegateQueue);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	AVPlayerItemMetadataOutputPushDelegate Delegate { get; }

	//	// @property (readonly, nonatomic, weak) id<AVPlayerItemMetadataOutputPushDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; }

	//	// @property (readonly, nonatomic) dispatch_queue_t _Nullable delegateQueue;
	//	[NullAllowed, Export ("delegateQueue")]
	//	DispatchQueue DelegateQueue { get; }

	//	// @property (readwrite, nonatomic) NSTimeInterval advanceIntervalForDelegateInvocation;
	//	[Export ("advanceIntervalForDelegateInvocation")]
	//	double AdvanceIntervalForDelegateInvocation { get; set; }
	//}

	//// @protocol AVPlayerItemMetadataOutputPushDelegate <AVPlayerItemOutputPushDelegate>
	//[Protocol, Model]
	//interface AVPlayerItemMetadataOutputPushDelegate : IAVPlayerItemOutputPushDelegate
	//{
	//	// @optional -(void)metadataOutput:(AVPlayerItemMetadataOutput * _Nonnull)output didOutputTimedMetadataGroups:(NSArray<AVTimedMetadataGroup *> * _Nonnull)groups fromPlayerItemTrack:(AVPlayerItemTrack * _Nullable)track __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("metadataOutput:didOutputTimedMetadataGroups:fromPlayerItemTrack:")]
	//	void DidOutputTimedMetadataGroups (AVPlayerItemMetadataOutput output, AVTimedMetadataGroup[] groups, [NullAllowed] AVPlayerItemTrack track);
	//}

	//// @interface AVPlayerItemTrack : NSObject
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVPlayerItemTrack
	//{
	//	// @property (readonly, nonatomic) AVAssetTrack * _Nullable assetTrack;
	//	[NullAllowed, Export ("assetTrack")]
	//	AVAssetTrack AssetTrack { get; }

	//	// @property (getter = isEnabled, assign, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (readonly, nonatomic) float currentVideoFrameRate __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("currentVideoFrameRate")]
	//	float CurrentVideoFrameRate { get; }
	//}

	//// @interface AVPlayerLayer : CALayer
	//[iOS (4,0)]
	//[BaseType (typeof(CALayer))]
	//interface AVPlayerLayer
	//{
	//	// +(AVPlayerLayer * _Nonnull)playerLayerWithPlayer:(AVPlayer * _Nullable)player;
	//	[Static]
	//	[Export ("playerLayerWithPlayer:")]
	//	AVPlayerLayer PlayerLayerWithPlayer ([NullAllowed] AVPlayer player);

	//	// @property (retain, nonatomic) AVPlayer * _Nullable player;
	//	[NullAllowed, Export ("player", ArgumentSemantic.Retain)]
	//	AVPlayer Player { get; set; }

	//	// @property (copy) AVLayerVideoGravity _Nonnull videoGravity;
	//	[Export ("videoGravity")]
	//	string VideoGravity { get; set; }

	//	// @property (readonly, getter = isReadyForDisplay, nonatomic) BOOL readyForDisplay;
	//	[Export ("readyForDisplay")]
	//	bool ReadyForDisplay { [Bind ("isReadyForDisplay")] get; }

	//	// @property (readonly, nonatomic) CGRect videoRect __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("videoRect")]
	//	CGRect VideoRect { get; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable pixelBufferAttributes __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("pixelBufferAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> PixelBufferAttributes { get; set; }
	//}

	//// @interface AVPlayerLooper : NSObject
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVPlayerLooper
	//{
	//	// +(instancetype _Nonnull)playerLooperWithPlayer:(AVQueuePlayer * _Nonnull)player templateItem:(AVPlayerItem * _Nonnull)itemToLoop timeRange:(CMTimeRange)loopRange;
	//	[Static]
	//	[Export ("playerLooperWithPlayer:templateItem:timeRange:")]
	//	AVPlayerLooper PlayerLooperWithPlayer (AVQueuePlayer player, AVPlayerItem itemToLoop, CMTimeRange loopRange);

	//	// +(instancetype _Nonnull)playerLooperWithPlayer:(AVQueuePlayer * _Nonnull)player templateItem:(AVPlayerItem * _Nonnull)itemToLoop;
	//	[Static]
	//	[Export ("playerLooperWithPlayer:templateItem:")]
	//	AVPlayerLooper PlayerLooperWithPlayer (AVQueuePlayer player, AVPlayerItem itemToLoop);

	//	// -(instancetype _Nonnull)initWithPlayer:(AVQueuePlayer * _Nonnull)player templateItem:(AVPlayerItem * _Nonnull)itemToLoop timeRange:(CMTimeRange)loopRange __attribute__((objc_designated_initializer));
	//	[Export ("initWithPlayer:templateItem:timeRange:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (AVQueuePlayer player, AVPlayerItem itemToLoop, CMTimeRange loopRange);

	//	// @property (readonly) AVPlayerLooperStatus status;
	//	[Export ("status")]
	//	AVPlayerLooperStatus Status { get; }

	//	// @property (readonly) NSError * _Nullable error;
	//	[NullAllowed, Export ("error")]
	//	NSError Error { get; }

	//	// -(void)disableLooping;
	//	[Export ("disableLooping")]
	//	void DisableLooping ();

	//	// @property (readonly) NSInteger loopCount;
	//	[Export ("loopCount")]
	//	nint LoopCount { get; }

	//	// @property (readonly, nonatomic) NSArray<AVPlayerItem *> * _Nonnull loopingPlayerItems;
	//	[Export ("loopingPlayerItems")]
	//	AVPlayerItem[] LoopingPlayerItems { get; }
	//}

	//// @interface AVPlayerMediaSelectionCriteria : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVPlayerMediaSelectionCriteria
	//{
	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nullable preferredLanguages;
	//	[NullAllowed, Export ("preferredLanguages")]
	//	string[] PreferredLanguages { get; }

	//	// @property (readonly, nonatomic) NSArray<AVMediaCharacteristic> * _Nullable preferredMediaCharacteristics;
	//	[NullAllowed, Export ("preferredMediaCharacteristics")]
	//	string[] PreferredMediaCharacteristics { get; }

	//	// -(instancetype _Nonnull)initWithPreferredLanguages:(NSArray<NSString *> * _Nullable)preferredLanguages preferredMediaCharacteristics:(NSArray<AVMediaCharacteristic> * _Nullable)preferredMediaCharacteristics;
	//	[Export ("initWithPreferredLanguages:preferredMediaCharacteristics:")]
	//	IntPtr Constructor ([NullAllowed] string[] preferredLanguages, [NullAllowed] string[] preferredMediaCharacteristics);
	//}

	//// @protocol AVQueuedSampleBufferRendering <NSObject>
	//[TV (11,0), NoWatch, Mac (10,13), iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface AVQueuedSampleBufferRendering
	//{
	//	// @required @property (readonly, retain) CMTimebaseRef _Nonnull timebase __attribute__((NSObject));
	//	[Abstract]
	//	[Export ("timebase", ArgumentSemantic.Retain)]
	//	unsafe CMTimebaseRef* Timebase { get; }

	//	// @required -(void)enqueueSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer;
	//	[Abstract]
	//	[Export ("enqueueSampleBuffer:")]
	//	unsafe void EnqueueSampleBuffer (CMSampleBufferRef* sampleBuffer);

	//	// @required -(void)flush;
	//	[Abstract]
	//	[Export ("flush")]
	//	void Flush ();

	//	// @required @property (readonly, getter = isReadyForMoreMediaData) BOOL readyForMoreMediaData;
	//	[Abstract]
	//	[Export ("readyForMoreMediaData")]
	//	bool ReadyForMoreMediaData { [Bind ("isReadyForMoreMediaData")] get; }

	//	// @required -(void)requestMediaDataWhenReadyOnQueue:(dispatch_queue_t _Nonnull)queue usingBlock:(void (^ _Nonnull)(void))block;
	//	[Abstract]
	//	[Export ("requestMediaDataWhenReadyOnQueue:usingBlock:")]
	//	void RequestMediaDataWhenReadyOnQueue (DispatchQueue queue, Action block);

	//	// @required -(void)stopRequestingMediaData;
	//	[Abstract]
	//	[Export ("stopRequestingMediaData")]
	//	void StopRequestingMediaData ();
	//}

	//// @interface AVRouteDetector : NSObject
	//[TV (11,0), NoWatch, Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVRouteDetector
	//{
	//	// @property (getter = isRouteDetectionEnabled) BOOL routeDetectionEnabled;
	//	[Export ("routeDetectionEnabled")]
	//	bool RouteDetectionEnabled { [Bind ("isRouteDetectionEnabled")] get; set; }

	//	// @property (readonly) BOOL multipleRoutesDetected;
	//	[Export ("multipleRoutesDetected")]
	//	bool MultipleRoutesDetected { get; }
	//}

	//// @interface AVSampleBufferAudioRenderer : NSObject <AVQueuedSampleBufferRendering>
	//[TV (11,0), NoWatch, Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVSampleBufferAudioRenderer : IAVQueuedSampleBufferRendering
	//{
	//	// @property (readonly, nonatomic) AVQueuedSampleBufferRenderingStatus status;
	//	[Export ("status")]
	//	AVQueuedSampleBufferRenderingStatus Status { get; }

	//	// @property (readonly, nonatomic) NSError * _Nullable error;
	//	[NullAllowed, Export ("error")]
	//	NSError Error { get; }

	//	// @property (copy, nonatomic) NSString * _Nullable audioOutputDeviceUniqueID __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.13)));
	//	[NoWatch, NoTV, NoiOS, Mac (10, 13)]
	//	[NullAllowed, Export ("audioOutputDeviceUniqueID")]
	//	string AudioOutputDeviceUniqueID { get; set; }

	//	// @property (copy, nonatomic) AVAudioTimePitchAlgorithm _Nonnull audioTimePitchAlgorithm;
	//	[Export ("audioTimePitchAlgorithm")]
	//	string AudioTimePitchAlgorithm { get; set; }
	//}

	//// @interface AVSampleBufferAudioRendererVolumeControl (AVSampleBufferAudioRenderer)
	//[Category]
	//[BaseType (typeof(AVSampleBufferAudioRenderer))]
	//interface AVSampleBufferAudioRenderer_AVSampleBufferAudioRendererVolumeControl
	//{
	//	// @property (nonatomic) float volume;
	//	[Export ("volume")]
	//	float Volume { get; set; }

	//	// @property (getter = isMuted, nonatomic) BOOL muted;
	//	[Export ("muted")]
	//	bool Muted { [Bind ("isMuted")] get; set; }
	//}

	//// @interface AVSampleBufferAudioRendererQueueManagement (AVSampleBufferAudioRenderer)
	//[Category]
	//[BaseType (typeof(AVSampleBufferAudioRenderer))]
	//interface AVSampleBufferAudioRenderer_AVSampleBufferAudioRendererQueueManagement
	//{
	//	// -(void)flushFromSourceTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
	//	[Export ("flushFromSourceTime:completionHandler:")]
	//	void FlushFromSourceTime (CMTime time, Action<bool> completionHandler);
	//}

	//// @interface AVSampleBufferDisplayLayer : CALayer
	//[TV (10,2), NoWatch, Mac (10,8), iOS (8,0)]
	//[BaseType (typeof(CALayer))]
	//interface AVSampleBufferDisplayLayer
	//{
	//	// @property (retain) CMTimebaseRef _Nullable controlTimebase __attribute__((NSObject));
	//	[NullAllowed, Export ("controlTimebase", ArgumentSemantic.Retain)]
	//	unsafe CMTimebaseRef* ControlTimebase { get; set; }

	//	// @property (copy) AVLayerVideoGravity _Nonnull videoGravity;
	//	[Export ("videoGravity")]
	//	string VideoGravity { get; set; }
	//}

	//// @interface AVSampleBufferDisplayLayerQueueManagement (AVSampleBufferDisplayLayer) <AVQueuedSampleBufferRendering>
	//[Category]
	//[BaseType (typeof(AVSampleBufferDisplayLayer))]
	//interface AVSampleBufferDisplayLayer_AVSampleBufferDisplayLayerQueueManagement : IAVQueuedSampleBufferRendering
	//{
	//	// @property (readonly, nonatomic) AVQueuedSampleBufferRenderingStatus status __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=10.2))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[TV (10, 2), NoWatch, Mac (10, 10), iOS (8, 0)]
	//	[Export ("status")]
	//	AVQueuedSampleBufferRenderingStatus Status { get; }

	//	// @property (readonly, nonatomic) NSError * _Nullable error __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=10.2))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
	//	[TV (10, 2), NoWatch, Mac (10, 10), iOS (8, 0)]
	//	[NullAllowed, Export ("error")]
	//	NSError Error { get; }

	//	// -(void)enqueueSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer;
	//	[Export ("enqueueSampleBuffer:")]
	//	unsafe void EnqueueSampleBuffer (CMSampleBufferRef* sampleBuffer);

	//	// -(void)flush;
	//	[Export ("flush")]
	//	void Flush ();

	//	// -(void)flushAndRemoveImage;
	//	[Export ("flushAndRemoveImage")]
	//	void FlushAndRemoveImage ();

	//	// @property (readonly, getter = isReadyForMoreMediaData) BOOL readyForMoreMediaData;
	//	[Export ("readyForMoreMediaData")]
	//	bool ReadyForMoreMediaData { [Bind ("isReadyForMoreMediaData")] get; }

	//	// -(void)requestMediaDataWhenReadyOnQueue:(dispatch_queue_t _Nonnull)queue usingBlock:(void (^ _Nonnull)(void))block;
	//	[Export ("requestMediaDataWhenReadyOnQueue:usingBlock:")]
	//	void RequestMediaDataWhenReadyOnQueue (DispatchQueue queue, Action block);

	//	// -(void)stopRequestingMediaData;
	//	[Export ("stopRequestingMediaData")]
	//	void StopRequestingMediaData ();
	//}

	//// @interface AVSampleBufferRenderSynchronizer : NSObject
	//[TV (11,0), NoWatch, Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVSampleBufferRenderSynchronizer
	//{
	//	// @property (readonly, retain) CMTimebaseRef _Nonnull timebase __attribute__((NSObject));
	//	[Export ("timebase", ArgumentSemantic.Retain)]
	//	unsafe CMTimebaseRef* Timebase { get; }

	//	// @property (readwrite, nonatomic) float rate;
	//	[Export ("rate")]
	//	float Rate { get; set; }

	//	// -(CMTime)currentTime __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[TV (12, 0), NoWatch, Mac (10, 14), iOS (12, 0)]
	//	[Export ("currentTime")]
	//	[Verify (MethodToProperty)]
	//	CMTime CurrentTime { get; }

	//	// -(void)setRate:(float)rate time:(CMTime)time;
	//	[Export ("setRate:time:")]
	//	void SetRate (float rate, CMTime time);
	//}

	//// @interface AVSampleBufferRenderSynchronizerRendererManagement (AVSampleBufferRenderSynchronizer)
	//[Category]
	//[BaseType (typeof(AVSampleBufferRenderSynchronizer))]
	//interface AVSampleBufferRenderSynchronizer_AVSampleBufferRenderSynchronizerRendererManagement
	//{
	//	// @property (readonly, atomic) NSArray<__kindof id<AVQueuedSampleBufferRendering>> * _Nonnull renderers;
	//	[Export ("renderers")]
	//	AVQueuedSampleBufferRendering[] Renderers { get; }

	//	// -(void)addRenderer:(id<AVQueuedSampleBufferRendering> _Nonnull)renderer;
	//	[Export ("addRenderer:")]
	//	void AddRenderer (AVQueuedSampleBufferRendering renderer);

	//	// -(void)removeRenderer:(id<AVQueuedSampleBufferRendering> _Nonnull)renderer atTime:(CMTime)time completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
	//	[Export ("removeRenderer:atTime:completionHandler:")]
	//	void RemoveRenderer (AVQueuedSampleBufferRendering renderer, CMTime time, [NullAllowed] Action<bool> completionHandler);
	//}

	//// @interface AVSampleBufferRenderSynchronizerTimeObservation (AVSampleBufferRenderSynchronizer)
	//[Category]
	//[BaseType (typeof(AVSampleBufferRenderSynchronizer))]
	//interface AVSampleBufferRenderSynchronizer_AVSampleBufferRenderSynchronizerTimeObservation
	//{
	//	// -(id _Nonnull)addPeriodicTimeObserverForInterval:(CMTime)interval queue:(dispatch_queue_t _Nullable)queue usingBlock:(void (^ _Nonnull)(CMTime))block;
	//	[Export ("addPeriodicTimeObserverForInterval:queue:usingBlock:")]
	//	NSObject AddPeriodicTimeObserverForInterval (CMTime interval, [NullAllowed] DispatchQueue queue, Action<CMTime> block);

	//	// -(id _Nonnull)addBoundaryTimeObserverForTimes:(NSArray<NSValue *> * _Nonnull)times queue:(dispatch_queue_t _Nullable)queue usingBlock:(void (^ _Nonnull)(void))block;
	//	[Export ("addBoundaryTimeObserverForTimes:queue:usingBlock:")]
	//	NSObject AddBoundaryTimeObserverForTimes (NSValue[] times, [NullAllowed] DispatchQueue queue, Action block);

	//	// -(void)removeTimeObserver:(id _Nonnull)observer;
	//	[Export ("removeTimeObserver:")]
	//	void RemoveTimeObserver (NSObject observer);
	//}

	//// @interface AVSynchronizedLayer : CALayer
	//[iOS (4,0)]
	//[BaseType (typeof(CALayer))]
	//interface AVSynchronizedLayer
	//{
	//	// +(AVSynchronizedLayer * _Nonnull)synchronizedLayerWithPlayerItem:(AVPlayerItem * _Nonnull)playerItem;
	//	[Static]
	//	[Export ("synchronizedLayerWithPlayerItem:")]
	//	AVSynchronizedLayer SynchronizedLayerWithPlayerItem (AVPlayerItem playerItem);

	//	// @property (retain, nonatomic) AVPlayerItem * _Nullable playerItem;
	//	[NullAllowed, Export ("playerItem", ArgumentSemantic.Retain)]
	//	AVPlayerItem PlayerItem { get; set; }
	//}

	//// @interface AVTextStyleRule : NSObject <NSCopying>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface AVTextStyleRule : INSCopying
	//{
	//	// +(id _Nonnull)propertyListForTextStyleRules:(NSArray<AVTextStyleRule *> * _Nonnull)textStyleRules;
	//	[Static]
	//	[Export ("propertyListForTextStyleRules:")]
	//	NSObject PropertyListForTextStyleRules (AVTextStyleRule[] textStyleRules);

	//	// +(NSArray<AVTextStyleRule *> * _Nullable)textStyleRulesFromPropertyList:(id _Nonnull)plist;
	//	[Static]
	//	[Export ("textStyleRulesFromPropertyList:")]
	//	[return: NullAllowed]
	//	AVTextStyleRule[] TextStyleRulesFromPropertyList (NSObject plist);

	//	// +(AVTextStyleRule * _Nullable)textStyleRuleWithTextMarkupAttributes:(NSDictionary<NSString *,id> * _Nonnull)textMarkupAttributes;
	//	[Static]
	//	[Export ("textStyleRuleWithTextMarkupAttributes:")]
	//	[return: NullAllowed]
	//	AVTextStyleRule TextStyleRuleWithTextMarkupAttributes (NSDictionary<NSString, NSObject> textMarkupAttributes);

	//	// +(AVTextStyleRule * _Nullable)textStyleRuleWithTextMarkupAttributes:(NSDictionary<NSString *,id> * _Nonnull)textMarkupAttributes textSelector:(NSString * _Nullable)textSelector;
	//	[Static]
	//	[Export ("textStyleRuleWithTextMarkupAttributes:textSelector:")]
	//	[return: NullAllowed]
	//	AVTextStyleRule TextStyleRuleWithTextMarkupAttributes (NSDictionary<NSString, NSObject> textMarkupAttributes, [NullAllowed] string textSelector);

	//	// -(instancetype _Nullable)initWithTextMarkupAttributes:(NSDictionary<NSString *,id> * _Nonnull)textMarkupAttributes;
	//	[Export ("initWithTextMarkupAttributes:")]
	//	IntPtr Constructor (NSDictionary<NSString, NSObject> textMarkupAttributes);

	//	// -(instancetype _Nullable)initWithTextMarkupAttributes:(NSDictionary<NSString *,id> * _Nonnull)textMarkupAttributes textSelector:(NSString * _Nullable)textSelector __attribute__((objc_designated_initializer));
	//	[Export ("initWithTextMarkupAttributes:textSelector:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSDictionary<NSString, NSObject> textMarkupAttributes, [NullAllowed] string textSelector);

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nonnull textMarkupAttributes;
	//	[Export ("textMarkupAttributes")]
	//	NSDictionary<NSString, NSObject> TextMarkupAttributes { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable textSelector;
	//	[NullAllowed, Export ("textSelector")]
	//	string TextSelector { get; }
	//}

	//// @interface NSValueAVFoundationExtensions (NSValue)
	//[Category]
	//[BaseType (typeof(NSValue))]
	//interface NSValue_NSValueAVFoundationExtensions
	//{
	//	// +(NSValue * _Nonnull)valueWithCMTime:(CMTime)time __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("valueWithCMTime:")]
	//	NSValue ValueWithCMTime (CMTime time);

	//	// @property (readonly) CMTime CMTimeValue __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("CMTimeValue")]
	//	CMTime CMTimeValue { get; }

	//	// +(NSValue * _Nonnull)valueWithCMTimeRange:(CMTimeRange)timeRange __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("valueWithCMTimeRange:")]
	//	NSValue ValueWithCMTimeRange (CMTimeRange timeRange);

	//	// @property (readonly) CMTimeRange CMTimeRangeValue __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("CMTimeRangeValue")]
	//	CMTimeRange CMTimeRangeValue { get; }

	//	// +(NSValue * _Nonnull)valueWithCMTimeMapping:(CMTimeMapping)timeMapping __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("valueWithCMTimeMapping:")]
	//	NSValue ValueWithCMTimeMapping (CMTimeMapping timeMapping);

	//	// @property (readonly) CMTimeMapping CMTimeMappingValue __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("CMTimeMappingValue")]
	//	CMTimeMapping CMTimeMappingValue { get; }
	//}

	//// @interface AVTimeCoding (NSCoder)
	//[Category]
	//[BaseType (typeof(NSCoder))]
	//interface NSCoder_AVTimeCoding
	//{
	//	// -(void)encodeCMTime:(CMTime)time forKey:(NSString * _Nonnull)key __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("encodeCMTime:forKey:")]
	//	void EncodeCMTime (CMTime time, string key);

	//	// -(CMTime)decodeCMTimeForKey:(NSString * _Nonnull)key __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("decodeCMTimeForKey:")]
	//	CMTime DecodeCMTimeForKey (string key);

	//	// -(void)encodeCMTimeRange:(CMTimeRange)timeRange forKey:(NSString * _Nonnull)key __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("encodeCMTimeRange:forKey:")]
	//	void EncodeCMTimeRange (CMTimeRange timeRange, string key);

	//	// -(CMTimeRange)decodeCMTimeRangeForKey:(NSString * _Nonnull)key __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("decodeCMTimeRangeForKey:")]
	//	CMTimeRange DecodeCMTimeRangeForKey (string key);

	//	// -(void)encodeCMTimeMapping:(CMTimeMapping)timeMapping forKey:(NSString * _Nonnull)key __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("encodeCMTimeMapping:forKey:")]
	//	void EncodeCMTimeMapping (CMTimeMapping timeMapping, string key);

	//	// -(CMTimeMapping)decodeCMTimeMappingForKey:(NSString * _Nonnull)key __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("decodeCMTimeMappingForKey:")]
	//	CMTimeMapping DecodeCMTimeMappingForKey (string key);
	//}

	//// @interface AVMetadataGroup : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface AVMetadataGroup
	//{
	//	// @property (readonly, copy, nonatomic) NSArray<AVMetadataItem *> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	AVMetadataItem[] Items { get; }
	//}

	//// @interface AVMetadataGroupIdentification (AVMetadataGroup)
	//[Category]
	//[BaseType (typeof(AVMetadataGroup))]
	//interface AVMetadataGroup_AVMetadataGroupIdentification
	//{
	//	// @property (readonly, nonatomic) NSString * _Nullable classifyingLabel __attribute__((availability(ios, introduced=9.3)));
	//	[iOS (9, 3)]
	//	[NullAllowed, Export ("classifyingLabel")]
	//	string ClassifyingLabel { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable uniqueID __attribute__((availability(ios, introduced=9.3)));
	//	[iOS (9, 3)]
	//	[NullAllowed, Export ("uniqueID")]
	//	string UniqueID { get; }
	//}

	//// @interface AVTimedMetadataGroup : AVMetadataGroup <NSCopying, NSMutableCopying>
	//[iOS (4,3)]
	//[BaseType (typeof(AVMetadataGroup))]
	//interface AVTimedMetadataGroup : INSCopying, INSMutableCopying
	//{
	//	// -(instancetype _Nonnull)initWithItems:(NSArray<AVMetadataItem *> * _Nonnull)items timeRange:(CMTimeRange)timeRange;
	//	[Export ("initWithItems:timeRange:")]
	//	IntPtr Constructor (AVMetadataItem[] items, CMTimeRange timeRange);

	//	// -(instancetype _Nullable)initWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("initWithSampleBuffer:")]
	//	unsafe IntPtr Constructor (CMSampleBufferRef* sampleBuffer);

	//	// @property (readonly, nonatomic) CMTimeRange timeRange;
	//	[Export ("timeRange")]
	//	CMTimeRange TimeRange { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<AVMetadataItem *> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	AVMetadataItem[] Items { get; }
	//}

	//// @interface AVTimedMetadataGroupSerializationSupport (AVTimedMetadataGroup)
	//[Category]
	//[BaseType (typeof(AVTimedMetadataGroup))]
	//interface AVTimedMetadataGroup_AVTimedMetadataGroupSerializationSupport
	//{
	//	// -(CMMetadataFormatDescriptionRef _Nullable)copyFormatDescription __attribute__((cf_returns_retained)) __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("copyFormatDescription")]
	//	[Verify (MethodToProperty)]
	//	unsafe CMMetadataFormatDescriptionRef* CopyFormatDescription { get; }
	//}

	//// @interface AVMutableTimedMetadataGroup : AVTimedMetadataGroup
	//[iOS (4,3)]
	//[BaseType (typeof(AVTimedMetadataGroup))]
	//interface AVMutableTimedMetadataGroup
	//{
	//	// @property (readwrite, nonatomic) CMTimeRange timeRange;
	//	[Export ("timeRange", ArgumentSemantic.Assign)]
	//	CMTimeRange TimeRange { get; set; }

	//	// @property (readwrite, copy, nonatomic) NSArray<AVMetadataItem *> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	AVMetadataItem[] Items { get; set; }
	//}

	//// @interface AVDateRangeMetadataGroup : AVMetadataGroup <NSCopying, NSMutableCopying>
	//[iOS (9,0)]
	//[BaseType (typeof(AVMetadataGroup))]
	//interface AVDateRangeMetadataGroup : INSCopying, INSMutableCopying
	//{
	//	// -(instancetype _Nonnull)initWithItems:(NSArray<AVMetadataItem *> * _Nonnull)items startDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nullable)endDate;
	//	[Export ("initWithItems:startDate:endDate:")]
	//	IntPtr Constructor (AVMetadataItem[] items, NSDate startDate, [NullAllowed] NSDate endDate);

	//	// @property (readonly, copy, nonatomic) NSDate * _Nonnull startDate;
	//	[Export ("startDate", ArgumentSemantic.Copy)]
	//	NSDate StartDate { get; }

	//	// @property (readonly, copy, nonatomic) NSDate * _Nullable endDate;
	//	[NullAllowed, Export ("endDate", ArgumentSemantic.Copy)]
	//	NSDate EndDate { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<AVMetadataItem *> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	AVMetadataItem[] Items { get; }
	//}

	//// @interface AVMutableDateRangeMetadataGroup : AVDateRangeMetadataGroup
	//[iOS (9,0)]
	//[BaseType (typeof(AVDateRangeMetadataGroup))]
	//interface AVMutableDateRangeMetadataGroup
	//{
	//	// @property (readwrite, copy, nonatomic) NSDate * _Nonnull startDate;
	//	[Export ("startDate", ArgumentSemantic.Copy)]
	//	NSDate StartDate { get; set; }

	//	// @property (readwrite, copy, nonatomic) NSDate * _Nullable endDate;
	//	[NullAllowed, Export ("endDate", ArgumentSemantic.Copy)]
	//	NSDate EndDate { get; set; }

	//	// @property (readwrite, copy, nonatomic) NSArray<AVMetadataItem *> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	AVMetadataItem[] Items { get; set; }
	//}

	//// @interface CIVector : NSObject <NSCopying, NSSecureCoding>
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIVector : INSCopying, INSSecureCoding
	//{
	//	// +(instancetype _Nonnull)vectorWithValues:(const CGFloat * _Nonnull)values count:(size_t)count;
	//	[Static]
	//	[Export ("vectorWithValues:count:")]
	//	unsafe CIVector VectorWithValues (nfloat* values, nuint count);

	//	// +(instancetype _Nonnull)vectorWithX:(CGFloat)x;
	//	[Static]
	//	[Export ("vectorWithX:")]
	//	CIVector VectorWithX (nfloat x);

	//	// +(instancetype _Nonnull)vectorWithX:(CGFloat)x Y:(CGFloat)y;
	//	[Static]
	//	[Export ("vectorWithX:Y:")]
	//	CIVector VectorWithX (nfloat x, nfloat y);

	//	// +(instancetype _Nonnull)vectorWithX:(CGFloat)x Y:(CGFloat)y Z:(CGFloat)z;
	//	[Static]
	//	[Export ("vectorWithX:Y:Z:")]
	//	CIVector VectorWithX (nfloat x, nfloat y, nfloat z);

	//	// +(instancetype _Nonnull)vectorWithX:(CGFloat)x Y:(CGFloat)y Z:(CGFloat)z W:(CGFloat)w;
	//	[Static]
	//	[Export ("vectorWithX:Y:Z:W:")]
	//	CIVector VectorWithX (nfloat x, nfloat y, nfloat z, nfloat w);

	//	// +(instancetype _Nonnull)vectorWithCGPoint:(CGPoint)p __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("vectorWithCGPoint:")]
	//	CIVector VectorWithCGPoint (CGPoint p);

	//	// +(instancetype _Nonnull)vectorWithCGRect:(CGRect)r __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("vectorWithCGRect:")]
	//	CIVector VectorWithCGRect (CGRect r);

	//	// +(instancetype _Nonnull)vectorWithCGAffineTransform:(CGAffineTransform)t __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("vectorWithCGAffineTransform:")]
	//	CIVector VectorWithCGAffineTransform (CGAffineTransform t);

	//	// +(instancetype _Nonnull)vectorWithString:(NSString * _Nonnull)representation;
	//	[Static]
	//	[Export ("vectorWithString:")]
	//	CIVector VectorWithString (string representation);

	//	// -(instancetype _Nonnull)initWithValues:(const CGFloat * _Nonnull)values count:(size_t)count __attribute__((objc_designated_initializer));
	//	[Export ("initWithValues:count:")]
	//	[DesignatedInitializer]
	//	unsafe IntPtr Constructor (nfloat* values, nuint count);

	//	// -(instancetype _Nonnull)initWithX:(CGFloat)x;
	//	[Export ("initWithX:")]
	//	IntPtr Constructor (nfloat x);

	//	// -(instancetype _Nonnull)initWithX:(CGFloat)x Y:(CGFloat)y;
	//	[Export ("initWithX:Y:")]
	//	IntPtr Constructor (nfloat x, nfloat y);

	//	// -(instancetype _Nonnull)initWithX:(CGFloat)x Y:(CGFloat)y Z:(CGFloat)z;
	//	[Export ("initWithX:Y:Z:")]
	//	IntPtr Constructor (nfloat x, nfloat y, nfloat z);

	//	// -(instancetype _Nonnull)initWithX:(CGFloat)x Y:(CGFloat)y Z:(CGFloat)z W:(CGFloat)w;
	//	[Export ("initWithX:Y:Z:W:")]
	//	IntPtr Constructor (nfloat x, nfloat y, nfloat z, nfloat w);

	//	// -(instancetype _Nonnull)initWithCGPoint:(CGPoint)p __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithCGPoint:")]
	//	IntPtr Constructor (CGPoint p);

	//	// -(instancetype _Nonnull)initWithCGRect:(CGRect)r __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithCGRect:")]
	//	IntPtr Constructor (CGRect r);

	//	// -(instancetype _Nonnull)initWithCGAffineTransform:(CGAffineTransform)r __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithCGAffineTransform:")]
	//	IntPtr Constructor (CGAffineTransform r);

	//	// -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)representation;
	//	[Export ("initWithString:")]
	//	IntPtr Constructor (string representation);

	//	// -(CGFloat)valueAtIndex:(size_t)index;
	//	[Export ("valueAtIndex:")]
	//	nfloat ValueAtIndex (nuint index);

	//	// @property (readonly) size_t count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// @property (readonly) CGFloat X;
	//	[Export ("X")]
	//	nfloat X { get; }

	//	// @property (readonly) CGFloat Y;
	//	[Export ("Y")]
	//	nfloat Y { get; }

	//	// @property (readonly) CGFloat Z;
	//	[Export ("Z")]
	//	nfloat Z { get; }

	//	// @property (readonly) CGFloat W;
	//	[Export ("W")]
	//	nfloat W { get; }

	//	// @property (readonly) CGPoint CGPointValue __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("CGPointValue")]
	//	CGPoint CGPointValue { get; }

	//	// @property (readonly) CGRect CGRectValue __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("CGRectValue")]
	//	CGRect CGRectValue { get; }

	//	// @property (readonly) CGAffineTransform CGAffineTransformValue __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("CGAffineTransformValue")]
	//	CGAffineTransform CGAffineTransformValue { get; }

	//	// @property (readonly) NSString * _Nonnull stringRepresentation;
	//	[Export ("stringRepresentation")]
	//	string StringRepresentation { get; }
	//}

	//// @interface CIColor : NSObject <NSSecureCoding, NSCopying>
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIColor : INSSecureCoding, INSCopying
	//{
	//	// +(instancetype _Nonnull)colorWithCGColor:(CGColorRef _Nonnull)c;
	//	[Static]
	//	[Export ("colorWithCGColor:")]
	//	unsafe CIColor ColorWithCGColor (CGColorRef* c);

	//	// +(instancetype _Nonnull)colorWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b alpha:(CGFloat)a;
	//	[Static]
	//	[Export ("colorWithRed:green:blue:alpha:")]
	//	CIColor ColorWithRed (nfloat r, nfloat g, nfloat b, nfloat a);

	//	// +(instancetype _Nonnull)colorWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b;
	//	[Static]
	//	[Export ("colorWithRed:green:blue:")]
	//	CIColor ColorWithRed (nfloat r, nfloat g, nfloat b);

	//	// +(instancetype _Nullable)colorWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b alpha:(CGFloat)a colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("colorWithRed:green:blue:alpha:colorSpace:")]
	//	[return: NullAllowed]
	//	unsafe CIColor ColorWithRed (nfloat r, nfloat g, nfloat b, nfloat a, CGColorSpaceRef* colorSpace);

	//	// +(instancetype _Nullable)colorWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("colorWithRed:green:blue:colorSpace:")]
	//	[return: NullAllowed]
	//	unsafe CIColor ColorWithRed (nfloat r, nfloat g, nfloat b, CGColorSpaceRef* colorSpace);

	//	// +(instancetype _Nonnull)colorWithString:(NSString * _Nonnull)representation;
	//	[Static]
	//	[Export ("colorWithString:")]
	//	CIColor ColorWithString (string representation);

	//	// -(instancetype _Nonnull)initWithCGColor:(CGColorRef _Nonnull)c __attribute__((objc_designated_initializer));
	//	[Export ("initWithCGColor:")]
	//	[DesignatedInitializer]
	//	unsafe IntPtr Constructor (CGColorRef* c);

	//	// -(instancetype _Nonnull)initWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b alpha:(CGFloat)a;
	//	[Export ("initWithRed:green:blue:alpha:")]
	//	IntPtr Constructor (nfloat r, nfloat g, nfloat b, nfloat a);

	//	// -(instancetype _Nonnull)initWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("initWithRed:green:blue:")]
	//	IntPtr Constructor (nfloat r, nfloat g, nfloat b);

	//	// -(instancetype _Nullable)initWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b alpha:(CGFloat)a colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("initWithRed:green:blue:alpha:colorSpace:")]
	//	unsafe IntPtr Constructor (nfloat r, nfloat g, nfloat b, nfloat a, CGColorSpaceRef* colorSpace);

	//	// -(instancetype _Nullable)initWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("initWithRed:green:blue:colorSpace:")]
	//	unsafe IntPtr Constructor (nfloat r, nfloat g, nfloat b, CGColorSpaceRef* colorSpace);

	//	// @property (readonly) size_t numberOfComponents;
	//	[Export ("numberOfComponents")]
	//	nuint NumberOfComponents { get; }

	//	// @property (readonly) const CGFloat * _Nonnull components __attribute__((objc_returns_inner_pointer));
	//	[Export ("components")]
	//	unsafe nfloat* Components { get; }

	//	// @property (readonly) CGFloat alpha;
	//	[Export ("alpha")]
	//	nfloat Alpha { get; }

	//	// @property (readonly) CGColorSpaceRef _Nonnull colorSpace __attribute__((cf_returns_not_retained));
	//	[Export ("colorSpace")]
	//	unsafe CGColorSpaceRef* ColorSpace { get; }

	//	// @property (readonly) CGFloat red;
	//	[Export ("red")]
	//	nfloat Red { get; }

	//	// @property (readonly) CGFloat green;
	//	[Export ("green")]
	//	nfloat Green { get; }

	//	// @property (readonly) CGFloat blue;
	//	[Export ("blue")]
	//	nfloat Blue { get; }

	//	// @property (readonly) NSString * _Nonnull stringRepresentation;
	//	[Export ("stringRepresentation")]
	//	string StringRepresentation { get; }

	//	// @property (readonly, strong, class) CIColor * _Nonnull blackColor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Static]
	//	[Export ("blackColor", ArgumentSemantic.Strong)]
	//	CIColor BlackColor { get; }

	//	// @property (readonly, strong, class) CIColor * _Nonnull whiteColor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Static]
	//	[Export ("whiteColor", ArgumentSemantic.Strong)]
	//	CIColor WhiteColor { get; }

	//	// @property (readonly, strong, class) CIColor * _Nonnull grayColor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Static]
	//	[Export ("grayColor", ArgumentSemantic.Strong)]
	//	CIColor GrayColor { get; }

	//	// @property (readonly, strong, class) CIColor * _Nonnull redColor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Static]
	//	[Export ("redColor", ArgumentSemantic.Strong)]
	//	CIColor RedColor { get; }

	//	// @property (readonly, strong, class) CIColor * _Nonnull greenColor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Static]
	//	[Export ("greenColor", ArgumentSemantic.Strong)]
	//	CIColor GreenColor { get; }

	//	// @property (readonly, strong, class) CIColor * _Nonnull blueColor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Static]
	//	[Export ("blueColor", ArgumentSemantic.Strong)]
	//	CIColor BlueColor { get; }

	//	// @property (readonly, strong, class) CIColor * _Nonnull cyanColor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Static]
	//	[Export ("cyanColor", ArgumentSemantic.Strong)]
	//	CIColor CyanColor { get; }

	//	// @property (readonly, strong, class) CIColor * _Nonnull magentaColor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Static]
	//	[Export ("magentaColor", ArgumentSemantic.Strong)]
	//	CIColor MagentaColor { get; }

	//	// @property (readonly, strong, class) CIColor * _Nonnull yellowColor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Static]
	//	[Export ("yellowColor", ArgumentSemantic.Strong)]
	//	CIColor YellowColor { get; }

	//	// @property (readonly, strong, class) CIColor * _Nonnull clearColor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Static]
	//	[Export ("clearColor", ArgumentSemantic.Strong)]
	//	CIColor ClearColor { get; }
	//}

	//// @interface CIImage : NSObject <NSSecureCoding, NSCopying>
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIImage : INSSecureCoding, INSCopying
	//{
	//	// +(CIImage * _Nonnull)imageWithCGImage:(CGImageRef _Nonnull)image;
	//	[Static]
	//	[Export ("imageWithCGImage:")]
	//	unsafe CIImage ImageWithCGImage (CGImageRef* image);

	//	// +(CIImage * _Nonnull)imageWithCGImage:(CGImageRef _Nonnull)image options:(NSDictionary<CIImageOption,id> * _Nullable)options;
	//	[Static]
	//	[Export ("imageWithCGImage:options:")]
	//	unsafe CIImage ImageWithCGImage (CGImageRef* image, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIImage * _Nonnull)imageWithCGLayer:(CGLayerRef _Nonnull)layer __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Static]
	//	[Export ("imageWithCGLayer:")]
	//	unsafe CIImage ImageWithCGLayer (CGLayerRef* layer);

	//	// +(CIImage * _Nonnull)imageWithCGLayer:(CGLayerRef _Nonnull)layer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Static]
	//	[Export ("imageWithCGLayer:options:")]
	//	unsafe CIImage ImageWithCGLayer (CGLayerRef* layer, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIImage * _Nonnull)imageWithBitmapData:(NSData * _Nonnull)data bytesPerRow:(size_t)bytesPerRow size:(CGSize)size format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nullable)colorSpace;
	//	[Static]
	//	[Export ("imageWithBitmapData:bytesPerRow:size:format:colorSpace:")]
	//	unsafe CIImage ImageWithBitmapData (NSData data, nuint bytesPerRow, CGSize size, int format, [NullAllowed] CGColorSpaceRef* colorSpace);

	//	// +(CIImage * _Nonnull)imageWithTexture:(unsigned int)name size:(CGSize)size flipped:(BOOL)flipped colorSpace:(CGColorSpaceRef _Nullable)colorSpace __attribute__((availability(ios, introduced=6.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 6, 0, message: "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Static]
	//	[Export ("imageWithTexture:size:flipped:colorSpace:")]
	//	unsafe CIImage ImageWithTexture (uint name, CGSize size, bool flipped, [NullAllowed] CGColorSpaceRef* colorSpace);

	//	// +(CIImage * _Nonnull)imageWithTexture:(unsigned int)name size:(CGSize)size flipped:(BOOL)flipped options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Static]
	//	[Export ("imageWithTexture:size:flipped:options:")]
	//	CIImage ImageWithTexture (uint name, CGSize size, bool flipped, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIImage * _Nullable)imageWithMTLTexture:(id<MTLTexture> _Nonnull)texture options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("imageWithMTLTexture:options:")]
	//	[return: NullAllowed]
	//	CIImage ImageWithMTLTexture (MTLTexture texture, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIImage * _Nullable)imageWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("imageWithContentsOfURL:")]
	//	[return: NullAllowed]
	//	CIImage ImageWithContentsOfURL (NSUrl url);

	//	// +(CIImage * _Nullable)imageWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDictionary<CIImageOption,id> * _Nullable)options;
	//	[Static]
	//	[Export ("imageWithContentsOfURL:options:")]
	//	[return: NullAllowed]
	//	CIImage ImageWithContentsOfURL (NSUrl url, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIImage * _Nullable)imageWithData:(NSData * _Nonnull)data;
	//	[Static]
	//	[Export ("imageWithData:")]
	//	[return: NullAllowed]
	//	CIImage ImageWithData (NSData data);

	//	// +(CIImage * _Nullable)imageWithData:(NSData * _Nonnull)data options:(NSDictionary<CIImageOption,id> * _Nullable)options;
	//	[Static]
	//	[Export ("imageWithData:options:")]
	//	[return: NullAllowed]
	//	CIImage ImageWithData (NSData data, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIImage * _Nonnull)imageWithCVImageBuffer:(CVImageBufferRef _Nonnull)imageBuffer __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("imageWithCVImageBuffer:")]
	//	unsafe CIImage ImageWithCVImageBuffer (CVImageBufferRef* imageBuffer);

	//	// +(CIImage * _Nonnull)imageWithCVImageBuffer:(CVImageBufferRef _Nonnull)imageBuffer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("imageWithCVImageBuffer:options:")]
	//	unsafe CIImage ImageWithCVImageBuffer (CVImageBufferRef* imageBuffer, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIImage * _Nonnull)imageWithCVPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("imageWithCVPixelBuffer:")]
	//	unsafe CIImage ImageWithCVPixelBuffer (CVPixelBufferRef* pixelBuffer);

	//	// +(CIImage * _Nonnull)imageWithCVPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("imageWithCVPixelBuffer:options:")]
	//	unsafe CIImage ImageWithCVPixelBuffer (CVPixelBufferRef* pixelBuffer, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIImage * _Nonnull)imageWithIOSurface:(IOSurfaceRef _Nonnull)surface __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("imageWithIOSurface:")]
	//	unsafe CIImage ImageWithIOSurface (IOSurfaceRef* surface);

	//	// +(CIImage * _Nonnull)imageWithIOSurface:(IOSurfaceRef _Nonnull)surface options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("imageWithIOSurface:options:")]
	//	unsafe CIImage ImageWithIOSurface (IOSurfaceRef* surface, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIImage * _Nonnull)imageWithColor:(CIColor * _Nonnull)color;
	//	[Static]
	//	[Export ("imageWithColor:")]
	//	CIImage ImageWithColor (CIColor color);

	//	// +(CIImage * _Nonnull)emptyImage;
	//	[Static]
	//	[Export ("emptyImage")]
	//	[Verify (MethodToProperty)]
	//	CIImage EmptyImage { get; }

	//	// -(instancetype _Nonnull)initWithCGImage:(CGImageRef _Nonnull)image;
	//	[Export ("initWithCGImage:")]
	//	unsafe IntPtr Constructor (CGImageRef* image);

	//	// -(instancetype _Nonnull)initWithCGImage:(CGImageRef _Nonnull)image options:(NSDictionary<CIImageOption,id> * _Nullable)options;
	//	[Export ("initWithCGImage:options:")]
	//	unsafe IntPtr Constructor (CGImageRef* image, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nonnull)initWithCGLayer:(CGLayerRef _Nonnull)layer __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Export ("initWithCGLayer:")]
	//	unsafe IntPtr Constructor (CGLayerRef* layer);

	//	// -(instancetype _Nonnull)initWithCGLayer:(CGLayerRef _Nonnull)layer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Export ("initWithCGLayer:options:")]
	//	unsafe IntPtr Constructor (CGLayerRef* layer, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data;
	//	[Export ("initWithData:")]
	//	IntPtr Constructor (NSData data);

	//	// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data options:(NSDictionary<CIImageOption,id> * _Nullable)options;
	//	[Export ("initWithData:options:")]
	//	IntPtr Constructor (NSData data, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nonnull)initWithBitmapData:(NSData * _Nonnull)data bytesPerRow:(size_t)bytesPerRow size:(CGSize)size format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nullable)colorSpace;
	//	[Export ("initWithBitmapData:bytesPerRow:size:format:colorSpace:")]
	//	unsafe IntPtr Constructor (NSData data, nuint bytesPerRow, CGSize size, int format, [NullAllowed] CGColorSpaceRef* colorSpace);

	//	// -(instancetype _Nonnull)initWithTexture:(unsigned int)name size:(CGSize)size flipped:(BOOL)flipped colorSpace:(CGColorSpaceRef _Nullable)colorSpace __attribute__((availability(ios, introduced=6.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 6, 0, message: "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Export ("initWithTexture:size:flipped:colorSpace:")]
	//	unsafe IntPtr Constructor (uint name, CGSize size, bool flipped, [NullAllowed] CGColorSpaceRef* colorSpace);

	//	// -(instancetype _Nonnull)initWithTexture:(unsigned int)name size:(CGSize)size flipped:(BOOL)flipped options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Export ("initWithTexture:size:flipped:options:")]
	//	IntPtr Constructor (uint name, CGSize size, bool flipped, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nullable)initWithMTLTexture:(id<MTLTexture> _Nonnull)texture options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("initWithMTLTexture:options:")]
	//	IntPtr Constructor (MTLTexture texture, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
	//	[Export ("initWithContentsOfURL:")]
	//	IntPtr Constructor (NSUrl url);

	//	// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDictionary<CIImageOption,id> * _Nullable)options;
	//	[Export ("initWithContentsOfURL:options:")]
	//	IntPtr Constructor (NSUrl url, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nonnull)initWithIOSurface:(IOSurfaceRef _Nonnull)surface __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithIOSurface:")]
	//	unsafe IntPtr Constructor (IOSurfaceRef* surface);

	//	// -(instancetype _Nonnull)initWithIOSurface:(IOSurfaceRef _Nonnull)surface options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithIOSurface:options:")]
	//	unsafe IntPtr Constructor (IOSurfaceRef* surface, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nonnull)initWithCVImageBuffer:(CVImageBufferRef _Nonnull)imageBuffer __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("initWithCVImageBuffer:")]
	//	unsafe IntPtr Constructor (CVImageBufferRef* imageBuffer);

	//	// -(instancetype _Nonnull)initWithCVImageBuffer:(CVImageBufferRef _Nonnull)imageBuffer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("initWithCVImageBuffer:options:")]
	//	unsafe IntPtr Constructor (CVImageBufferRef* imageBuffer, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nonnull)initWithCVPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithCVPixelBuffer:")]
	//	unsafe IntPtr Constructor (CVPixelBufferRef* pixelBuffer);

	//	// -(instancetype _Nonnull)initWithCVPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithCVPixelBuffer:options:")]
	//	unsafe IntPtr Constructor (CVPixelBufferRef* pixelBuffer, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nonnull)initWithColor:(CIColor * _Nonnull)color;
	//	[Export ("initWithColor:")]
	//	IntPtr Constructor (CIColor color);

	//	// -(CIImage * _Nonnull)imageByApplyingTransform:(CGAffineTransform)matrix;
	//	[Export ("imageByApplyingTransform:")]
	//	CIImage ImageByApplyingTransform (CGAffineTransform matrix);

	//	// -(CIImage * _Nonnull)imageByApplyingOrientation:(int)orientation __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("imageByApplyingOrientation:")]
	//	CIImage ImageByApplyingOrientation (int orientation);

	//	// -(CGAffineTransform)imageTransformForOrientation:(int)orientation __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("imageTransformForOrientation:")]
	//	CGAffineTransform ImageTransformForOrientation (int orientation);

	//	// -(CIImage * _Nonnull)imageByApplyingCGOrientation:(CGImagePropertyOrientation)orientation __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("imageByApplyingCGOrientation:")]
	//	CIImage ImageByApplyingCGOrientation (CGImagePropertyOrientation orientation);

	//	// -(CGAffineTransform)imageTransformForCGOrientation:(CGImagePropertyOrientation)orientation __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("imageTransformForCGOrientation:")]
	//	CGAffineTransform ImageTransformForCGOrientation (CGImagePropertyOrientation orientation);

	//	// -(CIImage * _Nonnull)imageByCompositingOverImage:(CIImage * _Nonnull)dest __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("imageByCompositingOverImage:")]
	//	CIImage ImageByCompositingOverImage (CIImage dest);

	//	// -(CIImage * _Nonnull)imageByCroppingToRect:(CGRect)rect;
	//	[Export ("imageByCroppingToRect:")]
	//	CIImage ImageByCroppingToRect (CGRect rect);

	//	// -(CIImage * _Nonnull)imageByClampingToExtent __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("imageByClampingToExtent")]
	//	[Verify (MethodToProperty)]
	//	CIImage ImageByClampingToExtent { get; }

	//	// -(CIImage * _Nonnull)imageByClampingToRect:(CGRect)rect __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("imageByClampingToRect:")]
	//	CIImage ImageByClampingToRect (CGRect rect);

	//	// -(CIImage * _Nonnull)imageByApplyingFilter:(NSString * _Nonnull)filterName withInputParameters:(NSDictionary<NSString *,id> * _Nullable)params __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("imageByApplyingFilter:withInputParameters:")]
	//	CIImage ImageByApplyingFilter (string filterName, [NullAllowed] NSDictionary<NSString, NSObject> @params);

	//	// -(CIImage * _Nonnull)imageByApplyingFilter:(NSString * _Nonnull)filterName __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("imageByApplyingFilter:")]
	//	CIImage ImageByApplyingFilter (string filterName);

	//	// -(CIImage * _Nullable)imageByColorMatchingColorSpaceToWorkingSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("imageByColorMatchingColorSpaceToWorkingSpace:")]
	//	[return: NullAllowed]
	//	unsafe CIImage ImageByColorMatchingColorSpaceToWorkingSpace (CGColorSpaceRef* colorSpace);

	//	// -(CIImage * _Nullable)imageByColorMatchingWorkingSpaceToColorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("imageByColorMatchingWorkingSpaceToColorSpace:")]
	//	[return: NullAllowed]
	//	unsafe CIImage ImageByColorMatchingWorkingSpaceToColorSpace (CGColorSpaceRef* colorSpace);

	//	// -(CIImage * _Nonnull)imageByPremultiplyingAlpha __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("imageByPremultiplyingAlpha")]
	//	[Verify (MethodToProperty)]
	//	CIImage ImageByPremultiplyingAlpha { get; }

	//	// -(CIImage * _Nonnull)imageByUnpremultiplyingAlpha __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("imageByUnpremultiplyingAlpha")]
	//	[Verify (MethodToProperty)]
	//	CIImage ImageByUnpremultiplyingAlpha { get; }

	//	// -(CIImage * _Nonnull)imageBySettingAlphaOneInExtent:(CGRect)extent __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("imageBySettingAlphaOneInExtent:")]
	//	CIImage ImageBySettingAlphaOneInExtent (CGRect extent);

	//	// -(CIImage * _Nonnull)imageByApplyingGaussianBlurWithSigma:(double)sigma __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("imageByApplyingGaussianBlurWithSigma:")]
	//	CIImage ImageByApplyingGaussianBlurWithSigma (double sigma);

	//	// -(CIImage * _Nonnull)imageBySettingProperties:(NSDictionary * _Nonnull)properties __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("imageBySettingProperties:")]
	//	CIImage ImageBySettingProperties (NSDictionary properties);

	//	// -(CIImage * _Nonnull)imageBySamplingLinear __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("imageBySamplingLinear")]
	//	[Verify (MethodToProperty)]
	//	CIImage ImageBySamplingLinear { get; }

	//	// -(CIImage * _Nonnull)imageBySamplingNearest __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("imageBySamplingNearest")]
	//	[Verify (MethodToProperty)]
	//	CIImage ImageBySamplingNearest { get; }

	//	// -(CIImage * _Nonnull)imageByInsertingIntermediate __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12, 0)]
	//	[Export ("imageByInsertingIntermediate")]
	//	[Verify (MethodToProperty)]
	//	CIImage ImageByInsertingIntermediate { get; }

	//	// -(CIImage * _Nonnull)imageByInsertingIntermediate:(BOOL)cache __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12,0)]
	//	[Export ("imageByInsertingIntermediate:")]
	//	CIImage ImageByInsertingIntermediate (bool cache);

	//	// @property (readonly, nonatomic) CGRect extent;
	//	[Export ("extent")]
	//	CGRect Extent { get; }

	//	// @property (readonly, atomic) NSDictionary<NSString *,id> * _Nonnull properties __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("properties")]
	//	NSDictionary<NSString, NSObject> Properties { get; }

	//	// @property (readonly, atomic) CIFilterShape * _Nonnull definition __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Export ("definition")]
	//	CIFilterShape Definition { get; }

	//	// @property (readonly, atomic) NSURL * _Nullable url __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("url")]
	//	NSUrl Url { get; }

	//	// @property (readonly, atomic) CGColorSpaceRef _Nullable colorSpace __attribute__((cf_returns_not_retained)) __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("colorSpace")]
	//	unsafe CGColorSpaceRef* ColorSpace { get; }

	//	// @property (readonly, nonatomic) CVPixelBufferRef _Nullable pixelBuffer __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("pixelBuffer")]
	//	unsafe CVPixelBufferRef* PixelBuffer { get; }

	//	// @property (readonly, nonatomic) CGImageRef _Nullable CGImage __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("CGImage")]
	//	unsafe CGImageRef* CGImage { get; }

	//	// -(CGRect)regionOfInterestForImage:(CIImage * _Nonnull)image inRect:(CGRect)rect __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("regionOfInterestForImage:inRect:")]
	//	CGRect RegionOfInterestForImage (CIImage image, CGRect rect);
	//}

	//// @interface AutoAdjustment (CIImage)
	//[Category]
	//[BaseType (typeof(CIImage))]
	//interface CIImage_AutoAdjustment
	//{
	//	// -(NSArray<CIFilter *> * _Nonnull)autoAdjustmentFilters __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("autoAdjustmentFilters")]
	//	[Verify (MethodToProperty)]
	//	CIFilter[] AutoAdjustmentFilters { get; }

	//	// -(NSArray<CIFilter *> * _Nonnull)autoAdjustmentFiltersWithOptions:(NSDictionary<CIImageAutoAdjustmentOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("autoAdjustmentFiltersWithOptions:")]
	//	CIFilter[] AutoAdjustmentFiltersWithOptions ([NullAllowed] NSDictionary<NSString, NSObject> options);
	//}

	//// @interface AVDepthData (CIImage)
	//[Category]
	//[BaseType (typeof(CIImage))]
	//interface CIImage_AVDepthData
	//{
	//	// @property (readonly, nonatomic) AVDepthData * _Nullable depthData __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[NullAllowed, Export ("depthData")]
	//	AVDepthData DepthData { get; }

	//	// -(instancetype _Nullable)initWithDepthData:(AVDepthData * _Nonnull)data options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("initWithDepthData:options:")]
	//	IntPtr Constructor (AVDepthData data, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nullable)initWithDepthData:(AVDepthData * _Nonnull)data __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("initWithDepthData:")]
	//	IntPtr Constructor (AVDepthData data);

	//	// +(instancetype _Nullable)imageWithDepthData:(AVDepthData * _Nonnull)data options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Static]
	//	[Export ("imageWithDepthData:options:")]
	//	[return: NullAllowed]
	//	CIImage ImageWithDepthData (AVDepthData data, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(instancetype _Nullable)imageWithDepthData:(AVDepthData * _Nonnull)data __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Static]
	//	[Export ("imageWithDepthData:")]
	//	[return: NullAllowed]
	//	CIImage ImageWithDepthData (AVDepthData data);
	//}

	//// @interface AVPortraitEffectsMatte (CIImage)
	//[Category]
	//[BaseType (typeof(CIImage))]
	//interface CIImage_AVPortraitEffectsMatte
	//{
	//	// @property (readonly, nonatomic) AVPortraitEffectsMatte * _Nullable portraitEffectsMatte __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12, 0)]
	//	[NullAllowed, Export ("portraitEffectsMatte")]
	//	AVPortraitEffectsMatte PortraitEffectsMatte { get; }

	//	// -(instancetype _Nullable)initWithPortaitEffectsMatte:(AVPortraitEffectsMatte * _Nonnull)matte options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12,0)]
	//	[Export ("initWithPortaitEffectsMatte:options:")]
	//	IntPtr Constructor (AVPortraitEffectsMatte matte, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nullable)initWithPortaitEffectsMatte:(AVPortraitEffectsMatte * _Nonnull)matte __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("initWithPortaitEffectsMatte:")]
	//	IntPtr Constructor (AVPortraitEffectsMatte matte);

	//	// +(instancetype _Nullable)imageWithPortaitEffectsMatte:(AVPortraitEffectsMatte * _Nonnull)matte options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12,0)]
	//	[Static]
	//	[Export ("imageWithPortaitEffectsMatte:options:")]
	//	[return: NullAllowed]
	//	CIImage ImageWithPortaitEffectsMatte (AVPortraitEffectsMatte matte, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(instancetype _Nullable)imageWithPortaitEffectsMatte:(AVPortraitEffectsMatte * _Nonnull)matte __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12,0)]
	//	[Static]
	//	[Export ("imageWithPortaitEffectsMatte:")]
	//	[return: NullAllowed]
	//	CIImage ImageWithPortaitEffectsMatte (AVPortraitEffectsMatte matte);
	//}

	//// @interface CIContext : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIContext
	//{
	//	// +(CIContext * _Nonnull)contextWithCGContext:(CGContextRef _Nonnull)cgctx options:(NSDictionary<CIContextOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("contextWithCGContext:options:")]
	//	unsafe CIContext ContextWithCGContext (CGContextRef* cgctx, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIContext * _Nonnull)contextWithOptions:(NSDictionary<CIContextOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("contextWithOptions:")]
	//	CIContext ContextWithOptions ([NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIContext * _Nonnull)context __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Static]
	//	[Export ("context")]
	//	[Verify (MethodToProperty)]
	//	CIContext Context { get; }

	//	// -(instancetype _Nonnull)initWithOptions:(NSDictionary<CIContextOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithOptions:")]
	//	IntPtr Constructor ([NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIContext * _Nonnull)contextWithEAGLContext:(EAGLContext * _Nonnull)eaglContext __attribute__((availability(ios, introduced=5.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Core Image OpenGLES API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Core Image OpenGLES API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Static]
	//	[Export ("contextWithEAGLContext:")]
	//	CIContext ContextWithEAGLContext (EAGLContext eaglContext);

	//	// +(CIContext * _Nonnull)contextWithEAGLContext:(EAGLContext * _Nonnull)eaglContext options:(NSDictionary<CIContextOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Core Image OpenGLES API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Core Image OpenGLES API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Static]
	//	[Export ("contextWithEAGLContext:options:")]
	//	CIContext ContextWithEAGLContext (EAGLContext eaglContext, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// +(CIContext * _Nonnull)contextWithMTLDevice:(id<MTLDevice> _Nonnull)device __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("contextWithMTLDevice:")]
	//	CIContext ContextWithMTLDevice (MTLDevice device);

	//	// +(CIContext * _Nonnull)contextWithMTLDevice:(id<MTLDevice> _Nonnull)device options:(NSDictionary<CIContextOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("contextWithMTLDevice:options:")]
	//	CIContext ContextWithMTLDevice (MTLDevice device, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// @property (readonly, nonatomic) CGColorSpaceRef _Nullable workingColorSpace __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("workingColorSpace")]
	//	unsafe CGColorSpaceRef* WorkingColorSpace { get; }

	//	// @property (readonly, nonatomic) CIFormat workingFormat __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("workingFormat")]
	//	int WorkingFormat { get; }

	//	// -(void)drawImage:(CIImage * _Nonnull)image atPoint:(CGPoint)atPoint fromRect:(CGRect)fromRect __attribute__((availability(ios, introduced=5.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 5, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[Export ("drawImage:atPoint:fromRect:")]
	//	void DrawImage (CIImage image, CGPoint atPoint, CGRect fromRect);

	//	// -(void)drawImage:(CIImage * _Nonnull)image inRect:(CGRect)inRect fromRect:(CGRect)fromRect;
	//	[Export ("drawImage:inRect:fromRect:")]
	//	void DrawImage (CIImage image, CGRect inRect, CGRect fromRect);

	//	// -(CGImageRef _Nullable)createCGImage:(CIImage * _Nonnull)image fromRect:(CGRect)fromRect __attribute__((cf_returns_retained));
	//	[Export ("createCGImage:fromRect:")]
	//	[return: NullAllowed]
	//	unsafe CGImageRef* CreateCGImage (CIImage image, CGRect fromRect);

	//	// -(CGImageRef _Nullable)createCGImage:(CIImage * _Nonnull)image fromRect:(CGRect)fromRect format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nullable)colorSpace __attribute__((cf_returns_retained));
	//	[Export ("createCGImage:fromRect:format:colorSpace:")]
	//	[return: NullAllowed]
	//	unsafe CGImageRef* CreateCGImage (CIImage image, CGRect fromRect, int format, [NullAllowed] CGColorSpaceRef* colorSpace);

	//	// -(CGImageRef _Nullable)createCGImage:(CIImage * _Nonnull)image fromRect:(CGRect)fromRect format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nullable)colorSpace deferred:(BOOL)deferred __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_returns_retained));
	//	[iOS (10,0)]
	//	[Export ("createCGImage:fromRect:format:colorSpace:deferred:")]
	//	[return: NullAllowed]
	//	unsafe CGImageRef* CreateCGImage (CIImage image, CGRect fromRect, int format, [NullAllowed] CGColorSpaceRef* colorSpace, bool deferred);

	//	// -(CGLayerRef _Nullable)createCGLayerWithSize:(CGSize)size info:(CFDictionaryRef _Nullable)info __attribute__((availability(ios, unavailable))) __attribute__((cf_returns_retained));
	//	[NoiOS]
	//	[Export ("createCGLayerWithSize:info:")]
	//	[return: NullAllowed]
	//	unsafe CGLayerRef* CreateCGLayerWithSize (CGSize size, [NullAllowed] CFDictionaryRef* info);

	//	// -(void)render:(CIImage * _Nonnull)image toBitmap:(void * _Nonnull)data rowBytes:(ptrdiff_t)rowBytes bounds:(CGRect)bounds format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nullable)colorSpace;
	//	[Export ("render:toBitmap:rowBytes:bounds:format:colorSpace:")]
	//	unsafe void Render (CIImage image, void* data, IntPtr rowBytes, CGRect bounds, int format, [NullAllowed] CGColorSpaceRef* colorSpace);

	//	// -(void)render:(CIImage * _Nonnull)image toIOSurface:(IOSurfaceRef _Nonnull)surface bounds:(CGRect)bounds colorSpace:(CGColorSpaceRef _Nullable)colorSpace __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("render:toIOSurface:bounds:colorSpace:")]
	//	unsafe void Render (CIImage image, IOSurfaceRef* surface, CGRect bounds, [NullAllowed] CGColorSpaceRef* colorSpace);

	//	// -(void)render:(CIImage * _Nonnull)image toCVPixelBuffer:(CVPixelBufferRef _Nonnull)buffer __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("render:toCVPixelBuffer:")]
	//	unsafe void Render (CIImage image, CVPixelBufferRef* buffer);

	//	// -(void)render:(CIImage * _Nonnull)image toCVPixelBuffer:(CVPixelBufferRef _Nonnull)buffer bounds:(CGRect)bounds colorSpace:(CGColorSpaceRef _Nullable)colorSpace __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("render:toCVPixelBuffer:bounds:colorSpace:")]
	//	unsafe void Render (CIImage image, CVPixelBufferRef* buffer, CGRect bounds, [NullAllowed] CGColorSpaceRef* colorSpace);

	//	// -(void)render:(CIImage * _Nonnull)image toMTLTexture:(id<MTLTexture> _Nonnull)texture commandBuffer:(id<MTLCommandBuffer> _Nullable)commandBuffer bounds:(CGRect)bounds colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("render:toMTLTexture:commandBuffer:bounds:colorSpace:")]
	//	unsafe void Render (CIImage image, MTLTexture texture, [NullAllowed] MTLCommandBuffer commandBuffer, CGRect bounds, CGColorSpaceRef* colorSpace);

	//	// -(void)reclaimResources __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Export ("reclaimResources")]
	//	void ReclaimResources ();

	//	// -(void)clearCaches __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("clearCaches")]
	//	void ClearCaches ();

	//	// -(CGSize)inputImageMaximumSize __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("inputImageMaximumSize")]
	//	[Verify (MethodToProperty)]
	//	CGSize InputImageMaximumSize { get; }

	//	// -(CGSize)outputImageMaximumSize __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("outputImageMaximumSize")]
	//	[Verify (MethodToProperty)]
	//	CGSize OutputImageMaximumSize { get; }
	//}

	//// @interface OfflineGPUSupport (CIContext)
	//[Category]
	//[BaseType (typeof(CIContext))]
	//interface CIContext_OfflineGPUSupport
	//{
	//	// +(unsigned int)offlineGPUCount __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Static]
	//	[Export ("offlineGPUCount")]
	//	[Verify (MethodToProperty)]
	//	uint OfflineGPUCount { get; }
	//}

	//// @interface ImageRepresentation (CIContext)
	//[Category]
	//[BaseType (typeof(CIContext))]
	//interface CIContext_ImageRepresentation
	//{
	//	// -(NSData * _Nullable)TIFFRepresentationOfImage:(CIImage * _Nonnull)image format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("TIFFRepresentationOfImage:format:colorSpace:options:")]
	//	[return: NullAllowed]
	//	unsafe NSData TIFFRepresentationOfImage (CIImage image, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options);

	//	// -(NSData * _Nullable)JPEGRepresentationOfImage:(CIImage * _Nonnull)image colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("JPEGRepresentationOfImage:colorSpace:options:")]
	//	[return: NullAllowed]
	//	unsafe NSData JPEGRepresentationOfImage (CIImage image, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options);

	//	// -(NSData * _Nullable)HEIFRepresentationOfImage:(CIImage * _Nonnull)image format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("HEIFRepresentationOfImage:format:colorSpace:options:")]
	//	[return: NullAllowed]
	//	unsafe NSData HEIFRepresentationOfImage (CIImage image, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options);

	//	// -(NSData * _Nullable)PNGRepresentationOfImage:(CIImage * _Nonnull)image format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("PNGRepresentationOfImage:format:colorSpace:options:")]
	//	[return: NullAllowed]
	//	unsafe NSData PNGRepresentationOfImage (CIImage image, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options);

	//	// -(BOOL)writeTIFFRepresentationOfImage:(CIImage * _Nonnull)image toURL:(NSURL * _Nonnull)url format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options error:(NSError * _Nullable * _Nullable)errorPtr __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("writeTIFFRepresentationOfImage:toURL:format:colorSpace:options:error:")]
	//	unsafe bool WriteTIFFRepresentationOfImage (CIImage image, NSUrl url, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError errorPtr);

	//	// -(BOOL)writePNGRepresentationOfImage:(CIImage * _Nonnull)image toURL:(NSURL * _Nonnull)url format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options error:(NSError * _Nullable * _Nullable)errorPtr __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("writePNGRepresentationOfImage:toURL:format:colorSpace:options:error:")]
	//	unsafe bool WritePNGRepresentationOfImage (CIImage image, NSUrl url, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError errorPtr);

	//	// -(BOOL)writeJPEGRepresentationOfImage:(CIImage * _Nonnull)image toURL:(NSURL * _Nonnull)url colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options error:(NSError * _Nullable * _Nullable)errorPtr __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("writeJPEGRepresentationOfImage:toURL:colorSpace:options:error:")]
	//	unsafe bool WriteJPEGRepresentationOfImage (CIImage image, NSUrl url, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError errorPtr);

	//	// -(BOOL)writeHEIFRepresentationOfImage:(CIImage * _Nonnull)image toURL:(NSURL * _Nonnull)url format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options error:(NSError * _Nullable * _Nullable)errorPtr __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("writeHEIFRepresentationOfImage:toURL:format:colorSpace:options:error:")]
	//	unsafe bool WriteHEIFRepresentationOfImage (CIImage image, NSUrl url, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError errorPtr);
	//}

	//// @interface CIDepthBlurEffect (CIContext)
	//[Category]
	//[BaseType (typeof(CIContext))]
	//interface CIContext_CIDepthBlurEffect
	//{
	//	// -(CIFilter * _Nullable)depthBlurEffectFilterForImageURL:(NSURL * _Nonnull)url options:(NSDictionary * _Nullable)options __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12,0)]
	//	[Export ("depthBlurEffectFilterForImageURL:options:")]
	//	[return: NullAllowed]
	//	CIFilter DepthBlurEffectFilterForImageURL (NSUrl url, [NullAllowed] NSDictionary options);

	//	// -(CIFilter * _Nullable)depthBlurEffectFilterForImageData:(NSData * _Nonnull)data options:(NSDictionary * _Nullable)options __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12,0)]
	//	[Export ("depthBlurEffectFilterForImageData:options:")]
	//	[return: NullAllowed]
	//	CIFilter DepthBlurEffectFilterForImageData (NSData data, [NullAllowed] NSDictionary options);

	//	// -(CIFilter * _Nullable)depthBlurEffectFilterForImage:(CIImage * _Nonnull)image disparityImage:(CIImage * _Nonnull)disparityImage portraitEffectsMatte:(CIImage * _Nullable)portraitEffectsMatte orientation:(CGImagePropertyOrientation)orientation options:(NSDictionary * _Nullable)options __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12,0)]
	//	[Export ("depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:orientation:options:")]
	//	[return: NullAllowed]
	//	CIFilter DepthBlurEffectFilterForImage (CIImage image, CIImage disparityImage, [NullAllowed] CIImage portraitEffectsMatte, CGImagePropertyOrientation orientation, [NullAllowed] NSDictionary options);
	//}

	//// @protocol CIFilterConstructor
	//[Protocol, Model]
	//interface CIFilterConstructor
	//{
	//	// @required -(CIFilter * _Nullable)filterWithName:(NSString * _Nonnull)name;
	//	[Abstract]
	//	[Export ("filterWithName:")]
	//	[return: NullAllowed]
	//	CIFilter FilterWithName (string name);
	//}

	//// @interface CIFilter : NSObject <NSSecureCoding, NSCopying>
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIFilter : INSSecureCoding, INSCopying
	//{
	//	// @property (readonly, nonatomic) CIImage * _Nullable outputImage __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("outputImage")]
	//	CIImage OutputImage { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }

	//	// @property (getter = isEnabled) BOOL enabled __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull inputKeys;
	//	[Export ("inputKeys")]
	//	string[] InputKeys { get; }

	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull outputKeys;
	//	[Export ("outputKeys")]
	//	string[] OutputKeys { get; }

	//	// -(void)setDefaults;
	//	[Export ("setDefaults")]
	//	void SetDefaults ();

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nonnull attributes;
	//	[Export ("attributes")]
	//	NSDictionary<NSString, NSObject> Attributes { get; }

	//	// -(CIImage * _Nullable)apply:(CIKernel * _Nonnull)k arguments:(NSArray * _Nullable)args options:(NSDictionary<NSString *,id> * _Nullable)dict __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Export ("apply:arguments:options:")]
	//	[Verify (StronglyTypedNSArray)]
	//	[return: NullAllowed]
	//	CIImage Apply (CIKernel k, [NullAllowed] NSObject[] args, [NullAllowed] NSDictionary<NSString, NSObject> dict);

	//	// -(CIImage * _Nullable)apply:(CIKernel * _Nonnull)k, ... __attribute__((availability(ios, unavailable))) __attribute__((sentinel(0, 1)));
	//	[NoiOS]
	//	[Internal]
	//	[Export ("apply:", IsVariadic = true)]
	//	[return: NullAllowed]
	//	CIImage Apply (CIKernel k, IntPtr varArgs);
	//}

	//// @interface CIFilterRegistry (CIFilter)
	//[Category]
	//[BaseType (typeof(CIFilter))]
	//interface CIFilter_CIFilterRegistry
	//{
	//	// +(CIFilter * _Nullable)filterWithName:(NSString * _Nonnull)name;
	//	[Static]
	//	[Export ("filterWithName:")]
	//	[return: NullAllowed]
	//	CIFilter FilterWithName (string name);

	//	// +(CIFilter * _Nullable)filterWithName:(NSString * _Nonnull)name keysAndValues:(id)key0, ... __attribute__((sentinel(0, 1)));
	//	[Static, Internal]
	//	[Export ("filterWithName:keysAndValues:", IsVariadic = true)]
	//	[return: NullAllowed]
	//	CIFilter FilterWithName (string name, NSObject key0, IntPtr varArgs);

	//	// +(CIFilter * _Nullable)filterWithName:(NSString * _Nonnull)name withInputParameters:(NSDictionary<NSString *,id> * _Nullable)params __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static]
	//	[Export ("filterWithName:withInputParameters:")]
	//	[return: NullAllowed]
	//	CIFilter FilterWithName (string name, [NullAllowed] NSDictionary<NSString, NSObject> @params);

	//	// +(NSArray<NSString *> * _Nonnull)filterNamesInCategory:(NSString * _Nullable)category;
	//	[Static]
	//	[Export ("filterNamesInCategory:")]
	//	string[] FilterNamesInCategory ([NullAllowed] string category);

	//	// +(NSArray<NSString *> * _Nonnull)filterNamesInCategories:(NSArray<NSString *> * _Nullable)categories;
	//	[Static]
	//	[Export ("filterNamesInCategories:")]
	//	string[] FilterNamesInCategories ([NullAllowed] string[] categories);

	//	// +(void)registerFilterName:(NSString * _Nonnull)name constructor:(id<CIFilterConstructor> _Nonnull)anObject classAttributes:(NSDictionary<NSString *,id> * _Nonnull)attributes __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("registerFilterName:constructor:classAttributes:")]
	//	void RegisterFilterName (string name, CIFilterConstructor anObject, NSDictionary<NSString, NSObject> attributes);

	//	// +(NSString * _Nullable)localizedNameForFilterName:(NSString * _Nonnull)filterName __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("localizedNameForFilterName:")]
	//	[return: NullAllowed]
	//	string LocalizedNameForFilterName (string filterName);

	//	// +(NSString * _Nonnull)localizedNameForCategory:(NSString * _Nonnull)category __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("localizedNameForCategory:")]
	//	string LocalizedNameForCategory (string category);

	//	// +(NSString * _Nullable)localizedDescriptionForFilterName:(NSString * _Nonnull)filterName __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("localizedDescriptionForFilterName:")]
	//	[return: NullAllowed]
	//	string LocalizedDescriptionForFilterName (string filterName);

	//	// +(NSURL * _Nullable)localizedReferenceDocumentationForFilterName:(NSString * _Nonnull)filterName __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("localizedReferenceDocumentationForFilterName:")]
	//	[return: NullAllowed]
	//	NSUrl LocalizedReferenceDocumentationForFilterName (string filterName);
	//}

	//// @interface CIFilterXMPSerialization (CIFilter)
	//[Category]
	//[BaseType (typeof(CIFilter))]
	//interface CIFilter_CIFilterXMPSerialization
	//{
	//	// +(NSData * _Nullable)serializedXMPFromFilters:(NSArray<CIFilter *> * _Nonnull)filters inputImageExtent:(CGRect)extent __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("serializedXMPFromFilters:inputImageExtent:")]
	//	[return: NullAllowed]
	//	NSData SerializedXMPFromFilters (CIFilter[] filters, CGRect extent);

	//	// +(NSArray<CIFilter *> * _Nonnull)filterArrayFromSerializedXMP:(NSData * _Nonnull)xmpData inputImageExtent:(CGRect)extent error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("filterArrayFromSerializedXMP:inputImageExtent:error:")]
	//	CIFilter[] FilterArrayFromSerializedXMP (NSData xmpData, CGRect extent, [NullAllowed] out NSError outError);
	//}

	//// typedef CGRect (^CIKernelROICallback)(int, CGRect);
	//delegate CGRect CIKernelROICallback (int arg0, CGRect arg1);

	//// @interface CIKernel : NSObject
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIKernel
	//{
	//	// +(NSArray<CIKernel *> * _Nullable)kernelsWithString:(NSString * _Nonnull)string __attribute__((availability(ios, introduced=8.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Static]
	//	[Export ("kernelsWithString:")]
	//	[return: NullAllowed]
	//	CIKernel[] KernelsWithString (string @string);

	//	// +(instancetype _Nullable)kernelWithString:(NSString * _Nonnull)string __attribute__((availability(ios, introduced=8.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Static]
	//	[Export ("kernelWithString:")]
	//	[return: NullAllowed]
	//	CIKernel KernelWithString (string @string);

	//	// +(instancetype _Nullable)kernelWithFunctionName:(NSString * _Nonnull)name fromMetalLibraryData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Static]
	//	[Export ("kernelWithFunctionName:fromMetalLibraryData:error:")]
	//	[return: NullAllowed]
	//	CIKernel KernelWithFunctionName (string name, NSData data, [NullAllowed] out NSError error);

	//	// +(instancetype _Nullable)kernelWithFunctionName:(NSString * _Nonnull)name fromMetalLibraryData:(NSData * _Nonnull)data outputPixelFormat:(CIFormat)format error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Static]
	//	[Export ("kernelWithFunctionName:fromMetalLibraryData:outputPixelFormat:error:")]
	//	[return: NullAllowed]
	//	CIKernel KernelWithFunctionName (string name, NSData data, int format, [NullAllowed] out NSError error);

	//	// @property (readonly, atomic) NSString * _Nonnull name __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("name")]
	//	string Name { get; }

	//	// -(void)setROISelector:(SEL _Nonnull)method __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("setROISelector:")]
	//	void SetROISelector (Selector method);

	//	// -(CIImage * _Nullable)applyWithExtent:(CGRect)extent roiCallback:(CIKernelROICallback _Nonnull)callback arguments:(NSArray<id> * _Nullable)args __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("applyWithExtent:roiCallback:arguments:")]
	//	[return: NullAllowed]
	//	CIImage ApplyWithExtent (CGRect extent, CIKernelROICallback callback, [NullAllowed] NSObject[] args);
	//}

	//// @interface CIColorKernel : CIKernel
	//[iOS (8,0)]
	//[BaseType (typeof(CIKernel))]
	//interface CIColorKernel
	//{
	//	// +(instancetype _Nullable)kernelWithString:(NSString * _Nonnull)string __attribute__((availability(ios, introduced=8.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Static]
	//	[Export ("kernelWithString:")]
	//	[return: NullAllowed]
	//	CIColorKernel KernelWithString (string @string);

	//	// -(CIImage * _Nullable)applyWithExtent:(CGRect)extent arguments:(NSArray<id> * _Nullable)args;
	//	[Export ("applyWithExtent:arguments:")]
	//	[return: NullAllowed]
	//	CIImage ApplyWithExtent (CGRect extent, [NullAllowed] NSObject[] args);
	//}

	//// @interface CIWarpKernel : CIKernel
	//[iOS (8,0)]
	//[BaseType (typeof(CIKernel))]
	//interface CIWarpKernel
	//{
	//	// +(instancetype _Nullable)kernelWithString:(NSString * _Nonnull)string __attribute__((availability(ios, introduced=8.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Static]
	//	[Export ("kernelWithString:")]
	//	[return: NullAllowed]
	//	CIWarpKernel KernelWithString (string @string);

	//	// -(CIImage * _Nullable)applyWithExtent:(CGRect)extent roiCallback:(CIKernelROICallback _Nonnull)callback inputImage:(CIImage * _Nonnull)image arguments:(NSArray<id> * _Nullable)args;
	//	[Export ("applyWithExtent:roiCallback:inputImage:arguments:")]
	//	[return: NullAllowed]
	//	CIImage ApplyWithExtent (CGRect extent, CIKernelROICallback callback, CIImage image, [NullAllowed] NSObject[] args);
	//}

	//// @interface CIBlendKernel : CIColorKernel
	//[iOS (11,0)]
	//[BaseType (typeof(CIColorKernel))]
	//interface CIBlendKernel
	//{
	//	// +(instancetype _Nullable)kernelWithString:(NSString * _Nonnull)string __attribute__((availability(ios, introduced=8.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
	//	[Static]
	//	[Export ("kernelWithString:")]
	//	[return: NullAllowed]
	//	CIBlendKernel KernelWithString (string @string);

	//	// -(CIImage * _Nullable)applyWithForeground:(CIImage * _Nonnull)foreground background:(CIImage * _Nonnull)background;
	//	[Export ("applyWithForeground:background:")]
	//	[return: NullAllowed]
	//	CIImage ApplyWithForeground (CIImage foreground, CIImage background);
	//}

	//// @interface BuiltIn (CIBlendKernel)
	//[Category]
	//[BaseType (typeof(CIBlendKernel))]
	//interface CIBlendKernel_BuiltIn
	//{
	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull componentAdd;
	//	[Static]
	//	[Export ("componentAdd", ArgumentSemantic.Strong)]
	//	CIBlendKernel ComponentAdd { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull componentMultiply;
	//	[Static]
	//	[Export ("componentMultiply", ArgumentSemantic.Strong)]
	//	CIBlendKernel ComponentMultiply { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull componentMin;
	//	[Static]
	//	[Export ("componentMin", ArgumentSemantic.Strong)]
	//	CIBlendKernel ComponentMin { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull componentMax;
	//	[Static]
	//	[Export ("componentMax", ArgumentSemantic.Strong)]
	//	CIBlendKernel ComponentMax { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull clear;
	//	[Static]
	//	[Export ("clear", ArgumentSemantic.Strong)]
	//	CIBlendKernel Clear { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull source;
	//	[Static]
	//	[Export ("source", ArgumentSemantic.Strong)]
	//	CIBlendKernel Source { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull destination;
	//	[Static]
	//	[Export ("destination", ArgumentSemantic.Strong)]
	//	CIBlendKernel Destination { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull sourceOver;
	//	[Static]
	//	[Export ("sourceOver", ArgumentSemantic.Strong)]
	//	CIBlendKernel SourceOver { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull destinationOver;
	//	[Static]
	//	[Export ("destinationOver", ArgumentSemantic.Strong)]
	//	CIBlendKernel DestinationOver { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull sourceIn;
	//	[Static]
	//	[Export ("sourceIn", ArgumentSemantic.Strong)]
	//	CIBlendKernel SourceIn { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull destinationIn;
	//	[Static]
	//	[Export ("destinationIn", ArgumentSemantic.Strong)]
	//	CIBlendKernel DestinationIn { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull sourceOut;
	//	[Static]
	//	[Export ("sourceOut", ArgumentSemantic.Strong)]
	//	CIBlendKernel SourceOut { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull destinationOut;
	//	[Static]
	//	[Export ("destinationOut", ArgumentSemantic.Strong)]
	//	CIBlendKernel DestinationOut { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull sourceAtop;
	//	[Static]
	//	[Export ("sourceAtop", ArgumentSemantic.Strong)]
	//	CIBlendKernel SourceAtop { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull destinationAtop;
	//	[Static]
	//	[Export ("destinationAtop", ArgumentSemantic.Strong)]
	//	CIBlendKernel DestinationAtop { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull exclusiveOr;
	//	[Static]
	//	[Export ("exclusiveOr", ArgumentSemantic.Strong)]
	//	CIBlendKernel ExclusiveOr { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull multiply;
	//	[Static]
	//	[Export ("multiply", ArgumentSemantic.Strong)]
	//	CIBlendKernel Multiply { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull screen;
	//	[Static]
	//	[Export ("screen", ArgumentSemantic.Strong)]
	//	CIBlendKernel Screen { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull overlay;
	//	[Static]
	//	[Export ("overlay", ArgumentSemantic.Strong)]
	//	CIBlendKernel Overlay { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull darken;
	//	[Static]
	//	[Export ("darken", ArgumentSemantic.Strong)]
	//	CIBlendKernel Darken { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull lighten;
	//	[Static]
	//	[Export ("lighten", ArgumentSemantic.Strong)]
	//	CIBlendKernel Lighten { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull colorDodge;
	//	[Static]
	//	[Export ("colorDodge", ArgumentSemantic.Strong)]
	//	CIBlendKernel ColorDodge { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull colorBurn;
	//	[Static]
	//	[Export ("colorBurn", ArgumentSemantic.Strong)]
	//	CIBlendKernel ColorBurn { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull hardLight;
	//	[Static]
	//	[Export ("hardLight", ArgumentSemantic.Strong)]
	//	CIBlendKernel HardLight { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull softLight;
	//	[Static]
	//	[Export ("softLight", ArgumentSemantic.Strong)]
	//	CIBlendKernel SoftLight { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull difference;
	//	[Static]
	//	[Export ("difference", ArgumentSemantic.Strong)]
	//	CIBlendKernel Difference { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull exclusion;
	//	[Static]
	//	[Export ("exclusion", ArgumentSemantic.Strong)]
	//	CIBlendKernel Exclusion { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull hue;
	//	[Static]
	//	[Export ("hue", ArgumentSemantic.Strong)]
	//	CIBlendKernel Hue { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull saturation;
	//	[Static]
	//	[Export ("saturation", ArgumentSemantic.Strong)]
	//	CIBlendKernel Saturation { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull color;
	//	[Static]
	//	[Export ("color", ArgumentSemantic.Strong)]
	//	CIBlendKernel Color { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull luminosity;
	//	[Static]
	//	[Export ("luminosity", ArgumentSemantic.Strong)]
	//	CIBlendKernel Luminosity { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull subtract;
	//	[Static]
	//	[Export ("subtract", ArgumentSemantic.Strong)]
	//	CIBlendKernel Subtract { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull divide;
	//	[Static]
	//	[Export ("divide", ArgumentSemantic.Strong)]
	//	CIBlendKernel Divide { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull linearBurn;
	//	[Static]
	//	[Export ("linearBurn", ArgumentSemantic.Strong)]
	//	CIBlendKernel LinearBurn { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull linearDodge;
	//	[Static]
	//	[Export ("linearDodge", ArgumentSemantic.Strong)]
	//	CIBlendKernel LinearDodge { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull vividLight;
	//	[Static]
	//	[Export ("vividLight", ArgumentSemantic.Strong)]
	//	CIBlendKernel VividLight { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull linearLight;
	//	[Static]
	//	[Export ("linearLight", ArgumentSemantic.Strong)]
	//	CIBlendKernel LinearLight { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull pinLight;
	//	[Static]
	//	[Export ("pinLight", ArgumentSemantic.Strong)]
	//	CIBlendKernel PinLight { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull hardMix;
	//	[Static]
	//	[Export ("hardMix", ArgumentSemantic.Strong)]
	//	CIBlendKernel HardMix { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull darkerColor;
	//	[Static]
	//	[Export ("darkerColor", ArgumentSemantic.Strong)]
	//	CIBlendKernel DarkerColor { get; }

	//	// @property (readonly, strong, class) CIBlendKernel * _Nonnull lighterColor;
	//	[Static]
	//	[Export ("lighterColor", ArgumentSemantic.Strong)]
	//	CIBlendKernel LighterColor { get; }
	//}

	//// @interface CIDetector : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIDetector
	//{
	//	// +(CIDetector * _Nullable)detectorOfType:(NSString * _Nonnull)type context:(CIContext * _Nullable)context options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("detectorOfType:context:options:")]
	//	[return: NullAllowed]
	//	CIDetector DetectorOfType (string type, [NullAllowed] CIContext context, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(NSArray<CIFeature *> * _Nonnull)featuresInImage:(CIImage * _Nonnull)image __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("featuresInImage:")]
	//	CIFeature[] FeaturesInImage (CIImage image);

	//	// -(NSArray<CIFeature *> * _Nonnull)featuresInImage:(CIImage * _Nonnull)image options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("featuresInImage:options:")]
	//	CIFeature[] FeaturesInImage (CIImage image, [NullAllowed] NSDictionary<NSString, NSObject> options);
	//}

	//// @interface CIFeature : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIFeature
	//{
	//	// @property (readonly, retain) NSString * _Nonnull type;
	//	[Export ("type", ArgumentSemantic.Retain)]
	//	string Type { get; }

	//	// @property (readonly, assign) CGRect bounds;
	//	[Export ("bounds", ArgumentSemantic.Assign)]
	//	CGRect Bounds { get; }
	//}

	//// @interface CIFaceFeature : CIFeature
	//[iOS (5,0)]
	//[BaseType (typeof(CIFeature))]
	//interface CIFaceFeature
	//{
	//	// @property (readonly, assign) CGRect bounds;
	//	[Export ("bounds", ArgumentSemantic.Assign)]
	//	CGRect Bounds { get; }

	//	// @property (readonly, assign) BOOL hasLeftEyePosition;
	//	[Export ("hasLeftEyePosition")]
	//	bool HasLeftEyePosition { get; }

	//	// @property (readonly, assign) CGPoint leftEyePosition;
	//	[Export ("leftEyePosition", ArgumentSemantic.Assign)]
	//	CGPoint LeftEyePosition { get; }

	//	// @property (readonly, assign) BOOL hasRightEyePosition;
	//	[Export ("hasRightEyePosition")]
	//	bool HasRightEyePosition { get; }

	//	// @property (readonly, assign) CGPoint rightEyePosition;
	//	[Export ("rightEyePosition", ArgumentSemantic.Assign)]
	//	CGPoint RightEyePosition { get; }

	//	// @property (readonly, assign) BOOL hasMouthPosition;
	//	[Export ("hasMouthPosition")]
	//	bool HasMouthPosition { get; }

	//	// @property (readonly, assign) CGPoint mouthPosition;
	//	[Export ("mouthPosition", ArgumentSemantic.Assign)]
	//	CGPoint MouthPosition { get; }

	//	// @property (readonly, assign) BOOL hasTrackingID;
	//	[Export ("hasTrackingID")]
	//	bool HasTrackingID { get; }

	//	// @property (readonly, assign) int trackingID;
	//	[Export ("trackingID")]
	//	int TrackingID { get; }

	//	// @property (readonly, assign) BOOL hasTrackingFrameCount;
	//	[Export ("hasTrackingFrameCount")]
	//	bool HasTrackingFrameCount { get; }

	//	// @property (readonly, assign) int trackingFrameCount;
	//	[Export ("trackingFrameCount")]
	//	int TrackingFrameCount { get; }

	//	// @property (readonly, assign) BOOL hasFaceAngle;
	//	[Export ("hasFaceAngle")]
	//	bool HasFaceAngle { get; }

	//	// @property (readonly, assign) float faceAngle;
	//	[Export ("faceAngle")]
	//	float FaceAngle { get; }

	//	// @property (readonly, assign) BOOL hasSmile;
	//	[Export ("hasSmile")]
	//	bool HasSmile { get; }

	//	// @property (readonly, assign) BOOL leftEyeClosed;
	//	[Export ("leftEyeClosed")]
	//	bool LeftEyeClosed { get; }

	//	// @property (readonly, assign) BOOL rightEyeClosed;
	//	[Export ("rightEyeClosed")]
	//	bool RightEyeClosed { get; }
	//}

	//// @interface CIRectangleFeature : CIFeature
	//[iOS (8,0)]
	//[BaseType (typeof(CIFeature))]
	//interface CIRectangleFeature
	//{
	//	// @property (readonly) CGRect bounds;
	//	[Export ("bounds")]
	//	CGRect Bounds { get; }

	//	// @property (readonly) CGPoint topLeft;
	//	[Export ("topLeft")]
	//	CGPoint TopLeft { get; }

	//	// @property (readonly) CGPoint topRight;
	//	[Export ("topRight")]
	//	CGPoint TopRight { get; }

	//	// @property (readonly) CGPoint bottomLeft;
	//	[Export ("bottomLeft")]
	//	CGPoint BottomLeft { get; }

	//	// @property (readonly) CGPoint bottomRight;
	//	[Export ("bottomRight")]
	//	CGPoint BottomRight { get; }
	//}

	//// @interface CIQRCodeFeature : CIFeature <NSSecureCoding, NSCopying>
	//[iOS (8,0)]
	//[BaseType (typeof(CIFeature))]
	//interface CIQRCodeFeature : INSSecureCoding, INSCopying
	//{
	//	// @property (readonly) CGRect bounds;
	//	[Export ("bounds")]
	//	CGRect Bounds { get; }

	//	// @property (readonly) CGPoint topLeft;
	//	[Export ("topLeft")]
	//	CGPoint TopLeft { get; }

	//	// @property (readonly) CGPoint topRight;
	//	[Export ("topRight")]
	//	CGPoint TopRight { get; }

	//	// @property (readonly) CGPoint bottomLeft;
	//	[Export ("bottomLeft")]
	//	CGPoint BottomLeft { get; }

	//	// @property (readonly) CGPoint bottomRight;
	//	[Export ("bottomRight")]
	//	CGPoint BottomRight { get; }

	//	// @property (readonly) NSString * _Nullable messageString;
	//	[NullAllowed, Export ("messageString")]
	//	string MessageString { get; }

	//	// @property (readonly) CIQRCodeDescriptor * _Nullable symbolDescriptor __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[NullAllowed, Export ("symbolDescriptor")]
	//	CIQRCodeDescriptor SymbolDescriptor { get; }
	//}

	//// @interface CITextFeature : CIFeature
	//[iOS (9,0)]
	//[BaseType (typeof(CIFeature))]
	//interface CITextFeature
	//{
	//	// @property (readonly) CGRect bounds;
	//	[Export ("bounds")]
	//	CGRect Bounds { get; }

	//	// @property (readonly) CGPoint topLeft;
	//	[Export ("topLeft")]
	//	CGPoint TopLeft { get; }

	//	// @property (readonly) CGPoint topRight;
	//	[Export ("topRight")]
	//	CGPoint TopRight { get; }

	//	// @property (readonly) CGPoint bottomLeft;
	//	[Export ("bottomLeft")]
	//	CGPoint BottomLeft { get; }

	//	// @property (readonly) CGPoint bottomRight;
	//	[Export ("bottomRight")]
	//	CGPoint BottomRight { get; }

	//	// @property (readonly) NSArray * _Nullable subFeatures;
	//	[NullAllowed, Export ("subFeatures")]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] SubFeatures { get; }
	//}

	//// @interface CIImageProvider (CIImage)
	//[Category]
	//[BaseType (typeof(CIImage))]
	//interface CIImage_CIImageProvider
	//{
	//	// +(CIImage * _Nonnull)imageWithImageProvider:(id _Nonnull)p size:(size_t)width :(size_t)height format:(CIFormat)f colorSpace:(CGColorSpaceRef _Nullable)cs options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("imageWithImageProvider:size::format:colorSpace:options:")]
	//	unsafe CIImage ImageWithImageProvider (NSObject p, nuint width, nuint height, int f, [NullAllowed] CGColorSpaceRef* cs, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nonnull)initWithImageProvider:(id _Nonnull)p size:(size_t)width :(size_t)height format:(CIFormat)f colorSpace:(CGColorSpaceRef _Nullable)cs options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("initWithImageProvider:size::format:colorSpace:options:")]
	//	unsafe IntPtr Constructor (NSObject p, nuint width, nuint height, int f, [NullAllowed] CGColorSpaceRef* cs, [NullAllowed] NSDictionary<NSString, NSObject> options);
	//}

	//// @interface CIImageProvider (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_CIImageProvider
	//{
	//	// -(void)provideImageData:(void * _Nonnull)data bytesPerRow:(size_t)rowbytes origin:(size_t)x :(size_t)y size:(size_t)width :(size_t)height userInfo:(id _Nullable)info;
	//	[Export ("provideImageData:bytesPerRow:origin::size::userInfo:")]
	//	unsafe void ProvideImageData (void* data, nuint rowbytes, nuint x, nuint y, nuint width, nuint height, [NullAllowed] NSObject info);
	//}

	//// @interface CIImageProcessorKernel : NSObject
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIImageProcessorKernel
	//{
	//	// +(BOOL)processWithInputs:(NSArray<id<CIImageProcessorInput>> * _Nullable)inputs arguments:(NSDictionary<NSString *,id> * _Nullable)arguments output:(id<CIImageProcessorOutput> _Nonnull)output error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("processWithInputs:arguments:output:error:")]
	//	bool ProcessWithInputs ([NullAllowed] CIImageProcessorInput[] inputs, [NullAllowed] NSDictionary<NSString, NSObject> arguments, CIImageProcessorOutput output, [NullAllowed] out NSError error);

	//	// +(CGRect)roiForInput:(int)input arguments:(NSDictionary<NSString *,id> * _Nullable)arguments outputRect:(CGRect)outputRect;
	//	[Static]
	//	[Export ("roiForInput:arguments:outputRect:")]
	//	CGRect RoiForInput (int input, [NullAllowed] NSDictionary<NSString, NSObject> arguments, CGRect outputRect);

	//	// +(CIFormat)formatForInputAtIndex:(int)input;
	//	[Static]
	//	[Export ("formatForInputAtIndex:")]
	//	int FormatForInputAtIndex (int input);

	//	// @property (readonly, class) CIFormat outputFormat;
	//	[Static]
	//	[Export ("outputFormat")]
	//	int OutputFormat { get; }

	//	// @property (readonly, class) _Bool outputIsOpaque __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Static]
	//	[Export ("outputIsOpaque")]
	//	bool OutputIsOpaque { get; }

	//	// @property (readonly, class) _Bool synchronizeInputs;
	//	[Static]
	//	[Export ("synchronizeInputs")]
	//	bool SynchronizeInputs { get; }

	//	// +(CIImage * _Nullable)applyWithExtent:(CGRect)extent inputs:(NSArray<CIImage *> * _Nullable)inputs arguments:(NSDictionary<NSString *,id> * _Nullable)args error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("applyWithExtent:inputs:arguments:error:")]
	//	[return: NullAllowed]
	//	CIImage ApplyWithExtent (CGRect extent, [NullAllowed] CIImage[] inputs, [NullAllowed] NSDictionary<NSString, NSObject> args, [NullAllowed] out NSError error);
	//}

	//// @protocol CIImageProcessorInput
	//[iOS (10,0)]
	//[Protocol, Model]
	//interface CIImageProcessorInput
	//{
	//	// @required @property (readonly, nonatomic) CGRect region;
	//	[Abstract]
	//	[Export ("region")]
	//	CGRect Region { get; }

	//	// @required @property (readonly, nonatomic) size_t bytesPerRow;
	//	[Abstract]
	//	[Export ("bytesPerRow")]
	//	nuint BytesPerRow { get; }

	//	// @required @property (readonly, nonatomic) CIFormat format;
	//	[Abstract]
	//	[Export ("format")]
	//	int Format { get; }

	//	// @required @property (readonly, nonatomic) const void * _Nonnull baseAddress __attribute__((objc_returns_inner_pointer));
	//	[Abstract]
	//	[Export ("baseAddress")]
	//	unsafe void* BaseAddress { get; }

	//	// @required @property (readonly, nonatomic) IOSurfaceRef _Nonnull surface;
	//	[Abstract]
	//	[Export ("surface")]
	//	unsafe IOSurfaceRef* Surface { get; }

	//	// @required @property (readonly, nonatomic) CVPixelBufferRef _Nullable pixelBuffer;
	//	[Abstract]
	//	[NullAllowed, Export ("pixelBuffer")]
	//	unsafe CVPixelBufferRef* PixelBuffer { get; }

	//	// @required @property (readonly, nonatomic) id<MTLTexture> _Nullable metalTexture;
	//	[Abstract]
	//	[NullAllowed, Export ("metalTexture")]
	//	MTLTexture MetalTexture { get; }
	//}

	//// @protocol CIImageProcessorOutput
	//[iOS (10,0)]
	//[Protocol, Model]
	//interface CIImageProcessorOutput
	//{
	//	// @required @property (readonly, nonatomic) CGRect region;
	//	[Abstract]
	//	[Export ("region")]
	//	CGRect Region { get; }

	//	// @required @property (readonly, nonatomic) size_t bytesPerRow;
	//	[Abstract]
	//	[Export ("bytesPerRow")]
	//	nuint BytesPerRow { get; }

	//	// @required @property (readonly, nonatomic) CIFormat format;
	//	[Abstract]
	//	[Export ("format")]
	//	int Format { get; }

	//	// @required @property (readonly, nonatomic) void * _Nonnull baseAddress __attribute__((objc_returns_inner_pointer));
	//	[Abstract]
	//	[Export ("baseAddress")]
	//	unsafe void* BaseAddress { get; }

	//	// @required @property (readonly, nonatomic) IOSurfaceRef _Nonnull surface;
	//	[Abstract]
	//	[Export ("surface")]
	//	unsafe IOSurfaceRef* Surface { get; }

	//	// @required @property (readonly, nonatomic) CVPixelBufferRef _Nullable pixelBuffer;
	//	[Abstract]
	//	[NullAllowed, Export ("pixelBuffer")]
	//	unsafe CVPixelBufferRef* PixelBuffer { get; }

	//	// @required @property (readonly, nonatomic) id<MTLTexture> _Nullable metalTexture;
	//	[Abstract]
	//	[NullAllowed, Export ("metalTexture")]
	//	MTLTexture MetalTexture { get; }

	//	// @required @property (readonly, nonatomic) id<MTLCommandBuffer> _Nullable metalCommandBuffer;
	//	[Abstract]
	//	[NullAllowed, Export ("metalCommandBuffer")]
	//	MTLCommandBuffer MetalCommandBuffer { get; }
	//}

	//// @interface CIImageAccumulator : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIImageAccumulator
	//{
	//	// +(instancetype _Nullable)imageAccumulatorWithExtent:(CGRect)extent format:(CIFormat)format;
	//	[Static]
	//	[Export ("imageAccumulatorWithExtent:format:")]
	//	[return: NullAllowed]
	//	CIImageAccumulator ImageAccumulatorWithExtent (CGRect extent, int format);

	//	// +(instancetype _Nullable)imageAccumulatorWithExtent:(CGRect)extent format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("imageAccumulatorWithExtent:format:colorSpace:")]
	//	[return: NullAllowed]
	//	unsafe CIImageAccumulator ImageAccumulatorWithExtent (CGRect extent, int format, CGColorSpaceRef* colorSpace);

	//	// -(instancetype _Nullable)initWithExtent:(CGRect)extent format:(CIFormat)format;
	//	[Export ("initWithExtent:format:")]
	//	IntPtr Constructor (CGRect extent, int format);

	//	// -(instancetype _Nullable)initWithExtent:(CGRect)extent format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("initWithExtent:format:colorSpace:")]
	//	unsafe IntPtr Constructor (CGRect extent, int format, CGColorSpaceRef* colorSpace);

	//	// @property (readonly) CGRect extent;
	//	[Export ("extent")]
	//	CGRect Extent { get; }

	//	// @property (readonly) CIFormat format;
	//	[Export ("format")]
	//	int Format { get; }

	//	// -(CIImage * _Nonnull)image;
	//	// -(void)setImage:(CIImage * _Nonnull)image;
	//	[Export ("image")]
	//	[Verify (MethodToProperty)]
	//	CIImage Image { get; set; }

	//	// -(void)setImage:(CIImage * _Nonnull)image dirtyRect:(CGRect)dirtyRect;
	//	[Export ("setImage:dirtyRect:")]
	//	void SetImage (CIImage image, CGRect dirtyRect);

	//	// -(void)clear;
	//	[Export ("clear")]
	//	void Clear ();
	//}

	//// @interface CIFilterShape : NSObject <NSCopying>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIFilterShape : INSCopying
	//{
	//	// +(instancetype _Nonnull)shapeWithRect:(CGRect)r;
	//	[Static]
	//	[Export ("shapeWithRect:")]
	//	CIFilterShape ShapeWithRect (CGRect r);

	//	// -(instancetype _Nonnull)initWithRect:(CGRect)r;
	//	[Export ("initWithRect:")]
	//	IntPtr Constructor (CGRect r);

	//	// -(CIFilterShape * _Nonnull)transformBy:(CGAffineTransform)m interior:(BOOL)flag;
	//	[Export ("transformBy:interior:")]
	//	CIFilterShape TransformBy (CGAffineTransform m, bool flag);

	//	// -(CIFilterShape * _Nonnull)insetByX:(int)dx Y:(int)dy;
	//	[Export ("insetByX:Y:")]
	//	CIFilterShape InsetByX (int dx, int dy);

	//	// -(CIFilterShape * _Nonnull)unionWith:(CIFilterShape * _Nonnull)s2;
	//	[Export ("unionWith:")]
	//	CIFilterShape UnionWith (CIFilterShape s2);

	//	// -(CIFilterShape * _Nonnull)unionWithRect:(CGRect)r;
	//	[Export ("unionWithRect:")]
	//	CIFilterShape UnionWithRect (CGRect r);

	//	// -(CIFilterShape * _Nonnull)intersectWith:(CIFilterShape * _Nonnull)s2;
	//	[Export ("intersectWith:")]
	//	CIFilterShape IntersectWith (CIFilterShape s2);

	//	// -(CIFilterShape * _Nonnull)intersectWithRect:(CGRect)r;
	//	[Export ("intersectWithRect:")]
	//	CIFilterShape IntersectWithRect (CGRect r);

	//	// @property (readonly) CGRect extent;
	//	[Export ("extent")]
	//	CGRect Extent { get; }
	//}

	//// @interface CISampler : NSObject <NSCopying>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface CISampler : INSCopying
	//{
	//	// +(instancetype _Nonnull)samplerWithImage:(CIImage * _Nonnull)im;
	//	[Static]
	//	[Export ("samplerWithImage:")]
	//	CISampler SamplerWithImage (CIImage im);

	//	// +(instancetype _Nonnull)samplerWithImage:(CIImage * _Nonnull)im keysAndValues:(id)key0, ... __attribute__((sentinel(0, 1)));
	//	[Static, Internal]
	//	[Export ("samplerWithImage:keysAndValues:", IsVariadic = true)]
	//	CISampler SamplerWithImage (CIImage im, NSObject key0, IntPtr varArgs);

	//	// +(instancetype _Nonnull)samplerWithImage:(CIImage * _Nonnull)im options:(NSDictionary * _Nullable)dict;
	//	[Static]
	//	[Export ("samplerWithImage:options:")]
	//	CISampler SamplerWithImage (CIImage im, [NullAllowed] NSDictionary dict);

	//	// -(instancetype _Nonnull)initWithImage:(CIImage * _Nonnull)im;
	//	[Export ("initWithImage:")]
	//	IntPtr Constructor (CIImage im);

	//	// -(instancetype _Nonnull)initWithImage:(CIImage * _Nonnull)im keysAndValues:(id)key0, ...;
	//	[Internal]
	//	[Export ("initWithImage:keysAndValues:", IsVariadic = true)]
	//	IntPtr Constructor (CIImage im, NSObject key0, IntPtr varArgs);

	//	// -(instancetype _Nonnull)initWithImage:(CIImage * _Nonnull)im options:(NSDictionary * _Nullable)dict __attribute__((objc_designated_initializer));
	//	[Export ("initWithImage:options:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CIImage im, [NullAllowed] NSDictionary dict);

	//	// @property (readonly) CIFilterShape * _Nonnull definition;
	//	[Export ("definition")]
	//	CIFilterShape Definition { get; }

	//	// @property (readonly) CGRect extent;
	//	[Export ("extent")]
	//	CGRect Extent { get; }
	//}

	//// @interface CIRAWFilter (CIFilter)
	//[Category]
	//[BaseType (typeof(CIFilter))]
	//interface CIFilter_CIRAWFilter
	//{
	//	// +(CIFilter *)filterWithImageURL:(NSURL *)url options:(NSDictionary<CIRAWFilterOption,id> *)options __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("filterWithImageURL:options:")]
	//	CIFilter FilterWithImageURL (NSUrl url, NSDictionary<NSString, NSObject> options);

	//	// +(CIFilter *)filterWithImageData:(NSData *)data options:(NSDictionary<CIRAWFilterOption,id> *)options __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("filterWithImageData:options:")]
	//	CIFilter FilterWithImageData (NSData data, NSDictionary<NSString, NSObject> options);

	//	// +(CIFilter *)filterWithCVPixelBuffer:(CVPixelBufferRef)pixelBuffer properties:(NSDictionary *)properties options:(NSDictionary<CIRAWFilterOption,id> *)options __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("filterWithCVPixelBuffer:properties:options:")]
	//	unsafe CIFilter FilterWithCVPixelBuffer (CVPixelBufferRef* pixelBuffer, NSDictionary properties, NSDictionary<NSString, NSObject> options);
	//}

	//// @interface CIRenderDestination : NSObject
	//[iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIRenderDestination
	//{
	//	// -(instancetype _Nonnull)initWithPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer;
	//	[Export ("initWithPixelBuffer:")]
	//	unsafe IntPtr Constructor (CVPixelBufferRef* pixelBuffer);

	//	// -(instancetype _Nonnull)initWithIOSurface:(IOSurface * _Nonnull)surface;
	//	[Export ("initWithIOSurface:")]
	//	IntPtr Constructor (IOSurface surface);

	//	// -(instancetype _Nonnull)initWithMTLTexture:(id<MTLTexture> _Nonnull)texture commandBuffer:(id<MTLCommandBuffer> _Nullable)commandBuffer;
	//	[Export ("initWithMTLTexture:commandBuffer:")]
	//	IntPtr Constructor (MTLTexture texture, [NullAllowed] MTLCommandBuffer commandBuffer);

	//	// -(instancetype _Nonnull)initWithWidth:(NSUInteger)width height:(NSUInteger)height pixelFormat:(MTLPixelFormat)pixelFormat commandBuffer:(id<MTLCommandBuffer> _Nullable)commandBuffer mtlTextureProvider:(id<MTLTexture>  _Nonnull (^ _Nullable)(void))block;
	//	[Export ("initWithWidth:height:pixelFormat:commandBuffer:mtlTextureProvider:")]
	//	IntPtr Constructor (nuint width, nuint height, MTLPixelFormat pixelFormat, [NullAllowed] MTLCommandBuffer commandBuffer, [NullAllowed] Func<MTLTexture> block);

	//	// -(instancetype _Nonnull)initWithGLTexture:(unsigned int)texture target:(unsigned int)target width:(NSUInteger)width height:(NSUInteger)height;
	//	[Export ("initWithGLTexture:target:width:height:")]
	//	IntPtr Constructor (uint texture, uint target, nuint width, nuint height);

	//	// -(instancetype _Nonnull)initWithBitmapData:(void * _Nonnull)data width:(NSUInteger)width height:(NSUInteger)height bytesPerRow:(NSUInteger)bytesPerRow format:(CIFormat)format;
	//	[Export ("initWithBitmapData:width:height:bytesPerRow:format:")]
	//	unsafe IntPtr Constructor (void* data, nuint width, nuint height, nuint bytesPerRow, int format);

	//	// @property (readonly) NSUInteger width;
	//	[Export ("width")]
	//	nuint Width { get; }

	//	// @property (readonly) NSUInteger height;
	//	[Export ("height")]
	//	nuint Height { get; }

	//	// @property CIRenderDestinationAlphaMode alphaMode;
	//	[Export ("alphaMode", ArgumentSemantic.Assign)]
	//	CIRenderDestinationAlphaMode AlphaMode { get; set; }

	//	// @property (getter = isFlipped) BOOL flipped;
	//	[Export ("flipped")]
	//	bool Flipped { [Bind ("isFlipped")] get; set; }

	//	// @property (getter = isDithered) BOOL dithered;
	//	[Export ("dithered")]
	//	bool Dithered { [Bind ("isDithered")] get; set; }

	//	// @property (getter = isClamped) BOOL clamped;
	//	[Export ("clamped")]
	//	bool Clamped { [Bind ("isClamped")] get; set; }

	//	// @property (nonatomic) CGColorSpaceRef _Nullable colorSpace;
	//	[NullAllowed, Export ("colorSpace", ArgumentSemantic.Assign)]
	//	unsafe CGColorSpaceRef* ColorSpace { get; set; }

	//	// @property (retain, nonatomic) CIBlendKernel * _Nullable blendKernel;
	//	[NullAllowed, Export ("blendKernel", ArgumentSemantic.Retain)]
	//	CIBlendKernel BlendKernel { get; set; }

	//	// @property BOOL blendsInDestinationColorSpace;
	//	[Export ("blendsInDestinationColorSpace")]
	//	bool BlendsInDestinationColorSpace { get; set; }
	//}

	//// @interface CIRenderInfo : NSObject
	//[iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIRenderInfo
	//{
	//	// @property (readonly) NSTimeInterval kernelExecutionTime;
	//	[Export ("kernelExecutionTime")]
	//	double KernelExecutionTime { get; }

	//	// @property (readonly) NSInteger passCount;
	//	[Export ("passCount")]
	//	nint PassCount { get; }

	//	// @property (readonly) NSInteger pixelsProcessed;
	//	[Export ("pixelsProcessed")]
	//	nint PixelsProcessed { get; }
	//}

	//// @interface CIRenderTask : NSObject
	//[iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIRenderTask
	//{
	//	// -(CIRenderInfo * _Nullable)waitUntilCompletedAndReturnError:(NSError * _Nullable * _Nullable)error;
	//	[Export ("waitUntilCompletedAndReturnError:")]
	//	[return: NullAllowed]
	//	CIRenderInfo WaitUntilCompletedAndReturnError ([NullAllowed] out NSError error);
	//}

	//// @interface CIRenderDestination (CIContext)
	//[Category]
	//[BaseType (typeof(CIContext))]
	//interface CIContext_CIRenderDestination
	//{
	//	// -(CIRenderTask * _Nullable)startTaskToRender:(CIImage * _Nonnull)image fromRect:(CGRect)fromRect toDestination:(CIRenderDestination * _Nonnull)destination atPoint:(CGPoint)atPoint error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("startTaskToRender:fromRect:toDestination:atPoint:error:")]
	//	[return: NullAllowed]
	//	CIRenderTask StartTaskToRender (CIImage image, CGRect fromRect, CIRenderDestination destination, CGPoint atPoint, [NullAllowed] out NSError error);

	//	// -(CIRenderTask * _Nullable)startTaskToRender:(CIImage * _Nonnull)image toDestination:(CIRenderDestination * _Nonnull)destination error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("startTaskToRender:toDestination:error:")]
	//	[return: NullAllowed]
	//	CIRenderTask StartTaskToRender (CIImage image, CIRenderDestination destination, [NullAllowed] out NSError error);

	//	// -(BOOL)prepareRender:(CIImage * _Nonnull)image fromRect:(CGRect)fromRect toDestination:(CIRenderDestination * _Nonnull)destination atPoint:(CGPoint)atPoint error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("prepareRender:fromRect:toDestination:atPoint:error:")]
	//	bool PrepareRender (CIImage image, CGRect fromRect, CIRenderDestination destination, CGPoint atPoint, [NullAllowed] out NSError error);

	//	// -(CIRenderTask * _Nullable)startTaskToClear:(CIRenderDestination * _Nonnull)destination error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("startTaskToClear:error:")]
	//	[return: NullAllowed]
	//	CIRenderTask StartTaskToClear (CIRenderDestination destination, [NullAllowed] out NSError error);
	//}

	//// @interface CIBarcodeDescriptor : NSObject <NSSecureCoding, NSCopying>
	//[iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface CIBarcodeDescriptor : INSSecureCoding, INSCopying
	//{
	//}

	//// @interface CIQRCodeDescriptor : CIBarcodeDescriptor
	//[iOS (11,0)]
	//[BaseType (typeof(CIBarcodeDescriptor))]
	//interface CIQRCodeDescriptor
	//{
	//	// @property (readonly) NSData * _Nonnull errorCorrectedPayload;
	//	[Export ("errorCorrectedPayload")]
	//	NSData ErrorCorrectedPayload { get; }

	//	// @property (readonly) NSInteger symbolVersion;
	//	[Export ("symbolVersion")]
	//	nint SymbolVersion { get; }

	//	// @property (readonly) uint8_t maskPattern;
	//	[Export ("maskPattern")]
	//	byte MaskPattern { get; }

	//	// @property (readonly) CIQRCodeErrorCorrectionLevel errorCorrectionLevel;
	//	[Export ("errorCorrectionLevel")]
	//	CIQRCodeErrorCorrectionLevel ErrorCorrectionLevel { get; }

	//	// -(instancetype _Nullable)initWithPayload:(NSData * _Nonnull)errorCorrectedPayload symbolVersion:(NSInteger)symbolVersion maskPattern:(uint8_t)maskPattern errorCorrectionLevel:(CIQRCodeErrorCorrectionLevel)errorCorrectionLevel;
	//	[Export ("initWithPayload:symbolVersion:maskPattern:errorCorrectionLevel:")]
	//	IntPtr Constructor (NSData errorCorrectedPayload, nint symbolVersion, byte maskPattern, CIQRCodeErrorCorrectionLevel errorCorrectionLevel);

	//	// +(instancetype _Nullable)descriptorWithPayload:(NSData * _Nonnull)errorCorrectedPayload symbolVersion:(NSInteger)symbolVersion maskPattern:(uint8_t)maskPattern errorCorrectionLevel:(CIQRCodeErrorCorrectionLevel)errorCorrectionLevel;
	//	[Static]
	//	[Export ("descriptorWithPayload:symbolVersion:maskPattern:errorCorrectionLevel:")]
	//	[return: NullAllowed]
	//	CIQRCodeDescriptor DescriptorWithPayload (NSData errorCorrectedPayload, nint symbolVersion, byte maskPattern, CIQRCodeErrorCorrectionLevel errorCorrectionLevel);
	//}

	//// @interface CIAztecCodeDescriptor : CIBarcodeDescriptor
	//[iOS (11,0)]
	//[BaseType (typeof(CIBarcodeDescriptor))]
	//interface CIAztecCodeDescriptor
	//{
	//	// @property (readonly) NSData * _Nonnull errorCorrectedPayload;
	//	[Export ("errorCorrectedPayload")]
	//	NSData ErrorCorrectedPayload { get; }

	//	// @property (readonly) BOOL isCompact;
	//	[Export ("isCompact")]
	//	bool IsCompact { get; }

	//	// @property (readonly) NSInteger layerCount;
	//	[Export ("layerCount")]
	//	nint LayerCount { get; }

	//	// @property (readonly) NSInteger dataCodewordCount;
	//	[Export ("dataCodewordCount")]
	//	nint DataCodewordCount { get; }

	//	// -(instancetype _Nullable)initWithPayload:(NSData * _Nonnull)errorCorrectedPayload isCompact:(BOOL)isCompact layerCount:(NSInteger)layerCount dataCodewordCount:(NSInteger)dataCodewordCount;
	//	[Export ("initWithPayload:isCompact:layerCount:dataCodewordCount:")]
	//	IntPtr Constructor (NSData errorCorrectedPayload, bool isCompact, nint layerCount, nint dataCodewordCount);

	//	// +(instancetype _Nullable)descriptorWithPayload:(NSData * _Nonnull)errorCorrectedPayload isCompact:(BOOL)isCompact layerCount:(NSInteger)layerCount dataCodewordCount:(NSInteger)dataCodewordCount;
	//	[Static]
	//	[Export ("descriptorWithPayload:isCompact:layerCount:dataCodewordCount:")]
	//	[return: NullAllowed]
	//	CIAztecCodeDescriptor DescriptorWithPayload (NSData errorCorrectedPayload, bool isCompact, nint layerCount, nint dataCodewordCount);
	//}

	//// @interface CIPDF417CodeDescriptor : CIBarcodeDescriptor
	//[iOS (11,0)]
	//[BaseType (typeof(CIBarcodeDescriptor))]
	//interface CIPDF417CodeDescriptor
	//{
	//	// @property (readonly) NSData * _Nonnull errorCorrectedPayload;
	//	[Export ("errorCorrectedPayload")]
	//	NSData ErrorCorrectedPayload { get; }

	//	// @property (readonly) BOOL isCompact;
	//	[Export ("isCompact")]
	//	bool IsCompact { get; }

	//	// @property (readonly) NSInteger rowCount;
	//	[Export ("rowCount")]
	//	nint RowCount { get; }

	//	// @property (readonly) NSInteger columnCount;
	//	[Export ("columnCount")]
	//	nint ColumnCount { get; }

	//	// -(instancetype _Nullable)initWithPayload:(NSData * _Nonnull)errorCorrectedPayload isCompact:(BOOL)isCompact rowCount:(NSInteger)rowCount columnCount:(NSInteger)columnCount;
	//	[Export ("initWithPayload:isCompact:rowCount:columnCount:")]
	//	IntPtr Constructor (NSData errorCorrectedPayload, bool isCompact, nint rowCount, nint columnCount);

	//	// +(instancetype _Nullable)descriptorWithPayload:(NSData * _Nonnull)errorCorrectedPayload isCompact:(BOOL)isCompact rowCount:(NSInteger)rowCount columnCount:(NSInteger)columnCount;
	//	[Static]
	//	[Export ("descriptorWithPayload:isCompact:rowCount:columnCount:")]
	//	[return: NullAllowed]
	//	CIPdf417CodeDescriptor DescriptorWithPayload (NSData errorCorrectedPayload, bool isCompact, nint rowCount, nint columnCount);
	//}

	//// @interface CIDataMatrixCodeDescriptor : CIBarcodeDescriptor
	//[iOS (11,0)]
	//[BaseType (typeof(CIBarcodeDescriptor))]
	//interface CIDataMatrixCodeDescriptor
	//{
	//	// @property (readonly) NSData * _Nonnull errorCorrectedPayload;
	//	[Export ("errorCorrectedPayload")]
	//	NSData ErrorCorrectedPayload { get; }

	//	// @property (readonly) NSInteger rowCount;
	//	[Export ("rowCount")]
	//	nint RowCount { get; }

	//	// @property (readonly) NSInteger columnCount;
	//	[Export ("columnCount")]
	//	nint ColumnCount { get; }

	//	// @property (readonly) CIDataMatrixCodeECCVersion eccVersion;
	//	[Export ("eccVersion")]
	//	CIDataMatrixCodeECCVersion EccVersion { get; }

	//	// -(instancetype _Nullable)initWithPayload:(NSData * _Nonnull)errorCorrectedPayload rowCount:(NSInteger)rowCount columnCount:(NSInteger)columnCount eccVersion:(CIDataMatrixCodeECCVersion)eccVersion;
	//	[Export ("initWithPayload:rowCount:columnCount:eccVersion:")]
	//	IntPtr Constructor (NSData errorCorrectedPayload, nint rowCount, nint columnCount, CIDataMatrixCodeECCVersion eccVersion);

	//	// +(instancetype _Nullable)descriptorWithPayload:(NSData * _Nonnull)errorCorrectedPayload rowCount:(NSInteger)rowCount columnCount:(NSInteger)columnCount eccVersion:(CIDataMatrixCodeECCVersion)eccVersion;
	//	[Static]
	//	[Export ("descriptorWithPayload:rowCount:columnCount:eccVersion:")]
	//	[return: NullAllowed]
	//	CIDataMatrixCodeDescriptor DescriptorWithPayload (NSData errorCorrectedPayload, nint rowCount, nint columnCount, CIDataMatrixCodeECCVersion eccVersion);
	//}

	//// @interface CIBarcodeDescriptor (NSUserActivity)
	//[Category]
	//[BaseType (typeof(NSUserActivity))]
	//interface NSUserActivity_CIBarcodeDescriptor
	//{
	//	// @property (readonly, copy, nonatomic) CIBarcodeDescriptor * _Nullable detectedBarcodeDescriptor __attribute__((availability(tvos, introduced=11.3))) __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
	//	[TV (11, 3), Mac (10, 13, 4), iOS (11, 3)]
	//	[NullAllowed, Export ("detectedBarcodeDescriptor", ArgumentSemantic.Copy)]
	//	CIBarcodeDescriptor DetectedBarcodeDescriptor { get; }
	//}

	//// @interface CLFloor : NSObject <NSCopying, NSSecureCoding>
	//[NoMac, iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface CLFloor : INSCopying, INSSecureCoding
	//{
	//	// @property (readonly, nonatomic) NSInteger level;
	//	[Export ("level")]
	//	nint Level { get; }
	//}

	//// @interface CLLocation : NSObject <NSCopying, NSSecureCoding>
	//[Mac (10,6), iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface CLLocation : INSCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nonnull)initWithLatitude:(CLLocationDegrees)latitude longitude:(CLLocationDegrees)longitude;
	//	[Export ("initWithLatitude:longitude:")]
	//	IntPtr Constructor (double latitude, double longitude);

	//	// -(instancetype _Nonnull)initWithCoordinate:(CLLocationCoordinate2D)coordinate altitude:(CLLocationDistance)altitude horizontalAccuracy:(CLLocationAccuracy)hAccuracy verticalAccuracy:(CLLocationAccuracy)vAccuracy timestamp:(NSDate * _Nonnull)timestamp;
	//	[Export ("initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:")]
	//	IntPtr Constructor (CLLocationCoordinate2D coordinate, double altitude, double hAccuracy, double vAccuracy, NSDate timestamp);

	//	// -(instancetype _Nonnull)initWithCoordinate:(CLLocationCoordinate2D)coordinate altitude:(CLLocationDistance)altitude horizontalAccuracy:(CLLocationAccuracy)hAccuracy verticalAccuracy:(CLLocationAccuracy)vAccuracy course:(CLLocationDirection)course speed:(CLLocationSpeed)speed timestamp:(NSDate * _Nonnull)timestamp __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.2)));
	//	[Mac (10,7), iOS (4,2)]
	//	[Export ("initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:")]
	//	IntPtr Constructor (CLLocationCoordinate2D coordinate, double altitude, double hAccuracy, double vAccuracy, double course, double speed, NSDate timestamp);

	//	// @property (readonly, nonatomic) CLLocationCoordinate2D coordinate;
	//	[Export ("coordinate")]
	//	CLLocationCoordinate2D Coordinate { get; }

	//	// @property (readonly, nonatomic) CLLocationDistance altitude;
	//	[Export ("altitude")]
	//	double Altitude { get; }

	//	// @property (readonly, nonatomic) CLLocationAccuracy horizontalAccuracy;
	//	[Export ("horizontalAccuracy")]
	//	double HorizontalAccuracy { get; }

	//	// @property (readonly, nonatomic) CLLocationAccuracy verticalAccuracy;
	//	[Export ("verticalAccuracy")]
	//	double VerticalAccuracy { get; }

	//	// @property (readonly, nonatomic) CLLocationDirection course __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=2.2)));
	//	[NoTV, Mac (10, 7), iOS (2, 2)]
	//	[Export ("course")]
	//	double Course { get; }

	//	// @property (readonly, nonatomic) CLLocationSpeed speed __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=2.2)));
	//	[NoTV, Mac (10, 7), iOS (2, 2)]
	//	[Export ("speed")]
	//	double Speed { get; }

	//	// @property (readonly, copy, nonatomic) NSDate * _Nonnull timestamp;
	//	[Export ("timestamp", ArgumentSemantic.Copy)]
	//	NSDate Timestamp { get; }

	//	// @property (readonly, copy, nonatomic) CLFloor * _Nullable floor __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8, 0)]
	//	[NullAllowed, Export ("floor", ArgumentSemantic.Copy)]
	//	CLFloor Floor { get; }

	//	// -(CLLocationDistance)getDistanceFrom:(const CLLocation * _Nonnull)location __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.2)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 2)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("getDistanceFrom:")]
	//	double GetDistanceFrom (CLLocation location);

	//	// -(CLLocationDistance)distanceFromLocation:(const CLLocation * _Nonnull)location __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.2)));
	//	[Mac (10,6), iOS (3,2)]
	//	[Export ("distanceFromLocation:")]
	//	double DistanceFromLocation (CLLocation location);
	//}

	//// @interface CLRegion : NSObject <NSCopying, NSSecureCoding>
	//[Mac (10,7), iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface CLRegion : INSCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nonnull)initCircularRegionWithCenter:(CLLocationCoordinate2D)center radius:(CLLocationDistance)radius identifier:(NSString * _Nonnull)identifier __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, introduced=10.7, deprecated=10.10))) __attribute__((availability(ios, introduced=4.0, deprecated=7.0)));
	//	[Introduced (PlatformName.MacOSX, 10, 7, message: "Please see CLCircularRegion")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Please see CLCircularRegion")]
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Please see CLCircularRegion")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Please see CLCircularRegion")]
	//	[NoTV]
	//	[Export ("initCircularRegionWithCenter:radius:identifier:")]
	//	IntPtr Constructor (CLLocationCoordinate2D center, double radius, string identifier);

	//	// @property (readonly, nonatomic) CLLocationCoordinate2D center __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, introduced=10.7, deprecated=10.10))) __attribute__((availability(ios, introduced=4.0, deprecated=7.0)));
	//	[Introduced (PlatformName.MacOSX, 10, 7, message: "Please see CLCircularRegion")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Please see CLCircularRegion")]
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Please see CLCircularRegion")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Please see CLCircularRegion")]
	//	[NoTV]
	//	[Export ("center")]
	//	CLLocationCoordinate2D Center { get; }

	//	// @property (readonly, nonatomic) CLLocationDistance radius __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, introduced=10.7, deprecated=10.10))) __attribute__((availability(ios, introduced=4.0, deprecated=7.0)));
	//	[Introduced (PlatformName.MacOSX, 10, 7, message: "Please see CLCircularRegion")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Please see CLCircularRegion")]
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Please see CLCircularRegion")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Please see CLCircularRegion")]
	//	[NoTV]
	//	[Export ("radius")]
	//	double Radius { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull identifier __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0)));
	//	[Mac (10, 7), iOS (4, 0)]
	//	[Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (assign, nonatomic) BOOL notifyOnEntry __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=7.0)));
	//	[Mac (10, 10), iOS (7, 0)]
	//	[Export ("notifyOnEntry")]
	//	bool NotifyOnEntry { get; set; }

	//	// @property (assign, nonatomic) BOOL notifyOnExit __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=7.0)));
	//	[Mac (10, 10), iOS (7, 0)]
	//	[Export ("notifyOnExit")]
	//	bool NotifyOnExit { get; set; }

	//	// -(BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, introduced=10.7, deprecated=10.10))) __attribute__((availability(ios, introduced=4.0, deprecated=7.0)));
	//	[Introduced (PlatformName.MacOSX, 10, 7, message: "Please see CLCircularRegion")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Please see CLCircularRegion")]
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Please see CLCircularRegion")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Please see CLCircularRegion")]
	//	[NoTV]
	//	[Export ("containsCoordinate:")]
	//	bool ContainsCoordinate (CLLocationCoordinate2D coordinate);
	//}

	//// @interface CLCircularRegion : CLRegion
	//[Mac (10,10), iOS (7,0)]
	//[BaseType (typeof(CLRegion))]
	//interface CLCircularRegion
	//{
	//	// -(instancetype _Nonnull)initWithCenter:(CLLocationCoordinate2D)center radius:(CLLocationDistance)radius identifier:(NSString * _Nonnull)identifier;
	//	[Export ("initWithCenter:radius:identifier:")]
	//	IntPtr Constructor (CLLocationCoordinate2D center, double radius, string identifier);

	//	// @property (readonly, nonatomic) CLLocationCoordinate2D center;
	//	[Export ("center")]
	//	CLLocationCoordinate2D Center { get; }

	//	// @property (readonly, nonatomic) CLLocationDistance radius;
	//	[Export ("radius")]
	//	double Radius { get; }

	//	// -(BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate;
	//	[Export ("containsCoordinate:")]
	//	bool ContainsCoordinate (CLLocationCoordinate2D coordinate);
	//}

	//// @interface CLBeaconRegion : CLRegion
	//[NoWatch, NoTV, NoMac, iOS (7,0)]
	//[BaseType (typeof(CLRegion))]
	//interface CLBeaconRegion
	//{
	//	// -(instancetype _Nonnull)initWithProximityUUID:(NSUUID * _Nonnull)proximityUUID identifier:(NSString * _Nonnull)identifier;
	//	[Export ("initWithProximityUUID:identifier:")]
	//	IntPtr Constructor (NSUuid proximityUUID, string identifier);

	//	// -(instancetype _Nonnull)initWithProximityUUID:(NSUUID * _Nonnull)proximityUUID major:(CLBeaconMajorValue)major identifier:(NSString * _Nonnull)identifier;
	//	[Export ("initWithProximityUUID:major:identifier:")]
	//	IntPtr Constructor (NSUuid proximityUUID, ushort major, string identifier);

	//	// -(instancetype _Nonnull)initWithProximityUUID:(NSUUID * _Nonnull)proximityUUID major:(CLBeaconMajorValue)major minor:(CLBeaconMinorValue)minor identifier:(NSString * _Nonnull)identifier;
	//	[Export ("initWithProximityUUID:major:minor:identifier:")]
	//	IntPtr Constructor (NSUuid proximityUUID, ushort major, ushort minor, string identifier);

	//	// -(NSMutableDictionary<NSString *,id> * _Nonnull)peripheralDataWithMeasuredPower:(NSNumber * _Nullable)measuredPower;
	//	[Export ("peripheralDataWithMeasuredPower:")]
	//	NSMutableDictionary<NSString, NSObject> PeripheralDataWithMeasuredPower ([NullAllowed] NSNumber measuredPower);

	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull proximityUUID;
	//	[Export ("proximityUUID", ArgumentSemantic.Copy)]
	//	NSUuid ProximityUUID { get; }

	//	// @property (readonly, copy, nonatomic) NSNumber * _Nullable major;
	//	[NullAllowed, Export ("major", ArgumentSemantic.Copy)]
	//	NSNumber Major { get; }

	//	// @property (readonly, copy, nonatomic) NSNumber * _Nullable minor;
	//	[NullAllowed, Export ("minor", ArgumentSemantic.Copy)]
	//	NSNumber Minor { get; }

	//	// @property (assign, nonatomic) BOOL notifyEntryStateOnDisplay;
	//	[Export ("notifyEntryStateOnDisplay")]
	//	bool NotifyEntryStateOnDisplay { get; set; }
	//}

	//// @interface CLBeacon : NSObject <NSCopying, NSSecureCoding>
	//[NoWatch, NoTV, NoMac, iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface CLBeacon : INSCopying, INSSecureCoding
	//{
	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull proximityUUID;
	//	[Export ("proximityUUID", ArgumentSemantic.Copy)]
	//	NSUuid ProximityUUID { get; }

	//	// @property (readonly, copy, nonatomic) NSNumber * _Nonnull major;
	//	[Export ("major", ArgumentSemantic.Copy)]
	//	NSNumber Major { get; }

	//	// @property (readonly, copy, nonatomic) NSNumber * _Nonnull minor;
	//	[Export ("minor", ArgumentSemantic.Copy)]
	//	NSNumber Minor { get; }

	//	// @property (readonly, nonatomic) CLProximity proximity;
	//	[Export ("proximity")]
	//	CLProximity Proximity { get; }

	//	// @property (readonly, nonatomic) CLLocationAccuracy accuracy;
	//	[Export ("accuracy")]
	//	double Accuracy { get; }

	//	// @property (readonly, nonatomic) NSInteger rssi;
	//	[Export ("rssi")]
	//	nint Rssi { get; }
	//}

	//// @interface CLHeading : NSObject <NSCopying, NSSecureCoding>
	//[NoWatch, NoTV, Mac (10,7), iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface CLHeading : INSCopying, INSSecureCoding
	//{
	//	// @property (readonly, nonatomic) CLLocationDirection magneticHeading;
	//	[Export ("magneticHeading")]
	//	double MagneticHeading { get; }

	//	// @property (readonly, nonatomic) CLLocationDirection trueHeading;
	//	[Export ("trueHeading")]
	//	double TrueHeading { get; }

	//	// @property (readonly, nonatomic) CLLocationDirection headingAccuracy;
	//	[Export ("headingAccuracy")]
	//	double HeadingAccuracy { get; }

	//	// @property (readonly, nonatomic) CLHeadingComponentValue x;
	//	[Export ("x")]
	//	double X { get; }

	//	// @property (readonly, nonatomic) CLHeadingComponentValue y;
	//	[Export ("y")]
	//	double Y { get; }

	//	// @property (readonly, nonatomic) CLHeadingComponentValue z;
	//	[Export ("z")]
	//	double Z { get; }

	//	// @property (readonly, copy, nonatomic) NSDate * _Nonnull timestamp;
	//	[Export ("timestamp", ArgumentSemantic.Copy)]
	//	NSDate Timestamp { get; }
	//}

	//// @interface CLLocationManager : NSObject
	//[Mac (10,6), iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface CLLocationManager
	//{
	//	// +(BOOL)locationServicesEnabled __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0)));
	//	[Mac (10, 7), iOS (4, 0)]
	//	[Static]
	//	[Export ("locationServicesEnabled")]
	//	[Verify (MethodToProperty)]
	//	bool LocationServicesEnabled { get; }

	//	// +(BOOL)headingAvailable __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, Mac (10, 7), iOS (4, 0)]
	//	[Static]
	//	[Export ("headingAvailable")]
	//	[Verify (MethodToProperty)]
	//	bool HeadingAvailable { get; }

	//	// +(BOOL)significantLocationChangeMonitoringAvailable __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, Mac (10, 7), iOS (4, 0)]
	//	[Static]
	//	[Export ("significantLocationChangeMonitoringAvailable")]
	//	[Verify (MethodToProperty)]
	//	bool SignificantLocationChangeMonitoringAvailable { get; }

	//	// +(BOOL)isMonitoringAvailableForClass:(Class _Nonnull)regionClass __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoWatch, NoTV, Mac (10,10), iOS (7,0)]
	//	[Static]
	//	[Export ("isMonitoringAvailableForClass:")]
	//	bool IsMonitoringAvailableForClass (Class regionClass);

	//	// +(BOOL)regionMonitoringAvailable __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.8, deprecated=10.10))) __attribute__((availability(ios, introduced=4.0, deprecated=7.0)));
	//	[Introduced (PlatformName.MacOSX, 10, 8)]
	//	[Deprecated (PlatformName.MacOSX, 10, 10)]
	//	[Introduced (PlatformName.iOS, 4, 0)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoWatch, NoTV]
	//	[Static]
	//	[Export ("regionMonitoringAvailable")]
	//	[Verify (MethodToProperty)]
	//	bool RegionMonitoringAvailable { get; }

	//	// +(BOOL)regionMonitoringEnabled __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.8, deprecated=10.10))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.MacOSX, 10, 8, message: "Use +isMonitoringAvailableForClass: and +authorizationStatus instead")]
	//	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use +isMonitoringAvailableForClass: and +authorizationStatus instead")]
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use +isMonitoringAvailableForClass: and +authorizationStatus instead")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "Use +isMonitoringAvailableForClass: and +authorizationStatus instead")]
	//	[NoWatch, NoTV]
	//	[Static]
	//	[Export ("regionMonitoringEnabled")]
	//	[Verify (MethodToProperty)]
	//	bool RegionMonitoringEnabled { get; }

	//	// +(BOOL)isRangingAvailable __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoWatch, NoTV, NoMac, iOS (7, 0)]
	//	[Static]
	//	[Export ("isRangingAvailable")]
	//	[Verify (MethodToProperty)]
	//	bool IsRangingAvailable { get; }

	//	// +(CLAuthorizationStatus)authorizationStatus __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.2)));
	//	[Mac (10, 7), iOS (4, 2)]
	//	[Static]
	//	[Export ("authorizationStatus")]
	//	[Verify (MethodToProperty)]
	//	CLAuthorizationStatus AuthorizationStatus { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	CLLocationManagerDelegate Delegate { get; set; }

	//	// @property (assign, nonatomic) id<CLLocationManagerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, nonatomic) BOOL locationServicesEnabled __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 4, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("locationServicesEnabled")]
	//	bool LocationServicesEnabled { get; }

	//	// @property (copy, nonatomic) NSString * _Nullable purpose __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=3.2, deprecated=6.0))) __attribute__((availability(macos, introduced=10.7)));
	//	[Introduced (PlatformName.iOS, 3, 2, message: "Set the purpose string in Info.plist using key NSLocationUsageDescription")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "Set the purpose string in Info.plist using key NSLocationUsageDescription")]
	//	[NoWatch, NoTV, Mac (10, 7)]
	//	[NullAllowed, Export ("purpose")]
	//	string Purpose { get; set; }

	//	// @property (assign, nonatomic) CLActivityType activityType __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=6.0)));
	//	[Watch (4, 0), NoTV, NoMac, iOS (6, 0)]
	//	[Export ("activityType", ArgumentSemantic.Assign)]
	//	CLActivityType ActivityType { get; set; }

	//	// @property (assign, nonatomic) CLLocationDistance distanceFilter;
	//	[Export ("distanceFilter")]
	//	double DistanceFilter { get; set; }

	//	// @property (assign, nonatomic) CLLocationAccuracy desiredAccuracy;
	//	[Export ("desiredAccuracy")]
	//	double DesiredAccuracy { get; set; }

	//	// @property (assign, nonatomic) BOOL pausesLocationUpdatesAutomatically __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoWatch, NoTV, NoMac, iOS (6, 0)]
	//	[Export ("pausesLocationUpdatesAutomatically")]
	//	bool PausesLocationUpdatesAutomatically { get; set; }

	//	// @property (assign, nonatomic) BOOL allowsBackgroundLocationUpdates __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=9.0)));
	//	[Watch (4, 0), NoTV, NoMac, iOS (9, 0)]
	//	[Export ("allowsBackgroundLocationUpdates")]
	//	bool AllowsBackgroundLocationUpdates { get; set; }

	//	// @property (assign, nonatomic) BOOL showsBackgroundLocationIndicator __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11, 0)]
	//	[Export ("showsBackgroundLocationIndicator")]
	//	bool ShowsBackgroundLocationIndicator { get; set; }

	//	// @property (readonly, copy, nonatomic) CLLocation * _Nullable location;
	//	[NullAllowed, Export ("location", ArgumentSemantic.Copy)]
	//	CLLocation Location { get; }

	//	// @property (readonly, nonatomic) BOOL headingAvailable __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=4.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 4, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("headingAvailable")]
	//	bool HeadingAvailable { get; }

	//	// @property (assign, nonatomic) CLLocationDegrees headingFilter __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoWatch, NoTV, NoMac, iOS (3, 0)]
	//	[Export ("headingFilter")]
	//	double HeadingFilter { get; set; }

	//	// @property (assign, nonatomic) CLDeviceOrientation headingOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, NoMac, iOS (4, 0)]
	//	[Export ("headingOrientation", ArgumentSemantic.Assign)]
	//	CLDeviceOrientation HeadingOrientation { get; set; }

	//	// @property (readonly, copy, nonatomic) CLHeading * _Nullable heading __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, NoMac, iOS (4, 0)]
	//	[NullAllowed, Export ("heading", ArgumentSemantic.Copy)]
	//	CLHeading Heading { get; }

	//	// @property (readonly, nonatomic) CLLocationDistance maximumRegionMonitoringDistance __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, Mac (10, 8), iOS (4, 0)]
	//	[Export ("maximumRegionMonitoringDistance")]
	//	double MaximumRegionMonitoringDistance { get; }

	//	// @property (readonly, copy, nonatomic) NSSet<__kindof CLRegion *> * _Nonnull monitoredRegions __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, Mac (10, 8), iOS (4, 0)]
	//	[Export ("monitoredRegions", ArgumentSemantic.Copy)]
	//	NSSet<CLRegion> MonitoredRegions { get; }

	//	// @property (readonly, copy, nonatomic) NSSet<__kindof CLRegion *> * _Nonnull rangedRegions __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoWatch, NoTV, NoMac, iOS (7, 0)]
	//	[Export ("rangedRegions", ArgumentSemantic.Copy)]
	//	NSSet<CLRegion> RangedRegions { get; }

	//	// -(void)requestWhenInUseAuthorization __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoMac, iOS (8,0)]
	//	[Export ("requestWhenInUseAuthorization")]
	//	void RequestWhenInUseAuthorization ();

	//	// -(void)requestAlwaysAuthorization __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, NoMac, iOS (8,0)]
	//	[Export ("requestAlwaysAuthorization")]
	//	void RequestAlwaysAuthorization ();

	//	// -(void)startUpdatingLocation __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=3.0)));
	//	[Watch (3,0), NoTV]
	//	[Export ("startUpdatingLocation")]
	//	void StartUpdatingLocation ();

	//	// -(void)stopUpdatingLocation;
	//	[Export ("stopUpdatingLocation")]
	//	void StopUpdatingLocation ();

	//	// -(void)requestLocation __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=9.0)));
	//	[Mac (10,14), iOS (9,0)]
	//	[Export ("requestLocation")]
	//	void RequestLocation ();

	//	// -(void)startUpdatingHeading __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoWatch, NoTV, NoMac, iOS (3,0)]
	//	[Export ("startUpdatingHeading")]
	//	void StartUpdatingHeading ();

	//	// -(void)stopUpdatingHeading __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoWatch, NoTV, NoMac, iOS (3,0)]
	//	[Export ("stopUpdatingHeading")]
	//	void StopUpdatingHeading ();

	//	// -(void)dismissHeadingCalibrationDisplay __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoWatch, NoTV, NoMac, iOS (3,0)]
	//	[Export ("dismissHeadingCalibrationDisplay")]
	//	void DismissHeadingCalibrationDisplay ();

	//	// -(void)startMonitoringSignificantLocationChanges __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//	[Export ("startMonitoringSignificantLocationChanges")]
	//	void StartMonitoringSignificantLocationChanges ();

	//	// -(void)stopMonitoringSignificantLocationChanges __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, Mac (10,7), iOS (4,0)]
	//	[Export ("stopMonitoringSignificantLocationChanges")]
	//	void StopMonitoringSignificantLocationChanges ();

	//	// -(void)startMonitoringForRegion:(CLRegion * _Nonnull)region desiredAccuracy:(CLLocationAccuracy)accuracy __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 4, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("startMonitoringForRegion:desiredAccuracy:")]
	//	void StartMonitoringForRegion (CLRegion region, double accuracy);

	//	// -(void)stopMonitoringForRegion:(CLRegion * _Nonnull)region __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, Mac (10,8), iOS (4,0)]
	//	[Export ("stopMonitoringForRegion:")]
	//	void StopMonitoringForRegion (CLRegion region);

	//	// -(void)startMonitoringForRegion:(CLRegion * _Nonnull)region __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoWatch, NoTV, Mac (10,8), iOS (5,0)]
	//	[Export ("startMonitoringForRegion:")]
	//	void StartMonitoringForRegion (CLRegion region);

	//	// -(void)requestStateForRegion:(CLRegion * _Nonnull)region __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoWatch, NoTV, Mac (10,10), iOS (7,0)]
	//	[Export ("requestStateForRegion:")]
	//	void RequestStateForRegion (CLRegion region);

	//	// -(void)startRangingBeaconsInRegion:(CLBeaconRegion * _Nonnull)region __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoWatch, NoTV, NoMac, iOS (7,0)]
	//	[Export ("startRangingBeaconsInRegion:")]
	//	void StartRangingBeaconsInRegion (CLBeaconRegion region);

	//	// -(void)stopRangingBeaconsInRegion:(CLBeaconRegion * _Nonnull)region __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoWatch, NoTV, NoMac, iOS (7,0)]
	//	[Export ("stopRangingBeaconsInRegion:")]
	//	void StopRangingBeaconsInRegion (CLBeaconRegion region);

	//	// -(void)allowDeferredLocationUpdatesUntilTraveled:(CLLocationDistance)distance timeout:(NSTimeInterval)timeout __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoWatch, NoTV, NoMac, iOS (6,0)]
	//	[Export ("allowDeferredLocationUpdatesUntilTraveled:timeout:")]
	//	void AllowDeferredLocationUpdatesUntilTraveled (double distance, double timeout);

	//	// -(void)disallowDeferredLocationUpdates __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoWatch, NoTV, NoMac, iOS (6,0)]
	//	[Export ("disallowDeferredLocationUpdates")]
	//	void DisallowDeferredLocationUpdates ();

	//	// +(BOOL)deferredLocationUpdatesAvailable __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoWatch, NoTV, Mac (10, 9), iOS (6, 0)]
	//	[Static]
	//	[Export ("deferredLocationUpdatesAvailable")]
	//	[Verify (MethodToProperty)]
	//	bool DeferredLocationUpdatesAvailable { get; }
	//}

	//// @interface CLVisit : NSObject <NSSecureCoding, NSCopying>
	//[NoWatch, NoTV, NoMac, iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface CLVisit : INSSecureCoding, INSCopying
	//{
	//	// @property (readonly, copy, nonatomic) NSDate * _Nonnull arrivalDate;
	//	[Export ("arrivalDate", ArgumentSemantic.Copy)]
	//	NSDate ArrivalDate { get; }

	//	// @property (readonly, copy, nonatomic) NSDate * _Nonnull departureDate;
	//	[Export ("departureDate", ArgumentSemantic.Copy)]
	//	NSDate DepartureDate { get; }

	//	// @property (readonly, nonatomic) CLLocationCoordinate2D coordinate;
	//	[Export ("coordinate")]
	//	CLLocationCoordinate2D Coordinate { get; }

	//	// @property (readonly, nonatomic) CLLocationAccuracy horizontalAccuracy;
	//	[Export ("horizontalAccuracy")]
	//	double HorizontalAccuracy { get; }
	//}

	//// @protocol CLLocationManagerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface CLLocationManagerDelegate
	//{
	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateToLocation:(CLLocation * _Nonnull)newLocation fromLocation:(CLLocation * _Nonnull)oldLocation __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=6.0))) __attribute__((availability(macos, introduced=10.6)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Implement -locationManager:didUpdateLocations: instead")]
	//	[Deprecated (PlatformName.iOS, 6, 0, message: "Implement -locationManager:didUpdateLocations: instead")]
	//	[NoWatch, NoTV, Mac (10,6)]
	//	[Export ("locationManager:didUpdateToLocation:fromLocation:")]
	//	void LocationManager (CLLocationManager manager, CLLocation newLocation, CLLocation oldLocation);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=6.0)));
	//	[Mac (10,9), iOS (6,0)]
	//	[Export ("locationManager:didUpdateLocations:")]
	//	void LocationManager (CLLocationManager manager, CLLocation[] locations);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoWatch, NoTV, NoMac, iOS (3,0)]
	//	[Export ("locationManager:didUpdateHeading:")]
	//	void LocationManager (CLLocationManager manager, CLHeading newHeading);

	//	// @optional -(BOOL)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager * _Nonnull)manager __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoWatch, NoTV, NoMac, iOS (3,0)]
	//	[Export ("locationManagerShouldDisplayHeadingCalibration:")]
	//	bool LocationManagerShouldDisplayHeadingCalibration (CLLocationManager manager);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoWatch, NoTV, Mac (10,10), iOS (7,0)]
	//	[Export ("locationManager:didDetermineState:forRegion:")]
	//	void LocationManager (CLLocationManager manager, CLRegionState state, CLRegion region);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons inRegion:(CLBeaconRegion * _Nonnull)region __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoWatch, NoTV, NoMac, iOS (7,0)]
	//	[Export ("locationManager:didRangeBeacons:inRegion:")]
	//	void LocationManager (CLLocationManager manager, CLBeacon[] beacons, CLBeaconRegion region);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager rangingBeaconsDidFailForRegion:(CLBeaconRegion * _Nonnull)region withError:(NSError * _Nonnull)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoWatch, NoTV, NoMac, iOS (7,0)]
	//	[Export ("locationManager:rangingBeaconsDidFailForRegion:withError:")]
	//	void LocationManager (CLLocationManager manager, CLBeaconRegion region, NSError error);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didEnterRegion:(CLRegion * _Nonnull)region __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, Mac (10,8), iOS (4,0)]
	//	[Export ("locationManager:didEnterRegion:")]
	//	void LocationManager (CLLocationManager manager, CLRegion region);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, Mac (10,8), iOS (4,0)]
	//	[Export ("locationManager:didExitRegion:")]
	//	void LocationManager (CLLocationManager manager, CLRegion region);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
	//	[Export ("locationManager:didFailWithError:")]
	//	void LocationManager (CLLocationManager manager, NSError error);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager monitoringDidFailForRegion:(CLRegion * _Nullable)region withError:(NSError * _Nonnull)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=4.0)));
	//	[NoWatch, NoTV, Mac (10,8), iOS (4,0)]
	//	[Export ("locationManager:monitoringDidFailForRegion:withError:")]
	//	void LocationManager (CLLocationManager manager, [NullAllowed] CLRegion region, NSError error);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.2)));
	//	[Mac (10,7), iOS (4,2)]
	//	[Export ("locationManager:didChangeAuthorizationStatus:")]
	//	void LocationManager (CLLocationManager manager, CLAuthorizationStatus status);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didStartMonitoringForRegion:(CLRegion * _Nonnull)region __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoWatch, NoTV, Mac (10,8), iOS (5,0)]
	//	[Export ("locationManager:didStartMonitoringForRegion:")]
	//	void LocationManager (CLLocationManager manager, CLRegion region);

	//	// @optional -(void)locationManagerDidPauseLocationUpdates:(CLLocationManager * _Nonnull)manager __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoWatch, NoTV, NoMac, iOS (6,0)]
	//	[Export ("locationManagerDidPauseLocationUpdates:")]
	//	void LocationManagerDidPauseLocationUpdates (CLLocationManager manager);

	//	// @optional -(void)locationManagerDidResumeLocationUpdates:(CLLocationManager * _Nonnull)manager __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoWatch, NoTV, NoMac, iOS (6,0)]
	//	[Export ("locationManagerDidResumeLocationUpdates:")]
	//	void LocationManagerDidResumeLocationUpdates (CLLocationManager manager);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didFinishDeferredUpdatesWithError:(NSError * _Nullable)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoWatch, NoTV, Mac (10,9), iOS (6,0)]
	//	[Export ("locationManager:didFinishDeferredUpdatesWithError:")]
	//	void LocationManager (CLLocationManager manager, [NullAllowed] NSError error);

	//	// @optional -(void)locationManager:(CLLocationManager * _Nonnull)manager didVisit:(CLVisit * _Nonnull)visit __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoWatch, NoTV, NoMac, iOS (8,0)]
	//	[Export ("locationManager:didVisit:")]
	//	void LocationManager (CLLocationManager manager, CLVisit visit);
	//}

	//// @interface CLVisitExtensions (CLLocationManager)
	//[Category]
	//[BaseType (typeof(CLLocationManager))]
	//interface CLLocationManager_CLVisitExtensions
	//{
	//	// -(void)startMonitoringVisits __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoWatch, NoTV, iOS (8,0)]
	//	[Export ("startMonitoringVisits")]
	//	void StartMonitoringVisits ();

	//	// -(void)stopMonitoringVisits __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoWatch, NoTV, iOS (8,0)]
	//	[Export ("stopMonitoringVisits")]
	//	void StopMonitoringVisits ();
	//}

	//// @interface CLPlacemark : NSObject <NSCopying, NSSecureCoding>
	//[Mac (10,8), iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface CLPlacemark : INSCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nonnull)initWithPlacemark:(CLPlacemark * _Nonnull)placemark;
	//	[Export ("initWithPlacemark:")]
	//	IntPtr Constructor (CLPlacemark placemark);

	//	// @property (readonly, copy, nonatomic) CLLocation * _Nullable location;
	//	[NullAllowed, Export ("location", ArgumentSemantic.Copy)]
	//	CLLocation Location { get; }

	//	// @property (readonly, copy, nonatomic) CLRegion * _Nullable region;
	//	[NullAllowed, Export ("region", ArgumentSemantic.Copy)]
	//	CLRegion Region { get; }

	//	// @property (readonly, copy, nonatomic) NSTimeZone * _Nullable timeZone __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("timeZone", ArgumentSemantic.Copy)]
	//	NSTimeZone TimeZone { get; }

	//	// @property (readonly, copy, nonatomic) NSDictionary * _Nullable addressDictionary __attribute__((availability(watchos, introduced=1.0, deprecated=4.0))) __attribute__((availability(ios, introduced=5.0, deprecated=11.0))) __attribute__((availability(macos, introduced=10.8, deprecated=10.13)));
	//	[Introduced (PlatformName.WatchOS, 1, 0, message: "Use @properties")]
	//	[Deprecated (PlatformName.WatchOS, 4, 0, message: "Use @properties")]
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use @properties")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use @properties")]
	//	[Introduced (PlatformName.MacOSX, 10, 8, message: "Use @properties")]
	//	[Deprecated (PlatformName.MacOSX, 10, 13, message: "Use @properties")]
	//	[NullAllowed, Export ("addressDictionary", ArgumentSemantic.Copy)]
	//	NSDictionary AddressDictionary { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable name;
	//	[NullAllowed, Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable thoroughfare;
	//	[NullAllowed, Export ("thoroughfare")]
	//	string Thoroughfare { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable subThoroughfare;
	//	[NullAllowed, Export ("subThoroughfare")]
	//	string SubThoroughfare { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable locality;
	//	[NullAllowed, Export ("locality")]
	//	string Locality { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable subLocality;
	//	[NullAllowed, Export ("subLocality")]
	//	string SubLocality { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable administrativeArea;
	//	[NullAllowed, Export ("administrativeArea")]
	//	string AdministrativeArea { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable subAdministrativeArea;
	//	[NullAllowed, Export ("subAdministrativeArea")]
	//	string SubAdministrativeArea { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable postalCode;
	//	[NullAllowed, Export ("postalCode")]
	//	string PostalCode { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable ISOcountryCode;
	//	[NullAllowed, Export ("ISOcountryCode")]
	//	string ISOcountryCode { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable country;
	//	[NullAllowed, Export ("country")]
	//	string Country { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable inlandWater;
	//	[NullAllowed, Export ("inlandWater")]
	//	string InlandWater { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable ocean;
	//	[NullAllowed, Export ("ocean")]
	//	string Ocean { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nullable areasOfInterest;
	//	[NullAllowed, Export ("areasOfInterest", ArgumentSemantic.Copy)]
	//	string[] AreasOfInterest { get; }
	//}

	//// @interface ContactsAdditions (CLPlacemark)
	//[Category]
	//[BaseType (typeof(CLPlacemark))]
	//interface CLPlacemark_ContactsAdditions
	//{
	//	// @property (readonly, nonatomic) CNPostalAddress * _Nullable postalAddress __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4, 0), NoTV, Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("postalAddress")]
	//	CNPostalAddress PostalAddress { get; }
	//}

	//// typedef void (^CLGeocodeCompletionHandler)(NSArray<CLPlacemark *> * _Nullable, NSError * _Nullable);
	//delegate void CLGeocodeCompletionHandler ([NullAllowed] CLPlacemark[] arg0, [NullAllowed] NSError arg1);

	//// @interface CLGeocoder : NSObject
	//[Mac (10,8), iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface CLGeocoder
	//{
	//	// @property (readonly, getter = isGeocoding, nonatomic) BOOL geocoding;
	//	[Export ("geocoding")]
	//	bool Geocoding { [Bind ("isGeocoding")] get; }

	//	// -(void)reverseGeocodeLocation:(CLLocation * _Nonnull)location completionHandler:(CLGeocodeCompletionHandler _Nonnull)completionHandler;
	//	[Export ("reverseGeocodeLocation:completionHandler:")]
	//	void ReverseGeocodeLocation (CLLocation location, CLGeocodeCompletionHandler completionHandler);

	//	// -(void)reverseGeocodeLocation:(CLLocation * _Nonnull)location preferredLocale:(NSLocale * _Nullable)locale completionHandler:(CLGeocodeCompletionHandler _Nonnull)completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("reverseGeocodeLocation:preferredLocale:completionHandler:")]
	//	void ReverseGeocodeLocation (CLLocation location, [NullAllowed] NSLocale locale, CLGeocodeCompletionHandler completionHandler);

	//	// -(void)geocodeAddressDictionary:(NSDictionary * _Nonnull)addressDictionary completionHandler:(CLGeocodeCompletionHandler _Nonnull)completionHandler __attribute__((availability(watchos, introduced=1.0, deprecated=4.0))) __attribute__((availability(ios, introduced=5.0, deprecated=11.0))) __attribute__((availability(macos, introduced=10.8, deprecated=10.13)));
	//	[Introduced (PlatformName.WatchOS, 1, 0, message: "Use -geocodePostalAddress:completionHandler:")]
	//	[Deprecated (PlatformName.WatchOS, 4, 0, message: "Use -geocodePostalAddress:completionHandler:")]
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use -geocodePostalAddress:completionHandler:")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use -geocodePostalAddress:completionHandler:")]
	//	[Introduced (PlatformName.MacOSX, 10, 8, message: "Use -geocodePostalAddress:completionHandler:")]
	//	[Deprecated (PlatformName.MacOSX, 10, 13, message: "Use -geocodePostalAddress:completionHandler:")]
	//	[Export ("geocodeAddressDictionary:completionHandler:")]
	//	void GeocodeAddressDictionary (NSDictionary addressDictionary, CLGeocodeCompletionHandler completionHandler);

	//	// -(void)geocodeAddressString:(NSString * _Nonnull)addressString completionHandler:(CLGeocodeCompletionHandler _Nonnull)completionHandler;
	//	[Export ("geocodeAddressString:completionHandler:")]
	//	void GeocodeAddressString (string addressString, CLGeocodeCompletionHandler completionHandler);

	//	// -(void)geocodeAddressString:(NSString * _Nonnull)addressString inRegion:(CLRegion * _Nullable)region completionHandler:(CLGeocodeCompletionHandler _Nonnull)completionHandler;
	//	[Export ("geocodeAddressString:inRegion:completionHandler:")]
	//	void GeocodeAddressString (string addressString, [NullAllowed] CLRegion region, CLGeocodeCompletionHandler completionHandler);

	//	// -(void)geocodeAddressString:(NSString * _Nonnull)addressString inRegion:(CLRegion * _Nullable)region preferredLocale:(NSLocale * _Nullable)locale completionHandler:(CLGeocodeCompletionHandler _Nonnull)completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("geocodeAddressString:inRegion:preferredLocale:completionHandler:")]
	//	void GeocodeAddressString (string addressString, [NullAllowed] CLRegion region, [NullAllowed] NSLocale locale, CLGeocodeCompletionHandler completionHandler);

	//	// -(void)cancelGeocode;
	//	[Export ("cancelGeocode")]
	//	void CancelGeocode ();
	//}

	//// @interface ContactsAdditions (CLGeocoder)
	//[Category]
	//[BaseType (typeof(CLGeocoder))]
	//interface CLGeocoder_ContactsAdditions
	//{
	//	// -(void)geocodePostalAddress:(CNPostalAddress * _Nonnull)postalAddress completionHandler:(CLGeocodeCompletionHandler _Nonnull)completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0)));
	//	[Watch (4,0), NoTV, Mac (10,13), iOS (11,0)]
	//	[Export ("geocodePostalAddress:completionHandler:")]
	//	void GeocodePostalAddress (CNPostalAddress postalAddress, CLGeocodeCompletionHandler completionHandler);

	//	// -(void)geocodePostalAddress:(CNPostalAddress * _Nonnull)postalAddress preferredLocale:(NSLocale * _Nullable)locale completionHandler:(CLGeocodeCompletionHandler _Nonnull)completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[Watch (4,0), NoTV, Mac (10,13), iOS (11,0)]
	//	[Export ("geocodePostalAddress:preferredLocale:completionHandler:")]
	//	void GeocodePostalAddress (CNPostalAddress postalAddress, [NullAllowed] NSLocale locale, CLGeocodeCompletionHandler completionHandler);
	//}

	//// @protocol NSFileProviderItem <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSFileProviderItem
	//{
	//	// @required @property (readonly, copy, nonatomic) NSFileProviderItemIdentifier _Nonnull itemIdentifier;
	//	[Abstract]
	//	[Export ("itemIdentifier")]
	//	string ItemIdentifier { get; }

	//	// @required @property (readonly, copy, nonatomic) NSFileProviderItemIdentifier _Nonnull parentItemIdentifier;
	//	[Abstract]
	//	[Export ("parentItemIdentifier")]
	//	string ParentItemIdentifier { get; }

	//	// @required @property (readonly, copy, nonatomic) NSString * _Nonnull filename;
	//	[Abstract]
	//	[Export ("filename")]
	//	string Filename { get; }

	//	// @required @property (readonly, copy, nonatomic) NSString * _Nonnull typeIdentifier;
	//	[Abstract]
	//	[Export ("typeIdentifier")]
	//	string TypeIdentifier { get; }

	//	// @optional @property (readonly, nonatomic) NSFileProviderItemCapabilities capabilities;
	//	[Export ("capabilities")]
	//	NSFileProviderItemCapabilities Capabilities { get; }

	//	// @optional @property (readonly, copy, nonatomic) NSNumber * _Nullable documentSize;
	//	[NullAllowed, Export ("documentSize", ArgumentSemantic.Copy)]
	//	NSNumber DocumentSize { get; }

	//	// @optional @property (readonly, copy, nonatomic) NSNumber * _Nullable childItemCount;
	//	[NullAllowed, Export ("childItemCount", ArgumentSemantic.Copy)]
	//	NSNumber ChildItemCount { get; }

	//	// @optional @property (readonly, copy, nonatomic) NSDate * _Nullable creationDate;
	//	[NullAllowed, Export ("creationDate", ArgumentSemantic.Copy)]
	//	NSDate CreationDate { get; }

	//	// @optional @property (readonly, copy, nonatomic) NSDate * _Nullable contentModificationDate;
	//	[NullAllowed, Export ("contentModificationDate", ArgumentSemantic.Copy)]
	//	NSDate ContentModificationDate { get; }

	//	// @optional @property (readonly, copy, nonatomic) NSDate * _Nullable lastUsedDate;
	//	[NullAllowed, Export ("lastUsedDate", ArgumentSemantic.Copy)]
	//	NSDate LastUsedDate { get; }

	//	// @optional @property (readonly, copy, nonatomic) NSData * _Nullable tagData;
	//	[NullAllowed, Export ("tagData", ArgumentSemantic.Copy)]
	//	NSData TagData { get; }

	//	// @optional @property (readonly, copy, nonatomic) NSNumber * _Nullable favoriteRank;
	//	[NullAllowed, Export ("favoriteRank", ArgumentSemantic.Copy)]
	//	NSNumber FavoriteRank { get; }

	//	// @optional @property (readonly, getter = isTrashed, nonatomic) BOOL trashed;
	//	[Export ("trashed")]
	//	bool Trashed { [Bind ("isTrashed")] get; }

	//	// @optional @property (readonly, getter = isUploaded, nonatomic) BOOL uploaded;
	//	[Export ("uploaded")]
	//	bool Uploaded { [Bind ("isUploaded")] get; }

	//	// @optional @property (readonly, getter = isUploading, nonatomic) BOOL uploading;
	//	[Export ("uploading")]
	//	bool Uploading { [Bind ("isUploading")] get; }

	//	// @optional @property (readonly, copy, nonatomic) NSError * _Nullable uploadingError;
	//	[NullAllowed, Export ("uploadingError", ArgumentSemantic.Copy)]
	//	NSError UploadingError { get; }

	//	// @optional @property (readonly, getter = isDownloaded, nonatomic) BOOL downloaded;
	//	[Export ("downloaded")]
	//	bool Downloaded { [Bind ("isDownloaded")] get; }

	//	// @optional @property (readonly, getter = isDownloading, nonatomic) BOOL downloading;
	//	[Export ("downloading")]
	//	bool Downloading { [Bind ("isDownloading")] get; }

	//	// @optional @property (readonly, copy, nonatomic) NSError * _Nullable downloadingError;
	//	[NullAllowed, Export ("downloadingError", ArgumentSemantic.Copy)]
	//	NSError DownloadingError { get; }

	//	// @optional @property (readonly, getter = isMostRecentVersionDownloaded, nonatomic) BOOL mostRecentVersionDownloaded;
	//	[Export ("mostRecentVersionDownloaded")]
	//	bool MostRecentVersionDownloaded { [Bind ("isMostRecentVersionDownloaded")] get; }

	//	// @optional @property (readonly, getter = isShared, nonatomic) BOOL shared;
	//	[Export ("shared")]
	//	bool Shared { [Bind ("isShared")] get; }

	//	// @optional @property (readonly, getter = isSharedByCurrentUser, nonatomic) BOOL sharedByCurrentUser;
	//	[Export ("sharedByCurrentUser")]
	//	bool SharedByCurrentUser { [Bind ("isSharedByCurrentUser")] get; }

	//	// @optional @property (readonly, nonatomic, strong) NSPersonNameComponents * _Nullable ownerNameComponents;
	//	[NullAllowed, Export ("ownerNameComponents", ArgumentSemantic.Strong)]
	//	NSPersonNameComponents OwnerNameComponents { get; }

	//	// @optional @property (readonly, nonatomic, strong) NSPersonNameComponents * _Nullable mostRecentEditorNameComponents;
	//	[NullAllowed, Export ("mostRecentEditorNameComponents", ArgumentSemantic.Strong)]
	//	NSPersonNameComponents MostRecentEditorNameComponents { get; }

	//	// @optional @property (readonly, nonatomic, strong) NSData * _Nullable versionIdentifier;
	//	[NullAllowed, Export ("versionIdentifier", ArgumentSemantic.Strong)]
	//	NSData VersionIdentifier { get; }

	//	// @optional @property (readonly, nonatomic, strong) NSDictionary * _Nullable userInfo;
	//	[NullAllowed, Export ("userInfo", ArgumentSemantic.Strong)]
	//	NSDictionary UserInfo { get; }
	//}

	//// @interface NSFileProviderExtension : NSObject
	//[NoWatch, NoTV, NoMac, iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSFileProviderExtension
	//{
	//	// -(NSURL * _Nullable)URLForItemWithPersistentIdentifier:(NSFileProviderItemIdentifier _Nonnull)identifier;
	//	[Export ("URLForItemWithPersistentIdentifier:")]
	//	[return: NullAllowed]
	//	NSUrl URLForItemWithPersistentIdentifier (string identifier);

	//	// -(NSFileProviderItemIdentifier _Nullable)persistentIdentifierForItemAtURL:(NSURL * _Nonnull)url;
	//	[Export ("persistentIdentifierForItemAtURL:")]
	//	[return: NullAllowed]
	//	string PersistentIdentifierForItemAtURL (NSUrl url);

	//	// -(NSFileProviderItem _Nullable)itemForIdentifier:(NSFileProviderItemIdentifier _Nonnull)identifier error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("itemForIdentifier:error:")]
	//	[return: NullAllowed]
	//	NSFileProviderItem ItemForIdentifier (string identifier, [NullAllowed] out NSError error);

	//	// -(void)providePlaceholderAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
	//	[Export ("providePlaceholderAtURL:completionHandler:")]
	//	void ProvidePlaceholderAtURL (NSUrl url, Action<NSError> completionHandler);

	//	// -(void)startProvidingItemAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
	//	[Export ("startProvidingItemAtURL:completionHandler:")]
	//	void StartProvidingItemAtURL (NSUrl url, Action<NSError> completionHandler);

	//	// -(void)stopProvidingItemAtURL:(NSURL * _Nonnull)url;
	//	[Export ("stopProvidingItemAtURL:")]
	//	void StopProvidingItemAtURL (NSUrl url);

	//	// -(void)itemChangedAtURL:(NSURL * _Nonnull)url;
	//	[Export ("itemChangedAtURL:")]
	//	void ItemChangedAtURL (NSUrl url);
	//}

	//// @interface Deprecated (NSFileProviderExtension)
	//[Category]
	//[BaseType (typeof(NSFileProviderExtension))]
	//interface NSFileProviderExtension_Deprecated
	//{
	//	// +(BOOL)writePlaceholderAtURL:(NSURL * _Nonnull)placeholderURL withMetadata:(NSDictionary<NSURLResourceKey,id> * _Nonnull)metadata error:(NSError * _Nullable * _Nullable)error __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use the corresponding method on NSFileProviderManager instead")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use the corresponding method on NSFileProviderManager instead")]
	//	[NoWatch, NoTV, NoMac]
	//	[Static]
	//	[Export ("writePlaceholderAtURL:withMetadata:error:")]
	//	bool WritePlaceholderAtURL (NSUrl placeholderURL, NSDictionary<NSString, NSObject> metadata, [NullAllowed] out NSError error);

	//	// +(NSURL * _Nonnull)placeholderURLForURL:(NSURL * _Nonnull)url __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 8, 0)]
	//	[Deprecated (PlatformName.iOS, 11, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Static]
	//	[Export ("placeholderURLForURL:")]
	//	NSUrl PlaceholderURLForURL (NSUrl url);

	//	// @property (readonly, nonatomic) NSString * _Nonnull providerIdentifier __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 8, 0)]
	//	[Deprecated (PlatformName.iOS, 11, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("providerIdentifier")]
	//	string ProviderIdentifier { get; }

	//	// @property (readonly, nonatomic) NSURL * _Nonnull documentStorageURL __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 8, 0)]
	//	[Deprecated (PlatformName.iOS, 11, 0)]
	//	[NoWatch, NoTV, NoMac]
	//	[Export ("documentStorageURL")]
	//	NSUrl DocumentStorageURL { get; }
	//}

	//// @interface NSFileProviderDomain : NSObject
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSFileProviderDomain
	//{
	//	// -(instancetype _Nonnull)initWithIdentifier:(NSFileProviderDomainIdentifier _Nonnull)identifier displayName:(NSString * _Nonnull)displayName pathRelativeToDocumentStorage:(NSString * _Nonnull)pathRelativeToDocumentStorage;
	//	[Export ("initWithIdentifier:displayName:pathRelativeToDocumentStorage:")]
	//	IntPtr Constructor (string identifier, string displayName, string pathRelativeToDocumentStorage);

	//	// @property (readonly, copy) NSFileProviderDomainIdentifier _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (readonly, copy) NSString * _Nonnull displayName;
	//	[Export ("displayName")]
	//	string DisplayName { get; }

	//	// @property (readonly, copy) NSString * _Nonnull pathRelativeToDocumentStorage;
	//	[Export ("pathRelativeToDocumentStorage")]
	//	string PathRelativeToDocumentStorage { get; }
	//}

	//// @interface NSFileProviderDomain (NSFileProviderExtension)
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[Category]
	//[BaseType (typeof(NSFileProviderExtension))]
	//interface NSFileProviderExtension_NSFileProviderDomain
	//{
	//	// @property (readonly, nonatomic) NSFileProviderDomain * _Nullable domain;
	//	[NullAllowed, Export ("domain")]
	//	NSFileProviderDomain Domain { get; }
	//}

	//// @protocol NSFileProviderEnumerationObserver <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSFileProviderEnumerationObserver
	//{
	//	// @required -(void)didEnumerateItems:(NSArray<id<NSFileProviderItem>> * _Nonnull)updatedItems;
	//	[Abstract]
	//	[Export ("didEnumerateItems:")]
	//	void DidEnumerateItems (NSFileProviderItem[] updatedItems);

	//	// @required -(void)finishEnumeratingUpToPage:(NSFileProviderPage _Nullable)nextPage;
	//	[Abstract]
	//	[Export ("finishEnumeratingUpToPage:")]
	//	void FinishEnumeratingUpToPage ([NullAllowed] NSData nextPage);

	//	// @required -(void)finishEnumeratingWithError:(NSError * _Nonnull)error;
	//	[Abstract]
	//	[Export ("finishEnumeratingWithError:")]
	//	void FinishEnumeratingWithError (NSError error);
	//}

	//// @protocol NSFileProviderChangeObserver <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSFileProviderChangeObserver
	//{
	//	// @required -(void)didUpdateItems:(NSArray<id<NSFileProviderItem>> * _Nonnull)updatedItems;
	//	[Abstract]
	//	[Export ("didUpdateItems:")]
	//	void DidUpdateItems (NSFileProviderItem[] updatedItems);

	//	// @required -(void)didDeleteItemsWithIdentifiers:(NSArray<NSFileProviderItemIdentifier> * _Nonnull)deletedItemIdentifiers;
	//	[Abstract]
	//	[Export ("didDeleteItemsWithIdentifiers:")]
	//	void DidDeleteItemsWithIdentifiers (string[] deletedItemIdentifiers);

	//	// @required -(void)finishEnumeratingChangesUpToSyncAnchor:(NSFileProviderSyncAnchor _Nonnull)anchor moreComing:(BOOL)moreComing;
	//	[Abstract]
	//	[Export ("finishEnumeratingChangesUpToSyncAnchor:moreComing:")]
	//	void FinishEnumeratingChangesUpToSyncAnchor (NSData anchor, bool moreComing);

	//	// @required -(void)finishEnumeratingWithError:(NSError * _Nonnull)error;
	//	[Abstract]
	//	[Export ("finishEnumeratingWithError:")]
	//	void FinishEnumeratingWithError (NSError error);
	//}

	//// @protocol NSFileProviderEnumerator <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSFileProviderEnumerator
	//{
	//	// @required -(void)invalidate;
	//	[Abstract]
	//	[Export ("invalidate")]
	//	void Invalidate ();

	//	// @required -(void)enumerateItemsForObserver:(id<NSFileProviderEnumerationObserver> _Nonnull)observer startingAtPage:(NSFileProviderPage _Nonnull)page;
	//	[Abstract]
	//	[Export ("enumerateItemsForObserver:startingAtPage:")]
	//	void EnumerateItemsForObserver (NSFileProviderEnumerationObserver observer, NSData page);

	//	// @optional -(void)enumerateChangesForObserver:(id<NSFileProviderChangeObserver> _Nonnull)observer fromSyncAnchor:(NSFileProviderSyncAnchor _Nonnull)syncAnchor;
	//	[Export ("enumerateChangesForObserver:fromSyncAnchor:")]
	//	void EnumerateChangesForObserver (NSFileProviderChangeObserver observer, NSData syncAnchor);

	//	// @optional -(void)currentSyncAnchorWithCompletionHandler:(void (^ _Nonnull)(NSFileProviderSyncAnchor _Nullable))completionHandler;
	//	[Export ("currentSyncAnchorWithCompletionHandler:")]
	//	void CurrentSyncAnchorWithCompletionHandler (Action<NSData> completionHandler);
	//}

	//// @interface NSFileProviderEnumeration (NSFileProviderExtension)
	//[Category]
	//[BaseType (typeof(NSFileProviderExtension))]
	//interface NSFileProviderExtension_NSFileProviderEnumeration
	//{
	//	// -(id<NSFileProviderEnumerator> _Nullable)enumeratorForContainerItemIdentifier:(NSFileProviderItemIdentifier _Nonnull)containerItemIdentifier error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("enumeratorForContainerItemIdentifier:error:")]
	//	[return: NullAllowed]
	//	NSFileProviderEnumerator EnumeratorForContainerItemIdentifier (string containerItemIdentifier, [NullAllowed] out NSError error);
	//}

	//// @interface NSFileProviderError (NSError)
	//[Category]
	//[BaseType (typeof(NSError))]
	//interface NSError_NSFileProviderError
	//{
	//	// +(instancetype _Nonnull)fileProviderErrorForCollisionWithItem:(NSFileProviderItem _Nonnull)existingItem __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Static]
	//	[Export ("fileProviderErrorForCollisionWithItem:")]
	//	NSError FileProviderErrorForCollisionWithItem (NSFileProviderItem existingItem);

	//	// +(instancetype _Nonnull)fileProviderErrorForNonExistentItemWithIdentifier:(NSFileProviderItemIdentifier _Nonnull)itemIdentifier __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Static]
	//	[Export ("fileProviderErrorForNonExistentItemWithIdentifier:")]
	//	NSError FileProviderErrorForNonExistentItemWithIdentifier (string itemIdentifier);
	//}

	//// @interface NSFileProviderManager : NSObject
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface NSFileProviderManager
	//{
	//	// @property (readonly, strong, class) NSFileProviderManager * _Nonnull defaultManager;
	//	[Static]
	//	[Export ("defaultManager", ArgumentSemantic.Strong)]
	//	NSFileProviderManager DefaultManager { get; }

	//	// -(void)signalEnumeratorForContainerItemIdentifier:(NSFileProviderItemIdentifier _Nonnull)containerItemIdentifier completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completion;
	//	[Export ("signalEnumeratorForContainerItemIdentifier:completionHandler:")]
	//	void SignalEnumeratorForContainerItemIdentifier (string containerItemIdentifier, Action<NSError> completion);

	//	// -(void)registerURLSessionTask:(NSURLSessionTask * _Nonnull)task forItemWithIdentifier:(NSFileProviderItemIdentifier _Nonnull)identifier completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completion;
	//	[Export ("registerURLSessionTask:forItemWithIdentifier:completionHandler:")]
	//	void RegisterURLSessionTask (NSUrlSessionTask task, string identifier, Action<NSError> completion);

	//	// @property (readonly, nonatomic) NSString * _Nonnull providerIdentifier;
	//	[Export ("providerIdentifier")]
	//	string ProviderIdentifier { get; }

	//	// @property (readonly, nonatomic) NSURL * _Nonnull documentStorageURL;
	//	[Export ("documentStorageURL")]
	//	NSUrl DocumentStorageURL { get; }

	//	// +(BOOL)writePlaceholderAtURL:(NSURL * _Nonnull)placeholderURL withMetadata:(NSFileProviderItem _Nonnull)metadata error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("writePlaceholderAtURL:withMetadata:error:")]
	//	bool WritePlaceholderAtURL (NSUrl placeholderURL, NSFileProviderItem metadata, [NullAllowed] out NSError error);

	//	// +(NSURL * _Nonnull)placeholderURLForURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("placeholderURLForURL:")]
	//	NSUrl PlaceholderURLForURL (NSUrl url);

	//	// +(void)addDomain:(NSFileProviderDomain * _Nonnull)domain completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
	//	[Static]
	//	[Export ("addDomain:completionHandler:")]
	//	void AddDomain (NSFileProviderDomain domain, Action<NSError> completionHandler);

	//	// +(void)removeDomain:(NSFileProviderDomain * _Nonnull)domain completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
	//	[Static]
	//	[Export ("removeDomain:completionHandler:")]
	//	void RemoveDomain (NSFileProviderDomain domain, Action<NSError> completionHandler);

	//	// +(void)getDomainsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSFileProviderDomain *> * _Nonnull, NSError * _Nullable))completionHandler;
	//	[Static]
	//	[Export ("getDomainsWithCompletionHandler:")]
	//	void GetDomainsWithCompletionHandler (Action<NSArray<NSFileProviderDomain>, NSError> completionHandler);

	//	// +(void)removeAllDomainsWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
	//	[Static]
	//	[Export ("removeAllDomainsWithCompletionHandler:")]
	//	void RemoveAllDomainsWithCompletionHandler (Action<NSError> completionHandler);

	//	// +(instancetype _Nullable)managerForDomain:(NSFileProviderDomain * _Nonnull)domain;
	//	[Static]
	//	[Export ("managerForDomain:")]
	//	[return: NullAllowed]
	//	NSFileProviderManager ManagerForDomain (NSFileProviderDomain domain);
	//}

	//// @interface NSFileProviderActions (NSFileProviderExtension)
	//[Category]
	//[BaseType (typeof(NSFileProviderExtension))]
	//interface NSFileProviderExtension_NSFileProviderActions
	//{
	//	// -(void)importDocumentAtURL:(NSURL * _Nonnull)fileURL toParentItemIdentifier:(NSFileProviderItemIdentifier _Nonnull)parentItemIdentifier completionHandler:(void (^ _Nonnull)(NSFileProviderItem _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("importDocumentAtURL:toParentItemIdentifier:completionHandler:")]
	//	void ImportDocumentAtURL (NSUrl fileURL, string parentItemIdentifier, Action<NSFileProviderItem, NSError> completionHandler);

	//	// -(void)createDirectoryWithName:(NSString * _Nonnull)directoryName inParentItemIdentifier:(NSFileProviderItemIdentifier _Nonnull)parentItemIdentifier completionHandler:(void (^ _Nonnull)(NSFileProviderItem _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("createDirectoryWithName:inParentItemIdentifier:completionHandler:")]
	//	void CreateDirectoryWithName (string directoryName, string parentItemIdentifier, Action<NSFileProviderItem, NSError> completionHandler);

	//	// -(void)renameItemWithIdentifier:(NSFileProviderItemIdentifier _Nonnull)itemIdentifier toName:(NSString * _Nonnull)itemName completionHandler:(void (^ _Nonnull)(NSFileProviderItem _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("renameItemWithIdentifier:toName:completionHandler:")]
	//	void RenameItemWithIdentifier (string itemIdentifier, string itemName, Action<NSFileProviderItem, NSError> completionHandler);

	//	// -(void)reparentItemWithIdentifier:(NSFileProviderItemIdentifier _Nonnull)itemIdentifier toParentItemWithIdentifier:(NSFileProviderItemIdentifier _Nonnull)parentItemIdentifier newName:(NSString * _Nullable)newName completionHandler:(void (^ _Nonnull)(NSFileProviderItem _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("reparentItemWithIdentifier:toParentItemWithIdentifier:newName:completionHandler:")]
	//	void ReparentItemWithIdentifier (string itemIdentifier, string parentItemIdentifier, [NullAllowed] string newName, Action<NSFileProviderItem, NSError> completionHandler);

	//	// -(void)trashItemWithIdentifier:(NSFileProviderItemIdentifier _Nonnull)itemIdentifier completionHandler:(void (^ _Nonnull)(NSFileProviderItem _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("trashItemWithIdentifier:completionHandler:")]
	//	void TrashItemWithIdentifier (string itemIdentifier, Action<NSFileProviderItem, NSError> completionHandler);

	//	// -(void)untrashItemWithIdentifier:(NSFileProviderItemIdentifier _Nonnull)itemIdentifier toParentItemIdentifier:(NSFileProviderItemIdentifier _Nullable)parentItemIdentifier completionHandler:(void (^ _Nonnull)(NSFileProviderItem _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("untrashItemWithIdentifier:toParentItemIdentifier:completionHandler:")]
	//	void UntrashItemWithIdentifier (string itemIdentifier, [NullAllowed] string parentItemIdentifier, Action<NSFileProviderItem, NSError> completionHandler);

	//	// -(void)deleteItemWithIdentifier:(NSFileProviderItemIdentifier _Nonnull)itemIdentifier completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("deleteItemWithIdentifier:completionHandler:")]
	//	void DeleteItemWithIdentifier (string itemIdentifier, Action<NSError> completionHandler);

	//	// -(void)setLastUsedDate:(NSDate * _Nullable)lastUsedDate forItemIdentifier:(NSFileProviderItemIdentifier _Nonnull)itemIdentifier completionHandler:(void (^ _Nonnull)(NSFileProviderItem _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("setLastUsedDate:forItemIdentifier:completionHandler:")]
	//	void SetLastUsedDate ([NullAllowed] NSDate lastUsedDate, string itemIdentifier, Action<NSFileProviderItem, NSError> completionHandler);

	//	// -(void)setTagData:(NSData * _Nullable)tagData forItemIdentifier:(NSFileProviderItemIdentifier _Nonnull)itemIdentifier completionHandler:(void (^ _Nonnull)(NSFileProviderItem _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("setTagData:forItemIdentifier:completionHandler:")]
	//	void SetTagData ([NullAllowed] NSData tagData, string itemIdentifier, Action<NSFileProviderItem, NSError> completionHandler);

	//	// -(void)setFavoriteRank:(NSNumber * _Nullable)favoriteRank forItemIdentifier:(NSFileProviderItemIdentifier _Nonnull)itemIdentifier completionHandler:(void (^ _Nonnull)(NSFileProviderItem _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("setFavoriteRank:forItemIdentifier:completionHandler:")]
	//	void SetFavoriteRank ([NullAllowed] NSNumber favoriteRank, string itemIdentifier, Action<NSFileProviderItem, NSError> completionHandler);
	//}

	//// @protocol NSFileProviderServiceSource
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[Protocol, Model]
	//interface NSFileProviderServiceSource
	//{
	//	// @required @property (readonly, copy, nonatomic) NSFileProviderServiceName _Nonnull serviceName;
	//	[Abstract]
	//	[Export ("serviceName")]
	//	string ServiceName { get; }

	//	// @required -(NSXPCListenerEndpoint * _Nullable)makeListenerEndpointAndReturnError:(NSError * _Nullable * _Nullable)error;
	//	[Abstract]
	//	[Export ("makeListenerEndpointAndReturnError:")]
	//	[return: NullAllowed]
	//	NSXpcListenerEndpoint MakeListenerEndpointAndReturnError ([NullAllowed] out NSError error);
	//}

	//// @interface NSFileProviderService (NSFileProviderExtension)
	//[Category]
	//[BaseType (typeof(NSFileProviderExtension))]
	//interface NSFileProviderExtension_NSFileProviderService
	//{
	//	// -(NSArray<id<NSFileProviderServiceSource>> * _Nullable)supportedServiceSourcesForItemIdentifier:(NSFileProviderItemIdentifier _Nonnull)itemIdentifier error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("supportedServiceSourcesForItemIdentifier:error:")]
	//	[return: NullAllowed]
	//	NSFileProviderServiceSource[] SupportedServiceSourcesForItemIdentifier (string itemIdentifier, [NullAllowed] out NSError error);
	//}

	//// @interface NSFileProviderThumbnailing (NSFileProviderExtension)
	//[Category]
	//[BaseType (typeof(NSFileProviderExtension))]
	//interface NSFileProviderExtension_NSFileProviderThumbnailing
	//{
	//	// -(NSProgress * _Nonnull)fetchThumbnailsForItemIdentifiers:(NSArray<NSFileProviderItemIdentifier> * _Nonnull)itemIdentifiers requestedSize:(CGSize)size perThumbnailCompletionHandler:(void (^ _Nonnull)(NSFileProviderItemIdentifier _Nonnull, NSData * _Nullable, NSError * _Nullable))perThumbnailCompletionHandler completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, NoMac, iOS (11,0)]
	//	[Export ("fetchThumbnailsForItemIdentifiers:requestedSize:perThumbnailCompletionHandler:completionHandler:")]
	//	NSProgress FetchThumbnailsForItemIdentifiers (string[] itemIdentifiers, CGSize size, Action<NSString, NSData, NSError> perThumbnailCompletionHandler, Action<NSError> completionHandler);
	//}

	//// @interface UIAcceleration : NSObject
	//[Introduced (PlatformName.iOS, 2, 0, message: "UIAcceleration has been replaced by the CoreMotion framework")]
	//[Deprecated (PlatformName.iOS, 5, 0, message: "UIAcceleration has been replaced by the CoreMotion framework")]
	//[NoTV]
	//[BaseType (typeof(NSObject))]
	//interface UIAcceleration
	//{
	//	// @property (readonly, nonatomic) NSTimeInterval timestamp;
	//	[Export ("timestamp")]
	//	double Timestamp { get; }

	//	// @property (readonly, nonatomic) UIAccelerationValue x;
	//	[Export ("x")]
	//	double X { get; }

	//	// @property (readonly, nonatomic) UIAccelerationValue y;
	//	[Export ("y")]
	//	double Y { get; }

	//	// @property (readonly, nonatomic) UIAccelerationValue z;
	//	[Export ("z")]
	//	double Z { get; }
	//}

	//// @interface UIAccelerometer : NSObject
	//[Introduced (PlatformName.iOS, 2, 0, message: "UIAccelerometer has been replaced by the CoreMotion framework")]
	//[Deprecated (PlatformName.iOS, 5, 0, message: "UIAccelerometer has been replaced by the CoreMotion framework")]
	//[NoTV]
	//[BaseType (typeof(NSObject))]
	//interface UIAccelerometer
	//{
	//	// +(UIAccelerometer * _Nonnull)sharedAccelerometer;
	//	[Static]
	//	[Export ("sharedAccelerometer")]
	//	[Verify (MethodToProperty)]
	//	UIAccelerometer SharedAccelerometer { get; }

	//	// @property (nonatomic) NSTimeInterval updateInterval;
	//	[Export ("updateInterval")]
	//	double UpdateInterval { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIAccelerometerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIAccelerometerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }
	//}

	//// @protocol UIAccelerometerDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIAccelerometerDelegate
	//{
	//	// @optional -(void)accelerometer:(UIAccelerometer * _Nonnull)accelerometer didAccelerate:(UIAcceleration * _Nonnull)acceleration __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=5.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 5, 0)]
	//	[NoTV]
	//	[Export ("accelerometer:didAccelerate:")]
	//	void DidAccelerate (UIAccelerometer accelerometer, UIAcceleration acceleration);
	//}

	//// @interface UIBezierPath : NSObject <NSCopying, NSSecureCoding>
	//[iOS (3,2)]
	//[BaseType (typeof(NSObject))]
	//interface UIBezierPath : INSCopying, INSSecureCoding
	//{
	//	// +(instancetype _Nonnull)bezierPath;
	//	[Static]
	//	[Export ("bezierPath")]
	//	UIBezierPath BezierPath ();

	//	// +(instancetype _Nonnull)bezierPathWithRect:(CGRect)rect;
	//	[Static]
	//	[Export ("bezierPathWithRect:")]
	//	UIBezierPath BezierPathWithRect (CGRect rect);

	//	// +(instancetype _Nonnull)bezierPathWithOvalInRect:(CGRect)rect;
	//	[Static]
	//	[Export ("bezierPathWithOvalInRect:")]
	//	UIBezierPath BezierPathWithOvalInRect (CGRect rect);

	//	// +(instancetype _Nonnull)bezierPathWithRoundedRect:(CGRect)rect cornerRadius:(CGFloat)cornerRadius;
	//	[Static]
	//	[Export ("bezierPathWithRoundedRect:cornerRadius:")]
	//	UIBezierPath BezierPathWithRoundedRect (CGRect rect, nfloat cornerRadius);

	//	// +(instancetype _Nonnull)bezierPathWithRoundedRect:(CGRect)rect byRoundingCorners:(UIRectCorner)corners cornerRadii:(CGSize)cornerRadii;
	//	[Static]
	//	[Export ("bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:")]
	//	UIBezierPath BezierPathWithRoundedRect (CGRect rect, UIRectCorner corners, CGSize cornerRadii);

	//	// +(instancetype _Nonnull)bezierPathWithArcCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise;
	//	[Static]
	//	[Export ("bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:")]
	//	UIBezierPath BezierPathWithArcCenter (CGPoint center, nfloat radius, nfloat startAngle, nfloat endAngle, bool clockwise);

	//	// +(instancetype _Nonnull)bezierPathWithCGPath:(CGPathRef _Nonnull)CGPath;
	//	[Static]
	//	[Export ("bezierPathWithCGPath:")]
	//	unsafe UIBezierPath BezierPathWithCGPath (CGPathRef* CGPath);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (nonatomic) CGPathRef _Nonnull CGPath;
	//	[Export ("CGPath", ArgumentSemantic.Assign)]
	//	unsafe CGPathRef* CGPath { get; set; }

	//	// -(void)moveToPoint:(CGPoint)point;
	//	[Export ("moveToPoint:")]
	//	void MoveToPoint (CGPoint point);

	//	// -(void)addLineToPoint:(CGPoint)point;
	//	[Export ("addLineToPoint:")]
	//	void AddLineToPoint (CGPoint point);

	//	// -(void)addCurveToPoint:(CGPoint)endPoint controlPoint1:(CGPoint)controlPoint1 controlPoint2:(CGPoint)controlPoint2;
	//	[Export ("addCurveToPoint:controlPoint1:controlPoint2:")]
	//	void AddCurveToPoint (CGPoint endPoint, CGPoint controlPoint1, CGPoint controlPoint2);

	//	// -(void)addQuadCurveToPoint:(CGPoint)endPoint controlPoint:(CGPoint)controlPoint;
	//	[Export ("addQuadCurveToPoint:controlPoint:")]
	//	void AddQuadCurveToPoint (CGPoint endPoint, CGPoint controlPoint);

	//	// -(void)addArcWithCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("addArcWithCenter:radius:startAngle:endAngle:clockwise:")]
	//	void AddArcWithCenter (CGPoint center, nfloat radius, nfloat startAngle, nfloat endAngle, bool clockwise);

	//	// -(void)closePath;
	//	[Export ("closePath")]
	//	void ClosePath ();

	//	// -(void)removeAllPoints;
	//	[Export ("removeAllPoints")]
	//	void RemoveAllPoints ();

	//	// -(void)appendPath:(UIBezierPath * _Nonnull)bezierPath;
	//	[Export ("appendPath:")]
	//	void AppendPath (UIBezierPath bezierPath);

	//	// -(UIBezierPath * _Nonnull)bezierPathByReversingPath __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("bezierPathByReversingPath")]
	//	[Verify (MethodToProperty)]
	//	UIBezierPath BezierPathByReversingPath { get; }

	//	// -(void)applyTransform:(CGAffineTransform)transform;
	//	[Export ("applyTransform:")]
	//	void ApplyTransform (CGAffineTransform transform);

	//	// @property (readonly, getter = isEmpty) BOOL empty;
	//	[Export ("empty")]
	//	bool Empty { [Bind ("isEmpty")] get; }

	//	// @property (readonly, nonatomic) CGRect bounds;
	//	[Export ("bounds")]
	//	CGRect Bounds { get; }

	//	// @property (readonly, nonatomic) CGPoint currentPoint;
	//	[Export ("currentPoint")]
	//	CGPoint CurrentPoint { get; }

	//	// -(BOOL)containsPoint:(CGPoint)point;
	//	[Export ("containsPoint:")]
	//	bool ContainsPoint (CGPoint point);

	//	// @property (nonatomic) CGFloat lineWidth;
	//	[Export ("lineWidth")]
	//	nfloat LineWidth { get; set; }

	//	// @property (nonatomic) CGLineCap lineCapStyle;
	//	[Export ("lineCapStyle", ArgumentSemantic.Assign)]
	//	CGLineCap LineCapStyle { get; set; }

	//	// @property (nonatomic) CGLineJoin lineJoinStyle;
	//	[Export ("lineJoinStyle", ArgumentSemantic.Assign)]
	//	CGLineJoin LineJoinStyle { get; set; }

	//	// @property (nonatomic) CGFloat miterLimit;
	//	[Export ("miterLimit")]
	//	nfloat MiterLimit { get; set; }

	//	// @property (nonatomic) CGFloat flatness;
	//	[Export ("flatness")]
	//	nfloat Flatness { get; set; }

	//	// @property (nonatomic) BOOL usesEvenOddFillRule;
	//	[Export ("usesEvenOddFillRule")]
	//	bool UsesEvenOddFillRule { get; set; }

	//	// -(void)setLineDash:(const CGFloat * _Nullable)pattern count:(NSInteger)count phase:(CGFloat)phase;
	//	[Export ("setLineDash:count:phase:")]
	//	unsafe void SetLineDash ([NullAllowed] nfloat* pattern, nint count, nfloat phase);

	//	// -(void)getLineDash:(CGFloat * _Nullable)pattern count:(NSInteger * _Nullable)count phase:(CGFloat * _Nullable)phase;
	//	[Export ("getLineDash:count:phase:")]
	//	unsafe void GetLineDash ([NullAllowed] nfloat* pattern, [NullAllowed] nint* count, [NullAllowed] nfloat* phase);

	//	// -(void)fill;
	//	[Export ("fill")]
	//	void Fill ();

	//	// -(void)stroke;
	//	[Export ("stroke")]
	//	void Stroke ();

	//	// -(void)fillWithBlendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;
	//	[Export ("fillWithBlendMode:alpha:")]
	//	void FillWithBlendMode (CGBlendMode blendMode, nfloat alpha);

	//	// -(void)strokeWithBlendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;
	//	[Export ("strokeWithBlendMode:alpha:")]
	//	void StrokeWithBlendMode (CGBlendMode blendMode, nfloat alpha);

	//	// -(void)addClip;
	//	[Export ("addClip")]
	//	void AddClip ();
	//}

	//// @interface UIEvent : NSObject
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIEvent
	//{
	//	// @property (readonly, nonatomic) UIEventType type __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("type")]
	//	UIEventType Type { get; }

	//	// @property (readonly, nonatomic) UIEventSubtype subtype __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("subtype")]
	//	UIEventSubtype Subtype { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval timestamp;
	//	[Export ("timestamp")]
	//	double Timestamp { get; }

	//	// @property (readonly, nonatomic) NSSet<UITouch *> * _Nullable allTouches;
	//	[NullAllowed, Export ("allTouches")]
	//	NSSet<UITouch> AllTouches { get; }

	//	// -(NSSet<UITouch *> * _Nullable)touchesForWindow:(UIWindow * _Nonnull)window;
	//	[Export ("touchesForWindow:")]
	//	[return: NullAllowed]
	//	NSSet<UITouch> TouchesForWindow (UIWindow window);

	//	// -(NSSet<UITouch *> * _Nullable)touchesForView:(UIView * _Nonnull)view;
	//	[Export ("touchesForView:")]
	//	[return: NullAllowed]
	//	NSSet<UITouch> TouchesForView (UIView view);

	//	// -(NSSet<UITouch *> * _Nullable)touchesForGestureRecognizer:(UIGestureRecognizer * _Nonnull)gesture __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3,2)]
	//	[Export ("touchesForGestureRecognizer:")]
	//	[return: NullAllowed]
	//	NSSet<UITouch> TouchesForGestureRecognizer (UIGestureRecognizer gesture);

	//	// -(NSArray<UITouch *> * _Nullable)coalescedTouchesForTouch:(UITouch * _Nonnull)touch __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("coalescedTouchesForTouch:")]
	//	[return: NullAllowed]
	//	UITouch[] CoalescedTouchesForTouch (UITouch touch);

	//	// -(NSArray<UITouch *> * _Nullable)predictedTouchesForTouch:(UITouch * _Nonnull)touch __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("predictedTouchesForTouch:")]
	//	[return: NullAllowed]
	//	UITouch[] PredictedTouchesForTouch (UITouch touch);
	//}

	//// @protocol UIPasteConfigurationSupporting <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIPasteConfigurationSupporting
	//{
	//	// @required @property (copy, nonatomic) UIPasteConfiguration * _Nullable pasteConfiguration;
	//	[Abstract]
	//	[NullAllowed, Export ("pasteConfiguration", ArgumentSemantic.Copy)]
	//	UIPasteConfiguration PasteConfiguration { get; set; }

	//	// @optional -(void)pasteItemProviders:(NSArray<NSItemProvider *> * _Nonnull)itemProviders;
	//	[Export ("pasteItemProviders:")]
	//	void PasteItemProviders (NSItemProvider[] itemProviders);

	//	// @optional -(BOOL)canPasteItemProviders:(NSArray<NSItemProvider *> * _Nonnull)itemProviders;
	//	[Export ("canPasteItemProviders:")]
	//	bool CanPasteItemProviders (NSItemProvider[] itemProviders);
	//}

	//// @protocol UIUserActivityRestoring <NSObject>
	//[iOS (8,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIUserActivityRestoring
	//{
	//	// @required -(void)restoreUserActivityState:(NSUserActivity * _Nonnull)userActivity;
	//	[Abstract]
	//	[Export ("restoreUserActivityState:")]
	//	void RestoreUserActivityState (NSUserActivity userActivity);
	//}

	//// @protocol UIResponderStandardEditActions <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIResponderStandardEditActions
	//{
	//	// @optional -(void)cut:(id _Nullable)sender __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("cut:")]
	//	void Cut ([NullAllowed] NSObject sender);

	//	// @optional -(void)copy:(id _Nullable)sender __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("copy:")]
	//	void Copy ([NullAllowed] NSObject sender);

	//	// @optional -(void)paste:(id _Nullable)sender __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("paste:")]
	//	void Paste ([NullAllowed] NSObject sender);

	//	// @optional -(void)select:(id _Nullable)sender __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("select:")]
	//	void Select ([NullAllowed] NSObject sender);

	//	// @optional -(void)selectAll:(id _Nullable)sender __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("selectAll:")]
	//	void SelectAll ([NullAllowed] NSObject sender);

	//	// @optional -(void)delete:(id _Nullable)sender __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3,2)]
	//	[Export ("delete:")]
	//	void Delete ([NullAllowed] NSObject sender);

	//	// @optional -(void)makeTextWritingDirectionLeftToRight:(id _Nullable)sender __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("makeTextWritingDirectionLeftToRight:")]
	//	void MakeTextWritingDirectionLeftToRight ([NullAllowed] NSObject sender);

	//	// @optional -(void)makeTextWritingDirectionRightToLeft:(id _Nullable)sender __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("makeTextWritingDirectionRightToLeft:")]
	//	void MakeTextWritingDirectionRightToLeft ([NullAllowed] NSObject sender);

	//	// @optional -(void)toggleBoldface:(id _Nullable)sender __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("toggleBoldface:")]
	//	void ToggleBoldface ([NullAllowed] NSObject sender);

	//	// @optional -(void)toggleItalics:(id _Nullable)sender __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("toggleItalics:")]
	//	void ToggleItalics ([NullAllowed] NSObject sender);

	//	// @optional -(void)toggleUnderline:(id _Nullable)sender __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("toggleUnderline:")]
	//	void ToggleUnderline ([NullAllowed] NSObject sender);

	//	// @optional -(void)increaseSize:(id _Nullable)sender __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("increaseSize:")]
	//	void IncreaseSize ([NullAllowed] NSObject sender);

	//	// @optional -(void)decreaseSize:(id _Nullable)sender __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("decreaseSize:")]
	//	void DecreaseSize ([NullAllowed] NSObject sender);
	//}

	//// @interface UIResponder : NSObject <UIResponderStandardEditActions>
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIResponder : IUIResponderStandardEditActions
	//{
	//	// @property (readonly, nonatomic) UIResponder * _Nullable nextResponder;
	//	[NullAllowed, Export ("nextResponder")]
	//	UIResponder NextResponder { get; }

	//	// @property (readonly, nonatomic) BOOL canBecomeFirstResponder;
	//	[Export ("canBecomeFirstResponder")]
	//	bool CanBecomeFirstResponder { get; }

	//	// -(BOOL)becomeFirstResponder;
	//	[Export ("becomeFirstResponder")]
	//	[Verify (MethodToProperty)]
	//	bool BecomeFirstResponder { get; }

	//	// @property (readonly, nonatomic) BOOL canResignFirstResponder;
	//	[Export ("canResignFirstResponder")]
	//	bool CanResignFirstResponder { get; }

	//	// -(BOOL)resignFirstResponder;
	//	[Export ("resignFirstResponder")]
	//	[Verify (MethodToProperty)]
	//	bool ResignFirstResponder { get; }

	//	// @property (readonly, nonatomic) BOOL isFirstResponder;
	//	[Export ("isFirstResponder")]
	//	bool IsFirstResponder { get; }

	//	// -(void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
	//	[Export ("touchesBegan:withEvent:")]
	//	void TouchesBegan (NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

	//	// -(void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
	//	[Export ("touchesMoved:withEvent:")]
	//	void TouchesMoved (NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

	//	// -(void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
	//	[Export ("touchesEnded:withEvent:")]
	//	void TouchesEnded (NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

	//	// -(void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
	//	[Export ("touchesCancelled:withEvent:")]
	//	void TouchesCancelled (NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

	//	// -(void)touchesEstimatedPropertiesUpdated:(NSSet<UITouch *> * _Nonnull)touches __attribute__((availability(ios, introduced=9.1)));
	//	[iOS (9,1)]
	//	[Export ("touchesEstimatedPropertiesUpdated:")]
	//	void TouchesEstimatedPropertiesUpdated (NSSet<UITouch> touches);

	//	// -(void)pressesBegan:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nullable)event __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("pressesBegan:withEvent:")]
	//	void PressesBegan (NSSet<UIPress> presses, [NullAllowed] UIPressesEvent @event);

	//	// -(void)pressesChanged:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nullable)event __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("pressesChanged:withEvent:")]
	//	void PressesChanged (NSSet<UIPress> presses, [NullAllowed] UIPressesEvent @event);

	//	// -(void)pressesEnded:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nullable)event __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("pressesEnded:withEvent:")]
	//	void PressesEnded (NSSet<UIPress> presses, [NullAllowed] UIPressesEvent @event);

	//	// -(void)pressesCancelled:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nullable)event __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("pressesCancelled:withEvent:")]
	//	void PressesCancelled (NSSet<UIPress> presses, [NullAllowed] UIPressesEvent @event);

	//	// -(void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent * _Nullable)event __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("motionBegan:withEvent:")]
	//	void MotionBegan (UIEventSubtype motion, [NullAllowed] UIEvent @event);

	//	// -(void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent * _Nullable)event __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("motionEnded:withEvent:")]
	//	void MotionEnded (UIEventSubtype motion, [NullAllowed] UIEvent @event);

	//	// -(void)motionCancelled:(UIEventSubtype)motion withEvent:(UIEvent * _Nullable)event __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("motionCancelled:withEvent:")]
	//	void MotionCancelled (UIEventSubtype motion, [NullAllowed] UIEvent @event);

	//	// -(void)remoteControlReceivedWithEvent:(UIEvent * _Nullable)event __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("remoteControlReceivedWithEvent:")]
	//	void RemoteControlReceivedWithEvent ([NullAllowed] UIEvent @event);

	//	// -(BOOL)canPerformAction:(SEL _Nonnull)action withSender:(id _Nullable)sender __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("canPerformAction:withSender:")]
	//	bool CanPerformAction (Selector action, [NullAllowed] NSObject sender);

	//	// -(id _Nullable)targetForAction:(SEL _Nonnull)action withSender:(id _Nullable)sender __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("targetForAction:withSender:")]
	//	[return: NullAllowed]
	//	NSObject TargetForAction (Selector action, [NullAllowed] NSObject sender);

	//	// @property (readonly, nonatomic) NSUndoManager * _Nullable undoManager __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[NullAllowed, Export ("undoManager")]
	//	NSUndoManager UndoManager { get; }
	//}

	//// @interface UIKeyCommand : NSObject <NSCopying, NSSecureCoding>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIKeyCommand : INSCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic) NSString * _Nullable input;
	//	[NullAllowed, Export ("input")]
	//	string Input { get; }

	//	// @property (readonly, nonatomic) UIKeyModifierFlags modifierFlags;
	//	[Export ("modifierFlags")]
	//	UIKeyModifierFlags ModifierFlags { get; }

	//	// @property (copy, nonatomic) NSString * _Nullable discoverabilityTitle __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("discoverabilityTitle")]
	//	string DiscoverabilityTitle { get; set; }

	//	// +(UIKeyCommand * _Nonnull)keyCommandWithInput:(NSString * _Nonnull)input modifierFlags:(UIKeyModifierFlags)modifierFlags action:(SEL _Nonnull)action;
	//	[Static]
	//	[Export ("keyCommandWithInput:modifierFlags:action:")]
	//	UIKeyCommand KeyCommandWithInput (string input, UIKeyModifierFlags modifierFlags, Selector action);

	//	// +(UIKeyCommand * _Nonnull)keyCommandWithInput:(NSString * _Nonnull)input modifierFlags:(UIKeyModifierFlags)modifierFlags action:(SEL _Nonnull)action discoverabilityTitle:(NSString * _Nonnull)discoverabilityTitle __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("keyCommandWithInput:modifierFlags:action:discoverabilityTitle:")]
	//	UIKeyCommand KeyCommandWithInput (string input, UIKeyModifierFlags modifierFlags, Selector action, string discoverabilityTitle);
	//}

	//// @interface UIResponderKeyCommands (UIResponder)
	//[Category]
	//[BaseType (typeof(UIResponder))]
	//interface UIResponder_UIResponderKeyCommands
	//{
	//	// @property (readonly, nonatomic) NSArray<UIKeyCommand *> * _Nullable keyCommands __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("keyCommands")]
	//	UIKeyCommand[] KeyCommands { get; }
	//}

	//// @interface UIResponderInputViewAdditions (UIResponder)
	//[Category]
	//[BaseType (typeof(UIResponder))]
	//interface UIResponder_UIResponderInputViewAdditions
	//{
	//	// @property (readonly, nonatomic, strong) __kindof UIView * _Nullable inputView __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[Export ("inputView", ArgumentSemantic.Strong)]
	//	UIView InputView { get; }

	//	// @property (readonly, nonatomic, strong) __kindof UIView * _Nullable inputAccessoryView __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[Export ("inputAccessoryView", ArgumentSemantic.Strong)]
	//	UIView InputAccessoryView { get; }

	//	// @property (readonly, nonatomic, strong) UITextInputAssistantItem * _Nonnull inputAssistantItem __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9.0)));
	//	[NoWatch, NoTV, iOS (9, 0)]
	//	[Export ("inputAssistantItem", ArgumentSemantic.Strong)]
	//	UITextInputAssistantItem InputAssistantItem { get; }

	//	// @property (readonly, nonatomic, strong) UIInputViewController * _Nullable inputViewController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("inputViewController", ArgumentSemantic.Strong)]
	//	UIInputViewController InputViewController { get; }

	//	// @property (readonly, nonatomic, strong) UIInputViewController * _Nullable inputAccessoryViewController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("inputAccessoryViewController", ArgumentSemantic.Strong)]
	//	UIInputViewController InputAccessoryViewController { get; }

	//	// @property (readonly, nonatomic, strong) UITextInputMode * _Nullable textInputMode __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("textInputMode", ArgumentSemantic.Strong)]
	//	UITextInputMode TextInputMode { get; }

	//	// @property (readonly, nonatomic, strong) NSString * _Nullable textInputContextIdentifier __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("textInputContextIdentifier", ArgumentSemantic.Strong)]
	//	string TextInputContextIdentifier { get; }

	//	// +(void)clearTextInputContextIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("clearTextInputContextIdentifier:")]
	//	void ClearTextInputContextIdentifier (string identifier);

	//	// -(void)reloadInputViews __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3,2)]
	//	[Export ("reloadInputViews")]
	//	void ReloadInputViews ();
	//}

	//// @interface ActivityContinuation (UIResponder) <UIUserActivityRestoring>
	//[Category]
	//[BaseType (typeof(UIResponder))]
	//interface UIResponder_ActivityContinuation : IUIUserActivityRestoring
	//{
	//	// @property (nonatomic, strong) NSUserActivity * _Nullable userActivity __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("userActivity", ArgumentSemantic.Strong)]
	//	NSUserActivity UserActivity { get; set; }

	//	// -(void)updateUserActivityState:(NSUserActivity * _Nonnull)activity __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("updateUserActivityState:")]
	//	void UpdateUserActivityState (NSUserActivity activity);

	//	// -(void)restoreUserActivityState:(NSUserActivity * _Nonnull)activity __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("restoreUserActivityState:")]
	//	void RestoreUserActivityState (NSUserActivity activity);
	//}

	//// @interface UIPasteConfigurationSupporting (UIResponder) <UIPasteConfigurationSupporting>
	//[Category]
	//[BaseType (typeof(UIResponder))]
	//interface UIResponder_UIPasteConfigurationSupporting : IUIPasteConfigurationSupporting
	//{
	//}

	//// @interface UIColor : NSObject <NSSecureCoding, NSCopying>
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIColor : INSSecureCoding, INSCopying
	//{
	//	// +(UIColor * _Nonnull)colorWithWhite:(CGFloat)white alpha:(CGFloat)alpha;
	//	[Static]
	//	[Export ("colorWithWhite:alpha:")]
	//	UIColor ColorWithWhite (nfloat white, nfloat alpha);

	//	// +(UIColor * _Nonnull)colorWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha;
	//	[Static]
	//	[Export ("colorWithHue:saturation:brightness:alpha:")]
	//	UIColor ColorWithHue (nfloat hue, nfloat saturation, nfloat brightness, nfloat alpha);

	//	// +(UIColor * _Nonnull)colorWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha;
	//	[Static]
	//	[Export ("colorWithRed:green:blue:alpha:")]
	//	UIColor ColorWithRed (nfloat red, nfloat green, nfloat blue, nfloat alpha);

	//	// +(UIColor * _Nonnull)colorWithDisplayP3Red:(CGFloat)displayP3Red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("colorWithDisplayP3Red:green:blue:alpha:")]
	//	UIColor ColorWithDisplayP3Red (nfloat displayP3Red, nfloat green, nfloat blue, nfloat alpha);

	//	// +(UIColor * _Nonnull)colorWithCGColor:(CGColorRef _Nonnull)cgColor;
	//	[Static]
	//	[Export ("colorWithCGColor:")]
	//	unsafe UIColor ColorWithCGColor (CGColorRef* cgColor);

	//	// +(UIColor * _Nonnull)colorWithPatternImage:(UIImage * _Nonnull)image;
	//	[Static]
	//	[Export ("colorWithPatternImage:")]
	//	UIColor ColorWithPatternImage (UIImage image);

	//	// +(UIColor * _Nonnull)colorWithCIColor:(CIColor * _Nonnull)ciColor __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("colorWithCIColor:")]
	//	UIColor ColorWithCIColor (CIColor ciColor);

	//	// -(UIColor * _Nonnull)initWithWhite:(CGFloat)white alpha:(CGFloat)alpha;
	//	[Export ("initWithWhite:alpha:")]
	//	IntPtr Constructor (nfloat white, nfloat alpha);

	//	// -(UIColor * _Nonnull)initWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha;
	//	[Export ("initWithHue:saturation:brightness:alpha:")]
	//	IntPtr Constructor (nfloat hue, nfloat saturation, nfloat brightness, nfloat alpha);

	//	// -(UIColor * _Nonnull)initWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha;
	//	[Export ("initWithRed:green:blue:alpha:")]
	//	IntPtr Constructor (nfloat red, nfloat green, nfloat blue, nfloat alpha);

	//	// -(UIColor * _Nonnull)initWithDisplayP3Red:(CGFloat)displayP3Red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("initWithDisplayP3Red:green:blue:alpha:")]
	//	IntPtr Constructor (nfloat displayP3Red, nfloat green, nfloat blue, nfloat alpha);

	//	// -(UIColor * _Nonnull)initWithCGColor:(CGColorRef _Nonnull)cgColor;
	//	[Export ("initWithCGColor:")]
	//	unsafe IntPtr Constructor (CGColorRef* cgColor);

	//	// -(UIColor * _Nonnull)initWithPatternImage:(UIImage * _Nonnull)image;
	//	[Export ("initWithPatternImage:")]
	//	IntPtr Constructor (UIImage image);

	//	// -(UIColor * _Nonnull)initWithCIColor:(CIColor * _Nonnull)ciColor __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithCIColor:")]
	//	IntPtr Constructor (CIColor ciColor);

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull blackColor;
	//	[Static]
	//	[Export ("blackColor")]
	//	UIColor BlackColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull darkGrayColor;
	//	[Static]
	//	[Export ("darkGrayColor")]
	//	UIColor DarkGrayColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull lightGrayColor;
	//	[Static]
	//	[Export ("lightGrayColor")]
	//	UIColor LightGrayColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull whiteColor;
	//	[Static]
	//	[Export ("whiteColor")]
	//	UIColor WhiteColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull grayColor;
	//	[Static]
	//	[Export ("grayColor")]
	//	UIColor GrayColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull redColor;
	//	[Static]
	//	[Export ("redColor")]
	//	UIColor RedColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull greenColor;
	//	[Static]
	//	[Export ("greenColor")]
	//	UIColor GreenColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull blueColor;
	//	[Static]
	//	[Export ("blueColor")]
	//	UIColor BlueColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull cyanColor;
	//	[Static]
	//	[Export ("cyanColor")]
	//	UIColor CyanColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull yellowColor;
	//	[Static]
	//	[Export ("yellowColor")]
	//	UIColor YellowColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull magentaColor;
	//	[Static]
	//	[Export ("magentaColor")]
	//	UIColor MagentaColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull orangeColor;
	//	[Static]
	//	[Export ("orangeColor")]
	//	UIColor OrangeColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull purpleColor;
	//	[Static]
	//	[Export ("purpleColor")]
	//	UIColor PurpleColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull brownColor;
	//	[Static]
	//	[Export ("brownColor")]
	//	UIColor BrownColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull clearColor;
	//	[Static]
	//	[Export ("clearColor")]
	//	UIColor ClearColor { get; }

	//	// -(void)set;
	//	[Export ("set")]
	//	void Set ();

	//	// -(void)setFill;
	//	[Export ("setFill")]
	//	void SetFill ();

	//	// -(void)setStroke;
	//	[Export ("setStroke")]
	//	void SetStroke ();

	//	// -(BOOL)getWhite:(CGFloat * _Nullable)white alpha:(CGFloat * _Nullable)alpha __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("getWhite:alpha:")]
	//	unsafe bool GetWhite ([NullAllowed] nfloat* white, [NullAllowed] nfloat* alpha);

	//	// -(BOOL)getHue:(CGFloat * _Nullable)hue saturation:(CGFloat * _Nullable)saturation brightness:(CGFloat * _Nullable)brightness alpha:(CGFloat * _Nullable)alpha __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("getHue:saturation:brightness:alpha:")]
	//	unsafe bool GetHue ([NullAllowed] nfloat* hue, [NullAllowed] nfloat* saturation, [NullAllowed] nfloat* brightness, [NullAllowed] nfloat* alpha);

	//	// -(BOOL)getRed:(CGFloat * _Nullable)red green:(CGFloat * _Nullable)green blue:(CGFloat * _Nullable)blue alpha:(CGFloat * _Nullable)alpha __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("getRed:green:blue:alpha:")]
	//	unsafe bool GetRed ([NullAllowed] nfloat* red, [NullAllowed] nfloat* green, [NullAllowed] nfloat* blue, [NullAllowed] nfloat* alpha);

	//	// -(UIColor * _Nonnull)colorWithAlphaComponent:(CGFloat)alpha;
	//	[Export ("colorWithAlphaComponent:")]
	//	UIColor ColorWithAlphaComponent (nfloat alpha);

	//	// @property (readonly, nonatomic) CGColorRef _Nonnull CGColor;
	//	[Export ("CGColor")]
	//	unsafe CGColorRef* CGColor { get; }

	//	// @property (readonly, nonatomic) CIColor * _Nonnull CIColor __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("CIColor")]
	//	CIColor CIColor { get; }
	//}

	//// @interface UINSItemProvider (UIColor) <NSItemProviderReading, NSItemProviderWriting>
	//[Category]
	//[BaseType (typeof(UIColor))]
	//interface UIColor_UINSItemProvider : INSItemProviderReading, INSItemProviderWriting
	//{
	//}

	//// @interface UIKitAdditions (CIColor)
	//[Category]
	//[BaseType (typeof(CIColor))]
	//interface CIColor_UIKitAdditions
	//{
	//	// -(instancetype _Nonnull)initWithColor:(UIColor * _Nonnull)color __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithColor:")]
	//	IntPtr Constructor (UIColor color);
	//}

	//// @interface UIColorNamedColors (UIColor)
	//[Category]
	//[BaseType (typeof(UIColor))]
	//interface UIColor_UIColorNamedColors
	//{
	//	// +(UIColor * _Nullable)colorNamed:(NSString * _Nonnull)name __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Static]
	//	[Export ("colorNamed:")]
	//	[return: NullAllowed]
	//	UIColor ColorNamed (string name);

	//	// +(UIColor * _Nullable)colorNamed:(NSString * _Nonnull)name inBundle:(NSBundle * _Nullable)bundle compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Static]
	//	[Export ("colorNamed:inBundle:compatibleWithTraitCollection:")]
	//	[return: NullAllowed]
	//	UIColor ColorNamed (string name, [NullAllowed] NSBundle bundle, [NullAllowed] UITraitCollection traitCollection);
	//}

	//// @interface UIFontDescriptor : NSObject <NSCopying, NSSecureCoding>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIFontDescriptor : INSCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic) NSString * _Nonnull postscriptName;
	//	[Export ("postscriptName")]
	//	string PostscriptName { get; }

	//	// @property (readonly, nonatomic) CGFloat pointSize;
	//	[Export ("pointSize")]
	//	nfloat PointSize { get; }

	//	// @property (readonly, nonatomic) CGAffineTransform matrix;
	//	[Export ("matrix")]
	//	CGAffineTransform Matrix { get; }

	//	// @property (readonly, nonatomic) UIFontDescriptorSymbolicTraits symbolicTraits;
	//	[Export ("symbolicTraits")]
	//	UIFontDescriptorSymbolicTraits SymbolicTraits { get; }

	//	// -(id _Nullable)objectForKey:(UIFontDescriptorAttributeName _Nonnull)anAttribute;
	//	[Export ("objectForKey:")]
	//	[return: NullAllowed]
	//	NSObject ObjectForKey (string anAttribute);

	//	// @property (readonly, nonatomic) NSDictionary<UIFontDescriptorAttributeName,id> * _Nonnull fontAttributes;
	//	[Export ("fontAttributes")]
	//	NSDictionary<NSString, NSObject> FontAttributes { get; }

	//	// -(NSArray<UIFontDescriptor *> * _Nonnull)matchingFontDescriptorsWithMandatoryKeys:(NSSet<UIFontDescriptorAttributeName> * _Nullable)mandatoryKeys;
	//	[Export ("matchingFontDescriptorsWithMandatoryKeys:")]
	//	UIFontDescriptor[] MatchingFontDescriptorsWithMandatoryKeys ([NullAllowed] NSSet<NSString> mandatoryKeys);

	//	// +(UIFontDescriptor * _Nonnull)fontDescriptorWithFontAttributes:(NSDictionary<UIFontDescriptorAttributeName,id> * _Nonnull)attributes;
	//	[Static]
	//	[Export ("fontDescriptorWithFontAttributes:")]
	//	UIFontDescriptor FontDescriptorWithFontAttributes (NSDictionary<NSString, NSObject> attributes);

	//	// +(UIFontDescriptor * _Nonnull)fontDescriptorWithName:(NSString * _Nonnull)fontName size:(CGFloat)size;
	//	[Static]
	//	[Export ("fontDescriptorWithName:size:")]
	//	UIFontDescriptor FontDescriptorWithName (string fontName, nfloat size);

	//	// +(UIFontDescriptor * _Nonnull)fontDescriptorWithName:(NSString * _Nonnull)fontName matrix:(CGAffineTransform)matrix;
	//	[Static]
	//	[Export ("fontDescriptorWithName:matrix:")]
	//	UIFontDescriptor FontDescriptorWithName (string fontName, CGAffineTransform matrix);

	//	// +(UIFontDescriptor * _Nonnull)preferredFontDescriptorWithTextStyle:(UIFontTextStyle _Nonnull)style;
	//	[Static]
	//	[Export ("preferredFontDescriptorWithTextStyle:")]
	//	UIFontDescriptor PreferredFontDescriptorWithTextStyle (string style);

	//	// +(UIFontDescriptor * _Nonnull)preferredFontDescriptorWithTextStyle:(UIFontTextStyle _Nonnull)style compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoWatch, iOS (10,0)]
	//	[Static]
	//	[Export ("preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:")]
	//	UIFontDescriptor PreferredFontDescriptorWithTextStyle (string style, [NullAllowed] UITraitCollection traitCollection);

	//	// -(instancetype _Nonnull)initWithFontAttributes:(NSDictionary<UIFontDescriptorAttributeName,id> * _Nonnull)attributes __attribute__((objc_designated_initializer));
	//	[Export ("initWithFontAttributes:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSDictionary<NSString, NSObject> attributes);

	//	// -(UIFontDescriptor * _Nonnull)fontDescriptorByAddingAttributes:(NSDictionary<UIFontDescriptorAttributeName,id> * _Nonnull)attributes;
	//	[Export ("fontDescriptorByAddingAttributes:")]
	//	UIFontDescriptor FontDescriptorByAddingAttributes (NSDictionary<NSString, NSObject> attributes);

	//	// -(UIFontDescriptor * _Nonnull)fontDescriptorWithSize:(CGFloat)newPointSize;
	//	[Export ("fontDescriptorWithSize:")]
	//	UIFontDescriptor FontDescriptorWithSize (nfloat newPointSize);

	//	// -(UIFontDescriptor * _Nonnull)fontDescriptorWithMatrix:(CGAffineTransform)matrix;
	//	[Export ("fontDescriptorWithMatrix:")]
	//	UIFontDescriptor FontDescriptorWithMatrix (CGAffineTransform matrix);

	//	// -(UIFontDescriptor * _Nonnull)fontDescriptorWithFace:(NSString * _Nonnull)newFace;
	//	[Export ("fontDescriptorWithFace:")]
	//	UIFontDescriptor FontDescriptorWithFace (string newFace);

	//	// -(UIFontDescriptor * _Nonnull)fontDescriptorWithFamily:(NSString * _Nonnull)newFamily;
	//	[Export ("fontDescriptorWithFamily:")]
	//	UIFontDescriptor FontDescriptorWithFamily (string newFamily);

	//	// -(UIFontDescriptor * _Nullable)fontDescriptorWithSymbolicTraits:(UIFontDescriptorSymbolicTraits)symbolicTraits;
	//	[Export ("fontDescriptorWithSymbolicTraits:")]
	//	[return: NullAllowed]
	//	UIFontDescriptor FontDescriptorWithSymbolicTraits (UIFontDescriptorSymbolicTraits symbolicTraits);
	//}

	//// @interface UIFont : NSObject <NSCopying>
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIFont : INSCopying
	//{
	//	// +(UIFont * _Nonnull)preferredFontForTextStyle:(UIFontTextStyle _Nonnull)style __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("preferredFontForTextStyle:")]
	//	UIFont PreferredFontForTextStyle (string style);

	//	// +(UIFont * _Nonnull)preferredFontForTextStyle:(UIFontTextStyle _Nonnull)style compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoWatch, iOS (10,0)]
	//	[Static]
	//	[Export ("preferredFontForTextStyle:compatibleWithTraitCollection:")]
	//	UIFont PreferredFontForTextStyle (string style, [NullAllowed] UITraitCollection traitCollection);

	//	// +(UIFont * _Nullable)fontWithName:(NSString * _Nonnull)fontName size:(CGFloat)fontSize;
	//	[Static]
	//	[Export ("fontWithName:size:")]
	//	[return: NullAllowed]
	//	UIFont FontWithName (string fontName, nfloat fontSize);

	//	// @property (readonly, nonatomic, class) NSArray<NSString *> * _Nonnull familyNames;
	//	[Static]
	//	[Export ("familyNames")]
	//	string[] FamilyNames { get; }

	//	// +(NSArray<NSString *> * _Nonnull)fontNamesForFamilyName:(NSString * _Nonnull)familyName;
	//	[Static]
	//	[Export ("fontNamesForFamilyName:")]
	//	string[] FontNamesForFamilyName (string familyName);

	//	// +(UIFont * _Nonnull)systemFontOfSize:(CGFloat)fontSize;
	//	[Static]
	//	[Export ("systemFontOfSize:")]
	//	UIFont SystemFontOfSize (nfloat fontSize);

	//	// +(UIFont * _Nonnull)boldSystemFontOfSize:(CGFloat)fontSize;
	//	[Static]
	//	[Export ("boldSystemFontOfSize:")]
	//	UIFont BoldSystemFontOfSize (nfloat fontSize);

	//	// +(UIFont * _Nonnull)italicSystemFontOfSize:(CGFloat)fontSize;
	//	[Static]
	//	[Export ("italicSystemFontOfSize:")]
	//	UIFont ItalicSystemFontOfSize (nfloat fontSize);

	//	// +(UIFont * _Nonnull)systemFontOfSize:(CGFloat)fontSize weight:(UIFontWeight)weight __attribute__((availability(ios, introduced=8.2)));
	//	[iOS (8,2)]
	//	[Static]
	//	[Export ("systemFontOfSize:weight:")]
	//	UIFont SystemFontOfSize (nfloat fontSize, double weight);

	//	// +(UIFont * _Nonnull)monospacedDigitSystemFontOfSize:(CGFloat)fontSize weight:(UIFontWeight)weight __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("monospacedDigitSystemFontOfSize:weight:")]
	//	UIFont MonospacedDigitSystemFontOfSize (nfloat fontSize, double weight);

	//	// @property (readonly, nonatomic, strong) NSString * _Nonnull familyName;
	//	[Export ("familyName", ArgumentSemantic.Strong)]
	//	string FamilyName { get; }

	//	// @property (readonly, nonatomic, strong) NSString * _Nonnull fontName;
	//	[Export ("fontName", ArgumentSemantic.Strong)]
	//	string FontName { get; }

	//	// @property (readonly, nonatomic) CGFloat pointSize;
	//	[Export ("pointSize")]
	//	nfloat PointSize { get; }

	//	// @property (readonly, nonatomic) CGFloat ascender;
	//	[Export ("ascender")]
	//	nfloat Ascender { get; }

	//	// @property (readonly, nonatomic) CGFloat descender;
	//	[Export ("descender")]
	//	nfloat Descender { get; }

	//	// @property (readonly, nonatomic) CGFloat capHeight;
	//	[Export ("capHeight")]
	//	nfloat CapHeight { get; }

	//	// @property (readonly, nonatomic) CGFloat xHeight;
	//	[Export ("xHeight")]
	//	nfloat XHeight { get; }

	//	// @property (readonly, nonatomic) CGFloat lineHeight __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("lineHeight")]
	//	nfloat LineHeight { get; }

	//	// @property (readonly, nonatomic) CGFloat leading;
	//	[Export ("leading")]
	//	nfloat Leading { get; }

	//	// -(UIFont * _Nonnull)fontWithSize:(CGFloat)fontSize;
	//	[Export ("fontWithSize:")]
	//	UIFont FontWithSize (nfloat fontSize);

	//	// +(UIFont * _Nonnull)fontWithDescriptor:(UIFontDescriptor * _Nonnull)descriptor size:(CGFloat)pointSize __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("fontWithDescriptor:size:")]
	//	UIFont FontWithDescriptor (UIFontDescriptor descriptor, nfloat pointSize);

	//	// @property (readonly, nonatomic) UIFontDescriptor * _Nonnull fontDescriptor __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("fontDescriptor")]
	//	UIFontDescriptor FontDescriptor { get; }
	//}

	//// @interface UIColorSystemColors (UIColor)
	//[Category]
	//[BaseType (typeof(UIColor))]
	//interface UIColor_UIColorSystemColors
	//{
	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull lightTextColor __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Static]
	//	[Export ("lightTextColor")]
	//	UIColor LightTextColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull darkTextColor __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Static]
	//	[Export ("darkTextColor")]
	//	UIColor DarkTextColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull groupTableViewBackgroundColor __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Static]
	//	[Export ("groupTableViewBackgroundColor")]
	//	UIColor GroupTableViewBackgroundColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull viewFlipsideBackgroundColor __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoTV]
	//	[Static]
	//	[Export ("viewFlipsideBackgroundColor")]
	//	UIColor ViewFlipsideBackgroundColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull scrollViewTexturedBackgroundColor __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.2, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 3, 2)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoTV]
	//	[Static]
	//	[Export ("scrollViewTexturedBackgroundColor")]
	//	UIColor ScrollViewTexturedBackgroundColor { get; }

	//	// @property (readonly, nonatomic, class) UIColor * _Nonnull underPageBackgroundColor __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 5, 0)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoTV]
	//	[Static]
	//	[Export ("underPageBackgroundColor")]
	//	UIColor UnderPageBackgroundColor { get; }
	//}

	//// @interface UIFontSystemFonts (UIFont)
	//[Category]
	//[BaseType (typeof(UIFont))]
	//interface UIFont_UIFontSystemFonts
	//{
	//	// @property (readonly, nonatomic, class) CGFloat labelFontSize __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Static]
	//	[Export ("labelFontSize")]
	//	nfloat LabelFontSize { get; }

	//	// @property (readonly, nonatomic, class) CGFloat buttonFontSize __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Static]
	//	[Export ("buttonFontSize")]
	//	nfloat ButtonFontSize { get; }

	//	// @property (readonly, nonatomic, class) CGFloat smallSystemFontSize __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Static]
	//	[Export ("smallSystemFontSize")]
	//	nfloat SmallSystemFontSize { get; }

	//	// @property (readonly, nonatomic, class) CGFloat systemFontSize __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Static]
	//	[Export ("systemFontSize")]
	//	nfloat SystemFontSize { get; }
	//}

	//// @protocol UIAppearanceContainer <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIAppearanceContainer
	//{
	//}

	//// @protocol UIAppearance <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIAppearance
	//{
	//	// @required +(instancetype _Nonnull)appearance;
	//	[Static, Abstract]
	//	[Export ("appearance")]
	//	UIAppearance Appearance ();

	//	// @required +(instancetype _Nonnull)appearanceWhenContainedIn:(Class<UIAppearanceContainer> _Nullable)ContainerClass, ... __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0, deprecated=9.0))) __attribute__((sentinel(0, 1)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use +appearanceWhenContainedInInstancesOfClasses: instead")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use +appearanceWhenContainedInInstancesOfClasses: instead")]
	//	[NoTV]
	//	[Static, Internal, Abstract]
	//	[Export ("appearanceWhenContainedIn:", IsVariadic = true)]
	//	UIAppearance AppearanceWhenContainedIn ([NullAllowed] UIAppearanceContainer ContainerClass, IntPtr varArgs);

	//	// @required +(instancetype _Nonnull)appearanceWhenContainedInInstancesOfClasses:(NSArray<Class<UIAppearanceContainer>> * _Nonnull)containerTypes __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static, Abstract]
	//	[Export ("appearanceWhenContainedInInstancesOfClasses:")]
	//	UIAppearance AppearanceWhenContainedInInstancesOfClasses (UIAppearanceContainer[] containerTypes);

	//	// @required +(instancetype _Nonnull)appearanceForTraitCollection:(UITraitCollection * _Nonnull)trait __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static, Abstract]
	//	[Export ("appearanceForTraitCollection:")]
	//	UIAppearance AppearanceForTraitCollection (UITraitCollection trait);

	//	// @required +(instancetype _Nonnull)appearanceForTraitCollection:(UITraitCollection * _Nonnull)trait whenContainedIn:(Class<UIAppearanceContainer> _Nullable)ContainerClass, ... __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=9.0))) __attribute__((sentinel(0, 1)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use +appearanceForTraitCollection:whenContainedInInstancesOfClasses: instead")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use +appearanceForTraitCollection:whenContainedInInstancesOfClasses: instead")]
	//	[NoTV]
	//	[Static, Internal, Abstract]
	//	[Export ("appearanceForTraitCollection:whenContainedIn:", IsVariadic = true)]
	//	UIAppearance AppearanceForTraitCollection (UITraitCollection trait, [NullAllowed] UIAppearanceContainer ContainerClass, IntPtr varArgs);

	//	// @required +(instancetype _Nonnull)appearanceForTraitCollection:(UITraitCollection * _Nonnull)trait whenContainedInInstancesOfClasses:(NSArray<Class<UIAppearanceContainer>> * _Nonnull)containerTypes __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static, Abstract]
	//	[Export ("appearanceForTraitCollection:whenContainedInInstancesOfClasses:")]
	//	UIAppearance AppearanceForTraitCollection (UITraitCollection trait, UIAppearanceContainer[] containerTypes);
	//}

	//// @interface NSValueUIGeometryExtensions (NSValue)
	//[Category]
	//[BaseType (typeof(NSValue))]
	//interface NSValue_NSValueUIGeometryExtensions
	//{
	//	// +(NSValue * _Nonnull)valueWithCGPoint:(CGPoint)point;
	//	[Static]
	//	[Export ("valueWithCGPoint:")]
	//	NSValue ValueWithCGPoint (CGPoint point);

	//	// +(NSValue * _Nonnull)valueWithCGVector:(CGVector)vector;
	//	[Static]
	//	[Export ("valueWithCGVector:")]
	//	NSValue ValueWithCGVector (CGVector vector);

	//	// +(NSValue * _Nonnull)valueWithCGSize:(CGSize)size;
	//	[Static]
	//	[Export ("valueWithCGSize:")]
	//	NSValue ValueWithCGSize (CGSize size);

	//	// +(NSValue * _Nonnull)valueWithCGRect:(CGRect)rect;
	//	[Static]
	//	[Export ("valueWithCGRect:")]
	//	NSValue ValueWithCGRect (CGRect rect);

	//	// +(NSValue * _Nonnull)valueWithCGAffineTransform:(CGAffineTransform)transform;
	//	[Static]
	//	[Export ("valueWithCGAffineTransform:")]
	//	NSValue ValueWithCGAffineTransform (CGAffineTransform transform);

	//	// +(NSValue * _Nonnull)valueWithUIEdgeInsets:(UIEdgeInsets)insets;
	//	[Static]
	//	[Export ("valueWithUIEdgeInsets:")]
	//	NSValue ValueWithUIEdgeInsets (UIEdgeInsets insets);

	//	// +(NSValue * _Nonnull)valueWithDirectionalEdgeInsets:(NSDirectionalEdgeInsets)insets __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[Watch (4,0), TV (11,0), iOS (11,0)]
	//	[Static]
	//	[Export ("valueWithDirectionalEdgeInsets:")]
	//	NSValue ValueWithDirectionalEdgeInsets (NSDirectionalEdgeInsets insets);

	//	// +(NSValue * _Nonnull)valueWithUIOffset:(UIOffset)insets __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("valueWithUIOffset:")]
	//	NSValue ValueWithUIOffset (UIOffset insets);

	//	// @property (readonly, nonatomic) CGPoint CGPointValue;
	//	[Export ("CGPointValue")]
	//	CGPoint CGPointValue { get; }

	//	// @property (readonly, nonatomic) CGVector CGVectorValue;
	//	[Export ("CGVectorValue")]
	//	CGVector CGVectorValue { get; }

	//	// @property (readonly, nonatomic) CGSize CGSizeValue;
	//	[Export ("CGSizeValue")]
	//	CGSize CGSizeValue { get; }

	//	// @property (readonly, nonatomic) CGRect CGRectValue;
	//	[Export ("CGRectValue")]
	//	CGRect CGRectValue { get; }

	//	// @property (readonly, nonatomic) CGAffineTransform CGAffineTransformValue;
	//	[Export ("CGAffineTransformValue")]
	//	CGAffineTransform CGAffineTransformValue { get; }

	//	// @property (readonly, nonatomic) UIEdgeInsets UIEdgeInsetsValue;
	//	[Export ("UIEdgeInsetsValue")]
	//	UIEdgeInsets UIEdgeInsetsValue { get; }

	//	// @property (readonly, nonatomic) NSDirectionalEdgeInsets directionalEdgeInsetsValue __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[Watch (4, 0), TV (11, 0), iOS (11, 0)]
	//	[Export ("directionalEdgeInsetsValue")]
	//	NSDirectionalEdgeInsets DirectionalEdgeInsetsValue { get; }

	//	// @property (readonly, nonatomic) UIOffset UIOffsetValue __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("UIOffsetValue")]
	//	UIOffset UIOffsetValue { get; }
	//}

	//// @interface UIGeometryKeyedCoding (NSCoder)
	//[Category]
	//[BaseType (typeof(NSCoder))]
	//interface NSCoder_UIGeometryKeyedCoding
	//{
	//	// -(void)encodeCGPoint:(CGPoint)point forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeCGPoint:forKey:")]
	//	void EncodeCGPoint (CGPoint point, string key);

	//	// -(void)encodeCGVector:(CGVector)vector forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeCGVector:forKey:")]
	//	void EncodeCGVector (CGVector vector, string key);

	//	// -(void)encodeCGSize:(CGSize)size forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeCGSize:forKey:")]
	//	void EncodeCGSize (CGSize size, string key);

	//	// -(void)encodeCGRect:(CGRect)rect forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeCGRect:forKey:")]
	//	void EncodeCGRect (CGRect rect, string key);

	//	// -(void)encodeCGAffineTransform:(CGAffineTransform)transform forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeCGAffineTransform:forKey:")]
	//	void EncodeCGAffineTransform (CGAffineTransform transform, string key);

	//	// -(void)encodeUIEdgeInsets:(UIEdgeInsets)insets forKey:(NSString * _Nonnull)key;
	//	[Export ("encodeUIEdgeInsets:forKey:")]
	//	void EncodeUIEdgeInsets (UIEdgeInsets insets, string key);

	//	// -(void)encodeDirectionalEdgeInsets:(NSDirectionalEdgeInsets)insets forKey:(NSString * _Nonnull)key __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[Watch (4,0), TV (11,0), iOS (11,0)]
	//	[Export ("encodeDirectionalEdgeInsets:forKey:")]
	//	void EncodeDirectionalEdgeInsets (NSDirectionalEdgeInsets insets, string key);

	//	// -(void)encodeUIOffset:(UIOffset)offset forKey:(NSString * _Nonnull)key __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("encodeUIOffset:forKey:")]
	//	void EncodeUIOffset (UIOffset offset, string key);

	//	// -(CGPoint)decodeCGPointForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeCGPointForKey:")]
	//	CGPoint DecodeCGPointForKey (string key);

	//	// -(CGVector)decodeCGVectorForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeCGVectorForKey:")]
	//	CGVector DecodeCGVectorForKey (string key);

	//	// -(CGSize)decodeCGSizeForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeCGSizeForKey:")]
	//	CGSize DecodeCGSizeForKey (string key);

	//	// -(CGRect)decodeCGRectForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeCGRectForKey:")]
	//	CGRect DecodeCGRectForKey (string key);

	//	// -(CGAffineTransform)decodeCGAffineTransformForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeCGAffineTransformForKey:")]
	//	CGAffineTransform DecodeCGAffineTransformForKey (string key);

	//	// -(UIEdgeInsets)decodeUIEdgeInsetsForKey:(NSString * _Nonnull)key;
	//	[Export ("decodeUIEdgeInsetsForKey:")]
	//	UIEdgeInsets DecodeUIEdgeInsetsForKey (string key);

	//	// -(NSDirectionalEdgeInsets)decodeDirectionalEdgeInsetsForKey:(NSString * _Nonnull)key __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[Watch (4,0), TV (11,0), iOS (11,0)]
	//	[Export ("decodeDirectionalEdgeInsetsForKey:")]
	//	NSDirectionalEdgeInsets DecodeDirectionalEdgeInsetsForKey (string key);

	//	// -(UIOffset)decodeUIOffsetForKey:(NSString * _Nonnull)key __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("decodeUIOffsetForKey:")]
	//	UIOffset DecodeUIOffsetForKey (string key);
	//}

	//// @protocol UIDynamicItem <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIDynamicItem
	//{
	//	// @required @property (readwrite, nonatomic) CGPoint center;
	//	[Abstract]
	//	[Export ("center", ArgumentSemantic.Assign)]
	//	CGPoint Center { get; set; }

	//	// @required @property (readonly, nonatomic) CGRect bounds;
	//	[Abstract]
	//	[Export ("bounds")]
	//	CGRect Bounds { get; }

	//	// @required @property (readwrite, nonatomic) CGAffineTransform transform;
	//	[Abstract]
	//	[Export ("transform", ArgumentSemantic.Assign)]
	//	CGAffineTransform Transform { get; set; }

	//	// @optional @property (readonly, nonatomic) UIDynamicItemCollisionBoundsType collisionBoundsType __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("collisionBoundsType")]
	//	UIDynamicItemCollisionBoundsType CollisionBoundsType { get; }

	//	// @optional @property (readonly, nonatomic) UIBezierPath * _Nonnull collisionBoundingPath __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("collisionBoundingPath")]
	//	UIBezierPath CollisionBoundingPath { get; }
	//}

	//// @interface UIDynamicItemGroup : NSObject <UIDynamicItem>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIDynamicItemGroup : IUIDynamicItem
	//{
	//	// -(instancetype _Nonnull)initWithItems:(NSArray<id<UIDynamicItem>> * _Nonnull)items;
	//	[Export ("initWithItems:")]
	//	IntPtr Constructor (UIDynamicItem[] items);

	//	// @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	UIDynamicItem[] Items { get; }
	//}

	//// @interface UIDynamicBehavior : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIDynamicBehavior
	//{
	//	// -(void)addChildBehavior:(UIDynamicBehavior * _Nonnull)behavior;
	//	[Export ("addChildBehavior:")]
	//	void AddChildBehavior (UIDynamicBehavior behavior);

	//	// -(void)removeChildBehavior:(UIDynamicBehavior * _Nonnull)behavior;
	//	[Export ("removeChildBehavior:")]
	//	void RemoveChildBehavior (UIDynamicBehavior behavior);

	//	// @property (readonly, copy, nonatomic) NSArray<__kindof UIDynamicBehavior *> * _Nonnull childBehaviors;
	//	[Export ("childBehaviors", ArgumentSemantic.Copy)]
	//	UIDynamicBehavior[] ChildBehaviors { get; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) action;
	//	[NullAllowed, Export ("action", ArgumentSemantic.Copy)]
	//	Action Action { get; set; }

	//	// -(void)willMoveToAnimator:(UIDynamicAnimator * _Nullable)dynamicAnimator;
	//	[Export ("willMoveToAnimator:")]
	//	void WillMoveToAnimator ([NullAllowed] UIDynamicAnimator dynamicAnimator);

	//	// @property (readonly, nonatomic) UIDynamicAnimator * _Nullable dynamicAnimator;
	//	[NullAllowed, Export ("dynamicAnimator")]
	//	UIDynamicAnimator DynamicAnimator { get; }
	//}

	//// @interface NSLayoutConstraint : NSObject
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSLayoutConstraint
	//{
	//	// +(NSArray<__kindof NSLayoutConstraint *> * _Nonnull)constraintsWithVisualFormat:(NSString * _Nonnull)format options:(NSLayoutFormatOptions)opts metrics:(NSDictionary<NSString *,id> * _Nullable)metrics views:(NSDictionary<NSString *,id> * _Nonnull)views;
	//	[Static]
	//	[Export ("constraintsWithVisualFormat:options:metrics:views:")]
	//	NSLayoutConstraint[] ConstraintsWithVisualFormat (string format, NSLayoutFormatOptions opts, [NullAllowed] NSDictionary<NSString, NSObject> metrics, NSDictionary<NSString, NSObject> views);

	//	// +(instancetype _Nonnull)constraintWithItem:(id _Nonnull)view1 attribute:(NSLayoutAttribute)attr1 relatedBy:(NSLayoutRelation)relation toItem:(id _Nullable)view2 attribute:(NSLayoutAttribute)attr2 multiplier:(CGFloat)multiplier constant:(CGFloat)c;
	//	[Static]
	//	[Export ("constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:")]
	//	NSLayoutConstraint ConstraintWithItem (NSObject view1, NSLayoutAttribute attr1, NSLayoutRelation relation, [NullAllowed] NSObject view2, NSLayoutAttribute attr2, nfloat multiplier, nfloat c);

	//	// @property UILayoutPriority priority;
	//	[Export ("priority")]
	//	float Priority { get; set; }

	//	// @property BOOL shouldBeArchived;
	//	[Export ("shouldBeArchived")]
	//	bool ShouldBeArchived { get; set; }

	//	// @property (readonly, assign) id _Nullable firstItem;
	//	[NullAllowed, Export ("firstItem", ArgumentSemantic.Assign)]
	//	NSObject FirstItem { get; }

	//	// @property (readonly) NSLayoutAttribute firstAttribute;
	//	[Export ("firstAttribute")]
	//	NSLayoutAttribute FirstAttribute { get; }

	//	// @property (readonly, assign) id _Nullable secondItem;
	//	[NullAllowed, Export ("secondItem", ArgumentSemantic.Assign)]
	//	NSObject SecondItem { get; }

	//	// @property (readonly) NSLayoutAttribute secondAttribute;
	//	[Export ("secondAttribute")]
	//	NSLayoutAttribute SecondAttribute { get; }

	//	// @property (readonly, copy) NSLayoutAnchor * _Nonnull firstAnchor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("firstAnchor", ArgumentSemantic.Copy)]
	//	NSLayoutAnchor`1 FirstAnchor { get; }

	//	// @property (readonly, copy) NSLayoutAnchor * _Nullable secondAnchor __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("secondAnchor", ArgumentSemantic.Copy)]
	//	NSLayoutAnchor`1 SecondAnchor { get; }

	//	// @property (readonly) NSLayoutRelation relation;
	//	[Export ("relation")]
	//	NSLayoutRelation Relation { get; }

	//	// @property (readonly) CGFloat multiplier;
	//	[Export ("multiplier")]
	//	nfloat Multiplier { get; }

	//	// @property CGFloat constant;
	//	[Export ("constant")]
	//	nfloat Constant { get; set; }

	//	// @property (getter = isActive) BOOL active __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("active")]
	//	bool Active { [Bind ("isActive")] get; set; }

	//	// +(void)activateConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static]
	//	[Export ("activateConstraints:")]
	//	void ActivateConstraints (NSLayoutConstraint[] constraints);

	//	// +(void)deactivateConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static]
	//	[Export ("deactivateConstraints:")]
	//	void DeactivateConstraints (NSLayoutConstraint[] constraints);
	//}

	//// @interface NSIdentifier (NSLayoutConstraint)
	//[Category]
	//[BaseType (typeof(NSLayoutConstraint))]
	//interface NSLayoutConstraint_NSIdentifier
	//{
	//	// @property (copy) NSString * _Nullable identifier __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("identifier")]
	//	string Identifier { get; set; }
	//}

	//// @protocol UILayoutSupport <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UILayoutSupport
	//{
	//	// @required @property (readonly, nonatomic) CGFloat length;
	//	[Abstract]
	//	[Export ("length")]
	//	nfloat Length { get; }

	//	// @required @property (readonly, strong) NSLayoutYAxisAnchor * _Nonnull topAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Abstract]
	//	[Export ("topAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutYAxisAnchor TopAnchor { get; }

	//	// @required @property (readonly, strong) NSLayoutYAxisAnchor * _Nonnull bottomAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Abstract]
	//	[Export ("bottomAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutYAxisAnchor BottomAnchor { get; }

	//	// @required @property (readonly, strong) NSLayoutDimension * _Nonnull heightAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Abstract]
	//	[Export ("heightAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutDimension HeightAnchor { get; }
	//}

	//// @interface UIDevice : NSObject
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIDevice
	//{
	//	// @property (readonly, nonatomic, class) UIDevice * _Nonnull currentDevice;
	//	[Static]
	//	[Export ("currentDevice")]
	//	UIDevice CurrentDevice { get; }

	//	// @property (readonly, nonatomic, strong) NSString * _Nonnull name;
	//	[Export ("name", ArgumentSemantic.Strong)]
	//	string Name { get; }

	//	// @property (readonly, nonatomic, strong) NSString * _Nonnull model;
	//	[Export ("model", ArgumentSemantic.Strong)]
	//	string Model { get; }

	//	// @property (readonly, nonatomic, strong) NSString * _Nonnull localizedModel;
	//	[Export ("localizedModel", ArgumentSemantic.Strong)]
	//	string LocalizedModel { get; }

	//	// @property (readonly, nonatomic, strong) NSString * _Nonnull systemName;
	//	[Export ("systemName", ArgumentSemantic.Strong)]
	//	string SystemName { get; }

	//	// @property (readonly, nonatomic, strong) NSString * _Nonnull systemVersion;
	//	[Export ("systemVersion", ArgumentSemantic.Strong)]
	//	string SystemVersion { get; }

	//	// @property (readonly, nonatomic) UIDeviceOrientation orientation __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("orientation")]
	//	UIDeviceOrientation Orientation { get; }

	//	// @property (readonly, nonatomic, strong) NSUUID * _Nullable identifierForVendor __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("identifierForVendor", ArgumentSemantic.Strong)]
	//	NSUuid IdentifierForVendor { get; }

	//	// @property (readonly, getter = isGeneratingDeviceOrientationNotifications, nonatomic) BOOL generatesDeviceOrientationNotifications __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("generatesDeviceOrientationNotifications")]
	//	bool GeneratesDeviceOrientationNotifications { [Bind ("isGeneratingDeviceOrientationNotifications")] get; }

	//	// -(void)beginGeneratingDeviceOrientationNotifications __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("beginGeneratingDeviceOrientationNotifications")]
	//	void BeginGeneratingDeviceOrientationNotifications ();

	//	// -(void)endGeneratingDeviceOrientationNotifications __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("endGeneratingDeviceOrientationNotifications")]
	//	void EndGeneratingDeviceOrientationNotifications ();

	//	// @property (getter = isBatteryMonitoringEnabled, nonatomic) BOOL batteryMonitoringEnabled __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3, 0)]
	//	[Export ("batteryMonitoringEnabled")]
	//	bool BatteryMonitoringEnabled { [Bind ("isBatteryMonitoringEnabled")] get; set; }

	//	// @property (readonly, nonatomic) UIDeviceBatteryState batteryState __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3, 0)]
	//	[Export ("batteryState")]
	//	UIDeviceBatteryState BatteryState { get; }

	//	// @property (readonly, nonatomic) float batteryLevel __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3, 0)]
	//	[Export ("batteryLevel")]
	//	float BatteryLevel { get; }

	//	// @property (getter = isProximityMonitoringEnabled, nonatomic) BOOL proximityMonitoringEnabled __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("proximityMonitoringEnabled")]
	//	bool ProximityMonitoringEnabled { [Bind ("isProximityMonitoringEnabled")] get; set; }

	//	// @property (readonly, nonatomic) BOOL proximityState __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("proximityState")]
	//	bool ProximityState { get; }

	//	// @property (readonly, getter = isMultitaskingSupported, nonatomic) BOOL multitaskingSupported __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("multitaskingSupported")]
	//	bool MultitaskingSupported { [Bind ("isMultitaskingSupported")] get; }

	//	// @property (readonly, nonatomic) UIUserInterfaceIdiom userInterfaceIdiom __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[Export ("userInterfaceIdiom")]
	//	UIUserInterfaceIdiom UserInterfaceIdiom { get; }

	//	// -(void)playInputClick __attribute__((availability(ios, introduced=4.2)));
	//	[iOS (4,2)]
	//	[Export ("playInputClick")]
	//	void PlayInputClick ();
	//}

	//// @protocol UIInputViewAudioFeedback <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIInputViewAudioFeedback
	//{
	//	// @optional @property (readonly, nonatomic) BOOL enableInputClicksWhenVisible;
	//	[Export ("enableInputClicksWhenVisible")]
	//	bool EnableInputClicksWhenVisible { get; }
	//}

	//// @interface UITouch : NSObject
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface UITouch
	//{
	//	// @property (readonly, nonatomic) NSTimeInterval timestamp;
	//	[Export ("timestamp")]
	//	double Timestamp { get; }

	//	// @property (readonly, nonatomic) UITouchPhase phase;
	//	[Export ("phase")]
	//	UITouchPhase Phase { get; }

	//	// @property (readonly, nonatomic) NSUInteger tapCount;
	//	[Export ("tapCount")]
	//	nuint TapCount { get; }

	//	// @property (readonly, nonatomic) UITouchType type __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("type")]
	//	UITouchType Type { get; }

	//	// @property (readonly, nonatomic) CGFloat majorRadius __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("majorRadius")]
	//	nfloat MajorRadius { get; }

	//	// @property (readonly, nonatomic) CGFloat majorRadiusTolerance __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("majorRadiusTolerance")]
	//	nfloat MajorRadiusTolerance { get; }

	//	// @property (readonly, nonatomic, strong) UIWindow * _Nullable window;
	//	[NullAllowed, Export ("window", ArgumentSemantic.Strong)]
	//	UIWindow Window { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nullable view;
	//	[NullAllowed, Export ("view", ArgumentSemantic.Strong)]
	//	UIView View { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<UIGestureRecognizer *> * _Nullable gestureRecognizers __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[NullAllowed, Export ("gestureRecognizers", ArgumentSemantic.Copy)]
	//	UIGestureRecognizer[] GestureRecognizers { get; }

	//	// -(CGPoint)locationInView:(UIView * _Nullable)view;
	//	[Export ("locationInView:")]
	//	CGPoint LocationInView ([NullAllowed] UIView view);

	//	// -(CGPoint)previousLocationInView:(UIView * _Nullable)view;
	//	[Export ("previousLocationInView:")]
	//	CGPoint PreviousLocationInView ([NullAllowed] UIView view);

	//	// -(CGPoint)preciseLocationInView:(UIView * _Nullable)view __attribute__((availability(ios, introduced=9.1)));
	//	[iOS (9,1)]
	//	[Export ("preciseLocationInView:")]
	//	CGPoint PreciseLocationInView ([NullAllowed] UIView view);

	//	// -(CGPoint)precisePreviousLocationInView:(UIView * _Nullable)view __attribute__((availability(ios, introduced=9.1)));
	//	[iOS (9,1)]
	//	[Export ("precisePreviousLocationInView:")]
	//	CGPoint PrecisePreviousLocationInView ([NullAllowed] UIView view);

	//	// @property (readonly, nonatomic) CGFloat force __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("force")]
	//	nfloat Force { get; }

	//	// @property (readonly, nonatomic) CGFloat maximumPossibleForce __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("maximumPossibleForce")]
	//	nfloat MaximumPossibleForce { get; }

	//	// -(CGFloat)azimuthAngleInView:(UIView * _Nullable)view __attribute__((availability(ios, introduced=9.1)));
	//	[iOS (9,1)]
	//	[Export ("azimuthAngleInView:")]
	//	nfloat AzimuthAngleInView ([NullAllowed] UIView view);

	//	// -(CGVector)azimuthUnitVectorInView:(UIView * _Nullable)view __attribute__((availability(ios, introduced=9.1)));
	//	[iOS (9,1)]
	//	[Export ("azimuthUnitVectorInView:")]
	//	CGVector AzimuthUnitVectorInView ([NullAllowed] UIView view);

	//	// @property (readonly, nonatomic) CGFloat altitudeAngle __attribute__((availability(ios, introduced=9.1)));
	//	[iOS (9, 1)]
	//	[Export ("altitudeAngle")]
	//	nfloat AltitudeAngle { get; }

	//	// @property (readonly, nonatomic) NSNumber * _Nullable estimationUpdateIndex __attribute__((availability(ios, introduced=9.1)));
	//	[iOS (9, 1)]
	//	[NullAllowed, Export ("estimationUpdateIndex")]
	//	NSNumber EstimationUpdateIndex { get; }

	//	// @property (readonly, nonatomic) UITouchProperties estimatedProperties __attribute__((availability(ios, introduced=9.1)));
	//	[iOS (9, 1)]
	//	[Export ("estimatedProperties")]
	//	UITouchProperties EstimatedProperties { get; }

	//	// @property (readonly, nonatomic) UITouchProperties estimatedPropertiesExpectingUpdates __attribute__((availability(ios, introduced=9.1)));
	//	[iOS (9, 1)]
	//	[Export ("estimatedPropertiesExpectingUpdates")]
	//	UITouchProperties EstimatedPropertiesExpectingUpdates { get; }
	//}

	//// @interface UITraitCollection : NSObject <NSCopying, NSSecureCoding>
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface UITraitCollection : INSCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(BOOL)containsTraitsInCollection:(UITraitCollection * _Nullable)trait;
	//	[Export ("containsTraitsInCollection:")]
	//	bool ContainsTraitsInCollection ([NullAllowed] UITraitCollection trait);

	//	// +(UITraitCollection * _Nonnull)traitCollectionWithTraitsFromCollections:(NSArray<UITraitCollection *> * _Nonnull)traitCollections;
	//	[Static]
	//	[Export ("traitCollectionWithTraitsFromCollections:")]
	//	UITraitCollection TraitCollectionWithTraitsFromCollections (UITraitCollection[] traitCollections);

	//	// +(UITraitCollection * _Nonnull)traitCollectionWithUserInterfaceIdiom:(UIUserInterfaceIdiom)idiom;
	//	[Static]
	//	[Export ("traitCollectionWithUserInterfaceIdiom:")]
	//	UITraitCollection TraitCollectionWithUserInterfaceIdiom (UIUserInterfaceIdiom idiom);

	//	// @property (readonly, nonatomic) UIUserInterfaceIdiom userInterfaceIdiom;
	//	[Export ("userInterfaceIdiom")]
	//	UIUserInterfaceIdiom UserInterfaceIdiom { get; }

	//	// +(UITraitCollection * _Nonnull)traitCollectionWithUserInterfaceStyle:(UIUserInterfaceStyle)userInterfaceStyle __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=10.0)));
	//	[TV (10,0), NoWatch, iOS (12,0)]
	//	[Static]
	//	[Export ("traitCollectionWithUserInterfaceStyle:")]
	//	UITraitCollection TraitCollectionWithUserInterfaceStyle (UIUserInterfaceStyle userInterfaceStyle);

	//	// @property (readonly, nonatomic) UIUserInterfaceStyle userInterfaceStyle __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=10.0)));
	//	[TV (10, 0), NoWatch, iOS (12, 0)]
	//	[Export ("userInterfaceStyle")]
	//	UIUserInterfaceStyle UserInterfaceStyle { get; }

	//	// +(UITraitCollection * _Nonnull)traitCollectionWithLayoutDirection:(UITraitEnvironmentLayoutDirection)layoutDirection __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("traitCollectionWithLayoutDirection:")]
	//	UITraitCollection TraitCollectionWithLayoutDirection (UITraitEnvironmentLayoutDirection layoutDirection);

	//	// @property (readonly, nonatomic) UITraitEnvironmentLayoutDirection layoutDirection __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("layoutDirection")]
	//	UITraitEnvironmentLayoutDirection LayoutDirection { get; }

	//	// +(UITraitCollection * _Nonnull)traitCollectionWithDisplayScale:(CGFloat)scale;
	//	[Static]
	//	[Export ("traitCollectionWithDisplayScale:")]
	//	UITraitCollection TraitCollectionWithDisplayScale (nfloat scale);

	//	// @property (readonly, nonatomic) CGFloat displayScale;
	//	[Export ("displayScale")]
	//	nfloat DisplayScale { get; }

	//	// +(UITraitCollection * _Nonnull)traitCollectionWithHorizontalSizeClass:(UIUserInterfaceSizeClass)horizontalSizeClass;
	//	[Static]
	//	[Export ("traitCollectionWithHorizontalSizeClass:")]
	//	UITraitCollection TraitCollectionWithHorizontalSizeClass (UIUserInterfaceSizeClass horizontalSizeClass);

	//	// @property (readonly, nonatomic) UIUserInterfaceSizeClass horizontalSizeClass;
	//	[Export ("horizontalSizeClass")]
	//	UIUserInterfaceSizeClass HorizontalSizeClass { get; }

	//	// +(UITraitCollection * _Nonnull)traitCollectionWithVerticalSizeClass:(UIUserInterfaceSizeClass)verticalSizeClass;
	//	[Static]
	//	[Export ("traitCollectionWithVerticalSizeClass:")]
	//	UITraitCollection TraitCollectionWithVerticalSizeClass (UIUserInterfaceSizeClass verticalSizeClass);

	//	// @property (readonly, nonatomic) UIUserInterfaceSizeClass verticalSizeClass;
	//	[Export ("verticalSizeClass")]
	//	UIUserInterfaceSizeClass VerticalSizeClass { get; }

	//	// +(UITraitCollection * _Nonnull)traitCollectionWithForceTouchCapability:(UIForceTouchCapability)capability __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("traitCollectionWithForceTouchCapability:")]
	//	UITraitCollection TraitCollectionWithForceTouchCapability (UIForceTouchCapability capability);

	//	// @property (readonly, nonatomic) UIForceTouchCapability forceTouchCapability __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("forceTouchCapability")]
	//	UIForceTouchCapability ForceTouchCapability { get; }

	//	// +(UITraitCollection * _Nonnull)traitCollectionWithPreferredContentSizeCategory:(UIContentSizeCategory _Nonnull)preferredContentSizeCategory __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("traitCollectionWithPreferredContentSizeCategory:")]
	//	UITraitCollection TraitCollectionWithPreferredContentSizeCategory (string preferredContentSizeCategory);

	//	// @property (readonly, copy, nonatomic) UIContentSizeCategory _Nonnull preferredContentSizeCategory __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("preferredContentSizeCategory")]
	//	string PreferredContentSizeCategory { get; }

	//	// +(UITraitCollection * _Nonnull)traitCollectionWithDisplayGamut:(UIDisplayGamut)displayGamut __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("traitCollectionWithDisplayGamut:")]
	//	UITraitCollection TraitCollectionWithDisplayGamut (UIDisplayGamut displayGamut);

	//	// @property (readonly, nonatomic) UIDisplayGamut displayGamut __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("displayGamut")]
	//	UIDisplayGamut DisplayGamut { get; }
	//}

	//// @protocol UITraitEnvironment <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITraitEnvironment
	//{
	//	// @required @property (readonly, nonatomic) UITraitCollection * _Nonnull traitCollection __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Abstract]
	//	[Export ("traitCollection")]
	//	UITraitCollection TraitCollection { get; }

	//	// @required -(void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("traitCollectionDidChange:")]
	//	void TraitCollectionDidChange ([NullAllowed] UITraitCollection previousTraitCollection);
	//}

	//// @interface UILayoutGuide : NSObject <NSCoding>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface UILayoutGuide : INSCoding
	//{
	//	// @property (readonly, nonatomic) CGRect layoutFrame;
	//	[Export ("layoutFrame")]
	//	CGRect LayoutFrame { get; }

	//	// @property (nonatomic, weak) UIView * _Nullable owningView;
	//	[NullAllowed, Export ("owningView", ArgumentSemantic.Weak)]
	//	UIView OwningView { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; set; }

	//	// @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull leadingAnchor;
	//	[Export ("leadingAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutXAxisAnchor LeadingAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull trailingAnchor;
	//	[Export ("trailingAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutXAxisAnchor TrailingAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull leftAnchor;
	//	[Export ("leftAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutXAxisAnchor LeftAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull rightAnchor;
	//	[Export ("rightAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutXAxisAnchor RightAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull topAnchor;
	//	[Export ("topAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutYAxisAnchor TopAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull bottomAnchor;
	//	[Export ("bottomAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutYAxisAnchor BottomAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutDimension * _Nonnull widthAnchor;
	//	[Export ("widthAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutDimension WidthAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutDimension * _Nonnull heightAnchor;
	//	[Export ("heightAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutDimension HeightAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull centerXAnchor;
	//	[Export ("centerXAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutXAxisAnchor CenterXAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull centerYAnchor;
	//	[Export ("centerYAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutYAxisAnchor CenterYAnchor { get; }
	//}

	//// @interface UIFocusGuide : UILayoutGuide
	//[iOS (9,0)]
	//[BaseType (typeof(UILayoutGuide))]
	//interface UIFocusGuide
	//{
	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (copy, nonatomic) NSArray<id<UIFocusEnvironment>> * _Null_unspecified preferredFocusEnvironments __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("preferredFocusEnvironments", ArgumentSemantic.Copy)]
	//	UIFocusEnvironment[] PreferredFocusEnvironments { get; set; }

	//	// @property (nonatomic, weak) UIView * _Nullable preferredFocusedView __attribute__((availability(ios, introduced=9.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 9, 0, message: "Use -preferredFocusEnvironments instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use -preferredFocusEnvironments instead.")]
	//	[NullAllowed, Export ("preferredFocusedView", ArgumentSemantic.Weak)]
	//	UIView PreferredFocusedView { get; set; }
	//}

	//// @protocol UIFocusAnimationContext <NSObject>
	//[iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIFocusAnimationContext
	//{
	//	// @required @property (readonly, nonatomic) NSTimeInterval duration;
	//	[Abstract]
	//	[Export ("duration")]
	//	double Duration { get; }
	//}

	//// @interface UIFocusAnimationCoordinator : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIFocusAnimationCoordinator
	//{
	//	// -(void)addCoordinatedAnimations:(void (^ _Nullable)(void))animations completion:(void (^ _Nullable)(void))completion;
	//	[Export ("addCoordinatedAnimations:completion:")]
	//	void AddCoordinatedAnimations ([NullAllowed] Action animations, [NullAllowed] Action completion);

	//	// -(void)addCoordinatedFocusingAnimations:(void (^ _Nullable)(id<UIFocusAnimationContext> _Nonnull))animations completion:(void (^ _Nullable)(void))completion __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("addCoordinatedFocusingAnimations:completion:")]
	//	void AddCoordinatedFocusingAnimations ([NullAllowed] Action<UIFocusAnimationContext> animations, [NullAllowed] Action completion);

	//	// -(void)addCoordinatedUnfocusingAnimations:(void (^ _Nullable)(id<UIFocusAnimationContext> _Nonnull))animations completion:(void (^ _Nullable)(void))completion __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("addCoordinatedUnfocusingAnimations:completion:")]
	//	void AddCoordinatedUnfocusingAnimations ([NullAllowed] Action<UIFocusAnimationContext> animations, [NullAllowed] Action completion);
	//}

	//// @protocol UIFocusEnvironment <NSObject>
	//[iOS (9,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIFocusEnvironment
	//{
	//	// @required @property (readonly, copy, nonatomic) NSArray<id<UIFocusEnvironment>> * _Nonnull preferredFocusEnvironments;
	//	[Abstract]
	//	[Export ("preferredFocusEnvironments", ArgumentSemantic.Copy)]
	//	UIFocusEnvironment[] PreferredFocusEnvironments { get; }

	//	// @required @property (readonly, nonatomic, weak) id<UIFocusEnvironment> _Nullable parentFocusEnvironment __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
	//	[TV (12, 0), iOS (12, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("parentFocusEnvironment", ArgumentSemantic.Weak)]
	//	UIFocusEnvironment ParentFocusEnvironment { get; }

	//	// @required @property (readonly, nonatomic) id<UIFocusItemContainer> _Nullable focusItemContainer __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
	//	[TV (12, 0), iOS (12, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("focusItemContainer")]
	//	UIFocusItemContainer FocusItemContainer { get; }

	//	// @required -(void)setNeedsFocusUpdate;
	//	[Abstract]
	//	[Export ("setNeedsFocusUpdate")]
	//	void SetNeedsFocusUpdate ();

	//	// @required -(void)updateFocusIfNeeded;
	//	[Abstract]
	//	[Export ("updateFocusIfNeeded")]
	//	void UpdateFocusIfNeeded ();

	//	// @required -(BOOL)shouldUpdateFocusInContext:(UIFocusUpdateContext * _Nonnull)context;
	//	[Abstract]
	//	[Export ("shouldUpdateFocusInContext:")]
	//	bool ShouldUpdateFocusInContext (UIFocusUpdateContext context);

	//	// @required -(void)didUpdateFocusInContext:(UIFocusUpdateContext * _Nonnull)context withAnimationCoordinator:(UIFocusAnimationCoordinator * _Nonnull)coordinator;
	//	[Abstract]
	//	[Export ("didUpdateFocusInContext:withAnimationCoordinator:")]
	//	void DidUpdateFocusInContext (UIFocusUpdateContext context, UIFocusAnimationCoordinator coordinator);

	//	// @optional -(UIFocusSoundIdentifier _Nullable)soundIdentifierForFocusUpdateInContext:(UIFocusUpdateContext * _Nonnull)context __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
	//	[TV (11,0), NoWatch, NoiOS]
	//	[Export ("soundIdentifierForFocusUpdateInContext:")]
	//	[return: NullAllowed]
	//	string SoundIdentifierForFocusUpdateInContext (UIFocusUpdateContext context);

	//	// @optional @property (readonly, nonatomic, weak) UIView * _Nullable preferredFocusedView __attribute__((availability(ios, introduced=9.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 9, 0, message: "Use -preferredFocusEnvironments instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use -preferredFocusEnvironments instead.")]
	//	[NullAllowed, Export ("preferredFocusedView", ArgumentSemantic.Weak)]
	//	UIView PreferredFocusedView { get; }
	//}

	//// @protocol UIFocusItem <UIFocusEnvironment>
	//[iOS (10,0)]
	//[Protocol, Model]
	//interface UIFocusItem : IUIFocusEnvironment
	//{
	//	// @required @property (readonly, nonatomic) BOOL canBecomeFocused;
	//	[Abstract]
	//	[Export ("canBecomeFocused")]
	//	bool CanBecomeFocused { get; }

	//	// @required @property (readonly, nonatomic) CGRect frame __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
	//	[TV (12, 0), iOS (12, 0)]
	//	[Abstract]
	//	[Export ("frame")]
	//	CGRect Frame { get; }

	//	// @optional -(void)didHintFocusMovement:(UIFocusMovementHint * _Nonnull)hint;
	//	[Export ("didHintFocusMovement:")]
	//	void DidHintFocusMovement (UIFocusMovementHint hint);
	//}

	//// @protocol UIFocusItemContainer <NSObject>
	//[iOS (12,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIFocusItemContainer
	//{
	//	// @required @property (readonly, nonatomic) id<UICoordinateSpace> _Nonnull coordinateSpace;
	//	[Abstract]
	//	[Export ("coordinateSpace")]
	//	UICoordinateSpace CoordinateSpace { get; }

	//	// @required -(NSArray<id<UIFocusItem>> * _Nonnull)focusItemsInRect:(CGRect)rect;
	//	[Abstract]
	//	[Export ("focusItemsInRect:")]
	//	UIFocusItem[] FocusItemsInRect (CGRect rect);
	//}

	//// @protocol UIFocusItemScrollableContainer <UIFocusItemContainer>
	//[iOS (12,0)]
	//[Protocol, Model]
	//interface UIFocusItemScrollableContainer : IUIFocusItemContainer
	//{
	//	// @required @property (readwrite, nonatomic) CGPoint contentOffset;
	//	[Abstract]
	//	[Export ("contentOffset", ArgumentSemantic.Assign)]
	//	CGPoint ContentOffset { get; set; }

	//	// @required @property (readonly, nonatomic) CGSize contentSize;
	//	[Abstract]
	//	[Export ("contentSize")]
	//	CGSize ContentSize { get; }

	//	// @required @property (readonly, nonatomic) CGSize visibleSize;
	//	[Abstract]
	//	[Export ("visibleSize")]
	//	CGSize VisibleSize { get; }
	//}

	//// @interface UIFocusUpdateContext : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIFocusUpdateContext
	//{
	//	// @property (readonly, nonatomic, weak) id<UIFocusItem> _Nullable previouslyFocusedItem __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("previouslyFocusedItem", ArgumentSemantic.Weak)]
	//	UIFocusItem PreviouslyFocusedItem { get; }

	//	// @property (readonly, nonatomic, weak) id<UIFocusItem> _Nullable nextFocusedItem __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("nextFocusedItem", ArgumentSemantic.Weak)]
	//	UIFocusItem NextFocusedItem { get; }

	//	// @property (readonly, nonatomic, weak) UIView * _Nullable previouslyFocusedView;
	//	[NullAllowed, Export ("previouslyFocusedView", ArgumentSemantic.Weak)]
	//	UIView PreviouslyFocusedView { get; }

	//	// @property (readonly, nonatomic, weak) UIView * _Nullable nextFocusedView;
	//	[NullAllowed, Export ("nextFocusedView", ArgumentSemantic.Weak)]
	//	UIView NextFocusedView { get; }

	//	// @property (readonly, assign, nonatomic) UIFocusHeading focusHeading;
	//	[Export ("focusHeading", ArgumentSemantic.Assign)]
	//	UIFocusHeading FocusHeading { get; }
	//}

	//// @protocol UICoordinateSpace <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UICoordinateSpace
	//{
	//	// @required -(CGPoint)convertPoint:(CGPoint)point toCoordinateSpace:(id<UICoordinateSpace> _Nonnull)coordinateSpace __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("convertPoint:toCoordinateSpace:")]
	//	CGPoint ConvertPoint (CGPoint point, UICoordinateSpace coordinateSpace);

	//	// @required -(CGPoint)convertPoint:(CGPoint)point fromCoordinateSpace:(id<UICoordinateSpace> _Nonnull)coordinateSpace __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("convertPoint:fromCoordinateSpace:")]
	//	CGPoint ConvertPoint (CGPoint point, UICoordinateSpace coordinateSpace);

	//	// @required -(CGRect)convertRect:(CGRect)rect toCoordinateSpace:(id<UICoordinateSpace> _Nonnull)coordinateSpace __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("convertRect:toCoordinateSpace:")]
	//	CGRect ConvertRect (CGRect rect, UICoordinateSpace coordinateSpace);

	//	// @required -(CGRect)convertRect:(CGRect)rect fromCoordinateSpace:(id<UICoordinateSpace> _Nonnull)coordinateSpace __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("convertRect:fromCoordinateSpace:")]
	//	CGRect ConvertRect (CGRect rect, UICoordinateSpace coordinateSpace);

	//	// @required @property (readonly, nonatomic) CGRect bounds __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Abstract]
	//	[Export ("bounds")]
	//	CGRect Bounds { get; }
	//}

	//// @interface UIView : UIResponder <NSCoding, UIAppearance, UIAppearanceContainer, UIDynamicItem, UITraitEnvironment, UICoordinateSpace, UIFocusItem, UIFocusItemContainer, CALayerDelegate>
	//[iOS (2,0)]
	//[BaseType (typeof(UIResponder))]
	//interface UIView : INSCoding, IUIAppearance, IUIAppearanceContainer, IUIDynamicItem, IUITraitEnvironment, IUICoordinateSpace, IUIFocusItem, IUIFocusItemContainer, ICALayerDelegate
	//{
	//	// @property (readonly, nonatomic, class) Class _Nonnull layerClass;
	//	[Static]
	//	[Export ("layerClass")]
	//	Class LayerClass { get; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (getter = isUserInteractionEnabled, nonatomic) BOOL userInteractionEnabled;
	//	[Export ("userInteractionEnabled")]
	//	bool UserInteractionEnabled { [Bind ("isUserInteractionEnabled")] get; set; }

	//	// @property (nonatomic) NSInteger tag;
	//	[Export ("tag")]
	//	nint Tag { get; set; }

	//	// @property (readonly, nonatomic, strong) CALayer * _Nonnull layer;
	//	[Export ("layer", ArgumentSemantic.Strong)]
	//	CALayer Layer { get; }

	//	// @property (readonly, nonatomic) BOOL canBecomeFocused __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("canBecomeFocused")]
	//	bool CanBecomeFocused { get; }

	//	// @property (readonly, getter = isFocused, nonatomic) BOOL focused __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("focused")]
	//	bool Focused { [Bind ("isFocused")] get; }

	//	// @property (nonatomic) UISemanticContentAttribute semanticContentAttribute __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("semanticContentAttribute", ArgumentSemantic.Assign)]
	//	UISemanticContentAttribute SemanticContentAttribute { get; set; }

	//	// +(UIUserInterfaceLayoutDirection)userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)attribute __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("userInterfaceLayoutDirectionForSemanticContentAttribute:")]
	//	UIUserInterfaceLayoutDirection UserInterfaceLayoutDirectionForSemanticContentAttribute (UISemanticContentAttribute attribute);

	//	// +(UIUserInterfaceLayoutDirection)userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)semanticContentAttribute relativeToLayoutDirection:(UIUserInterfaceLayoutDirection)layoutDirection __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:")]
	//	UIUserInterfaceLayoutDirection UserInterfaceLayoutDirectionForSemanticContentAttribute (UISemanticContentAttribute semanticContentAttribute, UIUserInterfaceLayoutDirection layoutDirection);

	//	// @property (readonly, nonatomic) UIUserInterfaceLayoutDirection effectiveUserInterfaceLayoutDirection __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("effectiveUserInterfaceLayoutDirection")]
	//	UIUserInterfaceLayoutDirection EffectiveUserInterfaceLayoutDirection { get; }
	//}

	//// @interface UIViewGeometry (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIViewGeometry
	//{
	//	// @property (nonatomic) CGRect frame;
	//	[Export ("frame", ArgumentSemantic.Assign)]
	//	CGRect Frame { get; set; }

	//	// @property (nonatomic) CGRect bounds;
	//	[Export ("bounds", ArgumentSemantic.Assign)]
	//	CGRect Bounds { get; set; }

	//	// @property (nonatomic) CGPoint center;
	//	[Export ("center", ArgumentSemantic.Assign)]
	//	CGPoint Center { get; set; }

	//	// @property (nonatomic) CGAffineTransform transform;
	//	[Export ("transform", ArgumentSemantic.Assign)]
	//	CGAffineTransform Transform { get; set; }

	//	// @property (nonatomic) CGFloat contentScaleFactor __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("contentScaleFactor")]
	//	nfloat ContentScaleFactor { get; set; }

	//	// @property (getter = isMultipleTouchEnabled, nonatomic) BOOL multipleTouchEnabled __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("multipleTouchEnabled")]
	//	bool MultipleTouchEnabled { [Bind ("isMultipleTouchEnabled")] get; set; }

	//	// @property (getter = isExclusiveTouch, nonatomic) BOOL exclusiveTouch __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("exclusiveTouch")]
	//	bool ExclusiveTouch { [Bind ("isExclusiveTouch")] get; set; }

	//	// -(UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
	//	[Export ("hitTest:withEvent:")]
	//	[return: NullAllowed]
	//	UIView HitTest (CGPoint point, [NullAllowed] UIEvent @event);

	//	// -(BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
	//	[Export ("pointInside:withEvent:")]
	//	bool PointInside (CGPoint point, [NullAllowed] UIEvent @event);

	//	// -(CGPoint)convertPoint:(CGPoint)point toView:(UIView * _Nullable)view;
	//	[Export ("convertPoint:toView:")]
	//	CGPoint ConvertPoint (CGPoint point, [NullAllowed] UIView view);

	//	// -(CGPoint)convertPoint:(CGPoint)point fromView:(UIView * _Nullable)view;
	//	[Export ("convertPoint:fromView:")]
	//	CGPoint ConvertPoint (CGPoint point, [NullAllowed] UIView view);

	//	// -(CGRect)convertRect:(CGRect)rect toView:(UIView * _Nullable)view;
	//	[Export ("convertRect:toView:")]
	//	CGRect ConvertRect (CGRect rect, [NullAllowed] UIView view);

	//	// -(CGRect)convertRect:(CGRect)rect fromView:(UIView * _Nullable)view;
	//	[Export ("convertRect:fromView:")]
	//	CGRect ConvertRect (CGRect rect, [NullAllowed] UIView view);

	//	// @property (nonatomic) BOOL autoresizesSubviews;
	//	[Export ("autoresizesSubviews")]
	//	bool AutoresizesSubviews { get; set; }

	//	// @property (nonatomic) UIViewAutoresizing autoresizingMask;
	//	[Export ("autoresizingMask", ArgumentSemantic.Assign)]
	//	UIViewAutoresizing AutoresizingMask { get; set; }

	//	// -(CGSize)sizeThatFits:(CGSize)size;
	//	[Export ("sizeThatFits:")]
	//	CGSize SizeThatFits (CGSize size);

	//	// -(void)sizeToFit;
	//	[Export ("sizeToFit")]
	//	void SizeToFit ();
	//}

	//// @interface UIViewHierarchy (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIViewHierarchy
	//{
	//	// @property (readonly, nonatomic) UIView * _Nullable superview;
	//	[NullAllowed, Export ("superview")]
	//	UIView Superview { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<__kindof UIView *> * _Nonnull subviews;
	//	[Export ("subviews", ArgumentSemantic.Copy)]
	//	UIView[] Subviews { get; }

	//	// @property (readonly, nonatomic) UIWindow * _Nullable window;
	//	[NullAllowed, Export ("window")]
	//	UIWindow Window { get; }

	//	// -(void)removeFromSuperview;
	//	[Export ("removeFromSuperview")]
	//	void RemoveFromSuperview ();

	//	// -(void)insertSubview:(UIView * _Nonnull)view atIndex:(NSInteger)index;
	//	[Export ("insertSubview:atIndex:")]
	//	void InsertSubview (UIView view, nint index);

	//	// -(void)exchangeSubviewAtIndex:(NSInteger)index1 withSubviewAtIndex:(NSInteger)index2;
	//	[Export ("exchangeSubviewAtIndex:withSubviewAtIndex:")]
	//	void ExchangeSubviewAtIndex (nint index1, nint index2);

	//	// -(void)addSubview:(UIView * _Nonnull)view;
	//	[Export ("addSubview:")]
	//	void AddSubview (UIView view);

	//	// -(void)insertSubview:(UIView * _Nonnull)view belowSubview:(UIView * _Nonnull)siblingSubview;
	//	[Export ("insertSubview:belowSubview:")]
	//	void InsertSubview (UIView view, UIView siblingSubview);

	//	// -(void)insertSubview:(UIView * _Nonnull)view aboveSubview:(UIView * _Nonnull)siblingSubview;
	//	[Export ("insertSubview:aboveSubview:")]
	//	void InsertSubview (UIView view, UIView siblingSubview);

	//	// -(void)bringSubviewToFront:(UIView * _Nonnull)view;
	//	[Export ("bringSubviewToFront:")]
	//	void BringSubviewToFront (UIView view);

	//	// -(void)sendSubviewToBack:(UIView * _Nonnull)view;
	//	[Export ("sendSubviewToBack:")]
	//	void SendSubviewToBack (UIView view);

	//	// -(void)didAddSubview:(UIView * _Nonnull)subview;
	//	[Export ("didAddSubview:")]
	//	void DidAddSubview (UIView subview);

	//	// -(void)willRemoveSubview:(UIView * _Nonnull)subview;
	//	[Export ("willRemoveSubview:")]
	//	void WillRemoveSubview (UIView subview);

	//	// -(void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
	//	[Export ("willMoveToSuperview:")]
	//	void WillMoveToSuperview ([NullAllowed] UIView newSuperview);

	//	// -(void)didMoveToSuperview;
	//	[Export ("didMoveToSuperview")]
	//	void DidMoveToSuperview ();

	//	// -(void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
	//	[Export ("willMoveToWindow:")]
	//	void WillMoveToWindow ([NullAllowed] UIWindow newWindow);

	//	// -(void)didMoveToWindow;
	//	[Export ("didMoveToWindow")]
	//	void DidMoveToWindow ();

	//	// -(BOOL)isDescendantOfView:(UIView * _Nonnull)view;
	//	[Export ("isDescendantOfView:")]
	//	bool IsDescendantOfView (UIView view);

	//	// -(__kindof UIView * _Nullable)viewWithTag:(NSInteger)tag;
	//	[Export ("viewWithTag:")]
	//	UIView ViewWithTag (nint tag);

	//	// -(void)setNeedsLayout;
	//	[Export ("setNeedsLayout")]
	//	void SetNeedsLayout ();

	//	// -(void)layoutIfNeeded;
	//	[Export ("layoutIfNeeded")]
	//	void LayoutIfNeeded ();

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();

	//	// @property (nonatomic) UIEdgeInsets layoutMargins __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("layoutMargins", ArgumentSemantic.Assign)]
	//	UIEdgeInsets LayoutMargins { get; set; }

	//	// @property (nonatomic) NSDirectionalEdgeInsets directionalLayoutMargins __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("directionalLayoutMargins", ArgumentSemantic.Assign)]
	//	NSDirectionalEdgeInsets DirectionalLayoutMargins { get; set; }

	//	// @property (nonatomic) BOOL preservesSuperviewLayoutMargins __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("preservesSuperviewLayoutMargins")]
	//	bool PreservesSuperviewLayoutMargins { get; set; }

	//	// @property (nonatomic) BOOL insetsLayoutMarginsFromSafeArea __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("insetsLayoutMarginsFromSafeArea")]
	//	bool InsetsLayoutMarginsFromSafeArea { get; set; }

	//	// -(void)layoutMarginsDidChange __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("layoutMarginsDidChange")]
	//	void LayoutMarginsDidChange ();

	//	// @property (readonly, nonatomic) UIEdgeInsets safeAreaInsets __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("safeAreaInsets")]
	//	UIEdgeInsets SafeAreaInsets { get; }

	//	// -(void)safeAreaInsetsDidChange __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("safeAreaInsetsDidChange")]
	//	void SafeAreaInsetsDidChange ();

	//	// @property (readonly, strong) UILayoutGuide * _Nonnull layoutMarginsGuide __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("layoutMarginsGuide", ArgumentSemantic.Strong)]
	//	UILayoutGuide LayoutMarginsGuide { get; }

	//	// @property (readonly, nonatomic, strong) UILayoutGuide * _Nonnull readableContentGuide __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("readableContentGuide", ArgumentSemantic.Strong)]
	//	UILayoutGuide ReadableContentGuide { get; }

	//	// @property (readonly, nonatomic, strong) UILayoutGuide * _Nonnull safeAreaLayoutGuide __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("safeAreaLayoutGuide", ArgumentSemantic.Strong)]
	//	UILayoutGuide SafeAreaLayoutGuide { get; }
	//}

	//// @interface UIViewRendering (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIViewRendering
	//{
	//	// -(void)drawRect:(CGRect)rect;
	//	[Export ("drawRect:")]
	//	void DrawRect (CGRect rect);

	//	// -(void)setNeedsDisplay;
	//	[Export ("setNeedsDisplay")]
	//	void SetNeedsDisplay ();

	//	// -(void)setNeedsDisplayInRect:(CGRect)rect;
	//	[Export ("setNeedsDisplayInRect:")]
	//	void SetNeedsDisplayInRect (CGRect rect);

	//	// @property (nonatomic) BOOL clipsToBounds;
	//	[Export ("clipsToBounds")]
	//	bool ClipsToBounds { get; set; }

	//	// @property (copy, nonatomic) UIColor * _Nullable backgroundColor __attribute__((annotate("ui_appearance_selector")));
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Copy)]
	//	UIColor BackgroundColor { get; set; }

	//	// @property (nonatomic) CGFloat alpha;
	//	[Export ("alpha")]
	//	nfloat Alpha { get; set; }

	//	// @property (getter = isOpaque, nonatomic) BOOL opaque;
	//	[Export ("opaque")]
	//	bool Opaque { [Bind ("isOpaque")] get; set; }

	//	// @property (nonatomic) BOOL clearsContextBeforeDrawing;
	//	[Export ("clearsContextBeforeDrawing")]
	//	bool ClearsContextBeforeDrawing { get; set; }

	//	// @property (getter = isHidden, nonatomic) BOOL hidden;
	//	[Export ("hidden")]
	//	bool Hidden { [Bind ("isHidden")] get; set; }

	//	// @property (nonatomic) UIViewContentMode contentMode;
	//	[Export ("contentMode", ArgumentSemantic.Assign)]
	//	UIViewContentMode ContentMode { get; set; }

	//	// @property (nonatomic) CGRect contentStretch __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoTV]
	//	[Export ("contentStretch", ArgumentSemantic.Assign)]
	//	CGRect ContentStretch { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable maskView __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("maskView", ArgumentSemantic.Strong)]
	//	UIView MaskView { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// @property (nonatomic) UIViewTintAdjustmentMode tintAdjustmentMode __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("tintAdjustmentMode", ArgumentSemantic.Assign)]
	//	UIViewTintAdjustmentMode TintAdjustmentMode { get; set; }

	//	// -(void)tintColorDidChange __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();
	//}

	//// @interface UIViewAnimation (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIViewAnimation
	//{
	//	// +(void)beginAnimations:(NSString * _Nullable)animationID context:(void * _Nullable)context;
	//	[Static]
	//	[Export ("beginAnimations:context:")]
	//	unsafe void BeginAnimations ([NullAllowed] string animationID, [NullAllowed] void* context);

	//	// +(void)commitAnimations;
	//	[Static]
	//	[Export ("commitAnimations")]
	//	void CommitAnimations ();

	//	// +(void)setAnimationDelegate:(id _Nullable)delegate;
	//	[Static]
	//	[Export ("setAnimationDelegate:")]
	//	void SetAnimationDelegate ([NullAllowed] NSObject @delegate);

	//	// +(void)setAnimationWillStartSelector:(SEL _Nullable)selector;
	//	[Static]
	//	[Export ("setAnimationWillStartSelector:")]
	//	void SetAnimationWillStartSelector ([NullAllowed] Selector selector);

	//	// +(void)setAnimationDidStopSelector:(SEL _Nullable)selector;
	//	[Static]
	//	[Export ("setAnimationDidStopSelector:")]
	//	void SetAnimationDidStopSelector ([NullAllowed] Selector selector);

	//	// +(void)setAnimationDuration:(NSTimeInterval)duration;
	//	[Static]
	//	[Export ("setAnimationDuration:")]
	//	void SetAnimationDuration (double duration);

	//	// +(void)setAnimationDelay:(NSTimeInterval)delay;
	//	[Static]
	//	[Export ("setAnimationDelay:")]
	//	void SetAnimationDelay (double delay);

	//	// +(void)setAnimationStartDate:(NSDate * _Nonnull)startDate;
	//	[Static]
	//	[Export ("setAnimationStartDate:")]
	//	void SetAnimationStartDate (NSDate startDate);

	//	// +(void)setAnimationCurve:(UIViewAnimationCurve)curve;
	//	[Static]
	//	[Export ("setAnimationCurve:")]
	//	void SetAnimationCurve (UIViewAnimationCurve curve);

	//	// +(void)setAnimationRepeatCount:(float)repeatCount;
	//	[Static]
	//	[Export ("setAnimationRepeatCount:")]
	//	void SetAnimationRepeatCount (float repeatCount);

	//	// +(void)setAnimationRepeatAutoreverses:(BOOL)repeatAutoreverses;
	//	[Static]
	//	[Export ("setAnimationRepeatAutoreverses:")]
	//	void SetAnimationRepeatAutoreverses (bool repeatAutoreverses);

	//	// +(void)setAnimationBeginsFromCurrentState:(BOOL)fromCurrentState;
	//	[Static]
	//	[Export ("setAnimationBeginsFromCurrentState:")]
	//	void SetAnimationBeginsFromCurrentState (bool fromCurrentState);

	//	// +(void)setAnimationTransition:(UIViewAnimationTransition)transition forView:(UIView * _Nonnull)view cache:(BOOL)cache;
	//	[Static]
	//	[Export ("setAnimationTransition:forView:cache:")]
	//	void SetAnimationTransition (UIViewAnimationTransition transition, UIView view, bool cache);

	//	// +(void)setAnimationsEnabled:(BOOL)enabled;
	//	[Static]
	//	[Export ("setAnimationsEnabled:")]
	//	void SetAnimationsEnabled (bool enabled);

	//	// @property (readonly, nonatomic, class) BOOL areAnimationsEnabled;
	//	[Static]
	//	[Export ("areAnimationsEnabled")]
	//	bool AreAnimationsEnabled { get; }

	//	// +(void)performWithoutAnimation:(void (^ _Nonnull)(void))actionsWithoutAnimation __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("performWithoutAnimation:")]
	//	void PerformWithoutAnimation (Action actionsWithoutAnimation);

	//	// @property (readonly, nonatomic, class) NSTimeInterval inheritedAnimationDuration __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Static]
	//	[Export ("inheritedAnimationDuration")]
	//	double InheritedAnimationDuration { get; }
	//}

	//// @interface UIViewAnimationWithBlocks (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIViewAnimationWithBlocks
	//{
	//	// +(void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("animateWithDuration:delay:options:animations:completion:")]
	//	void AnimateWithDuration (double duration, double delay, UIViewAnimationOptions options, Action animations, [NullAllowed] Action<bool> completion);

	//	// +(void)animateWithDuration:(NSTimeInterval)duration animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("animateWithDuration:animations:completion:")]
	//	void AnimateWithDuration (double duration, Action animations, [NullAllowed] Action<bool> completion);

	//	// +(void)animateWithDuration:(NSTimeInterval)duration animations:(void (^ _Nonnull)(void))animations __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("animateWithDuration:animations:")]
	//	void AnimateWithDuration (double duration, Action animations);

	//	// +(void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)dampingRatio initialSpringVelocity:(CGFloat)velocity options:(UIViewAnimationOptions)options animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:")]
	//	void AnimateWithDuration (double duration, double delay, nfloat dampingRatio, nfloat velocity, UIViewAnimationOptions options, Action animations, [NullAllowed] Action<bool> completion);

	//	// +(void)transitionWithView:(UIView * _Nonnull)view duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("transitionWithView:duration:options:animations:completion:")]
	//	void TransitionWithView (UIView view, double duration, UIViewAnimationOptions options, [NullAllowed] Action animations, [NullAllowed] Action<bool> completion);

	//	// +(void)transitionFromView:(UIView * _Nonnull)fromView toView:(UIView * _Nonnull)toView duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("transitionFromView:toView:duration:options:completion:")]
	//	void TransitionFromView (UIView fromView, UIView toView, double duration, UIViewAnimationOptions options, [NullAllowed] Action<bool> completion);

	//	// +(void)performSystemAnimation:(UISystemAnimation)animation onViews:(NSArray<__kindof UIView *> * _Nonnull)views options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(void))parallelAnimations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("performSystemAnimation:onViews:options:animations:completion:")]
	//	void PerformSystemAnimation (UISystemAnimation animation, UIView[] views, UIViewAnimationOptions options, [NullAllowed] Action parallelAnimations, [NullAllowed] Action<bool> completion);
	//}

	//// @interface UIViewKeyframeAnimations (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIViewKeyframeAnimations
	//{
	//	// +(void)animateKeyframesWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewKeyframeAnimationOptions)options animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("animateKeyframesWithDuration:delay:options:animations:completion:")]
	//	void AnimateKeyframesWithDuration (double duration, double delay, UIViewKeyframeAnimationOptions options, Action animations, [NullAllowed] Action<bool> completion);

	//	// +(void)addKeyframeWithRelativeStartTime:(double)frameStartTime relativeDuration:(double)frameDuration animations:(void (^ _Nonnull)(void))animations __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("addKeyframeWithRelativeStartTime:relativeDuration:animations:")]
	//	void AddKeyframeWithRelativeStartTime (double frameStartTime, double frameDuration, Action animations);
	//}

	//// @interface UIViewGestureRecognizers (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIViewGestureRecognizers
	//{
	//	// @property (copy, nonatomic) NSArray<__kindof UIGestureRecognizer *> * _Nullable gestureRecognizers __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[NullAllowed, Export ("gestureRecognizers", ArgumentSemantic.Copy)]
	//	UIGestureRecognizer[] GestureRecognizers { get; set; }

	//	// -(void)addGestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3,2)]
	//	[Export ("addGestureRecognizer:")]
	//	void AddGestureRecognizer (UIGestureRecognizer gestureRecognizer);

	//	// -(void)removeGestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3,2)]
	//	[Export ("removeGestureRecognizer:")]
	//	void RemoveGestureRecognizer (UIGestureRecognizer gestureRecognizer);

	//	// -(BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("gestureRecognizerShouldBegin:")]
	//	bool GestureRecognizerShouldBegin (UIGestureRecognizer gestureRecognizer);
	//}

	//// @interface UIViewMotionEffects (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIViewMotionEffects
	//{
	//	// -(void)addMotionEffect:(UIMotionEffect * _Nonnull)effect __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("addMotionEffect:")]
	//	void AddMotionEffect (UIMotionEffect effect);

	//	// -(void)removeMotionEffect:(UIMotionEffect * _Nonnull)effect __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("removeMotionEffect:")]
	//	void RemoveMotionEffect (UIMotionEffect effect);

	//	// @property (copy, nonatomic) NSArray<__kindof UIMotionEffect *> * _Nonnull motionEffects __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("motionEffects", ArgumentSemantic.Copy)]
	//	UIMotionEffect[] MotionEffects { get; set; }
	//}

	//// @interface UIConstraintBasedLayoutInstallingConstraints (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIConstraintBasedLayoutInstallingConstraints
	//{
	//	// @property (readonly, nonatomic) NSArray<__kindof NSLayoutConstraint *> * _Nonnull constraints __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("constraints")]
	//	NSLayoutConstraint[] Constraints { get; }

	//	// -(void)addConstraint:(NSLayoutConstraint * _Nonnull)constraint __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("addConstraint:")]
	//	void AddConstraint (NSLayoutConstraint constraint);

	//	// -(void)addConstraints:(NSArray<__kindof NSLayoutConstraint *> * _Nonnull)constraints __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("addConstraints:")]
	//	void AddConstraints (NSLayoutConstraint[] constraints);

	//	// -(void)removeConstraint:(NSLayoutConstraint * _Nonnull)constraint __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("removeConstraint:")]
	//	void RemoveConstraint (NSLayoutConstraint constraint);

	//	// -(void)removeConstraints:(NSArray<__kindof NSLayoutConstraint *> * _Nonnull)constraints __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("removeConstraints:")]
	//	void RemoveConstraints (NSLayoutConstraint[] constraints);
	//}

	//// @interface UIConstraintBasedLayoutCoreMethods (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIConstraintBasedLayoutCoreMethods
	//{
	//	// -(void)updateConstraintsIfNeeded __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("updateConstraintsIfNeeded")]
	//	void UpdateConstraintsIfNeeded ();

	//	// -(void)updateConstraints __attribute__((objc_requires_super)) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("updateConstraints")]
	//	[RequiresSuper]
	//	void UpdateConstraints ();

	//	// -(BOOL)needsUpdateConstraints __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("needsUpdateConstraints")]
	//	[Verify (MethodToProperty)]
	//	bool NeedsUpdateConstraints { get; }

	//	// -(void)setNeedsUpdateConstraints __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("setNeedsUpdateConstraints")]
	//	void SetNeedsUpdateConstraints ();
	//}

	//// @interface UIConstraintBasedCompatibility (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIConstraintBasedCompatibility
	//{
	//	// @property (nonatomic) BOOL translatesAutoresizingMaskIntoConstraints __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("translatesAutoresizingMaskIntoConstraints")]
	//	bool TranslatesAutoresizingMaskIntoConstraints { get; set; }

	//	// @property (readonly, nonatomic, class) BOOL requiresConstraintBasedLayout __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Static]
	//	[Export ("requiresConstraintBasedLayout")]
	//	bool RequiresConstraintBasedLayout { get; }
	//}

	//// @interface UIConstraintBasedLayoutLayering (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIConstraintBasedLayoutLayering
	//{
	//	// -(CGRect)alignmentRectForFrame:(CGRect)frame __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("alignmentRectForFrame:")]
	//	CGRect AlignmentRectForFrame (CGRect frame);

	//	// -(CGRect)frameForAlignmentRect:(CGRect)alignmentRect __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("frameForAlignmentRect:")]
	//	CGRect FrameForAlignmentRect (CGRect alignmentRect);

	//	// @property (readonly, nonatomic) UIEdgeInsets alignmentRectInsets __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("alignmentRectInsets")]
	//	UIEdgeInsets AlignmentRectInsets { get; }

	//	// -(UIView * _Nonnull)viewForBaselineLayout __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 6, 0, message: "Override -viewForFirstBaselineLayout or -viewForLastBaselineLayout as appropriate, instead")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Override -viewForFirstBaselineLayout or -viewForLastBaselineLayout as appropriate, instead")]
	//	[NoTV]
	//	[Export ("viewForBaselineLayout")]
	//	[Verify (MethodToProperty)]
	//	UIView ViewForBaselineLayout { get; }

	//	// @property (readonly, strong) UIView * _Nonnull viewForFirstBaselineLayout __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("viewForFirstBaselineLayout", ArgumentSemantic.Strong)]
	//	UIView ViewForFirstBaselineLayout { get; }

	//	// @property (readonly, strong) UIView * _Nonnull viewForLastBaselineLayout __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("viewForLastBaselineLayout", ArgumentSemantic.Strong)]
	//	UIView ViewForLastBaselineLayout { get; }

	//	// @property (readonly, nonatomic) CGSize intrinsicContentSize __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("intrinsicContentSize")]
	//	CGSize IntrinsicContentSize { get; }

	//	// -(void)invalidateIntrinsicContentSize __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("invalidateIntrinsicContentSize")]
	//	void InvalidateIntrinsicContentSize ();

	//	// -(UILayoutPriority)contentHuggingPriorityForAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("contentHuggingPriorityForAxis:")]
	//	float ContentHuggingPriorityForAxis (UILayoutConstraintAxis axis);

	//	// -(void)setContentHuggingPriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("setContentHuggingPriority:forAxis:")]
	//	void SetContentHuggingPriority (float priority, UILayoutConstraintAxis axis);

	//	// -(UILayoutPriority)contentCompressionResistancePriorityForAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("contentCompressionResistancePriorityForAxis:")]
	//	float ContentCompressionResistancePriorityForAxis (UILayoutConstraintAxis axis);

	//	// -(void)setContentCompressionResistancePriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("setContentCompressionResistancePriority:forAxis:")]
	//	void SetContentCompressionResistancePriority (float priority, UILayoutConstraintAxis axis);
	//}

	//// @interface UIConstraintBasedLayoutFittingSize (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIConstraintBasedLayoutFittingSize
	//{
	//	// -(CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("systemLayoutSizeFittingSize:")]
	//	CGSize SystemLayoutSizeFittingSize (CGSize targetSize);

	//	// -(CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:")]
	//	CGSize SystemLayoutSizeFittingSize (CGSize targetSize, float horizontalFittingPriority, float verticalFittingPriority);
	//}

	//// @interface UILayoutGuideSupport (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UILayoutGuideSupport
	//{
	//	// @property (readonly, copy, nonatomic) NSArray<__kindof UILayoutGuide *> * _Nonnull layoutGuides __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("layoutGuides", ArgumentSemantic.Copy)]
	//	UILayoutGuide[] LayoutGuides { get; }

	//	// -(void)addLayoutGuide:(UILayoutGuide * _Nonnull)layoutGuide __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("addLayoutGuide:")]
	//	void AddLayoutGuide (UILayoutGuide layoutGuide);

	//	// -(void)removeLayoutGuide:(UILayoutGuide * _Nonnull)layoutGuide __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("removeLayoutGuide:")]
	//	void RemoveLayoutGuide (UILayoutGuide layoutGuide);
	//}

	//// @interface UIViewLayoutConstraintCreation (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIViewLayoutConstraintCreation
	//{
	//	// @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull leadingAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("leadingAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutXAxisAnchor LeadingAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull trailingAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("trailingAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutXAxisAnchor TrailingAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull leftAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("leftAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutXAxisAnchor LeftAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull rightAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("rightAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutXAxisAnchor RightAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull topAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("topAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutYAxisAnchor TopAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull bottomAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("bottomAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutYAxisAnchor BottomAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutDimension * _Nonnull widthAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("widthAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutDimension WidthAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutDimension * _Nonnull heightAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("heightAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutDimension HeightAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull centerXAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("centerXAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutXAxisAnchor CenterXAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull centerYAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("centerYAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutYAxisAnchor CenterYAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull firstBaselineAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("firstBaselineAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutYAxisAnchor FirstBaselineAnchor { get; }

	//	// @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull lastBaselineAnchor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("lastBaselineAnchor", ArgumentSemantic.Strong)]
	//	NSLayoutYAxisAnchor LastBaselineAnchor { get; }
	//}

	//// @interface UIConstraintBasedLayoutDebugging (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIConstraintBasedLayoutDebugging
	//{
	//	// -(NSArray<__kindof NSLayoutConstraint *> * _Nonnull)constraintsAffectingLayoutForAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("constraintsAffectingLayoutForAxis:")]
	//	NSLayoutConstraint[] ConstraintsAffectingLayoutForAxis (UILayoutConstraintAxis axis);

	//	// @property (readonly, nonatomic) BOOL hasAmbiguousLayout __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("hasAmbiguousLayout")]
	//	bool HasAmbiguousLayout { get; }

	//	// -(void)exerciseAmbiguityInLayout __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("exerciseAmbiguityInLayout")]
	//	void ExerciseAmbiguityInLayout ();
	//}

	//// @interface UIConstraintBasedLayoutDebugging (UILayoutGuide)
	//[Category]
	//[BaseType (typeof(UILayoutGuide))]
	//interface UILayoutGuide_UIConstraintBasedLayoutDebugging
	//{
	//	// -(NSArray<__kindof NSLayoutConstraint *> * _Nonnull)constraintsAffectingLayoutForAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("constraintsAffectingLayoutForAxis:")]
	//	NSLayoutConstraint[] ConstraintsAffectingLayoutForAxis (UILayoutConstraintAxis axis);

	//	// @property (readonly, nonatomic) BOOL hasAmbiguousLayout __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("hasAmbiguousLayout")]
	//	bool HasAmbiguousLayout { get; }
	//}

	//// @interface UIStateRestoration (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIStateRestoration
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable restorationIdentifier __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("restorationIdentifier")]
	//	string RestorationIdentifier { get; set; }

	//	// -(void)encodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("encodeRestorableStateWithCoder:")]
	//	void EncodeRestorableStateWithCoder (NSCoder coder);

	//	// -(void)decodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("decodeRestorableStateWithCoder:")]
	//	void DecodeRestorableStateWithCoder (NSCoder coder);
	//}

	//// @interface UISnapshotting (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UISnapshotting
	//{
	//	// -(UIView * _Nullable)snapshotViewAfterScreenUpdates:(BOOL)afterUpdates __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("snapshotViewAfterScreenUpdates:")]
	//	[return: NullAllowed]
	//	UIView SnapshotViewAfterScreenUpdates (bool afterUpdates);

	//	// -(UIView * _Nullable)resizableSnapshotViewFromRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates withCapInsets:(UIEdgeInsets)capInsets __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:")]
	//	[return: NullAllowed]
	//	UIView ResizableSnapshotViewFromRect (CGRect rect, bool afterUpdates, UIEdgeInsets capInsets);

	//	// -(BOOL)drawViewHierarchyInRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("drawViewHierarchyInRect:afterScreenUpdates:")]
	//	bool DrawViewHierarchyInRect (CGRect rect, bool afterUpdates);
	//}

	//// @interface UIPickerView : UIView <NSCoding>
	//[NoTV, iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UIPickerView : INSCoding
	//{
	//	// @property (nonatomic, weak) id<UIPickerViewDataSource> _Nullable dataSource;
	//	[NullAllowed, Export ("dataSource", ArgumentSemantic.Weak)]
	//	UIPickerViewDataSource DataSource { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIPickerViewDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIPickerViewDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic) BOOL showsSelectionIndicator;
	//	[Export ("showsSelectionIndicator")]
	//	bool ShowsSelectionIndicator { get; set; }

	//	// @property (readonly, nonatomic) NSInteger numberOfComponents;
	//	[Export ("numberOfComponents")]
	//	nint NumberOfComponents { get; }

	//	// -(NSInteger)numberOfRowsInComponent:(NSInteger)component;
	//	[Export ("numberOfRowsInComponent:")]
	//	nint NumberOfRowsInComponent (nint component);

	//	// -(CGSize)rowSizeForComponent:(NSInteger)component;
	//	[Export ("rowSizeForComponent:")]
	//	CGSize RowSizeForComponent (nint component);

	//	// -(UIView * _Nullable)viewForRow:(NSInteger)row forComponent:(NSInteger)component;
	//	[Export ("viewForRow:forComponent:")]
	//	[return: NullAllowed]
	//	UIView ViewForRow (nint row, nint component);

	//	// -(void)reloadAllComponents;
	//	[Export ("reloadAllComponents")]
	//	void ReloadAllComponents ();

	//	// -(void)reloadComponent:(NSInteger)component;
	//	[Export ("reloadComponent:")]
	//	void ReloadComponent (nint component);

	//	// -(void)selectRow:(NSInteger)row inComponent:(NSInteger)component animated:(BOOL)animated;
	//	[Export ("selectRow:inComponent:animated:")]
	//	void SelectRow (nint row, nint component, bool animated);

	//	// -(NSInteger)selectedRowInComponent:(NSInteger)component;
	//	[Export ("selectedRowInComponent:")]
	//	nint SelectedRowInComponent (nint component);
	//}

	//// @protocol UIPickerViewDataSource <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIPickerViewDataSource
	//{
	//	// @required -(NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView;
	//	[Abstract]
	//	[Export ("numberOfComponentsInPickerView:")]
	//	nint NumberOfComponentsInPickerView (UIPickerView pickerView);

	//	// @required -(NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component;
	//	[Abstract]
	//	[Export ("pickerView:numberOfRowsInComponent:")]
	//	nint PickerView (UIPickerView pickerView, nint component);
	//}

	//// @protocol UIPickerViewDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIPickerViewDelegate
	//{
	//	// @optional -(CGFloat)pickerView:(UIPickerView * _Nonnull)pickerView widthForComponent:(NSInteger)component __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("pickerView:widthForComponent:")]
	//	nfloat PickerView (UIPickerView pickerView, nint component);

	//	// @optional -(CGFloat)pickerView:(UIPickerView * _Nonnull)pickerView rowHeightForComponent:(NSInteger)component __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("pickerView:rowHeightForComponent:")]
	//	nfloat PickerView (UIPickerView pickerView, nint component);

	//	// @optional -(NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("pickerView:titleForRow:forComponent:")]
	//	[return: NullAllowed]
	//	string PickerView (UIPickerView pickerView, nint row, nint component);

	//	// @optional -(NSAttributedString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView attributedTitleForRow:(NSInteger)row forComponent:(NSInteger)component __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoTV, iOS (6,0)]
	//	[Export ("pickerView:attributedTitleForRow:forComponent:")]
	//	[return: NullAllowed]
	//	NSAttributedString PickerView (UIPickerView pickerView, nint row, nint component);

	//	// @optional -(UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("pickerView:viewForRow:forComponent:reusingView:")]
	//	UIView PickerView (UIPickerView pickerView, nint row, nint component, [NullAllowed] UIView view);

	//	// @optional -(void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("pickerView:didSelectRow:inComponent:")]
	//	void PickerView (UIPickerView pickerView, nint row, nint component);
	//}

	//// @interface UIControl : UIView
	//[iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UIControl
	//{
	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (getter = isSelected, nonatomic) BOOL selected;
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }

	//	// @property (nonatomic) UIControlContentVerticalAlignment contentVerticalAlignment;
	//	[Export ("contentVerticalAlignment", ArgumentSemantic.Assign)]
	//	UIControlContentVerticalAlignment ContentVerticalAlignment { get; set; }

	//	// @property (nonatomic) UIControlContentHorizontalAlignment contentHorizontalAlignment;
	//	[Export ("contentHorizontalAlignment", ArgumentSemantic.Assign)]
	//	UIControlContentHorizontalAlignment ContentHorizontalAlignment { get; set; }

	//	// @property (readonly, nonatomic) UIControlContentHorizontalAlignment effectiveContentHorizontalAlignment;
	//	[Export ("effectiveContentHorizontalAlignment")]
	//	UIControlContentHorizontalAlignment EffectiveContentHorizontalAlignment { get; }

	//	// @property (readonly, nonatomic) UIControlState state;
	//	[Export ("state")]
	//	UIControlState State { get; }

	//	// @property (readonly, getter = isTracking, nonatomic) BOOL tracking;
	//	[Export ("tracking")]
	//	bool Tracking { [Bind ("isTracking")] get; }

	//	// @property (readonly, getter = isTouchInside, nonatomic) BOOL touchInside;
	//	[Export ("touchInside")]
	//	bool TouchInside { [Bind ("isTouchInside")] get; }

	//	// -(BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;
	//	[Export ("beginTrackingWithTouch:withEvent:")]
	//	bool BeginTrackingWithTouch (UITouch touch, [NullAllowed] UIEvent @event);

	//	// -(BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;
	//	[Export ("continueTrackingWithTouch:withEvent:")]
	//	bool ContinueTrackingWithTouch (UITouch touch, [NullAllowed] UIEvent @event);

	//	// -(void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
	//	[Export ("endTrackingWithTouch:withEvent:")]
	//	void EndTrackingWithTouch ([NullAllowed] UITouch touch, [NullAllowed] UIEvent @event);

	//	// -(void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
	//	[Export ("cancelTrackingWithEvent:")]
	//	void CancelTrackingWithEvent ([NullAllowed] UIEvent @event);

	//	// -(void)addTarget:(id _Nullable)target action:(SEL _Nonnull)action forControlEvents:(UIControlEvents)controlEvents;
	//	[Export ("addTarget:action:forControlEvents:")]
	//	void AddTarget ([NullAllowed] NSObject target, Selector action, UIControlEvents controlEvents);

	//	// -(void)removeTarget:(id _Nullable)target action:(SEL _Nullable)action forControlEvents:(UIControlEvents)controlEvents;
	//	[Export ("removeTarget:action:forControlEvents:")]
	//	void RemoveTarget ([NullAllowed] NSObject target, [NullAllowed] Selector action, UIControlEvents controlEvents);

	//	// @property (readonly, nonatomic) NSSet * _Nonnull allTargets;
	//	[Export ("allTargets")]
	//	NSSet AllTargets { get; }

	//	// @property (readonly, nonatomic) UIControlEvents allControlEvents;
	//	[Export ("allControlEvents")]
	//	UIControlEvents AllControlEvents { get; }

	//	// -(NSArray<NSString *> * _Nullable)actionsForTarget:(id _Nullable)target forControlEvent:(UIControlEvents)controlEvent;
	//	[Export ("actionsForTarget:forControlEvent:")]
	//	[return: NullAllowed]
	//	string[] ActionsForTarget ([NullAllowed] NSObject target, UIControlEvents controlEvent);

	//	// -(void)sendAction:(SEL _Nonnull)action to:(id _Nullable)target forEvent:(UIEvent * _Nullable)event;
	//	[Export ("sendAction:to:forEvent:")]
	//	void SendAction (Selector action, [NullAllowed] NSObject target, [NullAllowed] UIEvent @event);

	//	// -(void)sendActionsForControlEvents:(UIControlEvents)controlEvents;
	//	[Export ("sendActionsForControlEvents:")]
	//	void SendActionsForControlEvents (UIControlEvents controlEvents);
	//}

	//// @interface UIRefreshControl : UIControl
	//[NoTV, iOS (6,0)]
	//[BaseType (typeof(UIControl))]
	//interface UIRefreshControl
	//{
	//	// @property (readonly, getter = isRefreshing, nonatomic) BOOL refreshing;
	//	[Export ("refreshing")]
	//	bool Refreshing { [Bind ("isRefreshing")] get; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// @property (nonatomic, strong) NSAttributedString * _Nullable attributedTitle __attribute__((annotate("ui_appearance_selector")));
	//	[NullAllowed, Export ("attributedTitle", ArgumentSemantic.Strong)]
	//	NSAttributedString AttributedTitle { get; set; }

	//	// -(void)beginRefreshing __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("beginRefreshing")]
	//	void BeginRefreshing ();

	//	// -(void)endRefreshing __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("endRefreshing")]
	//	void EndRefreshing ();
	//}

	//// @interface UIScrollView : UIView <NSCoding, UIFocusItemScrollableContainer>
	//[iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UIScrollView : INSCoding, IUIFocusItemScrollableContainer
	//{
	//	// @property (nonatomic) CGPoint contentOffset;
	//	[Export ("contentOffset", ArgumentSemantic.Assign)]
	//	CGPoint ContentOffset { get; set; }

	//	// @property (nonatomic) CGSize contentSize;
	//	[Export ("contentSize", ArgumentSemantic.Assign)]
	//	CGSize ContentSize { get; set; }

	//	// @property (nonatomic) UIEdgeInsets contentInset;
	//	[Export ("contentInset", ArgumentSemantic.Assign)]
	//	UIEdgeInsets ContentInset { get; set; }

	//	// @property (readonly, nonatomic) UIEdgeInsets adjustedContentInset __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("adjustedContentInset")]
	//	UIEdgeInsets AdjustedContentInset { get; }

	//	// -(void)adjustedContentInsetDidChange __attribute__((objc_requires_super)) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("adjustedContentInsetDidChange")]
	//	[RequiresSuper]
	//	void AdjustedContentInsetDidChange ();

	//	// @property (nonatomic) UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("contentInsetAdjustmentBehavior", ArgumentSemantic.Assign)]
	//	UIScrollViewContentInsetAdjustmentBehavior ContentInsetAdjustmentBehavior { get; set; }

	//	// @property (readonly, nonatomic, strong) UILayoutGuide * _Nonnull contentLayoutGuide __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("contentLayoutGuide", ArgumentSemantic.Strong)]
	//	UILayoutGuide ContentLayoutGuide { get; }

	//	// @property (readonly, nonatomic, strong) UILayoutGuide * _Nonnull frameLayoutGuide __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("frameLayoutGuide", ArgumentSemantic.Strong)]
	//	UILayoutGuide FrameLayoutGuide { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIScrollViewDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIScrollViewDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (getter = isDirectionalLockEnabled, nonatomic) BOOL directionalLockEnabled;
	//	[Export ("directionalLockEnabled")]
	//	bool DirectionalLockEnabled { [Bind ("isDirectionalLockEnabled")] get; set; }

	//	// @property (nonatomic) BOOL bounces;
	//	[Export ("bounces")]
	//	bool Bounces { get; set; }

	//	// @property (nonatomic) BOOL alwaysBounceVertical;
	//	[Export ("alwaysBounceVertical")]
	//	bool AlwaysBounceVertical { get; set; }

	//	// @property (nonatomic) BOOL alwaysBounceHorizontal;
	//	[Export ("alwaysBounceHorizontal")]
	//	bool AlwaysBounceHorizontal { get; set; }

	//	// @property (getter = isPagingEnabled, nonatomic) BOOL pagingEnabled __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("pagingEnabled")]
	//	bool PagingEnabled { [Bind ("isPagingEnabled")] get; set; }

	//	// @property (getter = isScrollEnabled, nonatomic) BOOL scrollEnabled;
	//	[Export ("scrollEnabled")]
	//	bool ScrollEnabled { [Bind ("isScrollEnabled")] get; set; }

	//	// @property (nonatomic) BOOL showsHorizontalScrollIndicator;
	//	[Export ("showsHorizontalScrollIndicator")]
	//	bool ShowsHorizontalScrollIndicator { get; set; }

	//	// @property (nonatomic) BOOL showsVerticalScrollIndicator;
	//	[Export ("showsVerticalScrollIndicator")]
	//	bool ShowsVerticalScrollIndicator { get; set; }

	//	// @property (nonatomic) UIEdgeInsets scrollIndicatorInsets;
	//	[Export ("scrollIndicatorInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets ScrollIndicatorInsets { get; set; }

	//	// @property (nonatomic) UIScrollViewIndicatorStyle indicatorStyle;
	//	[Export ("indicatorStyle", ArgumentSemantic.Assign)]
	//	UIScrollViewIndicatorStyle IndicatorStyle { get; set; }

	//	// @property (nonatomic) UIScrollViewDecelerationRate decelerationRate __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("decelerationRate")]
	//	double DecelerationRate { get; set; }

	//	// @property (nonatomic) UIScrollViewIndexDisplayMode indexDisplayMode __attribute__((availability(tvos, introduced=10.2)));
	//	[TV (10, 2)]
	//	[Export ("indexDisplayMode", ArgumentSemantic.Assign)]
	//	UIScrollViewIndexDisplayMode IndexDisplayMode { get; set; }

	//	// -(void)setContentOffset:(CGPoint)contentOffset animated:(BOOL)animated;
	//	[Export ("setContentOffset:animated:")]
	//	void SetContentOffset (CGPoint contentOffset, bool animated);

	//	// -(void)scrollRectToVisible:(CGRect)rect animated:(BOOL)animated;
	//	[Export ("scrollRectToVisible:animated:")]
	//	void ScrollRectToVisible (CGRect rect, bool animated);

	//	// -(void)flashScrollIndicators;
	//	[Export ("flashScrollIndicators")]
	//	void FlashScrollIndicators ();

	//	// @property (readonly, getter = isTracking, nonatomic) BOOL tracking;
	//	[Export ("tracking")]
	//	bool Tracking { [Bind ("isTracking")] get; }

	//	// @property (readonly, getter = isDragging, nonatomic) BOOL dragging;
	//	[Export ("dragging")]
	//	bool Dragging { [Bind ("isDragging")] get; }

	//	// @property (readonly, getter = isDecelerating, nonatomic) BOOL decelerating;
	//	[Export ("decelerating")]
	//	bool Decelerating { [Bind ("isDecelerating")] get; }

	//	// @property (nonatomic) BOOL delaysContentTouches;
	//	[Export ("delaysContentTouches")]
	//	bool DelaysContentTouches { get; set; }

	//	// @property (nonatomic) BOOL canCancelContentTouches;
	//	[Export ("canCancelContentTouches")]
	//	bool CanCancelContentTouches { get; set; }

	//	// -(BOOL)touchesShouldBegin:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event inContentView:(UIView * _Nonnull)view;
	//	[Export ("touchesShouldBegin:withEvent:inContentView:")]
	//	bool TouchesShouldBegin (NSSet<UITouch> touches, [NullAllowed] UIEvent @event, UIView view);

	//	// -(BOOL)touchesShouldCancelInContentView:(UIView * _Nonnull)view;
	//	[Export ("touchesShouldCancelInContentView:")]
	//	bool TouchesShouldCancelInContentView (UIView view);

	//	// @property (nonatomic) CGFloat minimumZoomScale;
	//	[Export ("minimumZoomScale")]
	//	nfloat MinimumZoomScale { get; set; }

	//	// @property (nonatomic) CGFloat maximumZoomScale;
	//	[Export ("maximumZoomScale")]
	//	nfloat MaximumZoomScale { get; set; }

	//	// @property (nonatomic) CGFloat zoomScale __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("zoomScale")]
	//	nfloat ZoomScale { get; set; }

	//	// -(void)setZoomScale:(CGFloat)scale animated:(BOOL)animated __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("setZoomScale:animated:")]
	//	void SetZoomScale (nfloat scale, bool animated);

	//	// -(void)zoomToRect:(CGRect)rect animated:(BOOL)animated __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("zoomToRect:animated:")]
	//	void ZoomToRect (CGRect rect, bool animated);

	//	// @property (nonatomic) BOOL bouncesZoom;
	//	[Export ("bouncesZoom")]
	//	bool BouncesZoom { get; set; }

	//	// @property (readonly, getter = isZooming, nonatomic) BOOL zooming;
	//	[Export ("zooming")]
	//	bool Zooming { [Bind ("isZooming")] get; }

	//	// @property (readonly, getter = isZoomBouncing, nonatomic) BOOL zoomBouncing;
	//	[Export ("zoomBouncing")]
	//	bool ZoomBouncing { [Bind ("isZoomBouncing")] get; }

	//	// @property (nonatomic) BOOL scrollsToTop __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("scrollsToTop")]
	//	bool ScrollsToTop { get; set; }

	//	// @property (readonly, nonatomic) UIPanGestureRecognizer * _Nonnull panGestureRecognizer __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("panGestureRecognizer")]
	//	UIPanGestureRecognizer PanGestureRecognizer { get; }

	//	// @property (readonly, nonatomic) UIPinchGestureRecognizer * _Nullable pinchGestureRecognizer __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("pinchGestureRecognizer")]
	//	UIPinchGestureRecognizer PinchGestureRecognizer { get; }

	//	// @property (readonly, nonatomic) UIGestureRecognizer * _Nonnull directionalPressGestureRecognizer __attribute__((availability(tvos, introduced=9.0, deprecated=11.0)));
	//	[Introduced (PlatformName.TvOS, 9, 0, message: "Configuring the panGestureRecognizer for indirect scrolling automatically supports directional presses now, so this property is no longer useful.")]
	//	[Deprecated (PlatformName.TvOS, 11, 0, message: "Configuring the panGestureRecognizer for indirect scrolling automatically supports directional presses now, so this property is no longer useful.")]
	//	[Export ("directionalPressGestureRecognizer")]
	//	UIGestureRecognizer DirectionalPressGestureRecognizer { get; }

	//	// @property (nonatomic) UIScrollViewKeyboardDismissMode keyboardDismissMode __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("keyboardDismissMode", ArgumentSemantic.Assign)]
	//	UIScrollViewKeyboardDismissMode KeyboardDismissMode { get; set; }

	//	// @property (nonatomic, strong) UIRefreshControl * _Nullable refreshControl __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoTV, iOS (10, 0)]
	//	[NullAllowed, Export ("refreshControl", ArgumentSemantic.Strong)]
	//	UIRefreshControl RefreshControl { get; set; }
	//}

	//// @protocol UIScrollViewDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIScrollViewDelegate
	//{
	//	// @optional -(void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewDidScroll:")]
	//	void ScrollViewDidScroll (UIScrollView scrollView);

	//	// @optional -(void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3,2)]
	//	[Export ("scrollViewDidZoom:")]
	//	void ScrollViewDidZoom (UIScrollView scrollView);

	//	// @optional -(void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewWillBeginDragging:")]
	//	void ScrollViewWillBeginDragging (UIScrollView scrollView);

	//	// @optional -(void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("scrollViewWillEndDragging:withVelocity:targetContentOffset:")]
	//	unsafe void ScrollViewWillEndDragging (UIScrollView scrollView, CGPoint velocity, CGPoint* targetContentOffset);

	//	// @optional -(void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
	//	[Export ("scrollViewDidEndDragging:willDecelerate:")]
	//	void ScrollViewDidEndDragging (UIScrollView scrollView, bool decelerate);

	//	// @optional -(void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewWillBeginDecelerating:")]
	//	void ScrollViewWillBeginDecelerating (UIScrollView scrollView);

	//	// @optional -(void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewDidEndDecelerating:")]
	//	void ScrollViewDidEndDecelerating (UIScrollView scrollView);

	//	// @optional -(void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewDidEndScrollingAnimation:")]
	//	void ScrollViewDidEndScrollingAnimation (UIScrollView scrollView);

	//	// @optional -(UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("viewForZoomingInScrollView:")]
	//	[return: NullAllowed]
	//	UIView ViewForZoomingInScrollView (UIScrollView scrollView);

	//	// @optional -(void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3,2)]
	//	[Export ("scrollViewWillBeginZooming:withView:")]
	//	void ScrollViewWillBeginZooming (UIScrollView scrollView, [NullAllowed] UIView view);

	//	// @optional -(void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
	//	[Export ("scrollViewDidEndZooming:withView:atScale:")]
	//	void ScrollViewDidEndZooming (UIScrollView scrollView, [NullAllowed] UIView view, nfloat scale);

	//	// @optional -(BOOL)scrollViewShouldScrollToTop:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewShouldScrollToTop:")]
	//	bool ScrollViewShouldScrollToTop (UIScrollView scrollView);

	//	// @optional -(void)scrollViewDidScrollToTop:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewDidScrollToTop:")]
	//	void ScrollViewDidScrollToTop (UIScrollView scrollView);

	//	// @optional -(void)scrollViewDidChangeAdjustedContentInset:(UIScrollView * _Nonnull)scrollView __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("scrollViewDidChangeAdjustedContentInset:")]
	//	void ScrollViewDidChangeAdjustedContentInset (UIScrollView scrollView);
	//}

	//// @protocol UIPickerViewAccessibilityDelegate <UIPickerViewDelegate>
	//[NoTV]
	//[Protocol, Model]
	//interface UIPickerViewAccessibilityDelegate : IUIPickerViewDelegate
	//{
	//	// @optional -(NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView accessibilityLabelForComponent:(NSInteger)component;
	//	[Export ("pickerView:accessibilityLabelForComponent:")]
	//	[return: NullAllowed]
	//	string PickerView (UIPickerView pickerView, nint component);

	//	// @optional -(NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView accessibilityHintForComponent:(NSInteger)component;
	//	[Export ("pickerView:accessibilityHintForComponent:")]
	//	[return: NullAllowed]
	//	string PickerView (UIPickerView pickerView, nint component);

	//	// @optional -(NSAttributedString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView accessibilityAttributedLabelForComponent:(NSInteger)component __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("pickerView:accessibilityAttributedLabelForComponent:")]
	//	[return: NullAllowed]
	//	NSAttributedString PickerView (UIPickerView pickerView, nint component);

	//	// @optional -(NSAttributedString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView accessibilityAttributedHintForComponent:(NSInteger)component __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("pickerView:accessibilityAttributedHintForComponent:")]
	//	[return: NullAllowed]
	//	NSAttributedString PickerView (UIPickerView pickerView, nint component);
	//}

	//// @protocol UIScrollViewAccessibilityDelegate <UIScrollViewDelegate>
	//[Protocol, Model]
	//interface UIScrollViewAccessibilityDelegate : IUIScrollViewDelegate
	//{
	//	// @optional -(NSString * _Nullable)accessibilityScrollStatusForScrollView:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("accessibilityScrollStatusForScrollView:")]
	//	[return: NullAllowed]
	//	string AccessibilityScrollStatusForScrollView (UIScrollView scrollView);

	//	// @optional -(NSAttributedString * _Nullable)accessibilityAttributedScrollStatusForScrollView:(UIScrollView * _Nonnull)scrollView __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("accessibilityAttributedScrollStatusForScrollView:")]
	//	[return: NullAllowed]
	//	NSAttributedString AccessibilityAttributedScrollStatusForScrollView (UIScrollView scrollView);
	//}

	//// @interface UIAccessibilityInvertColors (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIAccessibilityInvertColors
	//{
	//	// @property (nonatomic) BOOL accessibilityIgnoresInvertColors __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("accessibilityIgnoresInvertColors")]
	//	bool AccessibilityIgnoresInvertColors { get; set; }
	//}

	//// @interface UIAccessibilityContainer (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_UIAccessibilityContainer
	//{
	//	// -(NSInteger)accessibilityElementCount;
	//	[Export ("accessibilityElementCount")]
	//	[Verify (MethodToProperty)]
	//	nint AccessibilityElementCount { get; }

	//	// -(id _Nullable)accessibilityElementAtIndex:(NSInteger)index;
	//	[Export ("accessibilityElementAtIndex:")]
	//	[return: NullAllowed]
	//	NSObject AccessibilityElementAtIndex (nint index);

	//	// -(NSInteger)indexOfAccessibilityElement:(id _Nonnull)element;
	//	[Export ("indexOfAccessibilityElement:")]
	//	nint IndexOfAccessibilityElement (NSObject element);

	//	// @property (nonatomic, strong) NSArray * _Nullable accessibilityElements __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("accessibilityElements", ArgumentSemantic.Strong)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] AccessibilityElements { get; set; }

	//	// @property (nonatomic) UIAccessibilityContainerType accessibilityContainerType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("accessibilityContainerType", ArgumentSemantic.Assign)]
	//	UIAccessibilityContainerType AccessibilityContainerType { get; set; }
	//}

	//// @protocol UIAccessibilityContainerDataTableCell <NSObject>
	//[iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIAccessibilityContainerDataTableCell
	//{
	//	// @required -(NSRange)accessibilityRowRange;
	//	[Abstract]
	//	[Export ("accessibilityRowRange")]
	//	[Verify (MethodToProperty)]
	//	NSRange AccessibilityRowRange { get; }

	//	// @required -(NSRange)accessibilityColumnRange;
	//	[Abstract]
	//	[Export ("accessibilityColumnRange")]
	//	[Verify (MethodToProperty)]
	//	NSRange AccessibilityColumnRange { get; }
	//}

	//// @protocol UIAccessibilityContainerDataTable <NSObject>
	//[iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIAccessibilityContainerDataTable
	//{
	//	// @required -(id<UIAccessibilityContainerDataTableCell> _Nullable)accessibilityDataTableCellElementForRow:(NSUInteger)row column:(NSUInteger)column;
	//	[Abstract]
	//	[Export ("accessibilityDataTableCellElementForRow:column:")]
	//	[return: NullAllowed]
	//	UIAccessibilityContainerDataTableCell AccessibilityDataTableCellElementForRow (nuint row, nuint column);

	//	// @required -(NSUInteger)accessibilityRowCount;
	//	[Abstract]
	//	[Export ("accessibilityRowCount")]
	//	[Verify (MethodToProperty)]
	//	nuint AccessibilityRowCount { get; }

	//	// @required -(NSUInteger)accessibilityColumnCount;
	//	[Abstract]
	//	[Export ("accessibilityColumnCount")]
	//	[Verify (MethodToProperty)]
	//	nuint AccessibilityColumnCount { get; }

	//	// @optional -(NSArray<id<UIAccessibilityContainerDataTableCell>> * _Nullable)accessibilityHeaderElementsForRow:(NSUInteger)row;
	//	[Export ("accessibilityHeaderElementsForRow:")]
	//	[return: NullAllowed]
	//	UIAccessibilityContainerDataTableCell[] AccessibilityHeaderElementsForRow (nuint row);

	//	// @optional -(NSArray<id<UIAccessibilityContainerDataTableCell>> * _Nullable)accessibilityHeaderElementsForColumn:(NSUInteger)column;
	//	[Export ("accessibilityHeaderElementsForColumn:")]
	//	[return: NullAllowed]
	//	UIAccessibilityContainerDataTableCell[] AccessibilityHeaderElementsForColumn (nuint column);
	//}

	//// @interface UIAccessibilityCustomAction : NSObject
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIAccessibilityCustomAction
	//{
	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name target:(id _Nullable)target selector:(SEL _Nonnull)selector;
	//	[Export ("initWithName:target:selector:")]
	//	IntPtr Constructor (string name, [NullAllowed] NSObject target, Selector selector);

	//	// -(instancetype _Nonnull)initWithAttributedName:(NSAttributedString * _Nonnull)attributedName target:(id _Nullable)target selector:(SEL _Nonnull)selector __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("initWithAttributedName:target:selector:")]
	//	IntPtr Constructor (NSAttributedString attributedName, [NullAllowed] NSObject target, Selector selector);

	//	// @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }

	//	// @property (copy, nonatomic) NSAttributedString * _Nonnull attributedName __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("attributedName", ArgumentSemantic.Copy)]
	//	NSAttributedString AttributedName { get; set; }

	//	// @property (nonatomic, weak) id _Nullable target;
	//	[NullAllowed, Export ("target", ArgumentSemantic.Weak)]
	//	NSObject Target { get; set; }

	//	// @property (assign, nonatomic) SEL _Nonnull selector;
	//	[Export ("selector", ArgumentSemantic.Assign)]
	//	Selector Selector { get; set; }
	//}

	//// @interface UITextInputPasswordRules : NSObject <NSSecureCoding, NSCopying>
	//[iOS (12,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UITextInputPasswordRules : INSSecureCoding, INSCopying
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull passwordRulesDescriptor;
	//	[Export ("passwordRulesDescriptor")]
	//	string PasswordRulesDescriptor { get; }

	//	// +(instancetype _Nonnull)passwordRulesWithDescriptor:(NSString * _Nonnull)passwordRulesDescriptor;
	//	[Static]
	//	[Export ("passwordRulesWithDescriptor:")]
	//	UITextInputPasswordRules PasswordRulesWithDescriptor (string passwordRulesDescriptor);
	//}

	//// @protocol UITextInputTraits <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITextInputTraits
	//{
	//	// @optional @property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
	//	[Export ("autocapitalizationType", ArgumentSemantic.Assign)]
	//	UITextAutocapitalizationType AutocapitalizationType { get; set; }

	//	// @optional @property (nonatomic) UITextAutocorrectionType autocorrectionType;
	//	[Export ("autocorrectionType", ArgumentSemantic.Assign)]
	//	UITextAutocorrectionType AutocorrectionType { get; set; }

	//	// @optional @property (nonatomic) UITextSpellCheckingType spellCheckingType __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("spellCheckingType", ArgumentSemantic.Assign)]
	//	UITextSpellCheckingType SpellCheckingType { get; set; }

	//	// @optional @property (nonatomic) UITextSmartQuotesType smartQuotesType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("smartQuotesType", ArgumentSemantic.Assign)]
	//	UITextSmartQuotesType SmartQuotesType { get; set; }

	//	// @optional @property (nonatomic) UITextSmartDashesType smartDashesType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("smartDashesType", ArgumentSemantic.Assign)]
	//	UITextSmartDashesType SmartDashesType { get; set; }

	//	// @optional @property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("smartInsertDeleteType", ArgumentSemantic.Assign)]
	//	UITextSmartInsertDeleteType SmartInsertDeleteType { get; set; }

	//	// @optional @property (nonatomic) UIKeyboardType keyboardType;
	//	[Export ("keyboardType", ArgumentSemantic.Assign)]
	//	UIKeyboardType KeyboardType { get; set; }

	//	// @optional @property (nonatomic) UIKeyboardAppearance keyboardAppearance;
	//	[Export ("keyboardAppearance", ArgumentSemantic.Assign)]
	//	UIKeyboardAppearance KeyboardAppearance { get; set; }

	//	// @optional @property (nonatomic) UIReturnKeyType returnKeyType;
	//	[Export ("returnKeyType", ArgumentSemantic.Assign)]
	//	UIReturnKeyType ReturnKeyType { get; set; }

	//	// @optional @property (nonatomic) BOOL enablesReturnKeyAutomatically;
	//	[Export ("enablesReturnKeyAutomatically")]
	//	bool EnablesReturnKeyAutomatically { get; set; }

	//	// @optional @property (getter = isSecureTextEntry, nonatomic) BOOL secureTextEntry;
	//	[Export ("secureTextEntry")]
	//	bool SecureTextEntry { [Bind ("isSecureTextEntry")] get; set; }

	//	// @optional @property (copy, nonatomic) UITextContentType _Null_unspecified textContentType __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("textContentType")]
	//	string TextContentType { get; set; }

	//	// @optional @property (copy, nonatomic) UITextInputPasswordRules * _Nullable passwordRules __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12, 0)]
	//	[NullAllowed, Export ("passwordRules", ArgumentSemantic.Copy)]
	//	UITextInputPasswordRules PasswordRules { get; set; }
	//}

	//// @protocol UIKeyInput <UITextInputTraits>
	//[Protocol, Model]
	//interface UIKeyInput : IUITextInputTraits
	//{
	//	// @required @property (readonly, nonatomic) BOOL hasText;
	//	[Abstract]
	//	[Export ("hasText")]
	//	bool HasText { get; }

	//	// @required -(void)insertText:(NSString * _Nonnull)text;
	//	[Abstract]
	//	[Export ("insertText:")]
	//	void InsertText (string text);

	//	// @required -(void)deleteBackward;
	//	[Abstract]
	//	[Export ("deleteBackward")]
	//	void DeleteBackward ();
	//}

	//// @interface UIDictationPhrase : NSObject
	//[iOS (5,1)]
	//[BaseType (typeof(NSObject))]
	//interface UIDictationPhrase
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull text;
	//	[Export ("text")]
	//	string Text { get; }

	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nullable alternativeInterpretations;
	//	[NullAllowed, Export ("alternativeInterpretations")]
	//	string[] AlternativeInterpretations { get; }
	//}

	//// @interface UITextInputAssistantItem : NSObject
	//[NoWatch, NoTV, iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface UITextInputAssistantItem
	//{
	//	// @property (assign, readwrite, nonatomic) BOOL allowsHidingShortcuts;
	//	[Export ("allowsHidingShortcuts")]
	//	bool AllowsHidingShortcuts { get; set; }

	//	// @property (readwrite, copy, nonatomic) NSArray<UIBarButtonItemGroup *> * _Nonnull leadingBarButtonGroups;
	//	[Export ("leadingBarButtonGroups", ArgumentSemantic.Copy)]
	//	UIBarButtonItemGroup[] LeadingBarButtonGroups { get; set; }

	//	// @property (readwrite, copy, nonatomic) NSArray<UIBarButtonItemGroup *> * _Nonnull trailingBarButtonGroups;
	//	[Export ("trailingBarButtonGroups", ArgumentSemantic.Copy)]
	//	UIBarButtonItemGroup[] TrailingBarButtonGroups { get; set; }
	//}

	//// @protocol UITextInput <UIKeyInput>
	//[Protocol, Model]
	//interface UITextInput : IUIKeyInput
	//{
	//	// @required -(NSString * _Nullable)textInRange:(UITextRange * _Nonnull)range;
	//	[Abstract]
	//	[Export ("textInRange:")]
	//	[return: NullAllowed]
	//	string TextInRange (UITextRange range);

	//	// @required -(void)replaceRange:(UITextRange * _Nonnull)range withText:(NSString * _Nonnull)text;
	//	[Abstract]
	//	[Export ("replaceRange:withText:")]
	//	void ReplaceRange (UITextRange range, string text);

	//	// @required @property (readwrite, copy) UITextRange * _Nullable selectedTextRange;
	//	[Abstract]
	//	[NullAllowed, Export ("selectedTextRange", ArgumentSemantic.Copy)]
	//	UITextRange SelectedTextRange { get; set; }

	//	// @required @property (readonly, nonatomic) UITextRange * _Nullable markedTextRange;
	//	[Abstract]
	//	[NullAllowed, Export ("markedTextRange")]
	//	UITextRange MarkedTextRange { get; }

	//	// @required @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nullable markedTextStyle;
	//	[Abstract]
	//	[NullAllowed, Export ("markedTextStyle", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> MarkedTextStyle { get; set; }

	//	// @required -(void)setMarkedText:(NSString * _Nullable)markedText selectedRange:(NSRange)selectedRange;
	//	[Abstract]
	//	[Export ("setMarkedText:selectedRange:")]
	//	void SetMarkedText ([NullAllowed] string markedText, NSRange selectedRange);

	//	// @required -(void)unmarkText;
	//	[Abstract]
	//	[Export ("unmarkText")]
	//	void UnmarkText ();

	//	// @required @property (readonly, nonatomic) UITextPosition * _Nonnull beginningOfDocument;
	//	[Abstract]
	//	[Export ("beginningOfDocument")]
	//	UITextPosition BeginningOfDocument { get; }

	//	// @required @property (readonly, nonatomic) UITextPosition * _Nonnull endOfDocument;
	//	[Abstract]
	//	[Export ("endOfDocument")]
	//	UITextPosition EndOfDocument { get; }

	//	// @required -(UITextRange * _Nullable)textRangeFromPosition:(UITextPosition * _Nonnull)fromPosition toPosition:(UITextPosition * _Nonnull)toPosition;
	//	[Abstract]
	//	[Export ("textRangeFromPosition:toPosition:")]
	//	[return: NullAllowed]
	//	UITextRange TextRangeFromPosition (UITextPosition fromPosition, UITextPosition toPosition);

	//	// @required -(UITextPosition * _Nullable)positionFromPosition:(UITextPosition * _Nonnull)position offset:(NSInteger)offset;
	//	[Abstract]
	//	[Export ("positionFromPosition:offset:")]
	//	[return: NullAllowed]
	//	UITextPosition PositionFromPosition (UITextPosition position, nint offset);

	//	// @required -(UITextPosition * _Nullable)positionFromPosition:(UITextPosition * _Nonnull)position inDirection:(UITextLayoutDirection)direction offset:(NSInteger)offset;
	//	[Abstract]
	//	[Export ("positionFromPosition:inDirection:offset:")]
	//	[return: NullAllowed]
	//	UITextPosition PositionFromPosition (UITextPosition position, UITextLayoutDirection direction, nint offset);

	//	// @required -(NSComparisonResult)comparePosition:(UITextPosition * _Nonnull)position toPosition:(UITextPosition * _Nonnull)other;
	//	[Abstract]
	//	[Export ("comparePosition:toPosition:")]
	//	NSComparisonResult ComparePosition (UITextPosition position, UITextPosition other);

	//	// @required -(NSInteger)offsetFromPosition:(UITextPosition * _Nonnull)from toPosition:(UITextPosition * _Nonnull)toPosition;
	//	[Abstract]
	//	[Export ("offsetFromPosition:toPosition:")]
	//	nint OffsetFromPosition (UITextPosition from, UITextPosition toPosition);

	//	[Wrap ("WeakInputDelegate"), Abstract]
	//	[NullAllowed]
	//	UITextInputDelegate InputDelegate { get; set; }

	//	// @required @property (nonatomic, weak) id<UITextInputDelegate> _Nullable inputDelegate;
	//	[Abstract]
	//	[NullAllowed, Export ("inputDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakInputDelegate { get; set; }

	//	// @required @property (readonly, nonatomic) id<UITextInputTokenizer> _Nonnull tokenizer;
	//	[Abstract]
	//	[Export ("tokenizer")]
	//	UITextInputTokenizer Tokenizer { get; }

	//	// @required -(UITextPosition * _Nullable)positionWithinRange:(UITextRange * _Nonnull)range farthestInDirection:(UITextLayoutDirection)direction;
	//	[Abstract]
	//	[Export ("positionWithinRange:farthestInDirection:")]
	//	[return: NullAllowed]
	//	UITextPosition PositionWithinRange (UITextRange range, UITextLayoutDirection direction);

	//	// @required -(UITextRange * _Nullable)characterRangeByExtendingPosition:(UITextPosition * _Nonnull)position inDirection:(UITextLayoutDirection)direction;
	//	[Abstract]
	//	[Export ("characterRangeByExtendingPosition:inDirection:")]
	//	[return: NullAllowed]
	//	UITextRange CharacterRangeByExtendingPosition (UITextPosition position, UITextLayoutDirection direction);

	//	// @required -(UITextWritingDirection)baseWritingDirectionForPosition:(UITextPosition * _Nonnull)position inDirection:(UITextStorageDirection)direction;
	//	[Abstract]
	//	[Export ("baseWritingDirectionForPosition:inDirection:")]
	//	UITextWritingDirection BaseWritingDirectionForPosition (UITextPosition position, UITextStorageDirection direction);

	//	// @required -(void)setBaseWritingDirection:(UITextWritingDirection)writingDirection forRange:(UITextRange * _Nonnull)range;
	//	[Abstract]
	//	[Export ("setBaseWritingDirection:forRange:")]
	//	void SetBaseWritingDirection (UITextWritingDirection writingDirection, UITextRange range);

	//	// @required -(CGRect)firstRectForRange:(UITextRange * _Nonnull)range;
	//	[Abstract]
	//	[Export ("firstRectForRange:")]
	//	CGRect FirstRectForRange (UITextRange range);

	//	// @required -(CGRect)caretRectForPosition:(UITextPosition * _Nonnull)position;
	//	[Abstract]
	//	[Export ("caretRectForPosition:")]
	//	CGRect CaretRectForPosition (UITextPosition position);

	//	// @required -(NSArray<UITextSelectionRect *> * _Nonnull)selectionRectsForRange:(UITextRange * _Nonnull)range __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Abstract]
	//	[Export ("selectionRectsForRange:")]
	//	UITextSelectionRect[] SelectionRectsForRange (UITextRange range);

	//	// @required -(UITextPosition * _Nullable)closestPositionToPoint:(CGPoint)point;
	//	[Abstract]
	//	[Export ("closestPositionToPoint:")]
	//	[return: NullAllowed]
	//	UITextPosition ClosestPositionToPoint (CGPoint point);

	//	// @required -(UITextPosition * _Nullable)closestPositionToPoint:(CGPoint)point withinRange:(UITextRange * _Nonnull)range;
	//	[Abstract]
	//	[Export ("closestPositionToPoint:withinRange:")]
	//	[return: NullAllowed]
	//	UITextPosition ClosestPositionToPoint (CGPoint point, UITextRange range);

	//	// @required -(UITextRange * _Nullable)characterRangeAtPoint:(CGPoint)point;
	//	[Abstract]
	//	[Export ("characterRangeAtPoint:")]
	//	[return: NullAllowed]
	//	UITextRange CharacterRangeAtPoint (CGPoint point);

	//	// @optional -(BOOL)shouldChangeTextInRange:(UITextRange * _Nonnull)range replacementText:(NSString * _Nonnull)text __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("shouldChangeTextInRange:replacementText:")]
	//	bool ShouldChangeTextInRange (UITextRange range, string text);

	//	// @optional -(NSDictionary<NSAttributedStringKey,id> * _Nullable)textStylingAtPosition:(UITextPosition * _Nonnull)position inDirection:(UITextStorageDirection)direction;
	//	[Export ("textStylingAtPosition:inDirection:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> TextStylingAtPosition (UITextPosition position, UITextStorageDirection direction);

	//	// @optional -(UITextPosition * _Nullable)positionWithinRange:(UITextRange * _Nonnull)range atCharacterOffset:(NSInteger)offset;
	//	[Export ("positionWithinRange:atCharacterOffset:")]
	//	[return: NullAllowed]
	//	UITextPosition PositionWithinRange (UITextRange range, nint offset);

	//	// @optional -(NSInteger)characterOffsetOfPosition:(UITextPosition * _Nonnull)position withinRange:(UITextRange * _Nonnull)range;
	//	[Export ("characterOffsetOfPosition:withinRange:")]
	//	nint CharacterOffsetOfPosition (UITextPosition position, UITextRange range);

	//	// @optional @property (readonly, nonatomic) __kindof UIView * _Nonnull textInputView;
	//	[Export ("textInputView")]
	//	UIView TextInputView { get; }

	//	// @optional @property (nonatomic) UITextStorageDirection selectionAffinity;
	//	[Export ("selectionAffinity", ArgumentSemantic.Assign)]
	//	UITextStorageDirection SelectionAffinity { get; set; }

	//	// @optional -(void)insertDictationResult:(NSArray<UIDictationPhrase *> * _Nonnull)dictationResult;
	//	[Export ("insertDictationResult:")]
	//	void InsertDictationResult (UIDictationPhrase[] dictationResult);

	//	// @optional -(void)dictationRecordingDidEnd;
	//	[Export ("dictationRecordingDidEnd")]
	//	void DictationRecordingDidEnd ();

	//	// @optional -(void)dictationRecognitionFailed;
	//	[Export ("dictationRecognitionFailed")]
	//	void DictationRecognitionFailed ();

	//	// @optional @property (readonly, nonatomic) id _Nonnull insertDictationResultPlaceholder;
	//	[Export ("insertDictationResultPlaceholder")]
	//	NSObject InsertDictationResultPlaceholder { get; }

	//	// @optional -(CGRect)frameForDictationResultPlaceholder:(id _Nonnull)placeholder;
	//	[Export ("frameForDictationResultPlaceholder:")]
	//	CGRect FrameForDictationResultPlaceholder (NSObject placeholder);

	//	// @optional -(void)removeDictationResultPlaceholder:(id _Nonnull)placeholder willInsertResult:(BOOL)willInsertResult;
	//	[Export ("removeDictationResultPlaceholder:willInsertResult:")]
	//	void RemoveDictationResultPlaceholder (NSObject placeholder, bool willInsertResult);

	//	// @optional -(void)beginFloatingCursorAtPoint:(CGPoint)point __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("beginFloatingCursorAtPoint:")]
	//	void BeginFloatingCursorAtPoint (CGPoint point);

	//	// @optional -(void)updateFloatingCursorAtPoint:(CGPoint)point __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("updateFloatingCursorAtPoint:")]
	//	void UpdateFloatingCursorAtPoint (CGPoint point);

	//	// @optional -(void)endFloatingCursor __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("endFloatingCursor")]
	//	void EndFloatingCursor ();
	//}

	//// @interface UITextPosition : NSObject
	//[iOS (3,2)]
	//[BaseType (typeof(NSObject))]
	//interface UITextPosition
	//{
	//}

	//// @interface UITextRange : NSObject
	//[iOS (3,2)]
	//[BaseType (typeof(NSObject))]
	//interface UITextRange
	//{
	//	// @property (readonly, getter = isEmpty, nonatomic) BOOL empty;
	//	[Export ("empty")]
	//	bool Empty { [Bind ("isEmpty")] get; }

	//	// @property (readonly, nonatomic) UITextPosition * _Nonnull start;
	//	[Export ("start")]
	//	UITextPosition Start { get; }

	//	// @property (readonly, nonatomic) UITextPosition * _Nonnull end;
	//	[Export ("end")]
	//	UITextPosition End { get; }
	//}

	//// @interface UITextSelectionRect : NSObject
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface UITextSelectionRect
	//{
	//	// @property (readonly, nonatomic) CGRect rect;
	//	[Export ("rect")]
	//	CGRect Rect { get; }

	//	// @property (readonly, nonatomic) UITextWritingDirection writingDirection;
	//	[Export ("writingDirection")]
	//	UITextWritingDirection WritingDirection { get; }

	//	// @property (readonly, nonatomic) BOOL containsStart;
	//	[Export ("containsStart")]
	//	bool ContainsStart { get; }

	//	// @property (readonly, nonatomic) BOOL containsEnd;
	//	[Export ("containsEnd")]
	//	bool ContainsEnd { get; }

	//	// @property (readonly, nonatomic) BOOL isVertical;
	//	[Export ("isVertical")]
	//	bool IsVertical { get; }
	//}

	//// @protocol UITextInputDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITextInputDelegate
	//{
	//	// @required -(void)selectionWillChange:(id<UITextInput> _Nullable)textInput;
	//	[Abstract]
	//	[Export ("selectionWillChange:")]
	//	void SelectionWillChange ([NullAllowed] UITextInput textInput);

	//	// @required -(void)selectionDidChange:(id<UITextInput> _Nullable)textInput;
	//	[Abstract]
	//	[Export ("selectionDidChange:")]
	//	void SelectionDidChange ([NullAllowed] UITextInput textInput);

	//	// @required -(void)textWillChange:(id<UITextInput> _Nullable)textInput;
	//	[Abstract]
	//	[Export ("textWillChange:")]
	//	void TextWillChange ([NullAllowed] UITextInput textInput);

	//	// @required -(void)textDidChange:(id<UITextInput> _Nullable)textInput;
	//	[Abstract]
	//	[Export ("textDidChange:")]
	//	void TextDidChange ([NullAllowed] UITextInput textInput);
	//}

	//// @protocol UITextInputTokenizer <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITextInputTokenizer
	//{
	//	// @required -(UITextRange * _Nullable)rangeEnclosingPosition:(UITextPosition * _Nonnull)position withGranularity:(UITextGranularity)granularity inDirection:(UITextDirection)direction;
	//	[Abstract]
	//	[Export ("rangeEnclosingPosition:withGranularity:inDirection:")]
	//	[return: NullAllowed]
	//	UITextRange RangeEnclosingPosition (UITextPosition position, UITextGranularity granularity, nint direction);

	//	// @required -(BOOL)isPosition:(UITextPosition * _Nonnull)position atBoundary:(UITextGranularity)granularity inDirection:(UITextDirection)direction;
	//	[Abstract]
	//	[Export ("isPosition:atBoundary:inDirection:")]
	//	bool IsPosition (UITextPosition position, UITextGranularity granularity, nint direction);

	//	// @required -(UITextPosition * _Nullable)positionFromPosition:(UITextPosition * _Nonnull)position toBoundary:(UITextGranularity)granularity inDirection:(UITextDirection)direction;
	//	[Abstract]
	//	[Export ("positionFromPosition:toBoundary:inDirection:")]
	//	[return: NullAllowed]
	//	UITextPosition PositionFromPosition (UITextPosition position, UITextGranularity granularity, nint direction);

	//	// @required -(BOOL)isPosition:(UITextPosition * _Nonnull)position withinTextUnit:(UITextGranularity)granularity inDirection:(UITextDirection)direction;
	//	[Abstract]
	//	[Export ("isPosition:withinTextUnit:inDirection:")]
	//	bool IsPosition (UITextPosition position, UITextGranularity granularity, nint direction);
	//}

	//// @interface UITextInputStringTokenizer : NSObject <UITextInputTokenizer>
	//[iOS (3,2)]
	//[BaseType (typeof(NSObject))]
	//interface UITextInputStringTokenizer : IUITextInputTokenizer
	//{
	//	// -(instancetype _Nonnull)initWithTextInput:(UIResponder<UITextInput> * _Nonnull)textInput;
	//	[Export ("initWithTextInput:")]
	//	IntPtr Constructor (UITextInput textInput);
	//}

	//// @interface UITextInputMode : NSObject <NSSecureCoding>
	//[iOS (4,2)]
	//[BaseType (typeof(NSObject))]
	//interface UITextInputMode : INSSecureCoding
	//{
	//	// @property (readonly, nonatomic, strong) NSString * _Nullable primaryLanguage;
	//	[NullAllowed, Export ("primaryLanguage", ArgumentSemantic.Strong)]
	//	string PrimaryLanguage { get; }

	//	// +(UITextInputMode * _Nullable)currentInputMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.2, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 4, 2)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoTV]
	//	[Static]
	//	[NullAllowed, Export ("currentInputMode")]
	//	[Verify (MethodToProperty)]
	//	UITextInputMode CurrentInputMode { get; }

	//	// @property (readonly, nonatomic, class) NSArray<UITextInputMode *> * _Nonnull activeInputModes;
	//	[Static]
	//	[Export ("activeInputModes")]
	//	UITextInputMode[] ActiveInputModes { get; }
	//}

	//// typedef UIAccessibilityCustomRotorItemResult * _Nullable (^UIAccessibilityCustomRotorSearch)(UIAccessibilityCustomRotorSearchPredicate * _Nonnull);
	//delegate UIAccessibilityCustomRotorItemResult UIAccessibilityCustomRotorSearch (UIAccessibilityCustomRotorSearchPredicate arg0);

	//// @interface UIAccessibilityCustomRotor (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_UIAccessibilityCustomRotor
	//{
	//	// @property (retain, nonatomic) NSArray<UIAccessibilityCustomRotor *> * _Nullable accessibilityCustomRotors __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("accessibilityCustomRotors", ArgumentSemantic.Retain)]
	//	UIAccessibilityCustomRotor[] AccessibilityCustomRotors { get; set; }
	//}

	//// @interface UIAccessibilityCustomRotorSearchPredicate : NSObject
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIAccessibilityCustomRotorSearchPredicate
	//{
	//	// @property (retain, nonatomic) UIAccessibilityCustomRotorItemResult * _Nonnull currentItem;
	//	[Export ("currentItem", ArgumentSemantic.Retain)]
	//	UIAccessibilityCustomRotorItemResult CurrentItem { get; set; }

	//	// @property (nonatomic) UIAccessibilityCustomRotorDirection searchDirection;
	//	[Export ("searchDirection", ArgumentSemantic.Assign)]
	//	UIAccessibilityCustomRotorDirection SearchDirection { get; set; }
	//}

	//// @interface UIAccessibilityCustomRotor : NSObject
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIAccessibilityCustomRotor
	//{
	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name itemSearchBlock:(UIAccessibilityCustomRotorSearch _Nonnull)itemSearchBlock;
	//	[Export ("initWithName:itemSearchBlock:")]
	//	IntPtr Constructor (string name, UIAccessibilityCustomRotorSearch itemSearchBlock);

	//	// -(instancetype _Nonnull)initWithAttributedName:(NSAttributedString * _Nonnull)attributedName itemSearchBlock:(UIAccessibilityCustomRotorSearch _Nonnull)itemSearchBlock __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("initWithAttributedName:itemSearchBlock:")]
	//	IntPtr Constructor (NSAttributedString attributedName, UIAccessibilityCustomRotorSearch itemSearchBlock);

	//	// -(instancetype _Nonnull)initWithSystemType:(UIAccessibilityCustomSystemRotorType)type itemSearchBlock:(UIAccessibilityCustomRotorSearch _Nonnull)itemSearchBlock __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("initWithSystemType:itemSearchBlock:")]
	//	IntPtr Constructor (UIAccessibilityCustomSystemRotorType type, UIAccessibilityCustomRotorSearch itemSearchBlock);

	//	// @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }

	//	// @property (copy, nonatomic) NSAttributedString * _Nonnull attributedName __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("attributedName", ArgumentSemantic.Copy)]
	//	NSAttributedString AttributedName { get; set; }

	//	// @property (copy, nonatomic) UIAccessibilityCustomRotorSearch _Nonnull itemSearchBlock;
	//	[Export ("itemSearchBlock", ArgumentSemantic.Copy)]
	//	UIAccessibilityCustomRotorSearch ItemSearchBlock { get; set; }

	//	// @property (readonly, nonatomic) UIAccessibilityCustomSystemRotorType systemRotorType __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("systemRotorType")]
	//	UIAccessibilityCustomSystemRotorType SystemRotorType { get; }
	//}

	//// @interface UIAccessibilityCustomRotorItemResult : NSObject
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIAccessibilityCustomRotorItemResult
	//{
	//	// -(instancetype _Nonnull)initWithTargetElement:(id<NSObject> _Nonnull)targetElement targetRange:(UITextRange * _Nullable)targetRange;
	//	[Export ("initWithTargetElement:targetRange:")]
	//	IntPtr Constructor (NSObject targetElement, [NullAllowed] UITextRange targetRange);

	//	// @property (nonatomic, weak) id<NSObject> _Nullable targetElement;
	//	[NullAllowed, Export ("targetElement", ArgumentSemantic.Weak)]
	//	NSObject TargetElement { get; set; }

	//	// @property (retain, nonatomic) UITextRange * _Nullable targetRange;
	//	[NullAllowed, Export ("targetRange", ArgumentSemantic.Retain)]
	//	UITextRange TargetRange { get; set; }
	//}

	//// @interface UIKitAdditions (NSItemProvider)
	//[Category]
	//[BaseType (typeof(NSItemProvider))]
	//interface NSItemProvider_UIKitAdditions
	//{
	//	// @property (copy, nonatomic) NSData * _Nullable teamData __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[NullAllowed, Export ("teamData", ArgumentSemantic.Copy)]
	//	NSData TeamData { get; set; }

	//	// @property (nonatomic) CGSize preferredPresentationSize __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("preferredPresentationSize", ArgumentSemantic.Assign)]
	//	CGSize PreferredPresentationSize { get; set; }

	//	// @property (nonatomic) UIPreferredPresentationStyle preferredPresentationStyle;
	//	[Export ("preferredPresentationStyle", ArgumentSemantic.Assign)]
	//	UIPreferredPresentationStyle PreferredPresentationStyle { get; set; }
	//}

	//// @protocol UIItemProviderPresentationSizeProviding <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIItemProviderPresentationSizeProviding
	//{
	//	// @required @property (readonly, nonatomic) CGSize preferredPresentationSizeForItemProvider;
	//	[Abstract]
	//	[Export ("preferredPresentationSizeForItemProvider")]
	//	CGSize PreferredPresentationSizeForItemProvider { get; }
	//}

	//// @interface UIImage : NSObject <NSSecureCoding>
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIImage : INSSecureCoding
	//{
	//	// +(UIImage * _Nullable)imageNamed:(NSString * _Nonnull)name;
	//	[Static]
	//	[Export ("imageNamed:")]
	//	[return: NullAllowed]
	//	UIImage ImageNamed (string name);

	//	// +(UIImage * _Nullable)imageNamed:(NSString * _Nonnull)name inBundle:(NSBundle * _Nullable)bundle compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Static]
	//	[Export ("imageNamed:inBundle:compatibleWithTraitCollection:")]
	//	[return: NullAllowed]
	//	UIImage ImageNamed (string name, [NullAllowed] NSBundle bundle, [NullAllowed] UITraitCollection traitCollection);

	//	// +(UIImage * _Nullable)imageWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Static]
	//	[Export ("imageWithContentsOfFile:")]
	//	[return: NullAllowed]
	//	UIImage ImageWithContentsOfFile (string path);

	//	// +(UIImage * _Nullable)imageWithData:(NSData * _Nonnull)data;
	//	[Static]
	//	[Export ("imageWithData:")]
	//	[return: NullAllowed]
	//	UIImage ImageWithData (NSData data);

	//	// +(UIImage * _Nullable)imageWithData:(NSData * _Nonnull)data scale:(CGFloat)scale __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("imageWithData:scale:")]
	//	[return: NullAllowed]
	//	UIImage ImageWithData (NSData data, nfloat scale);

	//	// +(UIImage * _Nonnull)imageWithCGImage:(CGImageRef _Nonnull)cgImage;
	//	[Static]
	//	[Export ("imageWithCGImage:")]
	//	unsafe UIImage ImageWithCGImage (CGImageRef* cgImage);

	//	// +(UIImage * _Nonnull)imageWithCGImage:(CGImageRef _Nonnull)cgImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("imageWithCGImage:scale:orientation:")]
	//	unsafe UIImage ImageWithCGImage (CGImageRef* cgImage, nfloat scale, UIImageOrientation orientation);

	//	// +(UIImage * _Nonnull)imageWithCIImage:(CIImage * _Nonnull)ciImage __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("imageWithCIImage:")]
	//	UIImage ImageWithCIImage (CIImage ciImage);

	//	// +(UIImage * _Nonnull)imageWithCIImage:(CIImage * _Nonnull)ciImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("imageWithCIImage:scale:orientation:")]
	//	UIImage ImageWithCIImage (CIImage ciImage, nfloat scale, UIImageOrientation orientation);

	//	// -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
	//	[Export ("initWithContentsOfFile:")]
	//	IntPtr Constructor (string path);

	//	// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data;
	//	[Export ("initWithData:")]
	//	IntPtr Constructor (NSData data);

	//	// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data scale:(CGFloat)scale __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("initWithData:scale:")]
	//	IntPtr Constructor (NSData data, nfloat scale);

	//	// -(instancetype _Nonnull)initWithCGImage:(CGImageRef _Nonnull)cgImage;
	//	[Export ("initWithCGImage:")]
	//	unsafe IntPtr Constructor (CGImageRef* cgImage);

	//	// -(instancetype _Nonnull)initWithCGImage:(CGImageRef _Nonnull)cgImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("initWithCGImage:scale:orientation:")]
	//	unsafe IntPtr Constructor (CGImageRef* cgImage, nfloat scale, UIImageOrientation orientation);

	//	// -(instancetype _Nonnull)initWithCIImage:(CIImage * _Nonnull)ciImage __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithCIImage:")]
	//	IntPtr Constructor (CIImage ciImage);

	//	// -(instancetype _Nonnull)initWithCIImage:(CIImage * _Nonnull)ciImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("initWithCIImage:scale:orientation:")]
	//	IntPtr Constructor (CIImage ciImage, nfloat scale, UIImageOrientation orientation);

	//	// @property (readonly, nonatomic) CGSize size;
	//	[Export ("size")]
	//	CGSize Size { get; }

	//	// @property (readonly, nonatomic) CGImageRef _Nullable CGImage;
	//	[NullAllowed, Export ("CGImage")]
	//	unsafe CGImageRef* CGImage { get; }

	//	// @property (readonly, nonatomic) CIImage * _Nullable CIImage __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("CIImage")]
	//	CIImage CIImage { get; }

	//	// @property (readonly, nonatomic) UIImageOrientation imageOrientation;
	//	[Export ("imageOrientation")]
	//	UIImageOrientation ImageOrientation { get; }

	//	// @property (readonly, nonatomic) CGFloat scale __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("scale")]
	//	nfloat Scale { get; }

	//	// +(UIImage * _Nullable)animatedImageNamed:(NSString * _Nonnull)name duration:(NSTimeInterval)duration __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("animatedImageNamed:duration:")]
	//	[return: NullAllowed]
	//	UIImage AnimatedImageNamed (string name, double duration);

	//	// +(UIImage * _Nullable)animatedResizableImageNamed:(NSString * _Nonnull)name capInsets:(UIEdgeInsets)capInsets duration:(NSTimeInterval)duration __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("animatedResizableImageNamed:capInsets:duration:")]
	//	[return: NullAllowed]
	//	UIImage AnimatedResizableImageNamed (string name, UIEdgeInsets capInsets, double duration);

	//	// +(UIImage * _Nullable)animatedResizableImageNamed:(NSString * _Nonnull)name capInsets:(UIEdgeInsets)capInsets resizingMode:(UIImageResizingMode)resizingMode duration:(NSTimeInterval)duration __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("animatedResizableImageNamed:capInsets:resizingMode:duration:")]
	//	[return: NullAllowed]
	//	UIImage AnimatedResizableImageNamed (string name, UIEdgeInsets capInsets, UIImageResizingMode resizingMode, double duration);

	//	// +(UIImage * _Nullable)animatedImageWithImages:(NSArray<UIImage *> * _Nonnull)images duration:(NSTimeInterval)duration __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Static]
	//	[Export ("animatedImageWithImages:duration:")]
	//	[return: NullAllowed]
	//	UIImage AnimatedImageWithImages (UIImage[] images, double duration);

	//	// @property (readonly, nonatomic) NSArray<UIImage *> * _Nullable images __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("images")]
	//	UIImage[] Images { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval duration __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("duration")]
	//	double Duration { get; }

	//	// -(void)drawAtPoint:(CGPoint)point;
	//	[Export ("drawAtPoint:")]
	//	void DrawAtPoint (CGPoint point);

	//	// -(void)drawAtPoint:(CGPoint)point blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;
	//	[Export ("drawAtPoint:blendMode:alpha:")]
	//	void DrawAtPoint (CGPoint point, CGBlendMode blendMode, nfloat alpha);

	//	// -(void)drawInRect:(CGRect)rect;
	//	[Export ("drawInRect:")]
	//	void DrawInRect (CGRect rect);

	//	// -(void)drawInRect:(CGRect)rect blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;
	//	[Export ("drawInRect:blendMode:alpha:")]
	//	void DrawInRect (CGRect rect, CGBlendMode blendMode, nfloat alpha);

	//	// -(void)drawAsPatternInRect:(CGRect)rect;
	//	[Export ("drawAsPatternInRect:")]
	//	void DrawAsPatternInRect (CGRect rect);

	//	// -(UIImage * _Nonnull)resizableImageWithCapInsets:(UIEdgeInsets)capInsets __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("resizableImageWithCapInsets:")]
	//	UIImage ResizableImageWithCapInsets (UIEdgeInsets capInsets);

	//	// -(UIImage * _Nonnull)resizableImageWithCapInsets:(UIEdgeInsets)capInsets resizingMode:(UIImageResizingMode)resizingMode __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("resizableImageWithCapInsets:resizingMode:")]
	//	UIImage ResizableImageWithCapInsets (UIEdgeInsets capInsets, UIImageResizingMode resizingMode);

	//	// @property (readonly, nonatomic) UIEdgeInsets capInsets __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("capInsets")]
	//	UIEdgeInsets CapInsets { get; }

	//	// @property (readonly, nonatomic) UIImageResizingMode resizingMode __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("resizingMode")]
	//	UIImageResizingMode ResizingMode { get; }

	//	// -(UIImage * _Nonnull)imageWithAlignmentRectInsets:(UIEdgeInsets)alignmentInsets __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("imageWithAlignmentRectInsets:")]
	//	UIImage ImageWithAlignmentRectInsets (UIEdgeInsets alignmentInsets);

	//	// @property (readonly, nonatomic) UIEdgeInsets alignmentRectInsets __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("alignmentRectInsets")]
	//	UIEdgeInsets AlignmentRectInsets { get; }

	//	// -(UIImage * _Nonnull)imageWithRenderingMode:(UIImageRenderingMode)renderingMode __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("imageWithRenderingMode:")]
	//	UIImage ImageWithRenderingMode (UIImageRenderingMode renderingMode);

	//	// @property (readonly, nonatomic) UIImageRenderingMode renderingMode __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("renderingMode")]
	//	UIImageRenderingMode RenderingMode { get; }

	//	// @property (readonly, nonatomic) UIGraphicsImageRendererFormat * _Nonnull imageRendererFormat __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("imageRendererFormat")]
	//	UIGraphicsImageRendererFormat ImageRendererFormat { get; }

	//	// @property (readonly, copy, nonatomic) UITraitCollection * _Nonnull traitCollection __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("traitCollection", ArgumentSemantic.Copy)]
	//	UITraitCollection TraitCollection { get; }

	//	// @property (readonly, nonatomic) UIImageAsset * _Nullable imageAsset __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("imageAsset")]
	//	UIImageAsset ImageAsset { get; }

	//	// -(UIImage * _Nonnull)imageFlippedForRightToLeftLayoutDirection __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("imageFlippedForRightToLeftLayoutDirection")]
	//	[Verify (MethodToProperty)]
	//	UIImage ImageFlippedForRightToLeftLayoutDirection { get; }

	//	// @property (readonly, nonatomic) BOOL flipsForRightToLeftLayoutDirection __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("flipsForRightToLeftLayoutDirection")]
	//	bool FlipsForRightToLeftLayoutDirection { get; }

	//	// -(UIImage * _Nonnull)imageWithHorizontallyFlippedOrientation __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("imageWithHorizontallyFlippedOrientation")]
	//	[Verify (MethodToProperty)]
	//	UIImage ImageWithHorizontallyFlippedOrientation { get; }
	//}

	//// @interface NSItemProvider (UIImage) <NSItemProviderReading, NSItemProviderWriting, UIItemProviderPresentationSizeProviding>
	//[Category]
	//[BaseType (typeof(UIImage))]
	//interface UIImage_NSItemProvider : INSItemProviderReading, INSItemProviderWriting, IUIItemProviderPresentationSizeProviding
	//{
	//}

	//// @interface UIImageDeprecated (UIImage)
	//[Category]
	//[BaseType (typeof(UIImage))]
	//interface UIImage_UIImageDeprecated
	//{
	//	// -(UIImage * _Nonnull)stretchableImageWithLeftCapWidth:(NSInteger)leftCapWidth topCapHeight:(NSInteger)topCapHeight __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("stretchableImageWithLeftCapWidth:topCapHeight:")]
	//	UIImage StretchableImageWithLeftCapWidth (nint leftCapWidth, nint topCapHeight);

	//	// @property (readonly, nonatomic) NSInteger leftCapWidth __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("leftCapWidth")]
	//	nint LeftCapWidth { get; }

	//	// @property (readonly, nonatomic) NSInteger topCapHeight __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("topCapHeight")]
	//	nint TopCapHeight { get; }
	//}

	//// @interface UIKitAdditions (CIImage)
	//[Category]
	//[BaseType (typeof(CIImage))]
	//interface CIImage_UIKitAdditions
	//{
	//	// -(instancetype _Nullable)initWithImage:(UIImage * _Nonnull)image __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithImage:")]
	//	IntPtr Constructor (UIImage image);

	//	// -(instancetype _Nullable)initWithImage:(UIImage * _Nonnull)image options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithImage:options:")]
	//	IntPtr Constructor (UIImage image, [NullAllowed] NSDictionary<NSString, NSObject> options);
	//}

	//// @interface UIBarItem : NSObject <NSCoding, UIAppearance>
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIBarItem : INSCoding, IUIAppearance
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable title;
	//	[NullAllowed, Export ("title")]
	//	string Title { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable image;
	//	[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
	//	UIImage Image { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable landscapeImagePhone __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5, 0)]
	//	[NullAllowed, Export ("landscapeImagePhone", ArgumentSemantic.Strong)]
	//	UIImage LandscapeImagePhone { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable largeContentSizeImage __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[NullAllowed, Export ("largeContentSizeImage", ArgumentSemantic.Strong)]
	//	UIImage LargeContentSizeImage { get; set; }

	//	// @property (nonatomic) UIEdgeInsets imageInsets;
	//	[Export ("imageInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets ImageInsets { get; set; }

	//	// @property (nonatomic) UIEdgeInsets landscapeImagePhoneInsets __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5, 0)]
	//	[Export ("landscapeImagePhoneInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets LandscapeImagePhoneInsets { get; set; }

	//	// @property (nonatomic) UIEdgeInsets largeContentSizeImageInsets __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("largeContentSizeImageInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets LargeContentSizeImageInsets { get; set; }

	//	// @property (nonatomic) NSInteger tag;
	//	[Export ("tag")]
	//	nint Tag { get; set; }

	//	// -(void)setTitleTextAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attributes forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setTitleTextAttributes:forState:")]
	//	void SetTitleTextAttributes ([NullAllowed] NSDictionary<NSString, NSObject> attributes, UIControlState state);

	//	// -(NSDictionary<NSAttributedStringKey,id> * _Nullable)titleTextAttributesForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("titleTextAttributesForState:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> TitleTextAttributesForState (UIControlState state);
	//}

	//// @protocol UIAccessibilityIdentification <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIAccessibilityIdentification
	//{
	//	// @required @property (copy, nonatomic) NSString * _Nullable accessibilityIdentifier __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("accessibilityIdentifier")]
	//	string AccessibilityIdentifier { get; set; }
	//}

	//// @interface UIAccessibility (UIView) <UIAccessibilityIdentification>
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIAccessibility : IUIAccessibilityIdentification
	//{
	//}

	//// @interface UIAccessibility (UIBarItem) <UIAccessibilityIdentification>
	//[Category]
	//[BaseType (typeof(UIBarItem))]
	//interface UIBarItem_UIAccessibility : IUIAccessibilityIdentification
	//{
	//}

	//// @interface UIAccessibility (UIImage) <UIAccessibilityIdentification>
	//[Category]
	//[BaseType (typeof(UIImage))]
	//interface UIImage_UIAccessibility : IUIAccessibilityIdentification
	//{
	//}

	//// @interface UIAccessibilityElement : NSObject <UIAccessibilityIdentification>
	//[iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIAccessibilityElement : IUIAccessibilityIdentification
	//{
	//	// -(instancetype _Nonnull)initWithAccessibilityContainer:(id _Nonnull)container;
	//	[Export ("initWithAccessibilityContainer:")]
	//	IntPtr Constructor (NSObject container);

	//	// @property (assign, nonatomic) id _Nullable accessibilityContainer;
	//	[NullAllowed, Export ("accessibilityContainer", ArgumentSemantic.Assign)]
	//	NSObject AccessibilityContainer { get; set; }

	//	// @property (assign, nonatomic) BOOL isAccessibilityElement;
	//	[Export ("isAccessibilityElement")]
	//	bool IsAccessibilityElement { get; set; }

	//	// @property (nonatomic, strong) NSString * _Nullable accessibilityLabel;
	//	[NullAllowed, Export ("accessibilityLabel", ArgumentSemantic.Strong)]
	//	string AccessibilityLabel { get; set; }

	//	// @property (nonatomic, strong) NSString * _Nullable accessibilityHint;
	//	[NullAllowed, Export ("accessibilityHint", ArgumentSemantic.Strong)]
	//	string AccessibilityHint { get; set; }

	//	// @property (nonatomic, strong) NSString * _Nullable accessibilityValue;
	//	[NullAllowed, Export ("accessibilityValue", ArgumentSemantic.Strong)]
	//	string AccessibilityValue { get; set; }

	//	// @property (assign, nonatomic) CGRect accessibilityFrame;
	//	[Export ("accessibilityFrame", ArgumentSemantic.Assign)]
	//	CGRect AccessibilityFrame { get; set; }

	//	// @property (assign, nonatomic) UIAccessibilityTraits accessibilityTraits;
	//	[Export ("accessibilityTraits")]
	//	ulong AccessibilityTraits { get; set; }

	//	// @property (assign, nonatomic) CGRect accessibilityFrameInContainerSpace __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("accessibilityFrameInContainerSpace", ArgumentSemantic.Assign)]
	//	CGRect AccessibilityFrameInContainerSpace { get; set; }
	//}

	//// @protocol UIGuidedAccessRestrictionDelegate <NSObject>
	//[iOS (7,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIGuidedAccessRestrictionDelegate
	//{
	//	// @required @property (readonly, nonatomic) NSArray<NSString *> * _Nullable guidedAccessRestrictionIdentifiers;
	//	[Abstract]
	//	[NullAllowed, Export ("guidedAccessRestrictionIdentifiers")]
	//	string[] GuidedAccessRestrictionIdentifiers { get; }

	//	// @required -(void)guidedAccessRestrictionWithIdentifier:(NSString * _Nonnull)restrictionIdentifier didChangeState:(UIGuidedAccessRestrictionState)newRestrictionState;
	//	[Abstract]
	//	[Export ("guidedAccessRestrictionWithIdentifier:didChangeState:")]
	//	void GuidedAccessRestrictionWithIdentifier (string restrictionIdentifier, UIGuidedAccessRestrictionState newRestrictionState);

	//	// @required -(NSString * _Nullable)textForGuidedAccessRestrictionWithIdentifier:(NSString * _Nonnull)restrictionIdentifier;
	//	[Abstract]
	//	[Export ("textForGuidedAccessRestrictionWithIdentifier:")]
	//	[return: NullAllowed]
	//	string TextForGuidedAccessRestrictionWithIdentifier (string restrictionIdentifier);

	//	// @optional -(NSString * _Nullable)detailTextForGuidedAccessRestrictionWithIdentifier:(NSString * _Nonnull)restrictionIdentifier;
	//	[Export ("detailTextForGuidedAccessRestrictionWithIdentifier:")]
	//	[return: NullAllowed]
	//	string DetailTextForGuidedAccessRestrictionWithIdentifier (string restrictionIdentifier);
	//}

	//// @interface UIAccessibilityLocationDescriptor : NSObject
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIAccessibilityLocationDescriptor
	//{
	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name view:(UIView * _Nonnull)view;
	//	[Export ("initWithName:view:")]
	//	IntPtr Constructor (string name, UIView view);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name point:(CGPoint)point inView:(UIView * _Nonnull)view;
	//	[Export ("initWithName:point:inView:")]
	//	IntPtr Constructor (string name, CGPoint point, UIView view);

	//	// -(instancetype _Nonnull)initWithAttributedName:(NSAttributedString * _Nonnull)attributedName point:(CGPoint)point inView:(UIView * _Nonnull)view __attribute__((objc_designated_initializer));
	//	[Export ("initWithAttributedName:point:inView:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSAttributedString attributedName, CGPoint point, UIView view);

	//	// @property (readonly, nonatomic, weak) UIView * _Nullable view;
	//	[NullAllowed, Export ("view", ArgumentSemantic.Weak)]
	//	UIView View { get; }

	//	// @property (readonly, nonatomic) CGPoint point;
	//	[Export ("point")]
	//	CGPoint Point { get; }

	//	// @property (readonly, nonatomic, strong) NSString * _Nonnull name;
	//	[Export ("name", ArgumentSemantic.Strong)]
	//	string Name { get; }

	//	// @property (readonly, nonatomic, strong) NSAttributedString * _Nonnull attributedName;
	//	[Export ("attributedName", ArgumentSemantic.Strong)]
	//	NSAttributedString AttributedName { get; }
	//}

	//// @interface UIAccessibility (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_UIAccessibility
	//{
	//	// @property (nonatomic) BOOL isAccessibilityElement;
	//	[Export ("isAccessibilityElement")]
	//	bool IsAccessibilityElement { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable accessibilityLabel;
	//	[NullAllowed, Export ("accessibilityLabel")]
	//	string AccessibilityLabel { get; set; }

	//	// @property (copy, nonatomic) NSAttributedString * _Nullable accessibilityAttributedLabel __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[NullAllowed, Export ("accessibilityAttributedLabel", ArgumentSemantic.Copy)]
	//	NSAttributedString AccessibilityAttributedLabel { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable accessibilityHint;
	//	[NullAllowed, Export ("accessibilityHint")]
	//	string AccessibilityHint { get; set; }

	//	// @property (copy, nonatomic) NSAttributedString * _Nullable accessibilityAttributedHint __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[NullAllowed, Export ("accessibilityAttributedHint", ArgumentSemantic.Copy)]
	//	NSAttributedString AccessibilityAttributedHint { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable accessibilityValue;
	//	[NullAllowed, Export ("accessibilityValue")]
	//	string AccessibilityValue { get; set; }

	//	// @property (copy, nonatomic) NSAttributedString * _Nullable accessibilityAttributedValue __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[NullAllowed, Export ("accessibilityAttributedValue", ArgumentSemantic.Copy)]
	//	NSAttributedString AccessibilityAttributedValue { get; set; }

	//	// @property (nonatomic) UIAccessibilityTraits accessibilityTraits;
	//	[Export ("accessibilityTraits")]
	//	ulong AccessibilityTraits { get; set; }

	//	// @property (nonatomic) CGRect accessibilityFrame;
	//	[Export ("accessibilityFrame", ArgumentSemantic.Assign)]
	//	CGRect AccessibilityFrame { get; set; }

	//	// @property (copy, nonatomic) UIBezierPath * _Nullable accessibilityPath __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("accessibilityPath", ArgumentSemantic.Copy)]
	//	UIBezierPath AccessibilityPath { get; set; }

	//	// @property (nonatomic) CGPoint accessibilityActivationPoint __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("accessibilityActivationPoint", ArgumentSemantic.Assign)]
	//	CGPoint AccessibilityActivationPoint { get; set; }

	//	// @property (nonatomic, strong) NSString * _Nullable accessibilityLanguage;
	//	[NullAllowed, Export ("accessibilityLanguage", ArgumentSemantic.Strong)]
	//	string AccessibilityLanguage { get; set; }

	//	// @property (nonatomic) BOOL accessibilityElementsHidden __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("accessibilityElementsHidden")]
	//	bool AccessibilityElementsHidden { get; set; }

	//	// @property (nonatomic) BOOL accessibilityViewIsModal __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("accessibilityViewIsModal")]
	//	bool AccessibilityViewIsModal { get; set; }

	//	// @property (nonatomic) BOOL shouldGroupAccessibilityChildren __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("shouldGroupAccessibilityChildren")]
	//	bool ShouldGroupAccessibilityChildren { get; set; }

	//	// @property (nonatomic) UIAccessibilityNavigationStyle accessibilityNavigationStyle __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("accessibilityNavigationStyle", ArgumentSemantic.Assign)]
	//	UIAccessibilityNavigationStyle AccessibilityNavigationStyle { get; set; }

	//	// @property (copy, nonatomic) NSArray * _Nullable accessibilityHeaderElements __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[TV (9, 0), NoWatch, NoiOS]
	//	[NullAllowed, Export ("accessibilityHeaderElements", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] AccessibilityHeaderElements { get; set; }
	//}

	//// @interface UIAccessibilityFocus (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_UIAccessibilityFocus
	//{
	//	// -(void)accessibilityElementDidBecomeFocused __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("accessibilityElementDidBecomeFocused")]
	//	void AccessibilityElementDidBecomeFocused ();

	//	// -(void)accessibilityElementDidLoseFocus __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("accessibilityElementDidLoseFocus")]
	//	void AccessibilityElementDidLoseFocus ();

	//	// -(BOOL)accessibilityElementIsFocused __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("accessibilityElementIsFocused")]
	//	[Verify (MethodToProperty)]
	//	bool AccessibilityElementIsFocused { get; }

	//	// -(NSSet<UIAccessibilityAssistiveTechnologyIdentifier> * _Nullable)accessibilityAssistiveTechnologyFocusedIdentifiers __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("accessibilityAssistiveTechnologyFocusedIdentifiers")]
	//	[Verify (MethodToProperty)]
	//	NSSet<NSString> AccessibilityAssistiveTechnologyFocusedIdentifiers { get; }
	//}

	//// @interface UIAccessibilityAction (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_UIAccessibilityAction
	//{
	//	// -(BOOL)accessibilityActivate __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("accessibilityActivate")]
	//	[Verify (MethodToProperty)]
	//	bool AccessibilityActivate { get; }

	//	// -(void)accessibilityIncrement __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("accessibilityIncrement")]
	//	void AccessibilityIncrement ();

	//	// -(void)accessibilityDecrement __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("accessibilityDecrement")]
	//	void AccessibilityDecrement ();

	//	// -(BOOL)accessibilityScroll:(UIAccessibilityScrollDirection)direction __attribute__((availability(ios, introduced=4.2)));
	//	[iOS (4,2)]
	//	[Export ("accessibilityScroll:")]
	//	bool AccessibilityScroll (UIAccessibilityScrollDirection direction);

	//	// -(BOOL)accessibilityPerformEscape __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("accessibilityPerformEscape")]
	//	[Verify (MethodToProperty)]
	//	bool AccessibilityPerformEscape { get; }

	//	// -(BOOL)accessibilityPerformMagicTap __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("accessibilityPerformMagicTap")]
	//	[Verify (MethodToProperty)]
	//	bool AccessibilityPerformMagicTap { get; }

	//	// @property (nonatomic, strong) NSArray<UIAccessibilityCustomAction *> * _Nullable accessibilityCustomActions __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("accessibilityCustomActions", ArgumentSemantic.Strong)]
	//	UIAccessibilityCustomAction[] AccessibilityCustomActions { get; set; }
	//}

	//// @protocol UIAccessibilityReadingContent
	//[Protocol, Model]
	//interface UIAccessibilityReadingContent
	//{
	//	// @required -(NSInteger)accessibilityLineNumberForPoint:(CGPoint)point __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Abstract]
	//	[Export ("accessibilityLineNumberForPoint:")]
	//	nint AccessibilityLineNumberForPoint (CGPoint point);

	//	// @required -(NSString * _Nullable)accessibilityContentForLineNumber:(NSInteger)lineNumber __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Abstract]
	//	[Export ("accessibilityContentForLineNumber:")]
	//	[return: NullAllowed]
	//	string AccessibilityContentForLineNumber (nint lineNumber);

	//	// @required -(CGRect)accessibilityFrameForLineNumber:(NSInteger)lineNumber __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Abstract]
	//	[Export ("accessibilityFrameForLineNumber:")]
	//	CGRect AccessibilityFrameForLineNumber (nint lineNumber);

	//	// @required -(NSString * _Nullable)accessibilityPageContent __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("accessibilityPageContent")]
	//	[Verify (MethodToProperty)]
	//	string AccessibilityPageContent { get; }

	//	// @optional -(NSAttributedString * _Nullable)accessibilityAttributedContentForLineNumber:(NSInteger)lineNumber __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("accessibilityAttributedContentForLineNumber:")]
	//	[return: NullAllowed]
	//	NSAttributedString AccessibilityAttributedContentForLineNumber (nint lineNumber);

	//	// @optional -(NSAttributedString * _Nullable)accessibilityAttributedPageContent __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[NullAllowed, Export ("accessibilityAttributedPageContent")]
	//	[Verify (MethodToProperty)]
	//	NSAttributedString AccessibilityAttributedPageContent { get; }
	//}

	//// @interface UIAccessibilityDragging (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_UIAccessibilityDragging
	//{
	//	// @property (copy, nonatomic) NSArray<UIAccessibilityLocationDescriptor *> * _Nullable accessibilityDragSourceDescriptors __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[NullAllowed, Export ("accessibilityDragSourceDescriptors", ArgumentSemantic.Copy)]
	//	UIAccessibilityLocationDescriptor[] AccessibilityDragSourceDescriptors { get; set; }

	//	// @property (copy, nonatomic) NSArray<UIAccessibilityLocationDescriptor *> * _Nullable accessibilityDropPointDescriptors __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[NullAllowed, Export ("accessibilityDropPointDescriptors", ArgumentSemantic.Copy)]
	//	UIAccessibilityLocationDescriptor[] AccessibilityDropPointDescriptors { get; set; }
	//}

	//// @interface UIImageView : UIView
	//[iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UIImageView
	//{
	//	// -(instancetype _Nonnull)initWithImage:(UIImage * _Nullable)image;
	//	[Export ("initWithImage:")]
	//	IntPtr Constructor ([NullAllowed] UIImage image);

	//	// -(instancetype _Nonnull)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("initWithImage:highlightedImage:")]
	//	IntPtr Constructor ([NullAllowed] UIImage image, [NullAllowed] UIImage highlightedImage);

	//	// @property (nonatomic, strong) UIImage * _Nullable image;
	//	[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
	//	UIImage Image { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable highlightedImage __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[NullAllowed, Export ("highlightedImage", ArgumentSemantic.Strong)]
	//	UIImage HighlightedImage { get; set; }

	//	// @property (getter = isUserInteractionEnabled, nonatomic) BOOL userInteractionEnabled;
	//	[Export ("userInteractionEnabled")]
	//	bool UserInteractionEnabled { [Bind ("isUserInteractionEnabled")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }

	//	// @property (copy, nonatomic) NSArray<UIImage *> * _Nullable animationImages;
	//	[NullAllowed, Export ("animationImages", ArgumentSemantic.Copy)]
	//	UIImage[] AnimationImages { get; set; }

	//	// @property (copy, nonatomic) NSArray<UIImage *> * _Nullable highlightedAnimationImages __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[NullAllowed, Export ("highlightedAnimationImages", ArgumentSemantic.Copy)]
	//	UIImage[] HighlightedAnimationImages { get; set; }

	//	// @property (nonatomic) NSTimeInterval animationDuration;
	//	[Export ("animationDuration")]
	//	double AnimationDuration { get; set; }

	//	// @property (nonatomic) NSInteger animationRepeatCount;
	//	[Export ("animationRepeatCount")]
	//	nint AnimationRepeatCount { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// -(void)startAnimating;
	//	[Export ("startAnimating")]
	//	void StartAnimating ();

	//	// -(void)stopAnimating;
	//	[Export ("stopAnimating")]
	//	void StopAnimating ();

	//	// @property (readonly, getter = isAnimating, nonatomic) BOOL animating;
	//	[Export ("animating")]
	//	bool Animating { [Bind ("isAnimating")] get; }

	//	// @property (nonatomic) BOOL adjustsImageWhenAncestorFocused __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[TV (9, 0), NoWatch, NoiOS]
	//	[Export ("adjustsImageWhenAncestorFocused")]
	//	bool AdjustsImageWhenAncestorFocused { get; set; }

	//	// @property (readonly, strong) UILayoutGuide * _Nonnull focusedFrameGuide __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[TV (9, 0), NoWatch, NoiOS]
	//	[Export ("focusedFrameGuide", ArgumentSemantic.Strong)]
	//	UILayoutGuide FocusedFrameGuide { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull overlayContentView __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[TV (11, 0), NoWatch, NoiOS]
	//	[Export ("overlayContentView", ArgumentSemantic.Strong)]
	//	UIView OverlayContentView { get; }

	//	// @property (nonatomic) BOOL masksFocusEffectToContents __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
	//	[TV (11, 0), NoWatch, NoiOS]
	//	[Export ("masksFocusEffectToContents")]
	//	bool MasksFocusEffectToContents { get; set; }
	//}

	//// @interface NSTextTab : NSObject <NSCopying, NSCoding, NSSecureCoding>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSTextTab : INSCopying, INSCoding, INSSecureCoding
	//{
	//	// +(NSCharacterSet * _Nonnull)columnTerminatorsForLocale:(NSLocale * _Nullable)aLocale __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("columnTerminatorsForLocale:")]
	//	NSCharacterSet ColumnTerminatorsForLocale ([NullAllowed] NSLocale aLocale);

	//	// -(instancetype _Nonnull)initWithTextAlignment:(NSTextAlignment)alignment location:(CGFloat)loc options:(NSDictionary<NSTextTabOptionKey,id> * _Nonnull)options __attribute__((objc_designated_initializer));
	//	[Export ("initWithTextAlignment:location:options:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSTextAlignment alignment, nfloat loc, NSDictionary<NSString, NSObject> options);

	//	// @property (readonly, nonatomic) NSTextAlignment alignment;
	//	[Export ("alignment")]
	//	NSTextAlignment Alignment { get; }

	//	// @property (readonly, nonatomic) CGFloat location;
	//	[Export ("location")]
	//	nfloat Location { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSTextTabOptionKey,id> * _Nonnull options;
	//	[Export ("options")]
	//	NSDictionary<NSString, NSObject> Options { get; }
	//}

	//// @interface NSParagraphStyle : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSParagraphStyle : INSCopying, INSMutableCopying, INSSecureCoding
	//{
	//	// @property (readonly, copy, nonatomic, class) NSParagraphStyle * _Nonnull defaultParagraphStyle;
	//	[Static]
	//	[Export ("defaultParagraphStyle", ArgumentSemantic.Copy)]
	//	NSParagraphStyle DefaultParagraphStyle { get; }

	//	// +(NSWritingDirection)defaultWritingDirectionForLanguage:(NSString * _Nullable)languageName;
	//	[Static]
	//	[Export ("defaultWritingDirectionForLanguage:")]
	//	NSWritingDirection DefaultWritingDirectionForLanguage ([NullAllowed] string languageName);

	//	// @property (readonly, nonatomic) CGFloat lineSpacing;
	//	[Export ("lineSpacing")]
	//	nfloat LineSpacing { get; }

	//	// @property (readonly, nonatomic) CGFloat paragraphSpacing;
	//	[Export ("paragraphSpacing")]
	//	nfloat ParagraphSpacing { get; }

	//	// @property (readonly, nonatomic) NSTextAlignment alignment;
	//	[Export ("alignment")]
	//	NSTextAlignment Alignment { get; }

	//	// @property (readonly, nonatomic) CGFloat headIndent;
	//	[Export ("headIndent")]
	//	nfloat HeadIndent { get; }

	//	// @property (readonly, nonatomic) CGFloat tailIndent;
	//	[Export ("tailIndent")]
	//	nfloat TailIndent { get; }

	//	// @property (readonly, nonatomic) CGFloat firstLineHeadIndent;
	//	[Export ("firstLineHeadIndent")]
	//	nfloat FirstLineHeadIndent { get; }

	//	// @property (readonly, nonatomic) CGFloat minimumLineHeight;
	//	[Export ("minimumLineHeight")]
	//	nfloat MinimumLineHeight { get; }

	//	// @property (readonly, nonatomic) CGFloat maximumLineHeight;
	//	[Export ("maximumLineHeight")]
	//	nfloat MaximumLineHeight { get; }

	//	// @property (readonly, nonatomic) NSLineBreakMode lineBreakMode;
	//	[Export ("lineBreakMode")]
	//	NSLineBreakMode LineBreakMode { get; }

	//	// @property (readonly, nonatomic) NSWritingDirection baseWritingDirection;
	//	[Export ("baseWritingDirection")]
	//	NSWritingDirection BaseWritingDirection { get; }

	//	// @property (readonly, nonatomic) CGFloat lineHeightMultiple;
	//	[Export ("lineHeightMultiple")]
	//	nfloat LineHeightMultiple { get; }

	//	// @property (readonly, nonatomic) CGFloat paragraphSpacingBefore;
	//	[Export ("paragraphSpacingBefore")]
	//	nfloat ParagraphSpacingBefore { get; }

	//	// @property (readonly, nonatomic) float hyphenationFactor;
	//	[Export ("hyphenationFactor")]
	//	float HyphenationFactor { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSTextTab *> * _Nonnull tabStops __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("tabStops", ArgumentSemantic.Copy)]
	//	NSTextTab[] TabStops { get; }

	//	// @property (readonly, nonatomic) CGFloat defaultTabInterval __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("defaultTabInterval")]
	//	nfloat DefaultTabInterval { get; }

	//	// @property (readonly, nonatomic) BOOL allowsDefaultTighteningForTruncation __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("allowsDefaultTighteningForTruncation")]
	//	bool AllowsDefaultTighteningForTruncation { get; }
	//}

	//// @interface NSMutableParagraphStyle : NSParagraphStyle
	//[iOS (6,0)]
	//[BaseType (typeof(NSParagraphStyle))]
	//interface NSMutableParagraphStyle
	//{
	//	// @property (nonatomic) CGFloat lineSpacing;
	//	[Export ("lineSpacing")]
	//	nfloat LineSpacing { get; set; }

	//	// @property (nonatomic) CGFloat paragraphSpacing;
	//	[Export ("paragraphSpacing")]
	//	nfloat ParagraphSpacing { get; set; }

	//	// @property (nonatomic) NSTextAlignment alignment;
	//	[Export ("alignment", ArgumentSemantic.Assign)]
	//	NSTextAlignment Alignment { get; set; }

	//	// @property (nonatomic) CGFloat firstLineHeadIndent;
	//	[Export ("firstLineHeadIndent")]
	//	nfloat FirstLineHeadIndent { get; set; }

	//	// @property (nonatomic) CGFloat headIndent;
	//	[Export ("headIndent")]
	//	nfloat HeadIndent { get; set; }

	//	// @property (nonatomic) CGFloat tailIndent;
	//	[Export ("tailIndent")]
	//	nfloat TailIndent { get; set; }

	//	// @property (nonatomic) NSLineBreakMode lineBreakMode;
	//	[Export ("lineBreakMode", ArgumentSemantic.Assign)]
	//	NSLineBreakMode LineBreakMode { get; set; }

	//	// @property (nonatomic) CGFloat minimumLineHeight;
	//	[Export ("minimumLineHeight")]
	//	nfloat MinimumLineHeight { get; set; }

	//	// @property (nonatomic) CGFloat maximumLineHeight;
	//	[Export ("maximumLineHeight")]
	//	nfloat MaximumLineHeight { get; set; }

	//	// @property (nonatomic) NSWritingDirection baseWritingDirection;
	//	[Export ("baseWritingDirection", ArgumentSemantic.Assign)]
	//	NSWritingDirection BaseWritingDirection { get; set; }

	//	// @property (nonatomic) CGFloat lineHeightMultiple;
	//	[Export ("lineHeightMultiple")]
	//	nfloat LineHeightMultiple { get; set; }

	//	// @property (nonatomic) CGFloat paragraphSpacingBefore;
	//	[Export ("paragraphSpacingBefore")]
	//	nfloat ParagraphSpacingBefore { get; set; }

	//	// @property (nonatomic) float hyphenationFactor;
	//	[Export ("hyphenationFactor")]
	//	float HyphenationFactor { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSTextTab *> * _Null_unspecified tabStops __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("tabStops", ArgumentSemantic.Copy)]
	//	NSTextTab[] TabStops { get; set; }

	//	// @property (nonatomic) CGFloat defaultTabInterval __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("defaultTabInterval")]
	//	nfloat DefaultTabInterval { get; set; }

	//	// @property (nonatomic) BOOL allowsDefaultTighteningForTruncation __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("allowsDefaultTighteningForTruncation")]
	//	bool AllowsDefaultTighteningForTruncation { get; set; }

	//	// -(void)addTabStop:(NSTextTab * _Nonnull)anObject __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("addTabStop:")]
	//	void AddTabStop (NSTextTab anObject);

	//	// -(void)removeTabStop:(NSTextTab * _Nonnull)anObject __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("removeTabStop:")]
	//	void RemoveTabStop (NSTextTab anObject);

	//	// -(void)setParagraphStyle:(NSParagraphStyle * _Nonnull)obj __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("setParagraphStyle:")]
	//	void SetParagraphStyle (NSParagraphStyle obj);
	//}

	//// @interface UIStringDrawing (NSString)
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_UIStringDrawing
	//{
	//	// -(CGSize)sizeWithFont:(UIFont *)font __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -sizeWithAttributes:")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -sizeWithAttributes:")]
	//	[NoTV]
	//	[Export ("sizeWithFont:")]
	//	CGSize SizeWithFont (UIFont font);

	//	// -(CGSize)sizeWithFont:(UIFont *)font forWidth:(CGFloat)width lineBreakMode:(NSLineBreakMode)lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
	//	[NoTV]
	//	[Export ("sizeWithFont:forWidth:lineBreakMode:")]
	//	CGSize SizeWithFont (UIFont font, nfloat width, NSLineBreakMode lineBreakMode);

	//	// -(CGSize)drawAtPoint:(CGPoint)point withFont:(UIFont *)font __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -drawAtPoint:withAttributes:")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -drawAtPoint:withAttributes:")]
	//	[NoTV]
	//	[Export ("drawAtPoint:withFont:")]
	//	CGSize DrawAtPoint (CGPoint point, UIFont font);

	//	// -(CGSize)drawAtPoint:(CGPoint)point forWidth:(CGFloat)width withFont:(UIFont *)font lineBreakMode:(NSLineBreakMode)lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
	//	[NoTV]
	//	[Export ("drawAtPoint:forWidth:withFont:lineBreakMode:")]
	//	CGSize DrawAtPoint (CGPoint point, nfloat width, UIFont font, NSLineBreakMode lineBreakMode);

	//	// -(CGSize)sizeWithFont:(UIFont *)font constrainedToSize:(CGSize)size __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
	//	[NoTV]
	//	[Export ("sizeWithFont:constrainedToSize:")]
	//	CGSize SizeWithFont (UIFont font, CGSize size);

	//	// -(CGSize)sizeWithFont:(UIFont *)font constrainedToSize:(CGSize)size lineBreakMode:(NSLineBreakMode)lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
	//	[NoTV]
	//	[Export ("sizeWithFont:constrainedToSize:lineBreakMode:")]
	//	CGSize SizeWithFont (UIFont font, CGSize size, NSLineBreakMode lineBreakMode);

	//	// -(CGSize)drawInRect:(CGRect)rect withFont:(UIFont *)font __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
	//	[NoTV]
	//	[Export ("drawInRect:withFont:")]
	//	CGSize DrawInRect (CGRect rect, UIFont font);

	//	// -(CGSize)drawInRect:(CGRect)rect withFont:(UIFont *)font lineBreakMode:(NSLineBreakMode)lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
	//	[NoTV]
	//	[Export ("drawInRect:withFont:lineBreakMode:")]
	//	CGSize DrawInRect (CGRect rect, UIFont font, NSLineBreakMode lineBreakMode);

	//	// -(CGSize)drawInRect:(CGRect)rect withFont:(UIFont *)font lineBreakMode:(NSLineBreakMode)lineBreakMode alignment:(NSTextAlignment)alignment __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
	//	[NoTV]
	//	[Export ("drawInRect:withFont:lineBreakMode:alignment:")]
	//	CGSize DrawInRect (CGRect rect, UIFont font, NSLineBreakMode lineBreakMode, NSTextAlignment alignment);

	//	// -(CGSize)sizeWithFont:(UIFont *)font minFontSize:(CGFloat)minFontSize actualFontSize:(CGFloat *)actualFontSize forWidth:(CGFloat)width lineBreakMode:(NSLineBreakMode)lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoTV]
	//	[Export ("sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:")]
	//	unsafe CGSize SizeWithFont (UIFont font, nfloat minFontSize, nfloat* actualFontSize, nfloat width, NSLineBreakMode lineBreakMode);

	//	// -(CGSize)drawAtPoint:(CGPoint)point forWidth:(CGFloat)width withFont:(UIFont *)font fontSize:(CGFloat)fontSize lineBreakMode:(NSLineBreakMode)lineBreakMode baselineAdjustment:(UIBaselineAdjustment)baselineAdjustment __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
	//	[NoTV]
	//	[Export ("drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:")]
	//	CGSize DrawAtPoint (CGPoint point, nfloat width, UIFont font, nfloat fontSize, NSLineBreakMode lineBreakMode, UIBaselineAdjustment baselineAdjustment);

	//	// -(CGSize)drawAtPoint:(CGPoint)point forWidth:(CGFloat)width withFont:(UIFont *)font minFontSize:(CGFloat)minFontSize actualFontSize:(CGFloat *)actualFontSize lineBreakMode:(NSLineBreakMode)lineBreakMode baselineAdjustment:(UIBaselineAdjustment)baselineAdjustment __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
	//	[NoTV]
	//	[Export ("drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:")]
	//	unsafe CGSize DrawAtPoint (CGPoint point, nfloat width, UIFont font, nfloat minFontSize, nfloat* actualFontSize, NSLineBreakMode lineBreakMode, UIBaselineAdjustment baselineAdjustment);
	//}

	//// @protocol UISpringLoadedInteractionSupporting <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UISpringLoadedInteractionSupporting
	//{
	//	// @required @property (getter = isSpringLoaded, assign, nonatomic) BOOL springLoaded __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Abstract]
	//	[Export ("springLoaded")]
	//	bool SpringLoaded { [Bind ("isSpringLoaded")] get; set; }
	//}

	//// @interface UIButton : UIControl <NSCoding>
	//[iOS (2,0)]
	//[BaseType (typeof(UIControl))]
	//interface UIButton : INSCoding
	//{
	//	// +(instancetype _Nonnull)buttonWithType:(UIButtonType)buttonType;
	//	[Static]
	//	[Export ("buttonWithType:")]
	//	UIButton ButtonWithType (UIButtonType buttonType);

	//	// @property (nonatomic) UIEdgeInsets contentEdgeInsets __attribute__((annotate("ui_appearance_selector")));
	//	[Export ("contentEdgeInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets ContentEdgeInsets { get; set; }

	//	// @property (nonatomic) UIEdgeInsets titleEdgeInsets;
	//	[Export ("titleEdgeInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets TitleEdgeInsets { get; set; }

	//	// @property (nonatomic) BOOL reversesTitleShadowWhenHighlighted;
	//	[Export ("reversesTitleShadowWhenHighlighted")]
	//	bool ReversesTitleShadowWhenHighlighted { get; set; }

	//	// @property (nonatomic) UIEdgeInsets imageEdgeInsets;
	//	[Export ("imageEdgeInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets ImageEdgeInsets { get; set; }

	//	// @property (nonatomic) BOOL adjustsImageWhenHighlighted;
	//	[Export ("adjustsImageWhenHighlighted")]
	//	bool AdjustsImageWhenHighlighted { get; set; }

	//	// @property (nonatomic) BOOL adjustsImageWhenDisabled;
	//	[Export ("adjustsImageWhenDisabled")]
	//	bool AdjustsImageWhenDisabled { get; set; }

	//	// @property (nonatomic) BOOL showsTouchWhenHighlighted __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("showsTouchWhenHighlighted")]
	//	bool ShowsTouchWhenHighlighted { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// @property (readonly, nonatomic) UIButtonType buttonType;
	//	[Export ("buttonType")]
	//	UIButtonType ButtonType { get; }

	//	// -(void)setTitle:(NSString * _Nullable)title forState:(UIControlState)state;
	//	[Export ("setTitle:forState:")]
	//	void SetTitle ([NullAllowed] string title, UIControlState state);

	//	// -(void)setTitleColor:(UIColor * _Nullable)color forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
	//	[Export ("setTitleColor:forState:")]
	//	void SetTitleColor ([NullAllowed] UIColor color, UIControlState state);

	//	// -(void)setTitleShadowColor:(UIColor * _Nullable)color forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
	//	[Export ("setTitleShadowColor:forState:")]
	//	void SetTitleShadowColor ([NullAllowed] UIColor color, UIControlState state);

	//	// -(void)setImage:(UIImage * _Nullable)image forState:(UIControlState)state;
	//	[Export ("setImage:forState:")]
	//	void SetImage ([NullAllowed] UIImage image, UIControlState state);

	//	// -(void)setBackgroundImage:(UIImage * _Nullable)image forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
	//	[Export ("setBackgroundImage:forState:")]
	//	void SetBackgroundImage ([NullAllowed] UIImage image, UIControlState state);

	//	// -(void)setAttributedTitle:(NSAttributedString * _Nullable)title forState:(UIControlState)state __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("setAttributedTitle:forState:")]
	//	void SetAttributedTitle ([NullAllowed] NSAttributedString title, UIControlState state);

	//	// -(NSString * _Nullable)titleForState:(UIControlState)state;
	//	[Export ("titleForState:")]
	//	[return: NullAllowed]
	//	string TitleForState (UIControlState state);

	//	// -(UIColor * _Nullable)titleColorForState:(UIControlState)state;
	//	[Export ("titleColorForState:")]
	//	[return: NullAllowed]
	//	UIColor TitleColorForState (UIControlState state);

	//	// -(UIColor * _Nullable)titleShadowColorForState:(UIControlState)state;
	//	[Export ("titleShadowColorForState:")]
	//	[return: NullAllowed]
	//	UIColor TitleShadowColorForState (UIControlState state);

	//	// -(UIImage * _Nullable)imageForState:(UIControlState)state;
	//	[Export ("imageForState:")]
	//	[return: NullAllowed]
	//	UIImage ImageForState (UIControlState state);

	//	// -(UIImage * _Nullable)backgroundImageForState:(UIControlState)state;
	//	[Export ("backgroundImageForState:")]
	//	[return: NullAllowed]
	//	UIImage BackgroundImageForState (UIControlState state);

	//	// -(NSAttributedString * _Nullable)attributedTitleForState:(UIControlState)state __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("attributedTitleForState:")]
	//	[return: NullAllowed]
	//	NSAttributedString AttributedTitleForState (UIControlState state);

	//	// @property (readonly, nonatomic, strong) NSString * _Nullable currentTitle;
	//	[NullAllowed, Export ("currentTitle", ArgumentSemantic.Strong)]
	//	string CurrentTitle { get; }

	//	// @property (readonly, nonatomic, strong) UIColor * _Nonnull currentTitleColor;
	//	[Export ("currentTitleColor", ArgumentSemantic.Strong)]
	//	UIColor CurrentTitleColor { get; }

	//	// @property (readonly, nonatomic, strong) UIColor * _Nullable currentTitleShadowColor;
	//	[NullAllowed, Export ("currentTitleShadowColor", ArgumentSemantic.Strong)]
	//	UIColor CurrentTitleShadowColor { get; }

	//	// @property (readonly, nonatomic, strong) UIImage * _Nullable currentImage;
	//	[NullAllowed, Export ("currentImage", ArgumentSemantic.Strong)]
	//	UIImage CurrentImage { get; }

	//	// @property (readonly, nonatomic, strong) UIImage * _Nullable currentBackgroundImage;
	//	[NullAllowed, Export ("currentBackgroundImage", ArgumentSemantic.Strong)]
	//	UIImage CurrentBackgroundImage { get; }

	//	// @property (readonly, nonatomic, strong) NSAttributedString * _Nullable currentAttributedTitle __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("currentAttributedTitle", ArgumentSemantic.Strong)]
	//	NSAttributedString CurrentAttributedTitle { get; }

	//	// @property (readonly, nonatomic, strong) UILabel * _Nullable titleLabel __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[NullAllowed, Export ("titleLabel", ArgumentSemantic.Strong)]
	//	UILabel TitleLabel { get; }

	//	// @property (readonly, nonatomic, strong) UIImageView * _Nullable imageView __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[NullAllowed, Export ("imageView", ArgumentSemantic.Strong)]
	//	UIImageView ImageView { get; }

	//	// -(CGRect)backgroundRectForBounds:(CGRect)bounds;
	//	[Export ("backgroundRectForBounds:")]
	//	CGRect BackgroundRectForBounds (CGRect bounds);

	//	// -(CGRect)contentRectForBounds:(CGRect)bounds;
	//	[Export ("contentRectForBounds:")]
	//	CGRect ContentRectForBounds (CGRect bounds);

	//	// -(CGRect)titleRectForContentRect:(CGRect)contentRect;
	//	[Export ("titleRectForContentRect:")]
	//	CGRect TitleRectForContentRect (CGRect contentRect);

	//	// -(CGRect)imageRectForContentRect:(CGRect)contentRect;
	//	[Export ("imageRectForContentRect:")]
	//	CGRect ImageRectForContentRect (CGRect contentRect);
	//}

	//// @interface UIButtonDeprecated (UIButton)
	//[Category]
	//[BaseType (typeof(UIButton))]
	//interface UIButton_UIButtonDeprecated
	//{
	//	// @property (nonatomic, strong) UIFont * _Nonnull font __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[Export ("font", ArgumentSemantic.Strong)]
	//	UIFont Font { get; set; }

	//	// @property (nonatomic) NSLineBreakMode lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[Export ("lineBreakMode", ArgumentSemantic.Assign)]
	//	NSLineBreakMode LineBreakMode { get; set; }

	//	// @property (nonatomic) CGSize titleShadowOffset __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[Export ("titleShadowOffset", ArgumentSemantic.Assign)]
	//	CGSize TitleShadowOffset { get; set; }
	//}

	//// @interface SpringLoading (UIButton) <UISpringLoadedInteractionSupporting>
	//[Category]
	//[BaseType (typeof(UIButton))]
	//interface UIButton_SpringLoading : IUISpringLoadedInteractionSupporting
	//{
	//}

	//// @protocol NSTextAttachmentContainer <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSTextAttachmentContainer
	//{
	//	// @required -(UIImage * _Nullable)imageForBounds:(CGRect)imageBounds textContainer:(NSTextContainer * _Nullable)textContainer characterIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Abstract]
	//	[Export ("imageForBounds:textContainer:characterIndex:")]
	//	[return: NullAllowed]
	//	UIImage ImageForBounds (CGRect imageBounds, [NullAllowed] NSTextContainer textContainer, nuint charIndex);

	//	// @required -(CGRect)attachmentBoundsForTextContainer:(NSTextContainer * _Nullable)textContainer proposedLineFragment:(CGRect)lineFrag glyphPosition:(CGPoint)position characterIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Abstract]
	//	[Export ("attachmentBoundsForTextContainer:proposedLineFragment:glyphPosition:characterIndex:")]
	//	CGRect AttachmentBoundsForTextContainer ([NullAllowed] NSTextContainer textContainer, CGRect lineFrag, CGPoint position, nuint charIndex);
	//}

	//// @interface NSTextAttachment : NSObject <NSTextAttachmentContainer, NSCoding>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSTextAttachment : INSTextAttachmentContainer, INSCoding
	//{
	//	// -(instancetype _Nonnull)initWithData:(NSData * _Nullable)contentData ofType:(NSString * _Nullable)uti __attribute__((availability(ios, introduced=7.0))) __attribute__((objc_designated_initializer));
	//	[iOS (7,0)]
	//	[Export ("initWithData:ofType:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSData contentData, [NullAllowed] string uti);

	//	// @property (copy, nonatomic) NSData * _Nullable contents __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("contents", ArgumentSemantic.Copy)]
	//	NSData Contents { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable fileType __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("fileType")]
	//	string FileType { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable image __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
	//	UIImage Image { get; set; }

	//	// @property (nonatomic) CGRect bounds __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("bounds", ArgumentSemantic.Assign)]
	//	CGRect Bounds { get; set; }

	//	// @property (nonatomic, strong) NSFileWrapper * _Nullable fileWrapper;
	//	[NullAllowed, Export ("fileWrapper", ArgumentSemantic.Strong)]
	//	NSFileWrapper FileWrapper { get; set; }
	//}

	//// @interface NSAttributedStringAttachmentConveniences (NSAttributedString)
	//[Category]
	//[BaseType (typeof(NSAttributedString))]
	//interface NSAttributedString_NSAttributedStringAttachmentConveniences
	//{
	//	// +(NSAttributedString * _Nonnull)attributedStringWithAttachment:(NSTextAttachment * _Nonnull)attachment __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("attributedStringWithAttachment:")]
	//	NSAttributedString AttributedStringWithAttachment (NSTextAttachment attachment);
	//}

	//// @protocol UIAccessibilityContentSizeCategoryImageAdjusting <NSObject>
	//[TV (11,0), iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIAccessibilityContentSizeCategoryImageAdjusting
	//{
	//	// @required @property (nonatomic) BOOL adjustsImageSizeForAccessibilityContentSizeCategory;
	//	[Abstract]
	//	[Export ("adjustsImageSizeForAccessibilityContentSizeCategory")]
	//	bool AdjustsImageSizeForAccessibilityContentSizeCategory { get; set; }
	//}

	//// @interface UIAccessibilityContentSizeCategoryImageAdjusting (UIImageView) <UIAccessibilityContentSizeCategoryImageAdjusting>
	//[Category]
	//[BaseType (typeof(UIImageView))]
	//interface UIImageView_UIAccessibilityContentSizeCategoryImageAdjusting : IUIAccessibilityContentSizeCategoryImageAdjusting
	//{
	//}

	//// @interface UIAccessibilityContentSizeCategoryImageAdjusting (UIButton) <UIAccessibilityContentSizeCategoryImageAdjusting>
	//[Category]
	//[BaseType (typeof(UIButton))]
	//interface UIButton_UIAccessibilityContentSizeCategoryImageAdjusting : IUIAccessibilityContentSizeCategoryImageAdjusting
	//{
	//}

	//// @interface UIAccessibilityContentSizeCategoryImageAdjusting (NSTextAttachment) <UIAccessibilityContentSizeCategoryImageAdjusting>
	//[Category]
	//[BaseType (typeof(NSTextAttachment))]
	//interface NSTextAttachment_UIAccessibilityContentSizeCategoryImageAdjusting : IUIAccessibilityContentSizeCategoryImageAdjusting
	//{
	//}

	//// @interface UIActivityIndicatorView : UIView <NSCoding>
	//[iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UIActivityIndicatorView : INSCoding
	//{
	//	// -(instancetype _Nonnull)initWithActivityIndicatorStyle:(UIActivityIndicatorViewStyle)style __attribute__((objc_designated_initializer));
	//	[Export ("initWithActivityIndicatorStyle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIActivityIndicatorViewStyle style);

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);

	//	// @property (nonatomic) UIActivityIndicatorViewStyle activityIndicatorViewStyle;
	//	[Export ("activityIndicatorViewStyle", ArgumentSemantic.Assign)]
	//	UIActivityIndicatorViewStyle ActivityIndicatorViewStyle { get; set; }

	//	// @property (nonatomic) BOOL hidesWhenStopped;
	//	[Export ("hidesWhenStopped")]
	//	bool HidesWhenStopped { get; set; }

	//	// @property (readwrite, nonatomic, strong) UIColor * _Null_unspecified color __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("color", ArgumentSemantic.Strong)]
	//	UIColor Color { get; set; }

	//	// -(void)startAnimating;
	//	[Export ("startAnimating")]
	//	void StartAnimating ();

	//	// -(void)stopAnimating;
	//	[Export ("stopAnimating")]
	//	void StopAnimating ();

	//	// @property (readonly, getter = isAnimating, nonatomic) BOOL animating;
	//	[Export ("animating")]
	//	bool Animating { [Bind ("isAnimating")] get; }
	//}

	//// @interface UIActivity : NSObject
	//[NoTV, iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIActivity
	//{
	//	// @property (readonly, nonatomic, class) UIActivityCategory activityCategory __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Static]
	//	[Export ("activityCategory")]
	//	UIActivityCategory ActivityCategory { get; }

	//	// @property (readonly, nonatomic) UIActivityType _Nullable activityType;
	//	[NullAllowed, Export ("activityType")]
	//	string ActivityType { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable activityTitle;
	//	[NullAllowed, Export ("activityTitle")]
	//	string ActivityTitle { get; }

	//	// @property (readonly, nonatomic) UIImage * _Nullable activityImage;
	//	[NullAllowed, Export ("activityImage")]
	//	UIImage ActivityImage { get; }

	//	// -(BOOL)canPerformWithActivityItems:(NSArray * _Nonnull)activityItems;
	//	[Export ("canPerformWithActivityItems:")]
	//	[Verify (StronglyTypedNSArray)]
	//	bool CanPerformWithActivityItems (NSObject[] activityItems);

	//	// -(void)prepareWithActivityItems:(NSArray * _Nonnull)activityItems;
	//	[Export ("prepareWithActivityItems:")]
	//	[Verify (StronglyTypedNSArray)]
	//	void PrepareWithActivityItems (NSObject[] activityItems);

	//	// @property (readonly, nonatomic) UIViewController * _Nullable activityViewController;
	//	[NullAllowed, Export ("activityViewController")]
	//	UIViewController ActivityViewController { get; }

	//	// -(void)performActivity;
	//	[Export ("performActivity")]
	//	void PerformActivity ();

	//	// -(void)activityDidFinish:(BOOL)completed;
	//	[Export ("activityDidFinish:")]
	//	void ActivityDidFinish (bool completed);
	//}

	//// @protocol UIActivityItemSource <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIActivityItemSource
	//{
	//	// @required -(id _Nonnull)activityViewControllerPlaceholderItem:(UIActivityViewController * _Nonnull)activityViewController;
	//	[Abstract]
	//	[Export ("activityViewControllerPlaceholderItem:")]
	//	NSObject ActivityViewControllerPlaceholderItem (UIActivityViewController activityViewController);

	//	// @required -(id _Nullable)activityViewController:(UIActivityViewController * _Nonnull)activityViewController itemForActivityType:(UIActivityType _Nullable)activityType;
	//	[Abstract]
	//	[Export ("activityViewController:itemForActivityType:")]
	//	[return: NullAllowed]
	//	NSObject ActivityViewController (UIActivityViewController activityViewController, [NullAllowed] string activityType);

	//	// @optional -(NSString * _Nonnull)activityViewController:(UIActivityViewController * _Nonnull)activityViewController subjectForActivityType:(UIActivityType _Nullable)activityType;
	//	[Export ("activityViewController:subjectForActivityType:")]
	//	string ActivityViewController (UIActivityViewController activityViewController, [NullAllowed] string activityType);

	//	// @optional -(NSString * _Nonnull)activityViewController:(UIActivityViewController * _Nonnull)activityViewController dataTypeIdentifierForActivityType:(UIActivityType _Nullable)activityType;
	//	[Export ("activityViewController:dataTypeIdentifierForActivityType:")]
	//	string ActivityViewController (UIActivityViewController activityViewController, [NullAllowed] string activityType);

	//	// @optional -(UIImage * _Nullable)activityViewController:(UIActivityViewController * _Nonnull)activityViewController thumbnailImageForActivityType:(UIActivityType _Nullable)activityType suggestedSize:(CGSize)size;
	//	[Export ("activityViewController:thumbnailImageForActivityType:suggestedSize:")]
	//	[return: NullAllowed]
	//	UIImage ActivityViewController (UIActivityViewController activityViewController, [NullAllowed] string activityType, CGSize size);
	//}

	//// @interface UIActivityItemProvider : NSOperation <UIActivityItemSource>
	//[NoTV, iOS (6,0)]
	//[BaseType (typeof(NSOperation))]
	//[DisableDefaultCtor]
	//interface UIActivityItemProvider : IUIActivityItemSource
	//{
	//	// -(instancetype _Nonnull)initWithPlaceholderItem:(id _Nonnull)placeholderItem __attribute__((objc_designated_initializer));
	//	[Export ("initWithPlaceholderItem:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSObject placeholderItem);

	//	// @property (readonly, nonatomic, strong) id _Nullable placeholderItem;
	//	[NullAllowed, Export ("placeholderItem", ArgumentSemantic.Strong)]
	//	NSObject PlaceholderItem { get; }

	//	// @property (readonly, copy, nonatomic) UIActivityType _Nullable activityType;
	//	[NullAllowed, Export ("activityType")]
	//	string ActivityType { get; }

	//	// @property (readonly, nonatomic) id _Nonnull item;
	//	[Export ("item")]
	//	NSObject Item { get; }
	//}

	//// @protocol UIInteraction <NSObject>
	//[Watch (5,0), NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIInteraction
	//{
	//	// @required @property (readonly, nonatomic, weak) __kindof UIView * _Nullable view;
	//	[Abstract]
	//	[Export ("view", ArgumentSemantic.Weak)]
	//	UIView View { get; }

	//	// @required -(void)willMoveToView:(UIView * _Nullable)view;
	//	[Abstract]
	//	[Export ("willMoveToView:")]
	//	void WillMoveToView ([NullAllowed] UIView view);

	//	// @required -(void)didMoveToView:(UIView * _Nullable)view;
	//	[Abstract]
	//	[Export ("didMoveToView:")]
	//	void DidMoveToView ([NullAllowed] UIView view);
	//}

	//// @interface Interactions (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_Interactions
	//{
	//	// -(void)addInteraction:(id<UIInteraction> _Nonnull)interaction __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[Watch (5,0), NoTV, iOS (11,0)]
	//	[Export ("addInteraction:")]
	//	void AddInteraction (UIInteraction interaction);

	//	// -(void)removeInteraction:(id<UIInteraction> _Nonnull)interaction __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[Watch (5,0), NoTV, iOS (11,0)]
	//	[Export ("removeInteraction:")]
	//	void RemoveInteraction (UIInteraction interaction);

	//	// @property (copy, nonatomic) NSArray<id<UIInteraction>> * _Nonnull interactions __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[Watch (5, 0), NoTV, iOS (11, 0)]
	//	[Export ("interactions", ArgumentSemantic.Copy)]
	//	UIInteraction[] Interactions { get; set; }
	//}

	//// @interface UIDropInteraction : NSObject <UIInteraction>
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIDropInteraction : IUIInteraction
	//{
	//	// -(instancetype _Nonnull)initWithDelegate:(id<UIDropInteractionDelegate> _Nonnull)delegate __attribute__((objc_designated_initializer));
	//	[Export ("initWithDelegate:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIDropInteractionDelegate @delegate);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIDropInteractionDelegate Delegate { get; }

	//	// @property (readonly, nonatomic, weak) id<UIDropInteractionDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; }

	//	// @property (assign, nonatomic) BOOL allowsSimultaneousDropSessions;
	//	[Export ("allowsSimultaneousDropSessions")]
	//	bool AllowsSimultaneousDropSessions { get; set; }
	//}

	//// @interface UIDropProposal : NSObject <NSCopying>
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIDropProposal : INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithDropOperation:(UIDropOperation)operation __attribute__((objc_designated_initializer));
	//	[Export ("initWithDropOperation:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIDropOperation operation);

	//	// @property (readonly, nonatomic) UIDropOperation operation;
	//	[Export ("operation")]
	//	UIDropOperation Operation { get; }

	//	// @property (getter = isPrecise, nonatomic) BOOL precise;
	//	[Export ("precise")]
	//	bool Precise { [Bind ("isPrecise")] get; set; }

	//	// @property (nonatomic) BOOL prefersFullSizePreview;
	//	[Export ("prefersFullSizePreview")]
	//	bool PrefersFullSizePreview { get; set; }
	//}

	//// @protocol UIDropInteractionDelegate <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIDropInteractionDelegate
	//{
	//	// @optional -(BOOL)dropInteraction:(UIDropInteraction * _Nonnull)interaction canHandleSession:(id<UIDropSession> _Nonnull)session;
	//	[Export ("dropInteraction:canHandleSession:")]
	//	bool DropInteraction (UIDropInteraction interaction, UIDropSession session);

	//	// @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidEnter:(id<UIDropSession> _Nonnull)session;
	//	[Export ("dropInteraction:sessionDidEnter:")]
	//	void DropInteraction (UIDropInteraction interaction, UIDropSession session);

	//	// @optional -(UIDropProposal * _Nonnull)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidUpdate:(id<UIDropSession> _Nonnull)session;
	//	[Export ("dropInteraction:sessionDidUpdate:")]
	//	UIDropProposal DropInteraction (UIDropInteraction interaction, UIDropSession session);

	//	// @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidExit:(id<UIDropSession> _Nonnull)session;
	//	[Export ("dropInteraction:sessionDidExit:")]
	//	void DropInteraction (UIDropInteraction interaction, UIDropSession session);

	//	// @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction performDrop:(id<UIDropSession> _Nonnull)session;
	//	[Export ("dropInteraction:performDrop:")]
	//	void DropInteraction (UIDropInteraction interaction, UIDropSession session);

	//	// @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction concludeDrop:(id<UIDropSession> _Nonnull)session;
	//	[Export ("dropInteraction:concludeDrop:")]
	//	void DropInteraction (UIDropInteraction interaction, UIDropSession session);

	//	// @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidEnd:(id<UIDropSession> _Nonnull)session;
	//	[Export ("dropInteraction:sessionDidEnd:")]
	//	void DropInteraction (UIDropInteraction interaction, UIDropSession session);

	//	// @optional -(UITargetedDragPreview * _Nullable)dropInteraction:(UIDropInteraction * _Nonnull)interaction previewForDroppingItem:(UIDragItem * _Nonnull)item withDefault:(UITargetedDragPreview * _Nonnull)defaultPreview;
	//	[Export ("dropInteraction:previewForDroppingItem:withDefault:")]
	//	[return: NullAllowed]
	//	UITargetedDragPreview DropInteraction (UIDropInteraction interaction, UIDragItem item, UITargetedDragPreview defaultPreview);

	//	// @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction item:(UIDragItem * _Nonnull)item willAnimateDropWithAnimator:(id<UIDragAnimating> _Nonnull)animator;
	//	[Export ("dropInteraction:item:willAnimateDropWithAnimator:")]
	//	void DropInteraction (UIDropInteraction interaction, UIDragItem item, UIDragAnimating animator);
	//}

	//// @protocol UIViewAnimating <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIViewAnimating
	//{
	//	// @required @property (readonly, nonatomic) UIViewAnimatingState state;
	//	[Abstract]
	//	[Export ("state")]
	//	UIViewAnimatingState State { get; }

	//	// @required @property (readonly, getter = isRunning, nonatomic) BOOL running;
	//	[Abstract]
	//	[Export ("running")]
	//	bool Running { [Bind ("isRunning")] get; }

	//	// @required @property (getter = isReversed, nonatomic) BOOL reversed;
	//	[Abstract]
	//	[Export ("reversed")]
	//	bool Reversed { [Bind ("isReversed")] get; set; }

	//	// @required @property (nonatomic) CGFloat fractionComplete;
	//	[Abstract]
	//	[Export ("fractionComplete")]
	//	nfloat FractionComplete { get; set; }

	//	// @required -(void)startAnimation;
	//	[Abstract]
	//	[Export ("startAnimation")]
	//	void StartAnimation ();

	//	// @required -(void)startAnimationAfterDelay:(NSTimeInterval)delay;
	//	[Abstract]
	//	[Export ("startAnimationAfterDelay:")]
	//	void StartAnimationAfterDelay (double delay);

	//	// @required -(void)pauseAnimation;
	//	[Abstract]
	//	[Export ("pauseAnimation")]
	//	void PauseAnimation ();

	//	// @required -(void)stopAnimation:(BOOL)withoutFinishing;
	//	[Abstract]
	//	[Export ("stopAnimation:")]
	//	void StopAnimation (bool withoutFinishing);

	//	// @required -(void)finishAnimationAtPosition:(UIViewAnimatingPosition)finalPosition;
	//	[Abstract]
	//	[Export ("finishAnimationAtPosition:")]
	//	void FinishAnimationAtPosition (UIViewAnimatingPosition finalPosition);
	//}

	//// @protocol UIViewImplicitlyAnimating <UIViewAnimating>
	//[Protocol, Model]
	//interface UIViewImplicitlyAnimating : IUIViewAnimating
	//{
	//	// @optional -(void)addAnimations:(void (^ _Nonnull)(void))animation delayFactor:(CGFloat)delayFactor;
	//	[Export ("addAnimations:delayFactor:")]
	//	void AddAnimations (Action animation, nfloat delayFactor);

	//	// @optional -(void)addAnimations:(void (^ _Nonnull)(void))animation;
	//	[Export ("addAnimations:")]
	//	void AddAnimations (Action animation);

	//	// @optional -(void)addCompletion:(void (^ _Nonnull)(UIViewAnimatingPosition))completion;
	//	[Export ("addCompletion:")]
	//	void AddCompletion (Action<UIViewAnimatingPosition> completion);

	//	// @optional -(void)continueAnimationWithTimingParameters:(id<UITimingCurveProvider> _Nullable)parameters durationFactor:(CGFloat)durationFactor;
	//	[Export ("continueAnimationWithTimingParameters:durationFactor:")]
	//	void ContinueAnimationWithTimingParameters ([NullAllowed] UITimingCurveProvider parameters, nfloat durationFactor);
	//}

	//// @protocol UIDragAnimating <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIDragAnimating
	//{
	//	// @required -(void)addAnimations:(void (^ _Nonnull)(void))animations;
	//	[Abstract]
	//	[Export ("addAnimations:")]
	//	void AddAnimations (Action animations);

	//	// @required -(void)addCompletion:(void (^ _Nonnull)(UIViewAnimatingPosition))completion;
	//	[Abstract]
	//	[Export ("addCompletion:")]
	//	void AddCompletion (Action<UIViewAnimatingPosition> completion);
	//}

	//// @interface UIDragInteraction : NSObject <UIInteraction>
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIDragInteraction : IUIInteraction
	//{
	//	// -(instancetype _Nonnull)initWithDelegate:(id<UIDragInteractionDelegate> _Nonnull)delegate __attribute__((objc_designated_initializer));
	//	[Export ("initWithDelegate:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIDragInteractionDelegate @delegate);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIDragInteractionDelegate Delegate { get; }

	//	// @property (readonly, nonatomic, weak) id<UIDragInteractionDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; }

	//	// @property (nonatomic) BOOL allowsSimultaneousRecognitionDuringLift;
	//	[Export ("allowsSimultaneousRecognitionDuringLift")]
	//	bool AllowsSimultaneousRecognitionDuringLift { get; set; }

	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (readonly, getter = isEnabledByDefault, nonatomic, class) BOOL enabledByDefault;
	//	[Static]
	//	[Export ("enabledByDefault")]
	//	bool EnabledByDefault { [Bind ("isEnabledByDefault")] get; }
	//}

	//// @protocol UIDragInteractionDelegate <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIDragInteractionDelegate
	//{
	//	// @required -(NSArray<UIDragItem *> * _Nonnull)dragInteraction:(UIDragInteraction * _Nonnull)interaction itemsForBeginningSession:(id<UIDragSession> _Nonnull)session;
	//	[Abstract]
	//	[Export ("dragInteraction:itemsForBeginningSession:")]
	//	UIDragItem[] DragInteraction (UIDragInteraction interaction, UIDragSession session);

	//	// @optional -(UITargetedDragPreview * _Nullable)dragInteraction:(UIDragInteraction * _Nonnull)interaction previewForLiftingItem:(UIDragItem * _Nonnull)item session:(id<UIDragSession> _Nonnull)session;
	//	[Export ("dragInteraction:previewForLiftingItem:session:")]
	//	[return: NullAllowed]
	//	UITargetedDragPreview DragInteraction (UIDragInteraction interaction, UIDragItem item, UIDragSession session);

	//	// @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction willAnimateLiftWithAnimator:(id<UIDragAnimating> _Nonnull)animator session:(id<UIDragSession> _Nonnull)session;
	//	[Export ("dragInteraction:willAnimateLiftWithAnimator:session:")]
	//	void DragInteraction (UIDragInteraction interaction, UIDragAnimating animator, UIDragSession session);

	//	// @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionWillBegin:(id<UIDragSession> _Nonnull)session;
	//	[Export ("dragInteraction:sessionWillBegin:")]
	//	void DragInteraction (UIDragInteraction interaction, UIDragSession session);

	//	// @optional -(BOOL)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionAllowsMoveOperation:(id<UIDragSession> _Nonnull)session;
	//	[Export ("dragInteraction:sessionAllowsMoveOperation:")]
	//	bool DragInteraction (UIDragInteraction interaction, UIDragSession session);

	//	// @optional -(BOOL)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionIsRestrictedToDraggingApplication:(id<UIDragSession> _Nonnull)session;
	//	[Export ("dragInteraction:sessionIsRestrictedToDraggingApplication:")]
	//	bool DragInteraction (UIDragInteraction interaction, UIDragSession session);

	//	// @optional -(BOOL)dragInteraction:(UIDragInteraction * _Nonnull)interaction prefersFullSizePreviewsForSession:(id<UIDragSession> _Nonnull)session;
	//	[Export ("dragInteraction:prefersFullSizePreviewsForSession:")]
	//	bool DragInteraction (UIDragInteraction interaction, UIDragSession session);

	//	// @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionDidMove:(id<UIDragSession> _Nonnull)session;
	//	[Export ("dragInteraction:sessionDidMove:")]
	//	void DragInteraction (UIDragInteraction interaction, UIDragSession session);

	//	// @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction session:(id<UIDragSession> _Nonnull)session willEndWithOperation:(UIDropOperation)operation;
	//	[Export ("dragInteraction:session:willEndWithOperation:")]
	//	void DragInteraction (UIDragInteraction interaction, UIDragSession session, UIDropOperation operation);

	//	// @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction session:(id<UIDragSession> _Nonnull)session didEndWithOperation:(UIDropOperation)operation;
	//	[Export ("dragInteraction:session:didEndWithOperation:")]
	//	void DragInteraction (UIDragInteraction interaction, UIDragSession session, UIDropOperation operation);

	//	// @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionDidTransferItems:(id<UIDragSession> _Nonnull)session;
	//	[Export ("dragInteraction:sessionDidTransferItems:")]
	//	void DragInteraction (UIDragInteraction interaction, UIDragSession session);

	//	// @optional -(NSArray<UIDragItem *> * _Nonnull)dragInteraction:(UIDragInteraction * _Nonnull)interaction itemsForAddingToSession:(id<UIDragSession> _Nonnull)session withTouchAtPoint:(CGPoint)point;
	//	[Export ("dragInteraction:itemsForAddingToSession:withTouchAtPoint:")]
	//	UIDragItem[] DragInteraction (UIDragInteraction interaction, UIDragSession session, CGPoint point);

	//	// @optional -(id<UIDragSession> _Nullable)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionForAddingItems:(NSArray<id<UIDragSession>> * _Nonnull)sessions withTouchAtPoint:(CGPoint)point;
	//	[Export ("dragInteraction:sessionForAddingItems:withTouchAtPoint:")]
	//	[return: NullAllowed]
	//	UIDragSession DragInteraction (UIDragInteraction interaction, UIDragSession[] sessions, CGPoint point);

	//	// @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction session:(id<UIDragSession> _Nonnull)session willAddItems:(NSArray<UIDragItem *> * _Nonnull)items forInteraction:(UIDragInteraction * _Nonnull)addingInteraction;
	//	[Export ("dragInteraction:session:willAddItems:forInteraction:")]
	//	void DragInteraction (UIDragInteraction interaction, UIDragSession session, UIDragItem[] items, UIDragInteraction addingInteraction);

	//	// @optional -(UITargetedDragPreview * _Nullable)dragInteraction:(UIDragInteraction * _Nonnull)interaction previewForCancellingItem:(UIDragItem * _Nonnull)item withDefault:(UITargetedDragPreview * _Nonnull)defaultPreview;
	//	[Export ("dragInteraction:previewForCancellingItem:withDefault:")]
	//	[return: NullAllowed]
	//	UITargetedDragPreview DragInteraction (UIDragInteraction interaction, UIDragItem item, UITargetedDragPreview defaultPreview);

	//	// @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction item:(UIDragItem * _Nonnull)item willAnimateCancelWithAnimator:(id<UIDragAnimating> _Nonnull)animator;
	//	[Export ("dragInteraction:item:willAnimateCancelWithAnimator:")]
	//	void DragInteraction (UIDragInteraction interaction, UIDragItem item, UIDragAnimating animator);
	//}

	//// @protocol UITextDraggable <UITextInput>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//interface UITextDraggable : IUITextInput
	//{
	//	[Wrap ("WeakTextDragDelegate"), Abstract]
	//	[NullAllowed]
	//	UITextDragDelegate TextDragDelegate { get; set; }

	//	// @required @property (nonatomic, weak) id<UITextDragDelegate> _Nullable textDragDelegate;
	//	[Abstract]
	//	[NullAllowed, Export ("textDragDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakTextDragDelegate { get; set; }

	//	// @required @property (readonly, nonatomic) UIDragInteraction * _Nullable textDragInteraction;
	//	[Abstract]
	//	[NullAllowed, Export ("textDragInteraction")]
	//	UIDragInteraction TextDragInteraction { get; }

	//	// @required @property (readonly, getter = isTextDragActive, nonatomic) BOOL textDragActive;
	//	[Abstract]
	//	[Export ("textDragActive")]
	//	bool TextDragActive { [Bind ("isTextDragActive")] get; }

	//	// @required @property (nonatomic) UITextDragOptions textDragOptions;
	//	[Abstract]
	//	[Export ("textDragOptions", ArgumentSemantic.Assign)]
	//	UITextDragOptions TextDragOptions { get; set; }
	//}

	//// @protocol UITextDragDelegate <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITextDragDelegate
	//{
	//	// @optional -(NSArray<UIDragItem *> * _Nonnull)textDraggableView:(UIView<UITextDraggable> * _Nonnull)textDraggableView itemsForDrag:(id<UITextDragRequest> _Nonnull)dragRequest;
	//	[Export ("textDraggableView:itemsForDrag:")]
	//	UIDragItem[] TextDraggableView (UITextDraggable textDraggableView, UITextDragRequest dragRequest);

	//	// @optional -(UITargetedDragPreview * _Nullable)textDraggableView:(UIView<UITextDraggable> * _Nonnull)textDraggableView dragPreviewForLiftingItem:(UIDragItem * _Nonnull)item session:(id<UIDragSession> _Nonnull)session;
	//	[Export ("textDraggableView:dragPreviewForLiftingItem:session:")]
	//	[return: NullAllowed]
	//	UITargetedDragPreview TextDraggableView (UITextDraggable textDraggableView, UIDragItem item, UIDragSession session);

	//	// @optional -(void)textDraggableView:(UIView<UITextDraggable> * _Nonnull)textDraggableView willAnimateLiftWithAnimator:(id<UIDragAnimating> _Nonnull)animator session:(id<UIDragSession> _Nonnull)session;
	//	[Export ("textDraggableView:willAnimateLiftWithAnimator:session:")]
	//	void TextDraggableView (UITextDraggable textDraggableView, UIDragAnimating animator, UIDragSession session);

	//	// @optional -(void)textDraggableView:(UIView<UITextDraggable> * _Nonnull)textDraggableView dragSessionWillBegin:(id<UIDragSession> _Nonnull)session;
	//	[Export ("textDraggableView:dragSessionWillBegin:")]
	//	void TextDraggableView (UITextDraggable textDraggableView, UIDragSession session);

	//	// @optional -(void)textDraggableView:(UIView<UITextDraggable> * _Nonnull)textDraggableView dragSessionDidEnd:(id<UIDragSession> _Nonnull)session withOperation:(UIDropOperation)operation;
	//	[Export ("textDraggableView:dragSessionDidEnd:withOperation:")]
	//	void TextDraggableView (UITextDraggable textDraggableView, UIDragSession session, UIDropOperation operation);
	//}

	//// @protocol UITextDragRequest <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITextDragRequest
	//{
	//	// @required @property (readonly, nonatomic) UITextRange * _Nonnull dragRange;
	//	[Abstract]
	//	[Export ("dragRange")]
	//	UITextRange DragRange { get; }

	//	// @required @property (readonly, nonatomic) NSArray<UIDragItem *> * _Nonnull suggestedItems;
	//	[Abstract]
	//	[Export ("suggestedItems")]
	//	UIDragItem[] SuggestedItems { get; }

	//	// @required @property (readonly, nonatomic) NSArray<UIDragItem *> * _Nonnull existingItems;
	//	[Abstract]
	//	[Export ("existingItems")]
	//	UIDragItem[] ExistingItems { get; }

	//	// @required @property (readonly, getter = isSelected, nonatomic) BOOL selected;
	//	[Abstract]
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; }

	//	// @required @property (readonly, nonatomic) id<UIDragSession> _Nonnull dragSession;
	//	[Abstract]
	//	[Export ("dragSession")]
	//	UIDragSession DragSession { get; }
	//}

	//// @interface UITextDropProposal : UIDropProposal <NSCopying>
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(UIDropProposal))]
	//interface UITextDropProposal : INSCopying
	//{
	//	// @property (nonatomic) UITextDropAction dropAction;
	//	[Export ("dropAction", ArgumentSemantic.Assign)]
	//	UITextDropAction DropAction { get; set; }

	//	// @property (nonatomic) UITextDropProgressMode dropProgressMode;
	//	[Export ("dropProgressMode", ArgumentSemantic.Assign)]
	//	UITextDropProgressMode DropProgressMode { get; set; }

	//	// @property (nonatomic) BOOL useFastSameViewOperations;
	//	[Export ("useFastSameViewOperations")]
	//	bool UseFastSameViewOperations { get; set; }

	//	// @property (nonatomic) UITextDropPerformer dropPerformer;
	//	[Export ("dropPerformer", ArgumentSemantic.Assign)]
	//	UITextDropPerformer DropPerformer { get; set; }
	//}

	//// @interface UIPasteConfiguration : NSObject <NSSecureCoding, NSCopying>
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIPasteConfiguration : INSSecureCoding, INSCopying
	//{
	//	// @property (copy, nonatomic) NSArray<NSString *> * _Nonnull acceptableTypeIdentifiers;
	//	[Export ("acceptableTypeIdentifiers", ArgumentSemantic.Copy)]
	//	string[] AcceptableTypeIdentifiers { get; set; }

	//	// -(instancetype _Nonnull)initWithAcceptableTypeIdentifiers:(NSArray<NSString *> * _Nonnull)acceptableTypeIdentifiers;
	//	[Export ("initWithAcceptableTypeIdentifiers:")]
	//	IntPtr Constructor (string[] acceptableTypeIdentifiers);

	//	// -(void)addAcceptableTypeIdentifiers:(NSArray<NSString *> * _Nonnull)acceptableTypeIdentifiers;
	//	[Export ("addAcceptableTypeIdentifiers:")]
	//	void AddAcceptableTypeIdentifiers (string[] acceptableTypeIdentifiers);

	//	// -(instancetype _Nonnull)initWithTypeIdentifiersForAcceptingClass:(Class<NSItemProviderReading> _Nonnull)aClass;
	//	[Export ("initWithTypeIdentifiersForAcceptingClass:")]
	//	IntPtr Constructor (NSItemProviderReading aClass);

	//	// -(void)addTypeIdentifiersForAcceptingClass:(Class<NSItemProviderReading> _Nonnull)aClass;
	//	[Export ("addTypeIdentifiersForAcceptingClass:")]
	//	void AddTypeIdentifiersForAcceptingClass (NSItemProviderReading aClass);
	//}

	//// @protocol UITextPasteDelegate <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITextPasteDelegate
	//{
	//	// @optional -(void)textPasteConfigurationSupporting:(id<UITextPasteConfigurationSupporting> _Nonnull)textPasteConfigurationSupporting transformPasteItem:(id<UITextPasteItem> _Nonnull)item;
	//	[Export ("textPasteConfigurationSupporting:transformPasteItem:")]
	//	void TextPasteConfigurationSupporting (UITextPasteConfigurationSupporting textPasteConfigurationSupporting, UITextPasteItem item);

	//	// @optional -(NSAttributedString * _Nonnull)textPasteConfigurationSupporting:(id<UITextPasteConfigurationSupporting> _Nonnull)textPasteConfigurationSupporting combineItemAttributedStrings:(NSArray<NSAttributedString *> * _Nonnull)itemStrings forRange:(UITextRange * _Nonnull)textRange;
	//	[Export ("textPasteConfigurationSupporting:combineItemAttributedStrings:forRange:")]
	//	NSAttributedString TextPasteConfigurationSupporting (UITextPasteConfigurationSupporting textPasteConfigurationSupporting, NSAttributedString[] itemStrings, UITextRange textRange);

	//	// @optional -(UITextRange * _Nonnull)textPasteConfigurationSupporting:(id<UITextPasteConfigurationSupporting> _Nonnull)textPasteConfigurationSupporting performPasteOfAttributedString:(NSAttributedString * _Nonnull)attributedString toRange:(UITextRange * _Nonnull)textRange;
	//	[Export ("textPasteConfigurationSupporting:performPasteOfAttributedString:toRange:")]
	//	UITextRange TextPasteConfigurationSupporting (UITextPasteConfigurationSupporting textPasteConfigurationSupporting, NSAttributedString attributedString, UITextRange textRange);

	//	// @optional -(BOOL)textPasteConfigurationSupporting:(id<UITextPasteConfigurationSupporting> _Nonnull)textPasteConfigurationSupporting shouldAnimatePasteOfAttributedString:(NSAttributedString * _Nonnull)attributedString toRange:(UITextRange * _Nonnull)textRange;
	//	[Export ("textPasteConfigurationSupporting:shouldAnimatePasteOfAttributedString:toRange:")]
	//	bool TextPasteConfigurationSupporting (UITextPasteConfigurationSupporting textPasteConfigurationSupporting, NSAttributedString attributedString, UITextRange textRange);
	//}

	//// @protocol UITextPasteItem <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITextPasteItem
	//{
	//	// @required @property (readonly, nonatomic) __kindof NSItemProvider * _Nonnull itemProvider;
	//	[Abstract]
	//	[Export ("itemProvider")]
	//	NSItemProvider ItemProvider { get; }

	//	// @required @property (readonly, nonatomic) id _Nullable localObject;
	//	[Abstract]
	//	[NullAllowed, Export ("localObject")]
	//	NSObject LocalObject { get; }

	//	// @required @property (readonly, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nonnull defaultAttributes;
	//	[Abstract]
	//	[Export ("defaultAttributes")]
	//	NSDictionary<NSString, NSObject> DefaultAttributes { get; }

	//	// @required -(void)setStringResult:(NSString * _Nonnull)string;
	//	[Abstract]
	//	[Export ("setStringResult:")]
	//	void SetStringResult (string @string);

	//	// @required -(void)setAttributedStringResult:(NSAttributedString * _Nonnull)string;
	//	[Abstract]
	//	[Export ("setAttributedStringResult:")]
	//	void SetAttributedStringResult (NSAttributedString @string);

	//	// @required -(void)setAttachmentResult:(NSTextAttachment * _Nonnull)textAttachment;
	//	[Abstract]
	//	[Export ("setAttachmentResult:")]
	//	void SetAttachmentResult (NSTextAttachment textAttachment);

	//	// @required -(void)setNoResult;
	//	[Abstract]
	//	[Export ("setNoResult")]
	//	void SetNoResult ();

	//	// @required -(void)setDefaultResult;
	//	[Abstract]
	//	[Export ("setDefaultResult")]
	//	void SetDefaultResult ();
	//}

	//// @protocol UITextPasteConfigurationSupporting <UIPasteConfigurationSupporting>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//interface UITextPasteConfigurationSupporting : IUIPasteConfigurationSupporting
	//{
	//	[Wrap ("WeakPasteDelegate"), Abstract]
	//	[NullAllowed]
	//	UITextPasteDelegate PasteDelegate { get; set; }

	//	// @required @property (nonatomic, weak) id<UITextPasteDelegate> _Nullable pasteDelegate;
	//	[Abstract]
	//	[NullAllowed, Export ("pasteDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakPasteDelegate { get; set; }
	//}

	//// @protocol UITextDroppable <UITextInput, UITextPasteConfigurationSupporting>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//interface UITextDroppable : IUITextInput, IUITextPasteConfigurationSupporting
	//{
	//	[Wrap ("WeakTextDropDelegate"), Abstract]
	//	[NullAllowed]
	//	UITextDropDelegate TextDropDelegate { get; set; }

	//	// @required @property (nonatomic, weak) id<UITextDropDelegate> _Nullable textDropDelegate;
	//	[Abstract]
	//	[NullAllowed, Export ("textDropDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakTextDropDelegate { get; set; }

	//	// @required @property (readonly, nonatomic) UIDropInteraction * _Nullable textDropInteraction;
	//	[Abstract]
	//	[NullAllowed, Export ("textDropInteraction")]
	//	UIDropInteraction TextDropInteraction { get; }

	//	// @required @property (readonly, getter = isTextDropActive, nonatomic) _Bool textDropActive;
	//	[Abstract]
	//	[Export ("textDropActive")]
	//	bool TextDropActive { [Bind ("isTextDropActive")] get; }
	//}

	//// @protocol UITextDropDelegate <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITextDropDelegate
	//{
	//	// @optional -(UITextDropEditability)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView willBecomeEditableForDrop:(id<UITextDropRequest> _Nonnull)drop;
	//	[Export ("textDroppableView:willBecomeEditableForDrop:")]
	//	UITextDropEditability TextDroppableView (UITextDroppable textDroppableView, UITextDropRequest drop);

	//	// @optional -(UITextDropProposal * _Nonnull)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView proposalForDrop:(id<UITextDropRequest> _Nonnull)drop;
	//	[Export ("textDroppableView:proposalForDrop:")]
	//	UITextDropProposal TextDroppableView (UITextDroppable textDroppableView, UITextDropRequest drop);

	//	// @optional -(void)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView willPerformDrop:(id<UITextDropRequest> _Nonnull)drop;
	//	[Export ("textDroppableView:willPerformDrop:")]
	//	void TextDroppableView (UITextDroppable textDroppableView, UITextDropRequest drop);

	//	// @optional -(UITargetedDragPreview * _Nullable)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView previewForDroppingAllItemsWithDefault:(UITargetedDragPreview * _Nonnull)defaultPreview;
	//	[Export ("textDroppableView:previewForDroppingAllItemsWithDefault:")]
	//	[return: NullAllowed]
	//	UITargetedDragPreview TextDroppableView (UITextDroppable textDroppableView, UITargetedDragPreview defaultPreview);

	//	// @optional -(void)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView dropSessionDidEnter:(id<UIDropSession> _Nonnull)session;
	//	[Export ("textDroppableView:dropSessionDidEnter:")]
	//	void TextDroppableView (UITextDroppable textDroppableView, UIDropSession session);

	//	// @optional -(void)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView dropSessionDidUpdate:(id<UIDropSession> _Nonnull)session;
	//	[Export ("textDroppableView:dropSessionDidUpdate:")]
	//	void TextDroppableView (UITextDroppable textDroppableView, UIDropSession session);

	//	// @optional -(void)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView dropSessionDidExit:(id<UIDropSession> _Nonnull)session;
	//	[Export ("textDroppableView:dropSessionDidExit:")]
	//	void TextDroppableView (UITextDroppable textDroppableView, UIDropSession session);

	//	// @optional -(void)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView dropSessionDidEnd:(id<UIDropSession> _Nonnull)session;
	//	[Export ("textDroppableView:dropSessionDidEnd:")]
	//	void TextDroppableView (UITextDroppable textDroppableView, UIDropSession session);
	//}

	//// @protocol UITextDropRequest <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITextDropRequest
	//{
	//	// @required @property (readonly, nonatomic) UITextPosition * _Nonnull dropPosition;
	//	[Abstract]
	//	[Export ("dropPosition")]
	//	UITextPosition DropPosition { get; }

	//	// @required @property (readonly, nonatomic) UITextDropProposal * _Nonnull suggestedProposal;
	//	[Abstract]
	//	[Export ("suggestedProposal")]
	//	UITextDropProposal SuggestedProposal { get; }

	//	// @required @property (readonly, getter = isSameView, nonatomic) BOOL sameView;
	//	[Abstract]
	//	[Export ("sameView")]
	//	bool SameView { [Bind ("isSameView")] get; }

	//	// @required @property (readonly, nonatomic) id<UIDropSession> _Nonnull dropSession;
	//	[Abstract]
	//	[Export ("dropSession")]
	//	UIDropSession DropSession { get; }
	//}

	//// @protocol UIContentSizeCategoryAdjusting <NSObject>
	//[iOS (10,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIContentSizeCategoryAdjusting
	//{
	//	// @required @property (nonatomic) BOOL adjustsFontForContentSizeCategory;
	//	[Abstract]
	//	[Export ("adjustsFontForContentSizeCategory")]
	//	bool AdjustsFontForContentSizeCategory { get; set; }
	//}

	//// @interface UITextField : UIControl <UITextInput, NSCoding, UIContentSizeCategoryAdjusting>
	//[iOS (2,0)]
	//[BaseType (typeof(UIControl))]
	//interface UITextField : IUITextInput, INSCoding, IUIContentSizeCategoryAdjusting
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable text;
	//	[NullAllowed, Export ("text")]
	//	string Text { get; set; }

	//	// @property (copy, nonatomic) NSAttributedString * _Nullable attributedText __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("attributedText", ArgumentSemantic.Copy)]
	//	NSAttributedString AttributedText { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable textColor;
	//	[NullAllowed, Export ("textColor", ArgumentSemantic.Strong)]
	//	UIColor TextColor { get; set; }

	//	// @property (nonatomic, strong) UIFont * _Nullable font;
	//	[NullAllowed, Export ("font", ArgumentSemantic.Strong)]
	//	UIFont Font { get; set; }

	//	// @property (nonatomic) NSTextAlignment textAlignment;
	//	[Export ("textAlignment", ArgumentSemantic.Assign)]
	//	NSTextAlignment TextAlignment { get; set; }

	//	// @property (nonatomic) UITextBorderStyle borderStyle;
	//	[Export ("borderStyle", ArgumentSemantic.Assign)]
	//	UITextBorderStyle BorderStyle { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nonnull defaultTextAttributes __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("defaultTextAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> DefaultTextAttributes { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable placeholder;
	//	[NullAllowed, Export ("placeholder")]
	//	string Placeholder { get; set; }

	//	// @property (copy, nonatomic) NSAttributedString * _Nullable attributedPlaceholder __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("attributedPlaceholder", ArgumentSemantic.Copy)]
	//	NSAttributedString AttributedPlaceholder { get; set; }

	//	// @property (nonatomic) BOOL clearsOnBeginEditing;
	//	[Export ("clearsOnBeginEditing")]
	//	bool ClearsOnBeginEditing { get; set; }

	//	// @property (nonatomic) BOOL adjustsFontSizeToFitWidth;
	//	[Export ("adjustsFontSizeToFitWidth")]
	//	bool AdjustsFontSizeToFitWidth { get; set; }

	//	// @property (nonatomic) CGFloat minimumFontSize;
	//	[Export ("minimumFontSize")]
	//	nfloat MinimumFontSize { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UITextFieldDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UITextFieldDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable background;
	//	[NullAllowed, Export ("background", ArgumentSemantic.Strong)]
	//	UIImage Background { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable disabledBackground;
	//	[NullAllowed, Export ("disabledBackground", ArgumentSemantic.Strong)]
	//	UIImage DisabledBackground { get; set; }

	//	// @property (readonly, getter = isEditing, nonatomic) BOOL editing;
	//	[Export ("editing")]
	//	bool Editing { [Bind ("isEditing")] get; }

	//	// @property (nonatomic) BOOL allowsEditingTextAttributes __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("allowsEditingTextAttributes")]
	//	bool AllowsEditingTextAttributes { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nullable typingAttributes __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("typingAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> TypingAttributes { get; set; }

	//	// @property (nonatomic) UITextFieldViewMode clearButtonMode;
	//	[Export ("clearButtonMode", ArgumentSemantic.Assign)]
	//	UITextFieldViewMode ClearButtonMode { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable leftView;
	//	[NullAllowed, Export ("leftView", ArgumentSemantic.Strong)]
	//	UIView LeftView { get; set; }

	//	// @property (nonatomic) UITextFieldViewMode leftViewMode;
	//	[Export ("leftViewMode", ArgumentSemantic.Assign)]
	//	UITextFieldViewMode LeftViewMode { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable rightView;
	//	[NullAllowed, Export ("rightView", ArgumentSemantic.Strong)]
	//	UIView RightView { get; set; }

	//	// @property (nonatomic) UITextFieldViewMode rightViewMode;
	//	[Export ("rightViewMode", ArgumentSemantic.Assign)]
	//	UITextFieldViewMode RightViewMode { get; set; }

	//	// -(CGRect)borderRectForBounds:(CGRect)bounds;
	//	[Export ("borderRectForBounds:")]
	//	CGRect BorderRectForBounds (CGRect bounds);

	//	// -(CGRect)textRectForBounds:(CGRect)bounds;
	//	[Export ("textRectForBounds:")]
	//	CGRect TextRectForBounds (CGRect bounds);

	//	// -(CGRect)placeholderRectForBounds:(CGRect)bounds;
	//	[Export ("placeholderRectForBounds:")]
	//	CGRect PlaceholderRectForBounds (CGRect bounds);

	//	// -(CGRect)editingRectForBounds:(CGRect)bounds;
	//	[Export ("editingRectForBounds:")]
	//	CGRect EditingRectForBounds (CGRect bounds);

	//	// -(CGRect)clearButtonRectForBounds:(CGRect)bounds;
	//	[Export ("clearButtonRectForBounds:")]
	//	CGRect ClearButtonRectForBounds (CGRect bounds);

	//	// -(CGRect)leftViewRectForBounds:(CGRect)bounds;
	//	[Export ("leftViewRectForBounds:")]
	//	CGRect LeftViewRectForBounds (CGRect bounds);

	//	// -(CGRect)rightViewRectForBounds:(CGRect)bounds;
	//	[Export ("rightViewRectForBounds:")]
	//	CGRect RightViewRectForBounds (CGRect bounds);

	//	// -(void)drawTextInRect:(CGRect)rect;
	//	[Export ("drawTextInRect:")]
	//	void DrawTextInRect (CGRect rect);

	//	// -(void)drawPlaceholderInRect:(CGRect)rect;
	//	[Export ("drawPlaceholderInRect:")]
	//	void DrawPlaceholderInRect (CGRect rect);

	//	// @property (readwrite, strong) UIView * _Nullable inputView;
	//	[NullAllowed, Export ("inputView", ArgumentSemantic.Strong)]
	//	UIView InputView { get; set; }

	//	// @property (readwrite, strong) UIView * _Nullable inputAccessoryView;
	//	[NullAllowed, Export ("inputAccessoryView", ArgumentSemantic.Strong)]
	//	UIView InputAccessoryView { get; set; }

	//	// @property (nonatomic) BOOL clearsOnInsertion __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("clearsOnInsertion")]
	//	bool ClearsOnInsertion { get; set; }
	//}

	//// @interface  (UITextField) <UITextDraggable, UITextDroppable, UITextPasteConfigurationSupporting>
	//[Category]
	//[BaseType (typeof(UITextField))]
	//interface UITextField_ : IUITextDraggable, IUITextDroppable, IUITextPasteConfigurationSupporting
	//{
	//}

	//// @interface UITextField (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UITextField
	//{
	//	// -(BOOL)endEditing:(BOOL)force;
	//	[Export ("endEditing:")]
	//	bool EndEditing (bool force);
	//}

	//// @protocol UITextFieldDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITextFieldDelegate
	//{
	//	// @optional -(BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField;
	//	[Export ("textFieldShouldBeginEditing:")]
	//	bool TextFieldShouldBeginEditing (UITextField textField);

	//	// @optional -(void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
	//	[Export ("textFieldDidBeginEditing:")]
	//	void TextFieldDidBeginEditing (UITextField textField);

	//	// @optional -(BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField;
	//	[Export ("textFieldShouldEndEditing:")]
	//	bool TextFieldShouldEndEditing (UITextField textField);

	//	// @optional -(void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
	//	[Export ("textFieldDidEndEditing:")]
	//	void TextFieldDidEndEditing (UITextField textField);

	//	// @optional -(void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("textFieldDidEndEditing:reason:")]
	//	void TextFieldDidEndEditing (UITextField textField, UITextFieldDidEndEditingReason reason);

	//	// @optional -(BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string;
	//	[Export ("textField:shouldChangeCharactersInRange:replacementString:")]
	//	bool TextField (UITextField textField, NSRange range, string @string);

	//	// @optional -(BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField;
	//	[Export ("textFieldShouldClear:")]
	//	bool TextFieldShouldClear (UITextField textField);

	//	// @optional -(BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField;
	//	[Export ("textFieldShouldReturn:")]
	//	bool TextFieldShouldReturn (UITextField textField);
	//}

	//// @interface UIActionSheet : UIView
	//[Introduced (PlatformName.iOS, 2, 0, message: "UIActionSheet is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleActionSheet instead")]
	//[Deprecated (PlatformName.iOS, 8, 3, message: "UIActionSheet is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleActionSheet instead")]
	//[NoTV]
	//[BaseType (typeof(UIView))]
	//interface UIActionSheet
	//{
	//	// -(instancetype _Nonnull)initWithTitle:(NSString * _Nullable)title delegate:(id<UIActionSheetDelegate> _Nullable)delegate cancelButtonTitle:(NSString * _Nullable)cancelButtonTitle destructiveButtonTitle:(NSString * _Nullable)destructiveButtonTitle otherButtonTitles:(NSString * _Nullable)otherButtonTitles, ... __attribute__((availability(ios_app_extension, unavailable))) __attribute__((sentinel(0, 1)));
	//	[Unavailable (PlatformName.iOSAppExtension)]
	//	[Internal]
	//	[Export ("initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:", IsVariadic = true)]
	//	IntPtr Constructor ([NullAllowed] string title, [NullAllowed] UIActionSheetDelegate @delegate, [NullAllowed] string cancelButtonTitle, [NullAllowed] string destructiveButtonTitle, [NullAllowed] string otherButtonTitles, IntPtr varArgs);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIActionSheetDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIActionSheetDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; set; }

	//	// @property (nonatomic) UIActionSheetStyle actionSheetStyle;
	//	[Export ("actionSheetStyle", ArgumentSemantic.Assign)]
	//	UIActionSheetStyle ActionSheetStyle { get; set; }

	//	// -(NSInteger)addButtonWithTitle:(NSString * _Nullable)title;
	//	[Export ("addButtonWithTitle:")]
	//	nint AddButtonWithTitle ([NullAllowed] string title);

	//	// -(NSString * _Nullable)buttonTitleAtIndex:(NSInteger)buttonIndex;
	//	[Export ("buttonTitleAtIndex:")]
	//	[return: NullAllowed]
	//	string ButtonTitleAtIndex (nint buttonIndex);

	//	// @property (readonly, nonatomic) NSInteger numberOfButtons;
	//	[Export ("numberOfButtons")]
	//	nint NumberOfButtons { get; }

	//	// @property (nonatomic) NSInteger cancelButtonIndex;
	//	[Export ("cancelButtonIndex")]
	//	nint CancelButtonIndex { get; set; }

	//	// @property (nonatomic) NSInteger destructiveButtonIndex;
	//	[Export ("destructiveButtonIndex")]
	//	nint DestructiveButtonIndex { get; set; }

	//	// @property (readonly, nonatomic) NSInteger firstOtherButtonIndex;
	//	[Export ("firstOtherButtonIndex")]
	//	nint FirstOtherButtonIndex { get; }

	//	// @property (readonly, getter = isVisible, nonatomic) BOOL visible;
	//	[Export ("visible")]
	//	bool Visible { [Bind ("isVisible")] get; }

	//	// -(void)showFromToolbar:(UIToolbar * _Nonnull)view;
	//	[Export ("showFromToolbar:")]
	//	void ShowFromToolbar (UIToolbar view);

	//	// -(void)showFromTabBar:(UITabBar * _Nonnull)view;
	//	[Export ("showFromTabBar:")]
	//	void ShowFromTabBar (UITabBar view);

	//	// -(void)showFromBarButtonItem:(UIBarButtonItem * _Nonnull)item animated:(BOOL)animated __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3,2)]
	//	[Export ("showFromBarButtonItem:animated:")]
	//	void ShowFromBarButtonItem (UIBarButtonItem item, bool animated);

	//	// -(void)showFromRect:(CGRect)rect inView:(UIView * _Nonnull)view animated:(BOOL)animated __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3,2)]
	//	[Export ("showFromRect:inView:animated:")]
	//	void ShowFromRect (CGRect rect, UIView view, bool animated);

	//	// -(void)showInView:(UIView * _Nonnull)view;
	//	[Export ("showInView:")]
	//	void ShowInView (UIView view);

	//	// -(void)dismissWithClickedButtonIndex:(NSInteger)buttonIndex animated:(BOOL)animated;
	//	[Export ("dismissWithClickedButtonIndex:animated:")]
	//	void DismissWithClickedButtonIndex (nint buttonIndex, bool animated);
	//}

	//// @protocol UIActionSheetDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIActionSheetDelegate
	//{
	//	// @optional -(void)actionSheet:(UIActionSheet * _Nonnull)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.3)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 3)]
	//	[NoTV]
	//	[Export ("actionSheet:clickedButtonAtIndex:")]
	//	void ActionSheet (UIActionSheet actionSheet, nint buttonIndex);

	//	// @optional -(void)actionSheetCancel:(UIActionSheet * _Nonnull)actionSheet __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.3)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 3)]
	//	[NoTV]
	//	[Export ("actionSheetCancel:")]
	//	void ActionSheetCancel (UIActionSheet actionSheet);

	//	// @optional -(void)willPresentActionSheet:(UIActionSheet * _Nonnull)actionSheet __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.3)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 3)]
	//	[NoTV]
	//	[Export ("willPresentActionSheet:")]
	//	void WillPresentActionSheet (UIActionSheet actionSheet);

	//	// @optional -(void)didPresentActionSheet:(UIActionSheet * _Nonnull)actionSheet __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.3)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 3)]
	//	[NoTV]
	//	[Export ("didPresentActionSheet:")]
	//	void DidPresentActionSheet (UIActionSheet actionSheet);

	//	// @optional -(void)actionSheet:(UIActionSheet * _Nonnull)actionSheet willDismissWithButtonIndex:(NSInteger)buttonIndex __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.3)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 3)]
	//	[NoTV]
	//	[Export ("actionSheet:willDismissWithButtonIndex:")]
	//	void ActionSheet (UIActionSheet actionSheet, nint buttonIndex);

	//	// @optional -(void)actionSheet:(UIActionSheet * _Nonnull)actionSheet didDismissWithButtonIndex:(NSInteger)buttonIndex __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.3)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 3)]
	//	[NoTV]
	//	[Export ("actionSheet:didDismissWithButtonIndex:")]
	//	void ActionSheet (UIActionSheet actionSheet, nint buttonIndex);
	//}

	//// @interface UIAlertView : UIView
	//[Introduced (PlatformName.iOS, 2, 0, message: "UIAlertView is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleAlert instead")]
	//[Deprecated (PlatformName.iOS, 9, 0, message: "UIAlertView is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleAlert instead")]
	//[NoTV]
	//[BaseType (typeof(UIView))]
	//interface UIAlertView
	//{
	//	// -(instancetype _Nonnull)initWithTitle:(NSString * _Nullable)title message:(NSString * _Nullable)message delegate:(id _Nullable)delegate cancelButtonTitle:(NSString * _Nullable)cancelButtonTitle otherButtonTitles:(NSString * _Nullable)otherButtonTitles, ... __attribute__((availability(ios_app_extension, unavailable))) __attribute__((sentinel(0, 1)));
	//	[Unavailable (PlatformName.iOSAppExtension)]
	//	[Internal]
	//	[Export ("initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:", IsVariadic = true)]
	//	IntPtr Constructor ([NullAllowed] string title, [NullAllowed] string message, [NullAllowed] NSObject @delegate, [NullAllowed] string cancelButtonTitle, [NullAllowed] string otherButtonTitles, IntPtr varArgs);

	//	// -(id _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSObject Delegate { get; set; }

	//	// @property (nonatomic, weak) id _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable message;
	//	[NullAllowed, Export ("message")]
	//	string Message { get; set; }

	//	// -(NSInteger)addButtonWithTitle:(NSString * _Nullable)title;
	//	[Export ("addButtonWithTitle:")]
	//	nint AddButtonWithTitle ([NullAllowed] string title);

	//	// -(NSString * _Nullable)buttonTitleAtIndex:(NSInteger)buttonIndex;
	//	[Export ("buttonTitleAtIndex:")]
	//	[return: NullAllowed]
	//	string ButtonTitleAtIndex (nint buttonIndex);

	//	// @property (readonly, nonatomic) NSInteger numberOfButtons;
	//	[Export ("numberOfButtons")]
	//	nint NumberOfButtons { get; }

	//	// @property (nonatomic) NSInteger cancelButtonIndex;
	//	[Export ("cancelButtonIndex")]
	//	nint CancelButtonIndex { get; set; }

	//	// @property (readonly, nonatomic) NSInteger firstOtherButtonIndex;
	//	[Export ("firstOtherButtonIndex")]
	//	nint FirstOtherButtonIndex { get; }

	//	// @property (readonly, getter = isVisible, nonatomic) BOOL visible;
	//	[Export ("visible")]
	//	bool Visible { [Bind ("isVisible")] get; }

	//	// -(void)show;
	//	[Export ("show")]
	//	void Show ();

	//	// -(void)dismissWithClickedButtonIndex:(NSInteger)buttonIndex animated:(BOOL)animated;
	//	[Export ("dismissWithClickedButtonIndex:animated:")]
	//	void DismissWithClickedButtonIndex (nint buttonIndex, bool animated);

	//	// @property (assign, nonatomic) UIAlertViewStyle alertViewStyle __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("alertViewStyle", ArgumentSemantic.Assign)]
	//	UIAlertViewStyle AlertViewStyle { get; set; }

	//	// -(UITextField * _Nullable)textFieldAtIndex:(NSInteger)textFieldIndex __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("textFieldAtIndex:")]
	//	[return: NullAllowed]
	//	UITextField TextFieldAtIndex (nint textFieldIndex);
	//}

	//// @protocol UIAlertViewDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIAlertViewDelegate
	//{
	//	// @optional -(void)alertView:(UIAlertView * _Nonnull)alertView clickedButtonAtIndex:(NSInteger)buttonIndex __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("alertView:clickedButtonAtIndex:")]
	//	void AlertView (UIAlertView alertView, nint buttonIndex);

	//	// @optional -(void)alertViewCancel:(UIAlertView * _Nonnull)alertView __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("alertViewCancel:")]
	//	void AlertViewCancel (UIAlertView alertView);

	//	// @optional -(void)willPresentAlertView:(UIAlertView * _Nonnull)alertView __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("willPresentAlertView:")]
	//	void WillPresentAlertView (UIAlertView alertView);

	//	// @optional -(void)didPresentAlertView:(UIAlertView * _Nonnull)alertView __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("didPresentAlertView:")]
	//	void DidPresentAlertView (UIAlertView alertView);

	//	// @optional -(void)alertView:(UIAlertView * _Nonnull)alertView willDismissWithButtonIndex:(NSInteger)buttonIndex __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("alertView:willDismissWithButtonIndex:")]
	//	void AlertView (UIAlertView alertView, nint buttonIndex);

	//	// @optional -(void)alertView:(UIAlertView * _Nonnull)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("alertView:didDismissWithButtonIndex:")]
	//	void AlertView (UIAlertView alertView, nint buttonIndex);

	//	// @optional -(BOOL)alertViewShouldEnableFirstOtherButton:(UIAlertView * _Nonnull)alertView __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("alertViewShouldEnableFirstOtherButton:")]
	//	bool AlertViewShouldEnableFirstOtherButton (UIAlertView alertView);
	//}

	//// @interface UIApplication : UIResponder
	//[iOS (2,0)]
	//[BaseType (typeof(UIResponder))]
	//interface UIApplication
	//{
	//	// @property (readonly, nonatomic, class) UIApplication * _Nonnull sharedApplication __attribute__((availability(ios_app_extension, unavailable)));
	//	[Unavailable (PlatformName.iOSAppExtension)]
	//	[Static]
	//	[Export ("sharedApplication")]
	//	UIApplication SharedApplication { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIApplicationDelegate Delegate { get; set; }

	//	// @property (assign, nonatomic) id<UIApplicationDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(void)beginIgnoringInteractionEvents __attribute__((availability(ios_app_extension, unavailable)));
	//	[Unavailable (PlatformName.iOSAppExtension)]
	//	[Export ("beginIgnoringInteractionEvents")]
	//	void BeginIgnoringInteractionEvents ();

	//	// -(void)endIgnoringInteractionEvents __attribute__((availability(ios_app_extension, unavailable)));
	//	[Unavailable (PlatformName.iOSAppExtension)]
	//	[Export ("endIgnoringInteractionEvents")]
	//	void EndIgnoringInteractionEvents ();

	//	// @property (readonly, getter = isIgnoringInteractionEvents, nonatomic) BOOL ignoringInteractionEvents;
	//	[Export ("ignoringInteractionEvents")]
	//	bool IgnoringInteractionEvents { [Bind ("isIgnoringInteractionEvents")] get; }

	//	// @property (getter = isIdleTimerDisabled, nonatomic) BOOL idleTimerDisabled;
	//	[Export ("idleTimerDisabled")]
	//	bool IdleTimerDisabled { [Bind ("isIdleTimerDisabled")] get; set; }

	//	// -(BOOL)openURL:(NSURL * _Nonnull)url __attribute__((availability(ios_app_extension, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=10.0)));
	//	[Unavailable (PlatformName.iOSAppExtension)]
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Please use openURL:options:completionHandler: instead")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Please use openURL:options:completionHandler: instead")]
	//	[Export ("openURL:")]
	//	bool OpenURL (NSUrl url);

	//	// -(BOOL)canOpenURL:(NSURL * _Nonnull)url __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("canOpenURL:")]
	//	bool CanOpenURL (NSUrl url);

	//	// -(void)openURL:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenExternalURLOptionsKey,id> * _Nonnull)options completionHandler:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios_app_extension, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[Unavailable (PlatformName.iOSAppExtension)]
	//	[iOS (10,0)]
	//	[Export ("openURL:options:completionHandler:")]
	//	void OpenURL (NSUrl url, NSDictionary<NSString, NSObject> options, [NullAllowed] Action<bool> completion);

	//	// -(void)sendEvent:(UIEvent * _Nonnull)event;
	//	[Export ("sendEvent:")]
	//	void SendEvent (UIEvent @event);

	//	// @property (readonly, nonatomic) UIWindow * _Nullable keyWindow;
	//	[NullAllowed, Export ("keyWindow")]
	//	UIWindow KeyWindow { get; }

	//	// @property (readonly, nonatomic) NSArray<__kindof UIWindow *> * _Nonnull windows;
	//	[Export ("windows")]
	//	UIWindow[] Windows { get; }

	//	// -(BOOL)sendAction:(SEL _Nonnull)action to:(id _Nullable)target from:(id _Nullable)sender forEvent:(UIEvent * _Nullable)event;
	//	[Export ("sendAction:to:from:forEvent:")]
	//	bool SendAction (Selector action, [NullAllowed] NSObject target, [NullAllowed] NSObject sender, [NullAllowed] UIEvent @event);

	//	// @property (getter = isNetworkActivityIndicatorVisible, nonatomic) BOOL networkActivityIndicatorVisible __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("networkActivityIndicatorVisible")]
	//	bool NetworkActivityIndicatorVisible { [Bind ("isNetworkActivityIndicatorVisible")] get; set; }

	//	// @property (readonly, nonatomic) UIStatusBarStyle statusBarStyle __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("statusBarStyle")]
	//	UIStatusBarStyle StatusBarStyle { get; }

	//	// @property (readonly, getter = isStatusBarHidden, nonatomic) BOOL statusBarHidden __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("statusBarHidden")]
	//	bool StatusBarHidden { [Bind ("isStatusBarHidden")] get; }

	//	// @property (readonly, nonatomic) UIInterfaceOrientation statusBarOrientation __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("statusBarOrientation")]
	//	UIInterfaceOrientation StatusBarOrientation { get; }

	//	// -(UIInterfaceOrientationMask)supportedInterfaceOrientationsForWindow:(UIWindow * _Nullable)window __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoTV, iOS (6,0)]
	//	[Export ("supportedInterfaceOrientationsForWindow:")]
	//	UIInterfaceOrientationMask SupportedInterfaceOrientationsForWindow ([NullAllowed] UIWindow window);

	//	// @property (readonly, nonatomic) NSTimeInterval statusBarOrientationAnimationDuration __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("statusBarOrientationAnimationDuration")]
	//	double StatusBarOrientationAnimationDuration { get; }

	//	// @property (readonly, nonatomic) CGRect statusBarFrame __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("statusBarFrame")]
	//	CGRect StatusBarFrame { get; }

	//	// @property (nonatomic) NSInteger applicationIconBadgeNumber;
	//	[Export ("applicationIconBadgeNumber")]
	//	nint ApplicationIconBadgeNumber { get; set; }

	//	// @property (nonatomic) BOOL applicationSupportsShakeToEdit __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3, 0)]
	//	[Export ("applicationSupportsShakeToEdit")]
	//	bool ApplicationSupportsShakeToEdit { get; set; }

	//	// @property (readonly, nonatomic) UIApplicationState applicationState __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("applicationState")]
	//	UIApplicationState ApplicationState { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval backgroundTimeRemaining __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("backgroundTimeRemaining")]
	//	double BackgroundTimeRemaining { get; }

	//	// -(UIBackgroundTaskIdentifier)beginBackgroundTaskWithExpirationHandler:(void (^ _Nullable)(void))handler __attribute__((objc_requires_super)) __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("beginBackgroundTaskWithExpirationHandler:")]
	//	[RequiresSuper]
	//	nuint BeginBackgroundTaskWithExpirationHandler ([NullAllowed] Action handler);

	//	// -(UIBackgroundTaskIdentifier)beginBackgroundTaskWithName:(NSString * _Nullable)taskName expirationHandler:(void (^ _Nullable)(void))handler __attribute__((objc_requires_super)) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("beginBackgroundTaskWithName:expirationHandler:")]
	//	[RequiresSuper]
	//	nuint BeginBackgroundTaskWithName ([NullAllowed] string taskName, [NullAllowed] Action handler);

	//	// -(void)endBackgroundTask:(UIBackgroundTaskIdentifier)identifier __attribute__((objc_requires_super)) __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("endBackgroundTask:")]
	//	[RequiresSuper]
	//	void EndBackgroundTask (nuint identifier);

	//	// -(void)setMinimumBackgroundFetchInterval:(NSTimeInterval)minimumBackgroundFetchInterval __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (11,0), iOS (7,0)]
	//	[Export ("setMinimumBackgroundFetchInterval:")]
	//	void SetMinimumBackgroundFetchInterval (double minimumBackgroundFetchInterval);

	//	// @property (readonly, nonatomic) UIBackgroundRefreshStatus backgroundRefreshStatus __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (11, 0), iOS (7, 0)]
	//	[Export ("backgroundRefreshStatus")]
	//	UIBackgroundRefreshStatus BackgroundRefreshStatus { get; }

	//	// @property (readonly, getter = isProtectedDataAvailable, nonatomic) BOOL protectedDataAvailable __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("protectedDataAvailable")]
	//	bool ProtectedDataAvailable { [Bind ("isProtectedDataAvailable")] get; }

	//	// @property (readonly, nonatomic) UIUserInterfaceLayoutDirection userInterfaceLayoutDirection __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("userInterfaceLayoutDirection")]
	//	UIUserInterfaceLayoutDirection UserInterfaceLayoutDirection { get; }

	//	// @property (readonly, nonatomic) UIContentSizeCategory _Nonnull preferredContentSizeCategory __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("preferredContentSizeCategory")]
	//	string PreferredContentSizeCategory { get; }
	//}

	//// @interface UIRemoteNotifications (UIApplication)
	//[Category]
	//[BaseType (typeof(UIApplication))]
	//interface UIApplication_UIRemoteNotifications
	//{
	//	// -(void)registerForRemoteNotifications __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("registerForRemoteNotifications")]
	//	void RegisterForRemoteNotifications ();

	//	// -(void)unregisterForRemoteNotifications __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("unregisterForRemoteNotifications")]
	//	void UnregisterForRemoteNotifications ();

	//	// @property (readonly, getter = isRegisteredForRemoteNotifications, nonatomic) BOOL registeredForRemoteNotifications __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("registeredForRemoteNotifications")]
	//	bool RegisteredForRemoteNotifications { [Bind ("isRegisteredForRemoteNotifications")] get; }

	//	// -(void)registerForRemoteNotificationTypes:(UIRemoteNotificationType)types __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0, message: "Use -[UIApplication registerForRemoteNotifications] and UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use -[UIApplication registerForRemoteNotifications] and UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]")]
	//	[NoTV]
	//	[Export ("registerForRemoteNotificationTypes:")]
	//	void RegisterForRemoteNotificationTypes (UIRemoteNotificationType types);

	//	// -(UIRemoteNotificationType)enabledRemoteNotificationTypes __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0, message: "Use -[UIApplication isRegisteredForRemoteNotifications] and UserNotifications Framework's -[UNUserNotificationCenter getNotificationSettingsWithCompletionHandler:] to retrieve user-enabled remote notification and user notification settings")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use -[UIApplication isRegisteredForRemoteNotifications] and UserNotifications Framework's -[UNUserNotificationCenter getNotificationSettingsWithCompletionHandler:] to retrieve user-enabled remote notification and user notification settings")]
	//	[NoTV]
	//	[Export ("enabledRemoteNotificationTypes")]
	//	[Verify (MethodToProperty)]
	//	UIRemoteNotificationType EnabledRemoteNotificationTypes { get; }
	//}

	//// @interface UILocalNotifications (UIApplication)
	//[Category]
	//[BaseType (typeof(UIApplication))]
	//interface UIApplication_UILocalNotifications
	//{
	//	// -(void)presentLocalNotificationNow:(UILocalNotification * _Nonnull)notification __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]")]
	//	[NoTV]
	//	[Export ("presentLocalNotificationNow:")]
	//	void PresentLocalNotificationNow (UILocalNotification notification);

	//	// -(void)scheduleLocalNotification:(UILocalNotification * _Nonnull)notification __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]")]
	//	[NoTV]
	//	[Export ("scheduleLocalNotification:")]
	//	void ScheduleLocalNotification (UILocalNotification notification);

	//	// -(void)cancelLocalNotification:(UILocalNotification * _Nonnull)notification __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter removePendingNotificationRequestsWithIdentifiers:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter removePendingNotificationRequestsWithIdentifiers:]")]
	//	[NoTV]
	//	[Export ("cancelLocalNotification:")]
	//	void CancelLocalNotification (UILocalNotification notification);

	//	// -(void)cancelAllLocalNotifications __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter removeAllPendingNotificationRequests]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter removeAllPendingNotificationRequests]")]
	//	[NoTV]
	//	[Export ("cancelAllLocalNotifications")]
	//	void CancelAllLocalNotifications ();

	//	// @property (copy, nonatomic) NSArray<UILocalNotification *> * _Nullable scheduledLocalNotifications __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter getPendingNotificationRequestsWithCompletionHandler:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter getPendingNotificationRequestsWithCompletionHandler:]")]
	//	[NoTV]
	//	[NullAllowed, Export ("scheduledLocalNotifications", ArgumentSemantic.Copy)]
	//	UILocalNotification[] ScheduledLocalNotifications { get; set; }
	//}

	//// @interface UIUserNotificationSettings (UIApplication)
	//[Category]
	//[BaseType (typeof(UIApplication))]
	//interface UIApplication_UIUserNotificationSettings
	//{
	//	// -(void)registerUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)notificationSettings __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:] and -[UNUserNotificationCenter setNotificationCategories:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:] and -[UNUserNotificationCenter setNotificationCategories:]")]
	//	[NoTV]
	//	[Export ("registerUserNotificationSettings:")]
	//	void RegisterUserNotificationSettings (UIUserNotificationSettings notificationSettings);

	//	// @property (readonly, nonatomic) UIUserNotificationSettings * _Nullable currentUserNotificationSettings __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter getNotificationSettingsWithCompletionHandler:] and -[UNUserNotificationCenter getNotificationCategoriesWithCompletionHandler:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter getNotificationSettingsWithCompletionHandler:] and -[UNUserNotificationCenter getNotificationCategoriesWithCompletionHandler:]")]
	//	[NoTV]
	//	[NullAllowed, Export ("currentUserNotificationSettings")]
	//	UIUserNotificationSettings CurrentUserNotificationSettings { get; }
	//}

	//// @interface UIRemoteControlEvents (UIApplication)
	//[Category]
	//[BaseType (typeof(UIApplication))]
	//interface UIApplication_UIRemoteControlEvents
	//{
	//	// -(void)beginReceivingRemoteControlEvents __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("beginReceivingRemoteControlEvents")]
	//	void BeginReceivingRemoteControlEvents ();

	//	// -(void)endReceivingRemoteControlEvents __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("endReceivingRemoteControlEvents")]
	//	void EndReceivingRemoteControlEvents ();
	//}

	//// @interface UINewsstand (UIApplication)
	//[Category]
	//[BaseType (typeof(UIApplication))]
	//interface UIApplication_UINewsstand
	//{
	//	// -(void)setNewsstandIconImage:(UIImage * _Nullable)image __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Newsstand apps now behave like normal apps on SpringBoard")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Newsstand apps now behave like normal apps on SpringBoard")]
	//	[NoTV]
	//	[Export ("setNewsstandIconImage:")]
	//	void SetNewsstandIconImage ([NullAllowed] UIImage image);
	//}

	//// @interface UIShortcutItems (UIApplication)
	//[Category]
	//[BaseType (typeof(UIApplication))]
	//interface UIApplication_UIShortcutItems
	//{
	//	// @property (copy, nonatomic) NSArray<UIApplicationShortcutItem *> * _Nullable shortcutItems __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9.0)));
	//	[NoTV, NoMac, iOS (9, 0)]
	//	[NullAllowed, Export ("shortcutItems", ArgumentSemantic.Copy)]
	//	UIApplicationShortcutItem[] ShortcutItems { get; set; }
	//}

	//// @interface UIAlternateApplicationIcons (UIApplication)
	//[Category]
	//[BaseType (typeof(UIApplication))]
	//interface UIApplication_UIAlternateApplicationIcons
	//{
	//	// @property (readonly, nonatomic) BOOL supportsAlternateIcons __attribute__((availability(tvos, introduced=10.2))) __attribute__((availability(ios, introduced=10.3))) __attribute__((availability(ios_app_extension, unavailable))) __attribute__((availability(macos_app_extension, unavailable)));
	//	[Unavailable (PlatformName.iOSAppExtension)]
	//	[Unavailable (PlatformName.MacOSXAppExtension)]
	//	[TV (10, 2), iOS (10, 3)]
	//	[Export ("supportsAlternateIcons")]
	//	bool SupportsAlternateIcons { get; }

	//	// -(void)setAlternateIconName:(NSString * _Nullable)alternateIconName completionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=10.2))) __attribute__((availability(ios, introduced=10.3))) __attribute__((availability(ios_app_extension, unavailable))) __attribute__((availability(macos_app_extension, unavailable)));
	//	[Unavailable (PlatformName.iOSAppExtension)]
	//	[Unavailable (PlatformName.MacOSXAppExtension)]
	//	[TV (10,2), iOS (10,3)]
	//	[Export ("setAlternateIconName:completionHandler:")]
	//	void SetAlternateIconName ([NullAllowed] string alternateIconName, [NullAllowed] Action<NSError> completionHandler);

	//	// @property (readonly, nonatomic) NSString * _Nullable alternateIconName __attribute__((availability(tvos, introduced=10.2))) __attribute__((availability(ios, introduced=10.3))) __attribute__((availability(ios_app_extension, unavailable))) __attribute__((availability(macos_app_extension, unavailable)));
	//	[Unavailable (PlatformName.iOSAppExtension)]
	//	[Unavailable (PlatformName.MacOSXAppExtension)]
	//	[TV (10, 2), iOS (10, 3)]
	//	[NullAllowed, Export ("alternateIconName")]
	//	string AlternateIconName { get; }
	//}

	//// @interface UIStateRestoration (UIApplication)
	//[Category]
	//[BaseType (typeof(UIApplication))]
	//interface UIApplication_UIStateRestoration
	//{
	//	// -(void)extendStateRestoration __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("extendStateRestoration")]
	//	void ExtendStateRestoration ();

	//	// -(void)completeStateRestoration __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("completeStateRestoration")]
	//	void CompleteStateRestoration ();

	//	// -(void)ignoreSnapshotOnNextApplicationLaunch __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("ignoreSnapshotOnNextApplicationLaunch")]
	//	void IgnoreSnapshotOnNextApplicationLaunch ();

	//	// +(void)registerObjectForStateRestoration:(id<UIStateRestoring> _Nonnull)object restorationIdentifier:(NSString * _Nonnull)restorationIdentifier __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Static]
	//	[Export ("registerObjectForStateRestoration:restorationIdentifier:")]
	//	void RegisterObjectForStateRestoration (UIStateRestoring @object, string restorationIdentifier);
	//}

	//// @protocol UIApplicationDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIApplicationDelegate
	//{
	//	// @optional -(void)applicationDidFinishLaunching:(UIApplication * _Nonnull)application;
	//	[Export ("applicationDidFinishLaunching:")]
	//	void ApplicationDidFinishLaunching (UIApplication application);

	//	// @optional -(BOOL)application:(UIApplication * _Nonnull)application willFinishLaunchingWithOptions:(NSDictionary * _Nullable)launchOptions __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("application:willFinishLaunchingWithOptions:")]
	//	bool Application (UIApplication application, [NullAllowed] NSDictionary launchOptions);

	//	// @optional -(BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary * _Nullable)launchOptions __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("application:didFinishLaunchingWithOptions:")]
	//	bool Application (UIApplication application, [NullAllowed] NSDictionary launchOptions);

	//	// @optional -(void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
	//	[Export ("applicationDidBecomeActive:")]
	//	void ApplicationDidBecomeActive (UIApplication application);

	//	// @optional -(void)applicationWillResignActive:(UIApplication * _Nonnull)application;
	//	[Export ("applicationWillResignActive:")]
	//	void ApplicationWillResignActive (UIApplication application);

	//	// @optional -(BOOL)application:(UIApplication * _Nonnull)application handleOpenURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Please use application:openURL:options:")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Please use application:openURL:options:")]
	//	[NoTV]
	//	[Export ("application:handleOpenURL:")]
	//	bool Application (UIApplication application, NSUrl url);

	//	// @optional -(BOOL)application:(UIApplication * _Nonnull)application openURL:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nonnull)annotation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.2, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 4, 2, message: "Please use application:openURL:options:")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Please use application:openURL:options:")]
	//	[NoTV]
	//	[Export ("application:openURL:sourceApplication:annotation:")]
	//	bool Application (UIApplication application, NSUrl url, [NullAllowed] string sourceApplication, NSObject annotation);

	//	// @optional -(BOOL)application:(UIApplication * _Nonnull)app openURL:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> * _Nonnull)options __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("application:openURL:options:")]
	//	bool Application (UIApplication app, NSUrl url, NSDictionary<NSString, NSObject> options);

	//	// @optional -(void)applicationDidReceiveMemoryWarning:(UIApplication * _Nonnull)application;
	//	[Export ("applicationDidReceiveMemoryWarning:")]
	//	void ApplicationDidReceiveMemoryWarning (UIApplication application);

	//	// @optional -(void)applicationWillTerminate:(UIApplication * _Nonnull)application;
	//	[Export ("applicationWillTerminate:")]
	//	void ApplicationWillTerminate (UIApplication application);

	//	// @optional -(void)applicationSignificantTimeChange:(UIApplication * _Nonnull)application;
	//	[Export ("applicationSignificantTimeChange:")]
	//	void ApplicationSignificantTimeChange (UIApplication application);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application willChangeStatusBarOrientation:(UIInterfaceOrientation)newStatusBarOrientation duration:(NSTimeInterval)duration __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("application:willChangeStatusBarOrientation:duration:")]
	//	void Application (UIApplication application, UIInterfaceOrientation newStatusBarOrientation, double duration);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application didChangeStatusBarOrientation:(UIInterfaceOrientation)oldStatusBarOrientation __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("application:didChangeStatusBarOrientation:")]
	//	void Application (UIApplication application, UIInterfaceOrientation oldStatusBarOrientation);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application willChangeStatusBarFrame:(CGRect)newStatusBarFrame __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("application:willChangeStatusBarFrame:")]
	//	void Application (UIApplication application, CGRect newStatusBarFrame);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application didChangeStatusBarFrame:(CGRect)oldStatusBarFrame __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("application:didChangeStatusBarFrame:")]
	//	void Application (UIApplication application, CGRect oldStatusBarFrame);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)notificationSettings __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]")]
	//	[NoTV]
	//	[Export ("application:didRegisterUserNotificationSettings:")]
	//	void Application (UIApplication application, UIUserNotificationSettings notificationSettings);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("application:didRegisterForRemoteNotificationsWithDeviceToken:")]
	//	void Application (UIApplication application, NSData deviceToken);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("application:didFailToRegisterForRemoteNotificationsWithError:")]
	//	void Application (UIApplication application, NSError error);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo __attribute__((availability(ios, introduced=3.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 3, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:] for user visible notifications and -[UIApplicationDelegate application:didReceiveRemoteNotification:fetchCompletionHandler:] for silent remote notifications")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:] for user visible notifications and -[UIApplicationDelegate application:didReceiveRemoteNotification:fetchCompletionHandler:] for silent remote notifications")]
	//	[Export ("application:didReceiveRemoteNotification:")]
	//	void Application (UIApplication application, NSDictionary userInfo);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application didReceiveLocalNotification:(UILocalNotification * _Nonnull)notification __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
	//	[NoTV]
	//	[Export ("application:didReceiveLocalNotification:")]
	//	void Application (UIApplication application, UILocalNotification notification);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nullable)identifier forLocalNotification:(UILocalNotification * _Nonnull)notification completionHandler:(void (^ _Nonnull)())completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
	//	[NoTV]
	//	[Export ("application:handleActionWithIdentifier:forLocalNotification:completionHandler:")]
	//	void Application (UIApplication application, [NullAllowed] string identifier, UILocalNotification notification, Action completionHandler);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nullable)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo withResponseInfo:(NSDictionary * _Nonnull)responseInfo completionHandler:(void (^ _Nonnull)())completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 9, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
	//	[NoTV]
	//	[Export ("application:handleActionWithIdentifier:forRemoteNotification:withResponseInfo:completionHandler:")]
	//	void Application (UIApplication application, [NullAllowed] string identifier, NSDictionary userInfo, NSDictionary responseInfo, Action completionHandler);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nullable)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nonnull)())completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
	//	[NoTV]
	//	[Export ("application:handleActionWithIdentifier:forRemoteNotification:completionHandler:")]
	//	void Application (UIApplication application, [NullAllowed] string identifier, NSDictionary userInfo, Action completionHandler);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nullable)identifier forLocalNotification:(UILocalNotification * _Nonnull)notification withResponseInfo:(NSDictionary * _Nonnull)responseInfo completionHandler:(void (^ _Nonnull)())completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 9, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
	//	[NoTV]
	//	[Export ("application:handleActionWithIdentifier:forLocalNotification:withResponseInfo:completionHandler:")]
	//	void Application (UIApplication application, [NullAllowed] string identifier, UILocalNotification notification, NSDictionary responseInfo, Action completionHandler);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("application:didReceiveRemoteNotification:fetchCompletionHandler:")]
	//	void Application (UIApplication application, NSDictionary userInfo, Action<UIBackgroundFetchResult> completionHandler);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application performFetchWithCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=7.0)));
	//	[TV (11,0), iOS (7,0)]
	//	[Export ("application:performFetchWithCompletionHandler:")]
	//	void Application (UIApplication application, Action<UIBackgroundFetchResult> completionHandler);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application performActionForShortcutItem:(UIApplicationShortcutItem * _Nonnull)shortcutItem completionHandler:(void (^ _Nonnull)(BOOL))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9.0)));
	//	[NoTV, iOS (9,0)]
	//	[Export ("application:performActionForShortcutItem:completionHandler:")]
	//	void Application (UIApplication application, UIApplicationShortcutItem shortcutItem, Action<bool> completionHandler);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application handleEventsForBackgroundURLSession:(NSString * _Nonnull)identifier completionHandler:(void (^ _Nonnull)(void))completionHandler __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("application:handleEventsForBackgroundURLSession:completionHandler:")]
	//	void Application (UIApplication application, string identifier, Action completionHandler);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application handleWatchKitExtensionRequest:(NSDictionary * _Nullable)userInfo reply:(void (^ _Nonnull)(NSDictionary * _Nullable))reply __attribute__((availability(ios, introduced=8.2)));
	//	[iOS (8,2)]
	//	[Export ("application:handleWatchKitExtensionRequest:reply:")]
	//	void Application (UIApplication application, [NullAllowed] NSDictionary userInfo, Action<NSDictionary> reply);

	//	// @optional -(void)applicationShouldRequestHealthAuthorization:(UIApplication * _Nonnull)application __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("applicationShouldRequestHealthAuthorization:")]
	//	void ApplicationShouldRequestHealthAuthorization (UIApplication application);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application handleIntent:(INIntent * _Nonnull)intent completionHandler:(void (^ _Nonnull)(INIntentResponse * _Nonnull))completionHandler __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("application:handleIntent:completionHandler:")]
	//	void Application (UIApplication application, INIntent intent, Action<INIntentResponse> completionHandler);

	//	// @optional -(void)applicationDidEnterBackground:(UIApplication * _Nonnull)application __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("applicationDidEnterBackground:")]
	//	void ApplicationDidEnterBackground (UIApplication application);

	//	// @optional -(void)applicationWillEnterForeground:(UIApplication * _Nonnull)application __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("applicationWillEnterForeground:")]
	//	void ApplicationWillEnterForeground (UIApplication application);

	//	// @optional -(void)applicationProtectedDataWillBecomeUnavailable:(UIApplication * _Nonnull)application __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("applicationProtectedDataWillBecomeUnavailable:")]
	//	void ApplicationProtectedDataWillBecomeUnavailable (UIApplication application);

	//	// @optional -(void)applicationProtectedDataDidBecomeAvailable:(UIApplication * _Nonnull)application __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("applicationProtectedDataDidBecomeAvailable:")]
	//	void ApplicationProtectedDataDidBecomeAvailable (UIApplication application);

	//	// @optional @property (nonatomic, strong) UIWindow * _Nullable window __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("window", ArgumentSemantic.Strong)]
	//	UIWindow Window { get; set; }

	//	// @optional -(UIInterfaceOrientationMask)application:(UIApplication * _Nonnull)application supportedInterfaceOrientationsForWindow:(UIWindow * _Nullable)window __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoTV, iOS (6,0)]
	//	[Export ("application:supportedInterfaceOrientationsForWindow:")]
	//	UIInterfaceOrientationMask Application (UIApplication application, [NullAllowed] UIWindow window);

	//	// @optional -(BOOL)application:(UIApplication * _Nonnull)application shouldAllowExtensionPointIdentifier:(UIApplicationExtensionPointIdentifier _Nonnull)extensionPointIdentifier __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("application:shouldAllowExtensionPointIdentifier:")]
	//	bool Application (UIApplication application, string extensionPointIdentifier);

	//	// @optional -(UIViewController * _Nullable)application:(UIApplication * _Nonnull)application viewControllerWithRestorationIdentifierPath:(NSArray<NSString *> * _Nonnull)identifierComponents coder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("application:viewControllerWithRestorationIdentifierPath:coder:")]
	//	[return: NullAllowed]
	//	UIViewController Application (UIApplication application, string[] identifierComponents, NSCoder coder);

	//	// @optional -(BOOL)application:(UIApplication * _Nonnull)application shouldSaveApplicationState:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("application:shouldSaveApplicationState:")]
	//	bool Application (UIApplication application, NSCoder coder);

	//	// @optional -(BOOL)application:(UIApplication * _Nonnull)application shouldRestoreApplicationState:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("application:shouldRestoreApplicationState:")]
	//	bool Application (UIApplication application, NSCoder coder);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application willEncodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("application:willEncodeRestorableStateWithCoder:")]
	//	void Application (UIApplication application, NSCoder coder);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application didDecodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("application:didDecodeRestorableStateWithCoder:")]
	//	void Application (UIApplication application, NSCoder coder);

	//	// @optional -(BOOL)application:(UIApplication * _Nonnull)application willContinueUserActivityWithType:(NSString * _Nonnull)userActivityType __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("application:willContinueUserActivityWithType:")]
	//	bool Application (UIApplication application, string userActivityType);

	//	// @optional -(BOOL)application:(UIApplication * _Nonnull)application continueUserActivity:(NSUserActivity * _Nonnull)userActivity restorationHandler:(void (^ _Nonnull)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("application:continueUserActivity:restorationHandler:")]
	//	bool Application (UIApplication application, NSUserActivity userActivity, Action<NSArray<UIUserActivityRestoring>> restorationHandler);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application didFailToContinueUserActivityWithType:(NSString * _Nonnull)userActivityType error:(NSError * _Nonnull)error __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("application:didFailToContinueUserActivityWithType:error:")]
	//	void Application (UIApplication application, string userActivityType, NSError error);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application didUpdateUserActivity:(NSUserActivity * _Nonnull)userActivity __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("application:didUpdateUserActivity:")]
	//	void Application (UIApplication application, NSUserActivity userActivity);

	//	// @optional -(void)application:(UIApplication * _Nonnull)application userDidAcceptCloudKitShareWithMetadata:(CKShareMetadata * _Nonnull)cloudKitShareMetadata __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("application:userDidAcceptCloudKitShareWithMetadata:")]
	//	void Application (UIApplication application, CKShareMetadata cloudKitShareMetadata);
	//}

	//// @interface UIApplicationDeprecated (UIApplication)
	//[Category]
	//[BaseType (typeof(UIApplication))]
	//interface UIApplication_UIApplicationDeprecated
	//{
	//	// @property (getter = isProximitySensingEnabled, nonatomic) BOOL proximitySensingEnabled __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[Export ("proximitySensingEnabled")]
	//	bool ProximitySensingEnabled { [Bind ("isProximitySensingEnabled")] get; set; }

	//	// -(void)setStatusBarHidden:(BOOL)hidden animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.2)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 2)]
	//	[NoTV]
	//	[Export ("setStatusBarHidden:animated:")]
	//	void SetStatusBarHidden (bool hidden, bool animated);

	//	// @property (readwrite, nonatomic) UIInterfaceOrientation statusBarOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Explicit setting of the status bar orientation is more limited in iOS 6.0 and later")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Explicit setting of the status bar orientation is more limited in iOS 6.0 and later")]
	//	[NoTV]
	//	[Export ("statusBarOrientation", ArgumentSemantic.Assign)]
	//	UIInterfaceOrientation StatusBarOrientation { get; set; }

	//	// -(void)setStatusBarOrientation:(UIInterfaceOrientation)interfaceOrientation animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Explicit setting of the status bar orientation is more limited in iOS 6.0 and later")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Explicit setting of the status bar orientation is more limited in iOS 6.0 and later")]
	//	[NoTV]
	//	[Export ("setStatusBarOrientation:animated:")]
	//	void SetStatusBarOrientation (UIInterfaceOrientation interfaceOrientation, bool animated);

	//	// @property (readwrite, nonatomic) UIStatusBarStyle statusBarStyle __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -[UIViewController preferredStatusBarStyle]")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use -[UIViewController preferredStatusBarStyle]")]
	//	[NoTV]
	//	[Export ("statusBarStyle", ArgumentSemantic.Assign)]
	//	UIStatusBarStyle StatusBarStyle { get; set; }

	//	// -(void)setStatusBarStyle:(UIStatusBarStyle)statusBarStyle animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -[UIViewController preferredStatusBarStyle]")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use -[UIViewController preferredStatusBarStyle]")]
	//	[NoTV]
	//	[Export ("setStatusBarStyle:animated:")]
	//	void SetStatusBarStyle (UIStatusBarStyle statusBarStyle, bool animated);

	//	// @property (getter = isStatusBarHidden, readwrite, nonatomic) BOOL statusBarHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -[UIViewController prefersStatusBarHidden]")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use -[UIViewController prefersStatusBarHidden]")]
	//	[NoTV]
	//	[Export ("statusBarHidden")]
	//	bool StatusBarHidden { [Bind ("isStatusBarHidden")] get; set; }

	//	// -(void)setStatusBarHidden:(BOOL)hidden withAnimation:(UIStatusBarAnimation)animation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.2, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 3, 2, message: "Use -[UIViewController prefersStatusBarHidden]")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use -[UIViewController prefersStatusBarHidden]")]
	//	[NoTV]
	//	[Export ("setStatusBarHidden:withAnimation:")]
	//	void SetStatusBarHidden (bool hidden, UIStatusBarAnimation animation);

	//	// -(BOOL)setKeepAliveTimeout:(NSTimeInterval)timeout handler:(void (^ _Nullable)(void))keepAliveHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Please use PushKit for VoIP applications instead of calling this method")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Please use PushKit for VoIP applications instead of calling this method")]
	//	[NoTV]
	//	[Export ("setKeepAliveTimeout:handler:")]
	//	bool SetKeepAliveTimeout (double timeout, [NullAllowed] Action keepAliveHandler);

	//	// -(void)clearKeepAliveTimeout __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 4, 0, message: "Please use PushKit for VoIP applications instead of calling this method")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Please use PushKit for VoIP applications instead of calling this method")]
	//	[NoTV]
	//	[Export ("clearKeepAliveTimeout")]
	//	void ClearKeepAliveTimeout ();
	//}

	//// @protocol UIViewControllerRestoration
	//[Protocol, Model]
	//interface UIViewControllerRestoration
	//{
	//	// @required +(UIViewController * _Nullable)viewControllerWithRestorationIdentifierPath:(NSArray<NSString *> * _Nonnull)identifierComponents coder:(NSCoder * _Nonnull)coder;
	//	[Static, Abstract]
	//	[Export ("viewControllerWithRestorationIdentifierPath:coder:")]
	//	[return: NullAllowed]
	//	UIViewController Coder (string[] identifierComponents, NSCoder coder);
	//}

	//// @protocol UIDataSourceModelAssociation
	//[Protocol, Model]
	//interface UIDataSourceModelAssociation
	//{
	//	// @required -(NSString * _Nullable)modelIdentifierForElementAtIndexPath:(NSIndexPath * _Nonnull)idx inView:(UIView * _Nonnull)view;
	//	[Abstract]
	//	[Export ("modelIdentifierForElementAtIndexPath:inView:")]
	//	[return: NullAllowed]
	//	string ModelIdentifierForElementAtIndexPath (NSIndexPath idx, UIView view);

	//	// @required -(NSIndexPath * _Nullable)indexPathForElementWithModelIdentifier:(NSString * _Nonnull)identifier inView:(UIView * _Nonnull)view;
	//	[Abstract]
	//	[Export ("indexPathForElementWithModelIdentifier:inView:")]
	//	[return: NullAllowed]
	//	NSIndexPath IndexPathForElementWithModelIdentifier (string identifier, UIView view);
	//}

	//// @protocol UIStateRestoring <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIStateRestoring
	//{
	//	// @optional @property (readonly, nonatomic) id<UIStateRestoring> _Nullable restorationParent;
	//	[NullAllowed, Export ("restorationParent")]
	//	UIStateRestoring RestorationParent { get; }

	//	// @optional @property (readonly, nonatomic) Class<UIObjectRestoration> _Nullable objectRestorationClass;
	//	[NullAllowed, Export ("objectRestorationClass")]
	//	UIObjectRestoration ObjectRestorationClass { get; }

	//	// @optional -(void)encodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder;
	//	[Export ("encodeRestorableStateWithCoder:")]
	//	void EncodeRestorableStateWithCoder (NSCoder coder);

	//	// @optional -(void)decodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder;
	//	[Export ("decodeRestorableStateWithCoder:")]
	//	void DecodeRestorableStateWithCoder (NSCoder coder);

	//	// @optional -(void)applicationFinishedRestoringState;
	//	[Export ("applicationFinishedRestoringState")]
	//	void ApplicationFinishedRestoringState ();
	//}

	//// @protocol UIObjectRestoration
	//[Protocol, Model]
	//interface UIObjectRestoration
	//{
	//	// @required +(id<UIStateRestoring> _Nullable)objectWithRestorationIdentifierPath:(NSArray<NSString *> * _Nonnull)identifierComponents coder:(NSCoder * _Nonnull)coder;
	//	[Static, Abstract]
	//	[Export ("objectWithRestorationIdentifierPath:coder:")]
	//	[return: NullAllowed]
	//	UIStateRestoring Coder (string[] identifierComponents, NSCoder coder);
	//}

	//// @protocol UIContentContainer <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIContentContainer
	//{
	//	// @required @property (readonly, nonatomic) CGSize preferredContentSize __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Abstract]
	//	[Export ("preferredContentSize")]
	//	CGSize PreferredContentSize { get; }

	//	// @required -(void)preferredContentSizeDidChangeForChildContentContainer:(id<UIContentContainer> _Nonnull)container __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("preferredContentSizeDidChangeForChildContentContainer:")]
	//	void PreferredContentSizeDidChangeForChildContentContainer (UIContentContainer container);

	//	// @required -(void)systemLayoutFittingSizeDidChangeForChildContentContainer:(id<UIContentContainer> _Nonnull)container __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("systemLayoutFittingSizeDidChangeForChildContentContainer:")]
	//	void SystemLayoutFittingSizeDidChangeForChildContentContainer (UIContentContainer container);

	//	// @required -(CGSize)sizeForChildContentContainer:(id<UIContentContainer> _Nonnull)container withParentContainerSize:(CGSize)parentSize __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("sizeForChildContentContainer:withParentContainerSize:")]
	//	CGSize SizeForChildContentContainer (UIContentContainer container, CGSize parentSize);

	//	// @required -(void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id<UIViewControllerTransitionCoordinator> _Nonnull)coordinator __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("viewWillTransitionToSize:withTransitionCoordinator:")]
	//	void ViewWillTransitionToSize (CGSize size, UIViewControllerTransitionCoordinator coordinator);

	//	// @required -(void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id<UIViewControllerTransitionCoordinator> _Nonnull)coordinator __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("willTransitionToTraitCollection:withTransitionCoordinator:")]
	//	void WillTransitionToTraitCollection (UITraitCollection newCollection, UIViewControllerTransitionCoordinator coordinator);
	//}

	//// @interface UIViewController : UIResponder <NSCoding, UIAppearanceContainer, UITraitEnvironment, UIContentContainer, UIFocusEnvironment>
	//[iOS (2,0)]
	//[BaseType (typeof(UIResponder))]
	//interface UIViewController : INSCoding, IUIAppearanceContainer, IUITraitEnvironment, IUIContentContainer, IUIFocusEnvironment
	//{
	//	// -(instancetype _Nonnull)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil __attribute__((objc_designated_initializer));
	//	[Export ("initWithNibName:bundle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string nibNameOrNil, [NullAllowed] NSBundle nibBundleOrNil);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (nonatomic, strong) UIView * _Null_unspecified view;
	//	[Export ("view", ArgumentSemantic.Strong)]
	//	UIView View { get; set; }

	//	// -(void)loadView;
	//	[Export ("loadView")]
	//	void LoadView ();

	//	// -(void)loadViewIfNeeded __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("loadViewIfNeeded")]
	//	void LoadViewIfNeeded ();

	//	// @property (readonly, nonatomic, strong) UIView * _Nullable viewIfLoaded __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("viewIfLoaded", ArgumentSemantic.Strong)]
	//	UIView ViewIfLoaded { get; }

	//	// -(void)viewWillUnload __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 5, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoTV]
	//	[Export ("viewWillUnload")]
	//	void ViewWillUnload ();

	//	// -(void)viewDidUnload __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoTV]
	//	[Export ("viewDidUnload")]
	//	void ViewDidUnload ();

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();

	//	// @property (readonly, getter = isViewLoaded, nonatomic) BOOL viewLoaded __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("viewLoaded")]
	//	bool ViewLoaded { [Bind ("isViewLoaded")] get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable nibName;
	//	[NullAllowed, Export ("nibName")]
	//	string NibName { get; }

	//	// @property (readonly, nonatomic, strong) NSBundle * _Nullable nibBundle;
	//	[NullAllowed, Export ("nibBundle", ArgumentSemantic.Strong)]
	//	NSBundle NibBundle { get; }

	//	// @property (readonly, nonatomic, strong) UIStoryboard * _Nullable storyboard __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("storyboard", ArgumentSemantic.Strong)]
	//	UIStoryboard Storyboard { get; }

	//	// -(void)performSegueWithIdentifier:(NSString * _Nonnull)identifier sender:(id _Nullable)sender __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("performSegueWithIdentifier:sender:")]
	//	void PerformSegueWithIdentifier (string identifier, [NullAllowed] NSObject sender);

	//	// -(BOOL)shouldPerformSegueWithIdentifier:(NSString * _Nonnull)identifier sender:(id _Nullable)sender __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("shouldPerformSegueWithIdentifier:sender:")]
	//	bool ShouldPerformSegueWithIdentifier (string identifier, [NullAllowed] NSObject sender);

	//	// -(void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("prepareForSegue:sender:")]
	//	void PrepareForSegue (UIStoryboardSegue segue, [NullAllowed] NSObject sender);

	//	// -(BOOL)canPerformUnwindSegueAction:(SEL _Nonnull)action fromViewController:(UIViewController * _Nonnull)fromViewController withSender:(id _Nonnull)sender __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("canPerformUnwindSegueAction:fromViewController:withSender:")]
	//	bool CanPerformUnwindSegueAction (Selector action, UIViewController fromViewController, NSObject sender);

	//	// -(NSArray<UIViewController *> * _Nonnull)allowedChildViewControllersForUnwindingFromSource:(UIStoryboardUnwindSegueSource * _Nonnull)source __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("allowedChildViewControllersForUnwindingFromSource:")]
	//	UIViewController[] AllowedChildViewControllersForUnwindingFromSource (UIStoryboardUnwindSegueSource source);

	//	// -(UIViewController * _Nullable)childViewControllerContainingSegueSource:(UIStoryboardUnwindSegueSource * _Nonnull)source __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("childViewControllerContainingSegueSource:")]
	//	[return: NullAllowed]
	//	UIViewController ChildViewControllerContainingSegueSource (UIStoryboardUnwindSegueSource source);

	//	// -(UIViewController * _Nullable)viewControllerForUnwindSegueAction:(SEL _Nonnull)action fromViewController:(UIViewController * _Nonnull)fromViewController withSender:(id _Nullable)sender __attribute__((availability(ios, introduced=6.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 6, 0)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("viewControllerForUnwindSegueAction:fromViewController:withSender:")]
	//	[return: NullAllowed]
	//	UIViewController ViewControllerForUnwindSegueAction (Selector action, UIViewController fromViewController, [NullAllowed] NSObject sender);

	//	// -(void)unwindForSegue:(UIStoryboardSegue * _Nonnull)unwindSegue towardsViewController:(UIViewController * _Nonnull)subsequentVC __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("unwindForSegue:towardsViewController:")]
	//	void UnwindForSegue (UIStoryboardSegue unwindSegue, UIViewController subsequentVC);

	//	// -(UIStoryboardSegue * _Nullable)segueForUnwindingToViewController:(UIViewController * _Nonnull)toViewController fromViewController:(UIViewController * _Nonnull)fromViewController identifier:(NSString * _Nullable)identifier __attribute__((availability(ios, introduced=6.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 6, 0)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("segueForUnwindingToViewController:fromViewController:identifier:")]
	//	[return: NullAllowed]
	//	UIStoryboardSegue SegueForUnwindingToViewController (UIViewController toViewController, UIViewController fromViewController, [NullAllowed] string identifier);

	//	// -(void)viewWillAppear:(BOOL)animated;
	//	[Export ("viewWillAppear:")]
	//	void ViewWillAppear (bool animated);

	//	// -(void)viewDidAppear:(BOOL)animated;
	//	[Export ("viewDidAppear:")]
	//	void ViewDidAppear (bool animated);

	//	// -(void)viewWillDisappear:(BOOL)animated;
	//	[Export ("viewWillDisappear:")]
	//	void ViewWillDisappear (bool animated);

	//	// -(void)viewDidDisappear:(BOOL)animated;
	//	[Export ("viewDidDisappear:")]
	//	void ViewDidDisappear (bool animated);

	//	// -(void)viewWillLayoutSubviews __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("viewWillLayoutSubviews")]
	//	void ViewWillLayoutSubviews ();

	//	// -(void)viewDidLayoutSubviews __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("viewDidLayoutSubviews")]
	//	void ViewDidLayoutSubviews ();

	//	// @property (copy, nonatomic) NSString * _Nullable title;
	//	[NullAllowed, Export ("title")]
	//	string Title { get; set; }

	//	// -(void)didReceiveMemoryWarning;
	//	[Export ("didReceiveMemoryWarning")]
	//	void DidReceiveMemoryWarning ();

	//	// @property (readonly, nonatomic, weak) UIViewController * _Nullable parentViewController;
	//	[NullAllowed, Export ("parentViewController", ArgumentSemantic.Weak)]
	//	UIViewController ParentViewController { get; }

	//	// @property (readonly, nonatomic) UIViewController * _Nullable modalViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("modalViewController")]
	//	UIViewController ModalViewController { get; }

	//	// @property (readonly, nonatomic) UIViewController * _Nullable presentedViewController __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("presentedViewController")]
	//	UIViewController PresentedViewController { get; }

	//	// @property (readonly, nonatomic) UIViewController * _Nullable presentingViewController __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("presentingViewController")]
	//	UIViewController PresentingViewController { get; }

	//	// @property (assign, nonatomic) BOOL definesPresentationContext __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("definesPresentationContext")]
	//	bool DefinesPresentationContext { get; set; }

	//	// @property (assign, nonatomic) BOOL providesPresentationContextTransitionStyle __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("providesPresentationContextTransitionStyle")]
	//	bool ProvidesPresentationContextTransitionStyle { get; set; }

	//	// @property (nonatomic) BOOL restoresFocusAfterTransition __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("restoresFocusAfterTransition")]
	//	bool RestoresFocusAfterTransition { get; set; }

	//	// @property (readonly, getter = isBeingPresented, nonatomic) BOOL beingPresented __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("beingPresented")]
	//	bool BeingPresented { [Bind ("isBeingPresented")] get; }

	//	// @property (readonly, getter = isBeingDismissed, nonatomic) BOOL beingDismissed __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("beingDismissed")]
	//	bool BeingDismissed { [Bind ("isBeingDismissed")] get; }

	//	// @property (readonly, getter = isMovingToParentViewController, nonatomic) BOOL movingToParentViewController __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("movingToParentViewController")]
	//	bool MovingToParentViewController { [Bind ("isMovingToParentViewController")] get; }

	//	// @property (readonly, getter = isMovingFromParentViewController, nonatomic) BOOL movingFromParentViewController __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("movingFromParentViewController")]
	//	bool MovingFromParentViewController { [Bind ("isMovingFromParentViewController")] get; }

	//	// -(void)presentViewController:(UIViewController * _Nonnull)viewControllerToPresent animated:(BOOL)flag completion:(void (^ _Nullable)(void))completion __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("presentViewController:animated:completion:")]
	//	void PresentViewController (UIViewController viewControllerToPresent, bool flag, [NullAllowed] Action completion);

	//	// -(void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("dismissViewControllerAnimated:completion:")]
	//	void DismissViewControllerAnimated (bool flag, [NullAllowed] Action completion);

	//	// -(void)presentModalViewController:(UIViewController * _Nonnull)modalViewController animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoTV]
	//	[Export ("presentModalViewController:animated:")]
	//	void PresentModalViewController (UIViewController modalViewController, bool animated);

	//	// -(void)dismissModalViewControllerAnimated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoTV]
	//	[Export ("dismissModalViewControllerAnimated:")]
	//	void DismissModalViewControllerAnimated (bool animated);

	//	// @property (assign, nonatomic) UIModalTransitionStyle modalTransitionStyle __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("modalTransitionStyle", ArgumentSemantic.Assign)]
	//	UIModalTransitionStyle ModalTransitionStyle { get; set; }

	//	// @property (assign, nonatomic) UIModalPresentationStyle modalPresentationStyle __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[Export ("modalPresentationStyle", ArgumentSemantic.Assign)]
	//	UIModalPresentationStyle ModalPresentationStyle { get; set; }

	//	// @property (assign, nonatomic) BOOL modalPresentationCapturesStatusBarAppearance __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[Export ("modalPresentationCapturesStatusBarAppearance")]
	//	bool ModalPresentationCapturesStatusBarAppearance { get; set; }

	//	// @property (readonly, nonatomic) BOOL disablesAutomaticKeyboardDismissal __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[Export ("disablesAutomaticKeyboardDismissal")]
	//	bool DisablesAutomaticKeyboardDismissal { get; }

	//	// @property (assign, nonatomic) BOOL wantsFullScreenLayout __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoTV]
	//	[Export ("wantsFullScreenLayout")]
	//	bool WantsFullScreenLayout { get; set; }

	//	// @property (assign, nonatomic) UIRectEdge edgesForExtendedLayout __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("edgesForExtendedLayout", ArgumentSemantic.Assign)]
	//	UIRectEdge EdgesForExtendedLayout { get; set; }

	//	// @property (assign, nonatomic) BOOL extendedLayoutIncludesOpaqueBars __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("extendedLayoutIncludesOpaqueBars")]
	//	bool ExtendedLayoutIncludesOpaqueBars { get; set; }

	//	// @property (assign, nonatomic) BOOL automaticallyAdjustsScrollViewInsets __attribute__((availability(tvos, introduced=7.0, deprecated=11.0))) __attribute__((availability(ios, introduced=7.0, deprecated=11.0)));
	//	[Introduced (PlatformName.TvOS, 7, 0, message: "Use UIScrollView's contentInsetAdjustmentBehavior instead")]
	//	[Deprecated (PlatformName.TvOS, 11, 0, message: "Use UIScrollView's contentInsetAdjustmentBehavior instead")]
	//	[Introduced (PlatformName.iOS, 7, 0, message: "Use UIScrollView's contentInsetAdjustmentBehavior instead")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use UIScrollView's contentInsetAdjustmentBehavior instead")]
	//	[Export ("automaticallyAdjustsScrollViewInsets")]
	//	bool AutomaticallyAdjustsScrollViewInsets { get; set; }

	//	// @property (nonatomic) CGSize preferredContentSize __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("preferredContentSize", ArgumentSemantic.Assign)]
	//	CGSize PreferredContentSize { get; set; }

	//	// @property (readonly, nonatomic) UIStatusBarStyle preferredStatusBarStyle __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[Export ("preferredStatusBarStyle")]
	//	UIStatusBarStyle PreferredStatusBarStyle { get; }

	//	// @property (readonly, nonatomic) BOOL prefersStatusBarHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[Export ("prefersStatusBarHidden")]
	//	bool PrefersStatusBarHidden { get; }

	//	// @property (readonly, nonatomic) UIStatusBarAnimation preferredStatusBarUpdateAnimation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[Export ("preferredStatusBarUpdateAnimation")]
	//	UIStatusBarAnimation PreferredStatusBarUpdateAnimation { get; }

	//	// -(void)setNeedsStatusBarAppearanceUpdate __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7,0)]
	//	[Export ("setNeedsStatusBarAppearanceUpdate")]
	//	void SetNeedsStatusBarAppearanceUpdate ();

	//	// -(UIViewController * _Nullable)targetViewControllerForAction:(SEL _Nonnull)action sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("targetViewControllerForAction:sender:")]
	//	[return: NullAllowed]
	//	UIViewController TargetViewControllerForAction (Selector action, [NullAllowed] NSObject sender);

	//	// -(void)showViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("showViewController:sender:")]
	//	void ShowViewController (UIViewController vc, [NullAllowed] NSObject sender);

	//	// -(void)showDetailViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("showDetailViewController:sender:")]
	//	void ShowDetailViewController (UIViewController vc, [NullAllowed] NSObject sender);

	//	// @property (readonly, nonatomic) UIUserInterfaceStyle preferredUserInterfaceStyle __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
	//	[TV (11, 0), NoWatch, NoiOS]
	//	[Export ("preferredUserInterfaceStyle")]
	//	UIUserInterfaceStyle PreferredUserInterfaceStyle { get; }

	//	// -(void)setNeedsUserInterfaceAppearanceUpdate __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
	//	[TV (11,0), NoWatch, NoiOS]
	//	[Export ("setNeedsUserInterfaceAppearanceUpdate")]
	//	void SetNeedsUserInterfaceAppearanceUpdate ();
	//}

	//// @interface UIViewControllerRotation (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIViewControllerRotation
	//{
	//	// +(void)attemptRotationToDeviceOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5,0)]
	//	[Static]
	//	[Export ("attemptRotationToDeviceOrientation")]
	//	void AttemptRotationToDeviceOrientation ();

	//	// -(BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoTV]
	//	[Export ("shouldAutorotateToInterfaceOrientation:")]
	//	bool ShouldAutorotateToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation);

	//	// @property (readonly, nonatomic) BOOL shouldAutorotate __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoTV, iOS (6, 0)]
	//	[Export ("shouldAutorotate")]
	//	bool ShouldAutorotate { get; }

	//	// @property (readonly, nonatomic) UIInterfaceOrientationMask supportedInterfaceOrientations __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoTV, iOS (6, 0)]
	//	[Export ("supportedInterfaceOrientations")]
	//	UIInterfaceOrientationMask SupportedInterfaceOrientations { get; }

	//	// @property (readonly, nonatomic) UIInterfaceOrientation preferredInterfaceOrientationForPresentation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoTV, iOS (6, 0)]
	//	[Export ("preferredInterfaceOrientationForPresentation")]
	//	UIInterfaceOrientation PreferredInterfaceOrientationForPresentation { get; }

	//	// -(UIView * _Nullable)rotatingHeaderView __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Header views are animated along with the rest of the view hierarchy")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Header views are animated along with the rest of the view hierarchy")]
	//	[NoTV]
	//	[NullAllowed, Export ("rotatingHeaderView")]
	//	[Verify (MethodToProperty)]
	//	UIView RotatingHeaderView { get; }

	//	// -(UIView * _Nullable)rotatingFooterView __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Footer views are animated along with the rest of the view hierarchy")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Footer views are animated along with the rest of the view hierarchy")]
	//	[NoTV]
	//	[NullAllowed, Export ("rotatingFooterView")]
	//	[Verify (MethodToProperty)]
	//	UIView RotatingFooterView { get; }

	//	// @property (readonly, nonatomic) UIInterfaceOrientation interfaceOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[NoTV]
	//	[Export ("interfaceOrientation")]
	//	UIInterfaceOrientation InterfaceOrientation { get; }

	//	// -(void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Implement viewWillTransitionToSize:withTransitionCoordinator: instead")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Implement viewWillTransitionToSize:withTransitionCoordinator: instead")]
	//	[NoTV]
	//	[Export ("willRotateToInterfaceOrientation:duration:")]
	//	void WillRotateToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation, double duration);

	//	// -(void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[NoTV]
	//	[Export ("didRotateFromInterfaceOrientation:")]
	//	void DidRotateFromInterfaceOrientation (UIInterfaceOrientation fromInterfaceOrientation);

	//	// -(void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0, message: "Implement viewWillTransitionToSize:withTransitionCoordinator: instead")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Implement viewWillTransitionToSize:withTransitionCoordinator: instead")]
	//	[NoTV]
	//	[Export ("willAnimateRotationToInterfaceOrientation:duration:")]
	//	void WillAnimateRotationToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation, double duration);

	//	// -(void)willAnimateFirstHalfOfRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=5.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 5, 0)]
	//	[NoTV]
	//	[Export ("willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:")]
	//	void WillAnimateFirstHalfOfRotationToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation, double duration);

	//	// -(void)didAnimateFirstHalfOfRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=5.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 5, 0)]
	//	[NoTV]
	//	[Export ("didAnimateFirstHalfOfRotationToInterfaceOrientation:")]
	//	void DidAnimateFirstHalfOfRotationToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation);

	//	// -(void)willAnimateSecondHalfOfRotationFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation duration:(NSTimeInterval)duration __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=5.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 5, 0)]
	//	[NoTV]
	//	[Export ("willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:")]
	//	void WillAnimateSecondHalfOfRotationFromInterfaceOrientation (UIInterfaceOrientation fromInterfaceOrientation, double duration);
	//}

	//// @interface UIViewControllerEditing (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIViewControllerEditing
	//{
	//	// @property (getter = isEditing, nonatomic) BOOL editing;
	//	[Export ("editing")]
	//	bool Editing { [Bind ("isEditing")] get; set; }

	//	// -(void)setEditing:(BOOL)editing animated:(BOOL)animated;
	//	[Export ("setEditing:animated:")]
	//	void SetEditing (bool editing, bool animated);

	//	// @property (readonly, nonatomic) UIBarButtonItem * _Nonnull editButtonItem;
	//	[Export ("editButtonItem")]
	//	UIBarButtonItem EditButtonItem { get; }
	//}

	//// @interface UISearchDisplayControllerSupport (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UISearchDisplayControllerSupport
	//{
	//	// @property (readonly, nonatomic, strong) UISearchDisplayController * _Nullable searchDisplayController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("searchDisplayController", ArgumentSemantic.Strong)]
	//	UISearchDisplayController SearchDisplayController { get; }
	//}

	//// @interface UIContainerViewControllerProtectedMethods (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIContainerViewControllerProtectedMethods
	//{
	//	// @property (readonly, nonatomic) NSArray<__kindof UIViewController *> * _Nonnull childViewControllers __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("childViewControllers")]
	//	UIViewController[] ChildViewControllers { get; }

	//	// -(void)addChildViewController:(UIViewController * _Nonnull)childController __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("addChildViewController:")]
	//	void AddChildViewController (UIViewController childController);

	//	// -(void)removeFromParentViewController __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("removeFromParentViewController")]
	//	void RemoveFromParentViewController ();

	//	// -(void)transitionFromViewController:(UIViewController * _Nonnull)fromViewController toViewController:(UIViewController * _Nonnull)toViewController duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("transitionFromViewController:toViewController:duration:options:animations:completion:")]
	//	void TransitionFromViewController (UIViewController fromViewController, UIViewController toViewController, double duration, UIViewAnimationOptions options, [NullAllowed] Action animations, [NullAllowed] Action<bool> completion);

	//	// -(void)beginAppearanceTransition:(BOOL)isAppearing animated:(BOOL)animated __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("beginAppearanceTransition:animated:")]
	//	void BeginAppearanceTransition (bool isAppearing, bool animated);

	//	// -(void)endAppearanceTransition __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("endAppearanceTransition")]
	//	void EndAppearanceTransition ();

	//	// @property (readonly, nonatomic) UIViewController * _Nullable childViewControllerForStatusBarStyle __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[NullAllowed, Export ("childViewControllerForStatusBarStyle")]
	//	UIViewController ChildViewControllerForStatusBarStyle { get; }

	//	// @property (readonly, nonatomic) UIViewController * _Nullable childViewControllerForStatusBarHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[NullAllowed, Export ("childViewControllerForStatusBarHidden")]
	//	UIViewController ChildViewControllerForStatusBarHidden { get; }

	//	// -(void)setOverrideTraitCollection:(UITraitCollection * _Nullable)collection forChildViewController:(UIViewController * _Nonnull)childViewController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("setOverrideTraitCollection:forChildViewController:")]
	//	void SetOverrideTraitCollection ([NullAllowed] UITraitCollection collection, UIViewController childViewController);

	//	// -(UITraitCollection * _Nullable)overrideTraitCollectionForChildViewController:(UIViewController * _Nonnull)childViewController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("overrideTraitCollectionForChildViewController:")]
	//	[return: NullAllowed]
	//	UITraitCollection OverrideTraitCollectionForChildViewController (UIViewController childViewController);

	//	// @property (readonly, nonatomic) UIViewController * _Nullable childViewControllerForUserInterfaceStyle __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
	//	[TV (11, 0), NoWatch, NoiOS]
	//	[NullAllowed, Export ("childViewControllerForUserInterfaceStyle")]
	//	UIViewController ChildViewControllerForUserInterfaceStyle { get; }
	//}

	//// @interface UIContainerViewControllerCallbacks (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIContainerViewControllerCallbacks
	//{
	//	// -(BOOL)automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 5, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoTV]
	//	[Export ("automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers")]
	//	[Verify (MethodToProperty)]
	//	bool AutomaticallyForwardAppearanceAndRotationMethodsToChildViewControllers { get; }

	//	// -(BOOL)shouldAutomaticallyForwardRotationMethods __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 6, 0, message: "Manually forward viewWillTransitionToSize:withTransitionCoordinator: if necessary")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Manually forward viewWillTransitionToSize:withTransitionCoordinator: if necessary")]
	//	[NoTV]
	//	[Export ("shouldAutomaticallyForwardRotationMethods")]
	//	[Verify (MethodToProperty)]
	//	bool ShouldAutomaticallyForwardRotationMethods { get; }

	//	// @property (readonly, nonatomic) BOOL shouldAutomaticallyForwardAppearanceMethods __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("shouldAutomaticallyForwardAppearanceMethods")]
	//	bool ShouldAutomaticallyForwardAppearanceMethods { get; }

	//	// -(void)willMoveToParentViewController:(UIViewController * _Nullable)parent __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("willMoveToParentViewController:")]
	//	void WillMoveToParentViewController ([NullAllowed] UIViewController parent);

	//	// -(void)didMoveToParentViewController:(UIViewController * _Nullable)parent __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("didMoveToParentViewController:")]
	//	void DidMoveToParentViewController ([NullAllowed] UIViewController parent);
	//}

	//// @interface UIStateRestoration (UIViewController) <UIStateRestoring>
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIStateRestoration : IUIStateRestoring
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable restorationIdentifier __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("restorationIdentifier")]
	//	string RestorationIdentifier { get; set; }

	//	// @property (assign, readwrite, nonatomic) Class<UIViewControllerRestoration> _Nullable restorationClass __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("restorationClass", ArgumentSemantic.Assign)]
	//	UIViewControllerRestoration RestorationClass { get; set; }

	//	// -(void)encodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("encodeRestorableStateWithCoder:")]
	//	void EncodeRestorableStateWithCoder (NSCoder coder);

	//	// -(void)decodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("decodeRestorableStateWithCoder:")]
	//	void DecodeRestorableStateWithCoder (NSCoder coder);

	//	// -(void)applicationFinishedRestoringState __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("applicationFinishedRestoringState")]
	//	void ApplicationFinishedRestoringState ();
	//}

	//// @interface UIConstraintBasedLayoutCoreMethods (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIConstraintBasedLayoutCoreMethods
	//{
	//	// -(void)updateViewConstraints __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("updateViewConstraints")]
	//	void UpdateViewConstraints ();
	//}

	//// @interface UIViewControllerTransitioning (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIViewControllerTransitioning
	//{
	//	[Wrap ("WeakTransitioningDelegate")]
	//	[NullAllowed]
	//	UIViewControllerTransitioningDelegate TransitioningDelegate { get; set; }

	//	// @property (nonatomic, weak) id<UIViewControllerTransitioningDelegate> _Nullable transitioningDelegate __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("transitioningDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakTransitioningDelegate { get; set; }
	//}

	//// @interface UILayoutSupport (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UILayoutSupport
	//{
	//	// @property (readonly, nonatomic, strong) id<UILayoutSupport> _Nonnull topLayoutGuide __attribute__((availability(tvos, introduced=7.0, deprecated=11.0))) __attribute__((availability(ios, introduced=7.0, deprecated=11.0)));
	//	[Introduced (PlatformName.TvOS, 7, 0, message: "Use view.safeAreaLayoutGuide.topAnchor instead of topLayoutGuide.bottomAnchor")]
	//	[Deprecated (PlatformName.TvOS, 11, 0, message: "Use view.safeAreaLayoutGuide.topAnchor instead of topLayoutGuide.bottomAnchor")]
	//	[Introduced (PlatformName.iOS, 7, 0, message: "Use view.safeAreaLayoutGuide.topAnchor instead of topLayoutGuide.bottomAnchor")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use view.safeAreaLayoutGuide.topAnchor instead of topLayoutGuide.bottomAnchor")]
	//	[Export ("topLayoutGuide", ArgumentSemantic.Strong)]
	//	UILayoutSupport TopLayoutGuide { get; }

	//	// @property (readonly, nonatomic, strong) id<UILayoutSupport> _Nonnull bottomLayoutGuide __attribute__((availability(tvos, introduced=7.0, deprecated=11.0))) __attribute__((availability(ios, introduced=7.0, deprecated=11.0)));
	//	[Introduced (PlatformName.TvOS, 7, 0, message: "Use view.safeAreaLayoutGuide.bottomAnchor instead of bottomLayoutGuide.topAnchor")]
	//	[Deprecated (PlatformName.TvOS, 11, 0, message: "Use view.safeAreaLayoutGuide.bottomAnchor instead of bottomLayoutGuide.topAnchor")]
	//	[Introduced (PlatformName.iOS, 7, 0, message: "Use view.safeAreaLayoutGuide.bottomAnchor instead of bottomLayoutGuide.topAnchor")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Use view.safeAreaLayoutGuide.bottomAnchor instead of bottomLayoutGuide.topAnchor")]
	//	[Export ("bottomLayoutGuide", ArgumentSemantic.Strong)]
	//	UILayoutSupport BottomLayoutGuide { get; }

	//	// @property (nonatomic) UIEdgeInsets additionalSafeAreaInsets __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("additionalSafeAreaInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets AdditionalSafeAreaInsets { get; set; }

	//	// @property (readonly, nonatomic) NSDirectionalEdgeInsets systemMinimumLayoutMargins __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("systemMinimumLayoutMargins")]
	//	NSDirectionalEdgeInsets SystemMinimumLayoutMargins { get; }

	//	// @property (nonatomic) BOOL viewRespectsSystemMinimumLayoutMargins __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("viewRespectsSystemMinimumLayoutMargins")]
	//	bool ViewRespectsSystemMinimumLayoutMargins { get; set; }

	//	// -(void)viewLayoutMarginsDidChange __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((objc_requires_super));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("viewLayoutMarginsDidChange")]
	//	[RequiresSuper]
	//	void ViewLayoutMarginsDidChange ();

	//	// -(void)viewSafeAreaInsetsDidChange __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((objc_requires_super));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("viewSafeAreaInsetsDidChange")]
	//	[RequiresSuper]
	//	void ViewSafeAreaInsetsDidChange ();
	//}

	//// @interface UIKeyCommand (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIKeyCommand
	//{
	//	// -(void)addKeyCommand:(UIKeyCommand * _Nonnull)keyCommand __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("addKeyCommand:")]
	//	void AddKeyCommand (UIKeyCommand keyCommand);

	//	// -(void)removeKeyCommand:(UIKeyCommand * _Nonnull)keyCommand __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("removeKeyCommand:")]
	//	void RemoveKeyCommand (UIKeyCommand keyCommand);
	//}

	//// @interface NSExtensionAdditions (UIViewController) <NSExtensionRequestHandling>
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_NSExtensionAdditions : INSExtensionRequestHandling
	//{
	//	// @property (readonly, nonatomic, strong) NSExtensionContext * _Nullable extensionContext __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("extensionContext", ArgumentSemantic.Strong)]
	//	NSExtensionContext ExtensionContext { get; }
	//}

	//// @interface UIAdaptivePresentations (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIAdaptivePresentations
	//{
	//	// @property (readonly, nonatomic) UIPresentationController * _Nullable presentationController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("presentationController")]
	//	UIPresentationController PresentationController { get; }

	//	// @property (readonly, nonatomic) UIPopoverPresentationController * _Nullable popoverPresentationController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("popoverPresentationController")]
	//	UIPopoverPresentationController PopoverPresentationController { get; }
	//}

	//// @protocol UIViewControllerPreviewing <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIViewControllerPreviewing
	//{
	//	// @required @property (readonly, nonatomic) UIGestureRecognizer * _Nonnull previewingGestureRecognizerForFailureRelationship __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Abstract]
	//	[Export ("previewingGestureRecognizerForFailureRelationship")]
	//	UIGestureRecognizer PreviewingGestureRecognizerForFailureRelationship { get; }

	//	[Wrap ("WeakDelegate"), Abstract]
	//	UIViewControllerPreviewingDelegate Delegate { get; }

	//	// @required @property (readonly, nonatomic) id<UIViewControllerPreviewingDelegate> _Nonnull delegate __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("delegate")]
	//	NSObject WeakDelegate { get; }

	//	// @required @property (readonly, nonatomic) UIView * _Nonnull sourceView __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Abstract]
	//	[Export ("sourceView")]
	//	UIView SourceView { get; }

	//	// @required @property (nonatomic) CGRect sourceRect __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Abstract]
	//	[Export ("sourceRect", ArgumentSemantic.Assign)]
	//	CGRect SourceRect { get; set; }
	//}

	//// @protocol UIViewControllerPreviewingDelegate <NSObject>
	//[iOS (9,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIViewControllerPreviewingDelegate
	//{
	//	// @required -(UIViewController * _Nullable)previewingContext:(id<UIViewControllerPreviewing> _Nonnull)previewingContext viewControllerForLocation:(CGPoint)location __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Abstract]
	//	[Export ("previewingContext:viewControllerForLocation:")]
	//	[return: NullAllowed]
	//	UIViewController PreviewingContext (UIViewControllerPreviewing previewingContext, CGPoint location);

	//	// @required -(void)previewingContext:(id<UIViewControllerPreviewing> _Nonnull)previewingContext commitViewController:(UIViewController * _Nonnull)viewControllerToCommit __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Abstract]
	//	[Export ("previewingContext:commitViewController:")]
	//	void PreviewingContext (UIViewControllerPreviewing previewingContext, UIViewController viewControllerToCommit);
	//}

	//// @interface UIViewControllerPreviewingRegistration (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIViewControllerPreviewingRegistration
	//{
	//	// -(id<UIViewControllerPreviewing> _Nonnull)registerForPreviewingWithDelegate:(id<UIViewControllerPreviewingDelegate> _Nonnull)delegate sourceView:(UIView * _Nonnull)sourceView __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("registerForPreviewingWithDelegate:sourceView:")]
	//	UIViewControllerPreviewing RegisterForPreviewingWithDelegate (UIViewControllerPreviewingDelegate @delegate, UIView sourceView);

	//	// -(void)unregisterForPreviewingWithContext:(id<UIViewControllerPreviewing> _Nonnull)previewing __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("unregisterForPreviewingWithContext:")]
	//	void UnregisterForPreviewingWithContext (UIViewControllerPreviewing previewing);
	//}

	//// @interface UIScreenEdgesDeferringSystemGestures (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIScreenEdgesDeferringSystemGestures
	//{
	//	// @property (readonly, nonatomic) UIViewController * _Nullable childViewControllerForScreenEdgesDeferringSystemGestures __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[NullAllowed, Export ("childViewControllerForScreenEdgesDeferringSystemGestures")]
	//	UIViewController ChildViewControllerForScreenEdgesDeferringSystemGestures { get; }

	//	// @property (readonly, nonatomic) UIRectEdge preferredScreenEdgesDeferringSystemGestures __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("preferredScreenEdgesDeferringSystemGestures")]
	//	UIRectEdge PreferredScreenEdgesDeferringSystemGestures { get; }

	//	// -(void)setNeedsUpdateOfScreenEdgesDeferringSystemGestures __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Export ("setNeedsUpdateOfScreenEdgesDeferringSystemGestures")]
	//	void SetNeedsUpdateOfScreenEdgesDeferringSystemGestures ();
	//}

	//// @interface UIHomeIndicatorAutoHidden (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIHomeIndicatorAutoHidden
	//{
	//	// @property (readonly, nonatomic) UIViewController * _Nullable childViewControllerForHomeIndicatorAutoHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[NullAllowed, Export ("childViewControllerForHomeIndicatorAutoHidden")]
	//	UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }

	//	// @property (readonly, nonatomic) BOOL prefersHomeIndicatorAutoHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("prefersHomeIndicatorAutoHidden")]
	//	bool PrefersHomeIndicatorAutoHidden { get; }

	//	// -(void)setNeedsUpdateOfHomeIndicatorAutoHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Export ("setNeedsUpdateOfHomeIndicatorAutoHidden")]
	//	void SetNeedsUpdateOfHomeIndicatorAutoHidden ();
	//}

	//// @interface  (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_
	//{
	//	// @property (readonly, nonatomic) NSArray<id<UIPreviewActionItem>> * _Nonnull previewActionItems __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("previewActionItems")]
	//	UIPreviewActionItem[] PreviewActionItems { get; }
	//}

	//// @protocol UIPreviewActionItem <NSObject>
	//[iOS (9,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIPreviewActionItem
	//{
	//	// @required @property (readonly, copy, nonatomic) NSString * _Nonnull title;
	//	[Abstract]
	//	[Export ("title")]
	//	string Title { get; }
	//}

	//// @interface UIPreviewAction : NSObject <NSCopying, UIPreviewActionItem>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIPreviewAction : INSCopying, IUIPreviewActionItem
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nonnull)(id<UIPreviewActionItem> _Nonnull, UIViewController * _Nonnull) handler;
	//	[Export ("handler", ArgumentSemantic.Copy)]
	//	Action<UIPreviewActionItem, UIViewController> Handler { get; }

	//	// +(instancetype _Nonnull)actionWithTitle:(NSString * _Nonnull)title style:(UIPreviewActionStyle)style handler:(void (^ _Nonnull)(UIPreviewAction * _Nonnull, UIViewController * _Nonnull))handler;
	//	[Static]
	//	[Export ("actionWithTitle:style:handler:")]
	//	UIPreviewAction ActionWithTitle (string title, UIPreviewActionStyle style, Action<UIPreviewAction, UIViewController> handler);
	//}

	//// @interface UIPreviewActionGroup : NSObject <NSCopying, UIPreviewActionItem>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIPreviewActionGroup : INSCopying, IUIPreviewActionItem
	//{
	//	// +(instancetype _Nonnull)actionGroupWithTitle:(NSString * _Nonnull)title style:(UIPreviewActionStyle)style actions:(NSArray<UIPreviewAction *> * _Nonnull)actions;
	//	[Static]
	//	[Export ("actionGroupWithTitle:style:actions:")]
	//	UIPreviewActionGroup ActionGroupWithTitle (string title, UIPreviewActionStyle style, UIPreviewAction[] actions);
	//}

	//// typedef void (^UIActivityViewControllerCompletionHandler)(UIActivityType _Nullable, BOOL);
	//delegate void UIActivityViewControllerCompletionHandler ([NullAllowed] string arg0, bool arg1);

	//// typedef void (^UIActivityViewControllerCompletionWithItemsHandler)(UIActivityType _Nullable, BOOL, NSArray * _Nullable, NSError * _Nullable);
	//delegate void UIActivityViewControllerCompletionWithItemsHandler ([NullAllowed] string arg0, bool arg1, [NullAllowed] NSObject[] arg2, [NullAllowed] NSError arg3);

	//// @interface UIActivityViewController : UIViewController
	//[NoTV, iOS (6,0)]
	//[BaseType (typeof(UIViewController))]
	//[DisableDefaultCtor]
	//interface UIActivityViewController
	//{
	//	// -(instancetype _Nonnull)initWithActivityItems:(NSArray * _Nonnull)activityItems applicationActivities:(NSArray<__kindof UIActivity *> * _Nullable)applicationActivities __attribute__((objc_designated_initializer));
	//	[Export ("initWithActivityItems:applicationActivities:")]
	//	[DesignatedInitializer]
	//	[Verify (StronglyTypedNSArray)]
	//	IntPtr Constructor (NSObject[] activityItems, [NullAllowed] UIActivity[] applicationActivities);

	//	// @property (copy, nonatomic) UIActivityViewControllerCompletionHandler _Nullable completionHandler __attribute__((availability(ios, introduced=6.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 6, 0, message: "Use completionWithItemsHandler instead.")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use completionWithItemsHandler instead.")]
	//	[NullAllowed, Export ("completionHandler", ArgumentSemantic.Copy)]
	//	UIActivityViewControllerCompletionHandler CompletionHandler { get; set; }

	//	// @property (copy, nonatomic) UIActivityViewControllerCompletionWithItemsHandler _Nullable completionWithItemsHandler __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("completionWithItemsHandler", ArgumentSemantic.Copy)]
	//	UIActivityViewControllerCompletionWithItemsHandler CompletionWithItemsHandler { get; set; }

	//	// @property (copy, nonatomic) NSArray<UIActivityType> * _Nullable excludedActivityTypes;
	//	[NullAllowed, Export ("excludedActivityTypes", ArgumentSemantic.Copy)]
	//	string[] ExcludedActivityTypes { get; set; }
	//}

	//// @interface UIAlertAction : NSObject <NSCopying>
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIAlertAction : INSCopying
	//{
	//	// +(instancetype _Nonnull)actionWithTitle:(NSString * _Nullable)title style:(UIAlertActionStyle)style handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
	//	[Static]
	//	[Export ("actionWithTitle:style:handler:")]
	//	UIAlertAction ActionWithTitle ([NullAllowed] string title, UIAlertActionStyle style, [NullAllowed] Action<UIAlertAction> handler);

	//	// @property (readonly, nonatomic) NSString * _Nullable title;
	//	[NullAllowed, Export ("title")]
	//	string Title { get; }

	//	// @property (readonly, nonatomic) UIAlertActionStyle style;
	//	[Export ("style")]
	//	UIAlertActionStyle Style { get; }

	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }
	//}

	//// @interface UIAlertController : UIViewController
	//[iOS (8,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UIAlertController
	//{
	//	// +(instancetype _Nonnull)alertControllerWithTitle:(NSString * _Nullable)title message:(NSString * _Nullable)message preferredStyle:(UIAlertControllerStyle)preferredStyle;
	//	[Static]
	//	[Export ("alertControllerWithTitle:message:preferredStyle:")]
	//	UIAlertController AlertControllerWithTitle ([NullAllowed] string title, [NullAllowed] string message, UIAlertControllerStyle preferredStyle);

	//	// -(void)addAction:(UIAlertAction * _Nonnull)action;
	//	[Export ("addAction:")]
	//	void AddAction (UIAlertAction action);

	//	// @property (readonly, nonatomic) NSArray<UIAlertAction *> * _Nonnull actions;
	//	[Export ("actions")]
	//	UIAlertAction[] Actions { get; }

	//	// @property (nonatomic, strong) UIAlertAction * _Nullable preferredAction __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("preferredAction", ArgumentSemantic.Strong)]
	//	UIAlertAction PreferredAction { get; set; }

	//	// -(void)addTextFieldWithConfigurationHandler:(void (^ _Nullable)(UITextField * _Nonnull))configurationHandler;
	//	[Export ("addTextFieldWithConfigurationHandler:")]
	//	void AddTextFieldWithConfigurationHandler ([NullAllowed] Action<UITextField> configurationHandler);

	//	// @property (readonly, nonatomic) NSArray<UITextField *> * _Nullable textFields;
	//	[NullAllowed, Export ("textFields")]
	//	UITextField[] TextFields { get; }

	//	// @property (copy, nonatomic) NSString * _Nullable title;
	//	[NullAllowed, Export ("title")]
	//	string Title { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable message;
	//	[NullAllowed, Export ("message")]
	//	string Message { get; set; }

	//	// @property (readonly, nonatomic) UIAlertControllerStyle preferredStyle;
	//	[Export ("preferredStyle")]
	//	UIAlertControllerStyle PreferredStyle { get; }
	//}

	//// @interface SpringLoading (UIAlertController) <UISpringLoadedInteractionSupporting>
	//[Category]
	//[BaseType (typeof(UIAlertController))]
	//interface UIAlertController_SpringLoading : IUISpringLoadedInteractionSupporting
	//{
	//}

	//// @protocol UIBarPositioning <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIBarPositioning
	//{
	//	// @required @property (readonly, nonatomic) UIBarPosition barPosition;
	//	[Abstract]
	//	[Export ("barPosition")]
	//	UIBarPosition BarPosition { get; }
	//}

	//// @protocol UIBarPositioningDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIBarPositioningDelegate
	//{
	//	// @optional -(UIBarPosition)positionForBar:(id<UIBarPositioning> _Nonnull)bar;
	//	[Export ("positionForBar:")]
	//	UIBarPosition PositionForBar (UIBarPositioning bar);
	//}

	//// @interface UIBarButtonItem : UIBarItem <NSCoding>
	//[iOS (2,0)]
	//[BaseType (typeof(UIBarItem))]
	//interface UIBarButtonItem : INSCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(instancetype _Nonnull)initWithImage:(UIImage * _Nullable)image style:(UIBarButtonItemStyle)style target:(id _Nullable)target action:(SEL _Nullable)action;
	//	[Export ("initWithImage:style:target:action:")]
	//	IntPtr Constructor ([NullAllowed] UIImage image, UIBarButtonItemStyle style, [NullAllowed] NSObject target, [NullAllowed] Selector action);

	//	// -(instancetype _Nonnull)initWithImage:(UIImage * _Nullable)image landscapeImagePhone:(UIImage * _Nullable)landscapeImagePhone style:(UIBarButtonItemStyle)style target:(id _Nullable)target action:(SEL _Nullable)action __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithImage:landscapeImagePhone:style:target:action:")]
	//	IntPtr Constructor ([NullAllowed] UIImage image, [NullAllowed] UIImage landscapeImagePhone, UIBarButtonItemStyle style, [NullAllowed] NSObject target, [NullAllowed] Selector action);

	//	// -(instancetype _Nonnull)initWithTitle:(NSString * _Nullable)title style:(UIBarButtonItemStyle)style target:(id _Nullable)target action:(SEL _Nullable)action;
	//	[Export ("initWithTitle:style:target:action:")]
	//	IntPtr Constructor ([NullAllowed] string title, UIBarButtonItemStyle style, [NullAllowed] NSObject target, [NullAllowed] Selector action);

	//	// -(instancetype _Nonnull)initWithBarButtonSystemItem:(UIBarButtonSystemItem)systemItem target:(id _Nullable)target action:(SEL _Nullable)action;
	//	[Export ("initWithBarButtonSystemItem:target:action:")]
	//	IntPtr Constructor (UIBarButtonSystemItem systemItem, [NullAllowed] NSObject target, [NullAllowed] Selector action);

	//	// -(instancetype _Nonnull)initWithCustomView:(UIView * _Nonnull)customView;
	//	[Export ("initWithCustomView:")]
	//	IntPtr Constructor (UIView customView);

	//	// @property (nonatomic) UIBarButtonItemStyle style;
	//	[Export ("style", ArgumentSemantic.Assign)]
	//	UIBarButtonItemStyle Style { get; set; }

	//	// @property (nonatomic) CGFloat width;
	//	[Export ("width")]
	//	nfloat Width { get; set; }

	//	// @property (copy, nonatomic) NSSet<NSString *> * _Nullable possibleTitles;
	//	[NullAllowed, Export ("possibleTitles", ArgumentSemantic.Copy)]
	//	NSSet<NSString> PossibleTitles { get; set; }

	//	// @property (nonatomic, strong) __kindof UIView * _Nullable customView;
	//	[Export ("customView", ArgumentSemantic.Strong)]
	//	UIView CustomView { get; set; }

	//	// @property (nonatomic) SEL _Nullable action;
	//	[NullAllowed, Export ("action", ArgumentSemantic.Assign)]
	//	Selector Action { get; set; }

	//	// @property (nonatomic, weak) id _Nullable target;
	//	[NullAllowed, Export ("target", ArgumentSemantic.Weak)]
	//	NSObject Target { get; set; }

	//	// -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setBackgroundImage:forState:barMetrics:")]
	//	void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState state, UIBarMetrics barMetrics);

	//	// -(UIImage * _Nullable)backgroundImageForState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("backgroundImageForState:barMetrics:")]
	//	[return: NullAllowed]
	//	UIImage BackgroundImageForState (UIControlState state, UIBarMetrics barMetrics);

	//	// -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state style:(UIBarButtonItemStyle)style barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("setBackgroundImage:forState:style:barMetrics:")]
	//	void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState state, UIBarButtonItemStyle style, UIBarMetrics barMetrics);

	//	// -(UIImage * _Nullable)backgroundImageForState:(UIControlState)state style:(UIBarButtonItemStyle)style barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("backgroundImageForState:style:barMetrics:")]
	//	[return: NullAllowed]
	//	UIImage BackgroundImageForState (UIControlState state, UIBarButtonItemStyle style, UIBarMetrics barMetrics);

	//	// @property (nonatomic, strong) UIColor * _Nullable tintColor __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// -(void)setBackgroundVerticalPositionAdjustment:(CGFloat)adjustment forBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setBackgroundVerticalPositionAdjustment:forBarMetrics:")]
	//	void SetBackgroundVerticalPositionAdjustment (nfloat adjustment, UIBarMetrics barMetrics);

	//	// -(CGFloat)backgroundVerticalPositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("backgroundVerticalPositionAdjustmentForBarMetrics:")]
	//	nfloat BackgroundVerticalPositionAdjustmentForBarMetrics (UIBarMetrics barMetrics);

	//	// -(void)setTitlePositionAdjustment:(UIOffset)adjustment forBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setTitlePositionAdjustment:forBarMetrics:")]
	//	void SetTitlePositionAdjustment (UIOffset adjustment, UIBarMetrics barMetrics);

	//	// -(UIOffset)titlePositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("titlePositionAdjustmentForBarMetrics:")]
	//	UIOffset TitlePositionAdjustmentForBarMetrics (UIBarMetrics barMetrics);

	//	// -(void)setBackButtonBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5,0)]
	//	[Export ("setBackButtonBackgroundImage:forState:barMetrics:")]
	//	void SetBackButtonBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState state, UIBarMetrics barMetrics);

	//	// -(UIImage * _Nullable)backButtonBackgroundImageForState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5,0)]
	//	[Export ("backButtonBackgroundImageForState:barMetrics:")]
	//	[return: NullAllowed]
	//	UIImage BackButtonBackgroundImageForState (UIControlState state, UIBarMetrics barMetrics);

	//	// -(void)setBackButtonTitlePositionAdjustment:(UIOffset)adjustment forBarMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5,0)]
	//	[Export ("setBackButtonTitlePositionAdjustment:forBarMetrics:")]
	//	void SetBackButtonTitlePositionAdjustment (UIOffset adjustment, UIBarMetrics barMetrics);

	//	// -(UIOffset)backButtonTitlePositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5,0)]
	//	[Export ("backButtonTitlePositionAdjustmentForBarMetrics:")]
	//	UIOffset BackButtonTitlePositionAdjustmentForBarMetrics (UIBarMetrics barMetrics);

	//	// -(void)setBackButtonBackgroundVerticalPositionAdjustment:(CGFloat)adjustment forBarMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5,0)]
	//	[Export ("setBackButtonBackgroundVerticalPositionAdjustment:forBarMetrics:")]
	//	void SetBackButtonBackgroundVerticalPositionAdjustment (nfloat adjustment, UIBarMetrics barMetrics);

	//	// -(CGFloat)backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5,0)]
	//	[Export ("backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:")]
	//	nfloat BackButtonBackgroundVerticalPositionAdjustmentForBarMetrics (UIBarMetrics barMetrics);
	//}

	//// @interface SpringLoading (UIBarButtonItem) <UISpringLoadedInteractionSupporting>
	//[Category]
	//[BaseType (typeof(UIBarButtonItem))]
	//interface UIBarButtonItem_SpringLoading : IUISpringLoadedInteractionSupporting
	//{
	//}

	//// @interface UIBarButtonItemGroup : NSObject <NSCoding>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIBarButtonItemGroup : INSCoding
	//{
	//	// -(instancetype _Nonnull)initWithBarButtonItems:(NSArray<UIBarButtonItem *> * _Nonnull)barButtonItems representativeItem:(UIBarButtonItem * _Nullable)representativeItem __attribute__((objc_designated_initializer));
	//	[Export ("initWithBarButtonItems:representativeItem:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIBarButtonItem[] barButtonItems, [NullAllowed] UIBarButtonItem representativeItem);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readwrite, copy, nonatomic) NSArray<UIBarButtonItem *> * _Nonnull barButtonItems;
	//	[Export ("barButtonItems", ArgumentSemantic.Copy)]
	//	UIBarButtonItem[] BarButtonItems { get; set; }

	//	// @property (readwrite, nonatomic, strong) UIBarButtonItem * _Nullable representativeItem;
	//	[NullAllowed, Export ("representativeItem", ArgumentSemantic.Strong)]
	//	UIBarButtonItem RepresentativeItem { get; set; }

	//	// @property (readonly, getter = isDisplayingRepresentativeItem, assign, nonatomic) BOOL displayingRepresentativeItem;
	//	[Export ("displayingRepresentativeItem")]
	//	bool DisplayingRepresentativeItem { [Bind ("isDisplayingRepresentativeItem")] get; }
	//}

	//// @interface UIBarButtonItemGroup (UIBarButtonItem)
	//[Category]
	//[BaseType (typeof(UIBarButtonItem))]
	//interface UIBarButtonItem_UIBarButtonItemGroup
	//{
	//	// @property (readonly, nonatomic, weak) UIBarButtonItemGroup * _Nullable buttonGroup __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("buttonGroup", ArgumentSemantic.Weak)]
	//	UIBarButtonItemGroup ButtonGroup { get; }
	//}

	//// @interface UIKitAdditions (NSIndexPath)
	//[Category]
	//[BaseType (typeof(NSIndexPath))]
	//interface NSIndexPath_UIKitAdditions
	//{
	//	// +(instancetype _Nonnull)indexPathForRow:(NSInteger)row inSection:(NSInteger)section;
	//	[Static]
	//	[Export ("indexPathForRow:inSection:")]
	//	NSIndexPath IndexPathForRow (nint row, nint section);

	//	// +(instancetype _Nonnull)indexPathForItem:(NSInteger)item inSection:(NSInteger)section __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("indexPathForItem:inSection:")]
	//	NSIndexPath IndexPathForItem (nint item, nint section);

	//	// @property (readonly, nonatomic) NSInteger section;
	//	[Export ("section")]
	//	nint Section { get; }

	//	// @property (readonly, nonatomic) NSInteger row;
	//	[Export ("row")]
	//	nint Row { get; }

	//	// @property (readonly, nonatomic) NSInteger item __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("item")]
	//	nint Item { get; }
	//}

	//// @protocol UIDataSourceTranslating <NSObject>
	//[TV (11,0), iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIDataSourceTranslating
	//{
	//	// @required -(NSInteger)presentationSectionIndexForDataSourceSectionIndex:(NSInteger)dataSourceSectionIndex;
	//	[Abstract]
	//	[Export ("presentationSectionIndexForDataSourceSectionIndex:")]
	//	nint PresentationSectionIndexForDataSourceSectionIndex (nint dataSourceSectionIndex);

	//	// @required -(NSInteger)dataSourceSectionIndexForPresentationSectionIndex:(NSInteger)presentationSectionIndex;
	//	[Abstract]
	//	[Export ("dataSourceSectionIndexForPresentationSectionIndex:")]
	//	nint DataSourceSectionIndexForPresentationSectionIndex (nint presentationSectionIndex);

	//	// @required -(NSIndexPath * _Nullable)presentationIndexPathForDataSourceIndexPath:(NSIndexPath * _Nullable)dataSourceIndexPath;
	//	[Abstract]
	//	[Export ("presentationIndexPathForDataSourceIndexPath:")]
	//	[return: NullAllowed]
	//	NSIndexPath PresentationIndexPathForDataSourceIndexPath ([NullAllowed] NSIndexPath dataSourceIndexPath);

	//	// @required -(NSIndexPath * _Nullable)dataSourceIndexPathForPresentationIndexPath:(NSIndexPath * _Nullable)presentationIndexPath;
	//	[Abstract]
	//	[Export ("dataSourceIndexPathForPresentationIndexPath:")]
	//	[return: NullAllowed]
	//	NSIndexPath DataSourceIndexPathForPresentationIndexPath ([NullAllowed] NSIndexPath presentationIndexPath);

	//	// @required -(void)performUsingPresentationValues:(void (^ _Nonnull)(void))actionsToTranslate;
	//	[Abstract]
	//	[Export ("performUsingPresentationValues:")]
	//	void PerformUsingPresentationValues (Action actionsToTranslate);
	//}

	//// typedef void (^UICollectionViewLayoutInteractiveTransitionCompletion)(BOOL, BOOL);
	//delegate void UICollectionViewLayoutInteractiveTransitionCompletion (bool arg0, bool arg1);

	//// @interface UICollectionViewFocusUpdateContext : UIFocusUpdateContext
	//[iOS (9,0)]
	//[BaseType (typeof(UIFocusUpdateContext))]
	//interface UICollectionViewFocusUpdateContext
	//{
	//	// @property (readonly, nonatomic, strong) NSIndexPath * _Nullable previouslyFocusedIndexPath;
	//	[NullAllowed, Export ("previouslyFocusedIndexPath", ArgumentSemantic.Strong)]
	//	NSIndexPath PreviouslyFocusedIndexPath { get; }

	//	// @property (readonly, nonatomic, strong) NSIndexPath * _Nullable nextFocusedIndexPath;
	//	[NullAllowed, Export ("nextFocusedIndexPath", ArgumentSemantic.Strong)]
	//	NSIndexPath NextFocusedIndexPath { get; }
	//}

	//// @protocol UICollectionViewDataSource <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UICollectionViewDataSource
	//{
	//	// @required -(NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
	//	[Abstract]
	//	[Export ("collectionView:numberOfItemsInSection:")]
	//	nint CollectionView (UICollectionView collectionView, nint section);

	//	// @required -(__kindof UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Abstract]
	//	[Export ("collectionView:cellForItemAtIndexPath:")]
	//	UICollectionViewCell CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
	//	[Export ("numberOfSectionsInCollectionView:")]
	//	nint NumberOfSectionsInCollectionView (UICollectionView collectionView);

	//	// @optional -(UICollectionReusableView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView viewForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:viewForSupplementaryElementOfKind:atIndexPath:")]
	//	UICollectionReusableView CollectionView (UICollectionView collectionView, string kind, NSIndexPath indexPath);

	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canMoveItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("collectionView:canMoveItemAtIndexPath:")]
	//	bool CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView moveItemAtIndexPath:(NSIndexPath * _Nonnull)sourceIndexPath toIndexPath:(NSIndexPath * _Nonnull)destinationIndexPath __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("collectionView:moveItemAtIndexPath:toIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, NSIndexPath sourceIndexPath, NSIndexPath destinationIndexPath);

	//	// @optional -(NSArray<NSString *> * _Nullable)indexTitlesForCollectionView:(UICollectionView * _Nonnull)collectionView __attribute__((availability(tvos, introduced=10.2)));
	//	[TV (10,2)]
	//	[Export ("indexTitlesForCollectionView:")]
	//	[return: NullAllowed]
	//	string[] IndexTitlesForCollectionView (UICollectionView collectionView);

	//	// @optional -(NSIndexPath * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView indexPathForIndexTitle:(NSString * _Nonnull)title atIndex:(NSInteger)index __attribute__((availability(tvos, introduced=10.2)));
	//	[TV (10,2)]
	//	[Export ("collectionView:indexPathForIndexTitle:atIndex:")]
	//	NSIndexPath CollectionView (UICollectionView collectionView, string title, nint index);
	//}

	//// @protocol UICollectionViewDataSourcePrefetching <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UICollectionViewDataSourcePrefetching
	//{
	//	// @required -(void)collectionView:(UICollectionView * _Nonnull)collectionView prefetchItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Abstract]
	//	[Export ("collectionView:prefetchItemsAtIndexPaths:")]
	//	void PrefetchItemsAtIndexPaths (UICollectionView collectionView, NSIndexPath[] indexPaths);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView cancelPrefetchingForItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("collectionView:cancelPrefetchingForItemsAtIndexPaths:")]
	//	void CancelPrefetchingForItemsAtIndexPaths (UICollectionView collectionView, NSIndexPath[] indexPaths);
	//}

	//// @protocol UICollectionViewDelegate <UIScrollViewDelegate>
	//[Protocol, Model]
	//interface UICollectionViewDelegate : IUIScrollViewDelegate
	//{
	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:shouldHighlightItemAtIndexPath:")]
	//	bool CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:didHighlightItemAtIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:didUnhighlightItemAtIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:shouldSelectItemAtIndexPath:")]
	//	bool CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:shouldDeselectItemAtIndexPath:")]
	//	bool CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:didSelectItemAtIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:didDeselectItemAtIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("collectionView:willDisplayCell:forItemAtIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, UICollectionViewCell cell, NSIndexPath indexPath);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplaySupplementaryView:(UICollectionReusableView * _Nonnull)view forElementKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, UICollectionReusableView view, string elementKind, NSIndexPath indexPath);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:didEndDisplayingCell:forItemAtIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, UICollectionViewCell cell, NSIndexPath indexPath);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingSupplementaryView:(UICollectionReusableView * _Nonnull)view forElementOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, UICollectionReusableView view, string elementKind, NSIndexPath indexPath);

	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldShowMenuForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:shouldShowMenuForItemAtIndexPath:")]
	//	bool CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canPerformAction:(SEL _Nonnull)action forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender;
	//	[Export ("collectionView:canPerformAction:forItemAtIndexPath:withSender:")]
	//	bool CollectionView (UICollectionView collectionView, Selector action, NSIndexPath indexPath, [NullAllowed] NSObject sender);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView performAction:(SEL _Nonnull)action forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender;
	//	[Export ("collectionView:performAction:forItemAtIndexPath:withSender:")]
	//	void CollectionView (UICollectionView collectionView, Selector action, NSIndexPath indexPath, [NullAllowed] NSObject sender);

	//	// @optional -(UICollectionViewTransitionLayout * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView transitionLayoutForOldLayout:(UICollectionViewLayout * _Nonnull)fromLayout newLayout:(UICollectionViewLayout * _Nonnull)toLayout;
	//	[Export ("collectionView:transitionLayoutForOldLayout:newLayout:")]
	//	UICollectionViewTransitionLayout CollectionView (UICollectionView collectionView, UICollectionViewLayout fromLayout, UICollectionViewLayout toLayout);

	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canFocusItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("collectionView:canFocusItemAtIndexPath:")]
	//	bool CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldUpdateFocusInContext:(UICollectionViewFocusUpdateContext * _Nonnull)context __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("collectionView:shouldUpdateFocusInContext:")]
	//	bool CollectionView (UICollectionView collectionView, UICollectionViewFocusUpdateContext context);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didUpdateFocusInContext:(UICollectionViewFocusUpdateContext * _Nonnull)context withAnimationCoordinator:(UIFocusAnimationCoordinator * _Nonnull)coordinator __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("collectionView:didUpdateFocusInContext:withAnimationCoordinator:")]
	//	void CollectionView (UICollectionView collectionView, UICollectionViewFocusUpdateContext context, UIFocusAnimationCoordinator coordinator);

	//	// @optional -(NSIndexPath * _Nullable)indexPathForPreferredFocusedViewInCollectionView:(UICollectionView * _Nonnull)collectionView __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("indexPathForPreferredFocusedViewInCollectionView:")]
	//	[return: NullAllowed]
	//	NSIndexPath IndexPathForPreferredFocusedViewInCollectionView (UICollectionView collectionView);

	//	// @optional -(NSIndexPath * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView targetIndexPathForMoveFromItemAtIndexPath:(NSIndexPath * _Nonnull)originalIndexPath toProposedIndexPath:(NSIndexPath * _Nonnull)proposedIndexPath __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:")]
	//	NSIndexPath CollectionView (UICollectionView collectionView, NSIndexPath originalIndexPath, NSIndexPath proposedIndexPath);

	//	// @optional -(CGPoint)collectionView:(UICollectionView * _Nonnull)collectionView targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("collectionView:targetContentOffsetForProposedContentOffset:")]
	//	CGPoint CollectionView (UICollectionView collectionView, CGPoint proposedContentOffset);

	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSpringLoadItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath withContext:(id<UISpringLoadedInteractionContext> _Nonnull)context __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Export ("collectionView:shouldSpringLoadItemAtIndexPath:withContext:")]
	//	bool CollectionView (UICollectionView collectionView, NSIndexPath indexPath, UISpringLoadedInteractionContext context);
	//}

	//// @interface UICollectionView : UIScrollView <UIDataSourceTranslating>
	//[iOS (6,0)]
	//[BaseType (typeof(UIScrollView))]
	//interface UICollectionView : IUIDataSourceTranslating
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:collectionViewLayout:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame, UICollectionViewLayout layout);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (nonatomic, strong) UICollectionViewLayout * _Nonnull collectionViewLayout;
	//	[Export ("collectionViewLayout", ArgumentSemantic.Strong)]
	//	UICollectionViewLayout CollectionViewLayout { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UICollectionViewDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UICollectionViewDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic, weak) id<UICollectionViewDataSource> _Nullable dataSource;
	//	[NullAllowed, Export ("dataSource", ArgumentSemantic.Weak)]
	//	UICollectionViewDataSource DataSource { get; set; }

	//	// @property (nonatomic, weak) id<UICollectionViewDataSourcePrefetching> _Nullable prefetchDataSource __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("prefetchDataSource", ArgumentSemantic.Weak)]
	//	UICollectionViewDataSourcePrefetching PrefetchDataSource { get; set; }

	//	// @property (getter = isPrefetchingEnabled, nonatomic) BOOL prefetchingEnabled __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("prefetchingEnabled")]
	//	bool PrefetchingEnabled { [Bind ("isPrefetchingEnabled")] get; set; }

	//	[Wrap ("WeakDragDelegate")]
	//	[NullAllowed]
	//	UICollectionViewDragDelegate DragDelegate { get; set; }

	//	// @property (nonatomic, weak) id<UICollectionViewDragDelegate> _Nullable dragDelegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[NullAllowed, Export ("dragDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDragDelegate { get; set; }

	//	[Wrap ("WeakDropDelegate")]
	//	[NullAllowed]
	//	UICollectionViewDropDelegate DropDelegate { get; set; }

	//	// @property (nonatomic, weak) id<UICollectionViewDropDelegate> _Nullable dropDelegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[NullAllowed, Export ("dropDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDropDelegate { get; set; }

	//	// @property (nonatomic) BOOL dragInteractionEnabled __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("dragInteractionEnabled")]
	//	bool DragInteractionEnabled { get; set; }

	//	// @property (nonatomic) UICollectionViewReorderingCadence reorderingCadence __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("reorderingCadence", ArgumentSemantic.Assign)]
	//	UICollectionViewReorderingCadence ReorderingCadence { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable backgroundView;
	//	[NullAllowed, Export ("backgroundView", ArgumentSemantic.Strong)]
	//	UIView BackgroundView { get; set; }

	//	// -(void)registerClass:(Class _Nullable)cellClass forCellWithReuseIdentifier:(NSString * _Nonnull)identifier;
	//	[Export ("registerClass:forCellWithReuseIdentifier:")]
	//	void RegisterClass ([NullAllowed] Class cellClass, string identifier);

	//	// -(void)registerNib:(UINib * _Nullable)nib forCellWithReuseIdentifier:(NSString * _Nonnull)identifier;
	//	[Export ("registerNib:forCellWithReuseIdentifier:")]
	//	void RegisterNib ([NullAllowed] UINib nib, string identifier);

	//	// -(void)registerClass:(Class _Nullable)viewClass forSupplementaryViewOfKind:(NSString * _Nonnull)elementKind withReuseIdentifier:(NSString * _Nonnull)identifier;
	//	[Export ("registerClass:forSupplementaryViewOfKind:withReuseIdentifier:")]
	//	void RegisterClass ([NullAllowed] Class viewClass, string elementKind, string identifier);

	//	// -(void)registerNib:(UINib * _Nullable)nib forSupplementaryViewOfKind:(NSString * _Nonnull)kind withReuseIdentifier:(NSString * _Nonnull)identifier;
	//	[Export ("registerNib:forSupplementaryViewOfKind:withReuseIdentifier:")]
	//	void RegisterNib ([NullAllowed] UINib nib, string kind, string identifier);

	//	// -(__kindof UICollectionViewCell * _Nonnull)dequeueReusableCellWithReuseIdentifier:(NSString * _Nonnull)identifier forIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("dequeueReusableCellWithReuseIdentifier:forIndexPath:")]
	//	UICollectionViewCell DequeueReusableCellWithReuseIdentifier (string identifier, NSIndexPath indexPath);

	//	// -(__kindof UICollectionReusableView * _Nonnull)dequeueReusableSupplementaryViewOfKind:(NSString * _Nonnull)elementKind withReuseIdentifier:(NSString * _Nonnull)identifier forIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:")]
	//	UICollectionReusableView DequeueReusableSupplementaryViewOfKind (string elementKind, string identifier, NSIndexPath indexPath);

	//	// @property (nonatomic) BOOL allowsSelection;
	//	[Export ("allowsSelection")]
	//	bool AllowsSelection { get; set; }

	//	// @property (nonatomic) BOOL allowsMultipleSelection;
	//	[Export ("allowsMultipleSelection")]
	//	bool AllowsMultipleSelection { get; set; }

	//	// @property (readonly, nonatomic) NSArray<NSIndexPath *> * _Nullable indexPathsForSelectedItems;
	//	[NullAllowed, Export ("indexPathsForSelectedItems")]
	//	NSIndexPath[] IndexPathsForSelectedItems { get; }

	//	// -(void)selectItemAtIndexPath:(NSIndexPath * _Nullable)indexPath animated:(BOOL)animated scrollPosition:(UICollectionViewScrollPosition)scrollPosition;
	//	[Export ("selectItemAtIndexPath:animated:scrollPosition:")]
	//	void SelectItemAtIndexPath ([NullAllowed] NSIndexPath indexPath, bool animated, UICollectionViewScrollPosition scrollPosition);

	//	// -(void)deselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath animated:(BOOL)animated;
	//	[Export ("deselectItemAtIndexPath:animated:")]
	//	void DeselectItemAtIndexPath (NSIndexPath indexPath, bool animated);

	//	// @property (readonly, nonatomic) BOOL hasUncommittedUpdates __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("hasUncommittedUpdates")]
	//	bool HasUncommittedUpdates { get; }

	//	// -(void)reloadData;
	//	[Export ("reloadData")]
	//	void ReloadData ();

	//	// -(void)setCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout animated:(BOOL)animated;
	//	[Export ("setCollectionViewLayout:animated:")]
	//	void SetCollectionViewLayout (UICollectionViewLayout layout, bool animated);

	//	// -(void)setCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("setCollectionViewLayout:animated:completion:")]
	//	void SetCollectionViewLayout (UICollectionViewLayout layout, bool animated, [NullAllowed] Action<bool> completion);

	//	// -(UICollectionViewTransitionLayout * _Nonnull)startInteractiveTransitionToCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout completion:(UICollectionViewLayoutInteractiveTransitionCompletion _Nullable)completion __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("startInteractiveTransitionToCollectionViewLayout:completion:")]
	//	UICollectionViewTransitionLayout StartInteractiveTransitionToCollectionViewLayout (UICollectionViewLayout layout, [NullAllowed] UICollectionViewLayoutInteractiveTransitionCompletion completion);

	//	// -(void)finishInteractiveTransition __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("finishInteractiveTransition")]
	//	void FinishInteractiveTransition ();

	//	// -(void)cancelInteractiveTransition __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("cancelInteractiveTransition")]
	//	void CancelInteractiveTransition ();

	//	// @property (readonly, nonatomic) NSInteger numberOfSections;
	//	[Export ("numberOfSections")]
	//	nint NumberOfSections { get; }

	//	// -(NSInteger)numberOfItemsInSection:(NSInteger)section;
	//	[Export ("numberOfItemsInSection:")]
	//	nint NumberOfItemsInSection (nint section);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("layoutAttributesForItemAtIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes LayoutAttributesForItemAtIndexPath (NSIndexPath indexPath);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("layoutAttributesForSupplementaryElementOfKind:atIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryElementOfKind (string kind, NSIndexPath indexPath);

	//	// -(NSIndexPath * _Nullable)indexPathForItemAtPoint:(CGPoint)point;
	//	[Export ("indexPathForItemAtPoint:")]
	//	[return: NullAllowed]
	//	NSIndexPath IndexPathForItemAtPoint (CGPoint point);

	//	// -(NSIndexPath * _Nullable)indexPathForCell:(UICollectionViewCell * _Nonnull)cell;
	//	[Export ("indexPathForCell:")]
	//	[return: NullAllowed]
	//	NSIndexPath IndexPathForCell (UICollectionViewCell cell);

	//	// -(UICollectionViewCell * _Nullable)cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("cellForItemAtIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewCell CellForItemAtIndexPath (NSIndexPath indexPath);

	//	// @property (readonly, nonatomic) NSArray<__kindof UICollectionViewCell *> * _Nonnull visibleCells;
	//	[Export ("visibleCells")]
	//	UICollectionViewCell[] VisibleCells { get; }

	//	// @property (readonly, nonatomic) NSArray<NSIndexPath *> * _Nonnull indexPathsForVisibleItems;
	//	[Export ("indexPathsForVisibleItems")]
	//	NSIndexPath[] IndexPathsForVisibleItems { get; }

	//	// -(UICollectionReusableView * _Nullable)supplementaryViewForElementKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("supplementaryViewForElementKind:atIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionReusableView SupplementaryViewForElementKind (string elementKind, NSIndexPath indexPath);

	//	// -(NSArray<UICollectionReusableView *> * _Nonnull)visibleSupplementaryViewsOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("visibleSupplementaryViewsOfKind:")]
	//	UICollectionReusableView[] VisibleSupplementaryViewsOfKind (string elementKind);

	//	// -(NSArray<NSIndexPath *> * _Nonnull)indexPathsForVisibleSupplementaryElementsOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("indexPathsForVisibleSupplementaryElementsOfKind:")]
	//	NSIndexPath[] IndexPathsForVisibleSupplementaryElementsOfKind (string elementKind);

	//	// -(void)scrollToItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath atScrollPosition:(UICollectionViewScrollPosition)scrollPosition animated:(BOOL)animated;
	//	[Export ("scrollToItemAtIndexPath:atScrollPosition:animated:")]
	//	void ScrollToItemAtIndexPath (NSIndexPath indexPath, UICollectionViewScrollPosition scrollPosition, bool animated);

	//	// -(void)insertSections:(NSIndexSet * _Nonnull)sections;
	//	[Export ("insertSections:")]
	//	void InsertSections (NSIndexSet sections);

	//	// -(void)deleteSections:(NSIndexSet * _Nonnull)sections;
	//	[Export ("deleteSections:")]
	//	void DeleteSections (NSIndexSet sections);

	//	// -(void)reloadSections:(NSIndexSet * _Nonnull)sections;
	//	[Export ("reloadSections:")]
	//	void ReloadSections (NSIndexSet sections);

	//	// -(void)moveSection:(NSInteger)section toSection:(NSInteger)newSection;
	//	[Export ("moveSection:toSection:")]
	//	void MoveSection (nint section, nint newSection);

	//	// -(void)insertItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
	//	[Export ("insertItemsAtIndexPaths:")]
	//	void InsertItemsAtIndexPaths (NSIndexPath[] indexPaths);

	//	// -(void)deleteItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
	//	[Export ("deleteItemsAtIndexPaths:")]
	//	void DeleteItemsAtIndexPaths (NSIndexPath[] indexPaths);

	//	// -(void)reloadItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
	//	[Export ("reloadItemsAtIndexPaths:")]
	//	void ReloadItemsAtIndexPaths (NSIndexPath[] indexPaths);

	//	// -(void)moveItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath toIndexPath:(NSIndexPath * _Nonnull)newIndexPath;
	//	[Export ("moveItemAtIndexPath:toIndexPath:")]
	//	void MoveItemAtIndexPath (NSIndexPath indexPath, NSIndexPath newIndexPath);

	//	// -(void)performBatchUpdates:(void (^ _Nullable)(void))updates completion:(void (^ _Nullable)(BOOL))completion;
	//	[Export ("performBatchUpdates:completion:")]
	//	void PerformBatchUpdates ([NullAllowed] Action updates, [NullAllowed] Action<bool> completion);

	//	// -(BOOL)beginInteractiveMovementForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("beginInteractiveMovementForItemAtIndexPath:")]
	//	bool BeginInteractiveMovementForItemAtIndexPath (NSIndexPath indexPath);

	//	// -(void)updateInteractiveMovementTargetPosition:(CGPoint)targetPosition __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("updateInteractiveMovementTargetPosition:")]
	//	void UpdateInteractiveMovementTargetPosition (CGPoint targetPosition);

	//	// -(void)endInteractiveMovement __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("endInteractiveMovement")]
	//	void EndInteractiveMovement ();

	//	// -(void)cancelInteractiveMovement __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("cancelInteractiveMovement")]
	//	void CancelInteractiveMovement ();

	//	// @property (nonatomic) BOOL remembersLastFocusedIndexPath __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("remembersLastFocusedIndexPath")]
	//	bool RemembersLastFocusedIndexPath { get; set; }

	//	// @property (readonly, nonatomic) BOOL hasActiveDrag __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("hasActiveDrag")]
	//	bool HasActiveDrag { get; }

	//	// @property (readonly, nonatomic) BOOL hasActiveDrop __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("hasActiveDrop")]
	//	bool HasActiveDrop { get; }
	//}

	//// @interface UIDragAndDrop (UICollectionView) <UISpringLoadedInteractionSupporting>
	//[Category]
	//[BaseType (typeof(UICollectionView))]
	//interface UICollectionView_UIDragAndDrop : IUISpringLoadedInteractionSupporting
	//{
	//}

	//// @protocol UICollectionViewDragDelegate <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UICollectionViewDragDelegate
	//{
	//	// @required -(NSArray<UIDragItem *> * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView itemsForBeginningDragSession:(id<UIDragSession> _Nonnull)session atIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Abstract]
	//	[Export ("collectionView:itemsForBeginningDragSession:atIndexPath:")]
	//	UIDragItem[] CollectionView (UICollectionView collectionView, UIDragSession session, NSIndexPath indexPath);

	//	// @optional -(NSArray<UIDragItem *> * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView itemsForAddingToDragSession:(id<UIDragSession> _Nonnull)session atIndexPath:(NSIndexPath * _Nonnull)indexPath point:(CGPoint)point;
	//	[Export ("collectionView:itemsForAddingToDragSession:atIndexPath:point:")]
	//	UIDragItem[] CollectionView (UICollectionView collectionView, UIDragSession session, NSIndexPath indexPath, CGPoint point);

	//	// @optional -(UIDragPreviewParameters * _Nullable)collectionView:(UICollectionView * _Nonnull)collectionView dragPreviewParametersForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:dragPreviewParametersForItemAtIndexPath:")]
	//	[return: NullAllowed]
	//	UIDragPreviewParameters CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView dragSessionWillBegin:(id<UIDragSession> _Nonnull)session;
	//	[Export ("collectionView:dragSessionWillBegin:")]
	//	void CollectionView (UICollectionView collectionView, UIDragSession session);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView dragSessionDidEnd:(id<UIDragSession> _Nonnull)session;
	//	[Export ("collectionView:dragSessionDidEnd:")]
	//	void CollectionView (UICollectionView collectionView, UIDragSession session);

	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView dragSessionAllowsMoveOperation:(id<UIDragSession> _Nonnull)session;
	//	[Export ("collectionView:dragSessionAllowsMoveOperation:")]
	//	bool CollectionView (UICollectionView collectionView, UIDragSession session);

	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView dragSessionIsRestrictedToDraggingApplication:(id<UIDragSession> _Nonnull)session;
	//	[Export ("collectionView:dragSessionIsRestrictedToDraggingApplication:")]
	//	bool CollectionView (UICollectionView collectionView, UIDragSession session);
	//}

	//// @protocol UICollectionViewDropDelegate <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UICollectionViewDropDelegate
	//{
	//	// @required -(void)collectionView:(UICollectionView * _Nonnull)collectionView performDropWithCoordinator:(id<UICollectionViewDropCoordinator> _Nonnull)coordinator;
	//	[Abstract]
	//	[Export ("collectionView:performDropWithCoordinator:")]
	//	void CollectionView (UICollectionView collectionView, UICollectionViewDropCoordinator coordinator);

	//	// @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canHandleDropSession:(id<UIDropSession> _Nonnull)session;
	//	[Export ("collectionView:canHandleDropSession:")]
	//	bool CollectionView (UICollectionView collectionView, UIDropSession session);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView dropSessionDidEnter:(id<UIDropSession> _Nonnull)session;
	//	[Export ("collectionView:dropSessionDidEnter:")]
	//	void CollectionView (UICollectionView collectionView, UIDropSession session);

	//	// @optional -(UICollectionViewDropProposal * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView dropSessionDidUpdate:(id<UIDropSession> _Nonnull)session withDestinationIndexPath:(NSIndexPath * _Nullable)destinationIndexPath;
	//	[Export ("collectionView:dropSessionDidUpdate:withDestinationIndexPath:")]
	//	UICollectionViewDropProposal CollectionView (UICollectionView collectionView, UIDropSession session, [NullAllowed] NSIndexPath destinationIndexPath);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView dropSessionDidExit:(id<UIDropSession> _Nonnull)session;
	//	[Export ("collectionView:dropSessionDidExit:")]
	//	void CollectionView (UICollectionView collectionView, UIDropSession session);

	//	// @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView dropSessionDidEnd:(id<UIDropSession> _Nonnull)session;
	//	[Export ("collectionView:dropSessionDidEnd:")]
	//	void CollectionView (UICollectionView collectionView, UIDropSession session);

	//	// @optional -(UIDragPreviewParameters * _Nullable)collectionView:(UICollectionView * _Nonnull)collectionView dropPreviewParametersForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:dropPreviewParametersForItemAtIndexPath:")]
	//	[return: NullAllowed]
	//	UIDragPreviewParameters CollectionView (UICollectionView collectionView, NSIndexPath indexPath);
	//}

	//// @interface UICollectionViewDropProposal : UIDropProposal
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(UIDropProposal))]
	//interface UICollectionViewDropProposal
	//{
	//	// -(instancetype _Nonnull)initWithDropOperation:(UIDropOperation)operation intent:(UICollectionViewDropIntent)intent;
	//	[Export ("initWithDropOperation:intent:")]
	//	IntPtr Constructor (UIDropOperation operation, UICollectionViewDropIntent intent);

	//	// @property (readonly, nonatomic) UICollectionViewDropIntent intent;
	//	[Export ("intent")]
	//	UICollectionViewDropIntent Intent { get; }
	//}

	//// @protocol UICollectionViewDropCoordinator <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UICollectionViewDropCoordinator
	//{
	//	// @required @property (readonly, nonatomic) NSArray<id<UICollectionViewDropItem>> * _Nonnull items;
	//	[Abstract]
	//	[Export ("items")]
	//	UICollectionViewDropItem[] Items { get; }

	//	// @required @property (readonly, nonatomic) NSIndexPath * _Nullable destinationIndexPath;
	//	[Abstract]
	//	[NullAllowed, Export ("destinationIndexPath")]
	//	NSIndexPath DestinationIndexPath { get; }

	//	// @required @property (readonly, nonatomic) UICollectionViewDropProposal * _Nonnull proposal;
	//	[Abstract]
	//	[Export ("proposal")]
	//	UICollectionViewDropProposal Proposal { get; }

	//	// @required @property (readonly, nonatomic) id<UIDropSession> _Nonnull session;
	//	[Abstract]
	//	[Export ("session")]
	//	UIDropSession Session { get; }

	//	// @required -(id<UICollectionViewDropPlaceholderContext> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toPlaceholder:(UICollectionViewDropPlaceholder * _Nonnull)placeholder;
	//	[Abstract]
	//	[Export ("dropItem:toPlaceholder:")]
	//	UICollectionViewDropPlaceholderContext DropItem (UIDragItem dragItem, UICollectionViewDropPlaceholder placeholder);

	//	// @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Abstract]
	//	[Export ("dropItem:toItemAtIndexPath:")]
	//	UIDragAnimating DropItem (UIDragItem dragItem, NSIndexPath indexPath);

	//	// @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem intoItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath rect:(CGRect)rect;
	//	[Abstract]
	//	[Export ("dropItem:intoItemAtIndexPath:rect:")]
	//	UIDragAnimating DropItem (UIDragItem dragItem, NSIndexPath indexPath, CGRect rect);

	//	// @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toTarget:(UIDragPreviewTarget * _Nonnull)target;
	//	[Abstract]
	//	[Export ("dropItem:toTarget:")]
	//	UIDragAnimating DropItem (UIDragItem dragItem, UIDragPreviewTarget target);
	//}

	//// @interface UICollectionViewPlaceholder : NSObject
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UICollectionViewPlaceholder
	//{
	//	// -(instancetype _Nonnull)initWithInsertionIndexPath:(NSIndexPath * _Nonnull)insertionIndexPath reuseIdentifier:(NSString * _Nonnull)reuseIdentifier __attribute__((objc_designated_initializer));
	//	[Export ("initWithInsertionIndexPath:reuseIdentifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSIndexPath insertionIndexPath, string reuseIdentifier);

	//	// @property (copy, nonatomic) void (^ _Nullable)(__kindof UICollectionViewCell * _Nonnull) cellUpdateHandler;
	//	[NullAllowed, Export ("cellUpdateHandler", ArgumentSemantic.Copy)]
	//	Action<UICollectionViewCell> CellUpdateHandler { get; set; }
	//}

	//// @interface UICollectionViewDropPlaceholder : UICollectionViewPlaceholder
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(UICollectionViewPlaceholder))]
	//interface UICollectionViewDropPlaceholder
	//{
	//	// @property (copy, nonatomic) UIDragPreviewParameters * _Nullable (^ _Nullable)(__kindof UICollectionViewCell * _Nonnull) previewParametersProvider;
	//	[NullAllowed, Export ("previewParametersProvider", ArgumentSemantic.Copy)]
	//	Func<UICollectionViewCell, UIDragPreviewParameters> PreviewParametersProvider { get; set; }
	//}

	//// @protocol UICollectionViewDropItem <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UICollectionViewDropItem
	//{
	//	// @required @property (readonly, nonatomic) UIDragItem * _Nonnull dragItem;
	//	[Abstract]
	//	[Export ("dragItem")]
	//	UIDragItem DragItem { get; }

	//	// @required @property (readonly, nonatomic) NSIndexPath * _Nullable sourceIndexPath;
	//	[Abstract]
	//	[NullAllowed, Export ("sourceIndexPath")]
	//	NSIndexPath SourceIndexPath { get; }

	//	// @required @property (readonly, nonatomic) CGSize previewSize;
	//	[Abstract]
	//	[Export ("previewSize")]
	//	CGSize PreviewSize { get; }
	//}

	//// @protocol UICollectionViewDropPlaceholderContext <UIDragAnimating>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//interface UICollectionViewDropPlaceholderContext : IUIDragAnimating
	//{
	//	// @required @property (readonly, nonatomic) UIDragItem * _Nonnull dragItem;
	//	[Abstract]
	//	[Export ("dragItem")]
	//	UIDragItem DragItem { get; }

	//	// @required -(BOOL)commitInsertionWithDataSourceUpdates:(void (^ _Nonnull)(NSIndexPath * _Nonnull))dataSourceUpdates;
	//	[Abstract]
	//	[Export ("commitInsertionWithDataSourceUpdates:")]
	//	bool CommitInsertionWithDataSourceUpdates (Action<NSIndexPath> dataSourceUpdates);

	//	// @required -(BOOL)deletePlaceholder;
	//	[Abstract]
	//	[Export ("deletePlaceholder")]
	//	[Verify (MethodToProperty)]
	//	bool DeletePlaceholder { get; }

	//	// @required -(void)setNeedsCellUpdate;
	//	[Abstract]
	//	[Export ("setNeedsCellUpdate")]
	//	void SetNeedsCellUpdate ();
	//}

	//// @interface UICollectionReusableView : UIView
	//[iOS (6,0)]
	//[BaseType (typeof(UIView))]
	//interface UICollectionReusableView
	//{
	//	// @property (readonly, copy, nonatomic) NSString * _Nullable reuseIdentifier;
	//	[NullAllowed, Export ("reuseIdentifier")]
	//	string ReuseIdentifier { get; }

	//	// -(void)prepareForReuse;
	//	[Export ("prepareForReuse")]
	//	void PrepareForReuse ();

	//	// -(void)applyLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes;
	//	[Export ("applyLayoutAttributes:")]
	//	void ApplyLayoutAttributes (UICollectionViewLayoutAttributes layoutAttributes);

	//	// -(void)willTransitionFromLayout:(UICollectionViewLayout * _Nonnull)oldLayout toLayout:(UICollectionViewLayout * _Nonnull)newLayout;
	//	[Export ("willTransitionFromLayout:toLayout:")]
	//	void WillTransitionFromLayout (UICollectionViewLayout oldLayout, UICollectionViewLayout newLayout);

	//	// -(void)didTransitionFromLayout:(UICollectionViewLayout * _Nonnull)oldLayout toLayout:(UICollectionViewLayout * _Nonnull)newLayout;
	//	[Export ("didTransitionFromLayout:toLayout:")]
	//	void DidTransitionFromLayout (UICollectionViewLayout oldLayout, UICollectionViewLayout newLayout);

	//	// -(UICollectionViewLayoutAttributes * _Nonnull)preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("preferredLayoutAttributesFittingAttributes:")]
	//	UICollectionViewLayoutAttributes PreferredLayoutAttributesFittingAttributes (UICollectionViewLayoutAttributes layoutAttributes);
	//}

	//// @interface UICollectionViewCell : UICollectionReusableView
	//[iOS (6,0)]
	//[BaseType (typeof(UICollectionReusableView))]
	//interface UICollectionViewCell
	//{
	//	// @property (readonly, nonatomic) UIView * _Nonnull contentView;
	//	[Export ("contentView")]
	//	UIView ContentView { get; }

	//	// @property (getter = isSelected, nonatomic) BOOL selected;
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }

	//	// -(void)dragStateDidChange:(UICollectionViewCellDragState)dragState __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Export ("dragStateDidChange:")]
	//	void DragStateDidChange (UICollectionViewCellDragState dragState);

	//	// @property (nonatomic, strong) UIView * _Nullable backgroundView;
	//	[NullAllowed, Export ("backgroundView", ArgumentSemantic.Strong)]
	//	UIView BackgroundView { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable selectedBackgroundView;
	//	[NullAllowed, Export ("selectedBackgroundView", ArgumentSemantic.Strong)]
	//	UIView SelectedBackgroundView { get; set; }
	//}

	//// @interface UICollectionViewController : UIViewController <UICollectionViewDelegate, UICollectionViewDataSource>
	//[iOS (6,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UICollectionViewController : IUICollectionViewDelegate, IUICollectionViewDataSource
	//{
	//	// -(instancetype _Nonnull)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout __attribute__((objc_designated_initializer));
	//	[Export ("initWithCollectionViewLayout:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UICollectionViewLayout layout);

	//	// -(instancetype _Nonnull)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil __attribute__((objc_designated_initializer));
	//	[Export ("initWithNibName:bundle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string nibNameOrNil, [NullAllowed] NSBundle nibBundleOrNil);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (nonatomic, strong) __kindof UICollectionView * _Null_unspecified collectionView;
	//	[Export ("collectionView", ArgumentSemantic.Strong)]
	//	UICollectionView CollectionView { get; set; }

	//	// @property (nonatomic) BOOL clearsSelectionOnViewWillAppear;
	//	[Export ("clearsSelectionOnViewWillAppear")]
	//	bool ClearsSelectionOnViewWillAppear { get; set; }

	//	// @property (assign, nonatomic) BOOL useLayoutToLayoutNavigationTransitions __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("useLayoutToLayoutNavigationTransitions")]
	//	bool UseLayoutToLayoutNavigationTransitions { get; set; }

	//	// @property (readonly, nonatomic) UICollectionViewLayout * _Nonnull collectionViewLayout __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("collectionViewLayout")]
	//	UICollectionViewLayout CollectionViewLayout { get; }

	//	// @property (nonatomic) BOOL installsStandardGestureForInteractiveMovement __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("installsStandardGestureForInteractiveMovement")]
	//	bool InstallsStandardGestureForInteractiveMovement { get; set; }
	//}

	//// @interface UICollectionViewLayoutAttributes : NSObject <NSCopying, UIDynamicItem>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface UICollectionViewLayoutAttributes : INSCopying, IUIDynamicItem
	//{
	//	// @property (nonatomic) CGRect frame;
	//	[Export ("frame", ArgumentSemantic.Assign)]
	//	CGRect Frame { get; set; }

	//	// @property (nonatomic) CGPoint center;
	//	[Export ("center", ArgumentSemantic.Assign)]
	//	CGPoint Center { get; set; }

	//	// @property (nonatomic) CGSize size;
	//	[Export ("size", ArgumentSemantic.Assign)]
	//	CGSize Size { get; set; }

	//	// @property (nonatomic) CATransform3D transform3D;
	//	[Export ("transform3D", ArgumentSemantic.Assign)]
	//	CATransform3D Transform3D { get; set; }

	//	// @property (nonatomic) CGRect bounds __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("bounds", ArgumentSemantic.Assign)]
	//	CGRect Bounds { get; set; }

	//	// @property (nonatomic) CGAffineTransform transform __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("transform", ArgumentSemantic.Assign)]
	//	CGAffineTransform Transform { get; set; }

	//	// @property (nonatomic) CGFloat alpha;
	//	[Export ("alpha")]
	//	nfloat Alpha { get; set; }

	//	// @property (nonatomic) NSInteger zIndex;
	//	[Export ("zIndex")]
	//	nint ZIndex { get; set; }

	//	// @property (getter = isHidden, nonatomic) BOOL hidden;
	//	[Export ("hidden")]
	//	bool Hidden { [Bind ("isHidden")] get; set; }

	//	// @property (nonatomic, strong) NSIndexPath * _Nonnull indexPath;
	//	[Export ("indexPath", ArgumentSemantic.Strong)]
	//	NSIndexPath IndexPath { get; set; }

	//	// @property (readonly, nonatomic) UICollectionElementCategory representedElementCategory;
	//	[Export ("representedElementCategory")]
	//	UICollectionElementCategory RepresentedElementCategory { get; }

	//	// @property (readonly, nonatomic) NSString * _Nullable representedElementKind;
	//	[NullAllowed, Export ("representedElementKind")]
	//	string RepresentedElementKind { get; }

	//	// +(instancetype _Nonnull)layoutAttributesForCellWithIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Static]
	//	[Export ("layoutAttributesForCellWithIndexPath:")]
	//	UICollectionViewLayoutAttributes LayoutAttributesForCellWithIndexPath (NSIndexPath indexPath);

	//	// +(instancetype _Nonnull)layoutAttributesForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind withIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Static]
	//	[Export ("layoutAttributesForSupplementaryViewOfKind:withIndexPath:")]
	//	UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryViewOfKind (string elementKind, NSIndexPath indexPath);

	//	// +(instancetype _Nonnull)layoutAttributesForDecorationViewOfKind:(NSString * _Nonnull)decorationViewKind withIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Static]
	//	[Export ("layoutAttributesForDecorationViewOfKind:withIndexPath:")]
	//	UICollectionViewLayoutAttributes LayoutAttributesForDecorationViewOfKind (string decorationViewKind, NSIndexPath indexPath);
	//}

	//// @interface UICollectionViewUpdateItem : NSObject
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface UICollectionViewUpdateItem
	//{
	//	// @property (readonly, nonatomic) NSIndexPath * _Nullable indexPathBeforeUpdate;
	//	[NullAllowed, Export ("indexPathBeforeUpdate")]
	//	NSIndexPath IndexPathBeforeUpdate { get; }

	//	// @property (readonly, nonatomic) NSIndexPath * _Nullable indexPathAfterUpdate;
	//	[NullAllowed, Export ("indexPathAfterUpdate")]
	//	NSIndexPath IndexPathAfterUpdate { get; }

	//	// @property (readonly, nonatomic) UICollectionUpdateAction updateAction;
	//	[Export ("updateAction")]
	//	UICollectionUpdateAction UpdateAction { get; }
	//}

	//// @interface UICollectionViewLayoutInvalidationContext : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface UICollectionViewLayoutInvalidationContext
	//{
	//	// @property (readonly, nonatomic) BOOL invalidateEverything;
	//	[Export ("invalidateEverything")]
	//	bool InvalidateEverything { get; }

	//	// @property (readonly, nonatomic) BOOL invalidateDataSourceCounts;
	//	[Export ("invalidateDataSourceCounts")]
	//	bool InvalidateDataSourceCounts { get; }

	//	// -(void)invalidateItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("invalidateItemsAtIndexPaths:")]
	//	void InvalidateItemsAtIndexPaths (NSIndexPath[] indexPaths);

	//	// -(void)invalidateSupplementaryElementsOfKind:(NSString * _Nonnull)elementKind atIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("invalidateSupplementaryElementsOfKind:atIndexPaths:")]
	//	void InvalidateSupplementaryElementsOfKind (string elementKind, NSIndexPath[] indexPaths);

	//	// -(void)invalidateDecorationElementsOfKind:(NSString * _Nonnull)elementKind atIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("invalidateDecorationElementsOfKind:atIndexPaths:")]
	//	void InvalidateDecorationElementsOfKind (string elementKind, NSIndexPath[] indexPaths);

	//	// @property (readonly, nonatomic) NSArray<NSIndexPath *> * _Nullable invalidatedItemIndexPaths __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("invalidatedItemIndexPaths")]
	//	NSIndexPath[] InvalidatedItemIndexPaths { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,NSArray<NSIndexPath *> *> * _Nullable invalidatedSupplementaryIndexPaths __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("invalidatedSupplementaryIndexPaths")]
	//	NSDictionary<NSString, NSArray<NSIndexPath>> InvalidatedSupplementaryIndexPaths { get; }

	//	// @property (readonly, nonatomic) NSDictionary<NSString *,NSArray<NSIndexPath *> *> * _Nullable invalidatedDecorationIndexPaths __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("invalidatedDecorationIndexPaths")]
	//	NSDictionary<NSString, NSArray<NSIndexPath>> InvalidatedDecorationIndexPaths { get; }

	//	// @property (nonatomic) CGPoint contentOffsetAdjustment __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("contentOffsetAdjustment", ArgumentSemantic.Assign)]
	//	CGPoint ContentOffsetAdjustment { get; set; }

	//	// @property (nonatomic) CGSize contentSizeAdjustment __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("contentSizeAdjustment", ArgumentSemantic.Assign)]
	//	CGSize ContentSizeAdjustment { get; set; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSIndexPath *> * _Nullable previousIndexPathsForInteractivelyMovingItems __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("previousIndexPathsForInteractivelyMovingItems", ArgumentSemantic.Copy)]
	//	NSIndexPath[] PreviousIndexPathsForInteractivelyMovingItems { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSIndexPath *> * _Nullable targetIndexPathsForInteractivelyMovingItems __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("targetIndexPathsForInteractivelyMovingItems", ArgumentSemantic.Copy)]
	//	NSIndexPath[] TargetIndexPathsForInteractivelyMovingItems { get; }

	//	// @property (readonly, nonatomic) CGPoint interactiveMovementTarget __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("interactiveMovementTarget")]
	//	CGPoint InteractiveMovementTarget { get; }
	//}

	//// @interface UICollectionViewLayout : NSObject <NSCoding>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface UICollectionViewLayout : INSCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic) UICollectionView * _Nullable collectionView;
	//	[NullAllowed, Export ("collectionView")]
	//	UICollectionView CollectionView { get; }

	//	// -(void)invalidateLayout;
	//	[Export ("invalidateLayout")]
	//	void InvalidateLayout ();

	//	// -(void)invalidateLayoutWithContext:(UICollectionViewLayoutInvalidationContext * _Nonnull)context __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("invalidateLayoutWithContext:")]
	//	void InvalidateLayoutWithContext (UICollectionViewLayoutInvalidationContext context);

	//	// -(void)registerClass:(Class _Nullable)viewClass forDecorationViewOfKind:(NSString * _Nonnull)elementKind;
	//	[Export ("registerClass:forDecorationViewOfKind:")]
	//	void RegisterClass ([NullAllowed] Class viewClass, string elementKind);

	//	// -(void)registerNib:(UINib * _Nullable)nib forDecorationViewOfKind:(NSString * _Nonnull)elementKind;
	//	[Export ("registerNib:forDecorationViewOfKind:")]
	//	void RegisterNib ([NullAllowed] UINib nib, string elementKind);
	//}

	//// @interface UISubclassingHooks (UICollectionViewLayout)
	//[Category]
	//[BaseType (typeof(UICollectionViewLayout))]
	//interface UICollectionViewLayout_UISubclassingHooks
	//{
	//	// @property (readonly, nonatomic, class) Class _Nonnull layoutAttributesClass;
	//	[Static]
	//	[Export ("layoutAttributesClass")]
	//	Class LayoutAttributesClass { get; }

	//	// @property (readonly, nonatomic, class) Class _Nonnull invalidationContextClass __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Static]
	//	[Export ("invalidationContextClass")]
	//	Class InvalidationContextClass { get; }

	//	// -(void)prepareLayout;
	//	[Export ("prepareLayout")]
	//	void PrepareLayout ();

	//	// -(NSArray<__kindof UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect;
	//	[Export ("layoutAttributesForElementsInRect:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect (CGRect rect);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("layoutAttributesForItemAtIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes LayoutAttributesForItemAtIndexPath (NSIndexPath indexPath);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("layoutAttributesForSupplementaryViewOfKind:atIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryViewOfKind (string elementKind, NSIndexPath indexPath);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForDecorationViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("layoutAttributesForDecorationViewOfKind:atIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes LayoutAttributesForDecorationViewOfKind (string elementKind, NSIndexPath indexPath);

	//	// -(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds;
	//	[Export ("shouldInvalidateLayoutForBoundsChange:")]
	//	bool ShouldInvalidateLayoutForBoundsChange (CGRect newBounds);

	//	// -(UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForBoundsChange:(CGRect)newBounds __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("invalidationContextForBoundsChange:")]
	//	UICollectionViewLayoutInvalidationContext InvalidationContextForBoundsChange (CGRect newBounds);

	//	// -(BOOL)shouldInvalidateLayoutForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)preferredAttributes withOriginalAttributes:(UICollectionViewLayoutAttributes * _Nonnull)originalAttributes __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:")]
	//	bool ShouldInvalidateLayoutForPreferredLayoutAttributes (UICollectionViewLayoutAttributes preferredAttributes, UICollectionViewLayoutAttributes originalAttributes);

	//	// -(UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)preferredAttributes withOriginalAttributes:(UICollectionViewLayoutAttributes * _Nonnull)originalAttributes __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("invalidationContextForPreferredLayoutAttributes:withOriginalAttributes:")]
	//	UICollectionViewLayoutInvalidationContext InvalidationContextForPreferredLayoutAttributes (UICollectionViewLayoutAttributes preferredAttributes, UICollectionViewLayoutAttributes originalAttributes);

	//	// -(CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity;
	//	[Export ("targetContentOffsetForProposedContentOffset:withScrollingVelocity:")]
	//	CGPoint TargetContentOffsetForProposedContentOffset (CGPoint proposedContentOffset, CGPoint velocity);

	//	// -(CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("targetContentOffsetForProposedContentOffset:")]
	//	CGPoint TargetContentOffsetForProposedContentOffset (CGPoint proposedContentOffset);

	//	// @property (readonly, nonatomic) CGSize collectionViewContentSize;
	//	[Export ("collectionViewContentSize")]
	//	CGSize CollectionViewContentSize { get; }

	//	// @property (readonly, nonatomic) UIUserInterfaceLayoutDirection developmentLayoutDirection;
	//	[Export ("developmentLayoutDirection")]
	//	UIUserInterfaceLayoutDirection DevelopmentLayoutDirection { get; }

	//	// @property (readonly, nonatomic) BOOL flipsHorizontallyInOppositeLayoutDirection;
	//	[Export ("flipsHorizontallyInOppositeLayoutDirection")]
	//	bool FlipsHorizontallyInOppositeLayoutDirection { get; }
	//}

	//// @interface UIUpdateSupportHooks (UICollectionViewLayout)
	//[Category]
	//[BaseType (typeof(UICollectionViewLayout))]
	//interface UICollectionViewLayout_UIUpdateSupportHooks
	//{
	//	// -(void)prepareForCollectionViewUpdates:(NSArray<UICollectionViewUpdateItem *> * _Nonnull)updateItems;
	//	[Export ("prepareForCollectionViewUpdates:")]
	//	void PrepareForCollectionViewUpdates (UICollectionViewUpdateItem[] updateItems);

	//	// -(void)finalizeCollectionViewUpdates;
	//	[Export ("finalizeCollectionViewUpdates")]
	//	void FinalizeCollectionViewUpdates ();

	//	// -(void)prepareForAnimatedBoundsChange:(CGRect)oldBounds;
	//	[Export ("prepareForAnimatedBoundsChange:")]
	//	void PrepareForAnimatedBoundsChange (CGRect oldBounds);

	//	// -(void)finalizeAnimatedBoundsChange;
	//	[Export ("finalizeAnimatedBoundsChange")]
	//	void FinalizeAnimatedBoundsChange ();

	//	// -(void)prepareForTransitionToLayout:(UICollectionViewLayout * _Nonnull)newLayout __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("prepareForTransitionToLayout:")]
	//	void PrepareForTransitionToLayout (UICollectionViewLayout newLayout);

	//	// -(void)prepareForTransitionFromLayout:(UICollectionViewLayout * _Nonnull)oldLayout __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("prepareForTransitionFromLayout:")]
	//	void PrepareForTransitionFromLayout (UICollectionViewLayout oldLayout);

	//	// -(void)finalizeLayoutTransition __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("finalizeLayoutTransition")]
	//	void FinalizeLayoutTransition ();

	//	// -(UICollectionViewLayoutAttributes * _Nullable)initialLayoutAttributesForAppearingItemAtIndexPath:(NSIndexPath * _Nonnull)itemIndexPath;
	//	[Export ("initialLayoutAttributesForAppearingItemAtIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingItemAtIndexPath (NSIndexPath itemIndexPath);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)finalLayoutAttributesForDisappearingItemAtIndexPath:(NSIndexPath * _Nonnull)itemIndexPath;
	//	[Export ("finalLayoutAttributesForDisappearingItemAtIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingItemAtIndexPath (NSIndexPath itemIndexPath);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)initialLayoutAttributesForAppearingSupplementaryElementOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)elementIndexPath;
	//	[Export ("initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingSupplementaryElementOfKind (string elementKind, NSIndexPath elementIndexPath);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)finalLayoutAttributesForDisappearingSupplementaryElementOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)elementIndexPath;
	//	[Export ("finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingSupplementaryElementOfKind (string elementKind, NSIndexPath elementIndexPath);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)initialLayoutAttributesForAppearingDecorationElementOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)decorationIndexPath;
	//	[Export ("initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingDecorationElementOfKind (string elementKind, NSIndexPath decorationIndexPath);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)finalLayoutAttributesForDisappearingDecorationElementOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)decorationIndexPath;
	//	[Export ("finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingDecorationElementOfKind (string elementKind, NSIndexPath decorationIndexPath);

	//	// -(NSArray<NSIndexPath *> * _Nonnull)indexPathsToDeleteForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("indexPathsToDeleteForSupplementaryViewOfKind:")]
	//	NSIndexPath[] IndexPathsToDeleteForSupplementaryViewOfKind (string elementKind);

	//	// -(NSArray<NSIndexPath *> * _Nonnull)indexPathsToDeleteForDecorationViewOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("indexPathsToDeleteForDecorationViewOfKind:")]
	//	NSIndexPath[] IndexPathsToDeleteForDecorationViewOfKind (string elementKind);

	//	// -(NSArray<NSIndexPath *> * _Nonnull)indexPathsToInsertForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("indexPathsToInsertForSupplementaryViewOfKind:")]
	//	NSIndexPath[] IndexPathsToInsertForSupplementaryViewOfKind (string elementKind);

	//	// -(NSArray<NSIndexPath *> * _Nonnull)indexPathsToInsertForDecorationViewOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("indexPathsToInsertForDecorationViewOfKind:")]
	//	NSIndexPath[] IndexPathsToInsertForDecorationViewOfKind (string elementKind);
	//}

	//// @interface UIReorderingSupportHooks (UICollectionViewLayout)
	//[Category]
	//[BaseType (typeof(UICollectionViewLayout))]
	//interface UICollectionViewLayout_UIReorderingSupportHooks
	//{
	//	// -(NSIndexPath * _Nonnull)targetIndexPathForInteractivelyMovingItem:(NSIndexPath * _Nonnull)previousIndexPath withPosition:(CGPoint)position __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("targetIndexPathForInteractivelyMovingItem:withPosition:")]
	//	NSIndexPath TargetIndexPathForInteractivelyMovingItem (NSIndexPath previousIndexPath, CGPoint position);

	//	// -(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributesForInteractivelyMovingItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath withTargetPosition:(CGPoint)position __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("layoutAttributesForInteractivelyMovingItemAtIndexPath:withTargetPosition:")]
	//	UICollectionViewLayoutAttributes LayoutAttributesForInteractivelyMovingItemAtIndexPath (NSIndexPath indexPath, CGPoint position);

	//	// -(UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForInteractivelyMovingItems:(NSArray<NSIndexPath *> * _Nonnull)targetIndexPaths withTargetPosition:(CGPoint)targetPosition previousIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)previousIndexPaths previousPosition:(CGPoint)previousPosition __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("invalidationContextForInteractivelyMovingItems:withTargetPosition:previousIndexPaths:previousPosition:")]
	//	UICollectionViewLayoutInvalidationContext InvalidationContextForInteractivelyMovingItems (NSIndexPath[] targetIndexPaths, CGPoint targetPosition, NSIndexPath[] previousIndexPaths, CGPoint previousPosition);

	//	// -(UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths previousIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)previousIndexPaths movementCancelled:(BOOL)movementCancelled __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths:previousIndexPaths:movementCancelled:")]
	//	UICollectionViewLayoutInvalidationContext InvalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths (NSIndexPath[] indexPaths, NSIndexPath[] previousIndexPaths, bool movementCancelled);
	//}

	//// @interface UICollectionViewFlowLayoutInvalidationContext : UICollectionViewLayoutInvalidationContext
	//[iOS (7,0)]
	//[BaseType (typeof(UICollectionViewLayoutInvalidationContext))]
	//interface UICollectionViewFlowLayoutInvalidationContext
	//{
	//	// @property (nonatomic) BOOL invalidateFlowLayoutDelegateMetrics;
	//	[Export ("invalidateFlowLayoutDelegateMetrics")]
	//	bool InvalidateFlowLayoutDelegateMetrics { get; set; }

	//	// @property (nonatomic) BOOL invalidateFlowLayoutAttributes;
	//	[Export ("invalidateFlowLayoutAttributes")]
	//	bool InvalidateFlowLayoutAttributes { get; set; }
	//}

	//// @protocol UICollectionViewDelegateFlowLayout <UICollectionViewDelegate>
	//[Protocol, Model]
	//interface UICollectionViewDelegateFlowLayout : IUICollectionViewDelegate
	//{
	//	// @optional -(CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:layout:sizeForItemAtIndexPath:")]
	//	CGSize CollectionView (UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, NSIndexPath indexPath);

	//	// @optional -(UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
	//	[Export ("collectionView:layout:insetForSectionAtIndex:")]
	//	UIEdgeInsets CollectionView (UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);

	//	// @optional -(CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section;
	//	[Export ("collectionView:layout:minimumLineSpacingForSectionAtIndex:")]
	//	nfloat CollectionView (UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);

	//	// @optional -(CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section;
	//	[Export ("collectionView:layout:minimumInteritemSpacingForSectionAtIndex:")]
	//	nfloat CollectionView (UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);

	//	// @optional -(CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section;
	//	[Export ("collectionView:layout:referenceSizeForHeaderInSection:")]
	//	CGSize CollectionView (UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);

	//	// @optional -(CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForFooterInSection:(NSInteger)section;
	//	[Export ("collectionView:layout:referenceSizeForFooterInSection:")]
	//	CGSize CollectionView (UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);
	//}

	//// @interface UICollectionViewFlowLayout : UICollectionViewLayout
	//[iOS (6,0)]
	//[BaseType (typeof(UICollectionViewLayout))]
	//interface UICollectionViewFlowLayout
	//{
	//	// @property (nonatomic) CGFloat minimumLineSpacing;
	//	[Export ("minimumLineSpacing")]
	//	nfloat MinimumLineSpacing { get; set; }

	//	// @property (nonatomic) CGFloat minimumInteritemSpacing;
	//	[Export ("minimumInteritemSpacing")]
	//	nfloat MinimumInteritemSpacing { get; set; }

	//	// @property (nonatomic) CGSize itemSize;
	//	[Export ("itemSize", ArgumentSemantic.Assign)]
	//	CGSize ItemSize { get; set; }

	//	// @property (nonatomic) CGSize estimatedItemSize __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("estimatedItemSize", ArgumentSemantic.Assign)]
	//	CGSize EstimatedItemSize { get; set; }

	//	// @property (nonatomic) UICollectionViewScrollDirection scrollDirection;
	//	[Export ("scrollDirection", ArgumentSemantic.Assign)]
	//	UICollectionViewScrollDirection ScrollDirection { get; set; }

	//	// @property (nonatomic) CGSize headerReferenceSize;
	//	[Export ("headerReferenceSize", ArgumentSemantic.Assign)]
	//	CGSize HeaderReferenceSize { get; set; }

	//	// @property (nonatomic) CGSize footerReferenceSize;
	//	[Export ("footerReferenceSize", ArgumentSemantic.Assign)]
	//	CGSize FooterReferenceSize { get; set; }

	//	// @property (nonatomic) UIEdgeInsets sectionInset;
	//	[Export ("sectionInset", ArgumentSemantic.Assign)]
	//	UIEdgeInsets SectionInset { get; set; }

	//	// @property (nonatomic) UICollectionViewFlowLayoutSectionInsetReference sectionInsetReference __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), NoWatch, iOS (11, 0)]
	//	[Export ("sectionInsetReference", ArgumentSemantic.Assign)]
	//	UICollectionViewFlowLayoutSectionInsetReference SectionInsetReference { get; set; }

	//	// @property (nonatomic) BOOL sectionHeadersPinToVisibleBounds __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("sectionHeadersPinToVisibleBounds")]
	//	bool SectionHeadersPinToVisibleBounds { get; set; }

	//	// @property (nonatomic) BOOL sectionFootersPinToVisibleBounds __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("sectionFootersPinToVisibleBounds")]
	//	bool SectionFootersPinToVisibleBounds { get; set; }
	//}

	//// @interface UICollectionViewTransitionLayout : UICollectionViewLayout
	//[iOS (7,0)]
	//[BaseType (typeof(UICollectionViewLayout))]
	//[DisableDefaultCtor]
	//interface UICollectionViewTransitionLayout
	//{
	//	// @property (assign, nonatomic) CGFloat transitionProgress;
	//	[Export ("transitionProgress")]
	//	nfloat TransitionProgress { get; set; }

	//	// @property (readonly, nonatomic) UICollectionViewLayout * _Nonnull currentLayout;
	//	[Export ("currentLayout")]
	//	UICollectionViewLayout CurrentLayout { get; }

	//	// @property (readonly, nonatomic) UICollectionViewLayout * _Nonnull nextLayout;
	//	[Export ("nextLayout")]
	//	UICollectionViewLayout NextLayout { get; }

	//	// -(instancetype _Nonnull)initWithCurrentLayout:(UICollectionViewLayout * _Nonnull)currentLayout nextLayout:(UICollectionViewLayout * _Nonnull)newLayout __attribute__((objc_designated_initializer));
	//	[Export ("initWithCurrentLayout:nextLayout:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UICollectionViewLayout currentLayout, UICollectionViewLayout newLayout);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)updateValue:(CGFloat)value forAnimatedKey:(NSString * _Nonnull)key;
	//	[Export ("updateValue:forAnimatedKey:")]
	//	void UpdateValue (nfloat value, string key);

	//	// -(CGFloat)valueForAnimatedKey:(NSString * _Nonnull)key;
	//	[Export ("valueForAnimatedKey:")]
	//	nfloat ValueForAnimatedKey (string key);
	//}

	//// @interface UIDatePicker : UIControl <NSCoding>
	//[NoTV, iOS (2,0)]
	//[BaseType (typeof(UIControl))]
	//interface UIDatePicker : INSCoding
	//{
	//	// @property (nonatomic) UIDatePickerMode datePickerMode;
	//	[Export ("datePickerMode", ArgumentSemantic.Assign)]
	//	UIDatePickerMode DatePickerMode { get; set; }

	//	// @property (nonatomic, strong) NSLocale * _Nullable locale;
	//	[NullAllowed, Export ("locale", ArgumentSemantic.Strong)]
	//	NSLocale Locale { get; set; }

	//	// @property (copy, nonatomic) NSCalendar * _Null_unspecified calendar;
	//	[Export ("calendar", ArgumentSemantic.Copy)]
	//	NSCalendar Calendar { get; set; }

	//	// @property (nonatomic, strong) NSTimeZone * _Nullable timeZone;
	//	[NullAllowed, Export ("timeZone", ArgumentSemantic.Strong)]
	//	NSTimeZone TimeZone { get; set; }

	//	// @property (nonatomic, strong) NSDate * _Nonnull date;
	//	[Export ("date", ArgumentSemantic.Strong)]
	//	NSDate Date { get; set; }

	//	// @property (nonatomic, strong) NSDate * _Nullable minimumDate;
	//	[NullAllowed, Export ("minimumDate", ArgumentSemantic.Strong)]
	//	NSDate MinimumDate { get; set; }

	//	// @property (nonatomic, strong) NSDate * _Nullable maximumDate;
	//	[NullAllowed, Export ("maximumDate", ArgumentSemantic.Strong)]
	//	NSDate MaximumDate { get; set; }

	//	// @property (nonatomic) NSTimeInterval countDownDuration;
	//	[Export ("countDownDuration")]
	//	double CountDownDuration { get; set; }

	//	// @property (nonatomic) NSInteger minuteInterval;
	//	[Export ("minuteInterval")]
	//	nint MinuteInterval { get; set; }

	//	// -(void)setDate:(NSDate * _Nonnull)date animated:(BOOL)animated;
	//	[Export ("setDate:animated:")]
	//	void SetDate (NSDate date, bool animated);
	//}

	//// @interface UIDocument : NSObject <NSFilePresenter, NSProgressReporting>
	//[NoTV, iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIDocument : INSFilePresenter, INSProgressReporting
	//{
	//	// -(instancetype _Nonnull)initWithFileURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, unavailable))) __attribute__((objc_designated_initializer));
	//	[NoTV]
	//	[Export ("initWithFileURL:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl url);

	//	// @property (readonly) NSURL * _Nonnull fileURL __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("fileURL")]
	//	NSUrl FileURL { get; }

	//	// @property (readonly, copy) NSString * _Nonnull localizedName __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("localizedName")]
	//	string LocalizedName { get; }

	//	// @property (readonly, copy) NSString * _Nullable fileType __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[NullAllowed, Export ("fileType")]
	//	string FileType { get; }

	//	// @property (copy) NSDate * _Nullable fileModificationDate __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[NullAllowed, Export ("fileModificationDate", ArgumentSemantic.Copy)]
	//	NSDate FileModificationDate { get; set; }

	//	// @property (readonly) UIDocumentState documentState __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("documentState")]
	//	UIDocumentState DocumentState { get; }

	//	// @property (readonly) NSProgress * _Nullable progress __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9.0)));
	//	[NoTV, iOS (9, 0)]
	//	[NullAllowed, Export ("progress")]
	//	NSProgress Progress { get; }

	//	// -(void)openWithCompletionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("openWithCompletionHandler:")]
	//	void OpenWithCompletionHandler ([NullAllowed] Action<bool> completionHandler);

	//	// -(void)closeWithCompletionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("closeWithCompletionHandler:")]
	//	void CloseWithCompletionHandler ([NullAllowed] Action<bool> completionHandler);

	//	// -(BOOL)loadFromContents:(id _Nonnull)contents ofType:(NSString * _Nullable)typeName error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("loadFromContents:ofType:error:")]
	//	bool LoadFromContents (NSObject contents, [NullAllowed] string typeName, [NullAllowed] out NSError outError);

	//	// -(id _Nullable)contentsForType:(NSString * _Nonnull)typeName error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("contentsForType:error:")]
	//	[return: NullAllowed]
	//	NSObject ContentsForType (string typeName, [NullAllowed] out NSError outError);

	//	// -(void)disableEditing __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("disableEditing")]
	//	void DisableEditing ();

	//	// -(void)enableEditing __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("enableEditing")]
	//	void EnableEditing ();

	//	// @property (strong) NSUndoManager * _Null_unspecified undoManager __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("undoManager", ArgumentSemantic.Strong)]
	//	NSUndoManager UndoManager { get; set; }

	//	// @property (readonly, nonatomic) BOOL hasUnsavedChanges __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("hasUnsavedChanges")]
	//	bool HasUnsavedChanges { get; }

	//	// -(void)updateChangeCount:(UIDocumentChangeKind)change __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("updateChangeCount:")]
	//	void UpdateChangeCount (UIDocumentChangeKind change);

	//	// -(id _Nonnull)changeCountTokenForSaveOperation:(UIDocumentSaveOperation)saveOperation __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("changeCountTokenForSaveOperation:")]
	//	NSObject ChangeCountTokenForSaveOperation (UIDocumentSaveOperation saveOperation);

	//	// -(void)updateChangeCountWithToken:(id _Nonnull)changeCountToken forSaveOperation:(UIDocumentSaveOperation)saveOperation __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("updateChangeCountWithToken:forSaveOperation:")]
	//	void UpdateChangeCountWithToken (NSObject changeCountToken, UIDocumentSaveOperation saveOperation);

	//	// -(void)saveToURL:(NSURL * _Nonnull)url forSaveOperation:(UIDocumentSaveOperation)saveOperation completionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("saveToURL:forSaveOperation:completionHandler:")]
	//	void SaveToURL (NSUrl url, UIDocumentSaveOperation saveOperation, [NullAllowed] Action<bool> completionHandler);

	//	// -(void)autosaveWithCompletionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("autosaveWithCompletionHandler:")]
	//	void AutosaveWithCompletionHandler ([NullAllowed] Action<bool> completionHandler);

	//	// @property (readonly, nonatomic) NSString * _Nullable savingFileType __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[NullAllowed, Export ("savingFileType")]
	//	string SavingFileType { get; }

	//	// -(NSString * _Nonnull)fileNameExtensionForType:(NSString * _Nullable)typeName saveOperation:(UIDocumentSaveOperation)saveOperation __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("fileNameExtensionForType:saveOperation:")]
	//	string FileNameExtensionForType ([NullAllowed] string typeName, UIDocumentSaveOperation saveOperation);

	//	// -(BOOL)writeContents:(id _Nonnull)contents andAttributes:(NSDictionary * _Nullable)additionalFileAttributes safelyToURL:(NSURL * _Nonnull)url forSaveOperation:(UIDocumentSaveOperation)saveOperation error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("writeContents:andAttributes:safelyToURL:forSaveOperation:error:")]
	//	bool WriteContents (NSObject contents, [NullAllowed] NSDictionary additionalFileAttributes, NSUrl url, UIDocumentSaveOperation saveOperation, [NullAllowed] out NSError outError);

	//	// -(BOOL)writeContents:(id _Nonnull)contents toURL:(NSURL * _Nonnull)url forSaveOperation:(UIDocumentSaveOperation)saveOperation originalContentsURL:(NSURL * _Nullable)originalContentsURL error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("writeContents:toURL:forSaveOperation:originalContentsURL:error:")]
	//	bool WriteContents (NSObject contents, NSUrl url, UIDocumentSaveOperation saveOperation, [NullAllowed] NSUrl originalContentsURL, [NullAllowed] out NSError outError);

	//	// -(NSDictionary * _Nullable)fileAttributesToWriteToURL:(NSURL * _Nonnull)url forSaveOperation:(UIDocumentSaveOperation)saveOperation error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("fileAttributesToWriteToURL:forSaveOperation:error:")]
	//	[return: NullAllowed]
	//	NSDictionary FileAttributesToWriteToURL (NSUrl url, UIDocumentSaveOperation saveOperation, [NullAllowed] out NSError outError);

	//	// -(BOOL)readFromURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("readFromURL:error:")]
	//	bool ReadFromURL (NSUrl url, [NullAllowed] out NSError outError);

	//	// -(void)performAsynchronousFileAccessUsingBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("performAsynchronousFileAccessUsingBlock:")]
	//	void PerformAsynchronousFileAccessUsingBlock (Action block);

	//	// -(void)handleError:(NSError * _Nonnull)error userInteractionPermitted:(BOOL)userInteractionPermitted __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("handleError:userInteractionPermitted:")]
	//	void HandleError (NSError error, bool userInteractionPermitted);

	//	// -(void)finishedHandlingError:(NSError * _Nonnull)error recovered:(BOOL)recovered __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("finishedHandlingError:recovered:")]
	//	void FinishedHandlingError (NSError error, bool recovered);

	//	// -(void)userInteractionNoLongerPermittedForError:(NSError * _Nonnull)error __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("userInteractionNoLongerPermittedForError:")]
	//	void UserInteractionNoLongerPermittedForError (NSError error);

	//	// -(void)revertToContentsOfURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("revertToContentsOfURL:completionHandler:")]
	//	void RevertToContentsOfURL (NSUrl url, [NullAllowed] Action<bool> completionHandler);
	//}

	//// @interface ActivityContinuation (UIDocument) <UIUserActivityRestoring>
	//[Category]
	//[BaseType (typeof(UIDocument))]
	//interface UIDocument_ActivityContinuation : IUIUserActivityRestoring
	//{
	//	// @property (nonatomic, strong) NSUserActivity * _Nullable userActivity __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, iOS (8, 0)]
	//	[NullAllowed, Export ("userActivity", ArgumentSemantic.Strong)]
	//	NSUserActivity UserActivity { get; set; }

	//	// -(void)updateUserActivityState:(NSUserActivity * _Nonnull)userActivity __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, iOS (8,0)]
	//	[Export ("updateUserActivityState:")]
	//	void UpdateUserActivityState (NSUserActivity userActivity);

	//	// -(void)restoreUserActivityState:(NSUserActivity * _Nonnull)userActivity __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, iOS (8,0)]
	//	[Export ("restoreUserActivityState:")]
	//	void RestoreUserActivityState (NSUserActivity userActivity);
	//}

	//// @interface UIDocumentInteractionController : NSObject <UIActionSheetDelegate>
	//[NoTV, iOS (3,2)]
	//[BaseType (typeof(NSObject))]
	//interface UIDocumentInteractionController : IUIActionSheetDelegate
	//{
	//	// +(UIDocumentInteractionController * _Nonnull)interactionControllerWithURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("interactionControllerWithURL:")]
	//	UIDocumentInteractionController InteractionControllerWithURL (NSUrl url);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIDocumentInteractionControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIDocumentInteractionControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (strong) NSURL * _Nullable URL;
	//	[NullAllowed, Export ("URL", ArgumentSemantic.Strong)]
	//	NSUrl URL { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable UTI;
	//	[NullAllowed, Export ("UTI")]
	//	string UTI { get; set; }

	//	// @property (copy) NSString * _Nullable name;
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }

	//	// @property (readonly, nonatomic) NSArray<UIImage *> * _Nonnull icons;
	//	[Export ("icons")]
	//	UIImage[] Icons { get; }

	//	// @property (nonatomic, strong) id _Nullable annotation;
	//	[NullAllowed, Export ("annotation", ArgumentSemantic.Strong)]
	//	NSObject Annotation { get; set; }

	//	// -(BOOL)presentOptionsMenuFromRect:(CGRect)rect inView:(UIView * _Nonnull)view animated:(BOOL)animated;
	//	[Export ("presentOptionsMenuFromRect:inView:animated:")]
	//	bool PresentOptionsMenuFromRect (CGRect rect, UIView view, bool animated);

	//	// -(BOOL)presentOptionsMenuFromBarButtonItem:(UIBarButtonItem * _Nonnull)item animated:(BOOL)animated;
	//	[Export ("presentOptionsMenuFromBarButtonItem:animated:")]
	//	bool PresentOptionsMenuFromBarButtonItem (UIBarButtonItem item, bool animated);

	//	// -(BOOL)presentPreviewAnimated:(BOOL)animated;
	//	[Export ("presentPreviewAnimated:")]
	//	bool PresentPreviewAnimated (bool animated);

	//	// -(BOOL)presentOpenInMenuFromRect:(CGRect)rect inView:(UIView * _Nonnull)view animated:(BOOL)animated;
	//	[Export ("presentOpenInMenuFromRect:inView:animated:")]
	//	bool PresentOpenInMenuFromRect (CGRect rect, UIView view, bool animated);

	//	// -(BOOL)presentOpenInMenuFromBarButtonItem:(UIBarButtonItem * _Nonnull)item animated:(BOOL)animated;
	//	[Export ("presentOpenInMenuFromBarButtonItem:animated:")]
	//	bool PresentOpenInMenuFromBarButtonItem (UIBarButtonItem item, bool animated);

	//	// -(void)dismissPreviewAnimated:(BOOL)animated;
	//	[Export ("dismissPreviewAnimated:")]
	//	void DismissPreviewAnimated (bool animated);

	//	// -(void)dismissMenuAnimated:(BOOL)animated;
	//	[Export ("dismissMenuAnimated:")]
	//	void DismissMenuAnimated (bool animated);

	//	// @property (readonly, nonatomic) NSArray<__kindof UIGestureRecognizer *> * _Nonnull gestureRecognizers;
	//	[Export ("gestureRecognizers")]
	//	UIGestureRecognizer[] GestureRecognizers { get; }
	//}

	//// @protocol UIDocumentInteractionControllerDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIDocumentInteractionControllerDelegate
	//{
	//	// @optional -(UIViewController * _Nonnull)documentInteractionControllerViewControllerForPreview:(UIDocumentInteractionController * _Nonnull)controller;
	//	[Export ("documentInteractionControllerViewControllerForPreview:")]
	//	UIViewController DocumentInteractionControllerViewControllerForPreview (UIDocumentInteractionController controller);

	//	// @optional -(CGRect)documentInteractionControllerRectForPreview:(UIDocumentInteractionController * _Nonnull)controller;
	//	[Export ("documentInteractionControllerRectForPreview:")]
	//	CGRect DocumentInteractionControllerRectForPreview (UIDocumentInteractionController controller);

	//	// @optional -(UIView * _Nullable)documentInteractionControllerViewForPreview:(UIDocumentInteractionController * _Nonnull)controller;
	//	[Export ("documentInteractionControllerViewForPreview:")]
	//	[return: NullAllowed]
	//	UIView DocumentInteractionControllerViewForPreview (UIDocumentInteractionController controller);

	//	// @optional -(void)documentInteractionControllerWillBeginPreview:(UIDocumentInteractionController * _Nonnull)controller;
	//	[Export ("documentInteractionControllerWillBeginPreview:")]
	//	void DocumentInteractionControllerWillBeginPreview (UIDocumentInteractionController controller);

	//	// @optional -(void)documentInteractionControllerDidEndPreview:(UIDocumentInteractionController * _Nonnull)controller;
	//	[Export ("documentInteractionControllerDidEndPreview:")]
	//	void DocumentInteractionControllerDidEndPreview (UIDocumentInteractionController controller);

	//	// @optional -(void)documentInteractionControllerWillPresentOptionsMenu:(UIDocumentInteractionController * _Nonnull)controller;
	//	[Export ("documentInteractionControllerWillPresentOptionsMenu:")]
	//	void DocumentInteractionControllerWillPresentOptionsMenu (UIDocumentInteractionController controller);

	//	// @optional -(void)documentInteractionControllerDidDismissOptionsMenu:(UIDocumentInteractionController * _Nonnull)controller;
	//	[Export ("documentInteractionControllerDidDismissOptionsMenu:")]
	//	void DocumentInteractionControllerDidDismissOptionsMenu (UIDocumentInteractionController controller);

	//	// @optional -(void)documentInteractionControllerWillPresentOpenInMenu:(UIDocumentInteractionController * _Nonnull)controller;
	//	[Export ("documentInteractionControllerWillPresentOpenInMenu:")]
	//	void DocumentInteractionControllerWillPresentOpenInMenu (UIDocumentInteractionController controller);

	//	// @optional -(void)documentInteractionControllerDidDismissOpenInMenu:(UIDocumentInteractionController * _Nonnull)controller;
	//	[Export ("documentInteractionControllerDidDismissOpenInMenu:")]
	//	void DocumentInteractionControllerDidDismissOpenInMenu (UIDocumentInteractionController controller);

	//	// @optional -(void)documentInteractionController:(UIDocumentInteractionController * _Nonnull)controller willBeginSendingToApplication:(NSString * _Nullable)application;
	//	[Export ("documentInteractionController:willBeginSendingToApplication:")]
	//	void DocumentInteractionController (UIDocumentInteractionController controller, [NullAllowed] string application);

	//	// @optional -(void)documentInteractionController:(UIDocumentInteractionController * _Nonnull)controller didEndSendingToApplication:(NSString * _Nullable)application;
	//	[Export ("documentInteractionController:didEndSendingToApplication:")]
	//	void DocumentInteractionController (UIDocumentInteractionController controller, [NullAllowed] string application);

	//	// @optional -(BOOL)documentInteractionController:(UIDocumentInteractionController * _Nonnull)controller canPerformAction:(SEL _Nullable)action __attribute__((availability(ios, introduced=3.2, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 2)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[Export ("documentInteractionController:canPerformAction:")]
	//	bool DocumentInteractionController (UIDocumentInteractionController controller, [NullAllowed] Selector action);

	//	// @optional -(BOOL)documentInteractionController:(UIDocumentInteractionController * _Nonnull)controller performAction:(SEL _Nullable)action __attribute__((availability(ios, introduced=3.2, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 3, 2)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[Export ("documentInteractionController:performAction:")]
	//	bool DocumentInteractionController (UIDocumentInteractionController controller, [NullAllowed] Selector action);
	//}

	//// @protocol UIDocumentPickerDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIDocumentPickerDelegate
	//{
	//	// @optional -(void)documentPicker:(UIDocumentPickerViewController * _Nonnull)controller didPickDocumentsAtURLs:(NSArray<NSURL *> * _Nonnull)urls __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Export ("documentPicker:didPickDocumentsAtURLs:")]
	//	void DocumentPicker (UIDocumentPickerViewController controller, NSUrl[] urls);

	//	// @optional -(void)documentPickerWasCancelled:(UIDocumentPickerViewController * _Nonnull)controller;
	//	[Export ("documentPickerWasCancelled:")]
	//	void DocumentPickerWasCancelled (UIDocumentPickerViewController controller);

	//	// @optional -(void)documentPicker:(UIDocumentPickerViewController * _Nonnull)controller didPickDocumentAtURL:(NSURL * _Nonnull)url __attribute__((availability(ios, introduced=8.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 8, 0, message: "Implement documentPicker:didPickDocumentsAtURLs: instead")]
	//	[Deprecated (PlatformName.iOS, 11, 0, message: "Implement documentPicker:didPickDocumentsAtURLs: instead")]
	//	[Export ("documentPicker:didPickDocumentAtURL:")]
	//	void DocumentPicker (UIDocumentPickerViewController controller, NSUrl url);
	//}

	//// @interface UIDocumentPickerViewController : UIViewController
	//[NoTV, iOS (8,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UIDocumentPickerViewController
	//{
	//	// -(instancetype _Nonnull)initWithDocumentTypes:(NSArray<NSString *> * _Nonnull)allowedUTIs inMode:(UIDocumentPickerMode)mode __attribute__((objc_designated_initializer));
	//	[Export ("initWithDocumentTypes:inMode:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string[] allowedUTIs, UIDocumentPickerMode mode);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)url inMode:(UIDocumentPickerMode)mode __attribute__((objc_designated_initializer));
	//	[Export ("initWithURL:inMode:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl url, UIDocumentPickerMode mode);

	//	// -(instancetype _Nonnull)initWithURLs:(NSArray<NSURL *> * _Nonnull)urls inMode:(UIDocumentPickerMode)mode __attribute__((availability(ios, introduced=11.0))) __attribute__((objc_designated_initializer));
	//	[iOS (11,0)]
	//	[Export ("initWithURLs:inMode:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl[] urls, UIDocumentPickerMode mode);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIDocumentPickerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIDocumentPickerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, assign, nonatomic) UIDocumentPickerMode documentPickerMode;
	//	[Export ("documentPickerMode", ArgumentSemantic.Assign)]
	//	UIDocumentPickerMode DocumentPickerMode { get; }

	//	// @property (assign, nonatomic) BOOL allowsMultipleSelection __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("allowsMultipleSelection")]
	//	bool AllowsMultipleSelection { get; set; }
	//}

	//// @protocol UIDocumentMenuDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIDocumentMenuDelegate
	//{
	//	// @required -(void)documentMenu:(UIDocumentMenuViewController * _Nonnull)documentMenu didPickDocumentPicker:(UIDocumentPickerViewController * _Nonnull)documentPicker;
	//	[Abstract]
	//	[Export ("documentMenu:didPickDocumentPicker:")]
	//	void DocumentMenu (UIDocumentMenuViewController documentMenu, UIDocumentPickerViewController documentPicker);

	//	// @optional -(void)documentMenuWasCancelled:(UIDocumentMenuViewController * _Nonnull)documentMenu;
	//	[Export ("documentMenuWasCancelled:")]
	//	void DocumentMenuWasCancelled (UIDocumentMenuViewController documentMenu);
	//}

	//// @interface UIDocumentMenuViewController : UIViewController
	//[Introduced (PlatformName.iOS, 8, 0, message: "UIDocumentMenuViewController is deprecated. Use UIDocumentPickerViewController directly.")]
	//[Deprecated (PlatformName.iOS, 11, 0, message: "UIDocumentMenuViewController is deprecated. Use UIDocumentPickerViewController directly.")]
	//[NoTV]
	//[BaseType (typeof(UIViewController))]
	//interface UIDocumentMenuViewController
	//{
	//	// -(instancetype _Nonnull)initWithDocumentTypes:(NSArray<NSString *> * _Nonnull)allowedUTIs inMode:(UIDocumentPickerMode)mode __attribute__((objc_designated_initializer));
	//	[Export ("initWithDocumentTypes:inMode:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string[] allowedUTIs, UIDocumentPickerMode mode);

	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)url inMode:(UIDocumentPickerMode)mode __attribute__((objc_designated_initializer));
	//	[Export ("initWithURL:inMode:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl url, UIDocumentPickerMode mode);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)addOptionWithTitle:(NSString * _Nonnull)title image:(UIImage * _Nullable)image order:(UIDocumentMenuOrder)order handler:(void (^ _Nonnull)(void))handler;
	//	[Export ("addOptionWithTitle:image:order:handler:")]
	//	void AddOptionWithTitle (string title, [NullAllowed] UIImage image, UIDocumentMenuOrder order, Action handler);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIDocumentMenuDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIDocumentMenuDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }
	//}

	//// @interface UIDocumentPickerExtensionViewController : UIViewController
	//[NoTV, iOS (8,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UIDocumentPickerExtensionViewController
	//{
	//	// -(void)dismissGrantingAccessToURL:(NSURL * _Nullable)url;
	//	[Export ("dismissGrantingAccessToURL:")]
	//	void DismissGrantingAccessToURL ([NullAllowed] NSUrl url);

	//	// -(void)prepareForPresentationInMode:(UIDocumentPickerMode)mode;
	//	[Export ("prepareForPresentationInMode:")]
	//	void PrepareForPresentationInMode (UIDocumentPickerMode mode);

	//	// @property (readonly, assign, nonatomic) UIDocumentPickerMode documentPickerMode;
	//	[Export ("documentPickerMode", ArgumentSemantic.Assign)]
	//	UIDocumentPickerMode DocumentPickerMode { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable originalURL;
	//	[NullAllowed, Export ("originalURL", ArgumentSemantic.Copy)]
	//	NSUrl OriginalURL { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nullable validTypes;
	//	[NullAllowed, Export ("validTypes", ArgumentSemantic.Copy)]
	//	string[] ValidTypes { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull providerIdentifier;
	//	[Export ("providerIdentifier")]
	//	string ProviderIdentifier { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable documentStorageURL;
	//	[NullAllowed, Export ("documentStorageURL", ArgumentSemantic.Copy)]
	//	NSUrl DocumentStorageURL { get; }
	//}

	//// @protocol UICloudSharingControllerDelegate <NSObject>
	//[NoWatch, NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UICloudSharingControllerDelegate
	//{
	//	// @required -(void)cloudSharingController:(UICloudSharingController * _Nonnull)csc failedToSaveShareWithError:(NSError * _Nonnull)error;
	//	[Abstract]
	//	[Export ("cloudSharingController:failedToSaveShareWithError:")]
	//	void CloudSharingController (UICloudSharingController csc, NSError error);

	//	// @required -(NSString * _Nullable)itemTitleForCloudSharingController:(UICloudSharingController * _Nonnull)csc;
	//	[Abstract]
	//	[Export ("itemTitleForCloudSharingController:")]
	//	[return: NullAllowed]
	//	string ItemTitleForCloudSharingController (UICloudSharingController csc);

	//	// @optional -(NSData * _Nullable)itemThumbnailDataForCloudSharingController:(UICloudSharingController * _Nonnull)csc;
	//	[Export ("itemThumbnailDataForCloudSharingController:")]
	//	[return: NullAllowed]
	//	NSData ItemThumbnailDataForCloudSharingController (UICloudSharingController csc);

	//	// @optional -(NSString * _Nullable)itemTypeForCloudSharingController:(UICloudSharingController * _Nonnull)csc;
	//	[Export ("itemTypeForCloudSharingController:")]
	//	[return: NullAllowed]
	//	string ItemTypeForCloudSharingController (UICloudSharingController csc);

	//	// @optional -(void)cloudSharingControllerDidSaveShare:(UICloudSharingController * _Nonnull)csc;
	//	[Export ("cloudSharingControllerDidSaveShare:")]
	//	void CloudSharingControllerDidSaveShare (UICloudSharingController csc);

	//	// @optional -(void)cloudSharingControllerDidStopSharing:(UICloudSharingController * _Nonnull)csc;
	//	[Export ("cloudSharingControllerDidStopSharing:")]
	//	void CloudSharingControllerDidStopSharing (UICloudSharingController csc);
	//}

	//// @interface UICloudSharingController : UIViewController
	//[NoWatch, NoTV, iOS (10,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UICloudSharingController
	//{
	//	// -(instancetype _Nonnull)initWithPreparationHandler:(void (^ _Nonnull)(UICloudSharingController * _Nonnull, void (^ _Nonnull)(CKShare * _Nullable, CKContainer * _Nullable, NSError * _Nullable)))preparationHandler;
	//	[Export ("initWithPreparationHandler:")]
	//	IntPtr Constructor (Action<UICloudSharingController, Action<CKShare, CKContainer, NSError>> preparationHandler);

	//	// -(instancetype _Nonnull)initWithShare:(CKShare * _Nonnull)share container:(CKContainer * _Nonnull)container;
	//	[Export ("initWithShare:container:")]
	//	IntPtr Constructor (CKShare share, CKContainer container);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UICloudSharingControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UICloudSharingControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, nonatomic, strong) CKShare * _Nullable share;
	//	[NullAllowed, Export ("share", ArgumentSemantic.Strong)]
	//	CKShare Share { get; }

	//	// @property (nonatomic) UICloudSharingPermissionOptions availablePermissions;
	//	[Export ("availablePermissions", ArgumentSemantic.Assign)]
	//	UICloudSharingPermissionOptions AvailablePermissions { get; set; }

	//	// -(id<UIActivityItemSource> _Nonnull)activityItemSource;
	//	[Export ("activityItemSource")]
	//	[Verify (MethodToProperty)]
	//	UIActivityItemSource ActivityItemSource { get; }
	//}

	//// @interface UIVisualEffect : NSObject <NSCopying, NSSecureCoding>
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIVisualEffect : INSCopying, INSSecureCoding
	//{
	//}

	//// @interface UIBlurEffect : UIVisualEffect
	//[iOS (8,0)]
	//[BaseType (typeof(UIVisualEffect))]
	//interface UIBlurEffect
	//{
	//	// +(UIBlurEffect * _Nonnull)effectWithStyle:(UIBlurEffectStyle)style;
	//	[Static]
	//	[Export ("effectWithStyle:")]
	//	UIBlurEffect EffectWithStyle (UIBlurEffectStyle style);
	//}

	//// @interface UIVibrancyEffect : UIVisualEffect
	//[iOS (8,0)]
	//[BaseType (typeof(UIVisualEffect))]
	//interface UIVibrancyEffect
	//{
	//	// +(UIVibrancyEffect * _Nonnull)effectForBlurEffect:(UIBlurEffect * _Nonnull)blurEffect;
	//	[Static]
	//	[Export ("effectForBlurEffect:")]
	//	UIVibrancyEffect EffectForBlurEffect (UIBlurEffect blurEffect);
	//}

	//// @interface UIVisualEffectView : UIView <NSSecureCoding>
	//[iOS (8,0)]
	//[BaseType (typeof(UIView))]
	//interface UIVisualEffectView : INSSecureCoding
	//{
	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull contentView;
	//	[Export ("contentView", ArgumentSemantic.Strong)]
	//	UIView ContentView { get; }

	//	// @property (copy, nonatomic) UIVisualEffect * _Nullable effect;
	//	[NullAllowed, Export ("effect", ArgumentSemantic.Copy)]
	//	UIVisualEffect Effect { get; set; }

	//	// -(instancetype _Nonnull)initWithEffect:(UIVisualEffect * _Nullable)effect __attribute__((objc_designated_initializer));
	//	[Export ("initWithEffect:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] UIVisualEffect effect);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface UIFontMetrics : NSObject
	//[Watch (4,0), TV (11,0), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIFontMetrics
	//{
	//	// @property (readonly, strong, class) UIFontMetrics * _Nonnull defaultMetrics;
	//	[Static]
	//	[Export ("defaultMetrics", ArgumentSemantic.Strong)]
	//	UIFontMetrics DefaultMetrics { get; }

	//	// +(instancetype _Nonnull)metricsForTextStyle:(UIFontTextStyle _Nonnull)textStyle;
	//	[Static]
	//	[Export ("metricsForTextStyle:")]
	//	UIFontMetrics MetricsForTextStyle (string textStyle);

	//	// -(instancetype _Nonnull)initForTextStyle:(UIFontTextStyle _Nonnull)textStyle __attribute__((objc_designated_initializer));
	//	[Export ("initForTextStyle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string textStyle);

	//	// -(UIFont * _Nonnull)scaledFontForFont:(UIFont * _Nonnull)font;
	//	[Export ("scaledFontForFont:")]
	//	UIFont ScaledFontForFont (UIFont font);

	//	// -(UIFont * _Nonnull)scaledFontForFont:(UIFont * _Nonnull)font maximumPointSize:(CGFloat)maximumPointSize;
	//	[Export ("scaledFontForFont:maximumPointSize:")]
	//	UIFont ScaledFontForFont (UIFont font, nfloat maximumPointSize);

	//	// -(UIFont * _Nonnull)scaledFontForFont:(UIFont * _Nonnull)font compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(watchos, unavailable)));
	//	[NoWatch]
	//	[Export ("scaledFontForFont:compatibleWithTraitCollection:")]
	//	UIFont ScaledFontForFont (UIFont font, [NullAllowed] UITraitCollection traitCollection);

	//	// -(UIFont * _Nonnull)scaledFontForFont:(UIFont * _Nonnull)font maximumPointSize:(CGFloat)maximumPointSize compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(watchos, unavailable)));
	//	[NoWatch]
	//	[Export ("scaledFontForFont:maximumPointSize:compatibleWithTraitCollection:")]
	//	UIFont ScaledFontForFont (UIFont font, nfloat maximumPointSize, [NullAllowed] UITraitCollection traitCollection);

	//	// -(CGFloat)scaledValueForValue:(CGFloat)value;
	//	[Export ("scaledValueForValue:")]
	//	nfloat ScaledValueForValue (nfloat value);

	//	// -(CGFloat)scaledValueForValue:(CGFloat)value compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(watchos, unavailable)));
	//	[NoWatch]
	//	[Export ("scaledValueForValue:compatibleWithTraitCollection:")]
	//	nfloat ScaledValueForValue (nfloat value, [NullAllowed] UITraitCollection traitCollection);
	//}

	//// @interface UIGestureRecognizer : NSObject
	//[iOS (3,2)]
	//[BaseType (typeof(NSObject))]
	//interface UIGestureRecognizer
	//{
	//	// -(instancetype _Nonnull)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action __attribute__((objc_designated_initializer));
	//	[Export ("initWithTarget:action:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSObject target, [NullAllowed] Selector action);

	//	// -(void)addTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
	//	[Export ("addTarget:action:")]
	//	void AddTarget (NSObject target, Selector action);

	//	// -(void)removeTarget:(id _Nullable)target action:(SEL _Nullable)action;
	//	[Export ("removeTarget:action:")]
	//	void RemoveTarget ([NullAllowed] NSObject target, [NullAllowed] Selector action);

	//	// @property (readonly, nonatomic) UIGestureRecognizerState state;
	//	[Export ("state")]
	//	UIGestureRecognizerState State { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIGestureRecognizerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIGestureRecognizerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (readonly, nonatomic) UIView * _Nullable view;
	//	[NullAllowed, Export ("view")]
	//	UIView View { get; }

	//	// @property (nonatomic) BOOL cancelsTouchesInView;
	//	[Export ("cancelsTouchesInView")]
	//	bool CancelsTouchesInView { get; set; }

	//	// @property (nonatomic) BOOL delaysTouchesBegan;
	//	[Export ("delaysTouchesBegan")]
	//	bool DelaysTouchesBegan { get; set; }

	//	// @property (nonatomic) BOOL delaysTouchesEnded;
	//	[Export ("delaysTouchesEnded")]
	//	bool DelaysTouchesEnded { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedTouchTypes __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("allowedTouchTypes", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedTouchTypes { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedPressTypes __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("allowedPressTypes", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedPressTypes { get; set; }

	//	// @property (nonatomic) BOOL requiresExclusiveTouchType __attribute__((availability(ios, introduced=9.2)));
	//	[iOS (9, 2)]
	//	[Export ("requiresExclusiveTouchType")]
	//	bool RequiresExclusiveTouchType { get; set; }

	//	// -(void)requireGestureRecognizerToFail:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
	//	[Export ("requireGestureRecognizerToFail:")]
	//	void RequireGestureRecognizerToFail (UIGestureRecognizer otherGestureRecognizer);

	//	// -(CGPoint)locationInView:(UIView * _Nullable)view;
	//	[Export ("locationInView:")]
	//	CGPoint LocationInView ([NullAllowed] UIView view);

	//	// @property (readonly, nonatomic) NSUInteger numberOfTouches;
	//	[Export ("numberOfTouches")]
	//	nuint NumberOfTouches { get; }

	//	// -(CGPoint)locationOfTouch:(NSUInteger)touchIndex inView:(UIView * _Nullable)view;
	//	[Export ("locationOfTouch:inView:")]
	//	CGPoint LocationOfTouch (nuint touchIndex, [NullAllowed] UIView view);

	//	// @property (copy, nonatomic) NSString * _Nullable name __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[NullAllowed, Export ("name")]
	//	string Name { get; set; }
	//}

	//// @protocol UIGestureRecognizerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIGestureRecognizerDelegate
	//{
	//	// @optional -(BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
	//	[Export ("gestureRecognizerShouldBegin:")]
	//	bool GestureRecognizerShouldBegin (UIGestureRecognizer gestureRecognizer);

	//	// @optional -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
	//	[Export ("gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:")]
	//	bool GestureRecognizer (UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);

	//	// @optional -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("gestureRecognizer:shouldRequireFailureOfGestureRecognizer:")]
	//	bool GestureRecognizer (UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);

	//	// @optional -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:")]
	//	bool GestureRecognizer (UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);

	//	// @optional -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch;
	//	[Export ("gestureRecognizer:shouldReceiveTouch:")]
	//	bool GestureRecognizer (UIGestureRecognizer gestureRecognizer, UITouch touch);

	//	// @optional -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceivePress:(UIPress * _Nonnull)press;
	//	[Export ("gestureRecognizer:shouldReceivePress:")]
	//	bool GestureRecognizer (UIGestureRecognizer gestureRecognizer, UIPress press);
	//}

	//// @interface UIGraphicsRendererFormat : NSObject <NSCopying>
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIGraphicsRendererFormat : INSCopying
	//{
	//	// +(instancetype _Nonnull)defaultFormat __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0, deprecated=11.0)));
	//	[Introduced (PlatformName.TvOS, 10, 0)]
	//	[Deprecated (PlatformName.TvOS, 11, 0)]
	//	[Watch (3,0), iOS (10,0)]
	//	[Static]
	//	[Export ("defaultFormat")]
	//	UIGraphicsRendererFormat DefaultFormat ();

	//	// +(instancetype _Nonnull)preferredFormat __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[Watch (4,0), TV (11,0), iOS (11,0)]
	//	[Static]
	//	[Export ("preferredFormat")]
	//	UIGraphicsRendererFormat PreferredFormat ();

	//	// @property (readonly, nonatomic) CGRect bounds;
	//	[Export ("bounds")]
	//	CGRect Bounds { get; }
	//}

	//// @interface UIGraphicsRendererContext : NSObject
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIGraphicsRendererContext
	//{
	//	// @property (readonly, nonatomic) CGContextRef _Nonnull CGContext;
	//	[Export ("CGContext")]
	//	unsafe CGContextRef* CGContext { get; }

	//	// @property (readonly, nonatomic) __kindof UIGraphicsRendererFormat * _Nonnull format;
	//	[Export ("format")]
	//	UIGraphicsRendererFormat Format { get; }

	//	// -(void)fillRect:(CGRect)rect;
	//	[Export ("fillRect:")]
	//	void FillRect (CGRect rect);

	//	// -(void)fillRect:(CGRect)rect blendMode:(CGBlendMode)blendMode;
	//	[Export ("fillRect:blendMode:")]
	//	void FillRect (CGRect rect, CGBlendMode blendMode);

	//	// -(void)strokeRect:(CGRect)rect;
	//	[Export ("strokeRect:")]
	//	void StrokeRect (CGRect rect);

	//	// -(void)strokeRect:(CGRect)rect blendMode:(CGBlendMode)blendMode;
	//	[Export ("strokeRect:blendMode:")]
	//	void StrokeRect (CGRect rect, CGBlendMode blendMode);

	//	// -(void)clipToRect:(CGRect)rect;
	//	[Export ("clipToRect:")]
	//	void ClipToRect (CGRect rect);
	//}

	//// @interface UIGraphicsRenderer : NSObject
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIGraphicsRenderer
	//{
	//	// -(instancetype _Nonnull)initWithBounds:(CGRect)bounds;
	//	[Export ("initWithBounds:")]
	//	IntPtr Constructor (CGRect bounds);

	//	// -(instancetype _Nonnull)initWithBounds:(CGRect)bounds format:(UIGraphicsRendererFormat * _Nonnull)format __attribute__((objc_designated_initializer));
	//	[Export ("initWithBounds:format:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect bounds, UIGraphicsRendererFormat format);

	//	// @property (readonly, nonatomic) __kindof UIGraphicsRendererFormat * _Nonnull format;
	//	[Export ("format")]
	//	UIGraphicsRendererFormat Format { get; }

	//	// @property (readonly, nonatomic) BOOL allowsImageOutput;
	//	[Export ("allowsImageOutput")]
	//	bool AllowsImageOutput { get; }
	//}

	//// typedef void (^UIGraphicsImageDrawingActions)(UIGraphicsImageRendererContext * _Nonnull);
	//delegate void UIGraphicsImageDrawingActions (UIGraphicsImageRendererContext arg0);

	//// @interface UIGraphicsImageRendererFormat : UIGraphicsRendererFormat
	//[iOS (10,0)]
	//[BaseType (typeof(UIGraphicsRendererFormat))]
	//interface UIGraphicsImageRendererFormat
	//{
	//	// @property (nonatomic) CGFloat scale;
	//	[Export ("scale")]
	//	nfloat Scale { get; set; }

	//	// @property (nonatomic) BOOL opaque;
	//	[Export ("opaque")]
	//	bool Opaque { get; set; }

	//	// @property (nonatomic) BOOL prefersExtendedRange __attribute__((availability(ios, introduced=10.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 10, 0, message: "Use the preferredRange property instead")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "Use the preferredRange property instead")]
	//	[Export ("prefersExtendedRange")]
	//	bool PrefersExtendedRange { get; set; }

	//	// @property (nonatomic) UIGraphicsImageRendererFormatRange preferredRange __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12, 0)]
	//	[Export ("preferredRange", ArgumentSemantic.Assign)]
	//	UIGraphicsImageRendererFormatRange PreferredRange { get; set; }

	//	// +(instancetype _Nonnull)formatForTraitCollection:(UITraitCollection * _Nonnull)traitCollection __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11,0)]
	//	[Static]
	//	[Export ("formatForTraitCollection:")]
	//	UIGraphicsImageRendererFormat FormatForTraitCollection (UITraitCollection traitCollection);
	//}

	//// @interface UIGraphicsImageRendererContext : UIGraphicsRendererContext
	//[iOS (10,0)]
	//[BaseType (typeof(UIGraphicsRendererContext))]
	//interface UIGraphicsImageRendererContext
	//{
	//	// @property (readonly, nonatomic) UIImage * _Nonnull currentImage;
	//	[Export ("currentImage")]
	//	UIImage CurrentImage { get; }
	//}

	//// @interface UIGraphicsImageRenderer : UIGraphicsRenderer
	//[iOS (10,0)]
	//[BaseType (typeof(UIGraphicsRenderer))]
	//interface UIGraphicsImageRenderer
	//{
	//	// -(instancetype _Nonnull)initWithSize:(CGSize)size;
	//	[Export ("initWithSize:")]
	//	IntPtr Constructor (CGSize size);

	//	// -(instancetype _Nonnull)initWithSize:(CGSize)size format:(UIGraphicsImageRendererFormat * _Nonnull)format __attribute__((objc_designated_initializer));
	//	[Export ("initWithSize:format:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGSize size, UIGraphicsImageRendererFormat format);

	//	// -(instancetype _Nonnull)initWithBounds:(CGRect)bounds format:(UIGraphicsImageRendererFormat * _Nonnull)format __attribute__((objc_designated_initializer));
	//	[Export ("initWithBounds:format:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect bounds, UIGraphicsImageRendererFormat format);

	//	// -(UIImage * _Nonnull)imageWithActions:(UIGraphicsImageDrawingActions _Nonnull)actions;
	//	[Export ("imageWithActions:")]
	//	UIImage ImageWithActions (UIGraphicsImageDrawingActions actions);

	//	// -(NSData * _Nonnull)PNGDataWithActions:(UIGraphicsImageDrawingActions _Nonnull)actions;
	//	[Export ("PNGDataWithActions:")]
	//	NSData PNGDataWithActions (UIGraphicsImageDrawingActions actions);

	//	// -(NSData * _Nonnull)JPEGDataWithCompressionQuality:(CGFloat)compressionQuality actions:(UIGraphicsImageDrawingActions _Nonnull)actions;
	//	[Export ("JPEGDataWithCompressionQuality:actions:")]
	//	NSData JPEGDataWithCompressionQuality (nfloat compressionQuality, UIGraphicsImageDrawingActions actions);
	//}

	//// typedef void (^UIGraphicsPDFDrawingActions)(UIGraphicsPDFRendererContext * _Nonnull);
	//delegate void UIGraphicsPDFDrawingActions (UIGraphicsPdfRendererContext arg0);

	//// @interface UIGraphicsPDFRendererFormat : UIGraphicsRendererFormat
	//[iOS (10,0)]
	//[BaseType (typeof(UIGraphicsRendererFormat))]
	//interface UIGraphicsPDFRendererFormat
	//{
	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nonnull documentInfo;
	//	[Export ("documentInfo", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> DocumentInfo { get; set; }
	//}

	//// @interface UIGraphicsPDFRendererContext : UIGraphicsRendererContext
	//[iOS (10,0)]
	//[BaseType (typeof(UIGraphicsRendererContext))]
	//interface UIGraphicsPDFRendererContext
	//{
	//	// @property (readonly, nonatomic) CGRect pdfContextBounds;
	//	[Export ("pdfContextBounds")]
	//	CGRect PdfContextBounds { get; }

	//	// -(void)beginPage;
	//	[Export ("beginPage")]
	//	void BeginPage ();

	//	// -(void)beginPageWithBounds:(CGRect)bounds pageInfo:(NSDictionary<NSString *,id> * _Nonnull)pageInfo;
	//	[Export ("beginPageWithBounds:pageInfo:")]
	//	void BeginPageWithBounds (CGRect bounds, NSDictionary<NSString, NSObject> pageInfo);

	//	// -(void)setURL:(NSURL * _Nonnull)url forRect:(CGRect)rect;
	//	[Export ("setURL:forRect:")]
	//	void SetURL (NSUrl url, CGRect rect);

	//	// -(void)addDestinationWithName:(NSString * _Nonnull)name atPoint:(CGPoint)point;
	//	[Export ("addDestinationWithName:atPoint:")]
	//	void AddDestinationWithName (string name, CGPoint point);

	//	// -(void)setDestinationWithName:(NSString * _Nonnull)name forRect:(CGRect)rect;
	//	[Export ("setDestinationWithName:forRect:")]
	//	void SetDestinationWithName (string name, CGRect rect);
	//}

	//// @interface UIGraphicsPDFRenderer : UIGraphicsRenderer
	//[iOS (10,0)]
	//[BaseType (typeof(UIGraphicsRenderer))]
	//interface UIGraphicsPDFRenderer
	//{
	//	// -(instancetype _Nonnull)initWithBounds:(CGRect)bounds format:(UIGraphicsPDFRendererFormat * _Nonnull)format __attribute__((objc_designated_initializer));
	//	[Export ("initWithBounds:format:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect bounds, UIGraphicsPdfRendererFormat format);

	//	// -(BOOL)writePDFToURL:(NSURL * _Nonnull)url withActions:(UIGraphicsPDFDrawingActions _Nonnull)actions error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("writePDFToURL:withActions:error:")]
	//	bool WritePDFToURL (NSUrl url, UIGraphicsPDFDrawingActions actions, [NullAllowed] out NSError error);

	//	// -(NSData * _Nonnull)PDFDataWithActions:(UIGraphicsPDFDrawingActions _Nonnull)actions;
	//	[Export ("PDFDataWithActions:")]
	//	NSData PDFDataWithActions (UIGraphicsPDFDrawingActions actions);
	//}

	//// @interface UIImageAsset : NSObject <NSSecureCoding>
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIImageAsset : INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(UIImage * _Nonnull)imageWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection;
	//	[Export ("imageWithTraitCollection:")]
	//	UIImage ImageWithTraitCollection (UITraitCollection traitCollection);

	//	// -(void)registerImage:(UIImage * _Nonnull)image withTraitCollection:(UITraitCollection * _Nonnull)traitCollection;
	//	[Export ("registerImage:withTraitCollection:")]
	//	void RegisterImage (UIImage image, UITraitCollection traitCollection);

	//	// -(void)unregisterImageWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection;
	//	[Export ("unregisterImageWithTraitCollection:")]
	//	void UnregisterImageWithTraitCollection (UITraitCollection traitCollection);
	//}

	//// @interface NSDataAsset : NSObject <NSCopying>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface NSDataAsset : INSCopying
	//{
	//	// -(instancetype _Nullable)initWithName:(NSString * _Nonnull)name;
	//	[Export ("initWithName:")]
	//	IntPtr Constructor (string name);

	//	// -(instancetype _Nullable)initWithName:(NSString * _Nonnull)name bundle:(NSBundle * _Nonnull)bundle __attribute__((objc_designated_initializer));
	//	[Export ("initWithName:bundle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string name, NSBundle bundle);

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, copy, nonatomic) NSData * _Nonnull data;
	//	[Export ("data", ArgumentSemantic.Copy)]
	//	NSData Data { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull typeIdentifier;
	//	[Export ("typeIdentifier")]
	//	string TypeIdentifier { get; }
	//}

	//// @interface UIPanGestureRecognizer : UIGestureRecognizer
	//[iOS (3,2)]
	//[BaseType (typeof(UIGestureRecognizer))]
	//interface UIPanGestureRecognizer
	//{
	//	// @property (nonatomic) NSUInteger minimumNumberOfTouches __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("minimumNumberOfTouches")]
	//	nuint MinimumNumberOfTouches { get; set; }

	//	// @property (nonatomic) NSUInteger maximumNumberOfTouches __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("maximumNumberOfTouches")]
	//	nuint MaximumNumberOfTouches { get; set; }

	//	// -(CGPoint)translationInView:(UIView * _Nullable)view;
	//	[Export ("translationInView:")]
	//	CGPoint TranslationInView ([NullAllowed] UIView view);

	//	// -(void)setTranslation:(CGPoint)translation inView:(UIView * _Nullable)view;
	//	[Export ("setTranslation:inView:")]
	//	void SetTranslation (CGPoint translation, [NullAllowed] UIView view);

	//	// -(CGPoint)velocityInView:(UIView * _Nullable)view;
	//	[Export ("velocityInView:")]
	//	CGPoint VelocityInView ([NullAllowed] UIView view);
	//}

	//// @interface UITapGestureRecognizer : UIGestureRecognizer
	//[iOS (3,2)]
	//[BaseType (typeof(UIGestureRecognizer))]
	//interface UITapGestureRecognizer
	//{
	//	// @property (nonatomic) NSUInteger numberOfTapsRequired;
	//	[Export ("numberOfTapsRequired")]
	//	nuint NumberOfTapsRequired { get; set; }

	//	// @property (nonatomic) NSUInteger numberOfTouchesRequired __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("numberOfTouchesRequired")]
	//	nuint NumberOfTouchesRequired { get; set; }
	//}

	//// @interface UINavigationController : UIViewController
	//[iOS (2,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UINavigationController
	//{
	//	// -(instancetype _Nonnull)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("initWithNavigationBarClass:toolbarClass:")]
	//	IntPtr Constructor ([NullAllowed] Class navigationBarClass, [NullAllowed] Class toolbarClass);

	//	// -(instancetype _Nonnull)initWithRootViewController:(UIViewController * _Nonnull)rootViewController;
	//	[Export ("initWithRootViewController:")]
	//	IntPtr Constructor (UIViewController rootViewController);

	//	// -(void)pushViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
	//	[Export ("pushViewController:animated:")]
	//	void PushViewController (UIViewController viewController, bool animated);

	//	// -(UIViewController * _Nullable)popViewControllerAnimated:(BOOL)animated;
	//	[Export ("popViewControllerAnimated:")]
	//	[return: NullAllowed]
	//	UIViewController PopViewControllerAnimated (bool animated);

	//	// -(NSArray<__kindof UIViewController *> * _Nullable)popToViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
	//	[Export ("popToViewController:animated:")]
	//	[return: NullAllowed]
	//	UIViewController[] PopToViewController (UIViewController viewController, bool animated);

	//	// -(NSArray<__kindof UIViewController *> * _Nullable)popToRootViewControllerAnimated:(BOOL)animated;
	//	[Export ("popToRootViewControllerAnimated:")]
	//	[return: NullAllowed]
	//	UIViewController[] PopToRootViewControllerAnimated (bool animated);

	//	// @property (readonly, nonatomic, strong) UIViewController * _Nullable topViewController;
	//	[NullAllowed, Export ("topViewController", ArgumentSemantic.Strong)]
	//	UIViewController TopViewController { get; }

	//	// @property (readonly, nonatomic, strong) UIViewController * _Nullable visibleViewController;
	//	[NullAllowed, Export ("visibleViewController", ArgumentSemantic.Strong)]
	//	UIViewController VisibleViewController { get; }

	//	// @property (copy, nonatomic) NSArray<__kindof UIViewController *> * _Nonnull viewControllers;
	//	[Export ("viewControllers", ArgumentSemantic.Copy)]
	//	UIViewController[] ViewControllers { get; set; }

	//	// -(void)setViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers animated:(BOOL)animated __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("setViewControllers:animated:")]
	//	void SetViewControllers (UIViewController[] viewControllers, bool animated);

	//	// @property (getter = isNavigationBarHidden, nonatomic) BOOL navigationBarHidden;
	//	[Export ("navigationBarHidden")]
	//	bool NavigationBarHidden { [Bind ("isNavigationBarHidden")] get; set; }

	//	// -(void)setNavigationBarHidden:(BOOL)hidden animated:(BOOL)animated;
	//	[Export ("setNavigationBarHidden:animated:")]
	//	void SetNavigationBarHidden (bool hidden, bool animated);

	//	// @property (readonly, nonatomic) UINavigationBar * _Nonnull navigationBar;
	//	[Export ("navigationBar")]
	//	UINavigationBar NavigationBar { get; }

	//	// @property (getter = isToolbarHidden, nonatomic) BOOL toolbarHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3, 0)]
	//	[Export ("toolbarHidden")]
	//	bool ToolbarHidden { [Bind ("isToolbarHidden")] get; set; }

	//	// -(void)setToolbarHidden:(BOOL)hidden animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3,0)]
	//	[Export ("setToolbarHidden:animated:")]
	//	void SetToolbarHidden (bool hidden, bool animated);

	//	// @property (readonly, nonatomic) UIToolbar * _Null_unspecified toolbar __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3, 0)]
	//	[Export ("toolbar")]
	//	UIToolbar Toolbar { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UINavigationControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UINavigationControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, nonatomic) UIGestureRecognizer * _Nullable interactivePopGestureRecognizer __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[NullAllowed, Export ("interactivePopGestureRecognizer")]
	//	UIGestureRecognizer InteractivePopGestureRecognizer { get; }

	//	// -(void)showViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("showViewController:sender:")]
	//	void ShowViewController (UIViewController vc, [NullAllowed] NSObject sender);

	//	// @property (assign, readwrite, nonatomic) BOOL hidesBarsWhenKeyboardAppears __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, iOS (8, 0)]
	//	[Export ("hidesBarsWhenKeyboardAppears")]
	//	bool HidesBarsWhenKeyboardAppears { get; set; }

	//	// @property (assign, readwrite, nonatomic) BOOL hidesBarsOnSwipe __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, iOS (8, 0)]
	//	[Export ("hidesBarsOnSwipe")]
	//	bool HidesBarsOnSwipe { get; set; }

	//	// @property (readonly, nonatomic, strong) UIPanGestureRecognizer * _Nonnull barHideOnSwipeGestureRecognizer __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, iOS (8, 0)]
	//	[Export ("barHideOnSwipeGestureRecognizer", ArgumentSemantic.Strong)]
	//	UIPanGestureRecognizer BarHideOnSwipeGestureRecognizer { get; }

	//	// @property (assign, readwrite, nonatomic) BOOL hidesBarsWhenVerticallyCompact __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, iOS (8, 0)]
	//	[Export ("hidesBarsWhenVerticallyCompact")]
	//	bool HidesBarsWhenVerticallyCompact { get; set; }

	//	// @property (assign, readwrite, nonatomic) BOOL hidesBarsOnTap __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, iOS (8, 0)]
	//	[Export ("hidesBarsOnTap")]
	//	bool HidesBarsOnTap { get; set; }

	//	// @property (readonly, assign, nonatomic) UITapGestureRecognizer * _Nonnull barHideOnTapGestureRecognizer __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, iOS (8, 0)]
	//	[Export ("barHideOnTapGestureRecognizer", ArgumentSemantic.Assign)]
	//	UITapGestureRecognizer BarHideOnTapGestureRecognizer { get; }
	//}

	//// @protocol UINavigationControllerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UINavigationControllerDelegate
	//{
	//	// @optional -(void)navigationController:(UINavigationController * _Nonnull)navigationController willShowViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
	//	[Export ("navigationController:willShowViewController:animated:")]
	//	void NavigationController (UINavigationController navigationController, UIViewController viewController, bool animated);

	//	// @optional -(void)navigationController:(UINavigationController * _Nonnull)navigationController didShowViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
	//	[Export ("navigationController:didShowViewController:animated:")]
	//	void NavigationController (UINavigationController navigationController, UIViewController viewController, bool animated);

	//	// @optional -(UIInterfaceOrientationMask)navigationControllerSupportedInterfaceOrientations:(UINavigationController * _Nonnull)navigationController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7,0)]
	//	[Export ("navigationControllerSupportedInterfaceOrientations:")]
	//	UIInterfaceOrientationMask NavigationControllerSupportedInterfaceOrientations (UINavigationController navigationController);

	//	// @optional -(UIInterfaceOrientation)navigationControllerPreferredInterfaceOrientationForPresentation:(UINavigationController * _Nonnull)navigationController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7,0)]
	//	[Export ("navigationControllerPreferredInterfaceOrientationForPresentation:")]
	//	UIInterfaceOrientation NavigationControllerPreferredInterfaceOrientationForPresentation (UINavigationController navigationController);

	//	// @optional -(id<UIViewControllerInteractiveTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController interactionControllerForAnimationController:(id<UIViewControllerAnimatedTransitioning> _Nonnull)animationController __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("navigationController:interactionControllerForAnimationController:")]
	//	[return: NullAllowed]
	//	UIViewControllerInteractiveTransitioning NavigationController (UINavigationController navigationController, UIViewControllerAnimatedTransitioning animationController);

	//	// @optional -(id<UIViewControllerAnimatedTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController animationControllerForOperation:(UINavigationControllerOperation)operation fromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("navigationController:animationControllerForOperation:fromViewController:toViewController:")]
	//	[return: NullAllowed]
	//	UIViewControllerAnimatedTransitioning NavigationController (UINavigationController navigationController, UINavigationControllerOperation operation, UIViewController fromVC, UIViewController toVC);
	//}

	//// @interface UINavigationControllerItem (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UINavigationControllerItem
	//{
	//	// @property (readonly, nonatomic, strong) UINavigationItem * _Nonnull navigationItem;
	//	[Export ("navigationItem", ArgumentSemantic.Strong)]
	//	UINavigationItem NavigationItem { get; }

	//	// @property (nonatomic) BOOL hidesBottomBarWhenPushed __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("hidesBottomBarWhenPushed")]
	//	bool HidesBottomBarWhenPushed { get; set; }

	//	// @property (readonly, nonatomic, strong) UINavigationController * _Nullable navigationController;
	//	[NullAllowed, Export ("navigationController", ArgumentSemantic.Strong)]
	//	UINavigationController NavigationController { get; }
	//}

	//// @interface UINavigationControllerContextualToolbarItems (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UINavigationControllerContextualToolbarItems
	//{
	//	// @property (nonatomic, strong) NSArray<__kindof UIBarButtonItem *> * _Nullable toolbarItems __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3, 0)]
	//	[NullAllowed, Export ("toolbarItems", ArgumentSemantic.Strong)]
	//	UIBarButtonItem[] ToolbarItems { get; set; }

	//	// -(void)setToolbarItems:(NSArray<UIBarButtonItem *> * _Nullable)toolbarItems animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3,0)]
	//	[Export ("setToolbarItems:animated:")]
	//	void SetToolbarItems ([NullAllowed] UIBarButtonItem[] toolbarItems, bool animated);
	//}

	//// @interface UIImagePickerController : UINavigationController <NSCoding>
	//[NoTV, iOS (2,0)]
	//[BaseType (typeof(UINavigationController))]
	//interface UIImagePickerController : INSCoding
	//{
	//	// +(BOOL)isSourceTypeAvailable:(UIImagePickerControllerSourceType)sourceType;
	//	[Static]
	//	[Export ("isSourceTypeAvailable:")]
	//	bool IsSourceTypeAvailable (UIImagePickerControllerSourceType sourceType);

	//	// +(NSArray<NSString *> * _Nullable)availableMediaTypesForSourceType:(UIImagePickerControllerSourceType)sourceType;
	//	[Static]
	//	[Export ("availableMediaTypesForSourceType:")]
	//	[return: NullAllowed]
	//	string[] AvailableMediaTypesForSourceType (UIImagePickerControllerSourceType sourceType);

	//	// +(BOOL)isCameraDeviceAvailable:(UIImagePickerControllerCameraDevice)cameraDevice __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("isCameraDeviceAvailable:")]
	//	bool IsCameraDeviceAvailable (UIImagePickerControllerCameraDevice cameraDevice);

	//	// +(BOOL)isFlashAvailableForCameraDevice:(UIImagePickerControllerCameraDevice)cameraDevice __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("isFlashAvailableForCameraDevice:")]
	//	bool IsFlashAvailableForCameraDevice (UIImagePickerControllerCameraDevice cameraDevice);

	//	// +(NSArray<NSNumber *> * _Nullable)availableCaptureModesForCameraDevice:(UIImagePickerControllerCameraDevice)cameraDevice __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Static]
	//	[Export ("availableCaptureModesForCameraDevice:")]
	//	[return: NullAllowed]
	//	NSNumber[] AvailableCaptureModesForCameraDevice (UIImagePickerControllerCameraDevice cameraDevice);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSObject<UINavigationControllerDelegate, UIImagePickerControllerDelegate> Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UINavigationControllerDelegate,UIImagePickerControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic) UIImagePickerControllerSourceType sourceType;
	//	[Export ("sourceType", ArgumentSemantic.Assign)]
	//	UIImagePickerControllerSourceType SourceType { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSString *> * _Nonnull mediaTypes;
	//	[Export ("mediaTypes", ArgumentSemantic.Copy)]
	//	string[] MediaTypes { get; set; }

	//	// @property (nonatomic) BOOL allowsEditing __attribute__((availability(ios, introduced=3.1)));
	//	[iOS (3, 1)]
	//	[Export ("allowsEditing")]
	//	bool AllowsEditing { get; set; }

	//	// @property (nonatomic) BOOL allowsImageEditing __attribute__((availability(ios, introduced=2.0, deprecated=3.1)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 1)]
	//	[Export ("allowsImageEditing")]
	//	bool AllowsImageEditing { get; set; }

	//	// @property (nonatomic) UIImagePickerControllerImageURLExportPreset imageExportPreset __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("imageExportPreset", ArgumentSemantic.Assign)]
	//	UIImagePickerControllerImageURLExportPreset ImageExportPreset { get; set; }

	//	// @property (nonatomic) NSTimeInterval videoMaximumDuration __attribute__((availability(ios, introduced=3.1)));
	//	[iOS (3, 1)]
	//	[Export ("videoMaximumDuration")]
	//	double VideoMaximumDuration { get; set; }

	//	// @property (nonatomic) UIImagePickerControllerQualityType videoQuality __attribute__((availability(ios, introduced=3.1)));
	//	[iOS (3, 1)]
	//	[Export ("videoQuality", ArgumentSemantic.Assign)]
	//	UIImagePickerControllerQualityType VideoQuality { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull videoExportPreset __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("videoExportPreset")]
	//	string VideoExportPreset { get; set; }

	//	// @property (nonatomic) BOOL showsCameraControls __attribute__((availability(ios, introduced=3.1)));
	//	[iOS (3, 1)]
	//	[Export ("showsCameraControls")]
	//	bool ShowsCameraControls { get; set; }

	//	// @property (nonatomic, strong) __kindof UIView * _Nullable cameraOverlayView __attribute__((availability(ios, introduced=3.1)));
	//	[iOS (3, 1)]
	//	[Export ("cameraOverlayView", ArgumentSemantic.Strong)]
	//	UIView CameraOverlayView { get; set; }

	//	// @property (nonatomic) CGAffineTransform cameraViewTransform __attribute__((availability(ios, introduced=3.1)));
	//	[iOS (3, 1)]
	//	[Export ("cameraViewTransform", ArgumentSemantic.Assign)]
	//	CGAffineTransform CameraViewTransform { get; set; }

	//	// -(void)takePicture __attribute__((availability(ios, introduced=3.1)));
	//	[iOS (3,1)]
	//	[Export ("takePicture")]
	//	void TakePicture ();

	//	// -(BOOL)startVideoCapture __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("startVideoCapture")]
	//	[Verify (MethodToProperty)]
	//	bool StartVideoCapture { get; }

	//	// -(void)stopVideoCapture __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("stopVideoCapture")]
	//	void StopVideoCapture ();

	//	// @property (nonatomic) UIImagePickerControllerCameraCaptureMode cameraCaptureMode __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("cameraCaptureMode", ArgumentSemantic.Assign)]
	//	UIImagePickerControllerCameraCaptureMode CameraCaptureMode { get; set; }

	//	// @property (nonatomic) UIImagePickerControllerCameraDevice cameraDevice __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("cameraDevice", ArgumentSemantic.Assign)]
	//	UIImagePickerControllerCameraDevice CameraDevice { get; set; }

	//	// @property (nonatomic) UIImagePickerControllerCameraFlashMode cameraFlashMode __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("cameraFlashMode", ArgumentSemantic.Assign)]
	//	UIImagePickerControllerCameraFlashMode CameraFlashMode { get; set; }
	//}

	//// @protocol UIImagePickerControllerDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIImagePickerControllerDelegate
	//{
	//	// @optional -(void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingImage:(UIImage * _Nonnull)image editingInfo:(NSDictionary<UIImagePickerControllerInfoKey,id> * _Nullable)editingInfo __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[Export ("imagePickerController:didFinishPickingImage:editingInfo:")]
	//	void ImagePickerController (UIImagePickerController picker, UIImage image, [NullAllowed] NSDictionary<NSString, NSObject> editingInfo);

	//	// @optional -(void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey,id> * _Nonnull)info;
	//	[Export ("imagePickerController:didFinishPickingMediaWithInfo:")]
	//	void ImagePickerController (UIImagePickerController picker, NSDictionary<NSString, NSObject> info);

	//	// @optional -(void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
	//	[Export ("imagePickerControllerDidCancel:")]
	//	void ImagePickerControllerDidCancel (UIImagePickerController picker);
	//}

	//// @interface UIInputView : UIView
	//[iOS (7,0)]
	//[BaseType (typeof(UIView))]
	//interface UIInputView
	//{
	//	// @property (readonly, nonatomic) UIInputViewStyle inputViewStyle;
	//	[Export ("inputViewStyle")]
	//	UIInputViewStyle InputViewStyle { get; }

	//	// @property (assign, nonatomic) BOOL allowsSelfSizing __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("allowsSelfSizing")]
	//	bool AllowsSelfSizing { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame inputViewStyle:(UIInputViewStyle)inputViewStyle __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:inputViewStyle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame, UIInputViewStyle inputViewStyle);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @protocol UITextDocumentProxy <UIKeyInput>
	//[Protocol, Model]
	//interface UITextDocumentProxy : IUIKeyInput
	//{
	//	// @required @property (readonly, nonatomic) NSString * _Nullable documentContextBeforeInput;
	//	[Abstract]
	//	[NullAllowed, Export ("documentContextBeforeInput")]
	//	string DocumentContextBeforeInput { get; }

	//	// @required @property (readonly, nonatomic) NSString * _Nullable documentContextAfterInput;
	//	[Abstract]
	//	[NullAllowed, Export ("documentContextAfterInput")]
	//	string DocumentContextAfterInput { get; }

	//	// @required @property (readonly, nonatomic) NSString * _Nullable selectedText __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("selectedText")]
	//	string SelectedText { get; }

	//	// @required @property (readonly, nonatomic) UITextInputMode * _Nullable documentInputMode __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Abstract]
	//	[NullAllowed, Export ("documentInputMode")]
	//	UITextInputMode DocumentInputMode { get; }

	//	// @required @property (readonly, copy, nonatomic) NSUUID * _Nonnull documentIdentifier __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Abstract]
	//	[Export ("documentIdentifier", ArgumentSemantic.Copy)]
	//	NSUuid DocumentIdentifier { get; }

	//	// @required -(void)adjustTextPositionByCharacterOffset:(NSInteger)offset;
	//	[Abstract]
	//	[Export ("adjustTextPositionByCharacterOffset:")]
	//	void AdjustTextPositionByCharacterOffset (nint offset);
	//}

	//// @interface UIInputViewController : UIViewController <UITextInputDelegate>
	//[iOS (8,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UIInputViewController : IUITextInputDelegate
	//{
	//	// @property (nonatomic, strong) UIInputView * _Nullable inputView;
	//	[NullAllowed, Export ("inputView", ArgumentSemantic.Strong)]
	//	UIInputView InputView { get; set; }

	//	// @property (readonly, nonatomic) id<UITextDocumentProxy> _Nonnull textDocumentProxy;
	//	[Export ("textDocumentProxy")]
	//	UITextDocumentProxy TextDocumentProxy { get; }

	//	// @property (copy, nonatomic) NSString * _Nullable primaryLanguage;
	//	[NullAllowed, Export ("primaryLanguage")]
	//	string PrimaryLanguage { get; set; }

	//	// @property (nonatomic) BOOL hasDictationKey;
	//	[Export ("hasDictationKey")]
	//	bool HasDictationKey { get; set; }

	//	// @property (readonly, nonatomic) BOOL hasFullAccess __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("hasFullAccess")]
	//	bool HasFullAccess { get; }

	//	// @property (readonly, nonatomic) BOOL needsInputModeSwitchKey __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("needsInputModeSwitchKey")]
	//	bool NeedsInputModeSwitchKey { get; }

	//	// -(void)dismissKeyboard;
	//	[Export ("dismissKeyboard")]
	//	void DismissKeyboard ();

	//	// -(void)advanceToNextInputMode;
	//	[Export ("advanceToNextInputMode")]
	//	void AdvanceToNextInputMode ();

	//	// -(void)handleInputModeListFromView:(UIView * _Nonnull)view withEvent:(UIEvent * _Nonnull)event __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("handleInputModeListFromView:withEvent:")]
	//	void HandleInputModeListFromView (UIView view, UIEvent @event);

	//	// -(void)requestSupplementaryLexiconWithCompletion:(void (^ _Nonnull)(UILexicon * _Nonnull))completionHandler;
	//	[Export ("requestSupplementaryLexiconWithCompletion:")]
	//	void RequestSupplementaryLexiconWithCompletion (Action<UILexicon> completionHandler);
	//}

	//// @interface UILabel : UIView <NSCoding, UIContentSizeCategoryAdjusting>
	//[iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UILabel : INSCoding, IUIContentSizeCategoryAdjusting
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable text;
	//	[NullAllowed, Export ("text")]
	//	string Text { get; set; }

	//	// @property (nonatomic, strong) UIFont * _Null_unspecified font;
	//	[Export ("font", ArgumentSemantic.Strong)]
	//	UIFont Font { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified textColor;
	//	[Export ("textColor", ArgumentSemantic.Strong)]
	//	UIColor TextColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable shadowColor;
	//	[NullAllowed, Export ("shadowColor", ArgumentSemantic.Strong)]
	//	UIColor ShadowColor { get; set; }

	//	// @property (nonatomic) CGSize shadowOffset;
	//	[Export ("shadowOffset", ArgumentSemantic.Assign)]
	//	CGSize ShadowOffset { get; set; }

	//	// @property (nonatomic) NSTextAlignment textAlignment;
	//	[Export ("textAlignment", ArgumentSemantic.Assign)]
	//	NSTextAlignment TextAlignment { get; set; }

	//	// @property (nonatomic) NSLineBreakMode lineBreakMode;
	//	[Export ("lineBreakMode", ArgumentSemantic.Assign)]
	//	NSLineBreakMode LineBreakMode { get; set; }

	//	// @property (copy, nonatomic) NSAttributedString * _Nullable attributedText __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("attributedText", ArgumentSemantic.Copy)]
	//	NSAttributedString AttributedText { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable highlightedTextColor;
	//	[NullAllowed, Export ("highlightedTextColor", ArgumentSemantic.Strong)]
	//	UIColor HighlightedTextColor { get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }

	//	// @property (getter = isUserInteractionEnabled, nonatomic) BOOL userInteractionEnabled;
	//	[Export ("userInteractionEnabled")]
	//	bool UserInteractionEnabled { [Bind ("isUserInteractionEnabled")] get; set; }

	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// @property (nonatomic) NSInteger numberOfLines;
	//	[Export ("numberOfLines")]
	//	nint NumberOfLines { get; set; }

	//	// @property (nonatomic) BOOL adjustsFontSizeToFitWidth;
	//	[Export ("adjustsFontSizeToFitWidth")]
	//	bool AdjustsFontSizeToFitWidth { get; set; }

	//	// @property (nonatomic) UIBaselineAdjustment baselineAdjustment;
	//	[Export ("baselineAdjustment", ArgumentSemantic.Assign)]
	//	UIBaselineAdjustment BaselineAdjustment { get; set; }

	//	// @property (nonatomic) CGFloat minimumScaleFactor __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("minimumScaleFactor")]
	//	nfloat MinimumScaleFactor { get; set; }

	//	// @property (nonatomic) BOOL allowsDefaultTighteningForTruncation __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("allowsDefaultTighteningForTruncation")]
	//	bool AllowsDefaultTighteningForTruncation { get; set; }

	//	// -(CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines;
	//	[Export ("textRectForBounds:limitedToNumberOfLines:")]
	//	CGRect TextRectForBounds (CGRect bounds, nint numberOfLines);

	//	// -(void)drawTextInRect:(CGRect)rect;
	//	[Export ("drawTextInRect:")]
	//	void DrawTextInRect (CGRect rect);

	//	// @property (nonatomic) CGFloat preferredMaxLayoutWidth __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("preferredMaxLayoutWidth")]
	//	nfloat PreferredMaxLayoutWidth { get; set; }

	//	// @property (nonatomic) BOOL enablesMarqueeWhenAncestorFocused __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=12.0)));
	//	[TV (12, 0), NoWatch, NoiOS]
	//	[Export ("enablesMarqueeWhenAncestorFocused")]
	//	bool EnablesMarqueeWhenAncestorFocused { get; set; }

	//	// @property (nonatomic) CGFloat minimumFontSize __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=6.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 6, 0)]
	//	[NoTV]
	//	[Export ("minimumFontSize")]
	//	nfloat MinimumFontSize { get; set; }

	//	// @property (nonatomic) BOOL adjustsLetterSpacingToFitWidth __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 6, 0)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoTV]
	//	[Export ("adjustsLetterSpacingToFitWidth")]
	//	bool AdjustsLetterSpacingToFitWidth { get; set; }
	//}

	//// @interface UILexiconEntry : NSObject <NSCopying>
	//[NoTV, iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface UILexiconEntry : INSCopying
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull documentText;
	//	[Export ("documentText")]
	//	string DocumentText { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull userInput;
	//	[Export ("userInput")]
	//	string UserInput { get; }
	//}

	//// @interface UILexicon : NSObject <NSCopying>
	//[NoTV, iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface UILexicon : INSCopying
	//{
	//	// @property (readonly, nonatomic) NSArray<UILexiconEntry *> * _Nonnull entries;
	//	[Export ("entries")]
	//	UILexiconEntry[] Entries { get; }
	//}

	//// @interface UILocalNotification : NSObject <NSCopying, NSCoding>
	//[Introduced (PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's UNNotificationRequest")]
	//[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationRequest")]
	//[NoTV]
	//[BaseType (typeof(NSObject))]
	//interface UILocalNotification : INSCopying, INSCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (copy, nonatomic) NSDate * _Nullable fireDate;
	//	[NullAllowed, Export ("fireDate", ArgumentSemantic.Copy)]
	//	NSDate FireDate { get; set; }

	//	// @property (copy, nonatomic) NSTimeZone * _Nullable timeZone;
	//	[NullAllowed, Export ("timeZone", ArgumentSemantic.Copy)]
	//	NSTimeZone TimeZone { get; set; }

	//	// @property (nonatomic) NSCalendarUnit repeatInterval;
	//	[Export ("repeatInterval", ArgumentSemantic.Assign)]
	//	NSCalendarUnit RepeatInterval { get; set; }

	//	// @property (copy, nonatomic) NSCalendar * _Nullable repeatCalendar;
	//	[NullAllowed, Export ("repeatCalendar", ArgumentSemantic.Copy)]
	//	NSCalendar RepeatCalendar { get; set; }

	//	// @property (copy, nonatomic) CLRegion * _Nullable region __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("region", ArgumentSemantic.Copy)]
	//	CLRegion Region { get; set; }

	//	// @property (assign, nonatomic) BOOL regionTriggersOnce __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("regionTriggersOnce")]
	//	bool RegionTriggersOnce { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable alertBody;
	//	[NullAllowed, Export ("alertBody")]
	//	string AlertBody { get; set; }

	//	// @property (nonatomic) BOOL hasAction;
	//	[Export ("hasAction")]
	//	bool HasAction { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable alertAction;
	//	[NullAllowed, Export ("alertAction")]
	//	string AlertAction { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable alertLaunchImage;
	//	[NullAllowed, Export ("alertLaunchImage")]
	//	string AlertLaunchImage { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable alertTitle __attribute__((availability(ios, introduced=8.2)));
	//	[iOS (8, 2)]
	//	[NullAllowed, Export ("alertTitle")]
	//	string AlertTitle { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable soundName;
	//	[NullAllowed, Export ("soundName")]
	//	string SoundName { get; set; }

	//	// @property (nonatomic) NSInteger applicationIconBadgeNumber;
	//	[Export ("applicationIconBadgeNumber")]
	//	nint ApplicationIconBadgeNumber { get; set; }

	//	// @property (copy, nonatomic) NSDictionary * _Nullable userInfo;
	//	[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
	//	NSDictionary UserInfo { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable category __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[NullAllowed, Export ("category")]
	//	string Category { get; set; }
	//}

	//// @interface UIApplicationShortcutIcon : NSObject <NSCopying>
	//[NoTV, NoMac, iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIApplicationShortcutIcon : INSCopying
	//{
	//	// +(instancetype _Nonnull)iconWithType:(UIApplicationShortcutIconType)type;
	//	[Static]
	//	[Export ("iconWithType:")]
	//	UIApplicationShortcutIcon IconWithType (UIApplicationShortcutIconType type);

	//	// +(instancetype _Nonnull)iconWithTemplateImageName:(NSString * _Nonnull)templateImageName;
	//	[Static]
	//	[Export ("iconWithTemplateImageName:")]
	//	UIApplicationShortcutIcon IconWithTemplateImageName (string templateImageName);
	//}

	//// @interface UIApplicationShortcutItem : NSObject <NSCopying, NSMutableCopying>
	//[NoTV, NoMac, iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIApplicationShortcutItem : INSCopying, INSMutableCopying
	//{
	//	// -(instancetype _Nonnull)initWithType:(NSString * _Nonnull)type localizedTitle:(NSString * _Nonnull)localizedTitle localizedSubtitle:(NSString * _Nullable)localizedSubtitle icon:(UIApplicationShortcutIcon * _Nullable)icon userInfo:(NSDictionary<NSString *,id<NSSecureCoding>> * _Nullable)userInfo __attribute__((objc_designated_initializer));
	//	[Export ("initWithType:localizedTitle:localizedSubtitle:icon:userInfo:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string type, string localizedTitle, [NullAllowed] string localizedSubtitle, [NullAllowed] UIApplicationShortcutIcon icon, [NullAllowed] NSDictionary<NSString, NSSecureCoding> userInfo);

	//	// -(instancetype _Nonnull)initWithType:(NSString * _Nonnull)type localizedTitle:(NSString * _Nonnull)localizedTitle;
	//	[Export ("initWithType:localizedTitle:")]
	//	IntPtr Constructor (string type, string localizedTitle);

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull type;
	//	[Export ("type")]
	//	string Type { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull localizedTitle;
	//	[Export ("localizedTitle")]
	//	string LocalizedTitle { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable localizedSubtitle;
	//	[NullAllowed, Export ("localizedSubtitle")]
	//	string LocalizedSubtitle { get; }

	//	// @property (readonly, copy, nonatomic) UIApplicationShortcutIcon * _Nullable icon;
	//	[NullAllowed, Export ("icon", ArgumentSemantic.Copy)]
	//	UIApplicationShortcutIcon Icon { get; }

	//	// @property (readonly, copy, nonatomic) NSDictionary<NSString *,id<NSSecureCoding>> * _Nullable userInfo;
	//	[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSSecureCoding> UserInfo { get; }
	//}

	//// @interface UIMutableApplicationShortcutItem : UIApplicationShortcutItem
	//[NoTV, NoMac, iOS (9,0)]
	//[BaseType (typeof(UIApplicationShortcutItem))]
	//interface UIMutableApplicationShortcutItem
	//{
	//	// @property (copy, nonatomic) NSString * _Nonnull type;
	//	[Export ("type")]
	//	string Type { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull localizedTitle;
	//	[Export ("localizedTitle")]
	//	string LocalizedTitle { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable localizedSubtitle;
	//	[NullAllowed, Export ("localizedSubtitle")]
	//	string LocalizedSubtitle { get; set; }

	//	// @property (copy, nonatomic) UIApplicationShortcutIcon * _Nullable icon;
	//	[NullAllowed, Export ("icon", ArgumentSemantic.Copy)]
	//	UIApplicationShortcutIcon Icon { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id<NSSecureCoding>> * _Nullable userInfo;
	//	[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSSecureCoding> UserInfo { get; set; }
	//}

	//// @interface UIUserNotificationSettings : NSObject
	//[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's UNNotificationSettings")]
	//[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationSettings")]
	//[NoTV]
	//[BaseType (typeof(NSObject))]
	//interface UIUserNotificationSettings
	//{
	//	// +(instancetype _Nonnull)settingsForTypes:(UIUserNotificationType)types categories:(NSSet<UIUserNotificationCategory *> * _Nullable)categories;
	//	[Static]
	//	[Export ("settingsForTypes:categories:")]
	//	UIUserNotificationSettings SettingsForTypes (UIUserNotificationType types, [NullAllowed] NSSet<UIUserNotificationCategory> categories);

	//	// @property (readonly, nonatomic) UIUserNotificationType types;
	//	[Export ("types")]
	//	UIUserNotificationType Types { get; }

	//	// @property (readonly, copy, nonatomic) NSSet<UIUserNotificationCategory *> * _Nullable categories;
	//	[NullAllowed, Export ("categories", ArgumentSemantic.Copy)]
	//	NSSet<UIUserNotificationCategory> Categories { get; }
	//}

	//// @interface UIUserNotificationCategory : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	//[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's UNNotificationCategory")]
	//[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationCategory")]
	//[NoTV]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIUserNotificationCategory : INSCopying, INSMutableCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(tvos, unavailable))) __attribute__((objc_designated_initializer));
	//	[NoTV]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable identifier __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[NullAllowed, Export ("identifier")]
	//	string Identifier { get; }

	//	// -(NSArray<UIUserNotificationAction *> * _Nullable)actionsForContext:(UIUserNotificationActionContext)context __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("actionsForContext:")]
	//	[return: NullAllowed]
	//	UIUserNotificationAction[] ActionsForContext (UIUserNotificationActionContext context);
	//}

	//// @interface UIMutableUserNotificationCategory : UIUserNotificationCategory
	//[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's UNNotificationCategory")]
	//[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationCategory")]
	//[NoTV]
	//[BaseType (typeof(UIUserNotificationCategory))]
	//interface UIMutableUserNotificationCategory
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable identifier;
	//	[NullAllowed, Export ("identifier")]
	//	string Identifier { get; set; }

	//	// -(void)setActions:(NSArray<UIUserNotificationAction *> * _Nullable)actions forContext:(UIUserNotificationActionContext)context;
	//	[Export ("setActions:forContext:")]
	//	void SetActions ([NullAllowed] UIUserNotificationAction[] actions, UIUserNotificationActionContext context);
	//}

	//// @interface UIUserNotificationAction : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	//[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's UNNotificationAction")]
	//[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationAction")]
	//[NoTV]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIUserNotificationAction : INSCopying, INSMutableCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(tvos, unavailable))) __attribute__((objc_designated_initializer));
	//	[NoTV]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable identifier __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[NullAllowed, Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable title __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[NullAllowed, Export ("title")]
	//	string Title { get; }

	//	// @property (readonly, assign, nonatomic) UIUserNotificationActionBehavior behavior __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9.0)));
	//	[NoTV, iOS (9, 0)]
	//	[Export ("behavior", ArgumentSemantic.Assign)]
	//	UIUserNotificationActionBehavior Behavior { get; }

	//	// @property (readonly, copy, nonatomic) NSDictionary * _Nonnull parameters __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9.0)));
	//	[NoTV, iOS (9, 0)]
	//	[Export ("parameters", ArgumentSemantic.Copy)]
	//	NSDictionary Parameters { get; }

	//	// @property (readonly, assign, nonatomic) UIUserNotificationActivationMode activationMode __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("activationMode", ArgumentSemantic.Assign)]
	//	UIUserNotificationActivationMode ActivationMode { get; }

	//	// @property (readonly, getter = isAuthenticationRequired, assign, nonatomic) BOOL authenticationRequired __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("authenticationRequired")]
	//	bool AuthenticationRequired { [Bind ("isAuthenticationRequired")] get; }

	//	// @property (readonly, getter = isDestructive, assign, nonatomic) BOOL destructive __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("destructive")]
	//	bool Destructive { [Bind ("isDestructive")] get; }
	//}

	//// @interface UIMutableUserNotificationAction : UIUserNotificationAction
	//[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's UNNotificationAction")]
	//[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationAction")]
	//[NoTV]
	//[BaseType (typeof(UIUserNotificationAction))]
	//interface UIMutableUserNotificationAction
	//{
	//	// @property (copy, nonatomic) NSString * _Nullable identifier;
	//	[NullAllowed, Export ("identifier")]
	//	string Identifier { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable title;
	//	[NullAllowed, Export ("title")]
	//	string Title { get; set; }

	//	// @property (assign, nonatomic) UIUserNotificationActionBehavior behavior __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("behavior", ArgumentSemantic.Assign)]
	//	UIUserNotificationActionBehavior Behavior { get; set; }

	//	// @property (copy, nonatomic) NSDictionary * _Nonnull parameters __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("parameters", ArgumentSemantic.Copy)]
	//	NSDictionary Parameters { get; set; }

	//	// @property (assign, nonatomic) UIUserNotificationActivationMode activationMode;
	//	[Export ("activationMode", ArgumentSemantic.Assign)]
	//	UIUserNotificationActivationMode ActivationMode { get; set; }

	//	// @property (getter = isAuthenticationRequired, assign, nonatomic) BOOL authenticationRequired;
	//	[Export ("authenticationRequired")]
	//	bool AuthenticationRequired { [Bind ("isAuthenticationRequired")] get; set; }

	//	// @property (getter = isDestructive, assign, nonatomic) BOOL destructive;
	//	[Export ("destructive")]
	//	bool Destructive { [Bind ("isDestructive")] get; set; }
	//}

	//// @interface UIFocusSystem : NSObject
	//[iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIFocusSystem
	//{
	//	// @property (readonly, nonatomic, weak) id<UIFocusItem> _Nullable focusedItem __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
	//	[TV (12, 0), iOS (12, 0)]
	//	[NullAllowed, Export ("focusedItem", ArgumentSemantic.Weak)]
	//	UIFocusItem FocusedItem { get; }

	//	// +(UIFocusSystem * _Nullable)focusSystemForEnvironment:(id<UIFocusEnvironment> _Nonnull)environment __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
	//	[TV (12,0), iOS (12,0)]
	//	[Static]
	//	[Export ("focusSystemForEnvironment:")]
	//	[return: NullAllowed]
	//	UIFocusSystem FocusSystemForEnvironment (UIFocusEnvironment environment);

	//	// -(void)requestFocusUpdateToEnvironment:(id<UIFocusEnvironment> _Nonnull)environment __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
	//	[TV (12,0), iOS (12,0)]
	//	[Export ("requestFocusUpdateToEnvironment:")]
	//	void RequestFocusUpdateToEnvironment (UIFocusEnvironment environment);

	//	// -(void)updateFocusIfNeeded __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
	//	[TV (12,0), iOS (12,0)]
	//	[Export ("updateFocusIfNeeded")]
	//	void UpdateFocusIfNeeded ();

	//	// +(BOOL)environment:(id<UIFocusEnvironment> _Nonnull)environment containsEnvironment:(id<UIFocusEnvironment> _Nonnull)otherEnvironment;
	//	[Static]
	//	[Export ("environment:containsEnvironment:")]
	//	bool Environment (UIFocusEnvironment environment, UIFocusEnvironment otherEnvironment);

	//	// +(void)registerURL:(NSURL * _Nonnull)soundFileURL forSoundIdentifier:(UIFocusSoundIdentifier _Nonnull)identifier __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
	//	[TV (11,0), NoWatch, NoiOS]
	//	[Static]
	//	[Export ("registerURL:forSoundIdentifier:")]
	//	void RegisterURL (NSUrl soundFileURL, string identifier);
	//}

	//// @interface UIFocusDebugger : NSObject
	//[iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIFocusDebugger
	//{
	//	// +(id<UIFocusDebuggerOutput> _Nonnull)help;
	//	[Static]
	//	[Export ("help")]
	//	[Verify (MethodToProperty)]
	//	UIFocusDebuggerOutput Help { get; }

	//	// +(id<UIFocusDebuggerOutput> _Nonnull)status;
	//	[Static]
	//	[Export ("status")]
	//	[Verify (MethodToProperty)]
	//	UIFocusDebuggerOutput Status { get; }

	//	// +(id<UIFocusDebuggerOutput> _Nonnull)checkFocusabilityForItem:(id<UIFocusItem> _Nonnull)item;
	//	[Static]
	//	[Export ("checkFocusabilityForItem:")]
	//	UIFocusDebuggerOutput CheckFocusabilityForItem (UIFocusItem item);

	//	// +(id<UIFocusDebuggerOutput> _Nonnull)simulateFocusUpdateRequestFromEnvironment:(id<UIFocusEnvironment> _Nonnull)environment;
	//	[Static]
	//	[Export ("simulateFocusUpdateRequestFromEnvironment:")]
	//	UIFocusDebuggerOutput SimulateFocusUpdateRequestFromEnvironment (UIFocusEnvironment environment);
	//}

	//// @protocol UIFocusDebuggerOutput <NSObject>
	//[iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIFocusDebuggerOutput
	//{
	//}

	//// @interface UIFocusMovementHint : NSObject <NSCopying>
	//[iOS (12,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIFocusMovementHint : INSCopying
	//{
	//	// @property (readonly, nonatomic) CGVector movementDirection;
	//	[Export ("movementDirection")]
	//	CGVector MovementDirection { get; }

	//	// @property (readonly, nonatomic) CATransform3D perspectiveTransform;
	//	[Export ("perspectiveTransform")]
	//	CATransform3D PerspectiveTransform { get; }

	//	// @property (readonly, nonatomic) CGVector rotation;
	//	[Export ("rotation")]
	//	CGVector Rotation { get; }

	//	// @property (readonly, nonatomic) CGVector translation;
	//	[Export ("translation")]
	//	CGVector Translation { get; }

	//	// @property (readonly, nonatomic) CATransform3D interactionTransform;
	//	[Export ("interactionTransform")]
	//	CATransform3D InteractionTransform { get; }
	//}

	//// @interface UILocalizedIndexedCollation : NSObject
	//[iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface UILocalizedIndexedCollation
	//{
	//	// +(instancetype _Nonnull)currentCollation;
	//	[Static]
	//	[Export ("currentCollation")]
	//	UILocalizedIndexedCollation CurrentCollation ();

	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull sectionTitles;
	//	[Export ("sectionTitles")]
	//	string[] SectionTitles { get; }

	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull sectionIndexTitles;
	//	[Export ("sectionIndexTitles")]
	//	string[] SectionIndexTitles { get; }

	//	// -(NSInteger)sectionForSectionIndexTitleAtIndex:(NSInteger)indexTitleIndex;
	//	[Export ("sectionForSectionIndexTitleAtIndex:")]
	//	nint SectionForSectionIndexTitleAtIndex (nint indexTitleIndex);

	//	// -(NSInteger)sectionForObject:(id _Nonnull)object collationStringSelector:(SEL _Nonnull)selector;
	//	[Export ("sectionForObject:collationStringSelector:")]
	//	nint SectionForObject (NSObject @object, Selector selector);

	//	// -(NSArray * _Nonnull)sortedArrayFromArray:(NSArray * _Nonnull)array collationStringSelector:(SEL _Nonnull)selector;
	//	[Export ("sortedArrayFromArray:collationStringSelector:")]
	//	[Verify (StronglyTypedNSArray), Verify (StronglyTypedNSArray)]
	//	NSObject[] SortedArrayFromArray (NSObject[] array, Selector selector);
	//}

	//// @interface UILongPressGestureRecognizer : UIGestureRecognizer
	//[iOS (3,2)]
	//[BaseType (typeof(UIGestureRecognizer))]
	//interface UILongPressGestureRecognizer
	//{
	//	// @property (nonatomic) NSUInteger numberOfTapsRequired;
	//	[Export ("numberOfTapsRequired")]
	//	nuint NumberOfTapsRequired { get; set; }

	//	// @property (nonatomic) NSUInteger numberOfTouchesRequired __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("numberOfTouchesRequired")]
	//	nuint NumberOfTouchesRequired { get; set; }

	//	// @property (nonatomic) NSTimeInterval minimumPressDuration;
	//	[Export ("minimumPressDuration")]
	//	double MinimumPressDuration { get; set; }

	//	// @property (nonatomic) CGFloat allowableMovement;
	//	[Export ("allowableMovement")]
	//	nfloat AllowableMovement { get; set; }
	//}

	//// @interface UIManagedDocument : UIDocument
	//[NoTV, iOS (5,0)]
	//[BaseType (typeof(UIDocument))]
	//interface UIManagedDocument
	//{
	//	// @property (readonly, nonatomic, class) NSString * _Nonnull persistentStoreName;
	//	[Static]
	//	[Export ("persistentStoreName")]
	//	string PersistentStoreName { get; }

	//	// @property (readonly, nonatomic, strong) NSManagedObjectContext * _Nonnull managedObjectContext;
	//	[Export ("managedObjectContext", ArgumentSemantic.Strong)]
	//	NSManagedObjectContext ManagedObjectContext { get; }

	//	// @property (readonly, nonatomic, strong) NSManagedObjectModel * _Nonnull managedObjectModel;
	//	[Export ("managedObjectModel", ArgumentSemantic.Strong)]
	//	NSManagedObjectModel ManagedObjectModel { get; }

	//	// @property (copy, nonatomic) NSDictionary * _Nullable persistentStoreOptions;
	//	[NullAllowed, Export ("persistentStoreOptions", ArgumentSemantic.Copy)]
	//	NSDictionary PersistentStoreOptions { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable modelConfiguration;
	//	[NullAllowed, Export ("modelConfiguration")]
	//	string ModelConfiguration { get; set; }

	//	// -(BOOL)configurePersistentStoreCoordinatorForURL:(NSURL * _Nonnull)storeURL ofType:(NSString * _Nonnull)fileType modelConfiguration:(NSString * _Nullable)configuration storeOptions:(NSDictionary * _Nullable)storeOptions error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:")]
	//	bool ConfigurePersistentStoreCoordinatorForURL (NSUrl storeURL, string fileType, [NullAllowed] string configuration, [NullAllowed] NSDictionary storeOptions, [NullAllowed] out NSError error);

	//	// -(NSString * _Nonnull)persistentStoreTypeForFileType:(NSString * _Nonnull)fileType;
	//	[Export ("persistentStoreTypeForFileType:")]
	//	string PersistentStoreTypeForFileType (string fileType);

	//	// -(BOOL)readAdditionalContentFromURL:(NSURL * _Nonnull)absoluteURL error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("readAdditionalContentFromURL:error:")]
	//	bool ReadAdditionalContentFromURL (NSUrl absoluteURL, [NullAllowed] out NSError error);

	//	// -(id _Nullable)additionalContentForURL:(NSURL * _Nonnull)absoluteURL error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("additionalContentForURL:error:")]
	//	[return: NullAllowed]
	//	NSObject AdditionalContentForURL (NSUrl absoluteURL, [NullAllowed] out NSError error);

	//	// -(BOOL)writeAdditionalContent:(id _Nonnull)content toURL:(NSURL * _Nonnull)absoluteURL originalContentsURL:(NSURL * _Nullable)absoluteOriginalContentsURL error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("writeAdditionalContent:toURL:originalContentsURL:error:")]
	//	bool WriteAdditionalContent (NSObject content, NSUrl absoluteURL, [NullAllowed] NSUrl absoluteOriginalContentsURL, [NullAllowed] out NSError error);
	//}

	//// @interface UIMenuController : NSObject
	//[NoTV, iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIMenuController
	//{
	//	// @property (readonly, nonatomic, class) UIMenuController * _Nonnull sharedMenuController;
	//	[Static]
	//	[Export ("sharedMenuController")]
	//	UIMenuController SharedMenuController { get; }

	//	// @property (getter = isMenuVisible, nonatomic) BOOL menuVisible;
	//	[Export ("menuVisible")]
	//	bool MenuVisible { [Bind ("isMenuVisible")] get; set; }

	//	// -(void)setMenuVisible:(BOOL)menuVisible animated:(BOOL)animated;
	//	[Export ("setMenuVisible:animated:")]
	//	void SetMenuVisible (bool menuVisible, bool animated);

	//	// -(void)setTargetRect:(CGRect)targetRect inView:(UIView * _Nonnull)targetView;
	//	[Export ("setTargetRect:inView:")]
	//	void SetTargetRect (CGRect targetRect, UIView targetView);

	//	// @property (nonatomic) UIMenuControllerArrowDirection arrowDirection __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[Export ("arrowDirection", ArgumentSemantic.Assign)]
	//	UIMenuControllerArrowDirection ArrowDirection { get; set; }

	//	// @property (copy, nonatomic) NSArray<UIMenuItem *> * _Nullable menuItems __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[NullAllowed, Export ("menuItems", ArgumentSemantic.Copy)]
	//	UIMenuItem[] MenuItems { get; set; }

	//	// -(void)update;
	//	[Export ("update")]
	//	void Update ();

	//	// @property (readonly, nonatomic) CGRect menuFrame;
	//	[Export ("menuFrame")]
	//	CGRect MenuFrame { get; }
	//}

	//// @interface UIMenuItem : NSObject
	//[NoTV, iOS (3,2)]
	//[BaseType (typeof(NSObject))]
	//interface UIMenuItem
	//{
	//	// -(instancetype _Nonnull)initWithTitle:(NSString * _Nonnull)title action:(SEL _Nonnull)action __attribute__((objc_designated_initializer));
	//	[Export ("initWithTitle:action:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string title, Selector action);

	//	// @property (copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; set; }

	//	// @property (nonatomic) SEL _Nonnull action;
	//	[Export ("action", ArgumentSemantic.Assign)]
	//	Selector Action { get; set; }
	//}

	//// @interface UIMotionEffect : NSObject <NSCopying, NSCoding>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIMotionEffect : INSCopying, INSCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(NSDictionary<NSString *,id> * _Nullable)keyPathsAndRelativeValuesForViewerOffset:(UIOffset)viewerOffset;
	//	[Export ("keyPathsAndRelativeValuesForViewerOffset:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> KeyPathsAndRelativeValuesForViewerOffset (UIOffset viewerOffset);
	//}

	//// @interface UIInterpolatingMotionEffect : UIMotionEffect
	//[iOS (7,0)]
	//[BaseType (typeof(UIMotionEffect))]
	//interface UIInterpolatingMotionEffect
	//{
	//	// -(instancetype _Nonnull)initWithKeyPath:(NSString * _Nonnull)keyPath type:(UIInterpolatingMotionEffectType)type __attribute__((objc_designated_initializer));
	//	[Export ("initWithKeyPath:type:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string keyPath, UIInterpolatingMotionEffectType type);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic) NSString * _Nonnull keyPath;
	//	[Export ("keyPath")]
	//	string KeyPath { get; }

	//	// @property (readonly, nonatomic) UIInterpolatingMotionEffectType type;
	//	[Export ("type")]
	//	UIInterpolatingMotionEffectType Type { get; }

	//	// @property (nonatomic, strong) id _Nullable minimumRelativeValue;
	//	[NullAllowed, Export ("minimumRelativeValue", ArgumentSemantic.Strong)]
	//	NSObject MinimumRelativeValue { get; set; }

	//	// @property (nonatomic, strong) id _Nullable maximumRelativeValue;
	//	[NullAllowed, Export ("maximumRelativeValue", ArgumentSemantic.Strong)]
	//	NSObject MaximumRelativeValue { get; set; }
	//}

	//// @interface UIMotionEffectGroup : UIMotionEffect
	//[iOS (7,0)]
	//[BaseType (typeof(UIMotionEffect))]
	//interface UIMotionEffectGroup
	//{
	//	// @property (copy, nonatomic) NSArray<__kindof UIMotionEffect *> * _Nullable motionEffects;
	//	[NullAllowed, Export ("motionEffects", ArgumentSemantic.Copy)]
	//	UIMotionEffect[] MotionEffects { get; set; }
	//}

	//// @interface UINavigationItem : NSObject <NSCoding>
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface UINavigationItem : INSCoding
	//{
	//	// -(instancetype _Nonnull)initWithTitle:(NSString * _Nonnull)title __attribute__((objc_designated_initializer));
	//	[Export ("initWithTitle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string title);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);

	//	// @property (copy, nonatomic) NSString * _Nullable title;
	//	[NullAllowed, Export ("title")]
	//	string Title { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable titleView;
	//	[NullAllowed, Export ("titleView", ArgumentSemantic.Strong)]
	//	UIView TitleView { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable prompt __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[NullAllowed, Export ("prompt")]
	//	string Prompt { get; set; }

	//	// @property (nonatomic, strong) UIBarButtonItem * _Nullable backBarButtonItem __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[NullAllowed, Export ("backBarButtonItem", ArgumentSemantic.Strong)]
	//	UIBarButtonItem BackBarButtonItem { get; set; }

	//	// @property (assign, nonatomic) BOOL hidesBackButton __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("hidesBackButton")]
	//	bool HidesBackButton { get; set; }

	//	// -(void)setHidesBackButton:(BOOL)hidesBackButton animated:(BOOL)animated __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("setHidesBackButton:animated:")]
	//	void SetHidesBackButton (bool hidesBackButton, bool animated);

	//	// @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable leftBarButtonItems __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("leftBarButtonItems", ArgumentSemantic.Copy)]
	//	UIBarButtonItem[] LeftBarButtonItems { get; set; }

	//	// @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable rightBarButtonItems __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("rightBarButtonItems", ArgumentSemantic.Copy)]
	//	UIBarButtonItem[] RightBarButtonItems { get; set; }

	//	// -(void)setLeftBarButtonItems:(NSArray<UIBarButtonItem *> * _Nullable)items animated:(BOOL)animated __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setLeftBarButtonItems:animated:")]
	//	void SetLeftBarButtonItems ([NullAllowed] UIBarButtonItem[] items, bool animated);

	//	// -(void)setRightBarButtonItems:(NSArray<UIBarButtonItem *> * _Nullable)items animated:(BOOL)animated __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setRightBarButtonItems:animated:")]
	//	void SetRightBarButtonItems ([NullAllowed] UIBarButtonItem[] items, bool animated);

	//	// @property (nonatomic) BOOL leftItemsSupplementBackButton __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5, 0)]
	//	[Export ("leftItemsSupplementBackButton")]
	//	bool LeftItemsSupplementBackButton { get; set; }

	//	// @property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButtonItem;
	//	[NullAllowed, Export ("leftBarButtonItem", ArgumentSemantic.Strong)]
	//	UIBarButtonItem LeftBarButtonItem { get; set; }

	//	// @property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButtonItem;
	//	[NullAllowed, Export ("rightBarButtonItem", ArgumentSemantic.Strong)]
	//	UIBarButtonItem RightBarButtonItem { get; set; }

	//	// -(void)setLeftBarButtonItem:(UIBarButtonItem * _Nullable)item animated:(BOOL)animated;
	//	[Export ("setLeftBarButtonItem:animated:")]
	//	void SetLeftBarButtonItem ([NullAllowed] UIBarButtonItem item, bool animated);

	//	// -(void)setRightBarButtonItem:(UIBarButtonItem * _Nullable)item animated:(BOOL)animated;
	//	[Export ("setRightBarButtonItem:animated:")]
	//	void SetRightBarButtonItem ([NullAllowed] UIBarButtonItem item, bool animated);

	//	// @property (assign, readwrite, nonatomic) UINavigationItemLargeTitleDisplayMode largeTitleDisplayMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoTV, iOS (11, 0)]
	//	[Export ("largeTitleDisplayMode", ArgumentSemantic.Assign)]
	//	UINavigationItemLargeTitleDisplayMode LargeTitleDisplayMode { get; set; }

	//	// @property (retain, nonatomic) UISearchController * _Nullable searchController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoTV, iOS (11, 0)]
	//	[NullAllowed, Export ("searchController", ArgumentSemantic.Retain)]
	//	UISearchController SearchController { get; set; }

	//	// @property (nonatomic) BOOL hidesSearchBarWhenScrolling __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoTV, iOS (11, 0)]
	//	[Export ("hidesSearchBarWhenScrolling")]
	//	bool HidesSearchBarWhenScrolling { get; set; }
	//}

	//// @interface UINavigationBar : UIView <NSCoding, UIBarPositioning>
	//[iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UINavigationBar : INSCoding, IUIBarPositioning
	//{
	//	// @property (assign, nonatomic) UIBarStyle barStyle __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector")));
	//	[NoTV]
	//	[Export ("barStyle", ArgumentSemantic.Assign)]
	//	UIBarStyle BarStyle { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UINavigationBarDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UINavigationBarDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (getter = isTranslucent, assign, nonatomic) BOOL translucent __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("translucent")]
	//	bool Translucent { [Bind ("isTranslucent")] get; set; }

	//	// -(void)pushNavigationItem:(UINavigationItem * _Nonnull)item animated:(BOOL)animated;
	//	[Export ("pushNavigationItem:animated:")]
	//	void PushNavigationItem (UINavigationItem item, bool animated);

	//	// -(UINavigationItem * _Nullable)popNavigationItemAnimated:(BOOL)animated;
	//	[Export ("popNavigationItemAnimated:")]
	//	[return: NullAllowed]
	//	UINavigationItem PopNavigationItemAnimated (bool animated);

	//	// @property (readonly, nonatomic, strong) UINavigationItem * _Nullable topItem;
	//	[NullAllowed, Export ("topItem", ArgumentSemantic.Strong)]
	//	UINavigationItem TopItem { get; }

	//	// @property (readonly, nonatomic, strong) UINavigationItem * _Nullable backItem;
	//	[NullAllowed, Export ("backItem", ArgumentSemantic.Strong)]
	//	UINavigationItem BackItem { get; }

	//	// @property (copy, nonatomic) NSArray<UINavigationItem *> * _Nullable items;
	//	[NullAllowed, Export ("items", ArgumentSemantic.Copy)]
	//	UINavigationItem[] Items { get; set; }

	//	// -(void)setItems:(NSArray<UINavigationItem *> * _Nullable)items animated:(BOOL)animated;
	//	[Export ("setItems:animated:")]
	//	void SetItems ([NullAllowed] UINavigationItem[] items, bool animated);

	//	// @property (assign, readwrite, nonatomic) BOOL prefersLargeTitles __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((annotate("ui_appearance_selector")));
	//	[NoTV, iOS (11, 0)]
	//	[Export ("prefersLargeTitles")]
	//	bool PrefersLargeTitles { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable barTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("barTintColor", ArgumentSemantic.Strong)]
	//	UIColor BarTintColor { get; set; }

	//	// -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("setBackgroundImage:forBarPosition:barMetrics:")]
	//	void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIBarPosition barPosition, UIBarMetrics barMetrics);

	//	// -(UIImage * _Nullable)backgroundImageForBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("backgroundImageForBarPosition:barMetrics:")]
	//	[return: NullAllowed]
	//	UIImage BackgroundImageForBarPosition (UIBarPosition barPosition, UIBarMetrics barMetrics);

	//	// -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setBackgroundImage:forBarMetrics:")]
	//	void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIBarMetrics barMetrics);

	//	// -(UIImage * _Nullable)backgroundImageForBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("backgroundImageForBarMetrics:")]
	//	[return: NullAllowed]
	//	UIImage BackgroundImageForBarMetrics (UIBarMetrics barMetrics);

	//	// @property (nonatomic, strong) UIImage * _Nullable shadowImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("shadowImage", ArgumentSemantic.Strong)]
	//	UIImage ShadowImage { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nullable titleTextAttributes __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("titleTextAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> TitleTextAttributes { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nullable largeTitleTextAttributes __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((annotate("ui_appearance_selector")));
	//	[NoTV, iOS (11, 0)]
	//	[NullAllowed, Export ("largeTitleTextAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> LargeTitleTextAttributes { get; set; }

	//	// -(void)setTitleVerticalPositionAdjustment:(CGFloat)adjustment forBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setTitleVerticalPositionAdjustment:forBarMetrics:")]
	//	void SetTitleVerticalPositionAdjustment (nfloat adjustment, UIBarMetrics barMetrics);

	//	// -(CGFloat)titleVerticalPositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("titleVerticalPositionAdjustmentForBarMetrics:")]
	//	nfloat TitleVerticalPositionAdjustmentForBarMetrics (UIBarMetrics barMetrics);

	//	// @property (nonatomic, strong) UIImage * _Nullable backIndicatorImage __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[NullAllowed, Export ("backIndicatorImage", ArgumentSemantic.Strong)]
	//	UIImage BackIndicatorImage { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable backIndicatorTransitionMaskImage __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[NullAllowed, Export ("backIndicatorTransitionMaskImage", ArgumentSemantic.Strong)]
	//	UIImage BackIndicatorTransitionMaskImage { get; set; }
	//}

	//// @protocol UINavigationBarDelegate <UIBarPositioningDelegate>
	//[Protocol, Model]
	//interface UINavigationBarDelegate : IUIBarPositioningDelegate
	//{
	//	// @optional -(BOOL)navigationBar:(UINavigationBar * _Nonnull)navigationBar shouldPushItem:(UINavigationItem * _Nonnull)item;
	//	[Export ("navigationBar:shouldPushItem:")]
	//	bool NavigationBar (UINavigationBar navigationBar, UINavigationItem item);

	//	// @optional -(void)navigationBar:(UINavigationBar * _Nonnull)navigationBar didPushItem:(UINavigationItem * _Nonnull)item;
	//	[Export ("navigationBar:didPushItem:")]
	//	void NavigationBar (UINavigationBar navigationBar, UINavigationItem item);

	//	// @optional -(BOOL)navigationBar:(UINavigationBar * _Nonnull)navigationBar shouldPopItem:(UINavigationItem * _Nonnull)item;
	//	[Export ("navigationBar:shouldPopItem:")]
	//	bool NavigationBar (UINavigationBar navigationBar, UINavigationItem item);

	//	// @optional -(void)navigationBar:(UINavigationBar * _Nonnull)navigationBar didPopItem:(UINavigationItem * _Nonnull)item;
	//	[Export ("navigationBar:didPopItem:")]
	//	void NavigationBar (UINavigationBar navigationBar, UINavigationItem item);
	//}

	//// @interface UINibLoadingAdditions (NSBundle)
	//[Category]
	//[BaseType (typeof(NSBundle))]
	//interface NSBundle_UINibLoadingAdditions
	//{
	//	// -(NSArray * _Nullable)loadNibNamed:(NSString * _Nonnull)name owner:(id _Nullable)owner options:(NSDictionary<UINibOptionsKey,id> * _Nullable)options;
	//	[Export ("loadNibNamed:owner:options:")]
	//	[Verify (StronglyTypedNSArray)]
	//	[return: NullAllowed]
	//	NSObject[] LoadNibNamed (string name, [NullAllowed] NSObject owner, [NullAllowed] NSDictionary<NSString, NSObject> options);
	//}

	//// @interface UINibLoadingAdditions (NSObject)
	//[Category]
	//[BaseType (typeof(NSObject))]
	//interface NSObject_UINibLoadingAdditions
	//{
	//	// -(void)awakeFromNib __attribute__((objc_requires_super));
	//	[Export ("awakeFromNib")]
	//	[RequiresSuper]
	//	void AwakeFromNib ();

	//	// -(void)prepareForInterfaceBuilder __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("prepareForInterfaceBuilder")]
	//	void PrepareForInterfaceBuilder ();
	//}

	//// @interface UINib : NSObject
	//[iOS (4,0)]
	//[BaseType (typeof(NSObject))]
	//interface UINib
	//{
	//	// +(UINib * _Nonnull)nibWithNibName:(NSString * _Nonnull)name bundle:(NSBundle * _Nullable)bundleOrNil;
	//	[Static]
	//	[Export ("nibWithNibName:bundle:")]
	//	UINib NibWithNibName (string name, [NullAllowed] NSBundle bundleOrNil);

	//	// +(UINib * _Nonnull)nibWithData:(NSData * _Nonnull)data bundle:(NSBundle * _Nullable)bundleOrNil;
	//	[Static]
	//	[Export ("nibWithData:bundle:")]
	//	UINib NibWithData (NSData data, [NullAllowed] NSBundle bundleOrNil);

	//	// -(NSArray * _Nonnull)instantiateWithOwner:(id _Nullable)ownerOrNil options:(NSDictionary<UINibOptionsKey,id> * _Nullable)optionsOrNil;
	//	[Export ("instantiateWithOwner:options:")]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] InstantiateWithOwner ([NullAllowed] NSObject ownerOrNil, [NullAllowed] NSDictionary<NSString, NSObject> optionsOrNil);
	//}

	//// @interface UIPageControl : UIControl
	//[iOS (2,0)]
	//[BaseType (typeof(UIControl))]
	//interface UIPageControl
	//{
	//	// @property (nonatomic) NSInteger numberOfPages;
	//	[Export ("numberOfPages")]
	//	nint NumberOfPages { get; set; }

	//	// @property (nonatomic) NSInteger currentPage;
	//	[Export ("currentPage")]
	//	nint CurrentPage { get; set; }

	//	// @property (nonatomic) BOOL hidesForSinglePage;
	//	[Export ("hidesForSinglePage")]
	//	bool HidesForSinglePage { get; set; }

	//	// @property (nonatomic) BOOL defersCurrentPageDisplay;
	//	[Export ("defersCurrentPageDisplay")]
	//	bool DefersCurrentPageDisplay { get; set; }

	//	// -(void)updateCurrentPageDisplay;
	//	[Export ("updateCurrentPageDisplay")]
	//	void UpdateCurrentPageDisplay ();

	//	// -(CGSize)sizeForNumberOfPages:(NSInteger)pageCount;
	//	[Export ("sizeForNumberOfPages:")]
	//	CGSize SizeForNumberOfPages (nint pageCount);

	//	// @property (nonatomic, strong) UIColor * _Nullable pageIndicatorTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("pageIndicatorTintColor", ArgumentSemantic.Strong)]
	//	UIColor PageIndicatorTintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable currentPageIndicatorTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("currentPageIndicatorTintColor", ArgumentSemantic.Strong)]
	//	UIColor CurrentPageIndicatorTintColor { get; set; }
	//}

	//// @interface UIPageViewController : UIViewController
	//[iOS (5,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UIPageViewController
	//{
	//	// -(instancetype _Nonnull)initWithTransitionStyle:(UIPageViewControllerTransitionStyle)style navigationOrientation:(UIPageViewControllerNavigationOrientation)navigationOrientation options:(NSDictionary<UIPageViewControllerOptionsKey,id> * _Nullable)options __attribute__((objc_designated_initializer));
	//	[Export ("initWithTransitionStyle:navigationOrientation:options:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIPageViewControllerTransitionStyle style, UIPageViewControllerNavigationOrientation navigationOrientation, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIPageViewControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIPageViewControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic, weak) id<UIPageViewControllerDataSource> _Nullable dataSource;
	//	[NullAllowed, Export ("dataSource", ArgumentSemantic.Weak)]
	//	UIPageViewControllerDataSource DataSource { get; set; }

	//	// @property (readonly, nonatomic) UIPageViewControllerTransitionStyle transitionStyle;
	//	[Export ("transitionStyle")]
	//	UIPageViewControllerTransitionStyle TransitionStyle { get; }

	//	// @property (readonly, nonatomic) UIPageViewControllerNavigationOrientation navigationOrientation;
	//	[Export ("navigationOrientation")]
	//	UIPageViewControllerNavigationOrientation NavigationOrientation { get; }

	//	// @property (readonly, nonatomic) UIPageViewControllerSpineLocation spineLocation;
	//	[Export ("spineLocation")]
	//	UIPageViewControllerSpineLocation SpineLocation { get; }

	//	// @property (getter = isDoubleSided, nonatomic) BOOL doubleSided;
	//	[Export ("doubleSided")]
	//	bool DoubleSided { [Bind ("isDoubleSided")] get; set; }

	//	// @property (readonly, nonatomic) NSArray<__kindof UIGestureRecognizer *> * _Nonnull gestureRecognizers;
	//	[Export ("gestureRecognizers")]
	//	UIGestureRecognizer[] GestureRecognizers { get; }

	//	// @property (readonly, nonatomic) NSArray<__kindof UIViewController *> * _Nullable viewControllers;
	//	[NullAllowed, Export ("viewControllers")]
	//	UIViewController[] ViewControllers { get; }

	//	// -(void)setViewControllers:(NSArray<UIViewController *> * _Nullable)viewControllers direction:(UIPageViewControllerNavigationDirection)direction animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
	//	[Export ("setViewControllers:direction:animated:completion:")]
	//	void SetViewControllers ([NullAllowed] UIViewController[] viewControllers, UIPageViewControllerNavigationDirection direction, bool animated, [NullAllowed] Action<bool> completion);
	//}

	//// @protocol UIPageViewControllerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIPageViewControllerDelegate
	//{
	//	// @optional -(void)pageViewController:(UIPageViewController * _Nonnull)pageViewController willTransitionToViewControllers:(NSArray<UIViewController *> * _Nonnull)pendingViewControllers __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("pageViewController:willTransitionToViewControllers:")]
	//	void PageViewController (UIPageViewController pageViewController, UIViewController[] pendingViewControllers);

	//	// @optional -(void)pageViewController:(UIPageViewController * _Nonnull)pageViewController didFinishAnimating:(BOOL)finished previousViewControllers:(NSArray<UIViewController *> * _Nonnull)previousViewControllers transitionCompleted:(BOOL)completed;
	//	[Export ("pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:")]
	//	void PageViewController (UIPageViewController pageViewController, bool finished, UIViewController[] previousViewControllers, bool completed);

	//	// @optional -(UIPageViewControllerSpineLocation)pageViewController:(UIPageViewController * _Nonnull)pageViewController spineLocationForInterfaceOrientation:(UIInterfaceOrientation)orientation __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("pageViewController:spineLocationForInterfaceOrientation:")]
	//	UIPageViewControllerSpineLocation PageViewController (UIPageViewController pageViewController, UIInterfaceOrientation orientation);

	//	// @optional -(UIInterfaceOrientationMask)pageViewControllerSupportedInterfaceOrientations:(UIPageViewController * _Nonnull)pageViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7,0)]
	//	[Export ("pageViewControllerSupportedInterfaceOrientations:")]
	//	UIInterfaceOrientationMask PageViewControllerSupportedInterfaceOrientations (UIPageViewController pageViewController);

	//	// @optional -(UIInterfaceOrientation)pageViewControllerPreferredInterfaceOrientationForPresentation:(UIPageViewController * _Nonnull)pageViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7,0)]
	//	[Export ("pageViewControllerPreferredInterfaceOrientationForPresentation:")]
	//	UIInterfaceOrientation PageViewControllerPreferredInterfaceOrientationForPresentation (UIPageViewController pageViewController);
	//}

	//// @protocol UIPageViewControllerDataSource <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIPageViewControllerDataSource
	//{
	//	// @required -(UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController;
	//	[Abstract]
	//	[Export ("pageViewController:viewControllerBeforeViewController:")]
	//	[return: NullAllowed]
	//	UIViewController PageViewController (UIPageViewController pageViewController, UIViewController viewController);

	//	// @required -(UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController;
	//	[Abstract]
	//	[Export ("pageViewController:viewControllerAfterViewController:")]
	//	[return: NullAllowed]
	//	UIViewController PageViewController (UIPageViewController pageViewController, UIViewController viewController);

	//	// @optional -(NSInteger)presentationCountForPageViewController:(UIPageViewController * _Nonnull)pageViewController __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("presentationCountForPageViewController:")]
	//	nint PresentationCountForPageViewController (UIPageViewController pageViewController);

	//	// @optional -(NSInteger)presentationIndexForPageViewController:(UIPageViewController * _Nonnull)pageViewController __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("presentationIndexForPageViewController:")]
	//	nint PresentationIndexForPageViewController (UIPageViewController pageViewController);
	//}

	//// @interface UIPasteboard : NSObject
	//[NoWatch, NoTV, iOS (3,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIPasteboard
	//{
	//	// @property (readonly, nonatomic, class) UIPasteboard * _Nonnull generalPasteboard;
	//	[Static]
	//	[Export ("generalPasteboard")]
	//	UIPasteboard GeneralPasteboard { get; }

	//	// +(UIPasteboard * _Nullable)pasteboardWithName:(UIPasteboardName _Nonnull)pasteboardName create:(BOOL)create;
	//	[Static]
	//	[Export ("pasteboardWithName:create:")]
	//	[return: NullAllowed]
	//	UIPasteboard PasteboardWithName (string pasteboardName, bool create);

	//	// +(UIPasteboard * _Nonnull)pasteboardWithUniqueName;
	//	[Static]
	//	[Export ("pasteboardWithUniqueName")]
	//	[Verify (MethodToProperty)]
	//	UIPasteboard PasteboardWithUniqueName { get; }

	//	// @property (readonly, nonatomic) UIPasteboardName _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// +(void)removePasteboardWithName:(UIPasteboardName _Nonnull)pasteboardName;
	//	[Static]
	//	[Export ("removePasteboardWithName:")]
	//	void RemovePasteboardWithName (string pasteboardName);

	//	// @property (readonly, getter = isPersistent, nonatomic) BOOL persistent;
	//	[Export ("persistent")]
	//	bool Persistent { [Bind ("isPersistent")] get; }

	//	// -(void)setPersistent:(BOOL)persistent __attribute__((availability(ios, introduced=3.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 3, 0, message: "Do not set persistence on pasteboards. This property is set automatically.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Do not set persistence on pasteboards. This property is set automatically.")]
	//	[Export ("setPersistent:")]
	//	void SetPersistent (bool persistent);

	//	// @property (readonly, nonatomic) NSInteger changeCount;
	//	[Export ("changeCount")]
	//	nint ChangeCount { get; }

	//	// @property (copy, nonatomic) NSArray<__kindof NSItemProvider *> * _Nonnull itemProviders __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("itemProviders", ArgumentSemantic.Copy)]
	//	NSItemProvider[] ItemProviders { get; set; }

	//	// -(void)setItemProviders:(NSArray<NSItemProvider *> * _Nonnull)itemProviders localOnly:(BOOL)localOnly expirationDate:(NSDate * _Nullable)expirationDate __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Export ("setItemProviders:localOnly:expirationDate:")]
	//	void SetItemProviders (NSItemProvider[] itemProviders, bool localOnly, [NullAllowed] NSDate expirationDate);

	//	// -(void)setObjects:(NSArray<id<NSItemProviderWriting>> * _Nonnull)objects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Export ("setObjects:")]
	//	void SetObjects (NSItemProviderWriting[] objects);

	//	// -(void)setObjects:(NSArray<id<NSItemProviderWriting>> * _Nonnull)objects localOnly:(BOOL)localOnly expirationDate:(NSDate * _Nullable)expirationDate __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Export ("setObjects:localOnly:expirationDate:")]
	//	void SetObjects (NSItemProviderWriting[] objects, bool localOnly, [NullAllowed] NSDate expirationDate);

	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull pasteboardTypes;
	//	[Export ("pasteboardTypes")]
	//	string[] PasteboardTypes { get; }

	//	// -(BOOL)containsPasteboardTypes:(NSArray<NSString *> * _Nonnull)pasteboardTypes;
	//	[Export ("containsPasteboardTypes:")]
	//	bool ContainsPasteboardTypes (string[] pasteboardTypes);

	//	// -(NSData * _Nullable)dataForPasteboardType:(NSString * _Nonnull)pasteboardType;
	//	[Export ("dataForPasteboardType:")]
	//	[return: NullAllowed]
	//	NSData DataForPasteboardType (string pasteboardType);

	//	// -(id _Nullable)valueForPasteboardType:(NSString * _Nonnull)pasteboardType;
	//	[Export ("valueForPasteboardType:")]
	//	[return: NullAllowed]
	//	NSObject ValueForPasteboardType (string pasteboardType);

	//	// -(void)setValue:(id _Nonnull)value forPasteboardType:(NSString * _Nonnull)pasteboardType;
	//	[Export ("setValue:forPasteboardType:")]
	//	void SetValue (NSObject value, string pasteboardType);

	//	// -(void)setData:(NSData * _Nonnull)data forPasteboardType:(NSString * _Nonnull)pasteboardType;
	//	[Export ("setData:forPasteboardType:")]
	//	void SetData (NSData data, string pasteboardType);

	//	// @property (readonly, nonatomic) NSInteger numberOfItems;
	//	[Export ("numberOfItems")]
	//	nint NumberOfItems { get; }

	//	// -(NSArray<NSArray<NSString *> *> * _Nullable)pasteboardTypesForItemSet:(NSIndexSet * _Nullable)itemSet;
	//	[Export ("pasteboardTypesForItemSet:")]
	//	[return: NullAllowed]
	//	NSArray<NSString>[] PasteboardTypesForItemSet ([NullAllowed] NSIndexSet itemSet);

	//	// -(BOOL)containsPasteboardTypes:(NSArray<NSString *> * _Nonnull)pasteboardTypes inItemSet:(NSIndexSet * _Nullable)itemSet;
	//	[Export ("containsPasteboardTypes:inItemSet:")]
	//	bool ContainsPasteboardTypes (string[] pasteboardTypes, [NullAllowed] NSIndexSet itemSet);

	//	// -(NSIndexSet * _Nullable)itemSetWithPasteboardTypes:(NSArray<NSString *> * _Nonnull)pasteboardTypes;
	//	[Export ("itemSetWithPasteboardTypes:")]
	//	[return: NullAllowed]
	//	NSIndexSet ItemSetWithPasteboardTypes (string[] pasteboardTypes);

	//	// -(NSArray * _Nullable)valuesForPasteboardType:(NSString * _Nonnull)pasteboardType inItemSet:(NSIndexSet * _Nullable)itemSet;
	//	[Export ("valuesForPasteboardType:inItemSet:")]
	//	[Verify (StronglyTypedNSArray)]
	//	[return: NullAllowed]
	//	NSObject[] ValuesForPasteboardType (string pasteboardType, [NullAllowed] NSIndexSet itemSet);

	//	// -(NSArray<NSData *> * _Nullable)dataForPasteboardType:(NSString * _Nonnull)pasteboardType inItemSet:(NSIndexSet * _Nullable)itemSet;
	//	[Export ("dataForPasteboardType:inItemSet:")]
	//	[return: NullAllowed]
	//	NSData[] DataForPasteboardType (string pasteboardType, [NullAllowed] NSIndexSet itemSet);

	//	// @property (copy, nonatomic) NSArray<NSDictionary<NSString *,id> *> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject>[] Items { get; set; }

	//	// -(void)addItems:(NSArray<NSDictionary<NSString *,id> *> * _Nonnull)items;
	//	[Export ("addItems:")]
	//	void AddItems (NSDictionary<NSString, NSObject>[] items);

	//	// -(void)setItems:(NSArray<NSDictionary<NSString *,id> *> * _Nonnull)items options:(NSDictionary<UIPasteboardOption,id> * _Nonnull)options __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("setItems:options:")]
	//	void SetItems (NSDictionary<NSString, NSObject>[] items, NSDictionary<NSString, NSObject> options);

	//	// @property (copy, nonatomic) NSString * _Nullable string __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV]
	//	[NullAllowed, Export ("string")]
	//	string String { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSString *> * _Nullable strings __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV]
	//	[NullAllowed, Export ("strings", ArgumentSemantic.Copy)]
	//	string[] Strings { get; set; }

	//	// @property (copy, nonatomic) NSURL * _Nullable URL __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV]
	//	[NullAllowed, Export ("URL", ArgumentSemantic.Copy)]
	//	NSUrl URL { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSURL *> * _Nullable URLs __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV]
	//	[NullAllowed, Export ("URLs", ArgumentSemantic.Copy)]
	//	NSUrl[] URLs { get; set; }

	//	// @property (copy, nonatomic) UIImage * _Nullable image __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV]
	//	[NullAllowed, Export ("image", ArgumentSemantic.Copy)]
	//	UIImage Image { get; set; }

	//	// @property (copy, nonatomic) NSArray<UIImage *> * _Nullable images __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV]
	//	[NullAllowed, Export ("images", ArgumentSemantic.Copy)]
	//	UIImage[] Images { get; set; }

	//	// @property (copy, nonatomic) UIColor * _Nullable color __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV]
	//	[NullAllowed, Export ("color", ArgumentSemantic.Copy)]
	//	UIColor Color { get; set; }

	//	// @property (copy, nonatomic) NSArray<UIColor *> * _Nullable colors __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV]
	//	[NullAllowed, Export ("colors", ArgumentSemantic.Copy)]
	//	UIColor[] Colors { get; set; }

	//	// @property (readonly, nonatomic) BOOL hasStrings __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV, iOS (10, 0)]
	//	[Export ("hasStrings")]
	//	bool HasStrings { get; }

	//	// @property (readonly, nonatomic) BOOL hasURLs __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV, iOS (10, 0)]
	//	[Export ("hasURLs")]
	//	bool HasURLs { get; }

	//	// @property (readonly, nonatomic) BOOL hasImages __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV, iOS (10, 0)]
	//	[Export ("hasImages")]
	//	bool HasImages { get; }

	//	// @property (readonly, nonatomic) BOOL hasColors __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
	//	[NoWatch, NoTV, iOS (10, 0)]
	//	[Export ("hasColors")]
	//	bool HasColors { get; }
	//}

	//// @interface UIPinchGestureRecognizer : UIGestureRecognizer
	//[NoTV, iOS (3,2)]
	//[BaseType (typeof(UIGestureRecognizer))]
	//interface UIPinchGestureRecognizer
	//{
	//	// @property (nonatomic) CGFloat scale;
	//	[Export ("scale")]
	//	nfloat Scale { get; set; }

	//	// @property (readonly, nonatomic) CGFloat velocity;
	//	[Export ("velocity")]
	//	nfloat Velocity { get; }
	//}

	//// @interface UIPopoverController (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIPopoverController
	//{
	//	// @property (getter = isModalInPopover, readwrite, nonatomic) BOOL modalInPopover __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[Export ("modalInPopover")]
	//	bool ModalInPopover { [Bind ("isModalInPopover")] get; set; }

	//	// @property (readwrite, nonatomic) CGSize contentSizeForViewInPopover __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.2, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 3, 2, message: "Use UIViewController.preferredContentSize instead.")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use UIViewController.preferredContentSize instead.")]
	//	[NoTV]
	//	[Export ("contentSizeForViewInPopover", ArgumentSemantic.Assign)]
	//	CGSize ContentSizeForViewInPopover { get; set; }
	//}

	//// @interface UIPopoverController : NSObject <UIAppearanceContainer>
	//[Introduced (PlatformName.iOS, 3, 2, message: "UIPopoverController is deprecated. Popovers are now implemented as UIViewController presentations. Use a modal presentation style of UIModalPresentationPopover and UIPopoverPresentationController.")]
	//[Deprecated (PlatformName.iOS, 9, 0, message: "UIPopoverController is deprecated. Popovers are now implemented as UIViewController presentations. Use a modal presentation style of UIModalPresentationPopover and UIPopoverPresentationController.")]
	//[BaseType (typeof(NSObject))]
	//interface UIPopoverController : IUIAppearanceContainer
	//{
	//	// -(instancetype _Nonnull)initWithContentViewController:(UIViewController * _Nonnull)viewController;
	//	[Export ("initWithContentViewController:")]
	//	IntPtr Constructor (UIViewController viewController);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIPopoverControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIPopoverControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic, strong) UIViewController * _Nonnull contentViewController;
	//	[Export ("contentViewController", ArgumentSemantic.Strong)]
	//	UIViewController ContentViewController { get; set; }

	//	// -(void)setContentViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
	//	[Export ("setContentViewController:animated:")]
	//	void SetContentViewController (UIViewController viewController, bool animated);

	//	// @property (nonatomic) CGSize popoverContentSize;
	//	[Export ("popoverContentSize", ArgumentSemantic.Assign)]
	//	CGSize PopoverContentSize { get; set; }

	//	// -(void)setPopoverContentSize:(CGSize)size animated:(BOOL)animated;
	//	[Export ("setPopoverContentSize:animated:")]
	//	void SetPopoverContentSize (CGSize size, bool animated);

	//	// @property (readonly, getter = isPopoverVisible, nonatomic) BOOL popoverVisible;
	//	[Export ("popoverVisible")]
	//	bool PopoverVisible { [Bind ("isPopoverVisible")] get; }

	//	// @property (readonly, nonatomic) UIPopoverArrowDirection popoverArrowDirection;
	//	[Export ("popoverArrowDirection")]
	//	UIPopoverArrowDirection PopoverArrowDirection { get; }

	//	// @property (copy, nonatomic) NSArray<__kindof UIView *> * _Nullable passthroughViews;
	//	[NullAllowed, Export ("passthroughViews", ArgumentSemantic.Copy)]
	//	UIView[] PassthroughViews { get; set; }

	//	// -(void)presentPopoverFromRect:(CGRect)rect inView:(UIView * _Nonnull)view permittedArrowDirections:(UIPopoverArrowDirection)arrowDirections animated:(BOOL)animated;
	//	[Export ("presentPopoverFromRect:inView:permittedArrowDirections:animated:")]
	//	void PresentPopoverFromRect (CGRect rect, UIView view, UIPopoverArrowDirection arrowDirections, bool animated);

	//	// -(void)presentPopoverFromBarButtonItem:(UIBarButtonItem * _Nonnull)item permittedArrowDirections:(UIPopoverArrowDirection)arrowDirections animated:(BOOL)animated;
	//	[Export ("presentPopoverFromBarButtonItem:permittedArrowDirections:animated:")]
	//	void PresentPopoverFromBarButtonItem (UIBarButtonItem item, UIPopoverArrowDirection arrowDirections, bool animated);

	//	// -(void)dismissPopoverAnimated:(BOOL)animated;
	//	[Export ("dismissPopoverAnimated:")]
	//	void DismissPopoverAnimated (bool animated);

	//	// @property (copy, nonatomic) UIColor * _Nullable backgroundColor __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Copy)]
	//	UIColor BackgroundColor { get; set; }

	//	// @property (readwrite, nonatomic) UIEdgeInsets popoverLayoutMargins __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("popoverLayoutMargins", ArgumentSemantic.Assign)]
	//	UIEdgeInsets PopoverLayoutMargins { get; set; }

	//	// @property (readwrite, nonatomic, strong) Class _Nullable popoverBackgroundViewClass __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("popoverBackgroundViewClass", ArgumentSemantic.Strong)]
	//	Class PopoverBackgroundViewClass { get; set; }
	//}

	//// @protocol UIPopoverControllerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIPopoverControllerDelegate
	//{
	//	// @optional -(BOOL)popoverControllerShouldDismissPopover:(UIPopoverController * _Nonnull)popoverController __attribute__((availability(ios, introduced=3.2, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 3, 2)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("popoverControllerShouldDismissPopover:")]
	//	bool PopoverControllerShouldDismissPopover (UIPopoverController popoverController);

	//	// @optional -(void)popoverControllerDidDismissPopover:(UIPopoverController * _Nonnull)popoverController __attribute__((availability(ios, introduced=3.2, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 3, 2)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("popoverControllerDidDismissPopover:")]
	//	void PopoverControllerDidDismissPopover (UIPopoverController popoverController);

	//	// @optional -(void)popoverController:(UIPopoverController * _Nonnull)popoverController willRepositionPopoverToRect:(CGRect * _Nonnull)rect inView:(UIView * _Nonnull * _Nonnull)view __attribute__((availability(ios, introduced=7.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 7, 0)]
	//	[Deprecated (PlatformName.iOS, 9, 0)]
	//	[Export ("popoverController:willRepositionPopoverToRect:inView:")]
	//	unsafe void PopoverController (UIPopoverController popoverController, CGRect* rect, out UIView view);
	//}

	//// @protocol UIPopoverBackgroundViewMethods
	//[Protocol, Model]
	//interface UIPopoverBackgroundViewMethods
	//{
	//	// @required +(CGFloat)arrowBase;
	//	[Static, Abstract]
	//	[Export ("arrowBase")]
	//	[Verify (MethodToProperty)]
	//	nfloat ArrowBase { get; }

	//	// @required +(UIEdgeInsets)contentViewInsets;
	//	[Static, Abstract]
	//	[Export ("contentViewInsets")]
	//	[Verify (MethodToProperty)]
	//	UIEdgeInsets ContentViewInsets { get; }

	//	// @required +(CGFloat)arrowHeight;
	//	[Static, Abstract]
	//	[Export ("arrowHeight")]
	//	[Verify (MethodToProperty)]
	//	nfloat ArrowHeight { get; }
	//}

	//// @interface UIPopoverBackgroundView : UIView <UIPopoverBackgroundViewMethods>
	//[iOS (5,0)]
	//[BaseType (typeof(UIView))]
	//interface UIPopoverBackgroundView : IUIPopoverBackgroundViewMethods
	//{
	//	// @property (readwrite, nonatomic) CGFloat arrowOffset;
	//	[Export ("arrowOffset")]
	//	nfloat ArrowOffset { get; set; }

	//	// @property (readwrite, nonatomic) UIPopoverArrowDirection arrowDirection;
	//	[Export ("arrowDirection", ArgumentSemantic.Assign)]
	//	UIPopoverArrowDirection ArrowDirection { get; set; }

	//	// @property (readonly, nonatomic, class) BOOL wantsDefaultContentAppearance __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Static]
	//	[Export ("wantsDefaultContentAppearance")]
	//	bool WantsDefaultContentAppearance { get; }
	//}

	//// @interface UIPress : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIPress
	//{
	//	// @property (readonly, nonatomic) NSTimeInterval timestamp;
	//	[Export ("timestamp")]
	//	double Timestamp { get; }

	//	// @property (readonly, nonatomic) UIPressPhase phase;
	//	[Export ("phase")]
	//	UIPressPhase Phase { get; }

	//	// @property (readonly, nonatomic) UIPressType type;
	//	[Export ("type")]
	//	UIPressType Type { get; }

	//	// @property (readonly, nonatomic, strong) UIWindow * _Nullable window;
	//	[NullAllowed, Export ("window", ArgumentSemantic.Strong)]
	//	UIWindow Window { get; }

	//	// @property (readonly, nonatomic, strong) UIResponder * _Nullable responder;
	//	[NullAllowed, Export ("responder", ArgumentSemantic.Strong)]
	//	UIResponder Responder { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<UIGestureRecognizer *> * _Nullable gestureRecognizers;
	//	[NullAllowed, Export ("gestureRecognizers", ArgumentSemantic.Copy)]
	//	UIGestureRecognizer[] GestureRecognizers { get; }

	//	// @property (readonly, nonatomic) CGFloat force;
	//	[Export ("force")]
	//	nfloat Force { get; }
	//}

	//// @interface UIPressesEvent : UIEvent
	//[iOS (9,0)]
	//[BaseType (typeof(UIEvent))]
	//interface UIPressesEvent
	//{
	//	// @property (readonly, nonatomic) NSSet<UIPress *> * _Nonnull allPresses;
	//	[Export ("allPresses")]
	//	NSSet<UIPress> AllPresses { get; }

	//	// -(NSSet<UIPress *> * _Nonnull)pressesForGestureRecognizer:(UIGestureRecognizer * _Nonnull)gesture;
	//	[Export ("pressesForGestureRecognizer:")]
	//	NSSet<UIPress> PressesForGestureRecognizer (UIGestureRecognizer gesture);
	//}

	//// @interface UIPrinter : NSObject
	//[NoTV, iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIPrinter
	//{
	//	// +(UIPrinter * _Nonnull)printerWithURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("printerWithURL:")]
	//	UIPrinter PrinterWithURL (NSUrl url);

	//	// @property (readonly, copy) NSURL * _Nonnull URL;
	//	[Export ("URL", ArgumentSemantic.Copy)]
	//	NSUrl URL { get; }

	//	// @property (readonly, copy) NSString * _Nonnull displayName;
	//	[Export ("displayName")]
	//	string DisplayName { get; }

	//	// @property (readonly, copy) NSString * _Nullable displayLocation;
	//	[NullAllowed, Export ("displayLocation")]
	//	string DisplayLocation { get; }

	//	// @property (readonly) UIPrinterJobTypes supportedJobTypes;
	//	[Export ("supportedJobTypes")]
	//	UIPrinterJobTypes SupportedJobTypes { get; }

	//	// @property (readonly, copy) NSString * _Nullable makeAndModel;
	//	[NullAllowed, Export ("makeAndModel")]
	//	string MakeAndModel { get; }

	//	// @property (readonly) BOOL supportsColor;
	//	[Export ("supportsColor")]
	//	bool SupportsColor { get; }

	//	// @property (readonly) BOOL supportsDuplex;
	//	[Export ("supportsDuplex")]
	//	bool SupportsDuplex { get; }

	//	// -(void)contactPrinter:(void (^ _Nullable)(BOOL))completionHandler;
	//	[Export ("contactPrinter:")]
	//	void ContactPrinter ([NullAllowed] Action<bool> completionHandler);
	//}

	//// typedef void (^UIPrinterPickerCompletionHandler)(UIPrinterPickerController * _Nonnull, BOOL, NSError * _Nullable);
	//delegate void UIPrinterPickerCompletionHandler (UIPrinterPickerController arg0, bool arg1, [NullAllowed] NSError arg2);

	//// @protocol UIPrinterPickerControllerDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIPrinterPickerControllerDelegate
	//{
	//	// @optional -(UIViewController * _Nullable)printerPickerControllerParentViewController:(UIPrinterPickerController * _Nonnull)printerPickerController;
	//	[Export ("printerPickerControllerParentViewController:")]
	//	[return: NullAllowed]
	//	UIViewController PrinterPickerControllerParentViewController (UIPrinterPickerController printerPickerController);

	//	// @optional -(BOOL)printerPickerController:(UIPrinterPickerController * _Nonnull)printerPickerController shouldShowPrinter:(UIPrinter * _Nonnull)printer;
	//	[Export ("printerPickerController:shouldShowPrinter:")]
	//	bool PrinterPickerController (UIPrinterPickerController printerPickerController, UIPrinter printer);

	//	// @optional -(void)printerPickerControllerWillPresent:(UIPrinterPickerController * _Nonnull)printerPickerController;
	//	[Export ("printerPickerControllerWillPresent:")]
	//	void PrinterPickerControllerWillPresent (UIPrinterPickerController printerPickerController);

	//	// @optional -(void)printerPickerControllerDidPresent:(UIPrinterPickerController * _Nonnull)printerPickerController;
	//	[Export ("printerPickerControllerDidPresent:")]
	//	void PrinterPickerControllerDidPresent (UIPrinterPickerController printerPickerController);

	//	// @optional -(void)printerPickerControllerWillDismiss:(UIPrinterPickerController * _Nonnull)printerPickerController;
	//	[Export ("printerPickerControllerWillDismiss:")]
	//	void PrinterPickerControllerWillDismiss (UIPrinterPickerController printerPickerController);

	//	// @optional -(void)printerPickerControllerDidDismiss:(UIPrinterPickerController * _Nonnull)printerPickerController;
	//	[Export ("printerPickerControllerDidDismiss:")]
	//	void PrinterPickerControllerDidDismiss (UIPrinterPickerController printerPickerController);

	//	// @optional -(void)printerPickerControllerDidSelectPrinter:(UIPrinterPickerController * _Nonnull)printerPickerController;
	//	[Export ("printerPickerControllerDidSelectPrinter:")]
	//	void PrinterPickerControllerDidSelectPrinter (UIPrinterPickerController printerPickerController);
	//}

	//// @interface UIPrinterPickerController : NSObject
	//[NoTV, iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIPrinterPickerController
	//{
	//	// +(UIPrinterPickerController * _Nonnull)printerPickerControllerWithInitiallySelectedPrinter:(UIPrinter * _Nullable)printer;
	//	[Static]
	//	[Export ("printerPickerControllerWithInitiallySelectedPrinter:")]
	//	UIPrinterPickerController PrinterPickerControllerWithInitiallySelectedPrinter ([NullAllowed] UIPrinter printer);

	//	// @property (readonly, nonatomic) UIPrinter * _Nullable selectedPrinter;
	//	[NullAllowed, Export ("selectedPrinter")]
	//	UIPrinter SelectedPrinter { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIPrinterPickerControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIPrinterPickerControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(BOOL)presentAnimated:(BOOL)animated completionHandler:(UIPrinterPickerCompletionHandler _Nullable)completion;
	//	[Export ("presentAnimated:completionHandler:")]
	//	bool PresentAnimated (bool animated, [NullAllowed] UIPrinterPickerCompletionHandler completion);

	//	// -(BOOL)presentFromRect:(CGRect)rect inView:(UIView * _Nonnull)view animated:(BOOL)animated completionHandler:(UIPrinterPickerCompletionHandler _Nullable)completion;
	//	[Export ("presentFromRect:inView:animated:completionHandler:")]
	//	bool PresentFromRect (CGRect rect, UIView view, bool animated, [NullAllowed] UIPrinterPickerCompletionHandler completion);

	//	// -(BOOL)presentFromBarButtonItem:(UIBarButtonItem * _Nonnull)item animated:(BOOL)animated completionHandler:(UIPrinterPickerCompletionHandler _Nullable)completion;
	//	[Export ("presentFromBarButtonItem:animated:completionHandler:")]
	//	bool PresentFromBarButtonItem (UIBarButtonItem item, bool animated, [NullAllowed] UIPrinterPickerCompletionHandler completion);

	//	// -(void)dismissAnimated:(BOOL)animated;
	//	[Export ("dismissAnimated:")]
	//	void DismissAnimated (bool animated);
	//}

	//// @interface UIPrintFormatter : NSObject <NSCopying>
	//[NoTV, iOS (4,2)]
	//[BaseType (typeof(NSObject))]
	//interface UIPrintFormatter : INSCopying
	//{
	//	// @property (readonly, nonatomic, weak) UIPrintPageRenderer * _Nullable printPageRenderer __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[NullAllowed, Export ("printPageRenderer", ArgumentSemantic.Weak)]
	//	UIPrintPageRenderer PrintPageRenderer { get; }

	//	// -(void)removeFromPrintPageRenderer __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("removeFromPrintPageRenderer")]
	//	void RemoveFromPrintPageRenderer ();

	//	// @property (nonatomic) CGFloat maximumContentHeight __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("maximumContentHeight")]
	//	nfloat MaximumContentHeight { get; set; }

	//	// @property (nonatomic) CGFloat maximumContentWidth __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("maximumContentWidth")]
	//	nfloat MaximumContentWidth { get; set; }

	//	// @property (nonatomic) UIEdgeInsets contentInsets __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.2, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 2, message: "Use perPageContentInsets instead.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use perPageContentInsets instead.")]
	//	[NoTV]
	//	[Export ("contentInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets ContentInsets { get; set; }

	//	// @property (nonatomic) UIEdgeInsets perPageContentInsets __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("perPageContentInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets PerPageContentInsets { get; set; }

	//	// @property (nonatomic) NSInteger startPage __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("startPage")]
	//	nint StartPage { get; set; }

	//	// @property (readonly, nonatomic) NSInteger pageCount __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("pageCount")]
	//	nint PageCount { get; }

	//	// -(CGRect)rectForPageAtIndex:(NSInteger)pageIndex __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("rectForPageAtIndex:")]
	//	CGRect RectForPageAtIndex (nint pageIndex);

	//	// -(void)drawInRect:(CGRect)rect forPageAtIndex:(NSInteger)pageIndex __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("drawInRect:forPageAtIndex:")]
	//	void DrawInRect (CGRect rect, nint pageIndex);
	//}

	//// @interface UISimpleTextPrintFormatter : UIPrintFormatter
	//[NoTV, iOS (4,2)]
	//[BaseType (typeof(UIPrintFormatter))]
	//interface UISimpleTextPrintFormatter
	//{
	//	// -(instancetype _Nonnull)initWithText:(NSString * _Nonnull)text;
	//	[Export ("initWithText:")]
	//	IntPtr Constructor (string text);

	//	// -(instancetype _Nonnull)initWithAttributedText:(NSAttributedString * _Nonnull)attributedText __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("initWithAttributedText:")]
	//	IntPtr Constructor (NSAttributedString attributedText);

	//	// @property (copy, nonatomic) NSString * _Nullable text;
	//	[NullAllowed, Export ("text")]
	//	string Text { get; set; }

	//	// @property (copy, nonatomic) NSAttributedString * _Nullable attributedText __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("attributedText", ArgumentSemantic.Copy)]
	//	NSAttributedString AttributedText { get; set; }

	//	// @property (nonatomic, strong) UIFont * _Nullable font;
	//	[NullAllowed, Export ("font", ArgumentSemantic.Strong)]
	//	UIFont Font { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable color;
	//	[NullAllowed, Export ("color", ArgumentSemantic.Strong)]
	//	UIColor Color { get; set; }

	//	// @property (nonatomic) NSTextAlignment textAlignment;
	//	[Export ("textAlignment", ArgumentSemantic.Assign)]
	//	NSTextAlignment TextAlignment { get; set; }
	//}

	//// @interface UIMarkupTextPrintFormatter : UIPrintFormatter
	//[NoTV, iOS (4,2)]
	//[BaseType (typeof(UIPrintFormatter))]
	//interface UIMarkupTextPrintFormatter
	//{
	//	// -(instancetype _Nonnull)initWithMarkupText:(NSString * _Nonnull)markupText;
	//	[Export ("initWithMarkupText:")]
	//	IntPtr Constructor (string markupText);

	//	// @property (copy, nonatomic) NSString * _Nullable markupText;
	//	[NullAllowed, Export ("markupText")]
	//	string MarkupText { get; set; }
	//}

	//// @interface UIViewPrintFormatter : UIPrintFormatter
	//[NoTV, iOS (4,2)]
	//[BaseType (typeof(UIPrintFormatter))]
	//interface UIViewPrintFormatter
	//{
	//	// @property (readonly, nonatomic) UIView * _Nonnull view;
	//	[Export ("view")]
	//	UIView View { get; }
	//}

	//// @interface UIPrintFormatter (UIView)
	//[Category]
	//[BaseType (typeof(UIView))]
	//interface UIView_UIPrintFormatter
	//{
	//	// -(UIViewPrintFormatter * _Nonnull)viewPrintFormatter __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("viewPrintFormatter")]
	//	[Verify (MethodToProperty)]
	//	UIViewPrintFormatter ViewPrintFormatter { get; }

	//	// -(void)drawRect:(CGRect)rect forViewPrintFormatter:(UIViewPrintFormatter * _Nonnull)formatter __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("drawRect:forViewPrintFormatter:")]
	//	void DrawRect (CGRect rect, UIViewPrintFormatter formatter);
	//}

	//// @interface UIPrintInfo : NSObject <NSCopying, NSCoding>
	//[NoTV, iOS (4,2)]
	//[BaseType (typeof(NSObject))]
	//interface UIPrintInfo : INSCopying, INSCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// +(UIPrintInfo * _Nonnull)printInfo;
	//	[Static]
	//	[Export ("printInfo")]
	//	[Verify (MethodToProperty)]
	//	UIPrintInfo PrintInfo { get; }

	//	// +(UIPrintInfo * _Nonnull)printInfoWithDictionary:(NSDictionary * _Nullable)dictionary;
	//	[Static]
	//	[Export ("printInfoWithDictionary:")]
	//	UIPrintInfo PrintInfoWithDictionary ([NullAllowed] NSDictionary dictionary);

	//	// @property (copy, nonatomic) NSString * _Nullable printerID;
	//	[NullAllowed, Export ("printerID")]
	//	string PrinterID { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull jobName;
	//	[Export ("jobName")]
	//	string JobName { get; set; }

	//	// @property (nonatomic) UIPrintInfoOutputType outputType;
	//	[Export ("outputType", ArgumentSemantic.Assign)]
	//	UIPrintInfoOutputType OutputType { get; set; }

	//	// @property (nonatomic) UIPrintInfoOrientation orientation;
	//	[Export ("orientation", ArgumentSemantic.Assign)]
	//	UIPrintInfoOrientation Orientation { get; set; }

	//	// @property (nonatomic) UIPrintInfoDuplex duplex;
	//	[Export ("duplex", ArgumentSemantic.Assign)]
	//	UIPrintInfoDuplex Duplex { get; set; }

	//	// @property (readonly, nonatomic) NSDictionary * _Nonnull dictionaryRepresentation;
	//	[Export ("dictionaryRepresentation")]
	//	NSDictionary DictionaryRepresentation { get; }
	//}

	//// typedef void (^UIPrintInteractionCompletionHandler)(UIPrintInteractionController * _Nonnull, BOOL, NSError * _Nullable);
	//delegate void UIPrintInteractionCompletionHandler (UIPrintInteractionController arg0, bool arg1, [NullAllowed] NSError arg2);

	//// @interface UIPrintInteractionController : NSObject
	//[NoTV, iOS (4,2)]
	//[BaseType (typeof(NSObject))]
	//interface UIPrintInteractionController
	//{
	//	// @property (readonly, getter = isPrintingAvailable, nonatomic, class) BOOL printingAvailable;
	//	[Static]
	//	[Export ("printingAvailable")]
	//	bool PrintingAvailable { [Bind ("isPrintingAvailable")] get; }

	//	// @property (readonly, nonatomic, class) NSSet<NSString *> * _Nonnull printableUTIs;
	//	[Static]
	//	[Export ("printableUTIs")]
	//	NSSet<NSString> PrintableUTIs { get; }

	//	// +(BOOL)canPrintURL:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("canPrintURL:")]
	//	bool CanPrintURL (NSUrl url);

	//	// +(BOOL)canPrintData:(NSData * _Nonnull)data;
	//	[Static]
	//	[Export ("canPrintData:")]
	//	bool CanPrintData (NSData data);

	//	// @property (readonly, nonatomic, class) UIPrintInteractionController * _Nonnull sharedPrintController;
	//	[Static]
	//	[Export ("sharedPrintController")]
	//	UIPrintInteractionController SharedPrintController { get; }

	//	// @property (nonatomic, strong) UIPrintInfo * _Nullable printInfo;
	//	[NullAllowed, Export ("printInfo", ArgumentSemantic.Strong)]
	//	UIPrintInfo PrintInfo { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIPrintInteractionControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIPrintInteractionControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic) BOOL showsPageRange __attribute__((availability(ios, introduced=4.2, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 4, 2, message: "Pages can be removed from the print preview, so page range is always shown.")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Pages can be removed from the print preview, so page range is always shown.")]
	//	[Export ("showsPageRange")]
	//	bool ShowsPageRange { get; set; }

	//	// @property (nonatomic) BOOL showsNumberOfCopies __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("showsNumberOfCopies")]
	//	bool ShowsNumberOfCopies { get; set; }

	//	// @property (nonatomic) BOOL showsPaperSelectionForLoadedPapers __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("showsPaperSelectionForLoadedPapers")]
	//	bool ShowsPaperSelectionForLoadedPapers { get; set; }

	//	// @property (readonly, nonatomic) UIPrintPaper * _Nullable printPaper;
	//	[NullAllowed, Export ("printPaper")]
	//	UIPrintPaper PrintPaper { get; }

	//	// @property (nonatomic, strong) UIPrintPageRenderer * _Nullable printPageRenderer;
	//	[NullAllowed, Export ("printPageRenderer", ArgumentSemantic.Strong)]
	//	UIPrintPageRenderer PrintPageRenderer { get; set; }

	//	// @property (nonatomic, strong) UIPrintFormatter * _Nullable printFormatter;
	//	[NullAllowed, Export ("printFormatter", ArgumentSemantic.Strong)]
	//	UIPrintFormatter PrintFormatter { get; set; }

	//	// @property (copy, nonatomic) id _Nullable printingItem;
	//	[NullAllowed, Export ("printingItem", ArgumentSemantic.Copy)]
	//	NSObject PrintingItem { get; set; }

	//	// @property (copy, nonatomic) NSArray * _Nullable printingItems;
	//	[NullAllowed, Export ("printingItems", ArgumentSemantic.Copy)]
	//	[Verify (StronglyTypedNSArray)]
	//	NSObject[] PrintingItems { get; set; }

	//	// -(BOOL)presentAnimated:(BOOL)animated completionHandler:(UIPrintInteractionCompletionHandler _Nullable)completion;
	//	[Export ("presentAnimated:completionHandler:")]
	//	bool PresentAnimated (bool animated, [NullAllowed] UIPrintInteractionCompletionHandler completion);

	//	// -(BOOL)presentFromRect:(CGRect)rect inView:(UIView * _Nonnull)view animated:(BOOL)animated completionHandler:(UIPrintInteractionCompletionHandler _Nullable)completion;
	//	[Export ("presentFromRect:inView:animated:completionHandler:")]
	//	bool PresentFromRect (CGRect rect, UIView view, bool animated, [NullAllowed] UIPrintInteractionCompletionHandler completion);

	//	// -(BOOL)presentFromBarButtonItem:(UIBarButtonItem * _Nonnull)item animated:(BOOL)animated completionHandler:(UIPrintInteractionCompletionHandler _Nullable)completion;
	//	[Export ("presentFromBarButtonItem:animated:completionHandler:")]
	//	bool PresentFromBarButtonItem (UIBarButtonItem item, bool animated, [NullAllowed] UIPrintInteractionCompletionHandler completion);

	//	// -(BOOL)printToPrinter:(UIPrinter * _Nonnull)printer completionHandler:(UIPrintInteractionCompletionHandler _Nullable)completion;
	//	[Export ("printToPrinter:completionHandler:")]
	//	bool PrintToPrinter (UIPrinter printer, [NullAllowed] UIPrintInteractionCompletionHandler completion);

	//	// -(void)dismissAnimated:(BOOL)animated;
	//	[Export ("dismissAnimated:")]
	//	void DismissAnimated (bool animated);
	//}

	//// @protocol UIPrintInteractionControllerDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIPrintInteractionControllerDelegate
	//{
	//	// @optional -(UIViewController * _Nullable)printInteractionControllerParentViewController:(UIPrintInteractionController * _Nonnull)printInteractionController;
	//	[Export ("printInteractionControllerParentViewController:")]
	//	[return: NullAllowed]
	//	UIViewController PrintInteractionControllerParentViewController (UIPrintInteractionController printInteractionController);

	//	// @optional -(UIPrintPaper * _Nonnull)printInteractionController:(UIPrintInteractionController * _Nonnull)printInteractionController choosePaper:(NSArray<UIPrintPaper *> * _Nonnull)paperList;
	//	[Export ("printInteractionController:choosePaper:")]
	//	UIPrintPaper PrintInteractionController (UIPrintInteractionController printInteractionController, UIPrintPaper[] paperList);

	//	// @optional -(void)printInteractionControllerWillPresentPrinterOptions:(UIPrintInteractionController * _Nonnull)printInteractionController;
	//	[Export ("printInteractionControllerWillPresentPrinterOptions:")]
	//	void PrintInteractionControllerWillPresentPrinterOptions (UIPrintInteractionController printInteractionController);

	//	// @optional -(void)printInteractionControllerDidPresentPrinterOptions:(UIPrintInteractionController * _Nonnull)printInteractionController;
	//	[Export ("printInteractionControllerDidPresentPrinterOptions:")]
	//	void PrintInteractionControllerDidPresentPrinterOptions (UIPrintInteractionController printInteractionController);

	//	// @optional -(void)printInteractionControllerWillDismissPrinterOptions:(UIPrintInteractionController * _Nonnull)printInteractionController;
	//	[Export ("printInteractionControllerWillDismissPrinterOptions:")]
	//	void PrintInteractionControllerWillDismissPrinterOptions (UIPrintInteractionController printInteractionController);

	//	// @optional -(void)printInteractionControllerDidDismissPrinterOptions:(UIPrintInteractionController * _Nonnull)printInteractionController;
	//	[Export ("printInteractionControllerDidDismissPrinterOptions:")]
	//	void PrintInteractionControllerDidDismissPrinterOptions (UIPrintInteractionController printInteractionController);

	//	// @optional -(void)printInteractionControllerWillStartJob:(UIPrintInteractionController * _Nonnull)printInteractionController;
	//	[Export ("printInteractionControllerWillStartJob:")]
	//	void PrintInteractionControllerWillStartJob (UIPrintInteractionController printInteractionController);

	//	// @optional -(void)printInteractionControllerDidFinishJob:(UIPrintInteractionController * _Nonnull)printInteractionController;
	//	[Export ("printInteractionControllerDidFinishJob:")]
	//	void PrintInteractionControllerDidFinishJob (UIPrintInteractionController printInteractionController);

	//	// @optional -(CGFloat)printInteractionController:(UIPrintInteractionController * _Nonnull)printInteractionController cutLengthForPaper:(UIPrintPaper * _Nonnull)paper __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("printInteractionController:cutLengthForPaper:")]
	//	nfloat PrintInteractionController (UIPrintInteractionController printInteractionController, UIPrintPaper paper);

	//	// @optional -(UIPrinterCutterBehavior)printInteractionController:(UIPrintInteractionController * _Nonnull)printInteractionController chooseCutterBehavior:(NSArray * _Nonnull)availableBehaviors __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("printInteractionController:chooseCutterBehavior:")]
	//	[Verify (StronglyTypedNSArray)]
	//	UIPrinterCutterBehavior PrintInteractionController (UIPrintInteractionController printInteractionController, NSObject[] availableBehaviors);
	//}

	//// @interface UIPrintPageRenderer : NSObject
	//[NoTV, iOS (4,2)]
	//[BaseType (typeof(NSObject))]
	//interface UIPrintPageRenderer
	//{
	//	// @property (nonatomic) CGFloat headerHeight;
	//	[Export ("headerHeight")]
	//	nfloat HeaderHeight { get; set; }

	//	// @property (nonatomic) CGFloat footerHeight;
	//	[Export ("footerHeight")]
	//	nfloat FooterHeight { get; set; }

	//	// @property (readonly, nonatomic) CGRect paperRect;
	//	[Export ("paperRect")]
	//	CGRect PaperRect { get; }

	//	// @property (readonly, nonatomic) CGRect printableRect;
	//	[Export ("printableRect")]
	//	CGRect PrintableRect { get; }

	//	// @property (readonly, nonatomic) NSInteger numberOfPages;
	//	[Export ("numberOfPages")]
	//	nint NumberOfPages { get; }

	//	// @property (copy, nonatomic) NSArray<UIPrintFormatter *> * _Nullable printFormatters;
	//	[NullAllowed, Export ("printFormatters", ArgumentSemantic.Copy)]
	//	UIPrintFormatter[] PrintFormatters { get; set; }

	//	// -(NSArray<UIPrintFormatter *> * _Nullable)printFormattersForPageAtIndex:(NSInteger)pageIndex;
	//	[Export ("printFormattersForPageAtIndex:")]
	//	[return: NullAllowed]
	//	UIPrintFormatter[] PrintFormattersForPageAtIndex (nint pageIndex);

	//	// -(void)addPrintFormatter:(UIPrintFormatter * _Nonnull)formatter startingAtPageAtIndex:(NSInteger)pageIndex;
	//	[Export ("addPrintFormatter:startingAtPageAtIndex:")]
	//	void AddPrintFormatter (UIPrintFormatter formatter, nint pageIndex);

	//	// -(void)prepareForDrawingPages:(NSRange)range;
	//	[Export ("prepareForDrawingPages:")]
	//	void PrepareForDrawingPages (NSRange range);

	//	// -(void)drawPageAtIndex:(NSInteger)pageIndex inRect:(CGRect)printableRect;
	//	[Export ("drawPageAtIndex:inRect:")]
	//	void DrawPageAtIndex (nint pageIndex, CGRect printableRect);

	//	// -(void)drawPrintFormatter:(UIPrintFormatter * _Nonnull)printFormatter forPageAtIndex:(NSInteger)pageIndex;
	//	[Export ("drawPrintFormatter:forPageAtIndex:")]
	//	void DrawPrintFormatter (UIPrintFormatter printFormatter, nint pageIndex);

	//	// -(void)drawHeaderForPageAtIndex:(NSInteger)pageIndex inRect:(CGRect)headerRect;
	//	[Export ("drawHeaderForPageAtIndex:inRect:")]
	//	void DrawHeaderForPageAtIndex (nint pageIndex, CGRect headerRect);

	//	// -(void)drawContentForPageAtIndex:(NSInteger)pageIndex inRect:(CGRect)contentRect;
	//	[Export ("drawContentForPageAtIndex:inRect:")]
	//	void DrawContentForPageAtIndex (nint pageIndex, CGRect contentRect);

	//	// -(void)drawFooterForPageAtIndex:(NSInteger)pageIndex inRect:(CGRect)footerRect;
	//	[Export ("drawFooterForPageAtIndex:inRect:")]
	//	void DrawFooterForPageAtIndex (nint pageIndex, CGRect footerRect);
	//}

	//// @interface UIPrintPaper : NSObject
	//[NoTV, iOS (4,2)]
	//[BaseType (typeof(NSObject))]
	//interface UIPrintPaper
	//{
	//	// +(UIPrintPaper * _Nonnull)bestPaperForPageSize:(CGSize)contentSize withPapersFromArray:(NSArray<UIPrintPaper *> * _Nonnull)paperList;
	//	[Static]
	//	[Export ("bestPaperForPageSize:withPapersFromArray:")]
	//	UIPrintPaper BestPaperForPageSize (CGSize contentSize, UIPrintPaper[] paperList);

	//	// @property (readonly) CGSize paperSize;
	//	[Export ("paperSize")]
	//	CGSize PaperSize { get; }

	//	// @property (readonly) CGRect printableRect;
	//	[Export ("printableRect")]
	//	CGRect PrintableRect { get; }
	//}

	//// @interface Deprecated_Nonfunctional (UIPrintPaper)
	//[Category]
	//[BaseType (typeof(UIPrintPaper))]
	//interface UIPrintPaper_Deprecated_Nonfunctional
	//{
	//	// -(CGRect)printRect __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("printRect")]
	//	[Verify (MethodToProperty)]
	//	CGRect PrintRect { get; }
	//}

	//// @interface UIProgressView : UIView <NSCoding>
	//[iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UIProgressView : INSCoding
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(instancetype _Nonnull)initWithProgressViewStyle:(UIProgressViewStyle)style;
	//	[Export ("initWithProgressViewStyle:")]
	//	IntPtr Constructor (UIProgressViewStyle style);

	//	// @property (nonatomic) UIProgressViewStyle progressViewStyle;
	//	[Export ("progressViewStyle", ArgumentSemantic.Assign)]
	//	UIProgressViewStyle ProgressViewStyle { get; set; }

	//	// @property (nonatomic) float progress;
	//	[Export ("progress")]
	//	float Progress { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable progressTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("progressTintColor", ArgumentSemantic.Strong)]
	//	UIColor ProgressTintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable trackTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("trackTintColor", ArgumentSemantic.Strong)]
	//	UIColor TrackTintColor { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable progressImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("progressImage", ArgumentSemantic.Strong)]
	//	UIImage ProgressImage { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable trackImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("trackImage", ArgumentSemantic.Strong)]
	//	UIImage TrackImage { get; set; }

	//	// -(void)setProgress:(float)progress animated:(BOOL)animated __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setProgress:animated:")]
	//	void SetProgress (float progress, bool animated);

	//	// @property (nonatomic, strong) NSProgress * _Nullable observedProgress __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("observedProgress", ArgumentSemantic.Strong)]
	//	NSProgress ObservedProgress { get; set; }
	//}

	//// @interface UIReferenceLibraryViewController : UIViewController
	//[NoTV, iOS (5,0)]
	//[BaseType (typeof(UIViewController))]
	//[DisableDefaultCtor]
	//interface UIReferenceLibraryViewController
	//{
	//	// +(BOOL)dictionaryHasDefinitionForTerm:(NSString * _Nonnull)term;
	//	[Static]
	//	[Export ("dictionaryHasDefinitionForTerm:")]
	//	bool DictionaryHasDefinitionForTerm (string term);

	//	// -(instancetype _Nonnull)initWithTerm:(NSString * _Nonnull)term __attribute__((objc_designated_initializer));
	//	[Export ("initWithTerm:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string term);

	//	// -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface UIRotationGestureRecognizer : UIGestureRecognizer
	//[NoTV, iOS (3,2)]
	//[BaseType (typeof(UIGestureRecognizer))]
	//interface UIRotationGestureRecognizer
	//{
	//	// @property (nonatomic) CGFloat rotation;
	//	[Export ("rotation")]
	//	nfloat Rotation { get; set; }

	//	// @property (readonly, nonatomic) CGFloat velocity;
	//	[Export ("velocity")]
	//	nfloat Velocity { get; }
	//}

	//// @interface UIScreen : NSObject <UITraitEnvironment>
	//[iOS (2,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIScreen : IUITraitEnvironment
	//{
	//	// @property (readonly, nonatomic, class) NSArray<UIScreen *> * _Nonnull screens __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[Static]
	//	[Export ("screens")]
	//	UIScreen[] Screens { get; }

	//	// @property (readonly, nonatomic, class) UIScreen * _Nonnull mainScreen;
	//	[Static]
	//	[Export ("mainScreen")]
	//	UIScreen MainScreen { get; }

	//	// @property (readonly, nonatomic) CGRect bounds;
	//	[Export ("bounds")]
	//	CGRect Bounds { get; }

	//	// @property (readonly, nonatomic) CGFloat scale __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("scale")]
	//	nfloat Scale { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<UIScreenMode *> * _Nonnull availableModes __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.2)));
	//	[NoTV, iOS (3, 2)]
	//	[Export ("availableModes", ArgumentSemantic.Copy)]
	//	UIScreenMode[] AvailableModes { get; }

	//	// @property (readonly, nonatomic, strong) UIScreenMode * _Nullable preferredMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4.3)));
	//	[NoTV, iOS (4, 3)]
	//	[NullAllowed, Export ("preferredMode", ArgumentSemantic.Strong)]
	//	UIScreenMode PreferredMode { get; }

	//	// @property (nonatomic, strong) UIScreenMode * _Nullable currentMode __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[NullAllowed, Export ("currentMode", ArgumentSemantic.Strong)]
	//	UIScreenMode CurrentMode { get; set; }

	//	// @property (nonatomic) UIScreenOverscanCompensation overscanCompensation __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("overscanCompensation", ArgumentSemantic.Assign)]
	//	UIScreenOverscanCompensation OverscanCompensation { get; set; }

	//	// @property (readonly, nonatomic) UIEdgeInsets overscanCompensationInsets __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("overscanCompensationInsets")]
	//	UIEdgeInsets OverscanCompensationInsets { get; }

	//	// @property (readonly, nonatomic, strong) UIScreen * _Nullable mirroredScreen __attribute__((availability(ios, introduced=4.3)));
	//	[iOS (4, 3)]
	//	[NullAllowed, Export ("mirroredScreen", ArgumentSemantic.Strong)]
	//	UIScreen MirroredScreen { get; }

	//	// @property (readonly, getter = isCaptured, nonatomic) BOOL captured __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("captured")]
	//	bool Captured { [Bind ("isCaptured")] get; }

	//	// @property (nonatomic) CGFloat brightness __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5, 0)]
	//	[Export ("brightness")]
	//	nfloat Brightness { get; set; }

	//	// @property (nonatomic) BOOL wantsSoftwareDimming __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0)));
	//	[NoTV, iOS (5, 0)]
	//	[Export ("wantsSoftwareDimming")]
	//	bool WantsSoftwareDimming { get; set; }

	//	// @property (readonly) id<UICoordinateSpace> _Nonnull coordinateSpace __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("coordinateSpace")]
	//	UICoordinateSpace CoordinateSpace { get; }

	//	// @property (readonly) id<UICoordinateSpace> _Nonnull fixedCoordinateSpace __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("fixedCoordinateSpace")]
	//	UICoordinateSpace FixedCoordinateSpace { get; }

	//	// @property (readonly, nonatomic) CGRect nativeBounds __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("nativeBounds")]
	//	CGRect NativeBounds { get; }

	//	// @property (readonly, nonatomic) CGFloat nativeScale __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("nativeScale")]
	//	nfloat NativeScale { get; }

	//	// -(CADisplayLink * _Nullable)displayLinkWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)sel __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4,0)]
	//	[Export ("displayLinkWithTarget:selector:")]
	//	[return: NullAllowed]
	//	CADisplayLink DisplayLinkWithTarget (NSObject target, Selector sel);

	//	// @property (readonly) NSInteger maximumFramesPerSecond __attribute__((availability(ios, introduced=10.3)));
	//	[iOS (10, 3)]
	//	[Export ("maximumFramesPerSecond")]
	//	nint MaximumFramesPerSecond { get; }

	//	// @property (readonly, nonatomic, weak) id<UIFocusItem> _Nullable focusedItem __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("focusedItem", ArgumentSemantic.Weak)]
	//	UIFocusItem FocusedItem { get; }

	//	// @property (readonly, nonatomic, weak) UIView * _Nullable focusedView __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[NullAllowed, Export ("focusedView", ArgumentSemantic.Weak)]
	//	UIView FocusedView { get; }

	//	// @property (readonly, nonatomic) BOOL supportsFocus __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("supportsFocus")]
	//	bool SupportsFocus { get; }

	//	// @property (readonly, nonatomic) CGRect applicationFrame __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use -[UIScreen bounds]")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use -[UIScreen bounds]")]
	//	[NoTV]
	//	[Export ("applicationFrame")]
	//	CGRect ApplicationFrame { get; }
	//}

	//// @interface UISnapshotting (UIScreen)
	//[Category]
	//[BaseType (typeof(UIScreen))]
	//interface UIScreen_UISnapshotting
	//{
	//	// -(UIView * _Nonnull)snapshotViewAfterScreenUpdates:(BOOL)afterUpdates __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("snapshotViewAfterScreenUpdates:")]
	//	UIView SnapshotViewAfterScreenUpdates (bool afterUpdates);
	//}

	//// @interface UIScreenEdgePanGestureRecognizer : UIPanGestureRecognizer
	//[NoTV, iOS (7,0)]
	//[BaseType (typeof(UIPanGestureRecognizer))]
	//interface UIScreenEdgePanGestureRecognizer
	//{
	//	// @property (assign, readwrite, nonatomic) UIRectEdge edges;
	//	[Export ("edges", ArgumentSemantic.Assign)]
	//	UIRectEdge Edges { get; set; }
	//}

	//// @interface UIScreenMode : NSObject
	//[iOS (3,2)]
	//[BaseType (typeof(NSObject))]
	//interface UIScreenMode
	//{
	//	// @property (readonly, nonatomic) CGSize size;
	//	[Export ("size")]
	//	CGSize Size { get; }

	//	// @property (readonly, nonatomic) CGFloat pixelAspectRatio;
	//	[Export ("pixelAspectRatio")]
	//	nfloat PixelAspectRatio { get; }
	//}

	//// @interface UISearchBar : UIView <UIBarPositioning, UITextInputTraits>
	//[iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//[DisableDefaultCtor]
	//interface UISearchBar : IUIBarPositioning, IUITextInputTraits
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((availability(tvos, unavailable))) __attribute__((objc_designated_initializer));
	//	[NoTV]
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(tvos, unavailable))) __attribute__((objc_designated_initializer));
	//	[NoTV]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (nonatomic) UIBarStyle barStyle __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("barStyle", ArgumentSemantic.Assign)]
	//	UIBarStyle BarStyle { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UISearchBarDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UISearchBarDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable text;
	//	[NullAllowed, Export ("text")]
	//	string Text { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable prompt;
	//	[NullAllowed, Export ("prompt")]
	//	string Prompt { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable placeholder;
	//	[NullAllowed, Export ("placeholder")]
	//	string Placeholder { get; set; }

	//	// @property (nonatomic) BOOL showsBookmarkButton __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("showsBookmarkButton")]
	//	bool ShowsBookmarkButton { get; set; }

	//	// @property (nonatomic) BOOL showsCancelButton __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("showsCancelButton")]
	//	bool ShowsCancelButton { get; set; }

	//	// @property (nonatomic) BOOL showsSearchResultsButton __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.2)));
	//	[NoTV, iOS (3, 2)]
	//	[Export ("showsSearchResultsButton")]
	//	bool ShowsSearchResultsButton { get; set; }

	//	// @property (getter = isSearchResultsButtonSelected, nonatomic) BOOL searchResultsButtonSelected __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.2)));
	//	[NoTV, iOS (3, 2)]
	//	[Export ("searchResultsButtonSelected")]
	//	bool SearchResultsButtonSelected { [Bind ("isSearchResultsButtonSelected")] get; set; }

	//	// -(void)setShowsCancelButton:(BOOL)showsCancelButton animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3,0)]
	//	[Export ("setShowsCancelButton:animated:")]
	//	void SetShowsCancelButton (bool showsCancelButton, bool animated);

	//	// @property (readonly, nonatomic, strong) UITextInputAssistantItem * _Nonnull inputAssistantItem __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9.0)));
	//	[NoWatch, NoTV, iOS (9, 0)]
	//	[Export ("inputAssistantItem", ArgumentSemantic.Strong)]
	//	UITextInputAssistantItem InputAssistantItem { get; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable barTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("barTintColor", ArgumentSemantic.Strong)]
	//	UIColor BarTintColor { get; set; }

	//	// @property (nonatomic) UISearchBarStyle searchBarStyle __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("searchBarStyle", ArgumentSemantic.Assign)]
	//	UISearchBarStyle SearchBarStyle { get; set; }

	//	// @property (getter = isTranslucent, assign, nonatomic) BOOL translucent __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("translucent")]
	//	bool Translucent { [Bind ("isTranslucent")] get; set; }

	//	// @property (copy, nonatomic) NSArray<NSString *> * _Nullable scopeButtonTitles __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[NullAllowed, Export ("scopeButtonTitles", ArgumentSemantic.Copy)]
	//	string[] ScopeButtonTitles { get; set; }

	//	// @property (nonatomic) NSInteger selectedScopeButtonIndex __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("selectedScopeButtonIndex")]
	//	nint SelectedScopeButtonIndex { get; set; }

	//	// @property (nonatomic) BOOL showsScopeBar __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("showsScopeBar")]
	//	bool ShowsScopeBar { get; set; }

	//	// @property (readwrite, nonatomic, strong) UIView * _Nullable inputAccessoryView;
	//	[NullAllowed, Export ("inputAccessoryView", ArgumentSemantic.Strong)]
	//	UIView InputAccessoryView { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable backgroundImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("backgroundImage", ArgumentSemantic.Strong)]
	//	UIImage BackgroundImage { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable scopeBarBackgroundImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("scopeBarBackgroundImage", ArgumentSemantic.Strong)]
	//	UIImage ScopeBarBackgroundImage { get; set; }

	//	// -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("setBackgroundImage:forBarPosition:barMetrics:")]
	//	void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIBarPosition barPosition, UIBarMetrics barMetrics);

	//	// -(UIImage * _Nullable)backgroundImageForBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("backgroundImageForBarPosition:barMetrics:")]
	//	[return: NullAllowed]
	//	UIImage BackgroundImageForBarPosition (UIBarPosition barPosition, UIBarMetrics barMetrics);

	//	// -(void)setSearchFieldBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setSearchFieldBackgroundImage:forState:")]
	//	void SetSearchFieldBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState state);

	//	// -(UIImage * _Nullable)searchFieldBackgroundImageForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("searchFieldBackgroundImageForState:")]
	//	[return: NullAllowed]
	//	UIImage SearchFieldBackgroundImageForState (UIControlState state);

	//	// -(void)setImage:(UIImage * _Nullable)iconImage forSearchBarIcon:(UISearchBarIcon)icon state:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setImage:forSearchBarIcon:state:")]
	//	void SetImage ([NullAllowed] UIImage iconImage, UISearchBarIcon icon, UIControlState state);

	//	// -(UIImage * _Nullable)imageForSearchBarIcon:(UISearchBarIcon)icon state:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("imageForSearchBarIcon:state:")]
	//	[return: NullAllowed]
	//	UIImage ImageForSearchBarIcon (UISearchBarIcon icon, UIControlState state);

	//	// -(void)setScopeBarButtonBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setScopeBarButtonBackgroundImage:forState:")]
	//	void SetScopeBarButtonBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState state);

	//	// -(UIImage * _Nullable)scopeBarButtonBackgroundImageForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("scopeBarButtonBackgroundImageForState:")]
	//	[return: NullAllowed]
	//	UIImage ScopeBarButtonBackgroundImageForState (UIControlState state);

	//	// -(void)setScopeBarButtonDividerImage:(UIImage * _Nullable)dividerImage forLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setScopeBarButtonDividerImage:forLeftSegmentState:rightSegmentState:")]
	//	void SetScopeBarButtonDividerImage ([NullAllowed] UIImage dividerImage, UIControlState leftState, UIControlState rightState);

	//	// -(UIImage * _Nullable)scopeBarButtonDividerImageForLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("scopeBarButtonDividerImageForLeftSegmentState:rightSegmentState:")]
	//	[return: NullAllowed]
	//	UIImage ScopeBarButtonDividerImageForLeftSegmentState (UIControlState leftState, UIControlState rightState);

	//	// -(void)setScopeBarButtonTitleTextAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attributes forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setScopeBarButtonTitleTextAttributes:forState:")]
	//	void SetScopeBarButtonTitleTextAttributes ([NullAllowed] NSDictionary<NSString, NSObject> attributes, UIControlState state);

	//	// -(NSDictionary<NSAttributedStringKey,id> * _Nullable)scopeBarButtonTitleTextAttributesForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("scopeBarButtonTitleTextAttributesForState:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> ScopeBarButtonTitleTextAttributesForState (UIControlState state);

	//	// @property (nonatomic) UIOffset searchFieldBackgroundPositionAdjustment __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("searchFieldBackgroundPositionAdjustment", ArgumentSemantic.Assign)]
	//	UIOffset SearchFieldBackgroundPositionAdjustment { get; set; }

	//	// @property (nonatomic) UIOffset searchTextPositionAdjustment __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("searchTextPositionAdjustment", ArgumentSemantic.Assign)]
	//	UIOffset SearchTextPositionAdjustment { get; set; }

	//	// -(void)setPositionAdjustment:(UIOffset)adjustment forSearchBarIcon:(UISearchBarIcon)icon __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setPositionAdjustment:forSearchBarIcon:")]
	//	void SetPositionAdjustment (UIOffset adjustment, UISearchBarIcon icon);

	//	// -(UIOffset)positionAdjustmentForSearchBarIcon:(UISearchBarIcon)icon __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("positionAdjustmentForSearchBarIcon:")]
	//	UIOffset PositionAdjustmentForSearchBarIcon (UISearchBarIcon icon);
	//}

	//// @protocol UISearchBarDelegate <UIBarPositioningDelegate>
	//[Protocol, Model]
	//interface UISearchBarDelegate : IUIBarPositioningDelegate
	//{
	//	// @optional -(BOOL)searchBarShouldBeginEditing:(UISearchBar * _Nonnull)searchBar;
	//	[Export ("searchBarShouldBeginEditing:")]
	//	bool SearchBarShouldBeginEditing (UISearchBar searchBar);

	//	// @optional -(void)searchBarTextDidBeginEditing:(UISearchBar * _Nonnull)searchBar;
	//	[Export ("searchBarTextDidBeginEditing:")]
	//	void SearchBarTextDidBeginEditing (UISearchBar searchBar);

	//	// @optional -(BOOL)searchBarShouldEndEditing:(UISearchBar * _Nonnull)searchBar;
	//	[Export ("searchBarShouldEndEditing:")]
	//	bool SearchBarShouldEndEditing (UISearchBar searchBar);

	//	// @optional -(void)searchBarTextDidEndEditing:(UISearchBar * _Nonnull)searchBar;
	//	[Export ("searchBarTextDidEndEditing:")]
	//	void SearchBarTextDidEndEditing (UISearchBar searchBar);

	//	// @optional -(void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
	//	[Export ("searchBar:textDidChange:")]
	//	void SearchBar (UISearchBar searchBar, string searchText);

	//	// @optional -(BOOL)searchBar:(UISearchBar * _Nonnull)searchBar shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("searchBar:shouldChangeTextInRange:replacementText:")]
	//	bool SearchBar (UISearchBar searchBar, NSRange range, string text);

	//	// @optional -(void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
	//	[Export ("searchBarSearchButtonClicked:")]
	//	void SearchBarSearchButtonClicked (UISearchBar searchBar);

	//	// @optional -(void)searchBarBookmarkButtonClicked:(UISearchBar * _Nonnull)searchBar __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("searchBarBookmarkButtonClicked:")]
	//	void SearchBarBookmarkButtonClicked (UISearchBar searchBar);

	//	// @optional -(void)searchBarCancelButtonClicked:(UISearchBar * _Nonnull)searchBar __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("searchBarCancelButtonClicked:")]
	//	void SearchBarCancelButtonClicked (UISearchBar searchBar);

	//	// @optional -(void)searchBarResultsListButtonClicked:(UISearchBar * _Nonnull)searchBar __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.2)));
	//	[NoTV, iOS (3,2)]
	//	[Export ("searchBarResultsListButtonClicked:")]
	//	void SearchBarResultsListButtonClicked (UISearchBar searchBar);

	//	// @optional -(void)searchBar:(UISearchBar * _Nonnull)searchBar selectedScopeButtonIndexDidChange:(NSInteger)selectedScope __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("searchBar:selectedScopeButtonIndexDidChange:")]
	//	void SearchBar (UISearchBar searchBar, nint selectedScope);
	//}

	//// @interface UISearchContainerViewController : UIViewController
	//[TV (9,0), NoWatch, iOS (9,1)]
	//[BaseType (typeof(UIViewController))]
	//interface UISearchContainerViewController
	//{
	//	// @property (readonly, nonatomic, strong) UISearchController * _Nonnull searchController;
	//	[Export ("searchController", ArgumentSemantic.Strong)]
	//	UISearchController SearchController { get; }

	//	// -(instancetype _Nonnull)initWithSearchController:(UISearchController * _Nonnull)searchController;
	//	[Export ("initWithSearchController:")]
	//	IntPtr Constructor (UISearchController searchController);
	//}

	//// @protocol UIViewControllerTransitionCoordinatorContext <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIViewControllerTransitionCoordinatorContext
	//{
	//	// @required @property (readonly, getter = isAnimated, nonatomic) BOOL animated;
	//	[Abstract]
	//	[Export ("animated")]
	//	bool Animated { [Bind ("isAnimated")] get; }

	//	// @required @property (readonly, nonatomic) UIModalPresentationStyle presentationStyle;
	//	[Abstract]
	//	[Export ("presentationStyle")]
	//	UIModalPresentationStyle PresentationStyle { get; }

	//	// @required @property (readonly, nonatomic) BOOL initiallyInteractive;
	//	[Abstract]
	//	[Export ("initiallyInteractive")]
	//	bool InitiallyInteractive { get; }

	//	// @required @property (readonly, nonatomic) BOOL isInterruptible __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Abstract]
	//	[Export ("isInterruptible")]
	//	bool IsInterruptible { get; }

	//	// @required @property (readonly, getter = isInteractive, nonatomic) BOOL interactive;
	//	[Abstract]
	//	[Export ("interactive")]
	//	bool Interactive { [Bind ("isInteractive")] get; }

	//	// @required @property (readonly, getter = isCancelled, nonatomic) BOOL cancelled;
	//	[Abstract]
	//	[Export ("cancelled")]
	//	bool Cancelled { [Bind ("isCancelled")] get; }

	//	// @required @property (readonly, nonatomic) NSTimeInterval transitionDuration;
	//	[Abstract]
	//	[Export ("transitionDuration")]
	//	double TransitionDuration { get; }

	//	// @required @property (readonly, nonatomic) CGFloat percentComplete;
	//	[Abstract]
	//	[Export ("percentComplete")]
	//	nfloat PercentComplete { get; }

	//	// @required @property (readonly, nonatomic) CGFloat completionVelocity;
	//	[Abstract]
	//	[Export ("completionVelocity")]
	//	nfloat CompletionVelocity { get; }

	//	// @required @property (readonly, nonatomic) UIViewAnimationCurve completionCurve;
	//	[Abstract]
	//	[Export ("completionCurve")]
	//	UIViewAnimationCurve CompletionCurve { get; }

	//	// @required -(__kindof UIViewController * _Nullable)viewControllerForKey:(UITransitionContextViewControllerKey _Nonnull)key;
	//	[Abstract]
	//	[Export ("viewControllerForKey:")]
	//	UIViewController ViewControllerForKey (string key);

	//	// @required -(__kindof UIView * _Nullable)viewForKey:(UITransitionContextViewKey _Nonnull)key __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("viewForKey:")]
	//	UIView ViewForKey (string key);

	//	// @required @property (readonly, nonatomic) UIView * _Nonnull containerView;
	//	[Abstract]
	//	[Export ("containerView")]
	//	UIView ContainerView { get; }

	//	// @required @property (readonly, nonatomic) CGAffineTransform targetTransform __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Abstract]
	//	[Export ("targetTransform")]
	//	CGAffineTransform TargetTransform { get; }
	//}

	//// @protocol UIViewControllerTransitionCoordinator <UIViewControllerTransitionCoordinatorContext>
	//[Protocol, Model]
	//interface UIViewControllerTransitionCoordinator : IUIViewControllerTransitionCoordinatorContext
	//{
	//	// @required -(BOOL)animateAlongsideTransition:(void (^ _Nullable)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))animation completion:(void (^ _Nullable)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))completion;
	//	[Abstract]
	//	[Export ("animateAlongsideTransition:completion:")]
	//	bool AnimateAlongsideTransition ([NullAllowed] Action<UIViewControllerTransitionCoordinatorContext> animation, [NullAllowed] Action<UIViewControllerTransitionCoordinatorContext> completion);

	//	// @required -(BOOL)animateAlongsideTransitionInView:(UIView * _Nullable)view animation:(void (^ _Nullable)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))animation completion:(void (^ _Nullable)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))completion;
	//	[Abstract]
	//	[Export ("animateAlongsideTransitionInView:animation:completion:")]
	//	bool AnimateAlongsideTransitionInView ([NullAllowed] UIView view, [NullAllowed] Action<UIViewControllerTransitionCoordinatorContext> animation, [NullAllowed] Action<UIViewControllerTransitionCoordinatorContext> completion);

	//	// @required -(void)notifyWhenInteractionEndsUsingBlock:(void (^ _Nonnull)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))handler __attribute__((availability(ios, introduced=7.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 7, 0, message: "Use notifyWhenInteractionChangesUsingBlock")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use notifyWhenInteractionChangesUsingBlock")]
	//	[Abstract]
	//	[Export ("notifyWhenInteractionEndsUsingBlock:")]
	//	void NotifyWhenInteractionEndsUsingBlock (Action<UIViewControllerTransitionCoordinatorContext> handler);

	//	// @required -(void)notifyWhenInteractionChangesUsingBlock:(void (^ _Nonnull)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))handler __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Abstract]
	//	[Export ("notifyWhenInteractionChangesUsingBlock:")]
	//	void NotifyWhenInteractionChangesUsingBlock (Action<UIViewControllerTransitionCoordinatorContext> handler);
	//}

	//// @interface UIViewControllerTransitionCoordinator (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UIViewControllerTransitionCoordinator
	//{
	//	// @property (readonly, nonatomic) id<UIViewControllerTransitionCoordinator> _Nullable transitionCoordinator __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("transitionCoordinator")]
	//	UIViewControllerTransitionCoordinator TransitionCoordinator { get; }
	//}

	//// @protocol UIAdaptivePresentationControllerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIAdaptivePresentationControllerDelegate
	//{
	//	// @optional -(UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController * _Nonnull)controller;
	//	[Export ("adaptivePresentationStyleForPresentationController:")]
	//	UIModalPresentationStyle AdaptivePresentationStyleForPresentationController (UIPresentationController controller);

	//	// @optional -(UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController * _Nonnull)controller traitCollection:(UITraitCollection * _Nonnull)traitCollection __attribute__((availability(ios, introduced=8.3)));
	//	[iOS (8,3)]
	//	[Export ("adaptivePresentationStyleForPresentationController:traitCollection:")]
	//	UIModalPresentationStyle AdaptivePresentationStyleForPresentationController (UIPresentationController controller, UITraitCollection traitCollection);

	//	// @optional -(UIViewController * _Nullable)presentationController:(UIPresentationController * _Nonnull)controller viewControllerForAdaptivePresentationStyle:(UIModalPresentationStyle)style;
	//	[Export ("presentationController:viewControllerForAdaptivePresentationStyle:")]
	//	[return: NullAllowed]
	//	UIViewController PresentationController (UIPresentationController controller, UIModalPresentationStyle style);

	//	// @optional -(void)presentationController:(UIPresentationController * _Nonnull)presentationController willPresentWithAdaptiveStyle:(UIModalPresentationStyle)style transitionCoordinator:(id<UIViewControllerTransitionCoordinator> _Nullable)transitionCoordinator __attribute__((availability(ios, introduced=8.3)));
	//	[iOS (8,3)]
	//	[Export ("presentationController:willPresentWithAdaptiveStyle:transitionCoordinator:")]
	//	void PresentationController (UIPresentationController presentationController, UIModalPresentationStyle style, [NullAllowed] UIViewControllerTransitionCoordinator transitionCoordinator);
	//}

	//// @interface UIPresentationController : NSObject <UIAppearanceContainer, UITraitEnvironment, UIContentContainer, UIFocusEnvironment>
	//[iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIPresentationController : IUIAppearanceContainer, IUITraitEnvironment, IUIContentContainer, IUIFocusEnvironment
	//{
	//	// @property (readonly, nonatomic, strong) UIViewController * _Nonnull presentingViewController;
	//	[Export ("presentingViewController", ArgumentSemantic.Strong)]
	//	UIViewController PresentingViewController { get; }

	//	// @property (readonly, nonatomic, strong) UIViewController * _Nonnull presentedViewController;
	//	[Export ("presentedViewController", ArgumentSemantic.Strong)]
	//	UIViewController PresentedViewController { get; }

	//	// @property (readonly, nonatomic) UIModalPresentationStyle presentationStyle;
	//	[Export ("presentationStyle")]
	//	UIModalPresentationStyle PresentationStyle { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nullable containerView;
	//	[NullAllowed, Export ("containerView", ArgumentSemantic.Strong)]
	//	UIView ContainerView { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIAdaptivePresentationControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIAdaptivePresentationControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(instancetype _Nonnull)initWithPresentedViewController:(UIViewController * _Nonnull)presentedViewController presentingViewController:(UIViewController * _Nullable)presentingViewController __attribute__((objc_designated_initializer));
	//	[Export ("initWithPresentedViewController:presentingViewController:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIViewController presentedViewController, [NullAllowed] UIViewController presentingViewController);

	//	// @property (readonly, nonatomic) UIModalPresentationStyle adaptivePresentationStyle;
	//	[Export ("adaptivePresentationStyle")]
	//	UIModalPresentationStyle AdaptivePresentationStyle { get; }

	//	// -(UIModalPresentationStyle)adaptivePresentationStyleForTraitCollection:(UITraitCollection * _Nonnull)traitCollection __attribute__((availability(ios, introduced=8.3)));
	//	[iOS (8,3)]
	//	[Export ("adaptivePresentationStyleForTraitCollection:")]
	//	UIModalPresentationStyle AdaptivePresentationStyleForTraitCollection (UITraitCollection traitCollection);

	//	// -(void)containerViewWillLayoutSubviews;
	//	[Export ("containerViewWillLayoutSubviews")]
	//	void ContainerViewWillLayoutSubviews ();

	//	// -(void)containerViewDidLayoutSubviews;
	//	[Export ("containerViewDidLayoutSubviews")]
	//	void ContainerViewDidLayoutSubviews ();

	//	// @property (readonly, nonatomic) UIView * _Nullable presentedView;
	//	[NullAllowed, Export ("presentedView")]
	//	UIView PresentedView { get; }

	//	// @property (readonly, nonatomic) CGRect frameOfPresentedViewInContainerView;
	//	[Export ("frameOfPresentedViewInContainerView")]
	//	CGRect FrameOfPresentedViewInContainerView { get; }

	//	// @property (readonly, nonatomic) BOOL shouldPresentInFullscreen;
	//	[Export ("shouldPresentInFullscreen")]
	//	bool ShouldPresentInFullscreen { get; }

	//	// @property (readonly, nonatomic) BOOL shouldRemovePresentersView;
	//	[Export ("shouldRemovePresentersView")]
	//	bool ShouldRemovePresentersView { get; }

	//	// -(void)presentationTransitionWillBegin;
	//	[Export ("presentationTransitionWillBegin")]
	//	void PresentationTransitionWillBegin ();

	//	// -(void)presentationTransitionDidEnd:(BOOL)completed;
	//	[Export ("presentationTransitionDidEnd:")]
	//	void PresentationTransitionDidEnd (bool completed);

	//	// -(void)dismissalTransitionWillBegin;
	//	[Export ("dismissalTransitionWillBegin")]
	//	void DismissalTransitionWillBegin ();

	//	// -(void)dismissalTransitionDidEnd:(BOOL)completed;
	//	[Export ("dismissalTransitionDidEnd:")]
	//	void DismissalTransitionDidEnd (bool completed);

	//	// @property (copy, nonatomic) UITraitCollection * _Nullable overrideTraitCollection;
	//	[NullAllowed, Export ("overrideTraitCollection", ArgumentSemantic.Copy)]
	//	UITraitCollection OverrideTraitCollection { get; set; }
	//}

	//// @protocol UITimingCurveProvider <NSCoding, NSCopying>
	//[Protocol, Model]
	//interface UITimingCurveProvider : INSCoding, INSCopying
	//{
	//	// @required @property (readonly, nonatomic) UITimingCurveType timingCurveType;
	//	[Abstract]
	//	[Export ("timingCurveType")]
	//	UITimingCurveType TimingCurveType { get; }

	//	// @required @property (readonly, nonatomic) UICubicTimingParameters * _Nullable cubicTimingParameters;
	//	[Abstract]
	//	[NullAllowed, Export ("cubicTimingParameters")]
	//	UICubicTimingParameters CubicTimingParameters { get; }

	//	// @required @property (readonly, nonatomic) UISpringTimingParameters * _Nullable springTimingParameters;
	//	[Abstract]
	//	[NullAllowed, Export ("springTimingParameters")]
	//	UISpringTimingParameters SpringTimingParameters { get; }
	//}

	//// @interface UICubicTimingParameters : NSObject <UITimingCurveProvider>
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface UICubicTimingParameters : IUITimingCurveProvider
	//{
	//	// @property (readonly, nonatomic) UIViewAnimationCurve animationCurve;
	//	[Export ("animationCurve")]
	//	UIViewAnimationCurve AnimationCurve { get; }

	//	// @property (readonly, nonatomic) CGPoint controlPoint1;
	//	[Export ("controlPoint1")]
	//	CGPoint ControlPoint1 { get; }

	//	// @property (readonly, nonatomic) CGPoint controlPoint2;
	//	[Export ("controlPoint2")]
	//	CGPoint ControlPoint2 { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(instancetype _Nonnull)initWithAnimationCurve:(UIViewAnimationCurve)curve __attribute__((objc_designated_initializer));
	//	[Export ("initWithAnimationCurve:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIViewAnimationCurve curve);

	//	// -(instancetype _Nonnull)initWithControlPoint1:(CGPoint)point1 controlPoint2:(CGPoint)point2 __attribute__((objc_designated_initializer));
	//	[Export ("initWithControlPoint1:controlPoint2:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGPoint point1, CGPoint point2);
	//}

	//// @interface UISpringTimingParameters : NSObject <UITimingCurveProvider>
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface UISpringTimingParameters : IUITimingCurveProvider
	//{
	//	// @property (readonly, nonatomic) CGVector initialVelocity;
	//	[Export ("initialVelocity")]
	//	CGVector InitialVelocity { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(instancetype _Nonnull)initWithDampingRatio:(CGFloat)ratio initialVelocity:(CGVector)velocity __attribute__((objc_designated_initializer));
	//	[Export ("initWithDampingRatio:initialVelocity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nfloat ratio, CGVector velocity);

	//	// -(instancetype _Nonnull)initWithMass:(CGFloat)mass stiffness:(CGFloat)stiffness damping:(CGFloat)damping initialVelocity:(CGVector)velocity __attribute__((objc_designated_initializer));
	//	[Export ("initWithMass:stiffness:damping:initialVelocity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nfloat mass, nfloat stiffness, nfloat damping, CGVector velocity);

	//	// -(instancetype _Nonnull)initWithDampingRatio:(CGFloat)ratio;
	//	[Export ("initWithDampingRatio:")]
	//	IntPtr Constructor (nfloat ratio);
	//}

	//// @protocol UIViewControllerContextTransitioning <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIViewControllerContextTransitioning
	//{
	//	// @required @property (readonly, nonatomic) UIView * _Nonnull containerView;
	//	[Abstract]
	//	[Export ("containerView")]
	//	UIView ContainerView { get; }

	//	// @required @property (readonly, getter = isAnimated, nonatomic) BOOL animated;
	//	[Abstract]
	//	[Export ("animated")]
	//	bool Animated { [Bind ("isAnimated")] get; }

	//	// @required @property (readonly, getter = isInteractive, nonatomic) BOOL interactive;
	//	[Abstract]
	//	[Export ("interactive")]
	//	bool Interactive { [Bind ("isInteractive")] get; }

	//	// @required @property (readonly, nonatomic) BOOL transitionWasCancelled;
	//	[Abstract]
	//	[Export ("transitionWasCancelled")]
	//	bool TransitionWasCancelled { get; }

	//	// @required @property (readonly, nonatomic) UIModalPresentationStyle presentationStyle;
	//	[Abstract]
	//	[Export ("presentationStyle")]
	//	UIModalPresentationStyle PresentationStyle { get; }

	//	// @required -(void)updateInteractiveTransition:(CGFloat)percentComplete;
	//	[Abstract]
	//	[Export ("updateInteractiveTransition:")]
	//	void UpdateInteractiveTransition (nfloat percentComplete);

	//	// @required -(void)finishInteractiveTransition;
	//	[Abstract]
	//	[Export ("finishInteractiveTransition")]
	//	void FinishInteractiveTransition ();

	//	// @required -(void)cancelInteractiveTransition;
	//	[Abstract]
	//	[Export ("cancelInteractiveTransition")]
	//	void CancelInteractiveTransition ();

	//	// @required -(void)pauseInteractiveTransition __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Abstract]
	//	[Export ("pauseInteractiveTransition")]
	//	void PauseInteractiveTransition ();

	//	// @required -(void)completeTransition:(BOOL)didComplete;
	//	[Abstract]
	//	[Export ("completeTransition:")]
	//	void CompleteTransition (bool didComplete);

	//	// @required -(__kindof UIViewController * _Nullable)viewControllerForKey:(UITransitionContextViewControllerKey _Nonnull)key;
	//	[Abstract]
	//	[Export ("viewControllerForKey:")]
	//	UIViewController ViewControllerForKey (string key);

	//	// @required -(__kindof UIView * _Nullable)viewForKey:(UITransitionContextViewKey _Nonnull)key __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Abstract]
	//	[Export ("viewForKey:")]
	//	UIView ViewForKey (string key);

	//	// @required @property (readonly, nonatomic) CGAffineTransform targetTransform __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Abstract]
	//	[Export ("targetTransform")]
	//	CGAffineTransform TargetTransform { get; }

	//	// @required -(CGRect)initialFrameForViewController:(UIViewController * _Nonnull)vc;
	//	[Abstract]
	//	[Export ("initialFrameForViewController:")]
	//	CGRect InitialFrameForViewController (UIViewController vc);

	//	// @required -(CGRect)finalFrameForViewController:(UIViewController * _Nonnull)vc;
	//	[Abstract]
	//	[Export ("finalFrameForViewController:")]
	//	CGRect FinalFrameForViewController (UIViewController vc);
	//}

	//// @protocol UIViewControllerAnimatedTransitioning <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIViewControllerAnimatedTransitioning
	//{
	//	// @required -(NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning> _Nullable)transitionContext;
	//	[Abstract]
	//	[Export ("transitionDuration:")]
	//	double TransitionDuration ([NullAllowed] UIViewControllerContextTransitioning transitionContext);

	//	// @required -(void)animateTransition:(id<UIViewControllerContextTransitioning> _Nonnull)transitionContext;
	//	[Abstract]
	//	[Export ("animateTransition:")]
	//	void AnimateTransition (UIViewControllerContextTransitioning transitionContext);

	//	// @optional -(id<UIViewImplicitlyAnimating> _Nonnull)interruptibleAnimatorForTransition:(id<UIViewControllerContextTransitioning> _Nonnull)transitionContext __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("interruptibleAnimatorForTransition:")]
	//	UIViewImplicitlyAnimating InterruptibleAnimatorForTransition (UIViewControllerContextTransitioning transitionContext);

	//	// @optional -(void)animationEnded:(BOOL)transitionCompleted;
	//	[Export ("animationEnded:")]
	//	void AnimationEnded (bool transitionCompleted);
	//}

	//// @protocol UIViewControllerInteractiveTransitioning <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIViewControllerInteractiveTransitioning
	//{
	//	// @required -(void)startInteractiveTransition:(id<UIViewControllerContextTransitioning> _Nonnull)transitionContext;
	//	[Abstract]
	//	[Export ("startInteractiveTransition:")]
	//	void StartInteractiveTransition (UIViewControllerContextTransitioning transitionContext);

	//	// @optional @property (readonly, nonatomic) CGFloat completionSpeed;
	//	[Export ("completionSpeed")]
	//	nfloat CompletionSpeed { get; }

	//	// @optional @property (readonly, nonatomic) UIViewAnimationCurve completionCurve;
	//	[Export ("completionCurve")]
	//	UIViewAnimationCurve CompletionCurve { get; }

	//	// @optional @property (readonly, nonatomic) BOOL wantsInteractiveStart __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("wantsInteractiveStart")]
	//	bool WantsInteractiveStart { get; }
	//}

	//// @protocol UIViewControllerTransitioningDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIViewControllerTransitioningDelegate
	//{
	//	// @optional -(id<UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source;
	//	[Export ("animationControllerForPresentedController:presentingController:sourceController:")]
	//	[return: NullAllowed]
	//	UIViewControllerAnimatedTransitioning AnimationControllerForPresentedController (UIViewController presented, UIViewController presenting, UIViewController source);

	//	// @optional -(id<UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed;
	//	[Export ("animationControllerForDismissedController:")]
	//	[return: NullAllowed]
	//	UIViewControllerAnimatedTransitioning AnimationControllerForDismissedController (UIViewController dismissed);

	//	// @optional -(id<UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForPresentation:(id<UIViewControllerAnimatedTransitioning> _Nonnull)animator;
	//	[Export ("interactionControllerForPresentation:")]
	//	[return: NullAllowed]
	//	UIViewControllerInteractiveTransitioning InteractionControllerForPresentation (UIViewControllerAnimatedTransitioning animator);

	//	// @optional -(id<UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForDismissal:(id<UIViewControllerAnimatedTransitioning> _Nonnull)animator;
	//	[Export ("interactionControllerForDismissal:")]
	//	[return: NullAllowed]
	//	UIViewControllerInteractiveTransitioning InteractionControllerForDismissal (UIViewControllerAnimatedTransitioning animator);

	//	// @optional -(UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("presentationControllerForPresentedViewController:presentingViewController:sourceViewController:")]
	//	[return: NullAllowed]
	//	UIPresentationController PresentationControllerForPresentedViewController (UIViewController presented, [NullAllowed] UIViewController presenting, UIViewController source);
	//}

	//// @interface UIPercentDrivenInteractiveTransition : NSObject <UIViewControllerInteractiveTransitioning>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIPercentDrivenInteractiveTransition : IUIViewControllerInteractiveTransitioning
	//{
	//	// @property (readonly) CGFloat duration;
	//	[Export ("duration")]
	//	nfloat Duration { get; }

	//	// @property (readonly) CGFloat percentComplete;
	//	[Export ("percentComplete")]
	//	nfloat PercentComplete { get; }

	//	// @property (assign, nonatomic) CGFloat completionSpeed;
	//	[Export ("completionSpeed")]
	//	nfloat CompletionSpeed { get; set; }

	//	// @property (assign, nonatomic) UIViewAnimationCurve completionCurve;
	//	[Export ("completionCurve", ArgumentSemantic.Assign)]
	//	UIViewAnimationCurve CompletionCurve { get; set; }

	//	// @property (nonatomic, strong) id<UITimingCurveProvider> _Nullable timingCurve __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("timingCurve", ArgumentSemantic.Strong)]
	//	UITimingCurveProvider TimingCurve { get; set; }

	//	// @property (nonatomic) BOOL wantsInteractiveStart __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Export ("wantsInteractiveStart")]
	//	bool WantsInteractiveStart { get; set; }

	//	// -(void)pauseInteractiveTransition __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("pauseInteractiveTransition")]
	//	void PauseInteractiveTransition ();

	//	// -(void)updateInteractiveTransition:(CGFloat)percentComplete;
	//	[Export ("updateInteractiveTransition:")]
	//	void UpdateInteractiveTransition (nfloat percentComplete);

	//	// -(void)cancelInteractiveTransition;
	//	[Export ("cancelInteractiveTransition")]
	//	void CancelInteractiveTransition ();

	//	// -(void)finishInteractiveTransition;
	//	[Export ("finishInteractiveTransition")]
	//	void FinishInteractiveTransition ();
	//}

	//// @protocol UISearchControllerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UISearchControllerDelegate
	//{
	//	// @optional -(void)willPresentSearchController:(UISearchController * _Nonnull)searchController;
	//	[Export ("willPresentSearchController:")]
	//	void WillPresentSearchController (UISearchController searchController);

	//	// @optional -(void)didPresentSearchController:(UISearchController * _Nonnull)searchController;
	//	[Export ("didPresentSearchController:")]
	//	void DidPresentSearchController (UISearchController searchController);

	//	// @optional -(void)willDismissSearchController:(UISearchController * _Nonnull)searchController;
	//	[Export ("willDismissSearchController:")]
	//	void WillDismissSearchController (UISearchController searchController);

	//	// @optional -(void)didDismissSearchController:(UISearchController * _Nonnull)searchController;
	//	[Export ("didDismissSearchController:")]
	//	void DidDismissSearchController (UISearchController searchController);

	//	// @optional -(void)presentSearchController:(UISearchController * _Nonnull)searchController;
	//	[Export ("presentSearchController:")]
	//	void PresentSearchController (UISearchController searchController);
	//}

	//// @protocol UISearchResultsUpdating <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UISearchResultsUpdating
	//{
	//	// @required -(void)updateSearchResultsForSearchController:(UISearchController * _Nonnull)searchController;
	//	[Abstract]
	//	[Export ("updateSearchResultsForSearchController:")]
	//	void UpdateSearchResultsForSearchController (UISearchController searchController);
	//}

	//// @interface UISearchController : UIViewController <UIViewControllerTransitioningDelegate, UIViewControllerAnimatedTransitioning>
	//[iOS (8,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UISearchController : IUIViewControllerTransitioningDelegate, IUIViewControllerAnimatedTransitioning
	//{
	//	// -(instancetype _Nonnull)initWithSearchResultsController:(UIViewController * _Nullable)searchResultsController;
	//	[Export ("initWithSearchResultsController:")]
	//	IntPtr Constructor ([NullAllowed] UIViewController searchResultsController);

	//	// @property (nonatomic, weak) id<UISearchResultsUpdating> _Nullable searchResultsUpdater;
	//	[NullAllowed, Export ("searchResultsUpdater", ArgumentSemantic.Weak)]
	//	UISearchResultsUpdating SearchResultsUpdater { get; set; }

	//	// @property (getter = isActive, assign, nonatomic) BOOL active;
	//	[Export ("active")]
	//	bool Active { [Bind ("isActive")] get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UISearchControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UISearchControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (assign, nonatomic) BOOL dimsBackgroundDuringPresentation __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("dimsBackgroundDuringPresentation")]
	//	bool DimsBackgroundDuringPresentation { get; set; }

	//	// @property (assign, nonatomic) BOOL obscuresBackgroundDuringPresentation __attribute__((availability(ios, introduced=9.1)));
	//	[iOS (9, 1)]
	//	[Export ("obscuresBackgroundDuringPresentation")]
	//	bool ObscuresBackgroundDuringPresentation { get; set; }

	//	// @property (assign, nonatomic) BOOL hidesNavigationBarDuringPresentation;
	//	[Export ("hidesNavigationBarDuringPresentation")]
	//	bool HidesNavigationBarDuringPresentation { get; set; }

	//	// @property (readonly, nonatomic, strong) UIViewController * _Nullable searchResultsController;
	//	[NullAllowed, Export ("searchResultsController", ArgumentSemantic.Strong)]
	//	UIViewController SearchResultsController { get; }

	//	// @property (readonly, nonatomic, strong) UISearchBar * _Nonnull searchBar;
	//	[Export ("searchBar", ArgumentSemantic.Strong)]
	//	UISearchBar SearchBar { get; }
	//}

	//// @interface UISwipeGestureRecognizer : UIGestureRecognizer
	//[iOS (3,2)]
	//[BaseType (typeof(UIGestureRecognizer))]
	//interface UISwipeGestureRecognizer
	//{
	//	// @property (nonatomic) NSUInteger numberOfTouchesRequired __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("numberOfTouchesRequired")]
	//	nuint NumberOfTouchesRequired { get; set; }

	//	// @property (nonatomic) UISwipeGestureRecognizerDirection direction;
	//	[Export ("direction", ArgumentSemantic.Assign)]
	//	UISwipeGestureRecognizerDirection Direction { get; set; }
	//}

	//// typedef void (^UIContextualActionHandler)(UIContextualAction * _Nonnull, __kindof UIView * _Nonnull, void (^ _Nonnull)(BOOL));
	//delegate void UIContextualActionHandler (UIContextualAction arg0, UIView arg1, Action<bool> arg2);

	//// @interface UIContextualAction : NSObject
	//[NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIContextualAction
	//{
	//	// +(instancetype _Nonnull)contextualActionWithStyle:(UIContextualActionStyle)style title:(NSString * _Nullable)title handler:(UIContextualActionHandler _Nonnull)handler;
	//	[Static]
	//	[Export ("contextualActionWithStyle:title:handler:")]
	//	UIContextualAction ContextualActionWithStyle (UIContextualActionStyle style, [NullAllowed] string title, UIContextualActionHandler handler);

	//	// @property (readonly, nonatomic) UIContextualActionStyle style;
	//	[Export ("style")]
	//	UIContextualActionStyle Style { get; }

	//	// @property (readonly, copy, nonatomic) UIContextualActionHandler _Nonnull handler;
	//	[Export ("handler", ArgumentSemantic.Copy)]
	//	UIContextualActionHandler Handler { get; }

	//	// @property (copy, nonatomic) NSString * _Nullable title;
	//	[NullAllowed, Export ("title")]
	//	string Title { get; set; }

	//	// @property (copy, nonatomic) UIColor * _Null_unspecified backgroundColor;
	//	[Export ("backgroundColor", ArgumentSemantic.Copy)]
	//	UIColor BackgroundColor { get; set; }

	//	// @property (copy, nonatomic) UIImage * _Nullable image;
	//	[NullAllowed, Export ("image", ArgumentSemantic.Copy)]
	//	UIImage Image { get; set; }
	//}

	//// @interface UISwipeActionsConfiguration : NSObject
	//[NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface UISwipeActionsConfiguration
	//{
	//	// +(instancetype _Nonnull)configurationWithActions:(NSArray<UIContextualAction *> * _Nonnull)actions;
	//	[Static]
	//	[Export ("configurationWithActions:")]
	//	UISwipeActionsConfiguration ConfigurationWithActions (UIContextualAction[] actions);

	//	// @property (readonly, copy, nonatomic) NSArray<UIContextualAction *> * _Nonnull actions;
	//	[Export ("actions", ArgumentSemantic.Copy)]
	//	UIContextualAction[] Actions { get; }

	//	// @property (nonatomic) BOOL performsFirstActionWithFullSwipe;
	//	[Export ("performsFirstActionWithFullSwipe")]
	//	bool PerformsFirstActionWithFullSwipe { get; set; }
	//}

	//// @interface UITableViewCell : UIView <NSCoding, UIGestureRecognizerDelegate>
	//[iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UITableViewCell : INSCoding, IUIGestureRecognizerDelegate
	//{
	//	// -(instancetype _Nonnull)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((objc_designated_initializer)) __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("initWithStyle:reuseIdentifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UITableViewCellStyle style, [NullAllowed] string reuseIdentifier);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic, strong) UIImageView * _Nullable imageView __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[NullAllowed, Export ("imageView", ArgumentSemantic.Strong)]
	//	UIImageView ImageView { get; }

	//	// @property (readonly, nonatomic, strong) UILabel * _Nullable textLabel __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[NullAllowed, Export ("textLabel", ArgumentSemantic.Strong)]
	//	UILabel TextLabel { get; }

	//	// @property (readonly, nonatomic, strong) UILabel * _Nullable detailTextLabel __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[NullAllowed, Export ("detailTextLabel", ArgumentSemantic.Strong)]
	//	UILabel DetailTextLabel { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull contentView;
	//	[Export ("contentView", ArgumentSemantic.Strong)]
	//	UIView ContentView { get; }

	//	// @property (nonatomic, strong) UIView * _Nullable backgroundView;
	//	[NullAllowed, Export ("backgroundView", ArgumentSemantic.Strong)]
	//	UIView BackgroundView { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable selectedBackgroundView;
	//	[NullAllowed, Export ("selectedBackgroundView", ArgumentSemantic.Strong)]
	//	UIView SelectedBackgroundView { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable multipleSelectionBackgroundView __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("multipleSelectionBackgroundView", ArgumentSemantic.Strong)]
	//	UIView MultipleSelectionBackgroundView { get; set; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable reuseIdentifier;
	//	[NullAllowed, Export ("reuseIdentifier")]
	//	string ReuseIdentifier { get; }

	//	// -(void)prepareForReuse __attribute__((objc_requires_super));
	//	[Export ("prepareForReuse")]
	//	[RequiresSuper]
	//	void PrepareForReuse ();

	//	// @property (nonatomic) UITableViewCellSelectionStyle selectionStyle;
	//	[Export ("selectionStyle", ArgumentSemantic.Assign)]
	//	UITableViewCellSelectionStyle SelectionStyle { get; set; }

	//	// @property (getter = isSelected, nonatomic) BOOL selected;
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }

	//	// -(void)setSelected:(BOOL)selected animated:(BOOL)animated;
	//	[Export ("setSelected:animated:")]
	//	void SetSelected (bool selected, bool animated);

	//	// -(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
	//	[Export ("setHighlighted:animated:")]
	//	void SetHighlighted (bool highlighted, bool animated);

	//	// @property (readonly, nonatomic) UITableViewCellEditingStyle editingStyle;
	//	[Export ("editingStyle")]
	//	UITableViewCellEditingStyle EditingStyle { get; }

	//	// @property (nonatomic) BOOL showsReorderControl;
	//	[Export ("showsReorderControl")]
	//	bool ShowsReorderControl { get; set; }

	//	// @property (nonatomic) BOOL shouldIndentWhileEditing;
	//	[Export ("shouldIndentWhileEditing")]
	//	bool ShouldIndentWhileEditing { get; set; }

	//	// @property (nonatomic) UITableViewCellAccessoryType accessoryType;
	//	[Export ("accessoryType", ArgumentSemantic.Assign)]
	//	UITableViewCellAccessoryType AccessoryType { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable accessoryView;
	//	[NullAllowed, Export ("accessoryView", ArgumentSemantic.Strong)]
	//	UIView AccessoryView { get; set; }

	//	// @property (nonatomic) UITableViewCellAccessoryType editingAccessoryType;
	//	[Export ("editingAccessoryType", ArgumentSemantic.Assign)]
	//	UITableViewCellAccessoryType EditingAccessoryType { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable editingAccessoryView;
	//	[NullAllowed, Export ("editingAccessoryView", ArgumentSemantic.Strong)]
	//	UIView EditingAccessoryView { get; set; }

	//	// @property (nonatomic) NSInteger indentationLevel;
	//	[Export ("indentationLevel")]
	//	nint IndentationLevel { get; set; }

	//	// @property (nonatomic) CGFloat indentationWidth;
	//	[Export ("indentationWidth")]
	//	nfloat IndentationWidth { get; set; }

	//	// @property (nonatomic) UIEdgeInsets separatorInset __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[Export ("separatorInset", ArgumentSemantic.Assign)]
	//	UIEdgeInsets SeparatorInset { get; set; }

	//	// @property (getter = isEditing, nonatomic) BOOL editing;
	//	[Export ("editing")]
	//	bool Editing { [Bind ("isEditing")] get; set; }

	//	// -(void)setEditing:(BOOL)editing animated:(BOOL)animated;
	//	[Export ("setEditing:animated:")]
	//	void SetEditing (bool editing, bool animated);

	//	// @property (readonly, nonatomic) BOOL showingDeleteConfirmation;
	//	[Export ("showingDeleteConfirmation")]
	//	bool ShowingDeleteConfirmation { get; }

	//	// @property (nonatomic) UITableViewCellFocusStyle focusStyle __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("focusStyle", ArgumentSemantic.Assign)]
	//	UITableViewCellFocusStyle FocusStyle { get; set; }

	//	// -(void)willTransitionToState:(UITableViewCellStateMask)state __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("willTransitionToState:")]
	//	void WillTransitionToState (UITableViewCellStateMask state);

	//	// -(void)didTransitionToState:(UITableViewCellStateMask)state __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("didTransitionToState:")]
	//	void DidTransitionToState (UITableViewCellStateMask state);

	//	// -(void)dragStateDidChange:(UITableViewCellDragState)dragState __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Export ("dragStateDidChange:")]
	//	void DragStateDidChange (UITableViewCellDragState dragState);

	//	// @property (nonatomic) BOOL userInteractionEnabledWhileDragging __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("userInteractionEnabledWhileDragging")]
	//	bool UserInteractionEnabledWhileDragging { get; set; }
	//}

	//// @interface UIDeprecated (UITableViewCell)
	//[Category]
	//[BaseType (typeof(UITableViewCell))]
	//interface UITableViewCell_UIDeprecated
	//{
	//	// -(id _Nonnull)initWithFrame:(CGRect)frame reuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[Export ("initWithFrame:reuseIdentifier:")]
	//	IntPtr Constructor (CGRect frame, [NullAllowed] string reuseIdentifier);

	//	// @property (copy, nonatomic) NSString * _Nullable text __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("text")]
	//	string Text { get; set; }

	//	// @property (nonatomic, strong) UIFont * _Nullable font __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("font", ArgumentSemantic.Strong)]
	//	UIFont Font { get; set; }

	//	// @property (nonatomic) NSTextAlignment textAlignment __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[Export ("textAlignment", ArgumentSemantic.Assign)]
	//	NSTextAlignment TextAlignment { get; set; }

	//	// @property (nonatomic) NSLineBreakMode lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[Export ("lineBreakMode", ArgumentSemantic.Assign)]
	//	NSLineBreakMode LineBreakMode { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable textColor __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("textColor", ArgumentSemantic.Strong)]
	//	UIColor TextColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable selectedTextColor __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("selectedTextColor", ArgumentSemantic.Strong)]
	//	UIColor SelectedTextColor { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable image __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
	//	UIImage Image { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable selectedImage __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("selectedImage", ArgumentSemantic.Strong)]
	//	UIImage SelectedImage { get; set; }

	//	// @property (nonatomic) BOOL hidesAccessoryWhenEditing __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[Export ("hidesAccessoryWhenEditing")]
	//	bool HidesAccessoryWhenEditing { get; set; }

	//	// @property (assign, nonatomic) id _Nullable target __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("target", ArgumentSemantic.Assign)]
	//	NSObject Target { get; set; }

	//	// @property (nonatomic) SEL _Nullable editAction __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("editAction", ArgumentSemantic.Assign)]
	//	Selector EditAction { get; set; }

	//	// @property (nonatomic) SEL _Nullable accessoryAction __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("accessoryAction", ArgumentSemantic.Assign)]
	//	Selector AccessoryAction { get; set; }
	//}

	//// @interface UITableViewRowAction : NSObject <NSCopying>
	//[NoTV, iOS (8,0)]
	//[BaseType (typeof(NSObject))]
	//interface UITableViewRowAction : INSCopying
	//{
	//	// +(instancetype _Nonnull)rowActionWithStyle:(UITableViewRowActionStyle)style title:(NSString * _Nullable)title handler:(void (^ _Nonnull)(UITableViewRowAction * _Nonnull, NSIndexPath * _Nonnull))handler;
	//	[Static]
	//	[Export ("rowActionWithStyle:title:handler:")]
	//	UITableViewRowAction RowActionWithStyle (UITableViewRowActionStyle style, [NullAllowed] string title, Action<UITableViewRowAction, NSIndexPath> handler);

	//	// @property (readonly, nonatomic) UITableViewRowActionStyle style;
	//	[Export ("style")]
	//	UITableViewRowActionStyle Style { get; }

	//	// @property (copy, nonatomic) NSString * _Nullable title;
	//	[NullAllowed, Export ("title")]
	//	string Title { get; set; }

	//	// @property (copy, nonatomic) UIColor * _Nullable backgroundColor;
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Copy)]
	//	UIColor BackgroundColor { get; set; }

	//	// @property (copy, nonatomic) UIVisualEffect * _Nullable backgroundEffect;
	//	[NullAllowed, Export ("backgroundEffect", ArgumentSemantic.Copy)]
	//	UIVisualEffect BackgroundEffect { get; set; }
	//}

	//// @interface UITableViewFocusUpdateContext : UIFocusUpdateContext
	//[iOS (9,0)]
	//[BaseType (typeof(UIFocusUpdateContext))]
	//interface UITableViewFocusUpdateContext
	//{
	//	// @property (readonly, nonatomic, strong) NSIndexPath * _Nullable previouslyFocusedIndexPath;
	//	[NullAllowed, Export ("previouslyFocusedIndexPath", ArgumentSemantic.Strong)]
	//	NSIndexPath PreviouslyFocusedIndexPath { get; }

	//	// @property (readonly, nonatomic, strong) NSIndexPath * _Nullable nextFocusedIndexPath;
	//	[NullAllowed, Export ("nextFocusedIndexPath", ArgumentSemantic.Strong)]
	//	NSIndexPath NextFocusedIndexPath { get; }
	//}

	//// @protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITableViewDelegate : IUIScrollViewDelegate
	//{
	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:willDisplayCell:forRowAtIndexPath:")]
	//	void TableView (UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView willDisplayHeaderView:(UIView * _Nonnull)view forSection:(NSInteger)section __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("tableView:willDisplayHeaderView:forSection:")]
	//	void TableView (UITableView tableView, UIView view, nint section);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView willDisplayFooterView:(UIView * _Nonnull)view forSection:(NSInteger)section __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("tableView:willDisplayFooterView:forSection:")]
	//	void TableView (UITableView tableView, UIView view, nint section);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView didEndDisplayingCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("tableView:didEndDisplayingCell:forRowAtIndexPath:")]
	//	void TableView (UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView didEndDisplayingHeaderView:(UIView * _Nonnull)view forSection:(NSInteger)section __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("tableView:didEndDisplayingHeaderView:forSection:")]
	//	void TableView (UITableView tableView, UIView view, nint section);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView didEndDisplayingFooterView:(UIView * _Nonnull)view forSection:(NSInteger)section __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("tableView:didEndDisplayingFooterView:forSection:")]
	//	void TableView (UITableView tableView, UIView view, nint section);

	//	// @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:heightForRowAtIndexPath:")]
	//	nfloat TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section;
	//	[Export ("tableView:heightForHeaderInSection:")]
	//	nfloat TableView (UITableView tableView, nint section);

	//	// @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section;
	//	[Export ("tableView:heightForFooterInSection:")]
	//	nfloat TableView (UITableView tableView, nint section);

	//	// @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("tableView:estimatedHeightForRowAtIndexPath:")]
	//	nfloat TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForHeaderInSection:(NSInteger)section __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("tableView:estimatedHeightForHeaderInSection:")]
	//	nfloat TableView (UITableView tableView, nint section);

	//	// @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForFooterInSection:(NSInteger)section __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("tableView:estimatedHeightForFooterInSection:")]
	//	nfloat TableView (UITableView tableView, nint section);

	//	// @optional -(UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section;
	//	[Export ("tableView:viewForHeaderInSection:")]
	//	[return: NullAllowed]
	//	UIView TableView (UITableView tableView, nint section);

	//	// @optional -(UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForFooterInSection:(NSInteger)section;
	//	[Export ("tableView:viewForFooterInSection:")]
	//	[return: NullAllowed]
	//	UIView TableView (UITableView tableView, nint section);

	//	// @optional -(UITableViewCellAccessoryType)tableView:(UITableView * _Nonnull)tableView accessoryTypeForRowWithIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[NoTV]
	//	[Export ("tableView:accessoryTypeForRowWithIndexPath:")]
	//	UITableViewCellAccessoryType TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:accessoryButtonTappedForRowWithIndexPath:")]
	//	void TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView shouldHighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("tableView:shouldHighlightRowAtIndexPath:")]
	//	bool TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView didHighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("tableView:didHighlightRowAtIndexPath:")]
	//	void TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView didUnhighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("tableView:didUnhighlightRowAtIndexPath:")]
	//	void TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:willSelectRowAtIndexPath:")]
	//	[return: NullAllowed]
	//	NSIndexPath TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willDeselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("tableView:willDeselectRowAtIndexPath:")]
	//	[return: NullAllowed]
	//	NSIndexPath TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:didSelectRowAtIndexPath:")]
	//	void TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView didDeselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("tableView:didDeselectRowAtIndexPath:")]
	//	void TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(UITableViewCellEditingStyle)tableView:(UITableView * _Nonnull)tableView editingStyleForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:editingStyleForRowAtIndexPath:")]
	//	UITableViewCellEditingStyle TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3,0)]
	//	[Export ("tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:")]
	//	[return: NullAllowed]
	//	string TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(NSArray<UITableViewRowAction *> * _Nullable)tableView:(UITableView * _Nonnull)tableView editActionsForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, iOS (8,0)]
	//	[Export ("tableView:editActionsForRowAtIndexPath:")]
	//	[return: NullAllowed]
	//	UITableViewRowAction[] TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(UISwipeActionsConfiguration * _Nullable)tableView:(UITableView * _Nonnull)tableView leadingSwipeActionsConfigurationForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoTV, iOS (11,0)]
	//	[Export ("tableView:leadingSwipeActionsConfigurationForRowAtIndexPath:")]
	//	[return: NullAllowed]
	//	UISwipeActionsConfiguration TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(UISwipeActionsConfiguration * _Nullable)tableView:(UITableView * _Nonnull)tableView trailingSwipeActionsConfigurationForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoTV, iOS (11,0)]
	//	[Export ("tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:")]
	//	[return: NullAllowed]
	//	UISwipeActionsConfiguration TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:shouldIndentWhileEditingRowAtIndexPath:")]
	//	bool TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView willBeginEditingRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("tableView:willBeginEditingRowAtIndexPath:")]
	//	void TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView didEndEditingRowAtIndexPath:(NSIndexPath * _Nullable)indexPath __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("tableView:didEndEditingRowAtIndexPath:")]
	//	void TableView (UITableView tableView, [NullAllowed] NSIndexPath indexPath);

	//	// @optional -(NSIndexPath * _Nonnull)tableView:(UITableView * _Nonnull)tableView targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath * _Nonnull)sourceIndexPath toProposedIndexPath:(NSIndexPath * _Nonnull)proposedDestinationIndexPath;
	//	[Export ("tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:")]
	//	NSIndexPath TableView (UITableView tableView, NSIndexPath sourceIndexPath, NSIndexPath proposedDestinationIndexPath);

	//	// @optional -(NSInteger)tableView:(UITableView * _Nonnull)tableView indentationLevelForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:indentationLevelForRowAtIndexPath:")]
	//	nint TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView shouldShowMenuForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("tableView:shouldShowMenuForRowAtIndexPath:")]
	//	bool TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView canPerformAction:(SEL _Nonnull)action forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("tableView:canPerformAction:forRowAtIndexPath:withSender:")]
	//	bool TableView (UITableView tableView, Selector action, NSIndexPath indexPath, [NullAllowed] NSObject sender);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView performAction:(SEL _Nonnull)action forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("tableView:performAction:forRowAtIndexPath:withSender:")]
	//	void TableView (UITableView tableView, Selector action, NSIndexPath indexPath, [NullAllowed] NSObject sender);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView canFocusRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("tableView:canFocusRowAtIndexPath:")]
	//	bool TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView shouldUpdateFocusInContext:(UITableViewFocusUpdateContext * _Nonnull)context __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("tableView:shouldUpdateFocusInContext:")]
	//	bool TableView (UITableView tableView, UITableViewFocusUpdateContext context);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView didUpdateFocusInContext:(UITableViewFocusUpdateContext * _Nonnull)context withAnimationCoordinator:(UIFocusAnimationCoordinator * _Nonnull)coordinator __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("tableView:didUpdateFocusInContext:withAnimationCoordinator:")]
	//	void TableView (UITableView tableView, UITableViewFocusUpdateContext context, UIFocusAnimationCoordinator coordinator);

	//	// @optional -(NSIndexPath * _Nullable)indexPathForPreferredFocusedViewInTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("indexPathForPreferredFocusedViewInTableView:")]
	//	[return: NullAllowed]
	//	NSIndexPath IndexPathForPreferredFocusedViewInTableView (UITableView tableView);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView shouldSpringLoadRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath withContext:(id<UISpringLoadedInteractionContext> _Nonnull)context __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Export ("tableView:shouldSpringLoadRowAtIndexPath:withContext:")]
	//	bool TableView (UITableView tableView, NSIndexPath indexPath, UISpringLoadedInteractionContext context);
	//}

	//// @interface UITableView : UIScrollView <NSCoding, UIDataSourceTranslating>
	//[iOS (2,0)]
	//[BaseType (typeof(UIScrollView))]
	//interface UITableView : INSCoding, IUIDataSourceTranslating
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame style:(UITableViewStyle)style __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:style:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame, UITableViewStyle style);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic) UITableViewStyle style;
	//	[Export ("style")]
	//	UITableViewStyle Style { get; }

	//	// @property (nonatomic, weak) id<UITableViewDataSource> _Nullable dataSource;
	//	[NullAllowed, Export ("dataSource", ArgumentSemantic.Weak)]
	//	UITableViewDataSource DataSource { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UITableViewDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UITableViewDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic, weak) id<UITableViewDataSourcePrefetching> _Nullable prefetchDataSource __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("prefetchDataSource", ArgumentSemantic.Weak)]
	//	UITableViewDataSourcePrefetching PrefetchDataSource { get; set; }

	//	[Wrap ("WeakDragDelegate")]
	//	[NullAllowed]
	//	UITableViewDragDelegate DragDelegate { get; set; }

	//	// @property (nonatomic, weak) id<UITableViewDragDelegate> _Nullable dragDelegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[NullAllowed, Export ("dragDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDragDelegate { get; set; }

	//	[Wrap ("WeakDropDelegate")]
	//	[NullAllowed]
	//	UITableViewDropDelegate DropDelegate { get; set; }

	//	// @property (nonatomic, weak) id<UITableViewDropDelegate> _Nullable dropDelegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[NullAllowed, Export ("dropDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDropDelegate { get; set; }

	//	// @property (nonatomic) CGFloat rowHeight;
	//	[Export ("rowHeight")]
	//	nfloat RowHeight { get; set; }

	//	// @property (nonatomic) CGFloat sectionHeaderHeight;
	//	[Export ("sectionHeaderHeight")]
	//	nfloat SectionHeaderHeight { get; set; }

	//	// @property (nonatomic) CGFloat sectionFooterHeight;
	//	[Export ("sectionFooterHeight")]
	//	nfloat SectionFooterHeight { get; set; }

	//	// @property (nonatomic) CGFloat estimatedRowHeight __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("estimatedRowHeight")]
	//	nfloat EstimatedRowHeight { get; set; }

	//	// @property (nonatomic) CGFloat estimatedSectionHeaderHeight __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("estimatedSectionHeaderHeight")]
	//	nfloat EstimatedSectionHeaderHeight { get; set; }

	//	// @property (nonatomic) CGFloat estimatedSectionFooterHeight __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("estimatedSectionFooterHeight")]
	//	nfloat EstimatedSectionFooterHeight { get; set; }

	//	// @property (nonatomic) UIEdgeInsets separatorInset __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("separatorInset", ArgumentSemantic.Assign)]
	//	UIEdgeInsets SeparatorInset { get; set; }

	//	// @property (nonatomic) UITableViewSeparatorInsetReference separatorInsetReference __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("separatorInsetReference", ArgumentSemantic.Assign)]
	//	UITableViewSeparatorInsetReference SeparatorInsetReference { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable backgroundView __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[NullAllowed, Export ("backgroundView", ArgumentSemantic.Strong)]
	//	UIView BackgroundView { get; set; }

	//	// @property (readonly, nonatomic) NSInteger numberOfSections;
	//	[Export ("numberOfSections")]
	//	nint NumberOfSections { get; }

	//	// -(NSInteger)numberOfRowsInSection:(NSInteger)section;
	//	[Export ("numberOfRowsInSection:")]
	//	nint NumberOfRowsInSection (nint section);

	//	// -(CGRect)rectForSection:(NSInteger)section;
	//	[Export ("rectForSection:")]
	//	CGRect RectForSection (nint section);

	//	// -(CGRect)rectForHeaderInSection:(NSInteger)section;
	//	[Export ("rectForHeaderInSection:")]
	//	CGRect RectForHeaderInSection (nint section);

	//	// -(CGRect)rectForFooterInSection:(NSInteger)section;
	//	[Export ("rectForFooterInSection:")]
	//	CGRect RectForFooterInSection (nint section);

	//	// -(CGRect)rectForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("rectForRowAtIndexPath:")]
	//	CGRect RectForRowAtIndexPath (NSIndexPath indexPath);

	//	// -(NSIndexPath * _Nullable)indexPathForRowAtPoint:(CGPoint)point;
	//	[Export ("indexPathForRowAtPoint:")]
	//	[return: NullAllowed]
	//	NSIndexPath IndexPathForRowAtPoint (CGPoint point);

	//	// -(NSIndexPath * _Nullable)indexPathForCell:(UITableViewCell * _Nonnull)cell;
	//	[Export ("indexPathForCell:")]
	//	[return: NullAllowed]
	//	NSIndexPath IndexPathForCell (UITableViewCell cell);

	//	// -(NSArray<NSIndexPath *> * _Nullable)indexPathsForRowsInRect:(CGRect)rect;
	//	[Export ("indexPathsForRowsInRect:")]
	//	[return: NullAllowed]
	//	NSIndexPath[] IndexPathsForRowsInRect (CGRect rect);

	//	// -(__kindof UITableViewCell * _Nullable)cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("cellForRowAtIndexPath:")]
	//	UITableViewCell CellForRowAtIndexPath (NSIndexPath indexPath);

	//	// @property (readonly, nonatomic) NSArray<__kindof UITableViewCell *> * _Nonnull visibleCells;
	//	[Export ("visibleCells")]
	//	UITableViewCell[] VisibleCells { get; }

	//	// @property (readonly, nonatomic) NSArray<NSIndexPath *> * _Nullable indexPathsForVisibleRows;
	//	[NullAllowed, Export ("indexPathsForVisibleRows")]
	//	NSIndexPath[] IndexPathsForVisibleRows { get; }

	//	// -(UITableViewHeaderFooterView * _Nullable)headerViewForSection:(NSInteger)section __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("headerViewForSection:")]
	//	[return: NullAllowed]
	//	UITableViewHeaderFooterView HeaderViewForSection (nint section);

	//	// -(UITableViewHeaderFooterView * _Nullable)footerViewForSection:(NSInteger)section __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("footerViewForSection:")]
	//	[return: NullAllowed]
	//	UITableViewHeaderFooterView FooterViewForSection (nint section);

	//	// -(void)scrollToRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath atScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated;
	//	[Export ("scrollToRowAtIndexPath:atScrollPosition:animated:")]
	//	void ScrollToRowAtIndexPath (NSIndexPath indexPath, UITableViewScrollPosition scrollPosition, bool animated);

	//	// -(void)scrollToNearestSelectedRowAtScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated;
	//	[Export ("scrollToNearestSelectedRowAtScrollPosition:animated:")]
	//	void ScrollToNearestSelectedRowAtScrollPosition (UITableViewScrollPosition scrollPosition, bool animated);

	//	// -(void)performBatchUpdates:(void (^ _Nullable)(void))updates completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("performBatchUpdates:completion:")]
	//	void PerformBatchUpdates ([NullAllowed] Action updates, [NullAllowed] Action<bool> completion);

	//	// -(void)beginUpdates;
	//	[Export ("beginUpdates")]
	//	void BeginUpdates ();

	//	// -(void)endUpdates;
	//	[Export ("endUpdates")]
	//	void EndUpdates ();

	//	// -(void)insertSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(UITableViewRowAnimation)animation;
	//	[Export ("insertSections:withRowAnimation:")]
	//	void InsertSections (NSIndexSet sections, UITableViewRowAnimation animation);

	//	// -(void)deleteSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(UITableViewRowAnimation)animation;
	//	[Export ("deleteSections:withRowAnimation:")]
	//	void DeleteSections (NSIndexSet sections, UITableViewRowAnimation animation);

	//	// -(void)reloadSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(UITableViewRowAnimation)animation __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("reloadSections:withRowAnimation:")]
	//	void ReloadSections (NSIndexSet sections, UITableViewRowAnimation animation);

	//	// -(void)moveSection:(NSInteger)section toSection:(NSInteger)newSection __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("moveSection:toSection:")]
	//	void MoveSection (nint section, nint newSection);

	//	// -(void)insertRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths withRowAnimation:(UITableViewRowAnimation)animation;
	//	[Export ("insertRowsAtIndexPaths:withRowAnimation:")]
	//	void InsertRowsAtIndexPaths (NSIndexPath[] indexPaths, UITableViewRowAnimation animation);

	//	// -(void)deleteRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths withRowAnimation:(UITableViewRowAnimation)animation;
	//	[Export ("deleteRowsAtIndexPaths:withRowAnimation:")]
	//	void DeleteRowsAtIndexPaths (NSIndexPath[] indexPaths, UITableViewRowAnimation animation);

	//	// -(void)reloadRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths withRowAnimation:(UITableViewRowAnimation)animation __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("reloadRowsAtIndexPaths:withRowAnimation:")]
	//	void ReloadRowsAtIndexPaths (NSIndexPath[] indexPaths, UITableViewRowAnimation animation);

	//	// -(void)moveRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath toIndexPath:(NSIndexPath * _Nonnull)newIndexPath __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("moveRowAtIndexPath:toIndexPath:")]
	//	void MoveRowAtIndexPath (NSIndexPath indexPath, NSIndexPath newIndexPath);

	//	// @property (readonly, nonatomic) BOOL hasUncommittedUpdates __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("hasUncommittedUpdates")]
	//	bool HasUncommittedUpdates { get; }

	//	// -(void)reloadData;
	//	[Export ("reloadData")]
	//	void ReloadData ();

	//	// -(void)reloadSectionIndexTitles __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("reloadSectionIndexTitles")]
	//	void ReloadSectionIndexTitles ();

	//	// @property (getter = isEditing, nonatomic) BOOL editing;
	//	[Export ("editing")]
	//	bool Editing { [Bind ("isEditing")] get; set; }

	//	// -(void)setEditing:(BOOL)editing animated:(BOOL)animated;
	//	[Export ("setEditing:animated:")]
	//	void SetEditing (bool editing, bool animated);

	//	// @property (nonatomic) BOOL allowsSelection __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("allowsSelection")]
	//	bool AllowsSelection { get; set; }

	//	// @property (nonatomic) BOOL allowsSelectionDuringEditing;
	//	[Export ("allowsSelectionDuringEditing")]
	//	bool AllowsSelectionDuringEditing { get; set; }

	//	// @property (nonatomic) BOOL allowsMultipleSelection __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("allowsMultipleSelection")]
	//	bool AllowsMultipleSelection { get; set; }

	//	// @property (nonatomic) BOOL allowsMultipleSelectionDuringEditing __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("allowsMultipleSelectionDuringEditing")]
	//	bool AllowsMultipleSelectionDuringEditing { get; set; }

	//	// @property (readonly, nonatomic) NSIndexPath * _Nullable indexPathForSelectedRow;
	//	[NullAllowed, Export ("indexPathForSelectedRow")]
	//	NSIndexPath IndexPathForSelectedRow { get; }

	//	// @property (readonly, nonatomic) NSArray<NSIndexPath *> * _Nullable indexPathsForSelectedRows __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("indexPathsForSelectedRows")]
	//	NSIndexPath[] IndexPathsForSelectedRows { get; }

	//	// -(void)selectRowAtIndexPath:(NSIndexPath * _Nullable)indexPath animated:(BOOL)animated scrollPosition:(UITableViewScrollPosition)scrollPosition;
	//	[Export ("selectRowAtIndexPath:animated:scrollPosition:")]
	//	void SelectRowAtIndexPath ([NullAllowed] NSIndexPath indexPath, bool animated, UITableViewScrollPosition scrollPosition);

	//	// -(void)deselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath animated:(BOOL)animated;
	//	[Export ("deselectRowAtIndexPath:animated:")]
	//	void DeselectRowAtIndexPath (NSIndexPath indexPath, bool animated);

	//	// @property (nonatomic) NSInteger sectionIndexMinimumDisplayRowCount;
	//	[Export ("sectionIndexMinimumDisplayRowCount")]
	//	nint SectionIndexMinimumDisplayRowCount { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable sectionIndexColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("sectionIndexColor", ArgumentSemantic.Strong)]
	//	UIColor SectionIndexColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable sectionIndexBackgroundColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("sectionIndexBackgroundColor", ArgumentSemantic.Strong)]
	//	UIColor SectionIndexBackgroundColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable sectionIndexTrackingBackgroundColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("sectionIndexTrackingBackgroundColor", ArgumentSemantic.Strong)]
	//	UIColor SectionIndexTrackingBackgroundColor { get; set; }

	//	// @property (nonatomic) UITableViewCellSeparatorStyle separatorStyle __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("separatorStyle", ArgumentSemantic.Assign)]
	//	UITableViewCellSeparatorStyle SeparatorStyle { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable separatorColor __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector")));
	//	[NoTV]
	//	[NullAllowed, Export ("separatorColor", ArgumentSemantic.Strong)]
	//	UIColor SeparatorColor { get; set; }

	//	// @property (copy, nonatomic) UIVisualEffect * _Nullable separatorEffect __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=8.0)));
	//	[NoTV, iOS (8, 0)]
	//	[NullAllowed, Export ("separatorEffect", ArgumentSemantic.Copy)]
	//	UIVisualEffect SeparatorEffect { get; set; }

	//	// @property (nonatomic) BOOL cellLayoutMarginsFollowReadableWidth __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("cellLayoutMarginsFollowReadableWidth")]
	//	bool CellLayoutMarginsFollowReadableWidth { get; set; }

	//	// @property (nonatomic) BOOL insetsContentViewsToSafeArea __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("insetsContentViewsToSafeArea")]
	//	bool InsetsContentViewsToSafeArea { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable tableHeaderView;
	//	[NullAllowed, Export ("tableHeaderView", ArgumentSemantic.Strong)]
	//	UIView TableHeaderView { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable tableFooterView;
	//	[NullAllowed, Export ("tableFooterView", ArgumentSemantic.Strong)]
	//	UIView TableFooterView { get; set; }

	//	// -(__kindof UITableViewCell * _Nullable)dequeueReusableCellWithIdentifier:(NSString * _Nonnull)identifier;
	//	[Export ("dequeueReusableCellWithIdentifier:")]
	//	UITableViewCell DequeueReusableCellWithIdentifier (string identifier);

	//	// -(__kindof UITableViewCell * _Nonnull)dequeueReusableCellWithIdentifier:(NSString * _Nonnull)identifier forIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("dequeueReusableCellWithIdentifier:forIndexPath:")]
	//	UITableViewCell DequeueReusableCellWithIdentifier (string identifier, NSIndexPath indexPath);

	//	// -(__kindof UITableViewHeaderFooterView * _Nullable)dequeueReusableHeaderFooterViewWithIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("dequeueReusableHeaderFooterViewWithIdentifier:")]
	//	UITableViewHeaderFooterView DequeueReusableHeaderFooterViewWithIdentifier (string identifier);

	//	// -(void)registerNib:(UINib * _Nullable)nib forCellReuseIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("registerNib:forCellReuseIdentifier:")]
	//	void RegisterNib ([NullAllowed] UINib nib, string identifier);

	//	// -(void)registerClass:(Class _Nullable)cellClass forCellReuseIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("registerClass:forCellReuseIdentifier:")]
	//	void RegisterClass ([NullAllowed] Class cellClass, string identifier);

	//	// -(void)registerNib:(UINib * _Nullable)nib forHeaderFooterViewReuseIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("registerNib:forHeaderFooterViewReuseIdentifier:")]
	//	void RegisterNib ([NullAllowed] UINib nib, string identifier);

	//	// -(void)registerClass:(Class _Nullable)aClass forHeaderFooterViewReuseIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("registerClass:forHeaderFooterViewReuseIdentifier:")]
	//	void RegisterClass ([NullAllowed] Class aClass, string identifier);

	//	// @property (nonatomic) BOOL remembersLastFocusedIndexPath __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("remembersLastFocusedIndexPath")]
	//	bool RemembersLastFocusedIndexPath { get; set; }

	//	// @property (nonatomic) BOOL dragInteractionEnabled __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("dragInteractionEnabled")]
	//	bool DragInteractionEnabled { get; set; }

	//	// @property (readonly, nonatomic) BOOL hasActiveDrag __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("hasActiveDrag")]
	//	bool HasActiveDrag { get; }

	//	// @property (readonly, nonatomic) BOOL hasActiveDrop __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11, 0)]
	//	[Export ("hasActiveDrop")]
	//	bool HasActiveDrop { get; }
	//}

	//// @interface UIDragAndDrop (UITableView) <UISpringLoadedInteractionSupporting>
	//[Category]
	//[BaseType (typeof(UITableView))]
	//interface UITableView_UIDragAndDrop : IUISpringLoadedInteractionSupporting
	//{
	//}

	//// @protocol UITableViewDataSource <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITableViewDataSource
	//{
	//	// @required -(NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
	//	[Abstract]
	//	[Export ("tableView:numberOfRowsInSection:")]
	//	nint TableView (UITableView tableView, nint section);

	//	// @required -(UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Abstract]
	//	[Export ("tableView:cellForRowAtIndexPath:")]
	//	UITableViewCell TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView;
	//	[Export ("numberOfSectionsInTableView:")]
	//	nint NumberOfSectionsInTableView (UITableView tableView);

	//	// @optional -(NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section;
	//	[Export ("tableView:titleForHeaderInSection:")]
	//	[return: NullAllowed]
	//	string TableView (UITableView tableView, nint section);

	//	// @optional -(NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForFooterInSection:(NSInteger)section;
	//	[Export ("tableView:titleForFooterInSection:")]
	//	[return: NullAllowed]
	//	string TableView (UITableView tableView, nint section);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView canEditRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:canEditRowAtIndexPath:")]
	//	bool TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView canMoveRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:canMoveRowAtIndexPath:")]
	//	bool TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(NSArray<NSString *> * _Nullable)sectionIndexTitlesForTableView:(UITableView * _Nonnull)tableView;
	//	[Export ("sectionIndexTitlesForTableView:")]
	//	[return: NullAllowed]
	//	string[] SectionIndexTitlesForTableView (UITableView tableView);

	//	// @optional -(NSInteger)tableView:(UITableView * _Nonnull)tableView sectionForSectionIndexTitle:(NSString * _Nonnull)title atIndex:(NSInteger)index;
	//	[Export ("tableView:sectionForSectionIndexTitle:atIndex:")]
	//	nint TableView (UITableView tableView, string title, nint index);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:commitEditingStyle:forRowAtIndexPath:")]
	//	void TableView (UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView moveRowAtIndexPath:(NSIndexPath * _Nonnull)sourceIndexPath toIndexPath:(NSIndexPath * _Nonnull)destinationIndexPath;
	//	[Export ("tableView:moveRowAtIndexPath:toIndexPath:")]
	//	void TableView (UITableView tableView, NSIndexPath sourceIndexPath, NSIndexPath destinationIndexPath);
	//}

	//// @protocol UITableViewDataSourcePrefetching <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITableViewDataSourcePrefetching
	//{
	//	// @required -(void)tableView:(UITableView * _Nonnull)tableView prefetchRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
	//	[Abstract]
	//	[Export ("tableView:prefetchRowsAtIndexPaths:")]
	//	void PrefetchRowsAtIndexPaths (UITableView tableView, NSIndexPath[] indexPaths);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView cancelPrefetchingForRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
	//	[Export ("tableView:cancelPrefetchingForRowsAtIndexPaths:")]
	//	void CancelPrefetchingForRowsAtIndexPaths (UITableView tableView, NSIndexPath[] indexPaths);
	//}

	//// @protocol UITableViewDragDelegate <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITableViewDragDelegate
	//{
	//	// @required -(NSArray<UIDragItem *> * _Nonnull)tableView:(UITableView * _Nonnull)tableView itemsForBeginningDragSession:(id<UIDragSession> _Nonnull)session atIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Abstract]
	//	[Export ("tableView:itemsForBeginningDragSession:atIndexPath:")]
	//	UIDragItem[] TableView (UITableView tableView, UIDragSession session, NSIndexPath indexPath);

	//	// @optional -(NSArray<UIDragItem *> * _Nonnull)tableView:(UITableView * _Nonnull)tableView itemsForAddingToDragSession:(id<UIDragSession> _Nonnull)session atIndexPath:(NSIndexPath * _Nonnull)indexPath point:(CGPoint)point;
	//	[Export ("tableView:itemsForAddingToDragSession:atIndexPath:point:")]
	//	UIDragItem[] TableView (UITableView tableView, UIDragSession session, NSIndexPath indexPath, CGPoint point);

	//	// @optional -(UIDragPreviewParameters * _Nullable)tableView:(UITableView * _Nonnull)tableView dragPreviewParametersForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:dragPreviewParametersForRowAtIndexPath:")]
	//	[return: NullAllowed]
	//	UIDragPreviewParameters TableView (UITableView tableView, NSIndexPath indexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView dragSessionWillBegin:(id<UIDragSession> _Nonnull)session;
	//	[Export ("tableView:dragSessionWillBegin:")]
	//	void TableView (UITableView tableView, UIDragSession session);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView dragSessionDidEnd:(id<UIDragSession> _Nonnull)session;
	//	[Export ("tableView:dragSessionDidEnd:")]
	//	void TableView (UITableView tableView, UIDragSession session);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView dragSessionAllowsMoveOperation:(id<UIDragSession> _Nonnull)session;
	//	[Export ("tableView:dragSessionAllowsMoveOperation:")]
	//	bool TableView (UITableView tableView, UIDragSession session);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView dragSessionIsRestrictedToDraggingApplication:(id<UIDragSession> _Nonnull)session;
	//	[Export ("tableView:dragSessionIsRestrictedToDraggingApplication:")]
	//	bool TableView (UITableView tableView, UIDragSession session);
	//}

	//// @protocol UITableViewDropDelegate <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITableViewDropDelegate
	//{
	//	// @required -(void)tableView:(UITableView * _Nonnull)tableView performDropWithCoordinator:(id<UITableViewDropCoordinator> _Nonnull)coordinator;
	//	[Abstract]
	//	[Export ("tableView:performDropWithCoordinator:")]
	//	void TableView (UITableView tableView, UITableViewDropCoordinator coordinator);

	//	// @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView canHandleDropSession:(id<UIDropSession> _Nonnull)session;
	//	[Export ("tableView:canHandleDropSession:")]
	//	bool TableView (UITableView tableView, UIDropSession session);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView dropSessionDidEnter:(id<UIDropSession> _Nonnull)session;
	//	[Export ("tableView:dropSessionDidEnter:")]
	//	void TableView (UITableView tableView, UIDropSession session);

	//	// @optional -(UITableViewDropProposal * _Nonnull)tableView:(UITableView * _Nonnull)tableView dropSessionDidUpdate:(id<UIDropSession> _Nonnull)session withDestinationIndexPath:(NSIndexPath * _Nullable)destinationIndexPath;
	//	[Export ("tableView:dropSessionDidUpdate:withDestinationIndexPath:")]
	//	UITableViewDropProposal TableView (UITableView tableView, UIDropSession session, [NullAllowed] NSIndexPath destinationIndexPath);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView dropSessionDidExit:(id<UIDropSession> _Nonnull)session;
	//	[Export ("tableView:dropSessionDidExit:")]
	//	void TableView (UITableView tableView, UIDropSession session);

	//	// @optional -(void)tableView:(UITableView * _Nonnull)tableView dropSessionDidEnd:(id<UIDropSession> _Nonnull)session;
	//	[Export ("tableView:dropSessionDidEnd:")]
	//	void TableView (UITableView tableView, UIDropSession session);

	//	// @optional -(UIDragPreviewParameters * _Nullable)tableView:(UITableView * _Nonnull)tableView dropPreviewParametersForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("tableView:dropPreviewParametersForRowAtIndexPath:")]
	//	[return: NullAllowed]
	//	UIDragPreviewParameters TableView (UITableView tableView, NSIndexPath indexPath);
	//}

	//// @interface UITableViewDropProposal : UIDropProposal
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(UIDropProposal))]
	//interface UITableViewDropProposal
	//{
	//	// -(instancetype _Nonnull)initWithDropOperation:(UIDropOperation)operation intent:(UITableViewDropIntent)intent;
	//	[Export ("initWithDropOperation:intent:")]
	//	IntPtr Constructor (UIDropOperation operation, UITableViewDropIntent intent);

	//	// @property (readonly, nonatomic) UITableViewDropIntent intent;
	//	[Export ("intent")]
	//	UITableViewDropIntent Intent { get; }
	//}

	//// @protocol UITableViewDropCoordinator <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITableViewDropCoordinator
	//{
	//	// @required @property (readonly, nonatomic) NSArray<id<UITableViewDropItem>> * _Nonnull items;
	//	[Abstract]
	//	[Export ("items")]
	//	UITableViewDropItem[] Items { get; }

	//	// @required @property (readonly, nonatomic) NSIndexPath * _Nullable destinationIndexPath;
	//	[Abstract]
	//	[NullAllowed, Export ("destinationIndexPath")]
	//	NSIndexPath DestinationIndexPath { get; }

	//	// @required @property (readonly, nonatomic) UITableViewDropProposal * _Nonnull proposal;
	//	[Abstract]
	//	[Export ("proposal")]
	//	UITableViewDropProposal Proposal { get; }

	//	// @required @property (readonly, nonatomic) id<UIDropSession> _Nonnull session;
	//	[Abstract]
	//	[Export ("session")]
	//	UIDropSession Session { get; }

	//	// @required -(id<UITableViewDropPlaceholderContext> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toPlaceholder:(UITableViewDropPlaceholder * _Nonnull)placeholder;
	//	[Abstract]
	//	[Export ("dropItem:toPlaceholder:")]
	//	UITableViewDropPlaceholderContext DropItem (UIDragItem dragItem, UITableViewDropPlaceholder placeholder);

	//	// @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Abstract]
	//	[Export ("dropItem:toRowAtIndexPath:")]
	//	UIDragAnimating DropItem (UIDragItem dragItem, NSIndexPath indexPath);

	//	// @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem intoRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath rect:(CGRect)rect;
	//	[Abstract]
	//	[Export ("dropItem:intoRowAtIndexPath:rect:")]
	//	UIDragAnimating DropItem (UIDragItem dragItem, NSIndexPath indexPath, CGRect rect);

	//	// @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toTarget:(UIDragPreviewTarget * _Nonnull)target;
	//	[Abstract]
	//	[Export ("dropItem:toTarget:")]
	//	UIDragAnimating DropItem (UIDragItem dragItem, UIDragPreviewTarget target);
	//}

	//// @interface UITableViewPlaceholder : NSObject
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UITableViewPlaceholder
	//{
	//	// -(instancetype _Nonnull)initWithInsertionIndexPath:(NSIndexPath * _Nonnull)insertionIndexPath reuseIdentifier:(NSString * _Nonnull)reuseIdentifier rowHeight:(CGFloat)rowHeight __attribute__((objc_designated_initializer));
	//	[Export ("initWithInsertionIndexPath:reuseIdentifier:rowHeight:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSIndexPath insertionIndexPath, string reuseIdentifier, nfloat rowHeight);

	//	// @property (copy, nonatomic) void (^ _Nullable)(__kindof UITableViewCell * _Nonnull) cellUpdateHandler;
	//	[NullAllowed, Export ("cellUpdateHandler", ArgumentSemantic.Copy)]
	//	Action<UITableViewCell> CellUpdateHandler { get; set; }
	//}

	//// @interface UITableViewDropPlaceholder : UITableViewPlaceholder
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(UITableViewPlaceholder))]
	//interface UITableViewDropPlaceholder
	//{
	//	// @property (copy, nonatomic) UIDragPreviewParameters * _Nullable (^ _Nullable)(__kindof UITableViewCell * _Nonnull) previewParametersProvider;
	//	[NullAllowed, Export ("previewParametersProvider", ArgumentSemantic.Copy)]
	//	Func<UITableViewCell, UIDragPreviewParameters> PreviewParametersProvider { get; set; }
	//}

	//// @protocol UITableViewDropItem <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITableViewDropItem
	//{
	//	// @required @property (readonly, nonatomic) UIDragItem * _Nonnull dragItem;
	//	[Abstract]
	//	[Export ("dragItem")]
	//	UIDragItem DragItem { get; }

	//	// @required @property (readonly, nonatomic) NSIndexPath * _Nullable sourceIndexPath;
	//	[Abstract]
	//	[NullAllowed, Export ("sourceIndexPath")]
	//	NSIndexPath SourceIndexPath { get; }

	//	// @required @property (readonly, nonatomic) CGSize previewSize;
	//	[Abstract]
	//	[Export ("previewSize")]
	//	CGSize PreviewSize { get; }
	//}

	//// @protocol UITableViewDropPlaceholderContext <UIDragAnimating>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//interface UITableViewDropPlaceholderContext : IUIDragAnimating
	//{
	//	// @required @property (readonly, nonatomic) UIDragItem * _Nonnull dragItem;
	//	[Abstract]
	//	[Export ("dragItem")]
	//	UIDragItem DragItem { get; }

	//	// @required -(BOOL)commitInsertionWithDataSourceUpdates:(void (^ _Nonnull)(NSIndexPath * _Nonnull))dataSourceUpdates;
	//	[Abstract]
	//	[Export ("commitInsertionWithDataSourceUpdates:")]
	//	bool CommitInsertionWithDataSourceUpdates (Action<NSIndexPath> dataSourceUpdates);

	//	// @required -(BOOL)deletePlaceholder;
	//	[Abstract]
	//	[Export ("deletePlaceholder")]
	//	[Verify (MethodToProperty)]
	//	bool DeletePlaceholder { get; }
	//}

	//// @interface UISearchDisplayController : NSObject
	//[Introduced (PlatformName.iOS, 3, 0, message: "UISearchDisplayController has been replaced with UISearchController")]
	//[Deprecated (PlatformName.iOS, 8, 0, message: "UISearchDisplayController has been replaced with UISearchController")]
	//[NoTV]
	//[BaseType (typeof(NSObject))]
	//interface UISearchDisplayController
	//{
	//	// -(instancetype _Nonnull)initWithSearchBar:(UISearchBar * _Nonnull)searchBar contentsController:(UIViewController * _Nonnull)viewController;
	//	[Export ("initWithSearchBar:contentsController:")]
	//	IntPtr Constructor (UISearchBar searchBar, UIViewController viewController);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UISearchDisplayDelegate Delegate { get; set; }

	//	// @property (assign, nonatomic) id<UISearchDisplayDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (getter = isActive, nonatomic) BOOL active;
	//	[Export ("active")]
	//	bool Active { [Bind ("isActive")] get; set; }

	//	// -(void)setActive:(BOOL)visible animated:(BOOL)animated;
	//	[Export ("setActive:animated:")]
	//	void SetActive (bool visible, bool animated);

	//	// @property (readonly, nonatomic) UISearchBar * _Nonnull searchBar;
	//	[Export ("searchBar")]
	//	UISearchBar SearchBar { get; }

	//	// @property (readonly, nonatomic) UIViewController * _Nonnull searchContentsController;
	//	[Export ("searchContentsController")]
	//	UIViewController SearchContentsController { get; }

	//	// @property (readonly, nonatomic) UITableView * _Nonnull searchResultsTableView;
	//	[Export ("searchResultsTableView")]
	//	UITableView SearchResultsTableView { get; }

	//	// @property (nonatomic, weak) id<UITableViewDataSource> _Nullable searchResultsDataSource;
	//	[NullAllowed, Export ("searchResultsDataSource", ArgumentSemantic.Weak)]
	//	UITableViewDataSource SearchResultsDataSource { get; set; }

	//	[Wrap ("WeakSearchResultsDelegate")]
	//	[NullAllowed]
	//	UITableViewDelegate SearchResultsDelegate { get; set; }

	//	// @property (nonatomic, weak) id<UITableViewDelegate> _Nullable searchResultsDelegate;
	//	[NullAllowed, Export ("searchResultsDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakSearchResultsDelegate { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable searchResultsTitle __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("searchResultsTitle")]
	//	string SearchResultsTitle { get; set; }

	//	// @property (assign, nonatomic) BOOL displaysSearchBarInNavigationBar __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("displaysSearchBarInNavigationBar")]
	//	bool DisplaysSearchBarInNavigationBar { get; set; }

	//	// @property (readonly, nonatomic) UINavigationItem * _Nullable navigationItem __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("navigationItem")]
	//	UINavigationItem NavigationItem { get; }
	//}

	//// @protocol UISearchDisplayDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UISearchDisplayDelegate
	//{
	//	// @optional -(void)searchDisplayControllerWillBeginSearch:(UISearchDisplayController * _Nonnull)controller __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayControllerWillBeginSearch:")]
	//	void SearchDisplayControllerWillBeginSearch (UISearchDisplayController controller);

	//	// @optional -(void)searchDisplayControllerDidBeginSearch:(UISearchDisplayController * _Nonnull)controller __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayControllerDidBeginSearch:")]
	//	void SearchDisplayControllerDidBeginSearch (UISearchDisplayController controller);

	//	// @optional -(void)searchDisplayControllerWillEndSearch:(UISearchDisplayController * _Nonnull)controller __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayControllerWillEndSearch:")]
	//	void SearchDisplayControllerWillEndSearch (UISearchDisplayController controller);

	//	// @optional -(void)searchDisplayControllerDidEndSearch:(UISearchDisplayController * _Nonnull)controller __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayControllerDidEndSearch:")]
	//	void SearchDisplayControllerDidEndSearch (UISearchDisplayController controller);

	//	// @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller didLoadSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayController:didLoadSearchResultsTableView:")]
	//	void SearchDisplayController (UISearchDisplayController controller, UITableView tableView);

	//	// @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller willUnloadSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayController:willUnloadSearchResultsTableView:")]
	//	void SearchDisplayController (UISearchDisplayController controller, UITableView tableView);

	//	// @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller willShowSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayController:willShowSearchResultsTableView:")]
	//	void SearchDisplayController (UISearchDisplayController controller, UITableView tableView);

	//	// @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller didShowSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayController:didShowSearchResultsTableView:")]
	//	void SearchDisplayController (UISearchDisplayController controller, UITableView tableView);

	//	// @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller willHideSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayController:willHideSearchResultsTableView:")]
	//	void SearchDisplayController (UISearchDisplayController controller, UITableView tableView);

	//	// @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller didHideSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayController:didHideSearchResultsTableView:")]
	//	void SearchDisplayController (UISearchDisplayController controller, UITableView tableView);

	//	// @optional -(BOOL)searchDisplayController:(UISearchDisplayController * _Nonnull)controller shouldReloadTableForSearchString:(NSString * _Nullable)searchString __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayController:shouldReloadTableForSearchString:")]
	//	bool SearchDisplayController (UISearchDisplayController controller, [NullAllowed] string searchString);

	//	// @optional -(BOOL)searchDisplayController:(UISearchDisplayController * _Nonnull)controller shouldReloadTableForSearchScope:(NSInteger)searchOption __attribute__((availability(ios, introduced=3.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 3, 0)]
	//	[Deprecated (PlatformName.iOS, 8, 0)]
	//	[Export ("searchDisplayController:shouldReloadTableForSearchScope:")]
	//	bool SearchDisplayController (UISearchDisplayController controller, nint searchOption);
	//}

	//// @interface UISegmentedControl : UIControl <NSCoding>
	//[iOS (2,0)]
	//[BaseType (typeof(UIControl))]
	//interface UISegmentedControl : INSCoding
	//{
	//	// -(instancetype _Nonnull)initWithItems:(NSArray * _Nullable)items;
	//	[Export ("initWithItems:")]
	//	[Verify (StronglyTypedNSArray)]
	//	IntPtr Constructor ([NullAllowed] NSObject[] items);

	//	// @property (nonatomic) UISegmentedControlStyle segmentedControlStyle __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "The segmentedControlStyle property no longer has any effect")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "The segmentedControlStyle property no longer has any effect")]
	//	[NoTV]
	//	[Export ("segmentedControlStyle", ArgumentSemantic.Assign)]
	//	UISegmentedControlStyle SegmentedControlStyle { get; set; }

	//	// @property (getter = isMomentary, nonatomic) BOOL momentary;
	//	[Export ("momentary")]
	//	bool Momentary { [Bind ("isMomentary")] get; set; }

	//	// @property (readonly, nonatomic) NSUInteger numberOfSegments;
	//	[Export ("numberOfSegments")]
	//	nuint NumberOfSegments { get; }

	//	// @property (nonatomic) BOOL apportionsSegmentWidthsByContent __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("apportionsSegmentWidthsByContent")]
	//	bool ApportionsSegmentWidthsByContent { get; set; }

	//	// -(void)insertSegmentWithTitle:(NSString * _Nullable)title atIndex:(NSUInteger)segment animated:(BOOL)animated;
	//	[Export ("insertSegmentWithTitle:atIndex:animated:")]
	//	void InsertSegmentWithTitle ([NullAllowed] string title, nuint segment, bool animated);

	//	// -(void)insertSegmentWithImage:(UIImage * _Nullable)image atIndex:(NSUInteger)segment animated:(BOOL)animated;
	//	[Export ("insertSegmentWithImage:atIndex:animated:")]
	//	void InsertSegmentWithImage ([NullAllowed] UIImage image, nuint segment, bool animated);

	//	// -(void)removeSegmentAtIndex:(NSUInteger)segment animated:(BOOL)animated;
	//	[Export ("removeSegmentAtIndex:animated:")]
	//	void RemoveSegmentAtIndex (nuint segment, bool animated);

	//	// -(void)removeAllSegments;
	//	[Export ("removeAllSegments")]
	//	void RemoveAllSegments ();

	//	// -(void)setTitle:(NSString * _Nullable)title forSegmentAtIndex:(NSUInteger)segment;
	//	[Export ("setTitle:forSegmentAtIndex:")]
	//	void SetTitle ([NullAllowed] string title, nuint segment);

	//	// -(NSString * _Nullable)titleForSegmentAtIndex:(NSUInteger)segment;
	//	[Export ("titleForSegmentAtIndex:")]
	//	[return: NullAllowed]
	//	string TitleForSegmentAtIndex (nuint segment);

	//	// -(void)setImage:(UIImage * _Nullable)image forSegmentAtIndex:(NSUInteger)segment;
	//	[Export ("setImage:forSegmentAtIndex:")]
	//	void SetImage ([NullAllowed] UIImage image, nuint segment);

	//	// -(UIImage * _Nullable)imageForSegmentAtIndex:(NSUInteger)segment;
	//	[Export ("imageForSegmentAtIndex:")]
	//	[return: NullAllowed]
	//	UIImage ImageForSegmentAtIndex (nuint segment);

	//	// -(void)setWidth:(CGFloat)width forSegmentAtIndex:(NSUInteger)segment;
	//	[Export ("setWidth:forSegmentAtIndex:")]
	//	void SetWidth (nfloat width, nuint segment);

	//	// -(CGFloat)widthForSegmentAtIndex:(NSUInteger)segment;
	//	[Export ("widthForSegmentAtIndex:")]
	//	nfloat WidthForSegmentAtIndex (nuint segment);

	//	// -(void)setContentOffset:(CGSize)offset forSegmentAtIndex:(NSUInteger)segment;
	//	[Export ("setContentOffset:forSegmentAtIndex:")]
	//	void SetContentOffset (CGSize offset, nuint segment);

	//	// -(CGSize)contentOffsetForSegmentAtIndex:(NSUInteger)segment;
	//	[Export ("contentOffsetForSegmentAtIndex:")]
	//	CGSize ContentOffsetForSegmentAtIndex (nuint segment);

	//	// -(void)setEnabled:(BOOL)enabled forSegmentAtIndex:(NSUInteger)segment;
	//	[Export ("setEnabled:forSegmentAtIndex:")]
	//	void SetEnabled (bool enabled, nuint segment);

	//	// -(BOOL)isEnabledForSegmentAtIndex:(NSUInteger)segment;
	//	[Export ("isEnabledForSegmentAtIndex:")]
	//	bool IsEnabledForSegmentAtIndex (nuint segment);

	//	// @property (nonatomic) NSInteger selectedSegmentIndex;
	//	[Export ("selectedSegmentIndex")]
	//	nint SelectedSegmentIndex { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setBackgroundImage:forState:barMetrics:")]
	//	void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState state, UIBarMetrics barMetrics);

	//	// -(UIImage * _Nullable)backgroundImageForState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("backgroundImageForState:barMetrics:")]
	//	[return: NullAllowed]
	//	UIImage BackgroundImageForState (UIControlState state, UIBarMetrics barMetrics);

	//	// -(void)setDividerImage:(UIImage * _Nullable)dividerImage forLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setDividerImage:forLeftSegmentState:rightSegmentState:barMetrics:")]
	//	void SetDividerImage ([NullAllowed] UIImage dividerImage, UIControlState leftState, UIControlState rightState, UIBarMetrics barMetrics);

	//	// -(UIImage * _Nullable)dividerImageForLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("dividerImageForLeftSegmentState:rightSegmentState:barMetrics:")]
	//	[return: NullAllowed]
	//	UIImage DividerImageForLeftSegmentState (UIControlState leftState, UIControlState rightState, UIBarMetrics barMetrics);

	//	// -(void)setTitleTextAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attributes forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setTitleTextAttributes:forState:")]
	//	void SetTitleTextAttributes ([NullAllowed] NSDictionary<NSString, NSObject> attributes, UIControlState state);

	//	// -(NSDictionary<NSAttributedStringKey,id> * _Nullable)titleTextAttributesForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("titleTextAttributesForState:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> TitleTextAttributesForState (UIControlState state);

	//	// -(void)setContentPositionAdjustment:(UIOffset)adjustment forSegmentType:(UISegmentedControlSegment)leftCenterRightOrAlone barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setContentPositionAdjustment:forSegmentType:barMetrics:")]
	//	void SetContentPositionAdjustment (UIOffset adjustment, UISegmentedControlSegment leftCenterRightOrAlone, UIBarMetrics barMetrics);

	//	// -(UIOffset)contentPositionAdjustmentForSegmentType:(UISegmentedControlSegment)leftCenterRightOrAlone barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("contentPositionAdjustmentForSegmentType:barMetrics:")]
	//	UIOffset ContentPositionAdjustmentForSegmentType (UISegmentedControlSegment leftCenterRightOrAlone, UIBarMetrics barMetrics);
	//}

	//// @interface SpringLoading (UISegmentedControl) <UISpringLoadedInteractionSupporting>
	//[Category]
	//[BaseType (typeof(UISegmentedControl))]
	//interface UISegmentedControl_SpringLoading : IUISpringLoadedInteractionSupporting
	//{
	//}

	//// @interface UISlider : UIControl <NSCoding>
	//[NoTV, iOS (2,0)]
	//[BaseType (typeof(UIControl))]
	//interface UISlider : INSCoding
	//{
	//	// @property (nonatomic) float value;
	//	[Export ("value")]
	//	float Value { get; set; }

	//	// @property (nonatomic) float minimumValue;
	//	[Export ("minimumValue")]
	//	float MinimumValue { get; set; }

	//	// @property (nonatomic) float maximumValue;
	//	[Export ("maximumValue")]
	//	float MaximumValue { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable minimumValueImage;
	//	[NullAllowed, Export ("minimumValueImage", ArgumentSemantic.Strong)]
	//	UIImage MinimumValueImage { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable maximumValueImage;
	//	[NullAllowed, Export ("maximumValueImage", ArgumentSemantic.Strong)]
	//	UIImage MaximumValueImage { get; set; }

	//	// @property (getter = isContinuous, nonatomic) BOOL continuous;
	//	[Export ("continuous")]
	//	bool Continuous { [Bind ("isContinuous")] get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable minimumTrackTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("minimumTrackTintColor", ArgumentSemantic.Strong)]
	//	UIColor MinimumTrackTintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable maximumTrackTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("maximumTrackTintColor", ArgumentSemantic.Strong)]
	//	UIColor MaximumTrackTintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable thumbTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("thumbTintColor", ArgumentSemantic.Strong)]
	//	UIColor ThumbTintColor { get; set; }

	//	// -(void)setValue:(float)value animated:(BOOL)animated;
	//	[Export ("setValue:animated:")]
	//	void SetValue (float value, bool animated);

	//	// -(void)setThumbImage:(UIImage * _Nullable)image forState:(UIControlState)state;
	//	[Export ("setThumbImage:forState:")]
	//	void SetThumbImage ([NullAllowed] UIImage image, UIControlState state);

	//	// -(void)setMinimumTrackImage:(UIImage * _Nullable)image forState:(UIControlState)state;
	//	[Export ("setMinimumTrackImage:forState:")]
	//	void SetMinimumTrackImage ([NullAllowed] UIImage image, UIControlState state);

	//	// -(void)setMaximumTrackImage:(UIImage * _Nullable)image forState:(UIControlState)state;
	//	[Export ("setMaximumTrackImage:forState:")]
	//	void SetMaximumTrackImage ([NullAllowed] UIImage image, UIControlState state);

	//	// -(UIImage * _Nullable)thumbImageForState:(UIControlState)state;
	//	[Export ("thumbImageForState:")]
	//	[return: NullAllowed]
	//	UIImage ThumbImageForState (UIControlState state);

	//	// -(UIImage * _Nullable)minimumTrackImageForState:(UIControlState)state;
	//	[Export ("minimumTrackImageForState:")]
	//	[return: NullAllowed]
	//	UIImage MinimumTrackImageForState (UIControlState state);

	//	// -(UIImage * _Nullable)maximumTrackImageForState:(UIControlState)state;
	//	[Export ("maximumTrackImageForState:")]
	//	[return: NullAllowed]
	//	UIImage MaximumTrackImageForState (UIControlState state);

	//	// @property (readonly, nonatomic) UIImage * _Nullable currentThumbImage;
	//	[NullAllowed, Export ("currentThumbImage")]
	//	UIImage CurrentThumbImage { get; }

	//	// @property (readonly, nonatomic) UIImage * _Nullable currentMinimumTrackImage;
	//	[NullAllowed, Export ("currentMinimumTrackImage")]
	//	UIImage CurrentMinimumTrackImage { get; }

	//	// @property (readonly, nonatomic) UIImage * _Nullable currentMaximumTrackImage;
	//	[NullAllowed, Export ("currentMaximumTrackImage")]
	//	UIImage CurrentMaximumTrackImage { get; }

	//	// -(CGRect)minimumValueImageRectForBounds:(CGRect)bounds;
	//	[Export ("minimumValueImageRectForBounds:")]
	//	CGRect MinimumValueImageRectForBounds (CGRect bounds);

	//	// -(CGRect)maximumValueImageRectForBounds:(CGRect)bounds;
	//	[Export ("maximumValueImageRectForBounds:")]
	//	CGRect MaximumValueImageRectForBounds (CGRect bounds);

	//	// -(CGRect)trackRectForBounds:(CGRect)bounds;
	//	[Export ("trackRectForBounds:")]
	//	CGRect TrackRectForBounds (CGRect bounds);

	//	// -(CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value;
	//	[Export ("thumbRectForBounds:trackRect:value:")]
	//	CGRect ThumbRectForBounds (CGRect bounds, CGRect rect, float value);
	//}

	//// @interface UISplitViewController : UIViewController
	//[iOS (3,2)]
	//[BaseType (typeof(UIViewController))]
	//interface UISplitViewController
	//{
	//	// @property (copy, nonatomic) NSArray<__kindof UIViewController *> * _Nonnull viewControllers;
	//	[Export ("viewControllers", ArgumentSemantic.Copy)]
	//	UIViewController[] ViewControllers { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UISplitViewControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UISplitViewControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic) BOOL presentsWithGesture __attribute__((availability(ios, introduced=5.1)));
	//	[iOS (5, 1)]
	//	[Export ("presentsWithGesture")]
	//	bool PresentsWithGesture { get; set; }

	//	// @property (readonly, getter = isCollapsed, nonatomic) BOOL collapsed __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("collapsed")]
	//	bool Collapsed { [Bind ("isCollapsed")] get; }

	//	// @property (nonatomic) UISplitViewControllerDisplayMode preferredDisplayMode __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("preferredDisplayMode", ArgumentSemantic.Assign)]
	//	UISplitViewControllerDisplayMode PreferredDisplayMode { get; set; }

	//	// @property (readonly, nonatomic) UISplitViewControllerDisplayMode displayMode __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("displayMode")]
	//	UISplitViewControllerDisplayMode DisplayMode { get; }

	//	// @property (readonly, nonatomic) UIBarButtonItem * _Nonnull displayModeButtonItem __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("displayModeButtonItem")]
	//	UIBarButtonItem DisplayModeButtonItem { get; }

	//	// @property (assign, nonatomic) CGFloat preferredPrimaryColumnWidthFraction __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("preferredPrimaryColumnWidthFraction")]
	//	nfloat PreferredPrimaryColumnWidthFraction { get; set; }

	//	// @property (assign, nonatomic) CGFloat minimumPrimaryColumnWidth __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("minimumPrimaryColumnWidth")]
	//	nfloat MinimumPrimaryColumnWidth { get; set; }

	//	// @property (assign, nonatomic) CGFloat maximumPrimaryColumnWidth __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("maximumPrimaryColumnWidth")]
	//	nfloat MaximumPrimaryColumnWidth { get; set; }

	//	// @property (readonly, nonatomic) CGFloat primaryColumnWidth __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8, 0)]
	//	[Export ("primaryColumnWidth")]
	//	nfloat PrimaryColumnWidth { get; }

	//	// @property (nonatomic) UISplitViewControllerPrimaryEdge primaryEdge __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11, 0), iOS (11, 0)]
	//	[Export ("primaryEdge", ArgumentSemantic.Assign)]
	//	UISplitViewControllerPrimaryEdge PrimaryEdge { get; set; }

	//	// -(void)showViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("showViewController:sender:")]
	//	void ShowViewController (UIViewController vc, [NullAllowed] NSObject sender);

	//	// -(void)showDetailViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("showDetailViewController:sender:")]
	//	void ShowDetailViewController (UIViewController vc, [NullAllowed] NSObject sender);
	//}

	//// @protocol UISplitViewControllerDelegate
	//[Protocol, Model]
	//interface UISplitViewControllerDelegate
	//{
	//	// @optional -(void)splitViewController:(UISplitViewController * _Nonnull)svc willChangeToDisplayMode:(UISplitViewControllerDisplayMode)displayMode __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("splitViewController:willChangeToDisplayMode:")]
	//	void SplitViewController (UISplitViewController svc, UISplitViewControllerDisplayMode displayMode);

	//	// @optional -(UISplitViewControllerDisplayMode)targetDisplayModeForActionInSplitViewController:(UISplitViewController * _Nonnull)svc __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("targetDisplayModeForActionInSplitViewController:")]
	//	UISplitViewControllerDisplayMode TargetDisplayModeForActionInSplitViewController (UISplitViewController svc);

	//	// @optional -(BOOL)splitViewController:(UISplitViewController * _Nonnull)splitViewController showViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("splitViewController:showViewController:sender:")]
	//	bool SplitViewController (UISplitViewController splitViewController, UIViewController vc, [NullAllowed] NSObject sender);

	//	// @optional -(BOOL)splitViewController:(UISplitViewController * _Nonnull)splitViewController showDetailViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("splitViewController:showDetailViewController:sender:")]
	//	bool SplitViewController (UISplitViewController splitViewController, UIViewController vc, [NullAllowed] NSObject sender);

	//	// @optional -(UIViewController * _Nullable)primaryViewControllerForCollapsingSplitViewController:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("primaryViewControllerForCollapsingSplitViewController:")]
	//	[return: NullAllowed]
	//	UIViewController PrimaryViewControllerForCollapsingSplitViewController (UISplitViewController splitViewController);

	//	// @optional -(UIViewController * _Nullable)primaryViewControllerForExpandingSplitViewController:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("primaryViewControllerForExpandingSplitViewController:")]
	//	[return: NullAllowed]
	//	UIViewController PrimaryViewControllerForExpandingSplitViewController (UISplitViewController splitViewController);

	//	// @optional -(BOOL)splitViewController:(UISplitViewController * _Nonnull)splitViewController collapseSecondaryViewController:(UIViewController * _Nonnull)secondaryViewController ontoPrimaryViewController:(UIViewController * _Nonnull)primaryViewController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("splitViewController:collapseSecondaryViewController:ontoPrimaryViewController:")]
	//	bool SplitViewController (UISplitViewController splitViewController, UIViewController secondaryViewController, UIViewController primaryViewController);

	//	// @optional -(UIViewController * _Nullable)splitViewController:(UISplitViewController * _Nonnull)splitViewController separateSecondaryViewControllerFromPrimaryViewController:(UIViewController * _Nonnull)primaryViewController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("splitViewController:separateSecondaryViewControllerFromPrimaryViewController:")]
	//	[return: NullAllowed]
	//	UIViewController SplitViewController (UISplitViewController splitViewController, UIViewController primaryViewController);

	//	// @optional -(UIInterfaceOrientationMask)splitViewControllerSupportedInterfaceOrientations:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7,0)]
	//	[Export ("splitViewControllerSupportedInterfaceOrientations:")]
	//	UIInterfaceOrientationMask SplitViewControllerSupportedInterfaceOrientations (UISplitViewController splitViewController);

	//	// @optional -(UIInterfaceOrientation)splitViewControllerPreferredInterfaceOrientationForPresentation:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7,0)]
	//	[Export ("splitViewControllerPreferredInterfaceOrientationForPresentation:")]
	//	UIInterfaceOrientation SplitViewControllerPreferredInterfaceOrientationForPresentation (UISplitViewController splitViewController);

	//	// @optional -(void)splitViewController:(UISplitViewController * _Nonnull)svc willHideViewController:(UIViewController * _Nonnull)aViewController withBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem forPopoverController:(UIPopoverController * _Nonnull)pc __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use splitViewController:willChangeToDisplayMode: and displayModeButtonItem instead")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use splitViewController:willChangeToDisplayMode: and displayModeButtonItem instead")]
	//	[NoTV]
	//	[Export ("splitViewController:willHideViewController:withBarButtonItem:forPopoverController:")]
	//	void SplitViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem barButtonItem, UIPopoverController pc);

	//	// @optional -(void)splitViewController:(UISplitViewController * _Nonnull)svc willShowViewController:(UIViewController * _Nonnull)aViewController invalidatingBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use splitViewController:willChangeToDisplayMode: and displayModeButtonItem instead")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use splitViewController:willChangeToDisplayMode: and displayModeButtonItem instead")]
	//	[NoTV]
	//	[Export ("splitViewController:willShowViewController:invalidatingBarButtonItem:")]
	//	void SplitViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem barButtonItem);

	//	// @optional -(void)splitViewController:(UISplitViewController * _Nonnull)svc popoverController:(UIPopoverController * _Nonnull)pc willPresentViewController:(UIViewController * _Nonnull)aViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "Use splitViewController:willChangeToDisplayMode: instead")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use splitViewController:willChangeToDisplayMode: instead")]
	//	[NoTV]
	//	[Export ("splitViewController:popoverController:willPresentViewController:")]
	//	void SplitViewController (UISplitViewController svc, UIPopoverController pc, UIViewController aViewController);

	//	// @optional -(BOOL)splitViewController:(UISplitViewController * _Nonnull)svc shouldHideViewController:(UIViewController * _Nonnull)vc inOrientation:(UIInterfaceOrientation)orientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use preferredDisplayMode instead")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use preferredDisplayMode instead")]
	//	[NoTV]
	//	[Export ("splitViewController:shouldHideViewController:inOrientation:")]
	//	bool SplitViewController (UISplitViewController svc, UIViewController vc, UIInterfaceOrientation orientation);
	//}

	//// @interface UISplitViewController (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UISplitViewController
	//{
	//	// @property (readonly, nonatomic, strong) UISplitViewController * _Nullable splitViewController;
	//	[NullAllowed, Export ("splitViewController", ArgumentSemantic.Strong)]
	//	UISplitViewController SplitViewController { get; }

	//	// -(void)collapseSecondaryViewController:(UIViewController * _Nonnull)secondaryViewController forSplitViewController:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("collapseSecondaryViewController:forSplitViewController:")]
	//	void CollapseSecondaryViewController (UIViewController secondaryViewController, UISplitViewController splitViewController);

	//	// -(UIViewController * _Nullable)separateSecondaryViewControllerForSplitViewController:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(ios, introduced=8.0)));
	//	[iOS (8,0)]
	//	[Export ("separateSecondaryViewControllerForSplitViewController:")]
	//	[return: NullAllowed]
	//	UIViewController SeparateSecondaryViewControllerForSplitViewController (UISplitViewController splitViewController);
	//}

	//// @interface UIStepper : UIControl
	//[NoTV, iOS (5,0)]
	//[BaseType (typeof(UIControl))]
	//interface UIStepper
	//{
	//	// @property (getter = isContinuous, nonatomic) BOOL continuous;
	//	[Export ("continuous")]
	//	bool Continuous { [Bind ("isContinuous")] get; set; }

	//	// @property (nonatomic) BOOL autorepeat;
	//	[Export ("autorepeat")]
	//	bool Autorepeat { get; set; }

	//	// @property (nonatomic) BOOL wraps;
	//	[Export ("wraps")]
	//	bool Wraps { get; set; }

	//	// @property (nonatomic) double value;
	//	[Export ("value")]
	//	double Value { get; set; }

	//	// @property (nonatomic) double minimumValue;
	//	[Export ("minimumValue")]
	//	double MinimumValue { get; set; }

	//	// @property (nonatomic) double maximumValue;
	//	[Export ("maximumValue")]
	//	double MaximumValue { get; set; }

	//	// @property (nonatomic) double stepValue;
	//	[Export ("stepValue")]
	//	double StepValue { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// -(void)setBackgroundImage:(UIImage * _Nullable)image forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("setBackgroundImage:forState:")]
	//	void SetBackgroundImage ([NullAllowed] UIImage image, UIControlState state);

	//	// -(UIImage * _Nullable)backgroundImageForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("backgroundImageForState:")]
	//	[return: NullAllowed]
	//	UIImage BackgroundImageForState (UIControlState state);

	//	// -(void)setDividerImage:(UIImage * _Nullable)image forLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("setDividerImage:forLeftSegmentState:rightSegmentState:")]
	//	void SetDividerImage ([NullAllowed] UIImage image, UIControlState leftState, UIControlState rightState);

	//	// -(UIImage * _Nullable)dividerImageForLeftSegmentState:(UIControlState)state rightSegmentState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("dividerImageForLeftSegmentState:rightSegmentState:")]
	//	[return: NullAllowed]
	//	UIImage DividerImageForLeftSegmentState (UIControlState state, UIControlState state);

	//	// -(void)setIncrementImage:(UIImage * _Nullable)image forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("setIncrementImage:forState:")]
	//	void SetIncrementImage ([NullAllowed] UIImage image, UIControlState state);

	//	// -(UIImage * _Nullable)incrementImageForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("incrementImageForState:")]
	//	[return: NullAllowed]
	//	UIImage IncrementImageForState (UIControlState state);

	//	// -(void)setDecrementImage:(UIImage * _Nullable)image forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("setDecrementImage:forState:")]
	//	void SetDecrementImage ([NullAllowed] UIImage image, UIControlState state);

	//	// -(UIImage * _Nullable)decrementImageForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("decrementImageForState:")]
	//	[return: NullAllowed]
	//	UIImage DecrementImageForState (UIControlState state);
	//}

	//// @interface UIStoryboard : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIStoryboard
	//{
	//	// +(UIStoryboard * _Nonnull)storyboardWithName:(NSString * _Nonnull)name bundle:(NSBundle * _Nullable)storyboardBundleOrNil;
	//	[Static]
	//	[Export ("storyboardWithName:bundle:")]
	//	UIStoryboard StoryboardWithName (string name, [NullAllowed] NSBundle storyboardBundleOrNil);

	//	// -(__kindof UIViewController * _Nullable)instantiateInitialViewController;
	//	[Export ("instantiateInitialViewController")]
	//	[Verify (MethodToProperty)]
	//	UIViewController InstantiateInitialViewController { get; }

	//	// -(__kindof UIViewController * _Nonnull)instantiateViewControllerWithIdentifier:(NSString * _Nonnull)identifier;
	//	[Export ("instantiateViewControllerWithIdentifier:")]
	//	UIViewController InstantiateViewControllerWithIdentifier (string identifier);
	//}

	//// @interface UIStoryboardSegue : NSObject
	//[iOS (5,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIStoryboardSegue
	//{
	//	// +(instancetype _Nonnull)segueWithIdentifier:(NSString * _Nullable)identifier source:(UIViewController * _Nonnull)source destination:(UIViewController * _Nonnull)destination performHandler:(void (^ _Nonnull)(void))performHandler __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Static]
	//	[Export ("segueWithIdentifier:source:destination:performHandler:")]
	//	UIStoryboardSegue SegueWithIdentifier ([NullAllowed] string identifier, UIViewController source, UIViewController destination, Action performHandler);

	//	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nullable)identifier source:(UIViewController * _Nonnull)source destination:(UIViewController * _Nonnull)destination __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifier:source:destination:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string identifier, UIViewController source, UIViewController destination);

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable identifier;
	//	[NullAllowed, Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (readonly, nonatomic) __kindof UIViewController * _Nonnull sourceViewController;
	//	[Export ("sourceViewController")]
	//	UIViewController SourceViewController { get; }

	//	// @property (readonly, nonatomic) __kindof UIViewController * _Nonnull destinationViewController;
	//	[Export ("destinationViewController")]
	//	UIViewController DestinationViewController { get; }

	//	// -(void)perform;
	//	[Export ("perform")]
	//	void Perform ();
	//}

	//// @interface UIStoryboardUnwindSegueSource : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIStoryboardUnwindSegueSource
	//{
	//	// @property (readonly) UIViewController * _Nonnull sourceViewController;
	//	[Export ("sourceViewController")]
	//	UIViewController SourceViewController { get; }

	//	// @property (readonly) SEL _Nonnull unwindAction;
	//	[Export ("unwindAction")]
	//	Selector UnwindAction { get; }

	//	// @property (readonly) id _Nullable sender;
	//	[NullAllowed, Export ("sender")]
	//	NSObject Sender { get; }
	//}

	//// @interface UIStoryboardPopoverSegue : UIStoryboardSegue
	//[Introduced (PlatformName.iOS, 5, 0, message: "Access destinationViewController.popoverPresentationController from your segue's performHandler or override of -perform")]
	//[Deprecated (PlatformName.iOS, 9, 0, message: "Access destinationViewController.popoverPresentationController from your segue's performHandler or override of -perform")]
	//[BaseType (typeof(UIStoryboardSegue))]
	//interface UIStoryboardPopoverSegue
	//{
	//	// @property (readonly, nonatomic, strong) UIPopoverController * _Nonnull popoverController;
	//	[Export ("popoverController", ArgumentSemantic.Strong)]
	//	UIPopoverController PopoverController { get; }
	//}

	//// @interface UISwitch : UIControl <NSCoding>
	//[NoTV, iOS (2,0)]
	//[BaseType (typeof(UIControl))]
	//interface UISwitch : INSCoding
	//{
	//	// @property (nonatomic, strong) UIColor * _Nullable onTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("onTintColor", ArgumentSemantic.Strong)]
	//	UIColor OnTintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable thumbTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("thumbTintColor", ArgumentSemantic.Strong)]
	//	UIColor ThumbTintColor { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable onImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("onImage", ArgumentSemantic.Strong)]
	//	UIImage OnImage { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable offImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("offImage", ArgumentSemantic.Strong)]
	//	UIImage OffImage { get; set; }

	//	// @property (getter = isOn, nonatomic) BOOL on;
	//	[Export ("on")]
	//	bool On { [Bind ("isOn")] get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)setOn:(BOOL)on animated:(BOOL)animated;
	//	[Export ("setOn:animated:")]
	//	void SetOn (bool on, bool animated);
	//}

	//// @interface UITabBar : UIView
	//[iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UITabBar
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UITabBarDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UITabBarDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (copy, nonatomic) NSArray<UITabBarItem *> * _Nullable items;
	//	[NullAllowed, Export ("items", ArgumentSemantic.Copy)]
	//	UITabBarItem[] Items { get; set; }

	//	// @property (nonatomic, weak) UITabBarItem * _Nullable selectedItem;
	//	[NullAllowed, Export ("selectedItem", ArgumentSemantic.Weak)]
	//	UITabBarItem SelectedItem { get; set; }

	//	// -(void)setItems:(NSArray<UITabBarItem *> * _Nullable)items animated:(BOOL)animated;
	//	[Export ("setItems:animated:")]
	//	void SetItems ([NullAllowed] UITabBarItem[] items, bool animated);

	//	// -(void)beginCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("beginCustomizingItems:")]
	//	void BeginCustomizingItems (UITabBarItem[] items);

	//	// -(BOOL)endCustomizingAnimated:(BOOL)animated __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("endCustomizingAnimated:")]
	//	bool EndCustomizingAnimated (bool animated);

	//	// @property (readonly, getter = isCustomizing, nonatomic) BOOL customizing __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("customizing")]
	//	bool Customizing { [Bind ("isCustomizing")] get; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable barTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("barTintColor", ArgumentSemantic.Strong)]
	//	UIColor BarTintColor { get; set; }

	//	// @property (readwrite, copy, nonatomic) UIColor * _Nullable unselectedItemTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("unselectedItemTintColor", ArgumentSemantic.Copy)]
	//	UIColor UnselectedItemTintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable selectedImageTintColor __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0, deprecated=8.0)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use tintColor")]
	//	[Deprecated (PlatformName.iOS, 8, 0, message: "Use tintColor")]
	//	[NoTV]
	//	[NullAllowed, Export ("selectedImageTintColor", ArgumentSemantic.Strong)]
	//	UIColor SelectedImageTintColor { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable backgroundImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("backgroundImage", ArgumentSemantic.Strong)]
	//	UIImage BackgroundImage { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable selectionIndicatorImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[NullAllowed, Export ("selectionIndicatorImage", ArgumentSemantic.Strong)]
	//	UIImage SelectionIndicatorImage { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable shadowImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[NullAllowed, Export ("shadowImage", ArgumentSemantic.Strong)]
	//	UIImage ShadowImage { get; set; }

	//	// @property (nonatomic) UITabBarItemPositioning itemPositioning __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[Export ("itemPositioning", ArgumentSemantic.Assign)]
	//	UITabBarItemPositioning ItemPositioning { get; set; }

	//	// @property (nonatomic) CGFloat itemWidth __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("itemWidth")]
	//	nfloat ItemWidth { get; set; }

	//	// @property (nonatomic) CGFloat itemSpacing __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("itemSpacing")]
	//	nfloat ItemSpacing { get; set; }

	//	// @property (nonatomic) UIBarStyle barStyle __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7, 0)]
	//	[Export ("barStyle", ArgumentSemantic.Assign)]
	//	UIBarStyle BarStyle { get; set; }

	//	// @property (getter = isTranslucent, nonatomic) BOOL translucent __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("translucent")]
	//	bool Translucent { [Bind ("isTranslucent")] get; set; }
	//}

	//// @protocol UITabBarDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITabBarDelegate
	//{
	//	// @optional -(void)tabBar:(UITabBar * _Nonnull)tabBar didSelectItem:(UITabBarItem * _Nonnull)item;
	//	[Export ("tabBar:didSelectItem:")]
	//	void DidSelectItem (UITabBar tabBar, UITabBarItem item);

	//	// @optional -(void)tabBar:(UITabBar * _Nonnull)tabBar willBeginCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("tabBar:willBeginCustomizingItems:")]
	//	void WillBeginCustomizingItems (UITabBar tabBar, UITabBarItem[] items);

	//	// @optional -(void)tabBar:(UITabBar * _Nonnull)tabBar didBeginCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("tabBar:didBeginCustomizingItems:")]
	//	void DidBeginCustomizingItems (UITabBar tabBar, UITabBarItem[] items);

	//	// @optional -(void)tabBar:(UITabBar * _Nonnull)tabBar willEndCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items changed:(BOOL)changed __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("tabBar:willEndCustomizingItems:changed:")]
	//	void WillEndCustomizingItems (UITabBar tabBar, UITabBarItem[] items, bool changed);

	//	// @optional -(void)tabBar:(UITabBar * _Nonnull)tabBar didEndCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items changed:(BOOL)changed __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("tabBar:didEndCustomizingItems:changed:")]
	//	void DidEndCustomizingItems (UITabBar tabBar, UITabBarItem[] items, bool changed);
	//}

	//// @interface SpringLoading (UITabBar) <UISpringLoadedInteractionSupporting>
	//[Category]
	//[BaseType (typeof(UITabBar))]
	//interface UITabBar_SpringLoading : IUISpringLoadedInteractionSupporting
	//{
	//}

	//// @interface UITabBarController : UIViewController <UITabBarDelegate, NSCoding>
	//[iOS (2,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UITabBarController : IUITabBarDelegate, INSCoding
	//{
	//	// @property (copy, nonatomic) NSArray<__kindof UIViewController *> * _Nullable viewControllers;
	//	[NullAllowed, Export ("viewControllers", ArgumentSemantic.Copy)]
	//	UIViewController[] ViewControllers { get; set; }

	//	// -(void)setViewControllers:(NSArray<__kindof UIViewController *> * _Nullable)viewControllers animated:(BOOL)animated;
	//	[Export ("setViewControllers:animated:")]
	//	void SetViewControllers ([NullAllowed] UIViewController[] viewControllers, bool animated);

	//	// @property (assign, nonatomic) __kindof UIViewController * _Nullable selectedViewController;
	//	[Export ("selectedViewController", ArgumentSemantic.Assign)]
	//	UIViewController SelectedViewController { get; set; }

	//	// @property (nonatomic) NSUInteger selectedIndex;
	//	[Export ("selectedIndex")]
	//	nuint SelectedIndex { get; set; }

	//	// @property (readonly, nonatomic) UINavigationController * _Nonnull moreNavigationController __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("moreNavigationController")]
	//	UINavigationController MoreNavigationController { get; }

	//	// @property (copy, nonatomic) NSArray<__kindof UIViewController *> * _Nullable customizableViewControllers __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[NullAllowed, Export ("customizableViewControllers", ArgumentSemantic.Copy)]
	//	UIViewController[] CustomizableViewControllers { get; set; }

	//	// @property (readonly, nonatomic) UITabBar * _Nonnull tabBar __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("tabBar")]
	//	UITabBar TabBar { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UITabBarControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UITabBarControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }
	//}

	//// @protocol UITabBarControllerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITabBarControllerDelegate
	//{
	//	// @optional -(BOOL)tabBarController:(UITabBarController * _Nonnull)tabBarController shouldSelectViewController:(UIViewController * _Nonnull)viewController __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3,0)]
	//	[Export ("tabBarController:shouldSelectViewController:")]
	//	bool TabBarController (UITabBarController tabBarController, UIViewController viewController);

	//	// @optional -(void)tabBarController:(UITabBarController * _Nonnull)tabBarController didSelectViewController:(UIViewController * _Nonnull)viewController;
	//	[Export ("tabBarController:didSelectViewController:")]
	//	void TabBarController (UITabBarController tabBarController, UIViewController viewController);

	//	// @optional -(void)tabBarController:(UITabBarController * _Nonnull)tabBarController willBeginCustomizingViewControllers:(NSArray<__kindof UIViewController *> * _Nonnull)viewControllers __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3,0)]
	//	[Export ("tabBarController:willBeginCustomizingViewControllers:")]
	//	void TabBarController (UITabBarController tabBarController, UIViewController[] viewControllers);

	//	// @optional -(void)tabBarController:(UITabBarController * _Nonnull)tabBarController willEndCustomizingViewControllers:(NSArray<__kindof UIViewController *> * _Nonnull)viewControllers changed:(BOOL)changed __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3,0)]
	//	[Export ("tabBarController:willEndCustomizingViewControllers:changed:")]
	//	void TabBarController (UITabBarController tabBarController, UIViewController[] viewControllers, bool changed);

	//	// @optional -(void)tabBarController:(UITabBarController * _Nonnull)tabBarController didEndCustomizingViewControllers:(NSArray<__kindof UIViewController *> * _Nonnull)viewControllers changed:(BOOL)changed __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("tabBarController:didEndCustomizingViewControllers:changed:")]
	//	void TabBarController (UITabBarController tabBarController, UIViewController[] viewControllers, bool changed);

	//	// @optional -(UIInterfaceOrientationMask)tabBarControllerSupportedInterfaceOrientations:(UITabBarController * _Nonnull)tabBarController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7,0)]
	//	[Export ("tabBarControllerSupportedInterfaceOrientations:")]
	//	UIInterfaceOrientationMask TabBarControllerSupportedInterfaceOrientations (UITabBarController tabBarController);

	//	// @optional -(UIInterfaceOrientation)tabBarControllerPreferredInterfaceOrientationForPresentation:(UITabBarController * _Nonnull)tabBarController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0)));
	//	[NoTV, iOS (7,0)]
	//	[Export ("tabBarControllerPreferredInterfaceOrientationForPresentation:")]
	//	UIInterfaceOrientation TabBarControllerPreferredInterfaceOrientationForPresentation (UITabBarController tabBarController);

	//	// @optional -(id<UIViewControllerInteractiveTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController interactionControllerForAnimationController:(id<UIViewControllerAnimatedTransitioning> _Nonnull)animationController __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("tabBarController:interactionControllerForAnimationController:")]
	//	[return: NullAllowed]
	//	UIViewControllerInteractiveTransitioning TabBarController (UITabBarController tabBarController, UIViewControllerAnimatedTransitioning animationController);

	//	// @optional -(id<UIViewControllerAnimatedTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController animationControllerForTransitionFromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("tabBarController:animationControllerForTransitionFromViewController:toViewController:")]
	//	[return: NullAllowed]
	//	UIViewControllerAnimatedTransitioning TabBarController (UITabBarController tabBarController, UIViewController fromVC, UIViewController toVC);
	//}

	//// @interface UITabBarControllerItem (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_UITabBarControllerItem
	//{
	//	// @property (nonatomic, strong) UITabBarItem * _Null_unspecified tabBarItem;
	//	[Export ("tabBarItem", ArgumentSemantic.Strong)]
	//	UITabBarItem TabBarItem { get; set; }

	//	// @property (readonly, nonatomic, strong) UITabBarController * _Nullable tabBarController;
	//	[NullAllowed, Export ("tabBarController", ArgumentSemantic.Strong)]
	//	UITabBarController TabBarController { get; }
	//}

	//// @interface UITabBarItem : UIBarItem
	//[iOS (2,0)]
	//[BaseType (typeof(UIBarItem))]
	//interface UITabBarItem
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(instancetype _Nonnull)initWithTitle:(NSString * _Nullable)title image:(UIImage * _Nullable)image tag:(NSInteger)tag;
	//	[Export ("initWithTitle:image:tag:")]
	//	IntPtr Constructor ([NullAllowed] string title, [NullAllowed] UIImage image, nint tag);

	//	// -(instancetype _Nonnull)initWithTitle:(NSString * _Nullable)title image:(UIImage * _Nullable)image selectedImage:(UIImage * _Nullable)selectedImage __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("initWithTitle:image:selectedImage:")]
	//	IntPtr Constructor ([NullAllowed] string title, [NullAllowed] UIImage image, [NullAllowed] UIImage selectedImage);

	//	// -(instancetype _Nonnull)initWithTabBarSystemItem:(UITabBarSystemItem)systemItem tag:(NSInteger)tag;
	//	[Export ("initWithTabBarSystemItem:tag:")]
	//	IntPtr Constructor (UITabBarSystemItem systemItem, nint tag);

	//	// @property (nonatomic, strong) UIImage * _Nullable selectedImage __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("selectedImage", ArgumentSemantic.Strong)]
	//	UIImage SelectedImage { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable badgeValue;
	//	[NullAllowed, Export ("badgeValue")]
	//	string BadgeValue { get; set; }

	//	// -(void)setFinishedSelectedImage:(UIImage * _Nullable)selectedImage withFinishedUnselectedImage:(UIImage * _Nullable)unselectedImage __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 5, 0, message: "Use initWithTitle:image:selectedImage: or the image and selectedImage properties along with UIImageRenderingModeAlwaysOriginal")]
	//	[Deprecated (PlatformName.iOS, 7, 0, message: "Use initWithTitle:image:selectedImage: or the image and selectedImage properties along with UIImageRenderingModeAlwaysOriginal")]
	//	[NoTV]
	//	[Export ("setFinishedSelectedImage:withFinishedUnselectedImage:")]
	//	void SetFinishedSelectedImage ([NullAllowed] UIImage selectedImage, [NullAllowed] UIImage unselectedImage);

	//	// -(UIImage * _Nullable)finishedSelectedImage __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 5, 0)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("finishedSelectedImage")]
	//	[Verify (MethodToProperty)]
	//	UIImage FinishedSelectedImage { get; }

	//	// -(UIImage * _Nullable)finishedUnselectedImage __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 5, 0)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoTV]
	//	[NullAllowed, Export ("finishedUnselectedImage")]
	//	[Verify (MethodToProperty)]
	//	UIImage FinishedUnselectedImage { get; }

	//	// @property (assign, readwrite, nonatomic) UIOffset titlePositionAdjustment __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("titlePositionAdjustment", ArgumentSemantic.Assign)]
	//	UIOffset TitlePositionAdjustment { get; set; }

	//	// @property (readwrite, copy, nonatomic) UIColor * _Nullable badgeColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[NullAllowed, Export ("badgeColor", ArgumentSemantic.Copy)]
	//	UIColor BadgeColor { get; set; }

	//	// -(void)setBadgeTextAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)textAttributes forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("setBadgeTextAttributes:forState:")]
	//	void SetBadgeTextAttributes ([NullAllowed] NSDictionary<NSString, NSObject> textAttributes, UIControlState state);

	//	// -(NSDictionary<NSAttributedStringKey,id> * _Nullable)badgeTextAttributesForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("badgeTextAttributesForState:")]
	//	[return: NullAllowed]
	//	NSDictionary<NSString, NSObject> BadgeTextAttributesForState (UIControlState state);
	//}

	//// @interface SpringLoading (UITabBarItem) <UISpringLoadedInteractionSupporting>
	//[Category]
	//[BaseType (typeof(UITabBarItem))]
	//interface UITabBarItem_SpringLoading : IUISpringLoadedInteractionSupporting
	//{
	//}

	//// @interface UITableViewHeaderFooterView : UIView
	//[iOS (6,0)]
	//[BaseType (typeof(UIView))]
	//interface UITableViewHeaderFooterView
	//{
	//	// -(instancetype _Nonnull)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((objc_designated_initializer));
	//	[Export ("initWithReuseIdentifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string reuseIdentifier);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic, strong) UILabel * _Nullable textLabel;
	//	[NullAllowed, Export ("textLabel", ArgumentSemantic.Strong)]
	//	UILabel TextLabel { get; }

	//	// @property (readonly, nonatomic, strong) UILabel * _Nullable detailTextLabel;
	//	[NullAllowed, Export ("detailTextLabel", ArgumentSemantic.Strong)]
	//	UILabel DetailTextLabel { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull contentView;
	//	[Export ("contentView", ArgumentSemantic.Strong)]
	//	UIView ContentView { get; }

	//	// @property (nonatomic, strong) UIView * _Nullable backgroundView;
	//	[NullAllowed, Export ("backgroundView", ArgumentSemantic.Strong)]
	//	UIView BackgroundView { get; set; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable reuseIdentifier;
	//	[NullAllowed, Export ("reuseIdentifier")]
	//	string ReuseIdentifier { get; }

	//	// -(void)prepareForReuse __attribute__((objc_requires_super));
	//	[Export ("prepareForReuse")]
	//	[RequiresSuper]
	//	void PrepareForReuse ();
	//}

	//// @interface UITableViewController : UIViewController <UITableViewDelegate, UITableViewDataSource>
	//[iOS (2,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UITableViewController : IUITableViewDelegate, IUITableViewDataSource
	//{
	//	// -(instancetype _Nonnull)initWithStyle:(UITableViewStyle)style __attribute__((objc_designated_initializer));
	//	[Export ("initWithStyle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UITableViewStyle style);

	//	// -(instancetype _Nonnull)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil __attribute__((objc_designated_initializer));
	//	[Export ("initWithNibName:bundle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string nibNameOrNil, [NullAllowed] NSBundle nibBundleOrNil);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (nonatomic, strong) UITableView * _Null_unspecified tableView;
	//	[Export ("tableView", ArgumentSemantic.Strong)]
	//	UITableView TableView { get; set; }

	//	// @property (nonatomic) BOOL clearsSelectionOnViewWillAppear __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[Export ("clearsSelectionOnViewWillAppear")]
	//	bool ClearsSelectionOnViewWillAppear { get; set; }

	//	// @property (nonatomic, strong) UIRefreshControl * _Nullable refreshControl __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0)));
	//	[NoTV, iOS (6, 0)]
	//	[NullAllowed, Export ("refreshControl", ArgumentSemantic.Strong)]
	//	UIRefreshControl RefreshControl { get; set; }
	//}

	//// @interface UITextChecker : NSObject
	//[iOS (3,2)]
	//[BaseType (typeof(NSObject))]
	//interface UITextChecker
	//{
	//	// -(NSRange)rangeOfMisspelledWordInString:(NSString * _Nonnull)stringToCheck range:(NSRange)range startingAt:(NSInteger)startingOffset wrap:(BOOL)wrapFlag language:(NSString * _Nonnull)language;
	//	[Export ("rangeOfMisspelledWordInString:range:startingAt:wrap:language:")]
	//	NSRange RangeOfMisspelledWordInString (string stringToCheck, NSRange range, nint startingOffset, bool wrapFlag, string language);

	//	// -(NSArray<NSString *> * _Nullable)guessesForWordRange:(NSRange)range inString:(NSString * _Nonnull)string language:(NSString * _Nonnull)language;
	//	[Export ("guessesForWordRange:inString:language:")]
	//	[return: NullAllowed]
	//	string[] GuessesForWordRange (NSRange range, string @string, string language);

	//	// -(NSArray<NSString *> * _Nullable)completionsForPartialWordRange:(NSRange)range inString:(NSString * _Nonnull)string language:(NSString * _Nonnull)language;
	//	[Export ("completionsForPartialWordRange:inString:language:")]
	//	[return: NullAllowed]
	//	string[] CompletionsForPartialWordRange (NSRange range, string @string, string language);

	//	// -(void)ignoreWord:(NSString * _Nonnull)wordToIgnore;
	//	[Export ("ignoreWord:")]
	//	void IgnoreWord (string wordToIgnore);

	//	// @property (nonatomic, strong) NSArray<NSString *> * _Nullable ignoredWords;
	//	[NullAllowed, Export ("ignoredWords", ArgumentSemantic.Strong)]
	//	string[] IgnoredWords { get; set; }

	//	// +(void)learnWord:(NSString * _Nonnull)word;
	//	[Static]
	//	[Export ("learnWord:")]
	//	void LearnWord (string word);

	//	// +(BOOL)hasLearnedWord:(NSString * _Nonnull)word;
	//	[Static]
	//	[Export ("hasLearnedWord:")]
	//	bool HasLearnedWord (string word);

	//	// +(void)unlearnWord:(NSString * _Nonnull)word;
	//	[Static]
	//	[Export ("unlearnWord:")]
	//	void UnlearnWord (string word);

	//	// @property (readonly, nonatomic, class) NSArray<NSString *> * _Nonnull availableLanguages;
	//	[Static]
	//	[Export ("availableLanguages")]
	//	string[] AvailableLanguages { get; }
	//}

	//// @protocol UITextViewDelegate <NSObject, UIScrollViewDelegate>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UITextViewDelegate : IUIScrollViewDelegate
	//{
	//	// @optional -(BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView;
	//	[Export ("textViewShouldBeginEditing:")]
	//	bool TextViewShouldBeginEditing (UITextView textView);

	//	// @optional -(BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView;
	//	[Export ("textViewShouldEndEditing:")]
	//	bool TextViewShouldEndEditing (UITextView textView);

	//	// @optional -(void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
	//	[Export ("textViewDidBeginEditing:")]
	//	void TextViewDidBeginEditing (UITextView textView);

	//	// @optional -(void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
	//	[Export ("textViewDidEndEditing:")]
	//	void TextViewDidEndEditing (UITextView textView);

	//	// @optional -(BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text;
	//	[Export ("textView:shouldChangeTextInRange:replacementText:")]
	//	bool TextView (UITextView textView, NSRange range, string text);

	//	// @optional -(void)textViewDidChange:(UITextView * _Nonnull)textView;
	//	[Export ("textViewDidChange:")]
	//	void TextViewDidChange (UITextView textView);

	//	// @optional -(void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
	//	[Export ("textViewDidChangeSelection:")]
	//	void TextViewDidChangeSelection (UITextView textView);

	//	// @optional -(BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("textView:shouldInteractWithURL:inRange:interaction:")]
	//	bool TextView (UITextView textView, NSUrl URL, NSRange characterRange, UITextItemInteraction interaction);

	//	// @optional -(BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("textView:shouldInteractWithTextAttachment:inRange:interaction:")]
	//	bool TextView (UITextView textView, NSTextAttachment textAttachment, NSRange characterRange, UITextItemInteraction interaction);

	//	// @optional -(BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange __attribute__((availability(ios, introduced=7.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 7, 0, message: "Use textView:shouldInteractWithURL:inRange:forInteractionType: instead")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use textView:shouldInteractWithURL:inRange:forInteractionType: instead")]
	//	[Export ("textView:shouldInteractWithURL:inRange:")]
	//	bool TextView (UITextView textView, NSUrl URL, NSRange characterRange);

	//	// @optional -(BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange __attribute__((availability(ios, introduced=7.0, deprecated=10.0)));
	//	[Introduced (PlatformName.iOS, 7, 0, message: "Use textView:shouldInteractWithTextAttachment:inRange:forInteractionType: instead")]
	//	[Deprecated (PlatformName.iOS, 10, 0, message: "Use textView:shouldInteractWithTextAttachment:inRange:forInteractionType: instead")]
	//	[Export ("textView:shouldInteractWithTextAttachment:inRange:")]
	//	bool TextView (UITextView textView, NSTextAttachment textAttachment, NSRange characterRange);
	//}

	//// @interface UITextView : UIScrollView <UITextInput, UIContentSizeCategoryAdjusting>
	//[iOS (2,0)]
	//[BaseType (typeof(UIScrollView))]
	//interface UITextView : IUITextInput, IUIContentSizeCategoryAdjusting
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UITextViewDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UITextViewDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (copy, nonatomic) NSString * _Null_unspecified text;
	//	[Export ("text")]
	//	string Text { get; set; }

	//	// @property (nonatomic, strong) UIFont * _Nullable font;
	//	[NullAllowed, Export ("font", ArgumentSemantic.Strong)]
	//	UIFont Font { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable textColor;
	//	[NullAllowed, Export ("textColor", ArgumentSemantic.Strong)]
	//	UIColor TextColor { get; set; }

	//	// @property (nonatomic) NSTextAlignment textAlignment;
	//	[Export ("textAlignment", ArgumentSemantic.Assign)]
	//	NSTextAlignment TextAlignment { get; set; }

	//	// @property (nonatomic) NSRange selectedRange;
	//	[Export ("selectedRange", ArgumentSemantic.Assign)]
	//	NSRange SelectedRange { get; set; }

	//	// @property (getter = isEditable, nonatomic) BOOL editable __attribute__((availability(tvos, unavailable)));
	//	[NoTV]
	//	[Export ("editable")]
	//	bool Editable { [Bind ("isEditable")] get; set; }

	//	// @property (getter = isSelectable, nonatomic) BOOL selectable __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("selectable")]
	//	bool Selectable { [Bind ("isSelectable")] get; set; }

	//	// @property (nonatomic) UIDataDetectorTypes dataDetectorTypes __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3.0)));
	//	[NoTV, iOS (3, 0)]
	//	[Export ("dataDetectorTypes", ArgumentSemantic.Assign)]
	//	UIDataDetectorTypes DataDetectorTypes { get; set; }

	//	// @property (nonatomic) BOOL allowsEditingTextAttributes __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("allowsEditingTextAttributes")]
	//	bool AllowsEditingTextAttributes { get; set; }

	//	// @property (copy) NSAttributedString * _Null_unspecified attributedText __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("attributedText", ArgumentSemantic.Copy)]
	//	NSAttributedString AttributedText { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nonnull typingAttributes __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("typingAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> TypingAttributes { get; set; }

	//	// -(void)scrollRangeToVisible:(NSRange)range;
	//	[Export ("scrollRangeToVisible:")]
	//	void ScrollRangeToVisible (NSRange range);

	//	// @property (readwrite, strong) UIView * _Nullable inputView;
	//	[NullAllowed, Export ("inputView", ArgumentSemantic.Strong)]
	//	UIView InputView { get; set; }

	//	// @property (readwrite, strong) UIView * _Nullable inputAccessoryView;
	//	[NullAllowed, Export ("inputAccessoryView", ArgumentSemantic.Strong)]
	//	UIView InputAccessoryView { get; set; }

	//	// @property (nonatomic) BOOL clearsOnInsertion __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("clearsOnInsertion")]
	//	bool ClearsOnInsertion { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer __attribute__((objc_designated_initializer)) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("initWithFrame:textContainer:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame, [NullAllowed] NSTextContainer textContainer);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic) NSTextContainer * _Nonnull textContainer __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("textContainer")]
	//	NSTextContainer TextContainer { get; }

	//	// @property (assign, nonatomic) UIEdgeInsets textContainerInset __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("textContainerInset", ArgumentSemantic.Assign)]
	//	UIEdgeInsets TextContainerInset { get; set; }

	//	// @property (readonly, nonatomic) NSLayoutManager * _Nonnull layoutManager __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("layoutManager")]
	//	NSLayoutManager LayoutManager { get; }

	//	// @property (readonly, nonatomic, strong) NSTextStorage * _Nonnull textStorage __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("textStorage", ArgumentSemantic.Strong)]
	//	NSTextStorage TextStorage { get; }

	//	// @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Null_unspecified linkTextAttributes __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("linkTextAttributes", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> LinkTextAttributes { get; set; }
	//}

	//// @interface  (UITextView) <UITextDraggable, UITextDroppable, UITextPasteConfigurationSupporting>
	//[Category]
	//[BaseType (typeof(UITextView))]
	//interface UITextView_ : IUITextDraggable, IUITextDroppable, IUITextPasteConfigurationSupporting
	//{
	//}

	//// @interface UIToolbar : UIView <UIBarPositioning>
	//[NoTV, iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UIToolbar : IUIBarPositioning
	//{
	//	// @property (nonatomic) UIBarStyle barStyle __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector")));
	//	[NoTV]
	//	[Export ("barStyle", ArgumentSemantic.Assign)]
	//	UIBarStyle BarStyle { get; set; }

	//	// @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable items;
	//	[NullAllowed, Export ("items", ArgumentSemantic.Copy)]
	//	UIBarButtonItem[] Items { get; set; }

	//	// @property (getter = isTranslucent, assign, nonatomic) BOOL translucent __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("translucent")]
	//	bool Translucent { [Bind ("isTranslucent")] get; set; }

	//	// -(void)setItems:(NSArray<UIBarButtonItem *> * _Nullable)items animated:(BOOL)animated;
	//	[Export ("setItems:animated:")]
	//	void SetItems ([NullAllowed] UIBarButtonItem[] items, bool animated);

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable barTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("barTintColor", ArgumentSemantic.Strong)]
	//	UIColor BarTintColor { get; set; }

	//	// -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forToolbarPosition:(UIBarPosition)topOrBottom barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("setBackgroundImage:forToolbarPosition:barMetrics:")]
	//	void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIBarPosition topOrBottom, UIBarMetrics barMetrics);

	//	// -(UIImage * _Nullable)backgroundImageForToolbarPosition:(UIBarPosition)topOrBottom barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5,0)]
	//	[Export ("backgroundImageForToolbarPosition:barMetrics:")]
	//	[return: NullAllowed]
	//	UIImage BackgroundImageForToolbarPosition (UIBarPosition topOrBottom, UIBarMetrics barMetrics);

	//	// -(void)setShadowImage:(UIImage * _Nullable)shadowImage forToolbarPosition:(UIBarPosition)topOrBottom __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("setShadowImage:forToolbarPosition:")]
	//	void SetShadowImage ([NullAllowed] UIImage shadowImage, UIBarPosition topOrBottom);

	//	// -(UIImage * _Nullable)shadowImageForToolbarPosition:(UIBarPosition)topOrBottom __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("shadowImageForToolbarPosition:")]
	//	[return: NullAllowed]
	//	UIImage ShadowImageForToolbarPosition (UIBarPosition topOrBottom);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIToolbarDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIToolbarDelegate> _Nullable delegate __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }
	//}

	//// @protocol UIToolbarDelegate <UIBarPositioningDelegate>
	//[NoTV]
	//[Protocol, Model]
	//interface UIToolbarDelegate : IUIBarPositioningDelegate
	//{
	//}

	//// @interface UIVideoEditorController : UINavigationController
	//[NoTV, iOS (3,1)]
	//[BaseType (typeof(UINavigationController))]
	//interface UIVideoEditorController
	//{
	//	// +(BOOL)canEditVideoAtPath:(NSString * _Nonnull)videoPath __attribute__((availability(ios, introduced=3.1)));
	//	[iOS (3,1)]
	//	[Static]
	//	[Export ("canEditVideoAtPath:")]
	//	bool CanEditVideoAtPath (string videoPath);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSObject<UINavigationControllerDelegate, UIVideoEditorControllerDelegate> Delegate { get; set; }

	//	// @property (assign, nonatomic) id<UINavigationControllerDelegate,UIVideoEditorControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull videoPath;
	//	[Export ("videoPath")]
	//	string VideoPath { get; set; }

	//	// @property (nonatomic) NSTimeInterval videoMaximumDuration;
	//	[Export ("videoMaximumDuration")]
	//	double VideoMaximumDuration { get; set; }

	//	// @property (nonatomic) UIImagePickerControllerQualityType videoQuality;
	//	[Export ("videoQuality", ArgumentSemantic.Assign)]
	//	UIImagePickerControllerQualityType VideoQuality { get; set; }
	//}

	//// @protocol UIVideoEditorControllerDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIVideoEditorControllerDelegate
	//{
	//	// @optional -(void)videoEditorController:(UIVideoEditorController * _Nonnull)editor didSaveEditedVideoToPath:(NSString * _Nonnull)editedVideoPath;
	//	[Export ("videoEditorController:didSaveEditedVideoToPath:")]
	//	void VideoEditorController (UIVideoEditorController editor, string editedVideoPath);

	//	// @optional -(void)videoEditorController:(UIVideoEditorController * _Nonnull)editor didFailWithError:(NSError * _Nonnull)error;
	//	[Export ("videoEditorController:didFailWithError:")]
	//	void VideoEditorController (UIVideoEditorController editor, NSError error);

	//	// @optional -(void)videoEditorControllerDidCancel:(UIVideoEditorController * _Nonnull)editor;
	//	[Export ("videoEditorControllerDidCancel:")]
	//	void VideoEditorControllerDidCancel (UIVideoEditorController editor);
	//}

	//// @interface UIWebView : UIView <NSCoding, UIScrollViewDelegate>
	//[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported; please adopt WKWebView.")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "No longer supported; please adopt WKWebView.")]
	//[NoTV, NoMac]
	//[BaseType (typeof(UIView))]
	//interface UIWebView : INSCoding, IUIScrollViewDelegate
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIWebViewDelegate Delegate { get; set; }

	//	// @property (assign, nonatomic) id<UIWebViewDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, nonatomic, strong) UIScrollView * _Nonnull scrollView __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("scrollView", ArgumentSemantic.Strong)]
	//	UIScrollView ScrollView { get; }

	//	// -(void)loadRequest:(NSURLRequest * _Nonnull)request;
	//	[Export ("loadRequest:")]
	//	void LoadRequest (NSUrlRequest request);

	//	// -(void)loadHTMLString:(NSString * _Nonnull)string baseURL:(NSURL * _Nullable)baseURL;
	//	[Export ("loadHTMLString:baseURL:")]
	//	void LoadHTMLString (string @string, [NullAllowed] NSUrl baseURL);

	//	// -(void)loadData:(NSData * _Nonnull)data MIMEType:(NSString * _Nonnull)MIMEType textEncodingName:(NSString * _Nonnull)textEncodingName baseURL:(NSURL * _Nonnull)baseURL;
	//	[Export ("loadData:MIMEType:textEncodingName:baseURL:")]
	//	void LoadData (NSData data, string MIMEType, string textEncodingName, NSUrl baseURL);

	//	// @property (readonly, nonatomic, strong) NSURLRequest * _Nullable request;
	//	[NullAllowed, Export ("request", ArgumentSemantic.Strong)]
	//	NSUrlRequest Request { get; }

	//	// -(void)reload;
	//	[Export ("reload")]
	//	void Reload ();

	//	// -(void)stopLoading;
	//	[Export ("stopLoading")]
	//	void StopLoading ();

	//	// -(void)goBack;
	//	[Export ("goBack")]
	//	void GoBack ();

	//	// -(void)goForward;
	//	[Export ("goForward")]
	//	void GoForward ();

	//	// @property (readonly, getter = canGoBack, nonatomic) BOOL canGoBack;
	//	[Export ("canGoBack")]
	//	bool CanGoBack { [Bind ("canGoBack")] get; }

	//	// @property (readonly, getter = canGoForward, nonatomic) BOOL canGoForward;
	//	[Export ("canGoForward")]
	//	bool CanGoForward { [Bind ("canGoForward")] get; }

	//	// @property (readonly, getter = isLoading, nonatomic) BOOL loading;
	//	[Export ("loading")]
	//	bool Loading { [Bind ("isLoading")] get; }

	//	// -(NSString * _Nullable)stringByEvaluatingJavaScriptFromString:(NSString * _Nonnull)script;
	//	[Export ("stringByEvaluatingJavaScriptFromString:")]
	//	[return: NullAllowed]
	//	string StringByEvaluatingJavaScriptFromString (string script);

	//	// @property (nonatomic) BOOL scalesPageToFit;
	//	[Export ("scalesPageToFit")]
	//	bool ScalesPageToFit { get; set; }

	//	// @property (nonatomic) BOOL detectsPhoneNumbers __attribute__((availability(ios, introduced=2.0, deprecated=3.0)));
	//	[Introduced (PlatformName.iOS, 2, 0)]
	//	[Deprecated (PlatformName.iOS, 3, 0)]
	//	[Export ("detectsPhoneNumbers")]
	//	bool DetectsPhoneNumbers { get; set; }

	//	// @property (nonatomic) UIDataDetectorTypes dataDetectorTypes __attribute__((availability(ios, introduced=3.0)));
	//	[iOS (3, 0)]
	//	[Export ("dataDetectorTypes", ArgumentSemantic.Assign)]
	//	UIDataDetectorTypes DataDetectorTypes { get; set; }

	//	// @property (nonatomic) BOOL allowsInlineMediaPlayback __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("allowsInlineMediaPlayback")]
	//	bool AllowsInlineMediaPlayback { get; set; }

	//	// @property (nonatomic) BOOL mediaPlaybackRequiresUserAction __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[Export ("mediaPlaybackRequiresUserAction")]
	//	bool MediaPlaybackRequiresUserAction { get; set; }

	//	// @property (nonatomic) BOOL mediaPlaybackAllowsAirPlay __attribute__((availability(ios, introduced=5.0)));
	//	[iOS (5, 0)]
	//	[Export ("mediaPlaybackAllowsAirPlay")]
	//	bool MediaPlaybackAllowsAirPlay { get; set; }

	//	// @property (nonatomic) BOOL suppressesIncrementalRendering __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("suppressesIncrementalRendering")]
	//	bool SuppressesIncrementalRendering { get; set; }

	//	// @property (nonatomic) BOOL keyboardDisplayRequiresUserAction __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("keyboardDisplayRequiresUserAction")]
	//	bool KeyboardDisplayRequiresUserAction { get; set; }

	//	// @property (nonatomic) UIWebPaginationMode paginationMode __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("paginationMode", ArgumentSemantic.Assign)]
	//	UIWebPaginationMode PaginationMode { get; set; }

	//	// @property (nonatomic) UIWebPaginationBreakingMode paginationBreakingMode __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("paginationBreakingMode", ArgumentSemantic.Assign)]
	//	UIWebPaginationBreakingMode PaginationBreakingMode { get; set; }

	//	// @property (nonatomic) CGFloat pageLength __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("pageLength")]
	//	nfloat PageLength { get; set; }

	//	// @property (nonatomic) CGFloat gapBetweenPages __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("gapBetweenPages")]
	//	nfloat GapBetweenPages { get; set; }

	//	// @property (readonly, nonatomic) NSUInteger pageCount __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("pageCount")]
	//	nuint PageCount { get; }

	//	// @property (nonatomic) BOOL allowsPictureInPictureMediaPlayback __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("allowsPictureInPictureMediaPlayback")]
	//	bool AllowsPictureInPictureMediaPlayback { get; set; }

	//	// @property (nonatomic) BOOL allowsLinkPreview __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("allowsLinkPreview")]
	//	bool AllowsLinkPreview { get; set; }
	//}

	//// @protocol UIWebViewDelegate <NSObject>
	//[NoTV]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIWebViewDelegate
	//{
	//	// @optional -(BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType __attribute__((availability(ios, introduced=2.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported.")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "No longer supported.")]
	//	[Export ("webView:shouldStartLoadWithRequest:navigationType:")]
	//	bool WebView (UIWebView webView, NSUrlRequest request, UIWebViewNavigationType navigationType);

	//	// @optional -(void)webViewDidStartLoad:(UIWebView * _Nonnull)webView __attribute__((availability(ios, introduced=2.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported.")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "No longer supported.")]
	//	[Export ("webViewDidStartLoad:")]
	//	void WebViewDidStartLoad (UIWebView webView);

	//	// @optional -(void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView __attribute__((availability(ios, introduced=2.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported.")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "No longer supported.")]
	//	[Export ("webViewDidFinishLoad:")]
	//	void WebViewDidFinishLoad (UIWebView webView);

	//	// @optional -(void)webView:(UIWebView * _Nonnull)webView didFailLoadWithError:(NSError * _Nonnull)error __attribute__((availability(ios, introduced=2.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported.")]
	//	[Deprecated (PlatformName.iOS, 12, 0, message: "No longer supported.")]
	//	[Export ("webView:didFailLoadWithError:")]
	//	void WebView (UIWebView webView, NSError error);
	//}

	//// @interface UIWindow : UIView
	//[iOS (2,0)]
	//[BaseType (typeof(UIView))]
	//interface UIWindow
	//{
	//	// @property (nonatomic, strong) UIScreen * _Nonnull screen __attribute__((availability(ios, introduced=3.2)));
	//	[iOS (3, 2)]
	//	[Export ("screen", ArgumentSemantic.Strong)]
	//	UIScreen Screen { get; set; }

	//	// @property (nonatomic) UIWindowLevel windowLevel;
	//	[Export ("windowLevel")]
	//	double WindowLevel { get; set; }

	//	// @property (readonly, getter = isKeyWindow, nonatomic) BOOL keyWindow;
	//	[Export ("keyWindow")]
	//	bool KeyWindow { [Bind ("isKeyWindow")] get; }

	//	// -(void)becomeKeyWindow;
	//	[Export ("becomeKeyWindow")]
	//	void BecomeKeyWindow ();

	//	// -(void)resignKeyWindow;
	//	[Export ("resignKeyWindow")]
	//	void ResignKeyWindow ();

	//	// -(void)makeKeyWindow;
	//	[Export ("makeKeyWindow")]
	//	void MakeKeyWindow ();

	//	// -(void)makeKeyAndVisible;
	//	[Export ("makeKeyAndVisible")]
	//	void MakeKeyAndVisible ();

	//	// @property (nonatomic, strong) UIViewController * _Nullable rootViewController __attribute__((availability(ios, introduced=4.0)));
	//	[iOS (4, 0)]
	//	[NullAllowed, Export ("rootViewController", ArgumentSemantic.Strong)]
	//	UIViewController RootViewController { get; set; }

	//	// -(void)sendEvent:(UIEvent * _Nonnull)event;
	//	[Export ("sendEvent:")]
	//	void SendEvent (UIEvent @event);

	//	// -(CGPoint)convertPoint:(CGPoint)point toWindow:(UIWindow * _Nullable)window;
	//	[Export ("convertPoint:toWindow:")]
	//	CGPoint ConvertPoint (CGPoint point, [NullAllowed] UIWindow window);

	//	// -(CGPoint)convertPoint:(CGPoint)point fromWindow:(UIWindow * _Nullable)window;
	//	[Export ("convertPoint:fromWindow:")]
	//	CGPoint ConvertPoint (CGPoint point, [NullAllowed] UIWindow window);

	//	// -(CGRect)convertRect:(CGRect)rect toWindow:(UIWindow * _Nullable)window;
	//	[Export ("convertRect:toWindow:")]
	//	CGRect ConvertRect (CGRect rect, [NullAllowed] UIWindow window);

	//	// -(CGRect)convertRect:(CGRect)rect fromWindow:(UIWindow * _Nullable)window;
	//	[Export ("convertRect:fromWindow:")]
	//	CGRect ConvertRect (CGRect rect, [NullAllowed] UIWindow window);
	//}

	//// @interface UIDragItem : NSObject
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIDragItem
	//{
	//	// -(instancetype _Nonnull)initWithItemProvider:(NSItemProvider * _Nonnull)itemProvider __attribute__((objc_designated_initializer));
	//	[Export ("initWithItemProvider:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSItemProvider itemProvider);

	//	// @property (readonly, nonatomic) __kindof NSItemProvider * _Nonnull itemProvider;
	//	[Export ("itemProvider")]
	//	NSItemProvider ItemProvider { get; }

	//	// @property (nonatomic, strong) id _Nullable localObject;
	//	[NullAllowed, Export ("localObject", ArgumentSemantic.Strong)]
	//	NSObject LocalObject { get; set; }

	//	// @property (copy, nonatomic) UIDragPreview * _Nullable (^ _Nullable)(void) previewProvider;
	//	[NullAllowed, Export ("previewProvider", ArgumentSemantic.Copy)]
	//	Func<UIDragPreview> PreviewProvider { get; set; }
	//}

	//// @interface UIDragPreview : NSObject <NSCopying>
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIDragPreview : INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view parameters:(UIDragPreviewParameters * _Nonnull)parameters __attribute__((objc_designated_initializer));
	//	[Export ("initWithView:parameters:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIView view, UIDragPreviewParameters parameters);

	//	// -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view;
	//	[Export ("initWithView:")]
	//	IntPtr Constructor (UIView view);

	//	// @property (readonly, nonatomic) UIView * _Nonnull view;
	//	[Export ("view")]
	//	UIView View { get; }

	//	// @property (readonly, copy, nonatomic) UIDragPreviewParameters * _Nonnull parameters;
	//	[Export ("parameters", ArgumentSemantic.Copy)]
	//	UIDragPreviewParameters Parameters { get; }
	//}

	//// @interface UIDragPreviewParameters : NSObject <NSCopying>
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIDragPreviewParameters : INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithTextLineRects:(NSArray<NSValue *> * _Nonnull)textLineRects;
	//	[Export ("initWithTextLineRects:")]
	//	IntPtr Constructor (NSValue[] textLineRects);

	//	// @property (copy, nonatomic) UIBezierPath * _Nullable visiblePath;
	//	[NullAllowed, Export ("visiblePath", ArgumentSemantic.Copy)]
	//	UIBezierPath VisiblePath { get; set; }

	//	// @property (copy, nonatomic) UIColor * _Null_unspecified backgroundColor;
	//	[Export ("backgroundColor", ArgumentSemantic.Copy)]
	//	UIColor BackgroundColor { get; set; }
	//}

	//// @protocol UIDragDropSession <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIDragDropSession
	//{
	//	// @required @property (readonly, nonatomic) NSArray<UIDragItem *> * _Nonnull items;
	//	[Abstract]
	//	[Export ("items")]
	//	UIDragItem[] Items { get; }

	//	// @required -(CGPoint)locationInView:(UIView * _Nonnull)view;
	//	[Abstract]
	//	[Export ("locationInView:")]
	//	CGPoint LocationInView (UIView view);

	//	// @required @property (readonly, nonatomic) BOOL allowsMoveOperation;
	//	[Abstract]
	//	[Export ("allowsMoveOperation")]
	//	bool AllowsMoveOperation { get; }

	//	// @required @property (readonly, getter = isRestrictedToDraggingApplication, nonatomic) BOOL restrictedToDraggingApplication;
	//	[Abstract]
	//	[Export ("restrictedToDraggingApplication")]
	//	bool RestrictedToDraggingApplication { [Bind ("isRestrictedToDraggingApplication")] get; }

	//	// @required -(BOOL)hasItemsConformingToTypeIdentifiers:(NSArray<NSString *> * _Nonnull)typeIdentifiers;
	//	[Abstract]
	//	[Export ("hasItemsConformingToTypeIdentifiers:")]
	//	bool HasItemsConformingToTypeIdentifiers (string[] typeIdentifiers);

	//	// @required -(BOOL)canLoadObjectsOfClass:(Class<NSItemProviderReading> _Nonnull)aClass;
	//	[Abstract]
	//	[Export ("canLoadObjectsOfClass:")]
	//	bool CanLoadObjectsOfClass (NSItemProviderReading aClass);
	//}

	//// @protocol UIDragSession <UIDragDropSession>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//interface UIDragSession : IUIDragDropSession
	//{
	//	// @required @property (nonatomic, strong) id _Nullable localContext;
	//	[Abstract]
	//	[NullAllowed, Export ("localContext", ArgumentSemantic.Strong)]
	//	NSObject LocalContext { get; set; }
	//}

	//// @protocol UIDropSession <UIDragDropSession, NSProgressReporting>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//interface UIDropSession : IUIDragDropSession, INSProgressReporting
	//{
	//	// @required @property (readonly, nonatomic) id<UIDragSession> _Nullable localDragSession;
	//	[Abstract]
	//	[NullAllowed, Export ("localDragSession")]
	//	UIDragSession LocalDragSession { get; }

	//	// @required @property (nonatomic) UIDropSessionProgressIndicatorStyle progressIndicatorStyle;
	//	[Abstract]
	//	[Export ("progressIndicatorStyle", ArgumentSemantic.Assign)]
	//	UIDropSessionProgressIndicatorStyle ProgressIndicatorStyle { get; set; }

	//	// @required -(NSProgress * _Nonnull)loadObjectsOfClass:(Class<NSItemProviderReading> _Nonnull)aClass completion:(void (^ _Nonnull)(NSArray<__kindof id<NSItemProviderReading>> * _Nonnull))completion;
	//	[Abstract]
	//	[Export ("loadObjectsOfClass:completion:")]
	//	NSProgress Completion (NSItemProviderReading aClass, Action<NSArray<NSItemProviderReading>> completion);
	//}

	//// @interface UIDragPreviewTarget : NSObject <NSCopying>
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIDragPreviewTarget : INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithContainer:(UIView * _Nonnull)container center:(CGPoint)center transform:(CGAffineTransform)transform __attribute__((objc_designated_initializer));
	//	[Export ("initWithContainer:center:transform:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIView container, CGPoint center, CGAffineTransform transform);

	//	// -(instancetype _Nonnull)initWithContainer:(UIView * _Nonnull)container center:(CGPoint)center;
	//	[Export ("initWithContainer:center:")]
	//	IntPtr Constructor (UIView container, CGPoint center);

	//	// @property (readonly, nonatomic) UIView * _Nonnull container;
	//	[Export ("container")]
	//	UIView Container { get; }

	//	// @property (readonly, nonatomic) CGPoint center;
	//	[Export ("center")]
	//	CGPoint Center { get; }

	//	// @property (readonly, nonatomic) CGAffineTransform transform;
	//	[Export ("transform")]
	//	CGAffineTransform Transform { get; }
	//}

	//// @interface UITargetedDragPreview : NSObject <NSCopying>
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UITargetedDragPreview : INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view parameters:(UIDragPreviewParameters * _Nonnull)parameters target:(UIDragPreviewTarget * _Nonnull)target __attribute__((objc_designated_initializer));
	//	[Export ("initWithView:parameters:target:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIView view, UIDragPreviewParameters parameters, UIDragPreviewTarget target);

	//	// -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view parameters:(UIDragPreviewParameters * _Nonnull)parameters;
	//	[Export ("initWithView:parameters:")]
	//	IntPtr Constructor (UIView view, UIDragPreviewParameters parameters);

	//	// -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view;
	//	[Export ("initWithView:")]
	//	IntPtr Constructor (UIView view);

	//	// @property (readonly, nonatomic) UIDragPreviewTarget * _Nonnull target;
	//	[Export ("target")]
	//	UIDragPreviewTarget Target { get; }

	//	// @property (readonly, nonatomic) UIView * _Nonnull view;
	//	[Export ("view")]
	//	UIView View { get; }

	//	// @property (readonly, copy, nonatomic) UIDragPreviewParameters * _Nonnull parameters;
	//	[Export ("parameters", ArgumentSemantic.Copy)]
	//	UIDragPreviewParameters Parameters { get; }

	//	// @property (readonly, nonatomic) CGSize size;
	//	[Export ("size")]
	//	CGSize Size { get; }

	//	// -(UITargetedDragPreview * _Nonnull)retargetedPreviewWithTarget:(UIDragPreviewTarget * _Nonnull)newTarget;
	//	[Export ("retargetedPreviewWithTarget:")]
	//	UITargetedDragPreview RetargetedPreviewWithTarget (UIDragPreviewTarget newTarget);
	//}

	//// @interface UISpringLoadedInteraction : NSObject <UIInteraction>
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UISpringLoadedInteraction : IUIInteraction
	//{
	//	// -(instancetype _Nonnull)initWithInteractionBehavior:(id<UISpringLoadedInteractionBehavior> _Nullable)interactionBehavior interactionEffect:(id<UISpringLoadedInteractionEffect> _Nullable)interactionEffect activationHandler:(void (^ _Nonnull)(UISpringLoadedInteraction * _Nonnull, id<UISpringLoadedInteractionContext> _Nonnull))handler __attribute__((objc_designated_initializer));
	//	[Export ("initWithInteractionBehavior:interactionEffect:activationHandler:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] UISpringLoadedInteractionBehavior interactionBehavior, [NullAllowed] UISpringLoadedInteractionEffect interactionEffect, Action<UISpringLoadedInteraction, UISpringLoadedInteractionContext> handler);

	//	// -(instancetype _Nonnull)initWithActivationHandler:(void (^ _Nonnull)(UISpringLoadedInteraction * _Nonnull, id<UISpringLoadedInteractionContext> _Nonnull))handler;
	//	[Export ("initWithActivationHandler:")]
	//	IntPtr Constructor (Action<UISpringLoadedInteraction, UISpringLoadedInteractionContext> handler);

	//	// @property (readonly, nonatomic, strong) id<UISpringLoadedInteractionBehavior> _Nonnull interactionBehavior;
	//	[Export ("interactionBehavior", ArgumentSemantic.Strong)]
	//	UISpringLoadedInteractionBehavior InteractionBehavior { get; }

	//	// @property (readonly, nonatomic, strong) id<UISpringLoadedInteractionEffect> _Nonnull interactionEffect;
	//	[Export ("interactionEffect", ArgumentSemantic.Strong)]
	//	UISpringLoadedInteractionEffect InteractionEffect { get; }
	//}

	//// @protocol UISpringLoadedInteractionBehavior <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UISpringLoadedInteractionBehavior
	//{
	//	// @required -(BOOL)shouldAllowInteraction:(UISpringLoadedInteraction * _Nonnull)interaction withContext:(id<UISpringLoadedInteractionContext> _Nonnull)context;
	//	[Abstract]
	//	[Export ("shouldAllowInteraction:withContext:")]
	//	bool ShouldAllowInteraction (UISpringLoadedInteraction interaction, UISpringLoadedInteractionContext context);

	//	// @optional -(void)interactionDidFinish:(UISpringLoadedInteraction * _Nonnull)interaction;
	//	[Export ("interactionDidFinish:")]
	//	void InteractionDidFinish (UISpringLoadedInteraction interaction);
	//}

	//// @protocol UISpringLoadedInteractionEffect <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UISpringLoadedInteractionEffect
	//{
	//	// @required -(void)interaction:(UISpringLoadedInteraction * _Nonnull)interaction didChangeWithContext:(id<UISpringLoadedInteractionContext> _Nonnull)context;
	//	[Abstract]
	//	[Export ("interaction:didChangeWithContext:")]
	//	void DidChangeWithContext (UISpringLoadedInteraction interaction, UISpringLoadedInteractionContext context);
	//}

	//// @protocol UISpringLoadedInteractionContext <NSObject>
	//[NoWatch, NoTV, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UISpringLoadedInteractionContext
	//{
	//	// @required @property (readonly, nonatomic) UISpringLoadedInteractionEffectState state;
	//	[Abstract]
	//	[Export ("state")]
	//	UISpringLoadedInteractionEffectState State { get; }

	//	// @required @property (nonatomic, strong) UIView * _Nullable targetView;
	//	[Abstract]
	//	[NullAllowed, Export ("targetView", ArgumentSemantic.Strong)]
	//	UIView TargetView { get; set; }

	//	// @required @property (nonatomic, strong) id _Nullable targetItem;
	//	[Abstract]
	//	[NullAllowed, Export ("targetItem", ArgumentSemantic.Strong)]
	//	NSObject TargetItem { get; set; }

	//	// @required -(CGPoint)locationInView:(UIView * _Nullable)view;
	//	[Abstract]
	//	[Export ("locationInView:")]
	//	CGPoint LocationInView ([NullAllowed] UIView view);
	//}

	//// @interface NSAttributedStringAttributeFixing (NSMutableAttributedString)
	//[Category]
	//[BaseType (typeof(NSMutableAttributedString))]
	//interface NSMutableAttributedString_NSAttributedStringAttributeFixing
	//{
	//	// -(void)fixAttributesInRange:(NSRange)range __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("fixAttributesInRange:")]
	//	void FixAttributesInRange (NSRange range);
	//}

	//// @interface NSAttributedStringDocumentFormats (NSAttributedString)
	//[Category]
	//[BaseType (typeof(NSAttributedString))]
	//interface NSAttributedString_NSAttributedStringDocumentFormats
	//{
	//	// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url options:(NSDictionary<NSAttributedStringDocumentReadingOptionKey,id> * _Nonnull)options documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("initWithURL:options:documentAttributes:error:")]
	//	IntPtr Constructor (NSUrl url, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);

	//	// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data options:(NSDictionary<NSAttributedStringDocumentReadingOptionKey,id> * _Nonnull)options documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("initWithData:options:documentAttributes:error:")]
	//	IntPtr Constructor (NSData data, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);

	//	// -(NSData * _Nullable)dataFromRange:(NSRange)range documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nonnull)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("dataFromRange:documentAttributes:error:")]
	//	[return: NullAllowed]
	//	NSData DataFromRange (NSRange range, NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);

	//	// -(NSFileWrapper * _Nullable)fileWrapperFromRange:(NSRange)range documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nonnull)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("fileWrapperFromRange:documentAttributes:error:")]
	//	[return: NullAllowed]
	//	NSFileWrapper FileWrapperFromRange (NSRange range, NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);
	//}

	//// @interface NSMutableAttributedStringDocumentFormats (NSMutableAttributedString)
	//[Category]
	//[BaseType (typeof(NSMutableAttributedString))]
	//interface NSMutableAttributedString_NSMutableAttributedStringDocumentFormats
	//{
	//	// -(BOOL)readFromURL:(NSURL * _Nonnull)url options:(NSDictionary<NSAttributedStringDocumentReadingOptionKey,id> * _Nonnull)opts documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.5)));
	//	[Watch (2,0), TV (9,0), Mac (10,5), iOS (9,0)]
	//	[Export ("readFromURL:options:documentAttributes:error:")]
	//	bool ReadFromURL (NSUrl url, NSDictionary<NSString, NSObject> opts, [NullAllowed] out NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);

	//	// -(BOOL)readFromData:(NSData * _Nonnull)data options:(NSDictionary<NSAttributedStringDocumentReadingOptionKey,id> * _Nonnull)opts documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("readFromData:options:documentAttributes:error:")]
	//	bool ReadFromData (NSData data, NSDictionary<NSString, NSObject> opts, [NullAllowed] out NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);
	//}

	//// @interface NSAttributedStringKitAdditions (NSAttributedString)
	//[Category]
	//[BaseType (typeof(NSAttributedString))]
	//interface NSAttributedString_NSAttributedStringKitAdditions
	//{
	//	// -(BOOL)containsAttachmentsInRange:(NSRange)range __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("containsAttachmentsInRange:")]
	//	bool ContainsAttachmentsInRange (NSRange range);
	//}

	//// @interface NSAttributedString_ItemProvider (NSAttributedString) <NSItemProviderReading, NSItemProviderWriting>
	//[Category]
	//[BaseType (typeof(NSAttributedString))]
	//interface NSAttributedString_NSAttributedString_ItemProvider : INSItemProviderReading, INSItemProviderWriting
	//{
	//}

	//// @interface NSDeprecatedKitAdditions (NSAttributedString)
	//[Category]
	//[BaseType (typeof(NSAttributedString))]
	//interface NSAttributedString_NSDeprecatedKitAdditions
	//{
	//	// -(instancetype _Nullable)initWithFileURL:(NSURL * _Nonnull)url options:(NSDictionary * _Nonnull)options documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 7, 0, message: "Use -initWithURL:options:documentAttributes:error: instead")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use -initWithURL:options:documentAttributes:error: instead")]
	//	[NoTV]
	//	[Export ("initWithFileURL:options:documentAttributes:error:")]
	//	IntPtr Constructor (NSUrl url, NSDictionary options, [NullAllowed] out NSDictionary dict, [NullAllowed] out NSError error);
	//}

	//// @interface NSDeprecatedKitAdditions (NSMutableAttributedString)
	//[Category]
	//[BaseType (typeof(NSMutableAttributedString))]
	//interface NSMutableAttributedString_NSDeprecatedKitAdditions
	//{
	//	// -(BOOL)readFromFileURL:(NSURL * _Nonnull)url options:(NSDictionary * _Nonnull)opts documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7.0, deprecated=9.0)));
	//	[Introduced (PlatformName.iOS, 7, 0, message: "Use -readFromURL:options:documentAttributes:error: instead")]
	//	[Deprecated (PlatformName.iOS, 9, 0, message: "Use -readFromURL:options:documentAttributes:error: instead")]
	//	[NoTV]
	//	[Export ("readFromFileURL:options:documentAttributes:error:")]
	//	bool ReadFromFileURL (NSUrl url, NSDictionary opts, [NullAllowed] out NSDictionary dict, [NullAllowed] out NSError error);
	//}

	//// audit-objc-generics: @interface NSLayoutAnchor<AnchorType> : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSLayoutAnchor
	//{
	//	// -(NSLayoutConstraint * _Nonnull)constraintEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor;
	//	[Export ("constraintEqualToAnchor:")]
	//	NSLayoutConstraint ConstraintEqualToAnchor (NSLayoutAnchor`1<NSObject> anchor);

	//	// -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor;
	//	[Export ("constraintGreaterThanOrEqualToAnchor:")]
	//	NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor (NSLayoutAnchor`1<NSObject> anchor);

	//	// -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor;
	//	[Export ("constraintLessThanOrEqualToAnchor:")]
	//	NSLayoutConstraint ConstraintLessThanOrEqualToAnchor (NSLayoutAnchor`1<NSObject> anchor);

	//	// -(NSLayoutConstraint * _Nonnull)constraintEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor constant:(CGFloat)c;
	//	[Export ("constraintEqualToAnchor:constant:")]
	//	NSLayoutConstraint ConstraintEqualToAnchor (NSLayoutAnchor`1<NSObject> anchor, nfloat c);

	//	// -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor constant:(CGFloat)c;
	//	[Export ("constraintGreaterThanOrEqualToAnchor:constant:")]
	//	NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor (NSLayoutAnchor`1<NSObject> anchor, nfloat c);

	//	// -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor constant:(CGFloat)c;
	//	[Export ("constraintLessThanOrEqualToAnchor:constant:")]
	//	NSLayoutConstraint ConstraintLessThanOrEqualToAnchor (NSLayoutAnchor`1<NSObject> anchor, nfloat c);
	//}

	//// @interface NSLayoutXAxisAnchor : NSLayoutAnchor
	//[iOS (9,0)]
	//[BaseType (typeof(NSLayoutAnchor`1))]
	//interface NSLayoutXAxisAnchor
	//{
	//	// -(NSLayoutDimension * _Nonnull)anchorWithOffsetToAnchor:(NSLayoutXAxisAnchor * _Nonnull)otherAnchor __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0)));
	//	[TV (10,0), iOS (10,0)]
	//	[Export ("anchorWithOffsetToAnchor:")]
	//	NSLayoutDimension AnchorWithOffsetToAnchor (NSLayoutXAxisAnchor otherAnchor);
	//}

	//// @interface UIViewDynamicSystemSpacingSupport (NSLayoutXAxisAnchor)
	//[Category]
	//[BaseType (typeof(NSLayoutXAxisAnchor))]
	//interface NSLayoutXAxisAnchor_UIViewDynamicSystemSpacingSupport
	//{
	//	// -(NSLayoutConstraint * _Nonnull)constraintEqualToSystemSpacingAfterAnchor:(NSLayoutXAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("constraintEqualToSystemSpacingAfterAnchor:multiplier:")]
	//	NSLayoutConstraint ConstraintEqualToSystemSpacingAfterAnchor (NSLayoutXAxisAnchor anchor, nfloat multiplier);

	//	// -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:(NSLayoutXAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:multiplier:")]
	//	NSLayoutConstraint ConstraintGreaterThanOrEqualToSystemSpacingAfterAnchor (NSLayoutXAxisAnchor anchor, nfloat multiplier);

	//	// -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToSystemSpacingAfterAnchor:(NSLayoutXAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("constraintLessThanOrEqualToSystemSpacingAfterAnchor:multiplier:")]
	//	NSLayoutConstraint ConstraintLessThanOrEqualToSystemSpacingAfterAnchor (NSLayoutXAxisAnchor anchor, nfloat multiplier);
	//}

	//// @interface NSLayoutYAxisAnchor : NSLayoutAnchor
	//[iOS (9,0)]
	//[BaseType (typeof(NSLayoutAnchor`1))]
	//interface NSLayoutYAxisAnchor
	//{
	//	// -(NSLayoutDimension * _Nonnull)anchorWithOffsetToAnchor:(NSLayoutYAxisAnchor * _Nonnull)otherAnchor __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0)));
	//	[TV (10,0), iOS (10,0)]
	//	[Export ("anchorWithOffsetToAnchor:")]
	//	NSLayoutDimension AnchorWithOffsetToAnchor (NSLayoutYAxisAnchor otherAnchor);
	//}

	//// @interface UIViewDynamicSystemSpacingSupport (NSLayoutYAxisAnchor)
	//[Category]
	//[BaseType (typeof(NSLayoutYAxisAnchor))]
	//interface NSLayoutYAxisAnchor_UIViewDynamicSystemSpacingSupport
	//{
	//	// -(NSLayoutConstraint * _Nonnull)constraintEqualToSystemSpacingBelowAnchor:(NSLayoutYAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("constraintEqualToSystemSpacingBelowAnchor:multiplier:")]
	//	NSLayoutConstraint ConstraintEqualToSystemSpacingBelowAnchor (NSLayoutYAxisAnchor anchor, nfloat multiplier);

	//	// -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToSystemSpacingBelowAnchor:(NSLayoutYAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("constraintGreaterThanOrEqualToSystemSpacingBelowAnchor:multiplier:")]
	//	NSLayoutConstraint ConstraintGreaterThanOrEqualToSystemSpacingBelowAnchor (NSLayoutYAxisAnchor anchor, nfloat multiplier);

	//	// -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToSystemSpacingBelowAnchor:(NSLayoutYAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("constraintLessThanOrEqualToSystemSpacingBelowAnchor:multiplier:")]
	//	NSLayoutConstraint ConstraintLessThanOrEqualToSystemSpacingBelowAnchor (NSLayoutYAxisAnchor anchor, nfloat multiplier);
	//}

	//// @interface NSLayoutDimension : NSLayoutAnchor
	//[iOS (9,0)]
	//[BaseType (typeof(NSLayoutAnchor`1))]
	//interface NSLayoutDimension
	//{
	//	// -(NSLayoutConstraint * _Nonnull)constraintEqualToConstant:(CGFloat)c;
	//	[Export ("constraintEqualToConstant:")]
	//	NSLayoutConstraint ConstraintEqualToConstant (nfloat c);

	//	// -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToConstant:(CGFloat)c;
	//	[Export ("constraintGreaterThanOrEqualToConstant:")]
	//	NSLayoutConstraint ConstraintGreaterThanOrEqualToConstant (nfloat c);

	//	// -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToConstant:(CGFloat)c;
	//	[Export ("constraintLessThanOrEqualToConstant:")]
	//	NSLayoutConstraint ConstraintLessThanOrEqualToConstant (nfloat c);

	//	// -(NSLayoutConstraint * _Nonnull)constraintEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m;
	//	[Export ("constraintEqualToAnchor:multiplier:")]
	//	NSLayoutConstraint ConstraintEqualToAnchor (NSLayoutDimension anchor, nfloat m);

	//	// -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m;
	//	[Export ("constraintGreaterThanOrEqualToAnchor:multiplier:")]
	//	NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor (NSLayoutDimension anchor, nfloat m);

	//	// -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m;
	//	[Export ("constraintLessThanOrEqualToAnchor:multiplier:")]
	//	NSLayoutConstraint ConstraintLessThanOrEqualToAnchor (NSLayoutDimension anchor, nfloat m);

	//	// -(NSLayoutConstraint * _Nonnull)constraintEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m constant:(CGFloat)c;
	//	[Export ("constraintEqualToAnchor:multiplier:constant:")]
	//	NSLayoutConstraint ConstraintEqualToAnchor (NSLayoutDimension anchor, nfloat m, nfloat c);

	//	// -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m constant:(CGFloat)c;
	//	[Export ("constraintGreaterThanOrEqualToAnchor:multiplier:constant:")]
	//	NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor (NSLayoutDimension anchor, nfloat m, nfloat c);

	//	// -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m constant:(CGFloat)c;
	//	[Export ("constraintLessThanOrEqualToAnchor:multiplier:constant:")]
	//	NSLayoutConstraint ConstraintLessThanOrEqualToAnchor (NSLayoutDimension anchor, nfloat m, nfloat c);
	//}

	//// @interface UIStackView : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface UIStackView
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);

	//	// -(instancetype _Nonnull)initWithArrangedSubviews:(NSArray<__kindof UIView *> * _Nonnull)views;
	//	[Export ("initWithArrangedSubviews:")]
	//	IntPtr Constructor (UIView[] views);

	//	// @property (readonly, copy, nonatomic) NSArray<__kindof UIView *> * _Nonnull arrangedSubviews;
	//	[Export ("arrangedSubviews", ArgumentSemantic.Copy)]
	//	UIView[] ArrangedSubviews { get; }

	//	// -(void)addArrangedSubview:(UIView * _Nonnull)view;
	//	[Export ("addArrangedSubview:")]
	//	void AddArrangedSubview (UIView view);

	//	// -(void)removeArrangedSubview:(UIView * _Nonnull)view;
	//	[Export ("removeArrangedSubview:")]
	//	void RemoveArrangedSubview (UIView view);

	//	// -(void)insertArrangedSubview:(UIView * _Nonnull)view atIndex:(NSUInteger)stackIndex;
	//	[Export ("insertArrangedSubview:atIndex:")]
	//	void InsertArrangedSubview (UIView view, nuint stackIndex);

	//	// @property (nonatomic) UILayoutConstraintAxis axis;
	//	[Export ("axis", ArgumentSemantic.Assign)]
	//	UILayoutConstraintAxis Axis { get; set; }

	//	// @property (nonatomic) UIStackViewDistribution distribution;
	//	[Export ("distribution", ArgumentSemantic.Assign)]
	//	UIStackViewDistribution Distribution { get; set; }

	//	// @property (nonatomic) UIStackViewAlignment alignment;
	//	[Export ("alignment", ArgumentSemantic.Assign)]
	//	UIStackViewAlignment Alignment { get; set; }

	//	// @property (nonatomic) CGFloat spacing;
	//	[Export ("spacing")]
	//	nfloat Spacing { get; set; }

	//	// -(void)setCustomSpacing:(CGFloat)spacing afterView:(UIView * _Nonnull)arrangedSubview __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("setCustomSpacing:afterView:")]
	//	void SetCustomSpacing (nfloat spacing, UIView arrangedSubview);

	//	// -(CGFloat)customSpacingAfterView:(UIView * _Nonnull)arrangedSubview __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
	//	[TV (11,0), iOS (11,0)]
	//	[Export ("customSpacingAfterView:")]
	//	nfloat CustomSpacingAfterView (UIView arrangedSubview);

	//	// @property (getter = isBaselineRelativeArrangement, nonatomic) BOOL baselineRelativeArrangement;
	//	[Export ("baselineRelativeArrangement")]
	//	bool BaselineRelativeArrangement { [Bind ("isBaselineRelativeArrangement")] get; set; }

	//	// @property (getter = isLayoutMarginsRelativeArrangement, nonatomic) BOOL layoutMarginsRelativeArrangement;
	//	[Export ("layoutMarginsRelativeArrangement")]
	//	bool LayoutMarginsRelativeArrangement { [Bind ("isLayoutMarginsRelativeArrangement")] get; set; }
	//}

	//// @interface NSTextStorage : NSMutableAttributedString
	//[iOS (7,0)]
	//[BaseType (typeof(NSMutableAttributedString))]
	//interface NSTextStorage
	//{
	//	// @property (readonly, copy, nonatomic) NSArray<NSLayoutManager *> * _Nonnull layoutManagers;
	//	[Export ("layoutManagers", ArgumentSemantic.Copy)]
	//	NSLayoutManager[] LayoutManagers { get; }

	//	// -(void)addLayoutManager:(NSLayoutManager * _Nonnull)aLayoutManager;
	//	[Export ("addLayoutManager:")]
	//	void AddLayoutManager (NSLayoutManager aLayoutManager);

	//	// -(void)removeLayoutManager:(NSLayoutManager * _Nonnull)aLayoutManager;
	//	[Export ("removeLayoutManager:")]
	//	void RemoveLayoutManager (NSLayoutManager aLayoutManager);

	//	// @property (readonly, nonatomic) NSTextStorageEditActions editedMask;
	//	[Export ("editedMask")]
	//	NSTextStorageEditActions EditedMask { get; }

	//	// @property (readonly, nonatomic) NSRange editedRange;
	//	[Export ("editedRange")]
	//	NSRange EditedRange { get; }

	//	// @property (readonly, nonatomic) NSInteger changeInLength;
	//	[Export ("changeInLength")]
	//	nint ChangeInLength { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSTextStorageDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<NSTextStorageDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(void)edited:(NSTextStorageEditActions)editedMask range:(NSRange)editedRange changeInLength:(NSInteger)delta;
	//	[Export ("edited:range:changeInLength:")]
	//	void Edited (NSTextStorageEditActions editedMask, NSRange editedRange, nint delta);

	//	// -(void)processEditing;
	//	[Export ("processEditing")]
	//	void ProcessEditing ();

	//	// @property (readonly, nonatomic) BOOL fixesAttributesLazily;
	//	[Export ("fixesAttributesLazily")]
	//	bool FixesAttributesLazily { get; }

	//	// -(void)invalidateAttributesInRange:(NSRange)range;
	//	[Export ("invalidateAttributesInRange:")]
	//	void InvalidateAttributesInRange (NSRange range);

	//	// -(void)ensureAttributesAreFixedInRange:(NSRange)range;
	//	[Export ("ensureAttributesAreFixedInRange:")]
	//	void EnsureAttributesAreFixedInRange (NSRange range);
	//}

	//// @protocol NSTextStorageDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSTextStorageDelegate
	//{
	//	// @optional -(void)textStorage:(NSTextStorage * _Nonnull)textStorage willProcessEditing:(NSTextStorageEditActions)editedMask range:(NSRange)editedRange changeInLength:(NSInteger)delta __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("textStorage:willProcessEditing:range:changeInLength:")]
	//	void WillProcessEditing (NSTextStorage textStorage, NSTextStorageEditActions editedMask, NSRange editedRange, nint delta);

	//	// @optional -(void)textStorage:(NSTextStorage * _Nonnull)textStorage didProcessEditing:(NSTextStorageEditActions)editedMask range:(NSRange)editedRange changeInLength:(NSInteger)delta __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("textStorage:didProcessEditing:range:changeInLength:")]
	//	void DidProcessEditing (NSTextStorage textStorage, NSTextStorageEditActions editedMask, NSRange editedRange, nint delta);
	//}

	//// @protocol NSTextLayoutOrientationProvider
	//[Protocol, Model]
	//interface NSTextLayoutOrientationProvider
	//{
	//	// @required @property (readonly, nonatomic) NSTextLayoutOrientation layoutOrientation __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Abstract]
	//	[Export ("layoutOrientation")]
	//	NSTextLayoutOrientation LayoutOrientation { get; }
	//}

	//// @interface NSLayoutManager : NSObject <NSCoding>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSLayoutManager : INSCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);

	//	// @property (assign, nonatomic) NSTextStorage * _Nullable textStorage;
	//	[NullAllowed, Export ("textStorage", ArgumentSemantic.Assign)]
	//	NSTextStorage TextStorage { get; set; }

	//	// @property (readonly, nonatomic) NSArray<NSTextContainer *> * _Nonnull textContainers;
	//	[Export ("textContainers")]
	//	NSTextContainer[] TextContainers { get; }

	//	// -(void)addTextContainer:(NSTextContainer * _Nonnull)container;
	//	[Export ("addTextContainer:")]
	//	void AddTextContainer (NSTextContainer container);

	//	// -(void)insertTextContainer:(NSTextContainer * _Nonnull)container atIndex:(NSUInteger)index;
	//	[Export ("insertTextContainer:atIndex:")]
	//	void InsertTextContainer (NSTextContainer container, nuint index);

	//	// -(void)removeTextContainerAtIndex:(NSUInteger)index;
	//	[Export ("removeTextContainerAtIndex:")]
	//	void RemoveTextContainerAtIndex (nuint index);

	//	// -(void)textContainerChangedGeometry:(NSTextContainer * _Nonnull)container;
	//	[Export ("textContainerChangedGeometry:")]
	//	void TextContainerChangedGeometry (NSTextContainer container);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	NSLayoutManagerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<NSLayoutManagerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic) BOOL showsInvisibleCharacters;
	//	[Export ("showsInvisibleCharacters")]
	//	bool ShowsInvisibleCharacters { get; set; }

	//	// @property (nonatomic) BOOL showsControlCharacters;
	//	[Export ("showsControlCharacters")]
	//	bool ShowsControlCharacters { get; set; }

	//	// @property (nonatomic) CGFloat hyphenationFactor;
	//	[Export ("hyphenationFactor")]
	//	nfloat HyphenationFactor { get; set; }

	//	// @property (nonatomic) BOOL usesFontLeading;
	//	[Export ("usesFontLeading")]
	//	bool UsesFontLeading { get; set; }

	//	// @property (nonatomic) BOOL allowsNonContiguousLayout __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("allowsNonContiguousLayout")]
	//	bool AllowsNonContiguousLayout { get; set; }

	//	// @property (readonly, nonatomic) BOOL hasNonContiguousLayout __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("hasNonContiguousLayout")]
	//	bool HasNonContiguousLayout { get; }

	//	// @property BOOL limitsLayoutForSuspiciousContents __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[Watch (5, 0), TV (12, 0), Mac (10, 14), iOS (12, 0)]
	//	[Export ("limitsLayoutForSuspiciousContents")]
	//	bool LimitsLayoutForSuspiciousContents { get; set; }

	//	// -(void)invalidateGlyphsForCharacterRange:(NSRange)charRange changeInLength:(NSInteger)delta actualCharacterRange:(NSRangePointer _Nullable)actualCharRange;
	//	[Export ("invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:")]
	//	unsafe void InvalidateGlyphsForCharacterRange (NSRange charRange, nint delta, [NullAllowed] NSRangePointer* actualCharRange);

	//	// -(void)invalidateLayoutForCharacterRange:(NSRange)charRange actualCharacterRange:(NSRangePointer _Nullable)actualCharRange __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("invalidateLayoutForCharacterRange:actualCharacterRange:")]
	//	unsafe void InvalidateLayoutForCharacterRange (NSRange charRange, [NullAllowed] NSRangePointer* actualCharRange);

	//	// -(void)invalidateDisplayForCharacterRange:(NSRange)charRange;
	//	[Export ("invalidateDisplayForCharacterRange:")]
	//	void InvalidateDisplayForCharacterRange (NSRange charRange);

	//	// -(void)invalidateDisplayForGlyphRange:(NSRange)glyphRange;
	//	[Export ("invalidateDisplayForGlyphRange:")]
	//	void InvalidateDisplayForGlyphRange (NSRange glyphRange);

	//	// -(void)processEditingForTextStorage:(NSTextStorage * _Nonnull)textStorage edited:(NSTextStorageEditActions)editMask range:(NSRange)newCharRange changeInLength:(NSInteger)delta invalidatedRange:(NSRange)invalidatedCharRange __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:")]
	//	void ProcessEditingForTextStorage (NSTextStorage textStorage, NSTextStorageEditActions editMask, NSRange newCharRange, nint delta, NSRange invalidatedCharRange);

	//	// -(void)ensureGlyphsForCharacterRange:(NSRange)charRange;
	//	[Export ("ensureGlyphsForCharacterRange:")]
	//	void EnsureGlyphsForCharacterRange (NSRange charRange);

	//	// -(void)ensureGlyphsForGlyphRange:(NSRange)glyphRange;
	//	[Export ("ensureGlyphsForGlyphRange:")]
	//	void EnsureGlyphsForGlyphRange (NSRange glyphRange);

	//	// -(void)ensureLayoutForCharacterRange:(NSRange)charRange;
	//	[Export ("ensureLayoutForCharacterRange:")]
	//	void EnsureLayoutForCharacterRange (NSRange charRange);

	//	// -(void)ensureLayoutForGlyphRange:(NSRange)glyphRange;
	//	[Export ("ensureLayoutForGlyphRange:")]
	//	void EnsureLayoutForGlyphRange (NSRange glyphRange);

	//	// -(void)ensureLayoutForTextContainer:(NSTextContainer * _Nonnull)container;
	//	[Export ("ensureLayoutForTextContainer:")]
	//	void EnsureLayoutForTextContainer (NSTextContainer container);

	//	// -(void)ensureLayoutForBoundingRect:(CGRect)bounds inTextContainer:(NSTextContainer * _Nonnull)container;
	//	[Export ("ensureLayoutForBoundingRect:inTextContainer:")]
	//	void EnsureLayoutForBoundingRect (CGRect bounds, NSTextContainer container);

	//	// -(void)setGlyphs:(const CGGlyph * _Nonnull)glyphs properties:(const NSGlyphProperty * _Nonnull)props characterIndexes:(const NSUInteger * _Nonnull)charIndexes font:(UIFont * _Nonnull)aFont forGlyphRange:(NSRange)glyphRange __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("setGlyphs:properties:characterIndexes:font:forGlyphRange:")]
	//	unsafe void SetGlyphs (ushort* glyphs, NSGlyphProperty* props, nuint* charIndexes, UIFont aFont, NSRange glyphRange);

	//	// @property (readonly, nonatomic) NSUInteger numberOfGlyphs;
	//	[Export ("numberOfGlyphs")]
	//	nuint NumberOfGlyphs { get; }

	//	// -(CGGlyph)CGGlyphAtIndex:(NSUInteger)glyphIndex isValidIndex:(BOOL * _Nullable)isValidIndex __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("CGGlyphAtIndex:isValidIndex:")]
	//	unsafe ushort CGGlyphAtIndex (nuint glyphIndex, [NullAllowed] bool* isValidIndex);

	//	// -(CGGlyph)CGGlyphAtIndex:(NSUInteger)glyphIndex __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("CGGlyphAtIndex:")]
	//	ushort CGGlyphAtIndex (nuint glyphIndex);

	//	// -(BOOL)isValidGlyphIndex:(NSUInteger)glyphIndex __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.0)));
	//	[Watch (2,0), TV (9,0), Mac (10,0), iOS (7,0)]
	//	[Export ("isValidGlyphIndex:")]
	//	bool IsValidGlyphIndex (nuint glyphIndex);

	//	// -(NSGlyphProperty)propertyForGlyphAtIndex:(NSUInteger)glyphIndex __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("propertyForGlyphAtIndex:")]
	//	NSGlyphProperty PropertyForGlyphAtIndex (nuint glyphIndex);

	//	// -(NSUInteger)characterIndexForGlyphAtIndex:(NSUInteger)glyphIndex;
	//	[Export ("characterIndexForGlyphAtIndex:")]
	//	nuint CharacterIndexForGlyphAtIndex (nuint glyphIndex);

	//	// -(NSUInteger)glyphIndexForCharacterAtIndex:(NSUInteger)charIndex;
	//	[Export ("glyphIndexForCharacterAtIndex:")]
	//	nuint GlyphIndexForCharacterAtIndex (nuint charIndex);

	//	// -(NSUInteger)getGlyphsInRange:(NSRange)glyphRange glyphs:(CGGlyph * _Nullable)glyphBuffer properties:(NSGlyphProperty * _Nullable)props characterIndexes:(NSUInteger * _Nullable)charIndexBuffer bidiLevels:(unsigned char * _Nullable)bidiLevelBuffer __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:")]
	//	unsafe nuint GetGlyphsInRange (NSRange glyphRange, [NullAllowed] ushort* glyphBuffer, [NullAllowed] NSGlyphProperty* props, [NullAllowed] nuint* charIndexBuffer, [NullAllowed] byte* bidiLevelBuffer);

	//	// -(void)setTextContainer:(NSTextContainer * _Nonnull)container forGlyphRange:(NSRange)glyphRange;
	//	[Export ("setTextContainer:forGlyphRange:")]
	//	void SetTextContainer (NSTextContainer container, NSRange glyphRange);

	//	// -(void)setLineFragmentRect:(CGRect)fragmentRect forGlyphRange:(NSRange)glyphRange usedRect:(CGRect)usedRect;
	//	[Export ("setLineFragmentRect:forGlyphRange:usedRect:")]
	//	void SetLineFragmentRect (CGRect fragmentRect, NSRange glyphRange, CGRect usedRect);

	//	// -(void)setExtraLineFragmentRect:(CGRect)fragmentRect usedRect:(CGRect)usedRect textContainer:(NSTextContainer * _Nonnull)container;
	//	[Export ("setExtraLineFragmentRect:usedRect:textContainer:")]
	//	void SetExtraLineFragmentRect (CGRect fragmentRect, CGRect usedRect, NSTextContainer container);

	//	// -(void)setLocation:(CGPoint)location forStartOfGlyphRange:(NSRange)glyphRange;
	//	[Export ("setLocation:forStartOfGlyphRange:")]
	//	void SetLocation (CGPoint location, NSRange glyphRange);

	//	// -(void)setNotShownAttribute:(BOOL)flag forGlyphAtIndex:(NSUInteger)glyphIndex;
	//	[Export ("setNotShownAttribute:forGlyphAtIndex:")]
	//	void SetNotShownAttribute (bool flag, nuint glyphIndex);

	//	// -(void)setDrawsOutsideLineFragment:(BOOL)flag forGlyphAtIndex:(NSUInteger)glyphIndex;
	//	[Export ("setDrawsOutsideLineFragment:forGlyphAtIndex:")]
	//	void SetDrawsOutsideLineFragment (bool flag, nuint glyphIndex);

	//	// -(void)setAttachmentSize:(CGSize)attachmentSize forGlyphRange:(NSRange)glyphRange;
	//	[Export ("setAttachmentSize:forGlyphRange:")]
	//	void SetAttachmentSize (CGSize attachmentSize, NSRange glyphRange);

	//	// -(void)getFirstUnlaidCharacterIndex:(NSUInteger * _Nullable)charIndex glyphIndex:(NSUInteger * _Nullable)glyphIndex;
	//	[Export ("getFirstUnlaidCharacterIndex:glyphIndex:")]
	//	unsafe void GetFirstUnlaidCharacterIndex ([NullAllowed] nuint* charIndex, [NullAllowed] nuint* glyphIndex);

	//	// -(NSUInteger)firstUnlaidCharacterIndex;
	//	[Export ("firstUnlaidCharacterIndex")]
	//	[Verify (MethodToProperty)]
	//	nuint FirstUnlaidCharacterIndex { get; }

	//	// -(NSUInteger)firstUnlaidGlyphIndex;
	//	[Export ("firstUnlaidGlyphIndex")]
	//	[Verify (MethodToProperty)]
	//	nuint FirstUnlaidGlyphIndex { get; }

	//	// -(NSTextContainer * _Nullable)textContainerForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange;
	//	[Export ("textContainerForGlyphAtIndex:effectiveRange:")]
	//	[return: NullAllowed]
	//	unsafe NSTextContainer TextContainerForGlyphAtIndex (nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange);

	//	// -(NSTextContainer * _Nullable)textContainerForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange withoutAdditionalLayout:(BOOL)flag __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")]
	//	[return: NullAllowed]
	//	unsafe NSTextContainer TextContainerForGlyphAtIndex (nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange, bool flag);

	//	// -(CGRect)usedRectForTextContainer:(NSTextContainer * _Nonnull)container;
	//	[Export ("usedRectForTextContainer:")]
	//	CGRect UsedRectForTextContainer (NSTextContainer container);

	//	// -(CGRect)lineFragmentRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange;
	//	[Export ("lineFragmentRectForGlyphAtIndex:effectiveRange:")]
	//	unsafe CGRect LineFragmentRectForGlyphAtIndex (nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange);

	//	// -(CGRect)lineFragmentRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange withoutAdditionalLayout:(BOOL)flag __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")]
	//	unsafe CGRect LineFragmentRectForGlyphAtIndex (nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange, bool flag);

	//	// -(CGRect)lineFragmentUsedRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange;
	//	[Export ("lineFragmentUsedRectForGlyphAtIndex:effectiveRange:")]
	//	unsafe CGRect LineFragmentUsedRectForGlyphAtIndex (nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange);

	//	// -(CGRect)lineFragmentUsedRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange withoutAdditionalLayout:(BOOL)flag __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")]
	//	unsafe CGRect LineFragmentUsedRectForGlyphAtIndex (nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange, bool flag);

	//	// @property (readonly, nonatomic) CGRect extraLineFragmentRect;
	//	[Export ("extraLineFragmentRect")]
	//	CGRect ExtraLineFragmentRect { get; }

	//	// @property (readonly, nonatomic) CGRect extraLineFragmentUsedRect;
	//	[Export ("extraLineFragmentUsedRect")]
	//	CGRect ExtraLineFragmentUsedRect { get; }

	//	// @property (readonly, nonatomic) NSTextContainer * _Nullable extraLineFragmentTextContainer;
	//	[NullAllowed, Export ("extraLineFragmentTextContainer")]
	//	NSTextContainer ExtraLineFragmentTextContainer { get; }

	//	// -(CGPoint)locationForGlyphAtIndex:(NSUInteger)glyphIndex;
	//	[Export ("locationForGlyphAtIndex:")]
	//	CGPoint LocationForGlyphAtIndex (nuint glyphIndex);

	//	// -(BOOL)notShownAttributeForGlyphAtIndex:(NSUInteger)glyphIndex;
	//	[Export ("notShownAttributeForGlyphAtIndex:")]
	//	bool NotShownAttributeForGlyphAtIndex (nuint glyphIndex);

	//	// -(BOOL)drawsOutsideLineFragmentForGlyphAtIndex:(NSUInteger)glyphIndex;
	//	[Export ("drawsOutsideLineFragmentForGlyphAtIndex:")]
	//	bool DrawsOutsideLineFragmentForGlyphAtIndex (nuint glyphIndex);

	//	// -(CGSize)attachmentSizeForGlyphAtIndex:(NSUInteger)glyphIndex;
	//	[Export ("attachmentSizeForGlyphAtIndex:")]
	//	CGSize AttachmentSizeForGlyphAtIndex (nuint glyphIndex);

	//	// -(NSRange)truncatedGlyphRangeInLineFragmentForGlyphAtIndex:(NSUInteger)glyphIndex __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("truncatedGlyphRangeInLineFragmentForGlyphAtIndex:")]
	//	NSRange TruncatedGlyphRangeInLineFragmentForGlyphAtIndex (nuint glyphIndex);

	//	// -(NSRange)glyphRangeForCharacterRange:(NSRange)charRange actualCharacterRange:(NSRangePointer _Nullable)actualCharRange;
	//	[Export ("glyphRangeForCharacterRange:actualCharacterRange:")]
	//	unsafe NSRange GlyphRangeForCharacterRange (NSRange charRange, [NullAllowed] NSRangePointer* actualCharRange);

	//	// -(NSRange)characterRangeForGlyphRange:(NSRange)glyphRange actualGlyphRange:(NSRangePointer _Nullable)actualGlyphRange;
	//	[Export ("characterRangeForGlyphRange:actualGlyphRange:")]
	//	unsafe NSRange CharacterRangeForGlyphRange (NSRange glyphRange, [NullAllowed] NSRangePointer* actualGlyphRange);

	//	// -(NSRange)glyphRangeForTextContainer:(NSTextContainer * _Nonnull)container;
	//	[Export ("glyphRangeForTextContainer:")]
	//	NSRange GlyphRangeForTextContainer (NSTextContainer container);

	//	// -(NSRange)rangeOfNominallySpacedGlyphsContainingIndex:(NSUInteger)glyphIndex;
	//	[Export ("rangeOfNominallySpacedGlyphsContainingIndex:")]
	//	NSRange RangeOfNominallySpacedGlyphsContainingIndex (nuint glyphIndex);

	//	// -(CGRect)boundingRectForGlyphRange:(NSRange)glyphRange inTextContainer:(NSTextContainer * _Nonnull)container;
	//	[Export ("boundingRectForGlyphRange:inTextContainer:")]
	//	CGRect BoundingRectForGlyphRange (NSRange glyphRange, NSTextContainer container);

	//	// -(NSRange)glyphRangeForBoundingRect:(CGRect)bounds inTextContainer:(NSTextContainer * _Nonnull)container;
	//	[Export ("glyphRangeForBoundingRect:inTextContainer:")]
	//	NSRange GlyphRangeForBoundingRect (CGRect bounds, NSTextContainer container);

	//	// -(NSRange)glyphRangeForBoundingRectWithoutAdditionalLayout:(CGRect)bounds inTextContainer:(NSTextContainer * _Nonnull)container;
	//	[Export ("glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:")]
	//	NSRange GlyphRangeForBoundingRectWithoutAdditionalLayout (CGRect bounds, NSTextContainer container);

	//	// -(NSUInteger)glyphIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer * _Nonnull)container fractionOfDistanceThroughGlyph:(CGFloat * _Nullable)partialFraction;
	//	[Export ("glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:")]
	//	unsafe nuint GlyphIndexForPoint (CGPoint point, NSTextContainer container, [NullAllowed] nfloat* partialFraction);

	//	// -(NSUInteger)glyphIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer * _Nonnull)container;
	//	[Export ("glyphIndexForPoint:inTextContainer:")]
	//	nuint GlyphIndexForPoint (CGPoint point, NSTextContainer container);

	//	// -(CGFloat)fractionOfDistanceThroughGlyphForPoint:(CGPoint)point inTextContainer:(NSTextContainer * _Nonnull)container;
	//	[Export ("fractionOfDistanceThroughGlyphForPoint:inTextContainer:")]
	//	nfloat FractionOfDistanceThroughGlyphForPoint (CGPoint point, NSTextContainer container);

	//	// -(NSUInteger)characterIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer * _Nonnull)container fractionOfDistanceBetweenInsertionPoints:(CGFloat * _Nullable)partialFraction;
	//	[Export ("characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:")]
	//	unsafe nuint CharacterIndexForPoint (CGPoint point, NSTextContainer container, [NullAllowed] nfloat* partialFraction);

	//	// -(NSUInteger)getLineFragmentInsertionPointsForCharacterAtIndex:(NSUInteger)charIndex alternatePositions:(BOOL)aFlag inDisplayOrder:(BOOL)dFlag positions:(CGFloat * _Nullable)positions characterIndexes:(NSUInteger * _Nullable)charIndexes;
	//	[Export ("getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:")]
	//	unsafe nuint GetLineFragmentInsertionPointsForCharacterAtIndex (nuint charIndex, bool aFlag, bool dFlag, [NullAllowed] nfloat* positions, [NullAllowed] nuint* charIndexes);

	//	// -(void)enumerateLineFragmentsForGlyphRange:(NSRange)glyphRange usingBlock:(void (^ _Nonnull)(CGRect, CGRect, NSTextContainer * _Nonnull, NSRange, BOOL * _Nonnull))block __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("enumerateLineFragmentsForGlyphRange:usingBlock:")]
	//	unsafe void EnumerateLineFragmentsForGlyphRange (NSRange glyphRange, Action<CGRect, CGRect, NSTextContainer, NSRange, bool*> block);

	//	// -(void)enumerateEnclosingRectsForGlyphRange:(NSRange)glyphRange withinSelectedGlyphRange:(NSRange)selectedRange inTextContainer:(NSTextContainer * _Nonnull)textContainer usingBlock:(void (^ _Nonnull)(CGRect, BOOL * _Nonnull))block __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:")]
	//	unsafe void EnumerateEnclosingRectsForGlyphRange (NSRange glyphRange, NSRange selectedRange, NSTextContainer textContainer, Action<CGRect, bool*> block);

	//	// -(void)drawBackgroundForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin;
	//	[Export ("drawBackgroundForGlyphRange:atPoint:")]
	//	void DrawBackgroundForGlyphRange (NSRange glyphsToShow, CGPoint origin);

	//	// -(void)drawGlyphsForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin;
	//	[Export ("drawGlyphsForGlyphRange:atPoint:")]
	//	void DrawGlyphsForGlyphRange (NSRange glyphsToShow, CGPoint origin);

	//	// -(void)showCGGlyphs:(const CGGlyph * _Nonnull)glyphs positions:(const CGPoint * _Nonnull)positions count:(NSUInteger)glyphCount font:(UIFont * _Nonnull)font matrix:(CGAffineTransform)textMatrix attributes:(NSDictionary<NSAttributedStringKey,id> * _Nonnull)attributes inContext:(CGContextRef _Nonnull)graphicsContext __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("showCGGlyphs:positions:count:font:matrix:attributes:inContext:")]
	//	unsafe void ShowCGGlyphs (ushort* glyphs, CGPoint* positions, nuint glyphCount, UIFont font, CGAffineTransform textMatrix, NSDictionary<NSString, NSObject> attributes, CGContextRef* graphicsContext);

	//	// -(void)fillBackgroundRectArray:(const CGRect * _Nonnull)rectArray count:(NSUInteger)rectCount forCharacterRange:(NSRange)charRange color:(UIColor * _Nonnull)color __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("fillBackgroundRectArray:count:forCharacterRange:color:")]
	//	unsafe void FillBackgroundRectArray (CGRect* rectArray, nuint rectCount, NSRange charRange, UIColor color);

	//	// -(void)drawUnderlineForGlyphRange:(NSRange)glyphRange underlineType:(NSUnderlineStyle)underlineVal baselineOffset:(CGFloat)baselineOffset lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin;
	//	[Export ("drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")]
	//	void DrawUnderlineForGlyphRange (NSRange glyphRange, NSUnderlineStyle underlineVal, nfloat baselineOffset, CGRect lineRect, NSRange lineGlyphRange, CGPoint containerOrigin);

	//	// -(void)underlineGlyphRange:(NSRange)glyphRange underlineType:(NSUnderlineStyle)underlineVal lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin;
	//	[Export ("underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")]
	//	void UnderlineGlyphRange (NSRange glyphRange, NSUnderlineStyle underlineVal, CGRect lineRect, NSRange lineGlyphRange, CGPoint containerOrigin);

	//	// -(void)drawStrikethroughForGlyphRange:(NSRange)glyphRange strikethroughType:(NSUnderlineStyle)strikethroughVal baselineOffset:(CGFloat)baselineOffset lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin;
	//	[Export ("drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")]
	//	void DrawStrikethroughForGlyphRange (NSRange glyphRange, NSUnderlineStyle strikethroughVal, nfloat baselineOffset, CGRect lineRect, NSRange lineGlyphRange, CGPoint containerOrigin);

	//	// -(void)strikethroughGlyphRange:(NSRange)glyphRange strikethroughType:(NSUnderlineStyle)strikethroughVal lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin;
	//	[Export ("strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")]
	//	void StrikethroughGlyphRange (NSRange glyphRange, NSUnderlineStyle strikethroughVal, CGRect lineRect, NSRange lineGlyphRange, CGPoint containerOrigin);
	//}

	//// @protocol NSLayoutManagerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface NSLayoutManagerDelegate
	//{
	//	// @optional -(NSUInteger)layoutManager:(NSLayoutManager * _Nonnull)layoutManager shouldGenerateGlyphs:(const CGGlyph * _Nonnull)glyphs properties:(const NSGlyphProperty * _Nonnull)props characterIndexes:(const NSUInteger * _Nonnull)charIndexes font:(UIFont * _Nonnull)aFont forGlyphRange:(NSRange)glyphRange __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:")]
	//	unsafe nuint LayoutManager (NSLayoutManager layoutManager, ushort* glyphs, NSGlyphProperty* props, nuint* charIndexes, UIFont aFont, NSRange glyphRange);

	//	// @optional -(CGFloat)layoutManager:(NSLayoutManager * _Nonnull)layoutManager lineSpacingAfterGlyphAtIndex:(NSUInteger)glyphIndex withProposedLineFragmentRect:(CGRect)rect __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("layoutManager:lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:")]
	//	nfloat LayoutManager (NSLayoutManager layoutManager, nuint glyphIndex, CGRect rect);

	//	// @optional -(CGFloat)layoutManager:(NSLayoutManager * _Nonnull)layoutManager paragraphSpacingBeforeGlyphAtIndex:(NSUInteger)glyphIndex withProposedLineFragmentRect:(CGRect)rect __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("layoutManager:paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:")]
	//	nfloat LayoutManager (NSLayoutManager layoutManager, nuint glyphIndex, CGRect rect);

	//	// @optional -(CGFloat)layoutManager:(NSLayoutManager * _Nonnull)layoutManager paragraphSpacingAfterGlyphAtIndex:(NSUInteger)glyphIndex withProposedLineFragmentRect:(CGRect)rect __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("layoutManager:paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:")]
	//	nfloat LayoutManager (NSLayoutManager layoutManager, nuint glyphIndex, CGRect rect);

	//	// @optional -(NSControlCharacterAction)layoutManager:(NSLayoutManager * _Nonnull)layoutManager shouldUseAction:(NSControlCharacterAction)action forControlCharacterAtIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("layoutManager:shouldUseAction:forControlCharacterAtIndex:")]
	//	NSControlCharacterAction LayoutManager (NSLayoutManager layoutManager, NSControlCharacterAction action, nuint charIndex);

	//	// @optional -(BOOL)layoutManager:(NSLayoutManager * _Nonnull)layoutManager shouldBreakLineByWordBeforeCharacterAtIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("layoutManager:shouldBreakLineByWordBeforeCharacterAtIndex:")]
	//	bool LayoutManager (NSLayoutManager layoutManager, nuint charIndex);

	//	// @optional -(BOOL)layoutManager:(NSLayoutManager * _Nonnull)layoutManager shouldBreakLineByHyphenatingBeforeCharacterAtIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("layoutManager:shouldBreakLineByHyphenatingBeforeCharacterAtIndex:")]
	//	bool LayoutManager (NSLayoutManager layoutManager, nuint charIndex);

	//	// @optional -(CGRect)layoutManager:(NSLayoutManager * _Nonnull)layoutManager boundingBoxForControlGlyphAtIndex:(NSUInteger)glyphIndex forTextContainer:(NSTextContainer * _Nonnull)textContainer proposedLineFragment:(CGRect)proposedRect glyphPosition:(CGPoint)glyphPosition characterIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("layoutManager:boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:")]
	//	CGRect LayoutManager (NSLayoutManager layoutManager, nuint glyphIndex, NSTextContainer textContainer, CGRect proposedRect, CGPoint glyphPosition, nuint charIndex);

	//	// @optional -(BOOL)layoutManager:(NSLayoutManager * _Nonnull)layoutManager shouldSetLineFragmentRect:(CGRect * _Nonnull)lineFragmentRect lineFragmentUsedRect:(CGRect * _Nonnull)lineFragmentUsedRect baselineOffset:(CGFloat * _Nonnull)baselineOffset inTextContainer:(NSTextContainer * _Nonnull)textContainer forGlyphRange:(NSRange)glyphRange __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("layoutManager:shouldSetLineFragmentRect:lineFragmentUsedRect:baselineOffset:inTextContainer:forGlyphRange:")]
	//	unsafe bool LayoutManager (NSLayoutManager layoutManager, CGRect* lineFragmentRect, CGRect* lineFragmentUsedRect, nfloat* baselineOffset, NSTextContainer textContainer, NSRange glyphRange);

	//	// @optional -(void)layoutManagerDidInvalidateLayout:(NSLayoutManager * _Nonnull)sender __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("layoutManagerDidInvalidateLayout:")]
	//	void LayoutManagerDidInvalidateLayout (NSLayoutManager sender);

	//	// @optional -(void)layoutManager:(NSLayoutManager * _Nonnull)layoutManager didCompleteLayoutForTextContainer:(NSTextContainer * _Nullable)textContainer atEnd:(BOOL)layoutFinishedFlag __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("layoutManager:didCompleteLayoutForTextContainer:atEnd:")]
	//	void LayoutManager (NSLayoutManager layoutManager, [NullAllowed] NSTextContainer textContainer, bool layoutFinishedFlag);

	//	// @optional -(void)layoutManager:(NSLayoutManager * _Nonnull)layoutManager textContainer:(NSTextContainer * _Nonnull)textContainer didChangeGeometryFromSize:(CGSize)oldSize __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("layoutManager:textContainer:didChangeGeometryFromSize:")]
	//	void LayoutManager (NSLayoutManager layoutManager, NSTextContainer textContainer, CGSize oldSize);
	//}

	//// @interface NSLayoutManagerDeprecated (NSLayoutManager)
	//[Category]
	//[BaseType (typeof(NSLayoutManager))]
	//interface NSLayoutManager_NSLayoutManagerDeprecated
	//{
	//	// -(CGGlyph)glyphAtIndex:(NSUInteger)glyphIndex isValidIndex:(BOOL * _Nullable)isValidIndex;
	//	[Export ("glyphAtIndex:isValidIndex:")]
	//	unsafe ushort GlyphAtIndex (nuint glyphIndex, [NullAllowed] bool* isValidIndex);

	//	// -(CGGlyph)glyphAtIndex:(NSUInteger)glyphIndex;
	//	[Export ("glyphAtIndex:")]
	//	ushort GlyphAtIndex (nuint glyphIndex);
	//}

	//// @interface NSShadow : NSObject <NSCopying, NSSecureCoding>
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSShadow : INSCopying, INSSecureCoding
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (assign, nonatomic) CGSize shadowOffset;
	//	[Export ("shadowOffset", ArgumentSemantic.Assign)]
	//	CGSize ShadowOffset { get; set; }

	//	// @property (assign, nonatomic) CGFloat shadowBlurRadius;
	//	[Export ("shadowBlurRadius")]
	//	nfloat ShadowBlurRadius { get; set; }

	//	// @property (nonatomic, strong) id _Nullable shadowColor;
	//	[NullAllowed, Export ("shadowColor", ArgumentSemantic.Strong)]
	//	NSObject ShadowColor { get; set; }
	//}

	//// @interface NSStringDrawingContext : NSObject
	//[iOS (6,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSStringDrawingContext
	//{
	//	// @property (nonatomic) CGFloat minimumScaleFactor;
	//	[Export ("minimumScaleFactor")]
	//	nfloat MinimumScaleFactor { get; set; }

	//	// @property (readonly, nonatomic) CGFloat actualScaleFactor;
	//	[Export ("actualScaleFactor")]
	//	nfloat ActualScaleFactor { get; }

	//	// @property (readonly, nonatomic) CGRect totalBounds;
	//	[Export ("totalBounds")]
	//	CGRect TotalBounds { get; }
	//}

	//// @interface NSStringDrawing (NSString)
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_NSStringDrawing
	//{
	//	// -(CGSize)sizeWithAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("sizeWithAttributes:")]
	//	CGSize SizeWithAttributes ([NullAllowed] NSDictionary<NSString, NSObject> attrs);

	//	// -(void)drawAtPoint:(CGPoint)point withAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("drawAtPoint:withAttributes:")]
	//	void DrawAtPoint (CGPoint point, [NullAllowed] NSDictionary<NSString, NSObject> attrs);

	//	// -(void)drawInRect:(CGRect)rect withAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("drawInRect:withAttributes:")]
	//	void DrawInRect (CGRect rect, [NullAllowed] NSDictionary<NSString, NSObject> attrs);
	//}

	//// @interface NSStringDrawing (NSAttributedString)
	//[Category]
	//[BaseType (typeof(NSAttributedString))]
	//interface NSAttributedString_NSStringDrawing
	//{
	//	// -(CGSize)size __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6, 0)]
	//	[Export ("size")]
	//	[Verify (MethodToProperty)]
	//	CGSize Size { get; }

	//	// -(void)drawAtPoint:(CGPoint)point __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("drawAtPoint:")]
	//	void DrawAtPoint (CGPoint point);

	//	// -(void)drawInRect:(CGRect)rect __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("drawInRect:")]
	//	void DrawInRect (CGRect rect);
	//}

	//// @interface NSExtendedStringDrawing (NSString)
	//[Category]
	//[BaseType (typeof(NSString))]
	//interface NSString_NSExtendedStringDrawing
	//{
	//	// -(void)drawWithRect:(CGRect)rect options:(NSStringDrawingOptions)options attributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attributes context:(NSStringDrawingContext * _Nullable)context __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("drawWithRect:options:attributes:context:")]
	//	void DrawWithRect (CGRect rect, NSStringDrawingOptions options, [NullAllowed] NSDictionary<NSString, NSObject> attributes, [NullAllowed] NSStringDrawingContext context);

	//	// -(CGRect)boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options attributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attributes context:(NSStringDrawingContext * _Nullable)context __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("boundingRectWithSize:options:attributes:context:")]
	//	CGRect BoundingRectWithSize (CGSize size, NSStringDrawingOptions options, [NullAllowed] NSDictionary<NSString, NSObject> attributes, [NullAllowed] NSStringDrawingContext context);
	//}

	//// @interface NSExtendedStringDrawing (NSAttributedString)
	//[Category]
	//[BaseType (typeof(NSAttributedString))]
	//interface NSAttributedString_NSExtendedStringDrawing
	//{
	//	// -(void)drawWithRect:(CGRect)rect options:(NSStringDrawingOptions)options context:(NSStringDrawingContext * _Nullable)context __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("drawWithRect:options:context:")]
	//	void DrawWithRect (CGRect rect, NSStringDrawingOptions options, [NullAllowed] NSStringDrawingContext context);

	//	// -(CGRect)boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options context:(NSStringDrawingContext * _Nullable)context __attribute__((availability(ios, introduced=6.0)));
	//	[iOS (6,0)]
	//	[Export ("boundingRectWithSize:options:context:")]
	//	CGRect BoundingRectWithSize (CGSize size, NSStringDrawingOptions options, [NullAllowed] NSStringDrawingContext context);
	//}

	//// @interface NSStringDrawingContextDeprecated (NSStringDrawingContext)
	//[Category]
	//[BaseType (typeof(NSStringDrawingContext))]
	//interface NSStringDrawingContext_NSStringDrawingContextDeprecated
	//{
	//	// @property (nonatomic) CGFloat minimumTrackingAdjustment __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 6, 0)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoTV, NoMac]
	//	[Export ("minimumTrackingAdjustment")]
	//	nfloat MinimumTrackingAdjustment { get; set; }

	//	// @property (readonly, nonatomic) CGFloat actualTrackingAdjustment __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6.0, deprecated=7.0)));
	//	[Introduced (PlatformName.iOS, 6, 0)]
	//	[Deprecated (PlatformName.iOS, 7, 0)]
	//	[NoTV, NoMac]
	//	[Export ("actualTrackingAdjustment")]
	//	nfloat ActualTrackingAdjustment { get; }
	//}

	//// @interface NSTextContainer : NSObject <NSCoding, NSTextLayoutOrientationProvider>
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface NSTextContainer : INSCoding, INSTextLayoutOrientationProvider
	//{
	//	// -(instancetype _Nonnull)initWithSize:(CGSize)size __attribute__((availability(ios, introduced=7.0))) __attribute__((objc_designated_initializer));
	//	[iOS (7,0)]
	//	[Export ("initWithSize:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGSize size);

	//	// -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);

	//	// @property (assign, nonatomic) NSLayoutManager * _Nullable layoutManager;
	//	[NullAllowed, Export ("layoutManager", ArgumentSemantic.Assign)]
	//	NSLayoutManager LayoutManager { get; set; }

	//	// -(void)replaceLayoutManager:(NSLayoutManager * _Nonnull)newLayoutManager __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("replaceLayoutManager:")]
	//	void ReplaceLayoutManager (NSLayoutManager newLayoutManager);

	//	// @property (nonatomic) CGSize size __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("size", ArgumentSemantic.Assign)]
	//	CGSize Size { get; set; }

	//	// @property (copy, nonatomic) NSArray<UIBezierPath *> * _Nonnull exclusionPaths __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("exclusionPaths", ArgumentSemantic.Copy)]
	//	UIBezierPath[] ExclusionPaths { get; set; }

	//	// @property (nonatomic) NSLineBreakMode lineBreakMode __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("lineBreakMode", ArgumentSemantic.Assign)]
	//	NSLineBreakMode LineBreakMode { get; set; }

	//	// @property (nonatomic) CGFloat lineFragmentPadding;
	//	[Export ("lineFragmentPadding")]
	//	nfloat LineFragmentPadding { get; set; }

	//	// @property (nonatomic) NSUInteger maximumNumberOfLines __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7, 0)]
	//	[Export ("maximumNumberOfLines")]
	//	nuint MaximumNumberOfLines { get; set; }

	//	// -(CGRect)lineFragmentRectForProposedRect:(CGRect)proposedRect atIndex:(NSUInteger)characterIndex writingDirection:(NSWritingDirection)baseWritingDirection remainingRect:(CGRect * _Nullable)remainingRect __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("lineFragmentRectForProposedRect:atIndex:writingDirection:remainingRect:")]
	//	unsafe CGRect LineFragmentRectForProposedRect (CGRect proposedRect, nuint characterIndex, NSWritingDirection baseWritingDirection, [NullAllowed] CGRect* remainingRect);

	//	// @property (readonly, getter = isSimpleRectangularTextContainer, nonatomic) BOOL simpleRectangularTextContainer __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("simpleRectangularTextContainer")]
	//	bool SimpleRectangularTextContainer { [Bind ("isSimpleRectangularTextContainer")] get; }

	//	// @property (nonatomic) BOOL widthTracksTextView;
	//	[Export ("widthTracksTextView")]
	//	bool WidthTracksTextView { get; set; }

	//	// @property (nonatomic) BOOL heightTracksTextView;
	//	[Export ("heightTracksTextView")]
	//	bool HeightTracksTextView { get; set; }
	//}

	//// @interface UIPreviewInteraction : NSObject
	//[NoWatch, NoTV, iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIPreviewInteraction
	//{
	//	// -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view __attribute__((objc_designated_initializer));
	//	[Export ("initWithView:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIView view);

	//	// @property (readonly, nonatomic, weak) UIView * _Nullable view;
	//	[NullAllowed, Export ("view", ArgumentSemantic.Weak)]
	//	UIView View { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIPreviewInteractionDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIPreviewInteractionDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(CGPoint)locationInCoordinateSpace:(id<UICoordinateSpace> _Nullable)coordinateSpace;
	//	[Export ("locationInCoordinateSpace:")]
	//	CGPoint LocationInCoordinateSpace ([NullAllowed] UICoordinateSpace coordinateSpace);

	//	// -(void)cancelInteraction;
	//	[Export ("cancelInteraction")]
	//	void CancelInteraction ();
	//}

	//// @protocol UIPreviewInteractionDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIPreviewInteractionDelegate
	//{
	//	// @required -(void)previewInteraction:(UIPreviewInteraction * _Nonnull)previewInteraction didUpdatePreviewTransition:(CGFloat)transitionProgress ended:(BOOL)ended __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoWatch, NoTV, iOS (10,0)]
	//	[Abstract]
	//	[Export ("previewInteraction:didUpdatePreviewTransition:ended:")]
	//	void PreviewInteraction (UIPreviewInteraction previewInteraction, nfloat transitionProgress, bool ended);

	//	// @required -(void)previewInteractionDidCancel:(UIPreviewInteraction * _Nonnull)previewInteraction __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoWatch, NoTV, iOS (10,0)]
	//	[Abstract]
	//	[Export ("previewInteractionDidCancel:")]
	//	void PreviewInteractionDidCancel (UIPreviewInteraction previewInteraction);

	//	// @optional -(BOOL)previewInteractionShouldBegin:(UIPreviewInteraction * _Nonnull)previewInteraction __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoWatch, NoTV, iOS (10,0)]
	//	[Export ("previewInteractionShouldBegin:")]
	//	bool PreviewInteractionShouldBegin (UIPreviewInteraction previewInteraction);

	//	// @optional -(void)previewInteraction:(UIPreviewInteraction * _Nonnull)previewInteraction didUpdateCommitTransition:(CGFloat)transitionProgress ended:(BOOL)ended __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10.0)));
	//	[NoWatch, NoTV, iOS (10,0)]
	//	[Export ("previewInteraction:didUpdateCommitTransition:ended:")]
	//	void PreviewInteraction (UIPreviewInteraction previewInteraction, nfloat transitionProgress, bool ended);
	//}

	//// @protocol UIPopoverPresentationControllerDelegate <UIAdaptivePresentationControllerDelegate>
	//[NoTV]
	//[Protocol, Model]
	//interface UIPopoverPresentationControllerDelegate : IUIAdaptivePresentationControllerDelegate
	//{
	//	// @optional -(void)prepareForPopoverPresentation:(UIPopoverPresentationController * _Nonnull)popoverPresentationController;
	//	[Export ("prepareForPopoverPresentation:")]
	//	void PrepareForPopoverPresentation (UIPopoverPresentationController popoverPresentationController);

	//	// @optional -(BOOL)popoverPresentationControllerShouldDismissPopover:(UIPopoverPresentationController * _Nonnull)popoverPresentationController;
	//	[Export ("popoverPresentationControllerShouldDismissPopover:")]
	//	bool PopoverPresentationControllerShouldDismissPopover (UIPopoverPresentationController popoverPresentationController);

	//	// @optional -(void)popoverPresentationControllerDidDismissPopover:(UIPopoverPresentationController * _Nonnull)popoverPresentationController;
	//	[Export ("popoverPresentationControllerDidDismissPopover:")]
	//	void PopoverPresentationControllerDidDismissPopover (UIPopoverPresentationController popoverPresentationController);

	//	// @optional -(void)popoverPresentationController:(UIPopoverPresentationController * _Nonnull)popoverPresentationController willRepositionPopoverToRect:(CGRect * _Nonnull)rect inView:(UIView * _Nonnull * _Nonnull)view;
	//	[Export ("popoverPresentationController:willRepositionPopoverToRect:inView:")]
	//	unsafe void PopoverPresentationController (UIPopoverPresentationController popoverPresentationController, CGRect* rect, out UIView view);
	//}

	//// @interface UIPopoverPresentationController : UIPresentationController
	//[NoTV, iOS (8,0)]
	//[BaseType (typeof(UIPresentationController))]
	//interface UIPopoverPresentationController
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIPopoverPresentationControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIPopoverPresentationControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (assign, nonatomic) UIPopoverArrowDirection permittedArrowDirections;
	//	[Export ("permittedArrowDirections", ArgumentSemantic.Assign)]
	//	UIPopoverArrowDirection PermittedArrowDirections { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable sourceView;
	//	[NullAllowed, Export ("sourceView", ArgumentSemantic.Strong)]
	//	UIView SourceView { get; set; }

	//	// @property (assign, nonatomic) CGRect sourceRect;
	//	[Export ("sourceRect", ArgumentSemantic.Assign)]
	//	CGRect SourceRect { get; set; }

	//	// @property (assign, nonatomic) BOOL canOverlapSourceViewRect __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("canOverlapSourceViewRect")]
	//	bool CanOverlapSourceViewRect { get; set; }

	//	// @property (nonatomic, strong) UIBarButtonItem * _Nullable barButtonItem;
	//	[NullAllowed, Export ("barButtonItem", ArgumentSemantic.Strong)]
	//	UIBarButtonItem BarButtonItem { get; set; }

	//	// @property (readonly, nonatomic) UIPopoverArrowDirection arrowDirection;
	//	[Export ("arrowDirection")]
	//	UIPopoverArrowDirection ArrowDirection { get; }

	//	// @property (copy, nonatomic) NSArray<UIView *> * _Nullable passthroughViews;
	//	[NullAllowed, Export ("passthroughViews", ArgumentSemantic.Copy)]
	//	UIView[] PassthroughViews { get; set; }

	//	// @property (copy, nonatomic) UIColor * _Nullable backgroundColor;
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Copy)]
	//	UIColor BackgroundColor { get; set; }

	//	// @property (readwrite, nonatomic) UIEdgeInsets popoverLayoutMargins;
	//	[Export ("popoverLayoutMargins", ArgumentSemantic.Assign)]
	//	UIEdgeInsets PopoverLayoutMargins { get; set; }

	//	// @property (readwrite, nonatomic, strong) Class<UIPopoverBackgroundViewMethods> _Nullable popoverBackgroundViewClass;
	//	[NullAllowed, Export ("popoverBackgroundViewClass", ArgumentSemantic.Strong)]
	//	UIPopoverBackgroundViewMethods PopoverBackgroundViewClass { get; set; }
	//}

	//// @protocol UIDynamicAnimatorDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIDynamicAnimatorDelegate
	//{
	//	// @optional -(void)dynamicAnimatorWillResume:(UIDynamicAnimator * _Nonnull)animator;
	//	[Export ("dynamicAnimatorWillResume:")]
	//	void DynamicAnimatorWillResume (UIDynamicAnimator animator);

	//	// @optional -(void)dynamicAnimatorDidPause:(UIDynamicAnimator * _Nonnull)animator;
	//	[Export ("dynamicAnimatorDidPause:")]
	//	void DynamicAnimatorDidPause (UIDynamicAnimator animator);
	//}

	//// @interface UIDynamicAnimator : NSObject
	//[iOS (7,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIDynamicAnimator
	//{
	//	// -(instancetype _Nonnull)initWithReferenceView:(UIView * _Nonnull)view __attribute__((objc_designated_initializer));
	//	[Export ("initWithReferenceView:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIView view);

	//	// -(void)addBehavior:(UIDynamicBehavior * _Nonnull)behavior;
	//	[Export ("addBehavior:")]
	//	void AddBehavior (UIDynamicBehavior behavior);

	//	// -(void)removeBehavior:(UIDynamicBehavior * _Nonnull)behavior;
	//	[Export ("removeBehavior:")]
	//	void RemoveBehavior (UIDynamicBehavior behavior);

	//	// -(void)removeAllBehaviors;
	//	[Export ("removeAllBehaviors")]
	//	void RemoveAllBehaviors ();

	//	// @property (readonly, nonatomic) UIView * _Nullable referenceView;
	//	[NullAllowed, Export ("referenceView")]
	//	UIView ReferenceView { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<__kindof UIDynamicBehavior *> * _Nonnull behaviors;
	//	[Export ("behaviors", ArgumentSemantic.Copy)]
	//	UIDynamicBehavior[] Behaviors { get; }

	//	// -(NSArray<id<UIDynamicItem>> * _Nonnull)itemsInRect:(CGRect)rect;
	//	[Export ("itemsInRect:")]
	//	UIDynamicItem[] ItemsInRect (CGRect rect);

	//	// -(void)updateItemUsingCurrentState:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("updateItemUsingCurrentState:")]
	//	void UpdateItemUsingCurrentState (UIDynamicItem item);

	//	// @property (readonly, getter = isRunning, nonatomic) BOOL running;
	//	[Export ("running")]
	//	bool Running { [Bind ("isRunning")] get; }

	//	// @property (readonly, nonatomic) NSTimeInterval elapsedTime;
	//	[Export ("elapsedTime")]
	//	double ElapsedTime { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIDynamicAnimatorDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIDynamicAnimatorDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }
	//}

	//// @interface UICollectionViewAdditions (UIDynamicAnimator)
	//[Category]
	//[BaseType (typeof(UIDynamicAnimator))]
	//interface UIDynamicAnimator_UICollectionViewAdditions
	//{
	//	// -(instancetype _Nonnull)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout;
	//	[Export ("initWithCollectionViewLayout:")]
	//	IntPtr Constructor (UICollectionViewLayout layout);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForCellAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("layoutAttributesForCellAtIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes LayoutAttributesForCellAtIndexPath (NSIndexPath indexPath);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForSupplementaryViewOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("layoutAttributesForSupplementaryViewOfKind:atIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryViewOfKind (string kind, NSIndexPath indexPath);

	//	// -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForDecorationViewOfKind:(NSString * _Nonnull)decorationViewKind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("layoutAttributesForDecorationViewOfKind:atIndexPath:")]
	//	[return: NullAllowed]
	//	UICollectionViewLayoutAttributes LayoutAttributesForDecorationViewOfKind (string decorationViewKind, NSIndexPath indexPath);
	//}

	//// @interface UIPushBehavior : UIDynamicBehavior
	//[iOS (7,0)]
	//[BaseType (typeof(UIDynamicBehavior))]
	//interface UIPushBehavior
	//{
	//	// -(instancetype _Nonnull)initWithItems:(NSArray<id<UIDynamicItem>> * _Nonnull)items mode:(UIPushBehaviorMode)mode __attribute__((objc_designated_initializer));
	//	[Export ("initWithItems:mode:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIDynamicItem[] items, UIPushBehaviorMode mode);

	//	// -(void)addItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("addItem:")]
	//	void AddItem (UIDynamicItem item);

	//	// -(void)removeItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("removeItem:")]
	//	void RemoveItem (UIDynamicItem item);

	//	// @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	UIDynamicItem[] Items { get; }

	//	// -(UIOffset)targetOffsetFromCenterForItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("targetOffsetFromCenterForItem:")]
	//	UIOffset TargetOffsetFromCenterForItem (UIDynamicItem item);

	//	// -(void)setTargetOffsetFromCenter:(UIOffset)o forItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("setTargetOffsetFromCenter:forItem:")]
	//	void SetTargetOffsetFromCenter (UIOffset o, UIDynamicItem item);

	//	// @property (readonly, nonatomic) UIPushBehaviorMode mode;
	//	[Export ("mode")]
	//	UIPushBehaviorMode Mode { get; }

	//	// @property (readwrite, nonatomic) BOOL active;
	//	[Export ("active")]
	//	bool Active { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat angle;
	//	[Export ("angle")]
	//	nfloat Angle { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat magnitude;
	//	[Export ("magnitude")]
	//	nfloat Magnitude { get; set; }

	//	// @property (readwrite, nonatomic) CGVector pushDirection;
	//	[Export ("pushDirection", ArgumentSemantic.Assign)]
	//	CGVector PushDirection { get; set; }

	//	// -(void)setAngle:(CGFloat)angle magnitude:(CGFloat)magnitude;
	//	[Export ("setAngle:magnitude:")]
	//	void SetAngle (nfloat angle, nfloat magnitude);
	//}

	//// @interface UISnapBehavior : UIDynamicBehavior
	//[iOS (7,0)]
	//[BaseType (typeof(UIDynamicBehavior))]
	//interface UISnapBehavior
	//{
	//	// -(instancetype _Nonnull)initWithItem:(id<UIDynamicItem> _Nonnull)item snapToPoint:(CGPoint)point __attribute__((objc_designated_initializer));
	//	[Export ("initWithItem:snapToPoint:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIDynamicItem item, CGPoint point);

	//	// @property (assign, nonatomic) CGPoint snapPoint __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("snapPoint", ArgumentSemantic.Assign)]
	//	CGPoint SnapPoint { get; set; }

	//	// @property (assign, nonatomic) CGFloat damping;
	//	[Export ("damping")]
	//	nfloat Damping { get; set; }
	//}

	//// @interface UIDynamicItemBehavior : UIDynamicBehavior
	//[iOS (7,0)]
	//[BaseType (typeof(UIDynamicBehavior))]
	//interface UIDynamicItemBehavior
	//{
	//	// -(instancetype _Nonnull)initWithItems:(NSArray<id<UIDynamicItem>> * _Nonnull)items __attribute__((objc_designated_initializer));
	//	[Export ("initWithItems:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIDynamicItem[] items);

	//	// -(void)addItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("addItem:")]
	//	void AddItem (UIDynamicItem item);

	//	// -(void)removeItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("removeItem:")]
	//	void RemoveItem (UIDynamicItem item);

	//	// @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	UIDynamicItem[] Items { get; }

	//	// @property (readwrite, nonatomic) CGFloat elasticity;
	//	[Export ("elasticity")]
	//	nfloat Elasticity { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat friction;
	//	[Export ("friction")]
	//	nfloat Friction { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat density;
	//	[Export ("density")]
	//	nfloat Density { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat resistance;
	//	[Export ("resistance")]
	//	nfloat Resistance { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat angularResistance;
	//	[Export ("angularResistance")]
	//	nfloat AngularResistance { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat charge __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("charge")]
	//	nfloat Charge { get; set; }

	//	// @property (getter = isAnchored, nonatomic) BOOL anchored __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("anchored")]
	//	bool Anchored { [Bind ("isAnchored")] get; set; }

	//	// @property (readwrite, nonatomic) BOOL allowsRotation;
	//	[Export ("allowsRotation")]
	//	bool AllowsRotation { get; set; }

	//	// -(void)addLinearVelocity:(CGPoint)velocity forItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("addLinearVelocity:forItem:")]
	//	void AddLinearVelocity (CGPoint velocity, UIDynamicItem item);

	//	// -(CGPoint)linearVelocityForItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("linearVelocityForItem:")]
	//	CGPoint LinearVelocityForItem (UIDynamicItem item);

	//	// -(void)addAngularVelocity:(CGFloat)velocity forItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("addAngularVelocity:forItem:")]
	//	void AddAngularVelocity (nfloat velocity, UIDynamicItem item);

	//	// -(CGFloat)angularVelocityForItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("angularVelocityForItem:")]
	//	nfloat AngularVelocityForItem (UIDynamicItem item);
	//}

	//// @interface UIFieldBehavior : UIDynamicBehavior
	//[iOS (9,0)]
	//[BaseType (typeof(UIDynamicBehavior))]
	//[DisableDefaultCtor]
	//interface UIFieldBehavior
	//{
	//	// -(void)addItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("addItem:")]
	//	void AddItem (UIDynamicItem item);

	//	// -(void)removeItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("removeItem:")]
	//	void RemoveItem (UIDynamicItem item);

	//	// @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	UIDynamicItem[] Items { get; }

	//	// @property (assign, nonatomic) CGPoint position;
	//	[Export ("position", ArgumentSemantic.Assign)]
	//	CGPoint Position { get; set; }

	//	// @property (nonatomic, strong) UIRegion * _Nonnull region;
	//	[Export ("region", ArgumentSemantic.Strong)]
	//	UIRegion Region { get; set; }

	//	// @property (assign, nonatomic) CGFloat strength;
	//	[Export ("strength")]
	//	nfloat Strength { get; set; }

	//	// @property (assign, nonatomic) CGFloat falloff;
	//	[Export ("falloff")]
	//	nfloat Falloff { get; set; }

	//	// @property (assign, nonatomic) CGFloat minimumRadius;
	//	[Export ("minimumRadius")]
	//	nfloat MinimumRadius { get; set; }

	//	// @property (assign, nonatomic) CGVector direction;
	//	[Export ("direction", ArgumentSemantic.Assign)]
	//	CGVector Direction { get; set; }

	//	// @property (assign, nonatomic) CGFloat smoothness;
	//	[Export ("smoothness")]
	//	nfloat Smoothness { get; set; }

	//	// @property (assign, nonatomic) CGFloat animationSpeed;
	//	[Export ("animationSpeed")]
	//	nfloat AnimationSpeed { get; set; }

	//	// +(instancetype _Nonnull)dragField;
	//	[Static]
	//	[Export ("dragField")]
	//	UIFieldBehavior DragField ();

	//	// +(instancetype _Nonnull)vortexField;
	//	[Static]
	//	[Export ("vortexField")]
	//	UIFieldBehavior VortexField ();

	//	// +(instancetype _Nonnull)radialGravityFieldWithPosition:(CGPoint)position;
	//	[Static]
	//	[Export ("radialGravityFieldWithPosition:")]
	//	UIFieldBehavior RadialGravityFieldWithPosition (CGPoint position);

	//	// +(instancetype _Nonnull)linearGravityFieldWithVector:(CGVector)direction;
	//	[Static]
	//	[Export ("linearGravityFieldWithVector:")]
	//	UIFieldBehavior LinearGravityFieldWithVector (CGVector direction);

	//	// +(instancetype _Nonnull)velocityFieldWithVector:(CGVector)direction;
	//	[Static]
	//	[Export ("velocityFieldWithVector:")]
	//	UIFieldBehavior VelocityFieldWithVector (CGVector direction);

	//	// +(instancetype _Nonnull)noiseFieldWithSmoothness:(CGFloat)smoothness animationSpeed:(CGFloat)speed;
	//	[Static]
	//	[Export ("noiseFieldWithSmoothness:animationSpeed:")]
	//	UIFieldBehavior NoiseFieldWithSmoothness (nfloat smoothness, nfloat speed);

	//	// +(instancetype _Nonnull)turbulenceFieldWithSmoothness:(CGFloat)smoothness animationSpeed:(CGFloat)speed;
	//	[Static]
	//	[Export ("turbulenceFieldWithSmoothness:animationSpeed:")]
	//	UIFieldBehavior TurbulenceFieldWithSmoothness (nfloat smoothness, nfloat speed);

	//	// +(instancetype _Nonnull)springField;
	//	[Static]
	//	[Export ("springField")]
	//	UIFieldBehavior SpringField ();

	//	// +(instancetype _Nonnull)electricField;
	//	[Static]
	//	[Export ("electricField")]
	//	UIFieldBehavior ElectricField ();

	//	// +(instancetype _Nonnull)magneticField;
	//	[Static]
	//	[Export ("magneticField")]
	//	UIFieldBehavior MagneticField ();

	//	// +(instancetype _Nonnull)fieldWithEvaluationBlock:(CGVector (^ _Nonnull)(UIFieldBehavior * _Nonnull, CGPoint, CGVector, CGFloat, CGFloat, NSTimeInterval))block;
	//	[Static]
	//	[Export ("fieldWithEvaluationBlock:")]
	//	UIFieldBehavior FieldWithEvaluationBlock (Func<UIFieldBehavior, CGPoint, CGVector, nfloat, nfloat, double, CGVector> block);
	//}

	//// @interface UIGravityBehavior : UIDynamicBehavior
	//[iOS (7,0)]
	//[BaseType (typeof(UIDynamicBehavior))]
	//interface UIGravityBehavior
	//{
	//	// -(instancetype _Nonnull)initWithItems:(NSArray<id<UIDynamicItem>> * _Nonnull)items __attribute__((objc_designated_initializer));
	//	[Export ("initWithItems:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIDynamicItem[] items);

	//	// -(void)addItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("addItem:")]
	//	void AddItem (UIDynamicItem item);

	//	// -(void)removeItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("removeItem:")]
	//	void RemoveItem (UIDynamicItem item);

	//	// @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	UIDynamicItem[] Items { get; }

	//	// @property (readwrite, nonatomic) CGVector gravityDirection;
	//	[Export ("gravityDirection", ArgumentSemantic.Assign)]
	//	CGVector GravityDirection { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat angle;
	//	[Export ("angle")]
	//	nfloat Angle { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat magnitude;
	//	[Export ("magnitude")]
	//	nfloat Magnitude { get; set; }

	//	// -(void)setAngle:(CGFloat)angle magnitude:(CGFloat)magnitude;
	//	[Export ("setAngle:magnitude:")]
	//	void SetAngle (nfloat angle, nfloat magnitude);
	//}

	//// @interface UIAttachmentBehavior : UIDynamicBehavior
	//[iOS (7,0)]
	//[BaseType (typeof(UIDynamicBehavior))]
	//interface UIAttachmentBehavior
	//{
	//	// -(instancetype _Nonnull)initWithItem:(id<UIDynamicItem> _Nonnull)item attachedToAnchor:(CGPoint)point;
	//	[Export ("initWithItem:attachedToAnchor:")]
	//	IntPtr Constructor (UIDynamicItem item, CGPoint point);

	//	// -(instancetype _Nonnull)initWithItem:(id<UIDynamicItem> _Nonnull)item offsetFromCenter:(UIOffset)offset attachedToAnchor:(CGPoint)point __attribute__((objc_designated_initializer));
	//	[Export ("initWithItem:offsetFromCenter:attachedToAnchor:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIDynamicItem item, UIOffset offset, CGPoint point);

	//	// -(instancetype _Nonnull)initWithItem:(id<UIDynamicItem> _Nonnull)item1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2;
	//	[Export ("initWithItem:attachedToItem:")]
	//	IntPtr Constructor (UIDynamicItem item1, UIDynamicItem item2);

	//	// -(instancetype _Nonnull)initWithItem:(id<UIDynamicItem> _Nonnull)item1 offsetFromCenter:(UIOffset)offset1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2 offsetFromCenter:(UIOffset)offset2 __attribute__((objc_designated_initializer));
	//	[Export ("initWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIDynamicItem item1, UIOffset offset1, UIDynamicItem item2, UIOffset offset2);

	//	// +(instancetype _Nonnull)slidingAttachmentWithItem:(id<UIDynamicItem> _Nonnull)item1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2 attachmentAnchor:(CGPoint)point axisOfTranslation:(CGVector)axis __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("slidingAttachmentWithItem:attachedToItem:attachmentAnchor:axisOfTranslation:")]
	//	UIAttachmentBehavior SlidingAttachmentWithItem (UIDynamicItem item1, UIDynamicItem item2, CGPoint point, CGVector axis);

	//	// +(instancetype _Nonnull)slidingAttachmentWithItem:(id<UIDynamicItem> _Nonnull)item attachmentAnchor:(CGPoint)point axisOfTranslation:(CGVector)axis __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("slidingAttachmentWithItem:attachmentAnchor:axisOfTranslation:")]
	//	UIAttachmentBehavior SlidingAttachmentWithItem (UIDynamicItem item, CGPoint point, CGVector axis);

	//	// +(instancetype _Nonnull)limitAttachmentWithItem:(id<UIDynamicItem> _Nonnull)item1 offsetFromCenter:(UIOffset)offset1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2 offsetFromCenter:(UIOffset)offset2 __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("limitAttachmentWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:")]
	//	UIAttachmentBehavior LimitAttachmentWithItem (UIDynamicItem item1, UIOffset offset1, UIDynamicItem item2, UIOffset offset2);

	//	// +(instancetype _Nonnull)fixedAttachmentWithItem:(id<UIDynamicItem> _Nonnull)item1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2 attachmentAnchor:(CGPoint)point __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("fixedAttachmentWithItem:attachedToItem:attachmentAnchor:")]
	//	UIAttachmentBehavior FixedAttachmentWithItem (UIDynamicItem item1, UIDynamicItem item2, CGPoint point);

	//	// +(instancetype _Nonnull)pinAttachmentWithItem:(id<UIDynamicItem> _Nonnull)item1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2 attachmentAnchor:(CGPoint)point __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Static]
	//	[Export ("pinAttachmentWithItem:attachedToItem:attachmentAnchor:")]
	//	UIAttachmentBehavior PinAttachmentWithItem (UIDynamicItem item1, UIDynamicItem item2, CGPoint point);

	//	// @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	UIDynamicItem[] Items { get; }

	//	// @property (readonly, nonatomic) UIAttachmentBehaviorType attachedBehaviorType;
	//	[Export ("attachedBehaviorType")]
	//	UIAttachmentBehaviorType AttachedBehaviorType { get; }

	//	// @property (readwrite, nonatomic) CGPoint anchorPoint;
	//	[Export ("anchorPoint", ArgumentSemantic.Assign)]
	//	CGPoint AnchorPoint { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat length;
	//	[Export ("length")]
	//	nfloat Length { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat damping;
	//	[Export ("damping")]
	//	nfloat Damping { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat frequency;
	//	[Export ("frequency")]
	//	nfloat Frequency { get; set; }

	//	// @property (readwrite, nonatomic) CGFloat frictionTorque __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("frictionTorque")]
	//	nfloat FrictionTorque { get; set; }

	//	// @property (readwrite, nonatomic) UIFloatRange attachmentRange __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9, 0)]
	//	[Export ("attachmentRange", ArgumentSemantic.Assign)]
	//	UIFloatRange AttachmentRange { get; set; }
	//}

	//// @protocol UICollisionBehaviorDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UICollisionBehaviorDelegate
	//{
	//	// @optional -(void)collisionBehavior:(UICollisionBehavior * _Nonnull)behavior beganContactForItem:(id<UIDynamicItem> _Nonnull)item1 withItem:(id<UIDynamicItem> _Nonnull)item2 atPoint:(CGPoint)p;
	//	[Export ("collisionBehavior:beganContactForItem:withItem:atPoint:")]
	//	void BeganContactForItem (UICollisionBehavior behavior, UIDynamicItem item1, UIDynamicItem item2, CGPoint p);

	//	// @optional -(void)collisionBehavior:(UICollisionBehavior * _Nonnull)behavior endedContactForItem:(id<UIDynamicItem> _Nonnull)item1 withItem:(id<UIDynamicItem> _Nonnull)item2;
	//	[Export ("collisionBehavior:endedContactForItem:withItem:")]
	//	void EndedContactForItem (UICollisionBehavior behavior, UIDynamicItem item1, UIDynamicItem item2);

	//	// @optional -(void)collisionBehavior:(UICollisionBehavior * _Nonnull)behavior beganContactForItem:(id<UIDynamicItem> _Nonnull)item withBoundaryIdentifier:(id<NSCopying> _Nullable)identifier atPoint:(CGPoint)p;
	//	[Export ("collisionBehavior:beganContactForItem:withBoundaryIdentifier:atPoint:")]
	//	void BeganContactForItem (UICollisionBehavior behavior, UIDynamicItem item, [NullAllowed] NSCopying identifier, CGPoint p);

	//	// @optional -(void)collisionBehavior:(UICollisionBehavior * _Nonnull)behavior endedContactForItem:(id<UIDynamicItem> _Nonnull)item withBoundaryIdentifier:(id<NSCopying> _Nullable)identifier;
	//	[Export ("collisionBehavior:endedContactForItem:withBoundaryIdentifier:")]
	//	void EndedContactForItem (UICollisionBehavior behavior, UIDynamicItem item, [NullAllowed] NSCopying identifier);
	//}

	//// @interface UICollisionBehavior : UIDynamicBehavior
	//[iOS (7,0)]
	//[BaseType (typeof(UIDynamicBehavior))]
	//interface UICollisionBehavior
	//{
	//	// -(instancetype _Nonnull)initWithItems:(NSArray<id<UIDynamicItem>> * _Nonnull)items __attribute__((objc_designated_initializer));
	//	[Export ("initWithItems:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIDynamicItem[] items);

	//	// -(void)addItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("addItem:")]
	//	void AddItem (UIDynamicItem item);

	//	// -(void)removeItem:(id<UIDynamicItem> _Nonnull)item;
	//	[Export ("removeItem:")]
	//	void RemoveItem (UIDynamicItem item);

	//	// @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	UIDynamicItem[] Items { get; }

	//	// @property (readwrite, nonatomic) UICollisionBehaviorMode collisionMode;
	//	[Export ("collisionMode", ArgumentSemantic.Assign)]
	//	UICollisionBehaviorMode CollisionMode { get; set; }

	//	// @property (readwrite, nonatomic) BOOL translatesReferenceBoundsIntoBoundary;
	//	[Export ("translatesReferenceBoundsIntoBoundary")]
	//	bool TranslatesReferenceBoundsIntoBoundary { get; set; }

	//	// -(void)setTranslatesReferenceBoundsIntoBoundaryWithInsets:(UIEdgeInsets)insets;
	//	[Export ("setTranslatesReferenceBoundsIntoBoundaryWithInsets:")]
	//	void SetTranslatesReferenceBoundsIntoBoundaryWithInsets (UIEdgeInsets insets);

	//	// -(void)addBoundaryWithIdentifier:(id<NSCopying> _Nonnull)identifier forPath:(UIBezierPath * _Nonnull)bezierPath;
	//	[Export ("addBoundaryWithIdentifier:forPath:")]
	//	void AddBoundaryWithIdentifier (NSCopying identifier, UIBezierPath bezierPath);

	//	// -(void)addBoundaryWithIdentifier:(id<NSCopying> _Nonnull)identifier fromPoint:(CGPoint)p1 toPoint:(CGPoint)p2;
	//	[Export ("addBoundaryWithIdentifier:fromPoint:toPoint:")]
	//	void AddBoundaryWithIdentifier (NSCopying identifier, CGPoint p1, CGPoint p2);

	//	// -(UIBezierPath * _Nullable)boundaryWithIdentifier:(id<NSCopying> _Nonnull)identifier;
	//	[Export ("boundaryWithIdentifier:")]
	//	[return: NullAllowed]
	//	UIBezierPath BoundaryWithIdentifier (NSCopying identifier);

	//	// -(void)removeBoundaryWithIdentifier:(id<NSCopying> _Nonnull)identifier;
	//	[Export ("removeBoundaryWithIdentifier:")]
	//	void RemoveBoundaryWithIdentifier (NSCopying identifier);

	//	// @property (readonly, copy, nonatomic) NSArray<id<NSCopying>> * _Nullable boundaryIdentifiers;
	//	[NullAllowed, Export ("boundaryIdentifiers", ArgumentSemantic.Copy)]
	//	NSCopying[] BoundaryIdentifiers { get; }

	//	// -(void)removeAllBoundaries;
	//	[Export ("removeAllBoundaries")]
	//	void RemoveAllBoundaries ();

	//	[Wrap ("WeakCollisionDelegate")]
	//	[NullAllowed]
	//	UICollisionBehaviorDelegate CollisionDelegate { get; set; }

	//	// @property (readwrite, nonatomic, weak) id<UICollisionBehaviorDelegate> _Nullable collisionDelegate;
	//	[NullAllowed, Export ("collisionDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakCollisionDelegate { get; set; }
	//}

	//// @interface UIRegion : NSObject <NSCopying, NSCoding>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIRegion : INSCopying, INSCoding
	//{
	//	// @property (readonly, nonatomic, class) UIRegion * _Nonnull infiniteRegion;
	//	[Static]
	//	[Export ("infiniteRegion")]
	//	UIRegion InfiniteRegion { get; }

	//	// -(instancetype _Nonnull)initWithRadius:(CGFloat)radius;
	//	[Export ("initWithRadius:")]
	//	IntPtr Constructor (nfloat radius);

	//	// -(instancetype _Nonnull)initWithSize:(CGSize)size;
	//	[Export ("initWithSize:")]
	//	IntPtr Constructor (CGSize size);

	//	// -(instancetype _Nonnull)inverseRegion;
	//	[Export ("inverseRegion")]
	//	UIRegion InverseRegion ();

	//	// -(instancetype _Nonnull)regionByUnionWithRegion:(UIRegion * _Nonnull)region;
	//	[Export ("regionByUnionWithRegion:")]
	//	UIRegion RegionByUnionWithRegion (UIRegion region);

	//	// -(instancetype _Nonnull)regionByDifferenceFromRegion:(UIRegion * _Nonnull)region;
	//	[Export ("regionByDifferenceFromRegion:")]
	//	UIRegion RegionByDifferenceFromRegion (UIRegion region);

	//	// -(instancetype _Nonnull)regionByIntersectionWithRegion:(UIRegion * _Nonnull)region;
	//	[Export ("regionByIntersectionWithRegion:")]
	//	UIRegion RegionByIntersectionWithRegion (UIRegion region);

	//	// -(BOOL)containsPoint:(CGPoint)point;
	//	[Export ("containsPoint:")]
	//	bool ContainsPoint (CGPoint point);
	//}

	//// @interface UITextDragPreviewRenderer : NSObject
	//[NoWatch, NoTV, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UITextDragPreviewRenderer
	//{
	//	// -(instancetype _Nonnull)initWithLayoutManager:(NSLayoutManager * _Nonnull)layoutManager range:(NSRange)range;
	//	[Export ("initWithLayoutManager:range:")]
	//	IntPtr Constructor (NSLayoutManager layoutManager, NSRange range);

	//	// -(instancetype _Nonnull)initWithLayoutManager:(NSLayoutManager * _Nonnull)layoutManager range:(NSRange)range unifyRects:(BOOL)unifyRects __attribute__((objc_designated_initializer));
	//	[Export ("initWithLayoutManager:range:unifyRects:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSLayoutManager layoutManager, NSRange range, bool unifyRects);

	//	// @property (readonly, nonatomic) NSLayoutManager * _Nonnull layoutManager;
	//	[Export ("layoutManager")]
	//	NSLayoutManager LayoutManager { get; }

	//	// @property (readonly, nonatomic) UIImage * _Nonnull image;
	//	[Export ("image")]
	//	UIImage Image { get; }

	//	// @property (readonly, nonatomic) CGRect firstLineRect;
	//	[Export ("firstLineRect")]
	//	CGRect FirstLineRect { get; }

	//	// @property (readonly, nonatomic) CGRect bodyRect;
	//	[Export ("bodyRect")]
	//	CGRect BodyRect { get; }

	//	// @property (readonly, nonatomic) CGRect lastLineRect;
	//	[Export ("lastLineRect")]
	//	CGRect LastLineRect { get; }

	//	// -(void)adjustFirstLineRect:(CGRect * _Nonnull)firstLineRect bodyRect:(CGRect * _Nonnull)bodyRect lastLineRect:(CGRect * _Nonnull)lastLineRect textOrigin:(CGPoint)origin;
	//	[Export ("adjustFirstLineRect:bodyRect:lastLineRect:textOrigin:")]
	//	unsafe void AdjustFirstLineRect (CGRect* firstLineRect, CGRect* bodyRect, CGRect* lastLineRect, CGPoint origin);
	//}

	//// @interface URLPreviews (UIDragPreview)
	//[Category]
	//[BaseType (typeof(UIDragPreview))]
	//interface UIDragPreview_URLPreviews
	//{
	//	// +(instancetype _Nonnull)previewForURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Static]
	//	[Export ("previewForURL:")]
	//	UIDragPreview PreviewForURL (NSUrl url);

	//	// +(instancetype _Nonnull)previewForURL:(NSURL * _Nonnull)url title:(NSString * _Nullable)title __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Static]
	//	[Export ("previewForURL:title:")]
	//	UIDragPreview PreviewForURL (NSUrl url, [NullAllowed] string title);
	//}

	//// @interface URLPreviews (UITargetedDragPreview)
	//[Category]
	//[BaseType (typeof(UITargetedDragPreview))]
	//interface UITargetedDragPreview_URLPreviews
	//{
	//	// +(instancetype _Nonnull)previewForURL:(NSURL * _Nonnull)url target:(UIDragPreviewTarget * _Nonnull)target __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Static]
	//	[Export ("previewForURL:target:")]
	//	UITargetedDragPreview PreviewForURL (NSUrl url, UIDragPreviewTarget target);

	//	// +(instancetype _Nonnull)previewForURL:(NSURL * _Nonnull)url title:(NSString * _Nullable)title target:(UIDragPreviewTarget * _Nonnull)target __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
	//	[NoWatch, NoTV, iOS (11,0)]
	//	[Static]
	//	[Export ("previewForURL:title:target:")]
	//	UITargetedDragPreview PreviewForURL (NSUrl url, [NullAllowed] string title, UIDragPreviewTarget target);
	//}

	//// @interface UIViewPropertyAnimator : NSObject <UIViewImplicitlyAnimating, NSCopying>
	//[iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIViewPropertyAnimator : IUIViewImplicitlyAnimating, INSCopying
	//{
	//	// @property (readonly, copy, nonatomic) id<UITimingCurveProvider> _Nullable timingParameters;
	//	[NullAllowed, Export ("timingParameters", ArgumentSemantic.Copy)]
	//	UITimingCurveProvider TimingParameters { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval duration;
	//	[Export ("duration")]
	//	double Duration { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval delay;
	//	[Export ("delay")]
	//	double Delay { get; }

	//	// @property (getter = isUserInteractionEnabled, nonatomic) BOOL userInteractionEnabled;
	//	[Export ("userInteractionEnabled")]
	//	bool UserInteractionEnabled { [Bind ("isUserInteractionEnabled")] get; set; }

	//	// @property (getter = isManualHitTestingEnabled, nonatomic) BOOL manualHitTestingEnabled;
	//	[Export ("manualHitTestingEnabled")]
	//	bool ManualHitTestingEnabled { [Bind ("isManualHitTestingEnabled")] get; set; }

	//	// @property (getter = isInterruptible, nonatomic) BOOL interruptible;
	//	[Export ("interruptible")]
	//	bool Interruptible { [Bind ("isInterruptible")] get; set; }

	//	// @property (nonatomic) BOOL scrubsLinearly __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("scrubsLinearly")]
	//	bool ScrubsLinearly { get; set; }

	//	// @property (nonatomic) BOOL pausesOnCompletion __attribute__((availability(ios, introduced=11.0)));
	//	[iOS (11, 0)]
	//	[Export ("pausesOnCompletion")]
	//	bool PausesOnCompletion { get; set; }

	//	// -(instancetype _Nonnull)initWithDuration:(NSTimeInterval)duration timingParameters:(id<UITimingCurveProvider> _Nonnull)parameters __attribute__((objc_designated_initializer));
	//	[Export ("initWithDuration:timingParameters:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (double duration, UITimingCurveProvider parameters);

	//	// -(instancetype _Nonnull)initWithDuration:(NSTimeInterval)duration curve:(UIViewAnimationCurve)curve animations:(void (^ _Nullable)(void))animations;
	//	[Export ("initWithDuration:curve:animations:")]
	//	IntPtr Constructor (double duration, UIViewAnimationCurve curve, [NullAllowed] Action animations);

	//	// -(instancetype _Nonnull)initWithDuration:(NSTimeInterval)duration controlPoint1:(CGPoint)point1 controlPoint2:(CGPoint)point2 animations:(void (^ _Nullable)(void))animations;
	//	[Export ("initWithDuration:controlPoint1:controlPoint2:animations:")]
	//	IntPtr Constructor (double duration, CGPoint point1, CGPoint point2, [NullAllowed] Action animations);

	//	// -(instancetype _Nonnull)initWithDuration:(NSTimeInterval)duration dampingRatio:(CGFloat)ratio animations:(void (^ _Nullable)(void))animations;
	//	[Export ("initWithDuration:dampingRatio:animations:")]
	//	IntPtr Constructor (double duration, nfloat ratio, [NullAllowed] Action animations);

	//	// +(instancetype _Nonnull)runningPropertyAnimatorWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(UIViewAnimatingPosition))completion;
	//	[Static]
	//	[Export ("runningPropertyAnimatorWithDuration:delay:options:animations:completion:")]
	//	UIViewPropertyAnimator RunningPropertyAnimatorWithDuration (double duration, double delay, UIViewAnimationOptions options, Action animations, [NullAllowed] Action<UIViewAnimatingPosition> completion);

	//	// -(void)addAnimations:(void (^ _Nonnull)(void))animation delayFactor:(CGFloat)delayFactor;
	//	[Export ("addAnimations:delayFactor:")]
	//	void AddAnimations (Action animation, nfloat delayFactor);

	//	// -(void)addAnimations:(void (^ _Nonnull)(void))animation;
	//	[Export ("addAnimations:")]
	//	void AddAnimations (Action animation);

	//	// -(void)addCompletion:(void (^ _Nonnull)(UIViewAnimatingPosition))completion;
	//	[Export ("addCompletion:")]
	//	void AddCompletion (Action<UIViewAnimatingPosition> completion);

	//	// -(void)continueAnimationWithTimingParameters:(id<UITimingCurveProvider> _Nullable)parameters durationFactor:(CGFloat)durationFactor;
	//	[Export ("continueAnimationWithTimingParameters:durationFactor:")]
	//	void ContinueAnimationWithTimingParameters ([NullAllowed] UITimingCurveProvider parameters, nfloat durationFactor);
	//}

	//// @interface UIFeedbackGenerator : NSObject
	//[NoWatch, NoTV, iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//interface UIFeedbackGenerator
	//{
	//	// -(void)prepare;
	//	[Export ("prepare")]
	//	void Prepare ();
	//}

	//// @interface UISelectionFeedbackGenerator : UIFeedbackGenerator
	//[NoWatch, NoTV, iOS (10,0)]
	//[BaseType (typeof(UIFeedbackGenerator))]
	//interface UISelectionFeedbackGenerator
	//{
	//	// -(void)selectionChanged;
	//	[Export ("selectionChanged")]
	//	void SelectionChanged ();
	//}

	//// @interface UIImpactFeedbackGenerator : UIFeedbackGenerator
	//[NoWatch, NoTV, iOS (10,0)]
	//[BaseType (typeof(UIFeedbackGenerator))]
	//interface UIImpactFeedbackGenerator
	//{
	//	// -(instancetype _Nonnull)initWithStyle:(UIImpactFeedbackStyle)style;
	//	[Export ("initWithStyle:")]
	//	IntPtr Constructor (UIImpactFeedbackStyle style);

	//	// -(void)impactOccurred;
	//	[Export ("impactOccurred")]
	//	void ImpactOccurred ();
	//}

	//// @interface UINotificationFeedbackGenerator : UIFeedbackGenerator
	//[NoWatch, NoTV, iOS (10,0)]
	//[BaseType (typeof(UIFeedbackGenerator))]
	//interface UINotificationFeedbackGenerator
	//{
	//	// -(void)notificationOccurred:(UINotificationFeedbackType)notificationType;
	//	[Export ("notificationOccurred:")]
	//	void NotificationOccurred (UINotificationFeedbackType notificationType);
	//}

	//// @interface UIGestureRecognizerProtected (UIGestureRecognizer)
	//[Category]
	//[BaseType (typeof(UIGestureRecognizer))]
	//interface UIGestureRecognizer_UIGestureRecognizerProtected
	//{
	//	// @property (readwrite, nonatomic) UIGestureRecognizerState state;
	//	[Export ("state", ArgumentSemantic.Assign)]
	//	UIGestureRecognizerState State { get; set; }

	//	// -(void)ignoreTouch:(UITouch * _Nonnull)touch forEvent:(UIEvent * _Nonnull)event;
	//	[Export ("ignoreTouch:forEvent:")]
	//	void IgnoreTouch (UITouch touch, UIEvent @event);

	//	// -(void)ignorePress:(UIPress * _Nonnull)button forEvent:(UIPressesEvent * _Nonnull)event __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("ignorePress:forEvent:")]
	//	void IgnorePress (UIPress button, UIPressesEvent @event);

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();

	//	// -(BOOL)canPreventGestureRecognizer:(UIGestureRecognizer * _Nonnull)preventedGestureRecognizer;
	//	[Export ("canPreventGestureRecognizer:")]
	//	bool CanPreventGestureRecognizer (UIGestureRecognizer preventedGestureRecognizer);

	//	// -(BOOL)canBePreventedByGestureRecognizer:(UIGestureRecognizer * _Nonnull)preventingGestureRecognizer;
	//	[Export ("canBePreventedByGestureRecognizer:")]
	//	bool CanBePreventedByGestureRecognizer (UIGestureRecognizer preventingGestureRecognizer);

	//	// -(BOOL)shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("shouldRequireFailureOfGestureRecognizer:")]
	//	bool ShouldRequireFailureOfGestureRecognizer (UIGestureRecognizer otherGestureRecognizer);

	//	// -(BOOL)shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer __attribute__((availability(ios, introduced=7.0)));
	//	[iOS (7,0)]
	//	[Export ("shouldBeRequiredToFailByGestureRecognizer:")]
	//	bool ShouldBeRequiredToFailByGestureRecognizer (UIGestureRecognizer otherGestureRecognizer);

	//	// -(void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
	//	[Export ("touchesBegan:withEvent:")]
	//	void TouchesBegan (NSSet<UITouch> touches, UIEvent @event);

	//	// -(void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
	//	[Export ("touchesMoved:withEvent:")]
	//	void TouchesMoved (NSSet<UITouch> touches, UIEvent @event);

	//	// -(void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
	//	[Export ("touchesEnded:withEvent:")]
	//	void TouchesEnded (NSSet<UITouch> touches, UIEvent @event);

	//	// -(void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
	//	[Export ("touchesCancelled:withEvent:")]
	//	void TouchesCancelled (NSSet<UITouch> touches, UIEvent @event);

	//	// -(void)touchesEstimatedPropertiesUpdated:(NSSet<UITouch *> * _Nonnull)touches __attribute__((availability(ios, introduced=9.1)));
	//	[iOS (9,1)]
	//	[Export ("touchesEstimatedPropertiesUpdated:")]
	//	void TouchesEstimatedPropertiesUpdated (NSSet<UITouch> touches);

	//	// -(void)pressesBegan:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nonnull)event __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("pressesBegan:withEvent:")]
	//	void PressesBegan (NSSet<UIPress> presses, UIPressesEvent @event);

	//	// -(void)pressesChanged:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nonnull)event __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("pressesChanged:withEvent:")]
	//	void PressesChanged (NSSet<UIPress> presses, UIPressesEvent @event);

	//	// -(void)pressesEnded:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nonnull)event __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("pressesEnded:withEvent:")]
	//	void PressesEnded (NSSet<UIPress> presses, UIPressesEvent @event);

	//	// -(void)pressesCancelled:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nonnull)event __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("pressesCancelled:withEvent:")]
	//	void PressesCancelled (NSSet<UIPress> presses, UIPressesEvent @event);
	//}

	//// typedef void (^UIGraphicsDrawingActions)(__kindof UIGraphicsRendererContext * _Nonnull);
	//delegate void UIGraphicsDrawingActions (UIGraphicsRendererContext arg0);

	//// @interface UIGraphicsRendererProtected (UIGraphicsRenderer)
	//[Category]
	//[BaseType (typeof(UIGraphicsRenderer))]
	//interface UIGraphicsRenderer_UIGraphicsRendererProtected
	//{
	//	// +(Class _Nonnull)rendererContextClass __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10, 0)]
	//	[Static]
	//	[Export ("rendererContextClass")]
	//	[Verify (MethodToProperty)]
	//	Class RendererContextClass { get; }

	//	// +(CGContextRef _Nullable)contextWithFormat:(UIGraphicsRendererFormat * _Nonnull)format __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_returns_retained));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("contextWithFormat:")]
	//	[return: NullAllowed]
	//	unsafe CGContextRef* ContextWithFormat (UIGraphicsRendererFormat format);

	//	// +(void)prepareCGContext:(CGContextRef _Nonnull)context withRendererContext:(UIGraphicsRendererContext * _Nonnull)rendererContext __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Static]
	//	[Export ("prepareCGContext:withRendererContext:")]
	//	unsafe void PrepareCGContext (CGContextRef* context, UIGraphicsRendererContext rendererContext);

	//	// -(BOOL)runDrawingActions:(UIGraphicsDrawingActions _Nonnull)drawingActions completionActions:(UIGraphicsDrawingActions _Nullable)completionActions error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("runDrawingActions:completionActions:error:")]
	//	bool RunDrawingActions (UIGraphicsDrawingActions drawingActions, [NullAllowed] UIGraphicsDrawingActions completionActions, [NullAllowed] out NSError error);
	//}

	//// @interface UIDocumentBrowserViewController : UIViewController <NSCoding>
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(UIViewController))]
	//interface UIDocumentBrowserViewController : INSCoding
	//{
	//	// -(instancetype _Nonnull)initForOpeningFilesWithContentTypes:(NSArray<NSString *> * _Nullable)allowedContentTypes __attribute__((objc_designated_initializer));
	//	[Export ("initForOpeningFilesWithContentTypes:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string[] allowedContentTypes);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	UIDocumentBrowserViewControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<UIDocumentBrowserViewControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (assign, nonatomic) BOOL allowsDocumentCreation;
	//	[Export ("allowsDocumentCreation")]
	//	bool AllowsDocumentCreation { get; set; }

	//	// @property (assign, nonatomic) BOOL allowsPickingMultipleItems;
	//	[Export ("allowsPickingMultipleItems")]
	//	bool AllowsPickingMultipleItems { get; set; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull allowedContentTypes;
	//	[Export ("allowedContentTypes", ArgumentSemantic.Copy)]
	//	string[] AllowedContentTypes { get; }

	//	// @property (nonatomic, strong) NSArray<UIBarButtonItem *> * _Nonnull additionalLeadingNavigationBarButtonItems;
	//	[Export ("additionalLeadingNavigationBarButtonItems", ArgumentSemantic.Strong)]
	//	UIBarButtonItem[] AdditionalLeadingNavigationBarButtonItems { get; set; }

	//	// @property (nonatomic, strong) NSArray<UIBarButtonItem *> * _Nonnull additionalTrailingNavigationBarButtonItems;
	//	[Export ("additionalTrailingNavigationBarButtonItems", ArgumentSemantic.Strong)]
	//	UIBarButtonItem[] AdditionalTrailingNavigationBarButtonItems { get; set; }

	//	// -(void)revealDocumentAtURL:(NSURL * _Nonnull)url importIfNeeded:(BOOL)importIfNeeded completion:(void (^ _Nullable)(NSURL * _Nullable, NSError * _Nullable))completion;
	//	[Export ("revealDocumentAtURL:importIfNeeded:completion:")]
	//	void RevealDocumentAtURL (NSUrl url, bool importIfNeeded, [NullAllowed] Action<NSURL, NSError> completion);

	//	// -(void)importDocumentAtURL:(NSURL * _Nonnull)documentURL nextToDocumentAtURL:(NSURL * _Nonnull)neighbourURL mode:(UIDocumentBrowserImportMode)importMode completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completion;
	//	[Export ("importDocumentAtURL:nextToDocumentAtURL:mode:completionHandler:")]
	//	void ImportDocumentAtURL (NSUrl documentURL, NSUrl neighbourURL, UIDocumentBrowserImportMode importMode, Action<NSURL, NSError> completion);

	//	// -(UIDocumentBrowserTransitionController * _Nonnull)transitionControllerForDocumentAtURL:(NSURL * _Nonnull)documentURL __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12,0)]
	//	[Export ("transitionControllerForDocumentAtURL:")]
	//	UIDocumentBrowserTransitionController TransitionControllerForDocumentAtURL (NSUrl documentURL);

	//	// -(UIDocumentBrowserTransitionController * _Nonnull)transitionControllerForDocumentURL:(NSURL * _Nonnull)documentURL __attribute__((availability(ios, introduced=11.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 11, 0)]
	//	[Deprecated (PlatformName.iOS, 12, 0)]
	//	[Export ("transitionControllerForDocumentURL:")]
	//	UIDocumentBrowserTransitionController TransitionControllerForDocumentURL (NSUrl documentURL);

	//	// @property (nonatomic, strong) NSArray<UIDocumentBrowserAction *> * _Nonnull customActions;
	//	[Export ("customActions", ArgumentSemantic.Strong)]
	//	UIDocumentBrowserAction[] CustomActions { get; set; }

	//	// @property (assign, nonatomic) UIDocumentBrowserUserInterfaceStyle browserUserInterfaceStyle;
	//	[Export ("browserUserInterfaceStyle", ArgumentSemantic.Assign)]
	//	UIDocumentBrowserUserInterfaceStyle BrowserUserInterfaceStyle { get; set; }
	//}

	//// @protocol UIDocumentBrowserViewControllerDelegate <NSObject>
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface UIDocumentBrowserViewControllerDelegate
	//{
	//	// @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller didPickDocumentURLs:(NSArray<NSURL *> * _Nonnull)documentURLs __attribute__((availability(ios, introduced=11.0, deprecated=12.0)));
	//	[Introduced (PlatformName.iOS, 11, 0)]
	//	[Deprecated (PlatformName.iOS, 12, 0)]
	//	[Export ("documentBrowser:didPickDocumentURLs:")]
	//	void DocumentBrowser (UIDocumentBrowserViewController controller, NSUrl[] documentURLs);

	//	// @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller didPickDocumentsAtURLs:(NSArray<NSURL *> * _Nonnull)documentURLs __attribute__((availability(ios, introduced=12.0)));
	//	[iOS (12,0)]
	//	[Export ("documentBrowser:didPickDocumentsAtURLs:")]
	//	void DocumentBrowser (UIDocumentBrowserViewController controller, NSUrl[] documentURLs);

	//	// @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller didRequestDocumentCreationWithHandler:(void (^ _Nonnull)(NSURL * _Nullable, UIDocumentBrowserImportMode))importHandler;
	//	[Export ("documentBrowser:didRequestDocumentCreationWithHandler:")]
	//	void DocumentBrowser (UIDocumentBrowserViewController controller, Action<NSURL, UIDocumentBrowserImportMode> importHandler);

	//	// @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller didImportDocumentAtURL:(NSURL * _Nonnull)sourceURL toDestinationURL:(NSURL * _Nonnull)destinationURL;
	//	[Export ("documentBrowser:didImportDocumentAtURL:toDestinationURL:")]
	//	void DocumentBrowser (UIDocumentBrowserViewController controller, NSUrl sourceURL, NSUrl destinationURL);

	//	// @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller failedToImportDocumentAtURL:(NSURL * _Nonnull)documentURL error:(NSError * _Nullable)error;
	//	[Export ("documentBrowser:failedToImportDocumentAtURL:error:")]
	//	void DocumentBrowser (UIDocumentBrowserViewController controller, NSUrl documentURL, [NullAllowed] NSError error);

	//	// @optional -(NSArray<__kindof UIActivity *> * _Nonnull)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller applicationActivitiesForDocumentURLs:(NSArray<NSURL *> * _Nonnull)documentURLs;
	//	[Export ("documentBrowser:applicationActivitiesForDocumentURLs:")]
	//	UIActivity[] DocumentBrowser (UIDocumentBrowserViewController controller, NSUrl[] documentURLs);

	//	// @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller willPresentActivityViewController:(UIActivityViewController * _Nonnull)activityViewController;
	//	[Export ("documentBrowser:willPresentActivityViewController:")]
	//	void DocumentBrowser (UIDocumentBrowserViewController controller, UIActivityViewController activityViewController);
	//}

	//// @interface UIDocumentBrowserTransitionController : NSObject <UIViewControllerAnimatedTransitioning>
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIDocumentBrowserTransitionController : IUIViewControllerAnimatedTransitioning
	//{
	//	// @property (nonatomic, strong) NSProgress * _Nullable loadingProgress;
	//	[NullAllowed, Export ("loadingProgress", ArgumentSemantic.Strong)]
	//	NSProgress LoadingProgress { get; set; }

	//	// @property (nonatomic, weak) UIView * _Nullable targetView;
	//	[NullAllowed, Export ("targetView", ArgumentSemantic.Weak)]
	//	UIView TargetView { get; set; }
	//}

	//// @interface UIDocumentBrowserAction : NSObject
	//[NoWatch, NoTV, NoMac, iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface UIDocumentBrowserAction
	//{
	//	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier localizedTitle:(NSString * _Nonnull)localizedTitle availability:(UIDocumentBrowserActionAvailability)availability handler:(void (^ _Nonnull)(NSArray<NSURL *> * _Nonnull))handler __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifier:localizedTitle:availability:handler:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string identifier, string localizedTitle, UIDocumentBrowserActionAvailability availability, Action<NSArray<NSURL>> handler);

	//	// @property (readonly, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull localizedTitle;
	//	[Export ("localizedTitle")]
	//	string LocalizedTitle { get; }

	//	// @property (readonly, nonatomic) UIDocumentBrowserActionAvailability availability;
	//	[Export ("availability")]
	//	UIDocumentBrowserActionAvailability Availability { get; }

	//	// @property (nonatomic, strong) UIImage * _Nullable image;
	//	[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
	//	UIImage Image { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSString *> * _Nonnull supportedContentTypes;
	//	[Export ("supportedContentTypes", ArgumentSemantic.Copy)]
	//	string[] SupportedContentTypes { get; set; }

	//	// @property (assign, nonatomic) BOOL supportsMultipleItems;
	//	[Export ("supportsMultipleItems")]
	//	bool SupportsMultipleItems { get; set; }
	//}

	//// @protocol MDLAssetResolver <NSObject>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MDLAssetResolver
	//{
	//	// @required -(BOOL)canResolveAssetNamed:(NSString * _Nonnull)name;
	//	[Abstract]
	//	[Export ("canResolveAssetNamed:")]
	//	bool CanResolveAssetNamed (string name);

	//	// @required -(NSURL * _Nonnull)resolveAssetNamed:(NSString * _Nonnull)name;
	//	[Abstract]
	//	[Export ("resolveAssetNamed:")]
	//	NSUrl ResolveAssetNamed (string name);
	//}

	//// @interface MDLRelativeAssetResolver : NSObject <MDLAssetResolver>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLRelativeAssetResolver : IMDLAssetResolver
	//{
	//	// -(instancetype _Nonnull)initWithAsset:(MDLAsset * _Nonnull)asset;
	//	[Export ("initWithAsset:")]
	//	IntPtr Constructor (MDLAsset asset);

	//	// @property (readwrite, nonatomic, weak) MDLAsset * _Nullable asset;
	//	[NullAllowed, Export ("asset", ArgumentSemantic.Weak)]
	//	MDLAsset Asset { get; set; }
	//}

	//// @interface MDLPathAssetResolver : NSObject <MDLAssetResolver>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLPathAssetResolver : IMDLAssetResolver
	//{
	//	// -(instancetype _Nonnull)initWithPath:(NSString * _Nonnull)path;
	//	[Export ("initWithPath:")]
	//	IntPtr Constructor (string path);

	//	// @property (readwrite, copy, nonatomic) NSString * _Nonnull path;
	//	[Export ("path")]
	//	string Path { get; set; }
	//}

	//// @interface MDLBundleAssetResolver : NSObject <MDLAssetResolver>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLBundleAssetResolver : IMDLAssetResolver
	//{
	//	// -(instancetype _Nonnull)initWithBundle:(NSString * _Nonnull)path;
	//	[Export ("initWithBundle:")]
	//	IntPtr Constructor (string path);

	//	// @property (readwrite, copy, nonatomic) NSString * _Nonnull path;
	//	[Export ("path")]
	//	string Path { get; set; }
	//}

	//// @protocol MDLNamed
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[Protocol, Model]
	//interface MDLNamed
	//{
	//	// @required @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Abstract]
	//	[Export ("name")]
	//	string Name { get; set; }
	//}

	//// @protocol MDLComponent <NSObject>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MDLComponent
	//{
	//}

	//// @protocol MDLObjectContainerComponent <MDLComponent, NSFastEnumeration>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[Protocol, Model]
	//interface MDLObjectContainerComponent : IMDLComponent, INSFastEnumeration
	//{
	//	// @required -(void)addObject:(MDLObject * _Nonnull)object;
	//	[Abstract]
	//	[Export ("addObject:")]
	//	void AddObject (MDLObject @object);

	//	// @required -(void)removeObject:(MDLObject * _Nonnull)object;
	//	[Abstract]
	//	[Export ("removeObject:")]
	//	void RemoveObject (MDLObject @object);

	//	// @required -(MDLObject * _Nonnull)objectAtIndexedSubscript:(NSUInteger)index __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Abstract]
	//	[Export ("objectAtIndexedSubscript:")]
	//	MDLObject ObjectAtIndexedSubscript (nuint index);

	//	// @required @property (readonly) NSUInteger count __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Abstract]
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// @required @property (readonly, retain, nonatomic) NSArray<MDLObject *> * _Nonnull objects;
	//	[Abstract]
	//	[Export ("objects", ArgumentSemantic.Retain)]
	//	MDLObject[] Objects { get; }
	//}

	//// @protocol MDLTransformComponent <MDLComponent>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[Protocol, Model]
	//interface MDLTransformComponent : IMDLComponent
	//{
	//	// @required @property (assign, nonatomic) matrix_float4x4 matrix;
	//	[Abstract]
	//	[Export ("matrix", ArgumentSemantic.Assign)]
	//	matrix_float4x4 Matrix { get; set; }

	//	// @required @property (assign, nonatomic) BOOL resetsTransform;
	//	[Abstract]
	//	[Export ("resetsTransform")]
	//	bool ResetsTransform { get; set; }

	//	// @required @property (readonly, nonatomic) NSTimeInterval minimumTime;
	//	[Abstract]
	//	[Export ("minimumTime")]
	//	double MinimumTime { get; }

	//	// @required @property (readonly, nonatomic) NSTimeInterval maximumTime;
	//	[Abstract]
	//	[Export ("maximumTime")]
	//	double MaximumTime { get; }

	//	// @required @property (readonly, copy, nonatomic) NSArray<NSNumber *> * _Nonnull keyTimes;
	//	[Abstract]
	//	[Export ("keyTimes", ArgumentSemantic.Copy)]
	//	NSNumber[] KeyTimes { get; }

	//	// @optional -(void)setLocalTransform:(matrix_float4x4)transform forTime:(NSTimeInterval)time;
	//	[Export ("setLocalTransform:forTime:")]
	//	void SetLocalTransform (matrix_float4x4 transform, double time);

	//	// @optional -(void)setLocalTransform:(matrix_float4x4)transform;
	//	[Export ("setLocalTransform:")]
	//	void SetLocalTransform (matrix_float4x4 transform);

	//	// @optional -(matrix_float4x4)localTransformAtTime:(NSTimeInterval)time;
	//	[Export ("localTransformAtTime:")]
	//	matrix_float4x4 LocalTransformAtTime (double time);

	//	// @optional +(matrix_float4x4)globalTransformWithObject:(MDLObject * _Nonnull)object atTime:(NSTimeInterval)time;
	//	[Static]
	//	[Export ("globalTransformWithObject:atTime:")]
	//	matrix_float4x4 GlobalTransformWithObject (MDLObject @object, double time);
	//}

	//// @interface MDLTransform : NSObject <NSCopying, MDLTransformComponent>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTransform : INSCopying, IMDLTransformComponent
	//{
	//	// -(instancetype _Nonnull)initWithTransformComponent:(id<MDLTransformComponent> _Nonnull)component;
	//	[Export ("initWithTransformComponent:")]
	//	IntPtr Constructor (MDLTransformComponent component);

	//	// -(instancetype _Nonnull)initWithTransformComponent:(id<MDLTransformComponent> _Nonnull)component resetsTransform:(BOOL)resetsTransform;
	//	[Export ("initWithTransformComponent:resetsTransform:")]
	//	IntPtr Constructor (MDLTransformComponent component, bool resetsTransform);

	//	// -(instancetype _Nonnull)initWithMatrix:(matrix_float4x4)matrix;
	//	[Export ("initWithMatrix:")]
	//	IntPtr Constructor (matrix_float4x4 matrix);

	//	// -(instancetype _Nonnull)initWithMatrix:(matrix_float4x4)matrix resetsTransform:(BOOL)resetsTransform;
	//	[Export ("initWithMatrix:resetsTransform:")]
	//	IntPtr Constructor (matrix_float4x4 matrix, bool resetsTransform);

	//	// -(void)setIdentity;
	//	[Export ("setIdentity")]
	//	void SetIdentity ();

	//	// -(vector_float3)translationAtTime:(NSTimeInterval)time;
	//	[Export ("translationAtTime:")]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] TranslationAtTime (double time);

	//	// -(vector_float3)rotationAtTime:(NSTimeInterval)time;
	//	[Export ("rotationAtTime:")]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] RotationAtTime (double time);

	//	// -(vector_float3)shearAtTime:(NSTimeInterval)time;
	//	[Export ("shearAtTime:")]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] ShearAtTime (double time);

	//	// -(vector_float3)scaleAtTime:(NSTimeInterval)time;
	//	[Export ("scaleAtTime:")]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] ScaleAtTime (double time);

	//	// -(void)setMatrix:(matrix_float4x4)matrix forTime:(NSTimeInterval)time __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("setMatrix:forTime:")]
	//	void SetMatrix (matrix_float4x4 matrix, double time);

	//	// -(void)setTranslation:(vector_float3)translation forTime:(NSTimeInterval)time;
	//	[Export ("setTranslation:forTime:")]
	//	void SetTranslation ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] translation, double time);

	//	// -(void)setRotation:(vector_float3)rotation forTime:(NSTimeInterval)time;
	//	[Export ("setRotation:forTime:")]
	//	void SetRotation ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] rotation, double time);

	//	// -(void)setShear:(vector_float3)shear forTime:(NSTimeInterval)time;
	//	[Export ("setShear:forTime:")]
	//	void SetShear ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] shear, double time);

	//	// -(void)setScale:(vector_float3)scale forTime:(NSTimeInterval)time;
	//	[Export ("setScale:forTime:")]
	//	void SetScale ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] scale, double time);

	//	// -(matrix_float4x4)rotationMatrixAtTime:(NSTimeInterval)time;
	//	[Export ("rotationMatrixAtTime:")]
	//	matrix_float4x4 RotationMatrixAtTime (double time);

	//	// @property (readwrite, nonatomic) vector_float3 translation;
	//	[Export ("translation", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] Translation { get; set; }

	//	// @property (readwrite, nonatomic) vector_float3 rotation;
	//	[Export ("rotation", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] Rotation { get; set; }

	//	// @property (readwrite, nonatomic) vector_float3 shear;
	//	[Export ("shear", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] Shear { get; set; }

	//	// @property (readwrite, nonatomic) vector_float3 scale;
	//	[Export ("scale", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] Scale { get; set; }
	//}

	//// @interface MDLObject : NSObject <MDLNamed>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLObject : IMDLNamed
	//{
	//	// @property (readonly, copy, nonatomic) NSArray<id<MDLComponent>> * _Nonnull components;
	//	[Export ("components", ArgumentSemantic.Copy)]
	//	MDLComponent[] Components { get; }

	//	// -(void)setComponent:(id<MDLComponent> _Nonnull)component forProtocol:(Protocol * _Nonnull)protocol;
	//	[Export ("setComponent:forProtocol:")]
	//	void SetComponent (MDLComponent component, Protocol protocol);

	//	// -(id<MDLComponent> _Nullable)componentConformingToProtocol:(Protocol * _Nonnull)protocol;
	//	[Export ("componentConformingToProtocol:")]
	//	[return: NullAllowed]
	//	MDLComponent ComponentConformingToProtocol (Protocol protocol);

	//	// -(id<MDLComponent> _Nullable)objectForKeyedSubscript:(Protocol * _Nonnull)key;
	//	[Export ("objectForKeyedSubscript:")]
	//	[return: NullAllowed]
	//	MDLComponent ObjectForKeyedSubscript (Protocol key);

	//	// -(void)setObject:(id<MDLComponent> _Nullable)obj forKeyedSubscript:(Protocol * _Nonnull)key;
	//	[Export ("setObject:forKeyedSubscript:")]
	//	void SetObject ([NullAllowed] MDLComponent obj, Protocol key);

	//	// @property (nonatomic, weak) MDLObject * _Nullable parent;
	//	[NullAllowed, Export ("parent", ArgumentSemantic.Weak)]
	//	MDLObject Parent { get; set; }

	//	// @property (retain, nonatomic) MDLObject * _Nullable instance;
	//	[NullAllowed, Export ("instance", ArgumentSemantic.Retain)]
	//	MDLObject Instance { get; set; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull path;
	//	[Export ("path")]
	//	string Path { get; }

	//	// -(MDLObject * _Nonnull)objectAtPath:(NSString * _Nonnull)path;
	//	[Export ("objectAtPath:")]
	//	MDLObject ObjectAtPath (string path);

	//	// -(void)enumerateChildObjectsOfClass:(Class _Nonnull)objectClass root:(MDLObject * _Nonnull)root usingBlock:(void (^ _Nonnull)(MDLObject * _Nonnull, BOOL * _Nonnull))block stopPointer:(BOOL * _Nonnull)stopPointer __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("enumerateChildObjectsOfClass:root:usingBlock:stopPointer:")]
	//	unsafe void EnumerateChildObjectsOfClass (Class objectClass, MDLObject root, Action<MDLObject, bool*> block, bool* stopPointer);

	//	// @property (retain, nonatomic) id<MDLTransformComponent> _Nullable transform;
	//	[NullAllowed, Export ("transform", ArgumentSemantic.Retain)]
	//	MDLTransformComponent Transform { get; set; }

	//	// @property (retain, nonatomic) id<MDLObjectContainerComponent> _Nonnull children;
	//	[Export ("children", ArgumentSemantic.Retain)]
	//	MDLObjectContainerComponent Children { get; set; }

	//	// @property (nonatomic) BOOL hidden;
	//	[Export ("hidden")]
	//	bool Hidden { get; set; }

	//	// -(void)addChild:(MDLObject * _Nonnull)child;
	//	[Export ("addChild:")]
	//	void AddChild (MDLObject child);

	//	// -(MDLAxisAlignedBoundingBox)boundingBoxAtTime:(NSTimeInterval)time;
	//	[Export ("boundingBoxAtTime:")]
	//	MDLAxisAlignedBoundingBox BoundingBoxAtTime (double time);
	//}

	//// @interface MDLObjectContainer : NSObject <MDLObjectContainerComponent>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLObjectContainer : IMDLObjectContainerComponent
	//{
	//}

	//// @interface MDLMeshBufferMap : NSObject
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLMeshBufferMap
	//{
	//	// -(instancetype _Nonnull)initWithBytes:(void * _Nonnull)bytes deallocator:(void (^ _Nullable)(void))deallocator;
	//	[Export ("initWithBytes:deallocator:")]
	//	unsafe IntPtr Constructor (void* bytes, [NullAllowed] Action deallocator);

	//	// @property (readonly, nonatomic) void * _Nonnull bytes;
	//	[Export ("bytes")]
	//	unsafe void* Bytes { get; }
	//}

	//// @protocol MDLMeshBuffer <NSObject, NSCopying>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MDLMeshBuffer : INSCopying
	//{
	//	// @required -(void)fillData:(NSData * _Nonnull)data offset:(NSUInteger)offset;
	//	[Abstract]
	//	[Export ("fillData:offset:")]
	//	void Offset (NSData data, nuint offset);

	//	// @required -(MDLMeshBufferMap * _Nonnull)map;
	//	[Abstract]
	//	[Export ("map")]
	//	[Verify (MethodToProperty)]
	//	MDLMeshBufferMap Map { get; }

	//	// @required @property (readonly, nonatomic) NSUInteger length;
	//	[Abstract]
	//	[Export ("length")]
	//	nuint Length { get; }

	//	// @required @property (readonly, retain, nonatomic) id<MDLMeshBufferAllocator> _Nonnull allocator;
	//	[Abstract]
	//	[Export ("allocator", ArgumentSemantic.Retain)]
	//	MDLMeshBufferAllocator Allocator { get; }

	//	// @required @property (readonly, retain, nonatomic) id<MDLMeshBufferZone> _Nonnull zone;
	//	[Abstract]
	//	[Export ("zone", ArgumentSemantic.Retain)]
	//	MDLMeshBufferZone Zone { get; }

	//	// @required @property (readonly, nonatomic) MDLMeshBufferType type;
	//	[Abstract]
	//	[Export ("type")]
	//	MDLMeshBufferType Type { get; }
	//}

	//// @interface MDLMeshBufferData : NSObject <MDLMeshBuffer>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLMeshBufferData : IMDLMeshBuffer
	//{
	//	// -(instancetype _Nonnull)initWithType:(MDLMeshBufferType)type length:(NSUInteger)length;
	//	[Export ("initWithType:length:")]
	//	IntPtr Constructor (MDLMeshBufferType type, nuint length);

	//	// -(instancetype _Nonnull)initWithType:(MDLMeshBufferType)type data:(NSData * _Nullable)data;
	//	[Export ("initWithType:data:")]
	//	IntPtr Constructor (MDLMeshBufferType type, [NullAllowed] NSData data);

	//	// @property (readonly, retain, nonatomic) NSData * _Nonnull data;
	//	[Export ("data", ArgumentSemantic.Retain)]
	//	NSData Data { get; }
	//}

	//// @protocol MDLMeshBufferZone <NSObject>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MDLMeshBufferZone
	//{
	//	// @required @property (readonly, nonatomic) NSUInteger capacity;
	//	[Abstract]
	//	[Export ("capacity")]
	//	nuint Capacity { get; }

	//	// @required @property (readonly, nonatomic) id<MDLMeshBufferAllocator> _Nonnull allocator;
	//	[Abstract]
	//	[Export ("allocator")]
	//	MDLMeshBufferAllocator Allocator { get; }
	//}

	//// @protocol MDLMeshBufferAllocator <NSObject>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MDLMeshBufferAllocator
	//{
	//	// @required -(id<MDLMeshBufferZone> _Nonnull)newZone:(NSUInteger)capacity;
	//	[Abstract]
	//	[Export ("newZone:")]
	//	MDLMeshBufferZone NewZone (nuint capacity);

	//	// @required -(id<MDLMeshBufferZone> _Nonnull)newZoneForBuffersWithSize:(NSArray<NSNumber *> * _Nonnull)sizes andType:(NSArray<NSNumber *> * _Nonnull)types;
	//	[Abstract]
	//	[Export ("newZoneForBuffersWithSize:andType:")]
	//	MDLMeshBufferZone NewZoneForBuffersWithSize (NSNumber[] sizes, NSNumber[] types);

	//	// @required -(id<MDLMeshBuffer> _Nonnull)newBuffer:(NSUInteger)length type:(MDLMeshBufferType)type;
	//	[Abstract]
	//	[Export ("newBuffer:type:")]
	//	MDLMeshBuffer NewBuffer (nuint length, MDLMeshBufferType type);

	//	// @required -(id<MDLMeshBuffer> _Nonnull)newBufferWithData:(NSData * _Nonnull)data type:(MDLMeshBufferType)type;
	//	[Abstract]
	//	[Export ("newBufferWithData:type:")]
	//	MDLMeshBuffer NewBufferWithData (NSData data, MDLMeshBufferType type);

	//	// @required -(id<MDLMeshBuffer> _Nullable)newBufferFromZone:(id<MDLMeshBufferZone> _Nullable)zone length:(NSUInteger)length type:(MDLMeshBufferType)type;
	//	[Abstract]
	//	[Export ("newBufferFromZone:length:type:")]
	//	[return: NullAllowed]
	//	MDLMeshBuffer NewBufferFromZone ([NullAllowed] MDLMeshBufferZone zone, nuint length, MDLMeshBufferType type);

	//	// @required -(id<MDLMeshBuffer> _Nullable)newBufferFromZone:(id<MDLMeshBufferZone> _Nullable)zone data:(NSData * _Nonnull)data type:(MDLMeshBufferType)type;
	//	[Abstract]
	//	[Export ("newBufferFromZone:data:type:")]
	//	[return: NullAllowed]
	//	MDLMeshBuffer NewBufferFromZone ([NullAllowed] MDLMeshBufferZone zone, NSData data, MDLMeshBufferType type);
	//}

	//// @interface MDLMeshBufferDataAllocator : NSObject <MDLMeshBufferAllocator>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLMeshBufferDataAllocator : IMDLMeshBufferAllocator
	//{
	//}

	//// @interface MDLMeshBufferZoneDefault : NSObject <MDLMeshBufferZone>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLMeshBufferZoneDefault : IMDLMeshBufferZone
	//{
	//	// @property (readonly, nonatomic) NSUInteger capacity;
	//	[Export ("capacity")]
	//	nuint Capacity { get; }

	//	// @property (readonly, retain, nonatomic) id<MDLMeshBufferAllocator> _Nonnull allocator;
	//	[Export ("allocator", ArgumentSemantic.Retain)]
	//	MDLMeshBufferAllocator Allocator { get; }
	//}

	//// @interface MDLVertexBufferLayout : NSObject <NSCopying>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLVertexBufferLayout : INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithStride:(NSUInteger)stride;
	//	[Export ("initWithStride:")]
	//	IntPtr Constructor (nuint stride);

	//	// @property (readwrite, nonatomic) NSUInteger stride;
	//	[Export ("stride")]
	//	nuint Stride { get; set; }
	//}

	//// @interface MDLVertexAttribute : NSObject <NSCopying>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLVertexAttribute : INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name format:(MDLVertexFormat)format offset:(NSUInteger)offset bufferIndex:(NSUInteger)bufferIndex;
	//	[Export ("initWithName:format:offset:bufferIndex:")]
	//	IntPtr Constructor (string name, MDLVertexFormat format, nuint offset, nuint bufferIndex);

	//	// @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }

	//	// @property (readwrite, nonatomic) MDLVertexFormat format;
	//	[Export ("format", ArgumentSemantic.Assign)]
	//	MDLVertexFormat Format { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger offset;
	//	[Export ("offset")]
	//	nuint Offset { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger bufferIndex;
	//	[Export ("bufferIndex")]
	//	nuint BufferIndex { get; set; }

	//	// @property (readwrite, nonatomic) NSTimeInterval time;
	//	[Export ("time")]
	//	double Time { get; set; }

	//	// @property (readwrite, nonatomic) vector_float4 initializationValue;
	//	[Export ("initializationValue", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(4)))] InitializationValue { get; set; }
	//}

	//// @interface MDLVertexDescriptor : NSObject <NSCopying>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLVertexDescriptor : INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithVertexDescriptor:(MDLVertexDescriptor * _Nonnull)vertexDescriptor;
	//	[Export ("initWithVertexDescriptor:")]
	//	IntPtr Constructor (MDLVertexDescriptor vertexDescriptor);

	//	// -(MDLVertexAttribute * _Nullable)attributeNamed:(NSString * _Nonnull)name;
	//	[Export ("attributeNamed:")]
	//	[return: NullAllowed]
	//	MDLVertexAttribute AttributeNamed (string name);

	//	// -(void)addOrReplaceAttribute:(MDLVertexAttribute * _Nonnull)attribute;
	//	[Export ("addOrReplaceAttribute:")]
	//	void AddOrReplaceAttribute (MDLVertexAttribute attribute);

	//	// -(void)removeAttributeNamed:(NSString * _Nonnull)name;
	//	[Export ("removeAttributeNamed:")]
	//	void RemoveAttributeNamed (string name);

	//	// @property (retain, nonatomic) NSMutableArray<MDLVertexAttribute *> * _Nonnull attributes;
	//	[Export ("attributes", ArgumentSemantic.Retain)]
	//	NSMutableArray<MDLVertexAttribute> Attributes { get; set; }

	//	// @property (retain, nonatomic) NSMutableArray<MDLVertexBufferLayout *> * _Nonnull layouts;
	//	[Export ("layouts", ArgumentSemantic.Retain)]
	//	NSMutableArray<MDLVertexBufferLayout> Layouts { get; set; }

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();

	//	// -(void)setPackedStrides;
	//	[Export ("setPackedStrides")]
	//	void SetPackedStrides ();

	//	// -(void)setPackedOffsets;
	//	[Export ("setPackedOffsets")]
	//	void SetPackedOffsets ();
	//}

	//// @interface MDLMatrix4x4Array : NSObject <NSCopying>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLMatrix4x4Array : INSCopying
	//{
	//	// @property (readonly, nonatomic) NSUInteger elementCount;
	//	[Export ("elementCount")]
	//	nuint ElementCount { get; }

	//	// @property (readonly, nonatomic) MDLDataPrecision precision;
	//	[Export ("precision")]
	//	MDLDataPrecision Precision { get; }

	//	// -(void)clear;
	//	[Export ("clear")]
	//	void Clear ();

	//	// -(instancetype _Nonnull)initWithElementCount:(NSUInteger)arrayElementCount;
	//	[Export ("initWithElementCount:")]
	//	IntPtr Constructor (nuint arrayElementCount);

	//	// -(void)setFloat4x4Array:(const matrix_float4x4 * _Nonnull)valuesArray count:(NSUInteger)count;
	//	[Export ("setFloat4x4Array:count:")]
	//	unsafe void SetFloat4x4Array (matrix_float4x4* valuesArray, nuint count);

	//	// -(void)setDouble4x4Array:(const matrix_double4x4 * _Nonnull)valuesArray count:(NSUInteger)count;
	//	[Export ("setDouble4x4Array:count:")]
	//	unsafe void SetDouble4x4Array (matrix_double4x4* valuesArray, nuint count);

	//	// -(NSUInteger)getFloat4x4Array:(matrix_float4x4 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getFloat4x4Array:maxCount:")]
	//	unsafe nuint GetFloat4x4Array (matrix_float4x4* valuesArray, nuint maxCount);

	//	// -(NSUInteger)getDouble4x4Array:(matrix_double4x4 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getDouble4x4Array:maxCount:")]
	//	unsafe nuint GetDouble4x4Array (matrix_double4x4* valuesArray, nuint maxCount);
	//}

	//// @interface MDLAnimatedValue : NSObject <NSCopying>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLAnimatedValue : INSCopying
	//{
	//	// -(BOOL)isAnimated;
	//	[Export ("isAnimated")]
	//	[Verify (MethodToProperty)]
	//	bool IsAnimated { get; }

	//	// @property (readonly, nonatomic) MDLDataPrecision precision;
	//	[Export ("precision")]
	//	MDLDataPrecision Precision { get; }

	//	// @property (readonly, nonatomic) NSUInteger timeSampleCount;
	//	[Export ("timeSampleCount")]
	//	nuint TimeSampleCount { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval minimumTime;
	//	[Export ("minimumTime")]
	//	double MinimumTime { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval maximumTime;
	//	[Export ("maximumTime")]
	//	double MaximumTime { get; }

	//	// @property (nonatomic) MDLAnimatedValueInterpolation interpolation;
	//	[Export ("interpolation", ArgumentSemantic.Assign)]
	//	MDLAnimatedValueInterpolation Interpolation { get; set; }

	//	// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull keyTimes;
	//	[Export ("keyTimes")]
	//	NSNumber[] KeyTimes { get; }

	//	// -(void)clear;
	//	[Export ("clear")]
	//	void Clear ();

	//	// -(NSUInteger)getTimes:(NSTimeInterval * _Nonnull)timesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getTimes:maxCount:")]
	//	unsafe nuint GetTimes (double* timesArray, nuint maxCount);
	//}

	//// @interface MDLAnimatedScalarArray : MDLAnimatedValue
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MDLAnimatedValue))]
	//interface MDLAnimatedScalarArray
	//{
	//	// @property (readonly, nonatomic) NSUInteger elementCount;
	//	[Export ("elementCount")]
	//	nuint ElementCount { get; }

	//	// -(id _Nonnull)initWithElementCount:(NSUInteger)arrayElementCount;
	//	[Export ("initWithElementCount:")]
	//	IntPtr Constructor (nuint arrayElementCount);

	//	// -(void)setFloatArray:(const float * _Nonnull)array count:(NSUInteger)count atTime:(NSTimeInterval)time;
	//	[Export ("setFloatArray:count:atTime:")]
	//	unsafe void SetFloatArray (float* array, nuint count, double time);

	//	// -(void)setDoubleArray:(const double * _Nonnull)array count:(NSUInteger)count atTime:(NSTimeInterval)time;
	//	[Export ("setDoubleArray:count:atTime:")]
	//	unsafe void SetDoubleArray (double* array, nuint count, double time);

	//	// -(NSUInteger)getFloatArray:(float * _Nonnull)array maxCount:(NSUInteger)maxCount atTime:(NSTimeInterval)time;
	//	[Export ("getFloatArray:maxCount:atTime:")]
	//	unsafe nuint GetFloatArray (float* array, nuint maxCount, double time);

	//	// -(NSUInteger)getDoubleArray:(double * _Nonnull)array maxCount:(NSUInteger)maxCount atTime:(NSTimeInterval)time;
	//	[Export ("getDoubleArray:maxCount:atTime:")]
	//	unsafe nuint GetDoubleArray (double* array, nuint maxCount, double time);

	//	// -(void)resetWithFloatArray:(const float * _Nonnull)valuesArray count:(NSUInteger)valuesCount atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)timesCount;
	//	[Export ("resetWithFloatArray:count:atTimes:count:")]
	//	unsafe void ResetWithFloatArray (float* valuesArray, nuint valuesCount, double* timesArray, nuint timesCount);

	//	// -(void)resetWithDoubleArray:(const double * _Nonnull)valuesArray count:(NSUInteger)valuesCount atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)timesCount;
	//	[Export ("resetWithDoubleArray:count:atTimes:count:")]
	//	unsafe void ResetWithDoubleArray (double* valuesArray, nuint valuesCount, double* timesArray, nuint timesCount);

	//	// -(NSUInteger)getFloatArray:(float * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getFloatArray:maxCount:")]
	//	unsafe nuint GetFloatArray (float* valuesArray, nuint maxCount);

	//	// -(NSUInteger)getDoubleArray:(double * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getDoubleArray:maxCount:")]
	//	unsafe nuint GetDoubleArray (double* valuesArray, nuint maxCount);
	//}

	//// @interface MDLAnimatedVector3Array : MDLAnimatedValue
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MDLAnimatedValue))]
	//interface MDLAnimatedVector3Array
	//{
	//	// @property (readonly, nonatomic) NSUInteger elementCount;
	//	[Export ("elementCount")]
	//	nuint ElementCount { get; }

	//	// -(id _Nonnull)initWithElementCount:(NSUInteger)arrayElementCount;
	//	[Export ("initWithElementCount:")]
	//	IntPtr Constructor (nuint arrayElementCount);

	//	// -(void)setFloat3Array:(const vector_float3 * _Nonnull)array count:(NSUInteger)count atTime:(NSTimeInterval)time;
	//	[Export ("setFloat3Array:count:atTime:")]
	//	unsafe void SetFloat3Array ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))]* array, nuint count, double time);

	//	// -(void)setDouble3Array:(const vector_double3 * _Nonnull)array count:(NSUInteger)count atTime:(NSTimeInterval)time;
	//	[Export ("setDouble3Array:count:atTime:")]
	//	unsafe void SetDouble3Array ([unsupported ExtVector: double __attribute__((ext_vector_type(3)))]* array, nuint count, double time);

	//	// -(NSUInteger)getFloat3Array:(vector_float3 * _Nonnull)array maxCount:(NSUInteger)maxCount atTime:(NSTimeInterval)time;
	//	[Export ("getFloat3Array:maxCount:atTime:")]
	//	unsafe nuint GetFloat3Array ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))]* array, nuint maxCount, double time);

	//	// -(NSUInteger)getDouble3Array:(vector_double3 * _Nonnull)array maxCount:(NSUInteger)maxCount atTime:(NSTimeInterval)time;
	//	[Export ("getDouble3Array:maxCount:atTime:")]
	//	unsafe nuint GetDouble3Array ([unsupported ExtVector: double __attribute__((ext_vector_type(3)))]* array, nuint maxCount, double time);

	//	// -(void)resetWithFloat3Array:(const vector_float3 * _Nonnull)valuesArray count:(NSUInteger)valuesCount atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)timesCount;
	//	[Export ("resetWithFloat3Array:count:atTimes:count:")]
	//	unsafe void ResetWithFloat3Array ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))]* valuesArray, nuint valuesCount, double* timesArray, nuint timesCount);

	//	// -(void)resetWithDouble3Array:(const vector_double3 * _Nonnull)valuesArray count:(NSUInteger)valuesCount atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)timesCount;
	//	[Export ("resetWithDouble3Array:count:atTimes:count:")]
	//	unsafe void ResetWithDouble3Array ([unsupported ExtVector: double __attribute__((ext_vector_type(3)))]* valuesArray, nuint valuesCount, double* timesArray, nuint timesCount);

	//	// -(NSUInteger)getFloat3Array:(vector_float3 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getFloat3Array:maxCount:")]
	//	unsafe nuint GetFloat3Array ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))]* valuesArray, nuint maxCount);

	//	// -(NSUInteger)getDouble3Array:(vector_double3 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getDouble3Array:maxCount:")]
	//	unsafe nuint GetDouble3Array ([unsupported ExtVector: double __attribute__((ext_vector_type(3)))]* valuesArray, nuint maxCount);
	//}

	//// @interface MDLAnimatedQuaternionArray : MDLAnimatedValue
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MDLAnimatedValue))]
	//interface MDLAnimatedQuaternionArray
	//{
	//	// @property (readonly, nonatomic) NSUInteger elementCount;
	//	[Export ("elementCount")]
	//	nuint ElementCount { get; }

	//	// -(id _Nonnull)initWithElementCount:(NSUInteger)arrayElementCount;
	//	[Export ("initWithElementCount:")]
	//	IntPtr Constructor (nuint arrayElementCount);

	//	// -(void)setFloatQuaternionArray:(const simd_quatf * _Nonnull)array count:(NSUInteger)count atTime:(NSTimeInterval)time;
	//	[Export ("setFloatQuaternionArray:count:atTime:")]
	//	unsafe void SetFloatQuaternionArray (simd_quatf* array, nuint count, double time);

	//	// -(void)setDoubleQuaternionArray:(const simd_quatd * _Nonnull)array count:(NSUInteger)count atTime:(NSTimeInterval)time;
	//	[Export ("setDoubleQuaternionArray:count:atTime:")]
	//	unsafe void SetDoubleQuaternionArray (simd_quatd* array, nuint count, double time);

	//	// -(NSUInteger)getFloatQuaternionArray:(simd_quatf * _Nonnull)array maxCount:(NSUInteger)maxCount atTime:(NSTimeInterval)time;
	//	[Export ("getFloatQuaternionArray:maxCount:atTime:")]
	//	unsafe nuint GetFloatQuaternionArray (simd_quatf* array, nuint maxCount, double time);

	//	// -(NSUInteger)getDoubleQuaternionArray:(simd_quatd * _Nonnull)array maxCount:(NSUInteger)maxCount atTime:(NSTimeInterval)time;
	//	[Export ("getDoubleQuaternionArray:maxCount:atTime:")]
	//	unsafe nuint GetDoubleQuaternionArray (simd_quatd* array, nuint maxCount, double time);

	//	// -(void)resetWithFloatQuaternionArray:(const simd_quatf * _Nonnull)valuesArray count:(NSUInteger)valuesCount atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)timesCount;
	//	[Export ("resetWithFloatQuaternionArray:count:atTimes:count:")]
	//	unsafe void ResetWithFloatQuaternionArray (simd_quatf* valuesArray, nuint valuesCount, double* timesArray, nuint timesCount);

	//	// -(void)resetWithDoubleQuaternionArray:(const simd_quatd * _Nonnull)valuesArray count:(NSUInteger)valuesCount atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)timesCount;
	//	[Export ("resetWithDoubleQuaternionArray:count:atTimes:count:")]
	//	unsafe void ResetWithDoubleQuaternionArray (simd_quatd* valuesArray, nuint valuesCount, double* timesArray, nuint timesCount);

	//	// -(NSUInteger)getFloatQuaternionArray:(simd_quatf * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getFloatQuaternionArray:maxCount:")]
	//	unsafe nuint GetFloatQuaternionArray (simd_quatf* valuesArray, nuint maxCount);

	//	// -(NSUInteger)getDoubleQuaternionArray:(simd_quatd * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getDoubleQuaternionArray:maxCount:")]
	//	unsafe nuint GetDoubleQuaternionArray (simd_quatd* valuesArray, nuint maxCount);
	//}

	//// @interface MDLAnimatedScalar : MDLAnimatedValue
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MDLAnimatedValue))]
	//interface MDLAnimatedScalar
	//{
	//	// -(void)setFloat:(float)value atTime:(NSTimeInterval)time;
	//	[Export ("setFloat:atTime:")]
	//	void SetFloat (float value, double time);

	//	// -(void)setDouble:(double)value atTime:(NSTimeInterval)time;
	//	[Export ("setDouble:atTime:")]
	//	void SetDouble (double value, double time);

	//	// -(float)floatAtTime:(NSTimeInterval)time;
	//	[Export ("floatAtTime:")]
	//	float FloatAtTime (double time);

	//	// -(double)doubleAtTime:(NSTimeInterval)time;
	//	[Export ("doubleAtTime:")]
	//	double DoubleAtTime (double time);

	//	// -(void)resetWithFloatArray:(const float * _Nonnull)valuesArray atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)count;
	//	[Export ("resetWithFloatArray:atTimes:count:")]
	//	unsafe void ResetWithFloatArray (float* valuesArray, double* timesArray, nuint count);

	//	// -(void)resetWithDoubleArray:(const double * _Nonnull)valuesArray atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)count;
	//	[Export ("resetWithDoubleArray:atTimes:count:")]
	//	unsafe void ResetWithDoubleArray (double* valuesArray, double* timesArray, nuint count);

	//	// -(NSUInteger)getFloatArray:(float * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getFloatArray:maxCount:")]
	//	unsafe nuint GetFloatArray (float* valuesArray, nuint maxCount);

	//	// -(NSUInteger)getDoubleArray:(double * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getDoubleArray:maxCount:")]
	//	unsafe nuint GetDoubleArray (double* valuesArray, nuint maxCount);
	//}

	//// @interface MDLAnimatedVector2 : MDLAnimatedValue
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MDLAnimatedValue))]
	//interface MDLAnimatedVector2
	//{
	//	// -(void)setFloat2:(vector_float2)value atTime:(NSTimeInterval)time;
	//	[Export ("setFloat2:atTime:")]
	//	void SetFloat2 ([unsupported ExtVector: float __attribute__((ext_vector_type(2)))] value, double time);

	//	// -(void)setDouble2:(vector_double2)value atTime:(NSTimeInterval)time;
	//	[Export ("setDouble2:atTime:")]
	//	void SetDouble2 ([unsupported ExtVector: double __attribute__((ext_vector_type(2)))] value, double time);

	//	// -(vector_float2)float2AtTime:(NSTimeInterval)time;
	//	[Export ("float2AtTime:")]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(2)))] Float2AtTime (double time);

	//	// -(vector_double2)double2AtTime:(NSTimeInterval)time;
	//	[Export ("double2AtTime:")]
	//	[unsupported ExtVector: double __attribute__((ext_vector_type(2)))] Double2AtTime (double time);

	//	// -(void)resetWithFloat2Array:(const vector_float2 * _Nonnull)valuesArray atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)count;
	//	[Export ("resetWithFloat2Array:atTimes:count:")]
	//	unsafe void ResetWithFloat2Array ([unsupported ExtVector: float __attribute__((ext_vector_type(2)))]* valuesArray, double* timesArray, nuint count);

	//	// -(void)resetWithDouble2Array:(const vector_double2 * _Nonnull)valuesArray atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)count;
	//	[Export ("resetWithDouble2Array:atTimes:count:")]
	//	unsafe void ResetWithDouble2Array ([unsupported ExtVector: double __attribute__((ext_vector_type(2)))]* valuesArray, double* timesArray, nuint count);

	//	// -(NSUInteger)getFloat2Array:(vector_float2 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getFloat2Array:maxCount:")]
	//	unsafe nuint GetFloat2Array ([unsupported ExtVector: float __attribute__((ext_vector_type(2)))]* valuesArray, nuint maxCount);

	//	// -(NSUInteger)getDouble2Array:(vector_double2 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getDouble2Array:maxCount:")]
	//	unsafe nuint GetDouble2Array ([unsupported ExtVector: double __attribute__((ext_vector_type(2)))]* valuesArray, nuint maxCount);
	//}

	//// @interface MDLAnimatedVector3 : MDLAnimatedValue
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MDLAnimatedValue))]
	//interface MDLAnimatedVector3
	//{
	//	// -(void)setFloat3:(vector_float3)value atTime:(NSTimeInterval)time;
	//	[Export ("setFloat3:atTime:")]
	//	void SetFloat3 ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] value, double time);

	//	// -(void)setDouble3:(vector_double3)value atTime:(NSTimeInterval)time;
	//	[Export ("setDouble3:atTime:")]
	//	void SetDouble3 ([unsupported ExtVector: double __attribute__((ext_vector_type(3)))] value, double time);

	//	// -(vector_float3)float3AtTime:(NSTimeInterval)time;
	//	[Export ("float3AtTime:")]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] Float3AtTime (double time);

	//	// -(vector_double3)double3AtTime:(NSTimeInterval)time;
	//	[Export ("double3AtTime:")]
	//	[unsupported ExtVector: double __attribute__((ext_vector_type(3)))] Double3AtTime (double time);

	//	// -(void)resetWithFloat3Array:(const vector_float3 * _Nonnull)valuesArray atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)count;
	//	[Export ("resetWithFloat3Array:atTimes:count:")]
	//	unsafe void ResetWithFloat3Array ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))]* valuesArray, double* timesArray, nuint count);

	//	// -(void)resetWithDouble3Array:(const vector_double3 * _Nonnull)valuesArray atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)count;
	//	[Export ("resetWithDouble3Array:atTimes:count:")]
	//	unsafe void ResetWithDouble3Array ([unsupported ExtVector: double __attribute__((ext_vector_type(3)))]* valuesArray, double* timesArray, nuint count);

	//	// -(NSUInteger)getFloat3Array:(vector_float3 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getFloat3Array:maxCount:")]
	//	unsafe nuint GetFloat3Array ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))]* valuesArray, nuint maxCount);

	//	// -(NSUInteger)getDouble3Array:(vector_double3 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getDouble3Array:maxCount:")]
	//	unsafe nuint GetDouble3Array ([unsupported ExtVector: double __attribute__((ext_vector_type(3)))]* valuesArray, nuint maxCount);
	//}

	//// @interface MDLAnimatedVector4 : MDLAnimatedValue
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MDLAnimatedValue))]
	//interface MDLAnimatedVector4
	//{
	//	// -(void)setFloat4:(vector_float4)value atTime:(NSTimeInterval)time;
	//	[Export ("setFloat4:atTime:")]
	//	void SetFloat4 ([unsupported ExtVector: float __attribute__((ext_vector_type(4)))] value, double time);

	//	// -(void)setDouble4:(vector_double4)value atTime:(NSTimeInterval)time;
	//	[Export ("setDouble4:atTime:")]
	//	void SetDouble4 ([unsupported ExtVector: double __attribute__((ext_vector_type(4)))] value, double time);

	//	// -(vector_float4)float4AtTime:(NSTimeInterval)time;
	//	[Export ("float4AtTime:")]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(4)))] Float4AtTime (double time);

	//	// -(vector_double4)double4AtTime:(NSTimeInterval)time;
	//	[Export ("double4AtTime:")]
	//	[unsupported ExtVector: double __attribute__((ext_vector_type(4)))] Double4AtTime (double time);

	//	// -(void)resetWithFloat4Array:(const vector_float4 * _Nonnull)valuesArray atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)count;
	//	[Export ("resetWithFloat4Array:atTimes:count:")]
	//	unsafe void ResetWithFloat4Array ([unsupported ExtVector: float __attribute__((ext_vector_type(4)))]* valuesArray, double* timesArray, nuint count);

	//	// -(void)resetWithDouble4Array:(const vector_double4 * _Nonnull)valuesArray atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)count;
	//	[Export ("resetWithDouble4Array:atTimes:count:")]
	//	unsafe void ResetWithDouble4Array ([unsupported ExtVector: double __attribute__((ext_vector_type(4)))]* valuesArray, double* timesArray, nuint count);

	//	// -(NSUInteger)getFloat4Array:(vector_float4 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getFloat4Array:maxCount:")]
	//	unsafe nuint GetFloat4Array ([unsupported ExtVector: float __attribute__((ext_vector_type(4)))]* valuesArray, nuint maxCount);

	//	// -(NSUInteger)getDouble4Array:(vector_double4 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getDouble4Array:maxCount:")]
	//	unsafe nuint GetDouble4Array ([unsupported ExtVector: double __attribute__((ext_vector_type(4)))]* valuesArray, nuint maxCount);
	//}

	//// @interface MDLAnimatedMatrix4x4 : MDLAnimatedValue
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MDLAnimatedValue))]
	//interface MDLAnimatedMatrix4x4
	//{
	//	// -(void)setFloat4x4:(matrix_float4x4)value atTime:(NSTimeInterval)time;
	//	[Export ("setFloat4x4:atTime:")]
	//	void SetFloat4x4 (matrix_float4x4 value, double time);

	//	// -(void)setDouble4x4:(matrix_double4x4)value atTime:(NSTimeInterval)time;
	//	[Export ("setDouble4x4:atTime:")]
	//	void SetDouble4x4 (matrix_double4x4 value, double time);

	//	// -(matrix_float4x4)float4x4AtTime:(NSTimeInterval)time;
	//	[Export ("float4x4AtTime:")]
	//	matrix_float4x4 Float4x4AtTime (double time);

	//	// -(matrix_double4x4)double4x4AtTime:(NSTimeInterval)time;
	//	[Export ("double4x4AtTime:")]
	//	matrix_double4x4 Double4x4AtTime (double time);

	//	// -(void)resetWithFloat4x4Array:(const matrix_float4x4 * _Nonnull)valuesArray atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)count;
	//	[Export ("resetWithFloat4x4Array:atTimes:count:")]
	//	unsafe void ResetWithFloat4x4Array (matrix_float4x4* valuesArray, double* timesArray, nuint count);

	//	// -(void)resetWithDouble4x4Array:(const matrix_double4x4 * _Nonnull)valuesArray atTimes:(const NSTimeInterval * _Nonnull)timesArray count:(NSUInteger)count;
	//	[Export ("resetWithDouble4x4Array:atTimes:count:")]
	//	unsafe void ResetWithDouble4x4Array (matrix_double4x4* valuesArray, double* timesArray, nuint count);

	//	// -(NSUInteger)getFloat4x4Array:(matrix_float4x4 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getFloat4x4Array:maxCount:")]
	//	unsafe nuint GetFloat4x4Array (matrix_float4x4* valuesArray, nuint maxCount);

	//	// -(NSUInteger)getDouble4x4Array:(matrix_double4x4 * _Nonnull)valuesArray maxCount:(NSUInteger)maxCount;
	//	[Export ("getDouble4x4Array:maxCount:")]
	//	unsafe nuint GetDouble4x4Array (matrix_double4x4* valuesArray, nuint maxCount);
	//}

	//// @interface MDLSkeleton : MDLObject <NSCopying>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MDLObject))]
	//interface MDLSkeleton : INSCopying
	//{
	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull jointPaths;
	//	[Export ("jointPaths")]
	//	string[] JointPaths { get; }

	//	// @property (readonly, nonatomic) MDLMatrix4x4Array * _Nonnull jointBindTransforms;
	//	[Export ("jointBindTransforms")]
	//	MDLMatrix4x4Array JointBindTransforms { get; }

	//	// @property (readonly, nonatomic) MDLMatrix4x4Array * _Nonnull jointRestTransforms;
	//	[Export ("jointRestTransforms")]
	//	MDLMatrix4x4Array JointRestTransforms { get; }

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name jointPaths:(NSArray<NSString *> * _Nonnull)jointPaths;
	//	[Export ("initWithName:jointPaths:")]
	//	IntPtr Constructor (string name, string[] jointPaths);
	//}

	//// @protocol MDLJointAnimation
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[Protocol, Model]
	//interface MDLJointAnimation
	//{
	//}

	//// @interface MDLPackedJointAnimation : MDLObject <NSCopying, MDLJointAnimation>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(MDLObject))]
	//interface MDLPackedJointAnimation : INSCopying, IMDLJointAnimation
	//{
	//	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull jointPaths;
	//	[Export ("jointPaths")]
	//	string[] JointPaths { get; }

	//	// @property (readonly, nonatomic) MDLAnimatedVector3Array * _Nonnull translations;
	//	[Export ("translations")]
	//	MDLAnimatedVector3Array Translations { get; }

	//	// @property (readonly, nonatomic) MDLAnimatedQuaternionArray * _Nonnull rotations;
	//	[Export ("rotations")]
	//	MDLAnimatedQuaternionArray Rotations { get; }

	//	// @property (readonly, nonatomic) MDLAnimatedVector3Array * _Nonnull scales;
	//	[Export ("scales")]
	//	MDLAnimatedVector3Array Scales { get; }

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name jointPaths:(NSArray<NSString *> * _Nonnull)jointPaths;
	//	[Export ("initWithName:jointPaths:")]
	//	IntPtr Constructor (string name, string[] jointPaths);
	//}

	//// @interface MDLAnimationBindComponent : NSObject <NSCopying, MDLComponent>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLAnimationBindComponent : INSCopying, IMDLComponent
	//{
	//	// @property (retain, nonatomic) MDLSkeleton * _Nullable skeleton;
	//	[NullAllowed, Export ("skeleton", ArgumentSemantic.Retain)]
	//	MDLSkeleton Skeleton { get; set; }

	//	// @property (retain, nonatomic) id<MDLJointAnimation> _Nullable jointAnimation;
	//	[NullAllowed, Export ("jointAnimation", ArgumentSemantic.Retain)]
	//	MDLJointAnimation JointAnimation { get; set; }

	//	// @property (retain, nonatomic) NSArray<NSString *> * _Nullable jointPaths;
	//	[NullAllowed, Export ("jointPaths", ArgumentSemantic.Retain)]
	//	string[] JointPaths { get; set; }

	//	// @property (nonatomic) matrix_double4x4 geometryBindTransform;
	//	[Export ("geometryBindTransform", ArgumentSemantic.Assign)]
	//	matrix_double4x4 GeometryBindTransform { get; set; }
	//}

	//// @interface MDLAsset : NSObject <NSCopying, NSFastEnumeration>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLAsset : INSCopying, INSFastEnumeration
	//{
	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL;
	//	[Export ("initWithURL:")]
	//	IntPtr Constructor (NSUrl URL);

	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nullable)URL vertexDescriptor:(MDLVertexDescriptor * _Nullable)vertexDescriptor bufferAllocator:(id<MDLMeshBufferAllocator> _Nullable)bufferAllocator;
	//	[Export ("initWithURL:vertexDescriptor:bufferAllocator:")]
	//	IntPtr Constructor ([NullAllowed] NSUrl URL, [NullAllowed] MDLVertexDescriptor vertexDescriptor, [NullAllowed] MDLMeshBufferAllocator bufferAllocator);

	//	// -(instancetype _Nonnull)initWithBufferAllocator:(id<MDLMeshBufferAllocator> _Nullable)bufferAllocator;
	//	[Export ("initWithBufferAllocator:")]
	//	IntPtr Constructor ([NullAllowed] MDLMeshBufferAllocator bufferAllocator);

	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL vertexDescriptor:(MDLVertexDescriptor * _Nullable)vertexDescriptor bufferAllocator:(id<MDLMeshBufferAllocator> _Nullable)bufferAllocator preserveTopology:(BOOL)preserveTopology error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("initWithURL:vertexDescriptor:bufferAllocator:preserveTopology:error:")]
	//	IntPtr Constructor (NSUrl URL, [NullAllowed] MDLVertexDescriptor vertexDescriptor, [NullAllowed] MDLMeshBufferAllocator bufferAllocator, bool preserveTopology, [NullAllowed] out NSError error);

	//	// -(BOOL)exportAssetToURL:(NSURL * _Nonnull)URL;
	//	[Export ("exportAssetToURL:")]
	//	bool ExportAssetToURL (NSUrl URL);

	//	// -(BOOL)exportAssetToURL:(NSURL * _Nonnull)URL error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("exportAssetToURL:error:")]
	//	bool ExportAssetToURL (NSUrl URL, [NullAllowed] out NSError error);

	//	// -(MDLObject * _Nonnull)objectAtPath:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("objectAtPath:")]
	//	MDLObject ObjectAtPath (string path);

	//	// +(BOOL)canImportFileExtension:(NSString * _Nonnull)extension;
	//	[Static]
	//	[Export ("canImportFileExtension:")]
	//	bool CanImportFileExtension (string extension);

	//	// +(BOOL)canExportFileExtension:(NSString * _Nonnull)extension;
	//	[Static]
	//	[Export ("canExportFileExtension:")]
	//	bool CanExportFileExtension (string extension);

	//	// -(NSArray<MDLObject *> * _Nonnull)childObjectsOfClass:(Class _Nonnull)objectClass;
	//	[Export ("childObjectsOfClass:")]
	//	MDLObject[] ChildObjectsOfClass (Class objectClass);

	//	// -(void)loadTextures __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("loadTextures")]
	//	void LoadTextures ();

	//	// -(MDLAxisAlignedBoundingBox)boundingBoxAtTime:(NSTimeInterval)time;
	//	[Export ("boundingBoxAtTime:")]
	//	MDLAxisAlignedBoundingBox BoundingBoxAtTime (double time);

	//	// @property (readonly, nonatomic) MDLAxisAlignedBoundingBox boundingBox;
	//	[Export ("boundingBox")]
	//	MDLAxisAlignedBoundingBox BoundingBox { get; }

	//	// @property (readwrite, nonatomic) NSTimeInterval frameInterval;
	//	[Export ("frameInterval")]
	//	double FrameInterval { get; set; }

	//	// @property (readwrite, nonatomic) NSTimeInterval startTime;
	//	[Export ("startTime")]
	//	double StartTime { get; set; }

	//	// @property (readwrite, nonatomic) NSTimeInterval endTime;
	//	[Export ("endTime")]
	//	double EndTime { get; set; }

	//	// @property (readwrite, nonatomic) vector_float3 upAxis __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("upAxis", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] UpAxis { get; set; }

	//	// @property (readonly, retain, nonatomic) NSURL * _Nullable URL;
	//	[NullAllowed, Export ("URL", ArgumentSemantic.Retain)]
	//	NSUrl URL { get; }

	//	// @property (retain, nonatomic) id<MDLAssetResolver> _Nullable resolver __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[NullAllowed, Export ("resolver", ArgumentSemantic.Retain)]
	//	MDLAssetResolver Resolver { get; set; }

	//	// @property (readonly, retain, nonatomic) id<MDLMeshBufferAllocator> _Nonnull bufferAllocator;
	//	[Export ("bufferAllocator", ArgumentSemantic.Retain)]
	//	MDLMeshBufferAllocator BufferAllocator { get; }

	//	// @property (readonly, retain, nonatomic) MDLVertexDescriptor * _Nullable vertexDescriptor;
	//	[NullAllowed, Export ("vertexDescriptor", ArgumentSemantic.Retain)]
	//	MDLVertexDescriptor VertexDescriptor { get; }

	//	// -(void)addObject:(MDLObject * _Nonnull)object;
	//	[Export ("addObject:")]
	//	void AddObject (MDLObject @object);

	//	// -(void)removeObject:(MDLObject * _Nonnull)object;
	//	[Export ("removeObject:")]
	//	void RemoveObject (MDLObject @object);

	//	// @property (readonly, nonatomic) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// -(MDLObject * _Nullable)objectAtIndexedSubscript:(NSUInteger)index;
	//	[Export ("objectAtIndexedSubscript:")]
	//	[return: NullAllowed]
	//	MDLObject ObjectAtIndexedSubscript (nuint index);

	//	// -(MDLObject * _Nonnull)objectAtIndex:(NSUInteger)index;
	//	[Export ("objectAtIndex:")]
	//	MDLObject ObjectAtIndex (nuint index);

	//	// @property (retain, nonatomic) id<MDLObjectContainerComponent> _Nonnull masters;
	//	[Export ("masters", ArgumentSemantic.Retain)]
	//	MDLObjectContainerComponent Masters { get; set; }

	//	// @property (retain, nonatomic) id<MDLObjectContainerComponent> _Nonnull animations __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("animations", ArgumentSemantic.Retain)]
	//	MDLObjectContainerComponent Animations { get; set; }
	//}

	//// @protocol MDLLightProbeIrradianceDataSource <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MDLLightProbeIrradianceDataSource
	//{
	//	// @required @property MDLAxisAlignedBoundingBox boundingBox;
	//	[Abstract]
	//	[Export ("boundingBox", ArgumentSemantic.Assign)]
	//	MDLAxisAlignedBoundingBox BoundingBox { get; set; }

	//	// @optional @property NSUInteger sphericalHarmonicsLevel;
	//	[Export ("sphericalHarmonicsLevel")]
	//	nuint SphericalHarmonicsLevel { get; set; }

	//	// @optional -(NSData * _Nonnull)sphericalHarmonicsCoefficientsAtPosition:(vector_float3)position;
	//	[Export ("sphericalHarmonicsCoefficientsAtPosition:")]
	//	NSData SphericalHarmonicsCoefficientsAtPosition ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] position);
	//}

	//// @interface MDLLightBaking (MDLAsset)
	//[Category]
	//[BaseType (typeof(MDLAsset))]
	//interface MDLAsset_MDLLightBaking
	//{
	//	// +(NSArray<MDLLightProbe *> * _Nonnull)placeLightProbesWithDensity:(float)value heuristic:(MDLProbePlacement)type usingIrradianceDataSource:(id<MDLLightProbeIrradianceDataSource> _Nonnull)dataSource;
	//	[Static]
	//	[Export ("placeLightProbesWithDensity:heuristic:usingIrradianceDataSource:")]
	//	MDLLightProbe[] PlaceLightProbesWithDensity (float value, MDLProbePlacement type, MDLLightProbeIrradianceDataSource dataSource);
	//}

	//// @interface MDLCamera : MDLObject
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLObject))]
	//interface MDLCamera
	//{
	//	// @property (readonly, nonatomic) matrix_float4x4 projectionMatrix;
	//	[Export ("projectionMatrix")]
	//	matrix_float4x4 ProjectionMatrix { get; }

	//	// @property (assign, nonatomic) MDLCameraProjection projection;
	//	[Export ("projection", ArgumentSemantic.Assign)]
	//	MDLCameraProjection Projection { get; set; }

	//	// -(void)frameBoundingBox:(MDLAxisAlignedBoundingBox)boundingBox setNearAndFar:(BOOL)setNearAndFar;
	//	[Export ("frameBoundingBox:setNearAndFar:")]
	//	void FrameBoundingBox (MDLAxisAlignedBoundingBox boundingBox, bool setNearAndFar);

	//	// -(void)lookAt:(vector_float3)focusPosition;
	//	[Export ("lookAt:")]
	//	void LookAt ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] focusPosition);

	//	// -(void)lookAt:(vector_float3)focusPosition from:(vector_float3)cameraPosition;
	//	[Export ("lookAt:from:")]
	//	void LookAt ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] focusPosition, [unsupported ExtVector: float __attribute__((ext_vector_type(3)))] cameraPosition);

	//	// -(vector_float3)rayTo:(vector_int2)pixel forViewPort:(vector_int2)size;
	//	[Export ("rayTo:forViewPort:")]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] RayTo ([unsupported ExtVector: int __attribute__((ext_vector_type(2)))] pixel, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] size);

	//	// @property (assign, nonatomic) float nearVisibilityDistance;
	//	[Export ("nearVisibilityDistance")]
	//	float NearVisibilityDistance { get; set; }

	//	// @property (assign, nonatomic) float farVisibilityDistance;
	//	[Export ("farVisibilityDistance")]
	//	float FarVisibilityDistance { get; set; }

	//	// @property (assign, nonatomic) float worldToMetersConversionScale;
	//	[Export ("worldToMetersConversionScale")]
	//	float WorldToMetersConversionScale { get; set; }

	//	// @property (assign, nonatomic) float barrelDistortion;
	//	[Export ("barrelDistortion")]
	//	float BarrelDistortion { get; set; }

	//	// @property (assign, nonatomic) float fisheyeDistortion;
	//	[Export ("fisheyeDistortion")]
	//	float FisheyeDistortion { get; set; }

	//	// @property (assign, nonatomic) float opticalVignetting;
	//	[Export ("opticalVignetting")]
	//	float OpticalVignetting { get; set; }

	//	// @property (assign, nonatomic) float chromaticAberration;
	//	[Export ("chromaticAberration")]
	//	float ChromaticAberration { get; set; }

	//	// @property (assign, nonatomic) float focalLength;
	//	[Export ("focalLength")]
	//	float FocalLength { get; set; }

	//	// @property (assign, nonatomic) float focusDistance;
	//	[Export ("focusDistance")]
	//	float FocusDistance { get; set; }

	//	// @property (assign, nonatomic) float fieldOfView;
	//	[Export ("fieldOfView")]
	//	float FieldOfView { get; set; }

	//	// @property (assign, nonatomic) float fStop;
	//	[Export ("fStop")]
	//	float FStop { get; set; }

	//	// @property (assign, nonatomic) NSUInteger apertureBladeCount;
	//	[Export ("apertureBladeCount")]
	//	nuint ApertureBladeCount { get; set; }

	//	// @property (assign, nonatomic) float maximumCircleOfConfusion;
	//	[Export ("maximumCircleOfConfusion")]
	//	float MaximumCircleOfConfusion { get; set; }

	//	// -(MDLTexture * _Nonnull)bokehKernelWithSize:(vector_int2)size;
	//	[Export ("bokehKernelWithSize:")]
	//	MDLTexture BokehKernelWithSize ([unsupported ExtVector: int __attribute__((ext_vector_type(2)))] size);

	//	// @property (assign, nonatomic) NSTimeInterval shutterOpenInterval;
	//	[Export ("shutterOpenInterval")]
	//	double ShutterOpenInterval { get; set; }

	//	// @property (assign, nonatomic) float sensorVerticalAperture;
	//	[Export ("sensorVerticalAperture")]
	//	float SensorVerticalAperture { get; set; }

	//	// @property (assign, nonatomic) float sensorAspect;
	//	[Export ("sensorAspect")]
	//	float SensorAspect { get; set; }

	//	// @property (assign, nonatomic) vector_float2 sensorEnlargement;
	//	[Export ("sensorEnlargement", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(2)))] SensorEnlargement { get; set; }

	//	// @property (assign, nonatomic) vector_float2 sensorShift;
	//	[Export ("sensorShift", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(2)))] SensorShift { get; set; }

	//	// @property (assign, nonatomic) vector_float3 flash;
	//	[Export ("flash", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] Flash { get; set; }

	//	// @property (assign, nonatomic) vector_float2 exposureCompression;
	//	[Export ("exposureCompression", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(2)))] ExposureCompression { get; set; }

	//	// @property (assign, nonatomic) vector_float3 exposure;
	//	[Export ("exposure", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] Exposure { get; set; }
	//}

	//// @interface MDLStereoscopicCamera : MDLCamera
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLCamera))]
	//interface MDLStereoscopicCamera
	//{
	//	// @property (assign, nonatomic) float interPupillaryDistance;
	//	[Export ("interPupillaryDistance")]
	//	float InterPupillaryDistance { get; set; }

	//	// @property (assign, nonatomic) float leftVergence;
	//	[Export ("leftVergence")]
	//	float LeftVergence { get; set; }

	//	// @property (assign, nonatomic) float rightVergence;
	//	[Export ("rightVergence")]
	//	float RightVergence { get; set; }

	//	// @property (assign, nonatomic) float overlap;
	//	[Export ("overlap")]
	//	float Overlap { get; set; }

	//	// @property (readonly, nonatomic) matrix_float4x4 leftViewMatrix;
	//	[Export ("leftViewMatrix")]
	//	matrix_float4x4 LeftViewMatrix { get; }

	//	// @property (readonly, nonatomic) matrix_float4x4 rightViewMatrix;
	//	[Export ("rightViewMatrix")]
	//	matrix_float4x4 RightViewMatrix { get; }

	//	// @property (readonly, nonatomic) matrix_float4x4 leftProjectionMatrix;
	//	[Export ("leftProjectionMatrix")]
	//	matrix_float4x4 LeftProjectionMatrix { get; }

	//	// @property (readonly, nonatomic) matrix_float4x4 rightProjectionMatrix;
	//	[Export ("rightProjectionMatrix")]
	//	matrix_float4x4 RightProjectionMatrix { get; }
	//}

	//// @interface MDLLight : MDLObject
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLObject))]
	//interface MDLLight
	//{
	//	// -(CGColorRef _Nonnull)irradianceAtPoint:(vector_float3)point;
	//	[Export ("irradianceAtPoint:")]
	//	unsafe CGColorRef* IrradianceAtPoint ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] point);

	//	// -(CGColorRef _Nonnull)irradianceAtPoint:(vector_float3)point colorSpace:(CGColorSpaceRef _Nonnull)colorSpace;
	//	[Export ("irradianceAtPoint:colorSpace:")]
	//	unsafe CGColorRef* IrradianceAtPoint ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] point, CGColorSpaceRef* colorSpace);

	//	// @property (readwrite, nonatomic) MDLLightType lightType;
	//	[Export ("lightType", ArgumentSemantic.Assign)]
	//	MDLLightType LightType { get; set; }

	//	// @property (readwrite, copy, nonatomic) NSString * _Nonnull colorSpace;
	//	[Export ("colorSpace")]
	//	string ColorSpace { get; set; }
	//}

	//// @interface MDLPhysicallyPlausibleLight : MDLLight
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLLight))]
	//interface MDLPhysicallyPlausibleLight
	//{
	//	// -(void)setColorByTemperature:(float)temperature;
	//	[Export ("setColorByTemperature:")]
	//	void SetColorByTemperature (float temperature);

	//	// @property (nonatomic) CGColorRef _Nullable color;
	//	[NullAllowed, Export ("color", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* Color { get; set; }

	//	// @property (readwrite, nonatomic) float lumens;
	//	[Export ("lumens")]
	//	float Lumens { get; set; }

	//	// @property (readwrite, nonatomic) float innerConeAngle;
	//	[Export ("innerConeAngle")]
	//	float InnerConeAngle { get; set; }

	//	// @property (readwrite, nonatomic) float outerConeAngle;
	//	[Export ("outerConeAngle")]
	//	float OuterConeAngle { get; set; }

	//	// @property (readwrite, nonatomic) float attenuationStartDistance;
	//	[Export ("attenuationStartDistance")]
	//	float AttenuationStartDistance { get; set; }

	//	// @property (readwrite, nonatomic) float attenuationEndDistance;
	//	[Export ("attenuationEndDistance")]
	//	float AttenuationEndDistance { get; set; }
	//}

	//// @interface MDLAreaLight : MDLPhysicallyPlausibleLight
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLPhysicallyPlausibleLight))]
	//interface MDLAreaLight
	//{
	//	// @property (readwrite, nonatomic) float areaRadius;
	//	[Export ("areaRadius")]
	//	float AreaRadius { get; set; }

	//	// @property (readwrite, nonatomic) vector_float2 superEllipticPower;
	//	[Export ("superEllipticPower", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(2)))] SuperEllipticPower { get; set; }

	//	// @property (readwrite, nonatomic) float aspect;
	//	[Export ("aspect")]
	//	float Aspect { get; set; }
	//}

	//// @interface MDLPhotometricLight : MDLPhysicallyPlausibleLight
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLPhysicallyPlausibleLight))]
	//interface MDLPhotometricLight
	//{
	//	// -(instancetype _Nullable)initWithIESProfile:(NSURL * _Nonnull)URL;
	//	[Export ("initWithIESProfile:")]
	//	IntPtr Constructor (NSUrl URL);

	//	// -(void)generateSphericalHarmonicsFromLight:(NSUInteger)sphericalHarmonicsLevel;
	//	[Export ("generateSphericalHarmonicsFromLight:")]
	//	void GenerateSphericalHarmonicsFromLight (nuint sphericalHarmonicsLevel);

	//	// -(void)generateCubemapFromLight:(NSUInteger)textureSize;
	//	[Export ("generateCubemapFromLight:")]
	//	void GenerateCubemapFromLight (nuint textureSize);

	//	// -(MDLTexture * _Nonnull)generateTexture:(NSUInteger)textureSize __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("generateTexture:")]
	//	MDLTexture GenerateTexture (nuint textureSize);

	//	// @property (readonly, retain, nonatomic) MDLTexture * _Nullable lightCubeMap;
	//	[NullAllowed, Export ("lightCubeMap", ArgumentSemantic.Retain)]
	//	MDLTexture LightCubeMap { get; }

	//	// @property (readonly, nonatomic) NSUInteger sphericalHarmonicsLevel;
	//	[Export ("sphericalHarmonicsLevel")]
	//	nuint SphericalHarmonicsLevel { get; }

	//	// @property (readonly, copy, nonatomic) NSData * _Nullable sphericalHarmonicsCoefficients;
	//	[NullAllowed, Export ("sphericalHarmonicsCoefficients", ArgumentSemantic.Copy)]
	//	NSData SphericalHarmonicsCoefficients { get; }
	//}

	//// @interface MDLLightProbe : MDLLight
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLLight))]
	//interface MDLLightProbe
	//{
	//	// -(instancetype _Nonnull)initWithReflectiveTexture:(MDLTexture * _Nullable)reflectiveTexture irradianceTexture:(MDLTexture * _Nullable)irradianceTexture;
	//	[Export ("initWithReflectiveTexture:irradianceTexture:")]
	//	IntPtr Constructor ([NullAllowed] MDLTexture reflectiveTexture, [NullAllowed] MDLTexture irradianceTexture);

	//	// -(void)generateSphericalHarmonicsFromIrradiance:(NSUInteger)sphericalHarmonicsLevel;
	//	[Export ("generateSphericalHarmonicsFromIrradiance:")]
	//	void GenerateSphericalHarmonicsFromIrradiance (nuint sphericalHarmonicsLevel);

	//	// @property (readonly, retain, nonatomic) MDLTexture * _Nullable reflectiveTexture;
	//	[NullAllowed, Export ("reflectiveTexture", ArgumentSemantic.Retain)]
	//	MDLTexture ReflectiveTexture { get; }

	//	// @property (readonly, retain, nonatomic) MDLTexture * _Nullable irradianceTexture;
	//	[NullAllowed, Export ("irradianceTexture", ArgumentSemantic.Retain)]
	//	MDLTexture IrradianceTexture { get; }

	//	// @property (readonly, nonatomic) NSUInteger sphericalHarmonicsLevel;
	//	[Export ("sphericalHarmonicsLevel")]
	//	nuint SphericalHarmonicsLevel { get; }

	//	// @property (readonly, copy, nonatomic) NSData * _Nullable sphericalHarmonicsCoefficients;
	//	[NullAllowed, Export ("sphericalHarmonicsCoefficients", ArgumentSemantic.Copy)]
	//	NSData SphericalHarmonicsCoefficients { get; }
	//}

	//// @interface MDLLightBaking (MDLLightProbe)
	//[Category]
	//[BaseType (typeof(MDLLightProbe))]
	//interface MDLLightProbe_MDLLightBaking
	//{
	//	// +(MDLLightProbe * _Nullable)lightProbeWithTextureSize:(NSInteger)textureSize forLocation:(MDLTransform * _Nonnull)transform lightsToConsider:(NSArray<MDLLight *> * _Nonnull)lightsToConsider objectsToConsider:(NSArray<MDLObject *> * _Nonnull)objectsToConsider reflectiveCubemap:(MDLTexture * _Nullable)reflectiveCubemap irradianceCubemap:(MDLTexture * _Nullable)irradianceCubemap;
	//	[Static]
	//	[Export ("lightProbeWithTextureSize:forLocation:lightsToConsider:objectsToConsider:reflectiveCubemap:irradianceCubemap:")]
	//	[return: NullAllowed]
	//	MDLLightProbe LightProbeWithTextureSize (nint textureSize, MDLTransform transform, MDLLight[] lightsToConsider, MDLObject[] objectsToConsider, [NullAllowed] MDLTexture reflectiveCubemap, [NullAllowed] MDLTexture irradianceCubemap);
	//}

	//// @interface MDLTextureFilter : NSObject
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTextureFilter
	//{
	//	// @property (assign, nonatomic) MDLMaterialTextureWrapMode sWrapMode;
	//	[Export ("sWrapMode", ArgumentSemantic.Assign)]
	//	MDLMaterialTextureWrapMode SWrapMode { get; set; }

	//	// @property (assign, nonatomic) MDLMaterialTextureWrapMode tWrapMode;
	//	[Export ("tWrapMode", ArgumentSemantic.Assign)]
	//	MDLMaterialTextureWrapMode TWrapMode { get; set; }

	//	// @property (assign, nonatomic) MDLMaterialTextureWrapMode rWrapMode;
	//	[Export ("rWrapMode", ArgumentSemantic.Assign)]
	//	MDLMaterialTextureWrapMode RWrapMode { get; set; }

	//	// @property (assign, nonatomic) MDLMaterialTextureFilterMode minFilter;
	//	[Export ("minFilter", ArgumentSemantic.Assign)]
	//	MDLMaterialTextureFilterMode MinFilter { get; set; }

	//	// @property (assign, nonatomic) MDLMaterialTextureFilterMode magFilter;
	//	[Export ("magFilter", ArgumentSemantic.Assign)]
	//	MDLMaterialTextureFilterMode MagFilter { get; set; }

	//	// @property (assign, nonatomic) MDLMaterialMipMapFilterMode mipFilter;
	//	[Export ("mipFilter", ArgumentSemantic.Assign)]
	//	MDLMaterialMipMapFilterMode MipFilter { get; set; }
	//}

	//// @interface MDLTextureSampler : NSObject
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTextureSampler
	//{
	//	// @property (retain, nonatomic) MDLTexture * _Nullable texture;
	//	[NullAllowed, Export ("texture", ArgumentSemantic.Retain)]
	//	MDLTexture Texture { get; set; }

	//	// @property (retain, nonatomic) MDLTextureFilter * _Nullable hardwareFilter;
	//	[NullAllowed, Export ("hardwareFilter", ArgumentSemantic.Retain)]
	//	MDLTextureFilter HardwareFilter { get; set; }

	//	// @property (retain, nonatomic) MDLTransform * _Nullable transform;
	//	[NullAllowed, Export ("transform", ArgumentSemantic.Retain)]
	//	MDLTransform Transform { get; set; }
	//}

	//// @interface MDLMaterialProperty : NSObject <MDLNamed, NSCopying>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MDLMaterialProperty : IMDLNamed, INSCopying
	//{
	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name semantic:(MDLMaterialSemantic)semantic __attribute__((objc_designated_initializer));
	//	[Export ("initWithName:semantic:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string name, MDLMaterialSemantic semantic);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name semantic:(MDLMaterialSemantic)semantic float:(float)value;
	//	[Export ("initWithName:semantic:float:")]
	//	IntPtr Constructor (string name, MDLMaterialSemantic semantic, float value);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name semantic:(MDLMaterialSemantic)semantic float2:(vector_float2)value;
	//	[Export ("initWithName:semantic:float2:")]
	//	IntPtr Constructor (string name, MDLMaterialSemantic semantic, [unsupported ExtVector: float __attribute__((ext_vector_type(2)))] value);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name semantic:(MDLMaterialSemantic)semantic float3:(vector_float3)value;
	//	[Export ("initWithName:semantic:float3:")]
	//	IntPtr Constructor (string name, MDLMaterialSemantic semantic, [unsupported ExtVector: float __attribute__((ext_vector_type(3)))] value);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name semantic:(MDLMaterialSemantic)semantic float4:(vector_float4)value;
	//	[Export ("initWithName:semantic:float4:")]
	//	IntPtr Constructor (string name, MDLMaterialSemantic semantic, [unsupported ExtVector: float __attribute__((ext_vector_type(4)))] value);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name semantic:(MDLMaterialSemantic)semantic matrix4x4:(matrix_float4x4)value;
	//	[Export ("initWithName:semantic:matrix4x4:")]
	//	IntPtr Constructor (string name, MDLMaterialSemantic semantic, matrix_float4x4 value);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name semantic:(MDLMaterialSemantic)semantic URL:(NSURL * _Nullable)URL;
	//	[Export ("initWithName:semantic:URL:")]
	//	IntPtr Constructor (string name, MDLMaterialSemantic semantic, [NullAllowed] NSUrl URL);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name semantic:(MDLMaterialSemantic)semantic string:(NSString * _Nullable)string;
	//	[Export ("initWithName:semantic:string:")]
	//	IntPtr Constructor (string name, MDLMaterialSemantic semantic, [NullAllowed] string @string);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name semantic:(MDLMaterialSemantic)semantic textureSampler:(MDLTextureSampler * _Nullable)textureSampler;
	//	[Export ("initWithName:semantic:textureSampler:")]
	//	IntPtr Constructor (string name, MDLMaterialSemantic semantic, [NullAllowed] MDLTextureSampler textureSampler);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name semantic:(MDLMaterialSemantic)semantic color:(CGColorRef _Nonnull)color;
	//	[Export ("initWithName:semantic:color:")]
	//	unsafe IntPtr Constructor (string name, MDLMaterialSemantic semantic, CGColorRef* color);

	//	// -(void)setProperties:(MDLMaterialProperty * _Nonnull)property;
	//	[Export ("setProperties:")]
	//	void SetProperties (MDLMaterialProperty property);

	//	// @property (assign, nonatomic) MDLMaterialSemantic semantic;
	//	[Export ("semantic", ArgumentSemantic.Assign)]
	//	MDLMaterialSemantic Semantic { get; set; }

	//	// @property (assign, nonatomic) MDLMaterialPropertyType type;
	//	[Export ("type", ArgumentSemantic.Assign)]
	//	MDLMaterialPropertyType Type { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable stringValue;
	//	[NullAllowed, Export ("stringValue")]
	//	string StringValue { get; set; }

	//	// @property (copy, nonatomic) NSURL * _Nullable URLValue;
	//	[NullAllowed, Export ("URLValue", ArgumentSemantic.Copy)]
	//	NSUrl URLValue { get; set; }

	//	// @property (retain, nonatomic) MDLTextureSampler * _Nullable textureSamplerValue;
	//	[NullAllowed, Export ("textureSamplerValue", ArgumentSemantic.Retain)]
	//	MDLTextureSampler TextureSamplerValue { get; set; }

	//	// @property (nonatomic) CGColorRef _Nullable color;
	//	[NullAllowed, Export ("color", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* Color { get; set; }

	//	// @property (assign, nonatomic) float floatValue;
	//	[Export ("floatValue")]
	//	float FloatValue { get; set; }

	//	// @property (assign, nonatomic) vector_float2 float2Value;
	//	[Export ("float2Value", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(2)))] Float2Value { get; set; }

	//	// @property (assign, nonatomic) vector_float3 float3Value;
	//	[Export ("float3Value", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] Float3Value { get; set; }

	//	// @property (assign, nonatomic) vector_float4 float4Value;
	//	[Export ("float4Value", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(4)))] Float4Value { get; set; }

	//	// @property (assign, nonatomic) matrix_float4x4 matrix4x4;
	//	[Export ("matrix4x4", ArgumentSemantic.Assign)]
	//	matrix_float4x4 Matrix4x4 { get; set; }

	//	// @property (assign, nonatomic) float luminance;
	//	[Export ("luminance")]
	//	float Luminance { get; set; }
	//}

	//// @interface MDLMaterialPropertyConnection : NSObject <MDLNamed>
	//[TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MDLMaterialPropertyConnection : IMDLNamed
	//{
	//	// -(instancetype _Nonnull)initWithOutput:(MDLMaterialProperty * _Nonnull)output input:(MDLMaterialProperty * _Nonnull)input;
	//	[Export ("initWithOutput:input:")]
	//	IntPtr Constructor (MDLMaterialProperty output, MDLMaterialProperty input);

	//	// @property (readonly, nonatomic, weak) MDLMaterialProperty * _Nullable output;
	//	[NullAllowed, Export ("output", ArgumentSemantic.Weak)]
	//	MDLMaterialProperty Output { get; }

	//	// @property (readonly, nonatomic, weak) MDLMaterialProperty * _Nullable input;
	//	[NullAllowed, Export ("input", ArgumentSemantic.Weak)]
	//	MDLMaterialProperty Input { get; }
	//}

	//// @interface MDLMaterialPropertyNode : NSObject <MDLNamed>
	//[TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MDLMaterialPropertyNode : IMDLNamed
	//{
	//	// -(instancetype _Nonnull)initWithInputs:(NSArray<MDLMaterialProperty *> * _Nonnull)inputs outputs:(NSArray<MDLMaterialProperty *> * _Nonnull)outputs evaluationFunction:(void (^ _Nonnull)(MDLMaterialPropertyNode * _Nonnull))function;
	//	[Export ("initWithInputs:outputs:evaluationFunction:")]
	//	IntPtr Constructor (MDLMaterialProperty[] inputs, MDLMaterialProperty[] outputs, Action<MDLMaterialPropertyNode> function);

	//	// @property (copy, nonatomic) void (^ _Nonnull)(MDLMaterialPropertyNode * _Nonnull) evaluationFunction;
	//	[Export ("evaluationFunction", ArgumentSemantic.Copy)]
	//	Action<MDLMaterialPropertyNode> EvaluationFunction { get; set; }

	//	// @property (readonly, nonatomic) NSArray<MDLMaterialProperty *> * _Nonnull inputs;
	//	[Export ("inputs")]
	//	MDLMaterialProperty[] Inputs { get; }

	//	// @property (readonly, nonatomic) NSArray<MDLMaterialProperty *> * _Nonnull outputs;
	//	[Export ("outputs")]
	//	MDLMaterialProperty[] Outputs { get; }
	//}

	//// @interface MDLMaterialPropertyGraph : MDLMaterialPropertyNode
	//[TV (10,0), Mac (10,12), iOS (10,0)]
	//[BaseType (typeof(MDLMaterialPropertyNode))]
	//[DisableDefaultCtor]
	//interface MDLMaterialPropertyGraph
	//{
	//	// -(instancetype _Nonnull)initWithNodes:(NSArray<MDLMaterialPropertyNode *> * _Nonnull)nodes connections:(NSArray<MDLMaterialPropertyConnection *> * _Nonnull)connections;
	//	[Export ("initWithNodes:connections:")]
	//	IntPtr Constructor (MDLMaterialPropertyNode[] nodes, MDLMaterialPropertyConnection[] connections);

	//	// -(void)evaluate;
	//	[Export ("evaluate")]
	//	void Evaluate ();

	//	// @property (readonly, nonatomic) NSArray<MDLMaterialPropertyNode *> * _Nonnull nodes;
	//	[Export ("nodes")]
	//	MDLMaterialPropertyNode[] Nodes { get; }

	//	// @property (readonly, nonatomic) NSArray<MDLMaterialPropertyConnection *> * _Nonnull connections;
	//	[Export ("connections")]
	//	MDLMaterialPropertyConnection[] Connections { get; }
	//}

	//// @interface MDLScatteringFunction : NSObject <MDLNamed>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLScatteringFunction : IMDLNamed
	//{
	//	// @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull baseColor;
	//	[Export ("baseColor", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty BaseColor { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull emission;
	//	[Export ("emission", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty Emission { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull specular;
	//	[Export ("specular", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty Specular { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull materialIndexOfRefraction;
	//	[Export ("materialIndexOfRefraction", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty MaterialIndexOfRefraction { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull interfaceIndexOfRefraction;
	//	[Export ("interfaceIndexOfRefraction", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty InterfaceIndexOfRefraction { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull normal;
	//	[Export ("normal", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty Normal { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull ambientOcclusion;
	//	[Export ("ambientOcclusion", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty AmbientOcclusion { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull ambientOcclusionScale;
	//	[Export ("ambientOcclusionScale", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty AmbientOcclusionScale { get; }
	//}

	//// @interface MDLPhysicallyPlausibleScatteringFunction : MDLScatteringFunction
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLScatteringFunction))]
	//interface MDLPhysicallyPlausibleScatteringFunction
	//{
	//	// @property (readonly, nonatomic) NSInteger version;
	//	[Export ("version")]
	//	nint Version { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull subsurface;
	//	[Export ("subsurface", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty Subsurface { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull metallic;
	//	[Export ("metallic", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty Metallic { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull specularAmount;
	//	[Export ("specularAmount", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty SpecularAmount { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull specularTint;
	//	[Export ("specularTint", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty SpecularTint { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull roughness;
	//	[Export ("roughness", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty Roughness { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull anisotropic;
	//	[Export ("anisotropic", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty Anisotropic { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull anisotropicRotation;
	//	[Export ("anisotropicRotation", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty AnisotropicRotation { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull sheen;
	//	[Export ("sheen", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty Sheen { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull sheenTint;
	//	[Export ("sheenTint", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty SheenTint { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull clearcoat;
	//	[Export ("clearcoat", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty Clearcoat { get; }

	//	// @property (readonly, retain, nonatomic) MDLMaterialProperty * _Nonnull clearcoatGloss;
	//	[Export ("clearcoatGloss", ArgumentSemantic.Retain)]
	//	MDLMaterialProperty ClearcoatGloss { get; }
	//}

	//// @interface MDLMaterial : NSObject <MDLNamed, NSFastEnumeration>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLMaterial : IMDLNamed, INSFastEnumeration
	//{
	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name scatteringFunction:(MDLScatteringFunction * _Nonnull)scatteringFunction;
	//	[Export ("initWithName:scatteringFunction:")]
	//	IntPtr Constructor (string name, MDLScatteringFunction scatteringFunction);

	//	// -(void)setProperty:(MDLMaterialProperty * _Nonnull)property;
	//	[Export ("setProperty:")]
	//	void SetProperty (MDLMaterialProperty property);

	//	// -(void)removeProperty:(MDLMaterialProperty * _Nonnull)property;
	//	[Export ("removeProperty:")]
	//	void RemoveProperty (MDLMaterialProperty property);

	//	// -(MDLMaterialProperty * _Nullable)propertyNamed:(NSString * _Nonnull)name;
	//	[Export ("propertyNamed:")]
	//	[return: NullAllowed]
	//	MDLMaterialProperty PropertyNamed (string name);

	//	// -(MDLMaterialProperty * _Nullable)propertyWithSemantic:(MDLMaterialSemantic)semantic;
	//	[Export ("propertyWithSemantic:")]
	//	[return: NullAllowed]
	//	MDLMaterialProperty PropertyWithSemantic (MDLMaterialSemantic semantic);

	//	// -(NSArray<MDLMaterialProperty *> * _Nonnull)propertiesWithSemantic:(MDLMaterialSemantic)semantic __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("propertiesWithSemantic:")]
	//	MDLMaterialProperty[] PropertiesWithSemantic (MDLMaterialSemantic semantic);

	//	// -(void)removeAllProperties;
	//	[Export ("removeAllProperties")]
	//	void RemoveAllProperties ();

	//	// -(void)resolveTexturesWithResolver:(id<MDLAssetResolver> _Nonnull)resolver __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("resolveTexturesWithResolver:")]
	//	void ResolveTexturesWithResolver (MDLAssetResolver resolver);

	//	// -(void)loadTexturesUsingResolver:(id<MDLAssetResolver> _Nonnull)resolver __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("loadTexturesUsingResolver:")]
	//	void LoadTexturesUsingResolver (MDLAssetResolver resolver);

	//	// @property (readonly, retain, nonatomic) MDLScatteringFunction * _Nonnull scatteringFunction;
	//	[Export ("scatteringFunction", ArgumentSemantic.Retain)]
	//	MDLScatteringFunction ScatteringFunction { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }

	//	// @property (retain, nonatomic) MDLMaterial * _Nullable baseMaterial;
	//	[NullAllowed, Export ("baseMaterial", ArgumentSemantic.Retain)]
	//	MDLMaterial BaseMaterial { get; set; }

	//	// -(MDLMaterialProperty * _Nullable)objectAtIndexedSubscript:(NSUInteger)idx;
	//	[Export ("objectAtIndexedSubscript:")]
	//	[return: NullAllowed]
	//	MDLMaterialProperty ObjectAtIndexedSubscript (nuint idx);

	//	// -(MDLMaterialProperty * _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)name;
	//	[Export ("objectForKeyedSubscript:")]
	//	[return: NullAllowed]
	//	MDLMaterialProperty ObjectForKeyedSubscript (string name);

	//	// @property (readonly, nonatomic) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// @property (nonatomic) MDLMaterialFace materialFace;
	//	[Export ("materialFace", ArgumentSemantic.Assign)]
	//	MDLMaterialFace MaterialFace { get; set; }
	//}

	//// @interface MDLSubmeshTopology : NSObject
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLSubmeshTopology
	//{
	//	// -(instancetype _Nonnull)initWithSubmesh:(MDLSubmesh * _Nonnull)submesh;
	//	[Export ("initWithSubmesh:")]
	//	IntPtr Constructor (MDLSubmesh submesh);

	//	// @property (retain, nonatomic) id<MDLMeshBuffer> _Nullable faceTopology;
	//	[NullAllowed, Export ("faceTopology", ArgumentSemantic.Retain)]
	//	MDLMeshBuffer FaceTopology { get; set; }

	//	// @property (nonatomic) NSUInteger faceCount;
	//	[Export ("faceCount")]
	//	nuint FaceCount { get; set; }

	//	// @property (retain, nonatomic) id<MDLMeshBuffer> _Nullable vertexCreaseIndices;
	//	[NullAllowed, Export ("vertexCreaseIndices", ArgumentSemantic.Retain)]
	//	MDLMeshBuffer VertexCreaseIndices { get; set; }

	//	// @property (retain, nonatomic) id<MDLMeshBuffer> _Nullable vertexCreases;
	//	[NullAllowed, Export ("vertexCreases", ArgumentSemantic.Retain)]
	//	MDLMeshBuffer VertexCreases { get; set; }

	//	// @property (nonatomic) NSUInteger vertexCreaseCount;
	//	[Export ("vertexCreaseCount")]
	//	nuint VertexCreaseCount { get; set; }

	//	// @property (retain, nonatomic) id<MDLMeshBuffer> _Nullable edgeCreaseIndices;
	//	[NullAllowed, Export ("edgeCreaseIndices", ArgumentSemantic.Retain)]
	//	MDLMeshBuffer EdgeCreaseIndices { get; set; }

	//	// @property (retain, nonatomic) id<MDLMeshBuffer> _Nullable edgeCreases;
	//	[NullAllowed, Export ("edgeCreases", ArgumentSemantic.Retain)]
	//	MDLMeshBuffer EdgeCreases { get; set; }

	//	// @property (nonatomic) NSUInteger edgeCreaseCount;
	//	[Export ("edgeCreaseCount")]
	//	nuint EdgeCreaseCount { get; set; }

	//	// @property (retain, nonatomic) id<MDLMeshBuffer> _Nullable holes;
	//	[NullAllowed, Export ("holes", ArgumentSemantic.Retain)]
	//	MDLMeshBuffer Holes { get; set; }

	//	// @property (nonatomic) NSUInteger holeCount;
	//	[Export ("holeCount")]
	//	nuint HoleCount { get; set; }
	//}

	//// @interface MDLSubmesh : NSObject <MDLNamed>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLSubmesh : IMDLNamed
	//{
	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name indexBuffer:(id<MDLMeshBuffer> _Nonnull)indexBuffer indexCount:(NSUInteger)indexCount indexType:(MDLIndexBitDepth)indexType geometryType:(MDLGeometryType)geometryType material:(MDLMaterial * _Nullable)material;
	//	[Export ("initWithName:indexBuffer:indexCount:indexType:geometryType:material:")]
	//	IntPtr Constructor (string name, MDLMeshBuffer indexBuffer, nuint indexCount, MDLIndexBitDepth indexType, MDLGeometryType geometryType, [NullAllowed] MDLMaterial material);

	//	// -(instancetype _Nonnull)initWithIndexBuffer:(id<MDLMeshBuffer> _Nonnull)indexBuffer indexCount:(NSUInteger)indexCount indexType:(MDLIndexBitDepth)indexType geometryType:(MDLGeometryType)geometryType material:(MDLMaterial * _Nullable)material;
	//	[Export ("initWithIndexBuffer:indexCount:indexType:geometryType:material:")]
	//	IntPtr Constructor (MDLMeshBuffer indexBuffer, nuint indexCount, MDLIndexBitDepth indexType, MDLGeometryType geometryType, [NullAllowed] MDLMaterial material);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name indexBuffer:(id<MDLMeshBuffer> _Nonnull)indexBuffer indexCount:(NSUInteger)indexCount indexType:(MDLIndexBitDepth)indexType geometryType:(MDLGeometryType)geometryType material:(MDLMaterial * _Nullable)material topology:(MDLSubmeshTopology * _Nullable)topology;
	//	[Export ("initWithName:indexBuffer:indexCount:indexType:geometryType:material:topology:")]
	//	IntPtr Constructor (string name, MDLMeshBuffer indexBuffer, nuint indexCount, MDLIndexBitDepth indexType, MDLGeometryType geometryType, [NullAllowed] MDLMaterial material, [NullAllowed] MDLSubmeshTopology topology);

	//	// -(instancetype _Nullable)initWithMDLSubmesh:(MDLSubmesh * _Nonnull)submesh indexType:(MDLIndexBitDepth)indexType geometryType:(MDLGeometryType)geometryType;
	//	[Export ("initWithMDLSubmesh:indexType:geometryType:")]
	//	IntPtr Constructor (MDLSubmesh submesh, MDLIndexBitDepth indexType, MDLGeometryType geometryType);

	//	// @property (readonly, retain, nonatomic) id<MDLMeshBuffer> _Nonnull indexBuffer;
	//	[Export ("indexBuffer", ArgumentSemantic.Retain)]
	//	MDLMeshBuffer IndexBuffer { get; }

	//	// -(id<MDLMeshBuffer> _Nonnull)indexBufferAsIndexType:(MDLIndexBitDepth)indexType;
	//	[Export ("indexBufferAsIndexType:")]
	//	MDLMeshBuffer IndexBufferAsIndexType (MDLIndexBitDepth indexType);

	//	// @property (readonly, nonatomic) NSUInteger indexCount;
	//	[Export ("indexCount")]
	//	nuint IndexCount { get; }

	//	// @property (readonly, nonatomic) MDLIndexBitDepth indexType;
	//	[Export ("indexType")]
	//	MDLIndexBitDepth IndexType { get; }

	//	// @property (readonly, nonatomic) MDLGeometryType geometryType;
	//	[Export ("geometryType")]
	//	MDLGeometryType GeometryType { get; }

	//	// @property (retain, nonatomic) MDLMaterial * _Nullable material;
	//	[NullAllowed, Export ("material", ArgumentSemantic.Retain)]
	//	MDLMaterial Material { get; set; }

	//	// @property (retain, nonatomic) MDLSubmeshTopology * _Nullable topology;
	//	[NullAllowed, Export ("topology", ArgumentSemantic.Retain)]
	//	MDLSubmeshTopology Topology { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }
	//}

	//// @interface MDLVertexAttributeData : NSObject
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLVertexAttributeData
	//{
	//	// @property (retain, nonatomic) MDLMeshBufferMap * _Nonnull map;
	//	[Export ("map", ArgumentSemantic.Retain)]
	//	MDLMeshBufferMap Map { get; set; }

	//	// @property (nonatomic) void * _Nonnull dataStart;
	//	[Export ("dataStart", ArgumentSemantic.Assign)]
	//	unsafe void* DataStart { get; set; }

	//	// @property (nonatomic) NSUInteger stride;
	//	[Export ("stride")]
	//	nuint Stride { get; set; }

	//	// @property (nonatomic) MDLVertexFormat format;
	//	[Export ("format", ArgumentSemantic.Assign)]
	//	MDLVertexFormat Format { get; set; }

	//	// @property (nonatomic) NSUInteger bufferSize __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("bufferSize")]
	//	nuint BufferSize { get; set; }
	//}

	//// @interface MDLMesh : MDLObject
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLObject))]
	//interface MDLMesh
	//{
	//	// -(instancetype _Nonnull)initWithBufferAllocator:(id<MDLMeshBufferAllocator> _Nullable)bufferAllocator;
	//	[Export ("initWithBufferAllocator:")]
	//	IntPtr Constructor ([NullAllowed] MDLMeshBufferAllocator bufferAllocator);

	//	// -(instancetype _Nonnull)initWithVertexBuffer:(id<MDLMeshBuffer> _Nonnull)vertexBuffer vertexCount:(NSUInteger)vertexCount descriptor:(MDLVertexDescriptor * _Nonnull)descriptor submeshes:(NSArray<MDLSubmesh *> * _Nonnull)submeshes;
	//	[Export ("initWithVertexBuffer:vertexCount:descriptor:submeshes:")]
	//	IntPtr Constructor (MDLMeshBuffer vertexBuffer, nuint vertexCount, MDLVertexDescriptor descriptor, MDLSubmesh[] submeshes);

	//	// -(instancetype _Nonnull)initWithVertexBuffers:(NSArray<id<MDLMeshBuffer>> * _Nonnull)vertexBuffers vertexCount:(NSUInteger)vertexCount descriptor:(MDLVertexDescriptor * _Nonnull)descriptor submeshes:(NSArray<MDLSubmesh *> * _Nonnull)submeshes;
	//	[Export ("initWithVertexBuffers:vertexCount:descriptor:submeshes:")]
	//	IntPtr Constructor (MDLMeshBuffer[] vertexBuffers, nuint vertexCount, MDLVertexDescriptor descriptor, MDLSubmesh[] submeshes);

	//	// -(MDLVertexAttributeData * _Nullable)vertexAttributeDataForAttributeNamed:(NSString * _Nonnull)name;
	//	[Export ("vertexAttributeDataForAttributeNamed:")]
	//	[return: NullAllowed]
	//	MDLVertexAttributeData VertexAttributeDataForAttributeNamed (string name);

	//	// -(MDLVertexAttributeData * _Nullable)vertexAttributeDataForAttributeNamed:(NSString * _Nonnull)name asFormat:(MDLVertexFormat)format;
	//	[Export ("vertexAttributeDataForAttributeNamed:asFormat:")]
	//	[return: NullAllowed]
	//	MDLVertexAttributeData VertexAttributeDataForAttributeNamed (string name, MDLVertexFormat format);

	//	// @property (readonly, nonatomic) MDLAxisAlignedBoundingBox boundingBox;
	//	[Export ("boundingBox")]
	//	MDLAxisAlignedBoundingBox BoundingBox { get; }

	//	// @property (readwrite, copy, nonatomic) MDLVertexDescriptor * _Nonnull vertexDescriptor;
	//	[Export ("vertexDescriptor", ArgumentSemantic.Copy)]
	//	MDLVertexDescriptor VertexDescriptor { get; set; }

	//	// @property (readwrite, nonatomic) NSUInteger vertexCount;
	//	[Export ("vertexCount")]
	//	nuint VertexCount { get; set; }

	//	// @property (readwrite, retain, nonatomic) NSArray<id<MDLMeshBuffer>> * _Nonnull vertexBuffers;
	//	[Export ("vertexBuffers", ArgumentSemantic.Retain)]
	//	MDLMeshBuffer[] VertexBuffers { get; set; }

	//	// @property (copy, nonatomic) NSMutableArray<MDLSubmesh *> * _Nullable submeshes;
	//	[NullAllowed, Export ("submeshes", ArgumentSemantic.Copy)]
	//	NSMutableArray<MDLSubmesh> Submeshes { get; set; }

	//	// @property (readonly, retain, nonatomic) id<MDLMeshBufferAllocator> _Nonnull allocator;
	//	[Export ("allocator", ArgumentSemantic.Retain)]
	//	MDLMeshBufferAllocator Allocator { get; }
	//}

	//// @interface Modifiers (MDLMesh)
	//[Category]
	//[BaseType (typeof(MDLMesh))]
	//interface MDLMesh_Modifiers
	//{
	//	// -(void)addAttributeWithName:(NSString * _Nonnull)name format:(MDLVertexFormat)format;
	//	[Export ("addAttributeWithName:format:")]
	//	void AddAttributeWithName (string name, MDLVertexFormat format);

	//	// -(void)addAttributeWithName:(NSString * _Nonnull)name format:(MDLVertexFormat)format type:(NSString * _Nonnull)type data:(NSData * _Nonnull)data stride:(NSInteger)stride;
	//	[Export ("addAttributeWithName:format:type:data:stride:")]
	//	void AddAttributeWithName (string name, MDLVertexFormat format, string type, NSData data, nint stride);

	//	// -(void)addAttributeWithName:(NSString * _Nonnull)name format:(MDLVertexFormat)format type:(NSString * _Nonnull)type data:(NSData * _Nonnull)data stride:(NSInteger)stride time:(NSTimeInterval)time;
	//	[Export ("addAttributeWithName:format:type:data:stride:time:")]
	//	void AddAttributeWithName (string name, MDLVertexFormat format, string type, NSData data, nint stride, double time);

	//	// -(void)addNormalsWithAttributeNamed:(NSString * _Nullable)attributeName creaseThreshold:(float)creaseThreshold;
	//	[Export ("addNormalsWithAttributeNamed:creaseThreshold:")]
	//	void AddNormalsWithAttributeNamed ([NullAllowed] string attributeName, float creaseThreshold);

	//	// -(void)addTangentBasisForTextureCoordinateAttributeNamed:(NSString * _Nonnull)textureCoordinateAttributeName tangentAttributeNamed:(NSString * _Nonnull)tangentAttributeName bitangentAttributeNamed:(NSString * _Nullable)bitangentAttributeName;
	//	[Export ("addTangentBasisForTextureCoordinateAttributeNamed:tangentAttributeNamed:bitangentAttributeNamed:")]
	//	void AddTangentBasisForTextureCoordinateAttributeNamed (string textureCoordinateAttributeName, string tangentAttributeName, [NullAllowed] string bitangentAttributeName);

	//	// -(void)addTangentBasisForTextureCoordinateAttributeNamed:(NSString * _Nonnull)textureCoordinateAttributeName normalAttributeNamed:(NSString * _Nonnull)normalAttributeName tangentAttributeNamed:(NSString * _Nonnull)tangentAttributeName;
	//	[Export ("addTangentBasisForTextureCoordinateAttributeNamed:normalAttributeNamed:tangentAttributeNamed:")]
	//	void AddTangentBasisForTextureCoordinateAttributeNamed (string textureCoordinateAttributeName, string normalAttributeName, string tangentAttributeName);

	//	// -(void)addOrthTanBasisForTextureCoordinateAttributeNamed:(NSString * _Nonnull)textureCoordinateAttributeName normalAttributeNamed:(NSString * _Nonnull)normalAttributeName tangentAttributeNamed:(NSString * _Nonnull)tangentAttributeName __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("addOrthTanBasisForTextureCoordinateAttributeNamed:normalAttributeNamed:tangentAttributeNamed:")]
	//	void AddOrthTanBasisForTextureCoordinateAttributeNamed (string textureCoordinateAttributeName, string normalAttributeName, string tangentAttributeName);

	//	// -(void)addUnwrappedTextureCoordinatesForAttributeNamed:(NSString * _Nonnull)textureCoordinateAttributeName;
	//	[Export ("addUnwrappedTextureCoordinatesForAttributeNamed:")]
	//	void AddUnwrappedTextureCoordinatesForAttributeNamed (string textureCoordinateAttributeName);

	//	// -(void)flipTextureCoordinatesInAttributeNamed:(NSString * _Nonnull)textureCoordinateAttributeName __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("flipTextureCoordinatesInAttributeNamed:")]
	//	void FlipTextureCoordinatesInAttributeNamed (string textureCoordinateAttributeName);

	//	// -(void)makeVerticesUnique __attribute__((availability(ios, introduced=9.0, deprecated=11.0)));
	//	[Introduced (PlatformName.iOS, 9, 0)]
	//	[Deprecated (PlatformName.iOS, 11, 0)]
	//	[Export ("makeVerticesUnique")]
	//	void MakeVerticesUnique ();

	//	// -(BOOL)makeVerticesUniqueAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("makeVerticesUniqueAndReturnError:")]
	//	bool MakeVerticesUniqueAndReturnError ([NullAllowed] out NSError error);

	//	// -(void)replaceAttributeNamed:(NSString * _Nonnull)name withData:(MDLVertexAttributeData * _Nonnull)newData;
	//	[Export ("replaceAttributeNamed:withData:")]
	//	void ReplaceAttributeNamed (string name, MDLVertexAttributeData newData);

	//	// -(void)updateAttributeNamed:(NSString * _Nonnull)name withData:(MDLVertexAttributeData * _Nonnull)newData;
	//	[Export ("updateAttributeNamed:withData:")]
	//	void UpdateAttributeNamed (string name, MDLVertexAttributeData newData);

	//	// -(void)removeAttributeNamed:(NSString * _Nonnull)name;
	//	[Export ("removeAttributeNamed:")]
	//	void RemoveAttributeNamed (string name);
	//}

	//// @interface Generators (MDLMesh)
	//[Category]
	//[BaseType (typeof(MDLMesh))]
	//interface MDLMesh_Generators
	//{
	//	// -(instancetype _Nonnull)initBoxWithExtent:(vector_float3)extent segments:(vector_uint3)segments inwardNormals:(BOOL)inwardNormals geometryType:(MDLGeometryType)geometryType allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Export ("initBoxWithExtent:segments:inwardNormals:geometryType:allocator:")]
	//	IntPtr Constructor ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] extent, [unsupported ExtVector: unsigned int __attribute__((ext_vector_type(3)))] segments, bool inwardNormals, MDLGeometryType geometryType, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// -(instancetype _Nonnull)initSphereWithExtent:(vector_float3)extent segments:(vector_uint2)segments inwardNormals:(BOOL)inwardNormals geometryType:(MDLGeometryType)geometryType allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Export ("initSphereWithExtent:segments:inwardNormals:geometryType:allocator:")]
	//	IntPtr Constructor ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] extent, [unsupported ExtVector: unsigned int __attribute__((ext_vector_type(2)))] segments, bool inwardNormals, MDLGeometryType geometryType, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// -(instancetype _Nonnull)initHemisphereWithExtent:(vector_float3)extent segments:(vector_uint2)segments inwardNormals:(BOOL)inwardNormals cap:(BOOL)cap geometryType:(MDLGeometryType)geometryType allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Export ("initHemisphereWithExtent:segments:inwardNormals:cap:geometryType:allocator:")]
	//	IntPtr Constructor ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] extent, [unsupported ExtVector: unsigned int __attribute__((ext_vector_type(2)))] segments, bool inwardNormals, bool cap, MDLGeometryType geometryType, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// -(instancetype _Nonnull)initCylinderWithExtent:(vector_float3)extent segments:(vector_uint2)segments inwardNormals:(BOOL)inwardNormals topCap:(BOOL)topCap bottomCap:(BOOL)bottomCap geometryType:(MDLGeometryType)geometryType allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Export ("initCylinderWithExtent:segments:inwardNormals:topCap:bottomCap:geometryType:allocator:")]
	//	IntPtr Constructor ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] extent, [unsupported ExtVector: unsigned int __attribute__((ext_vector_type(2)))] segments, bool inwardNormals, bool topCap, bool bottomCap, MDLGeometryType geometryType, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// -(instancetype _Nonnull)initCapsuleWithExtent:(vector_float3)extent cylinderSegments:(vector_uint2)segments hemisphereSegments:(int)hemisphereSegments inwardNormals:(BOOL)inwardNormals geometryType:(MDLGeometryType)geometryType allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Export ("initCapsuleWithExtent:cylinderSegments:hemisphereSegments:inwardNormals:geometryType:allocator:")]
	//	IntPtr Constructor ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] extent, [unsupported ExtVector: unsigned int __attribute__((ext_vector_type(2)))] segments, int hemisphereSegments, bool inwardNormals, MDLGeometryType geometryType, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// -(instancetype _Nonnull)initConeWithExtent:(vector_float3)extent segments:(vector_uint2)segments inwardNormals:(BOOL)inwardNormals cap:(BOOL)cap geometryType:(MDLGeometryType)geometryType allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Export ("initConeWithExtent:segments:inwardNormals:cap:geometryType:allocator:")]
	//	IntPtr Constructor ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] extent, [unsupported ExtVector: unsigned int __attribute__((ext_vector_type(2)))] segments, bool inwardNormals, bool cap, MDLGeometryType geometryType, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// -(instancetype _Nonnull)initPlaneWithExtent:(vector_float3)extent segments:(vector_uint2)segments geometryType:(MDLGeometryType)geometryType allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Export ("initPlaneWithExtent:segments:geometryType:allocator:")]
	//	IntPtr Constructor ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] extent, [unsupported ExtVector: unsigned int __attribute__((ext_vector_type(2)))] segments, MDLGeometryType geometryType, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// -(instancetype _Nonnull)initIcosahedronWithExtent:(vector_float3)extent inwardNormals:(BOOL)inwardNormals geometryType:(MDLGeometryType)geometryType allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Export ("initIcosahedronWithExtent:inwardNormals:geometryType:allocator:")]
	//	IntPtr Constructor ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] extent, bool inwardNormals, MDLGeometryType geometryType, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// -(instancetype _Nonnull)initMeshBySubdividingMesh:(MDLMesh * _Nonnull)mesh submeshIndex:(int)submeshIndex subdivisionLevels:(unsigned int)subdivisionLevels allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Export ("initMeshBySubdividingMesh:submeshIndex:subdivisionLevels:allocator:")]
	//	IntPtr Constructor (MDLMesh mesh, int submeshIndex, uint subdivisionLevels, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// +(instancetype _Nonnull)newBoxWithDimensions:(vector_float3)dimensions segments:(vector_uint3)segments geometryType:(MDLGeometryType)geometryType inwardNormals:(BOOL)inwardNormals allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Static]
	//	[Export ("newBoxWithDimensions:segments:geometryType:inwardNormals:allocator:")]
	//	MDLMesh NewBoxWithDimensions ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] dimensions, [unsupported ExtVector: unsigned int __attribute__((ext_vector_type(3)))] segments, MDLGeometryType geometryType, bool inwardNormals, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// +(instancetype _Nonnull)newEllipsoidWithRadii:(vector_float3)radii radialSegments:(NSUInteger)radialSegments verticalSegments:(NSUInteger)verticalSegments geometryType:(MDLGeometryType)geometryType inwardNormals:(BOOL)inwardNormals hemisphere:(BOOL)hemisphere allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Static]
	//	[Export ("newEllipsoidWithRadii:radialSegments:verticalSegments:geometryType:inwardNormals:hemisphere:allocator:")]
	//	MDLMesh NewEllipsoidWithRadii ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] radii, nuint radialSegments, nuint verticalSegments, MDLGeometryType geometryType, bool inwardNormals, bool hemisphere, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// +(instancetype _Nonnull)newCylinderWithHeight:(float)height radii:(vector_float2)radii radialSegments:(NSUInteger)radialSegments verticalSegments:(NSUInteger)verticalSegments geometryType:(MDLGeometryType)geometryType inwardNormals:(BOOL)inwardNormals allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Static]
	//	[Export ("newCylinderWithHeight:radii:radialSegments:verticalSegments:geometryType:inwardNormals:allocator:")]
	//	MDLMesh NewCylinderWithHeight (float height, [unsupported ExtVector: float __attribute__((ext_vector_type(2)))] radii, nuint radialSegments, nuint verticalSegments, MDLGeometryType geometryType, bool inwardNormals, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// +(instancetype _Nonnull)newCapsuleWithHeight:(float)height radii:(vector_float2)radii radialSegments:(NSUInteger)radialSegments verticalSegments:(NSUInteger)verticalSegments hemisphereSegments:(NSUInteger)hemisphereSegments geometryType:(MDLGeometryType)geometryType inwardNormals:(BOOL)inwardNormals allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("newCapsuleWithHeight:radii:radialSegments:verticalSegments:hemisphereSegments:geometryType:inwardNormals:allocator:")]
	//	MDLMesh NewCapsuleWithHeight (float height, [unsupported ExtVector: float __attribute__((ext_vector_type(2)))] radii, nuint radialSegments, nuint verticalSegments, nuint hemisphereSegments, MDLGeometryType geometryType, bool inwardNormals, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// +(instancetype _Nonnull)newEllipticalConeWithHeight:(float)height radii:(vector_float2)radii radialSegments:(NSUInteger)radialSegments verticalSegments:(NSUInteger)verticalSegments geometryType:(MDLGeometryType)geometryType inwardNormals:(BOOL)inwardNormals allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Static]
	//	[Export ("newEllipticalConeWithHeight:radii:radialSegments:verticalSegments:geometryType:inwardNormals:allocator:")]
	//	MDLMesh NewEllipticalConeWithHeight (float height, [unsupported ExtVector: float __attribute__((ext_vector_type(2)))] radii, nuint radialSegments, nuint verticalSegments, MDLGeometryType geometryType, bool inwardNormals, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// +(instancetype _Nonnull)newPlaneWithDimensions:(vector_float2)dimensions segments:(vector_uint2)segments geometryType:(MDLGeometryType)geometryType allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Static]
	//	[Export ("newPlaneWithDimensions:segments:geometryType:allocator:")]
	//	MDLMesh NewPlaneWithDimensions ([unsupported ExtVector: float __attribute__((ext_vector_type(2)))] dimensions, [unsupported ExtVector: unsigned int __attribute__((ext_vector_type(2)))] segments, MDLGeometryType geometryType, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// +(instancetype _Nonnull)newIcosahedronWithRadius:(float)radius inwardNormals:(BOOL)inwardNormals geometryType:(MDLGeometryType)geometryType allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Static]
	//	[Export ("newIcosahedronWithRadius:inwardNormals:geometryType:allocator:")]
	//	MDLMesh NewIcosahedronWithRadius (float radius, bool inwardNormals, MDLGeometryType geometryType, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// +(instancetype _Nonnull)newIcosahedronWithRadius:(float)radius inwardNormals:(BOOL)inwardNormals allocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Static]
	//	[Export ("newIcosahedronWithRadius:inwardNormals:allocator:")]
	//	MDLMesh NewIcosahedronWithRadius (float radius, bool inwardNormals, [NullAllowed] MDLMeshBufferAllocator allocator);

	//	// +(instancetype _Nullable)newSubdividedMesh:(MDLMesh * _Nonnull)mesh submeshIndex:(NSUInteger)submeshIndex subdivisionLevels:(NSUInteger)subdivisionLevels;
	//	[Static]
	//	[Export ("newSubdividedMesh:submeshIndex:subdivisionLevels:")]
	//	[return: NullAllowed]
	//	MDLMesh NewSubdividedMesh (MDLMesh mesh, nuint submeshIndex, nuint subdivisionLevels);
	//}

	//// @interface MDLLightBaking (MDLMesh)
	//[Category]
	//[BaseType (typeof(MDLMesh))]
	//interface MDLMesh_MDLLightBaking
	//{
	//	// -(BOOL)generateAmbientOcclusionTextureWithSize:(vector_int2)textureSize raysPerSample:(NSInteger)raysPerSample attenuationFactor:(float)attenuationFactor objectsToConsider:(NSArray<MDLObject *> * _Nonnull)objectsToConsider vertexAttributeNamed:(NSString * _Nonnull)vertexAttributeName materialPropertyNamed:(NSString * _Nonnull)materialPropertyName;
	//	[Export ("generateAmbientOcclusionTextureWithSize:raysPerSample:attenuationFactor:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")]
	//	bool GenerateAmbientOcclusionTextureWithSize ([unsupported ExtVector: int __attribute__((ext_vector_type(2)))] textureSize, nint raysPerSample, float attenuationFactor, MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);

	//	// -(BOOL)generateAmbientOcclusionTextureWithQuality:(float)bakeQuality attenuationFactor:(float)attenuationFactor objectsToConsider:(NSArray<MDLObject *> * _Nonnull)objectsToConsider vertexAttributeNamed:(NSString * _Nonnull)vertexAttributeName materialPropertyNamed:(NSString * _Nonnull)materialPropertyName;
	//	[Export ("generateAmbientOcclusionTextureWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")]
	//	bool GenerateAmbientOcclusionTextureWithQuality (float bakeQuality, float attenuationFactor, MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);

	//	// -(BOOL)generateAmbientOcclusionVertexColorsWithRaysPerSample:(NSInteger)raysPerSample attenuationFactor:(float)attenuationFactor objectsToConsider:(NSArray<MDLObject *> * _Nonnull)objectsToConsider vertexAttributeNamed:(NSString * _Nonnull)vertexAttributeName;
	//	[Export ("generateAmbientOcclusionVertexColorsWithRaysPerSample:attenuationFactor:objectsToConsider:vertexAttributeNamed:")]
	//	bool GenerateAmbientOcclusionVertexColorsWithRaysPerSample (nint raysPerSample, float attenuationFactor, MDLObject[] objectsToConsider, string vertexAttributeName);

	//	// -(BOOL)generateAmbientOcclusionVertexColorsWithQuality:(float)bakeQuality attenuationFactor:(float)attenuationFactor objectsToConsider:(NSArray<MDLObject *> * _Nonnull)objectsToConsider vertexAttributeNamed:(NSString * _Nonnull)vertexAttributeName;
	//	[Export ("generateAmbientOcclusionVertexColorsWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:")]
	//	bool GenerateAmbientOcclusionVertexColorsWithQuality (float bakeQuality, float attenuationFactor, MDLObject[] objectsToConsider, string vertexAttributeName);

	//	// -(BOOL)generateLightMapTextureWithTextureSize:(vector_int2)textureSize lightsToConsider:(NSArray<MDLLight *> * _Nonnull)lightsToConsider objectsToConsider:(NSArray<MDLObject *> * _Nonnull)objectsToConsider vertexAttributeNamed:(NSString * _Nonnull)vertexAttributeName materialPropertyNamed:(NSString * _Nonnull)materialPropertyName;
	//	[Export ("generateLightMapTextureWithTextureSize:lightsToConsider:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")]
	//	bool GenerateLightMapTextureWithTextureSize ([unsupported ExtVector: int __attribute__((ext_vector_type(2)))] textureSize, MDLLight[] lightsToConsider, MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);

	//	// -(BOOL)generateLightMapTextureWithQuality:(float)bakeQuality lightsToConsider:(NSArray<MDLLight *> * _Nonnull)lightsToConsider objectsToConsider:(NSArray<MDLObject *> * _Nonnull)objectsToConsider vertexAttributeNamed:(NSString * _Nonnull)vertexAttributeName materialPropertyNamed:(NSString * _Nonnull)materialPropertyName;
	//	[Export ("generateLightMapTextureWithQuality:lightsToConsider:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")]
	//	bool GenerateLightMapTextureWithQuality (float bakeQuality, MDLLight[] lightsToConsider, MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);

	//	// -(BOOL)generateLightMapVertexColorsWithLightsToConsider:(NSArray<MDLLight *> * _Nonnull)lightsToConsider objectsToConsider:(NSArray<MDLObject *> * _Nonnull)objectsToConsider vertexAttributeNamed:(NSString * _Nonnull)vertexAttributeName;
	//	[Export ("generateLightMapVertexColorsWithLightsToConsider:objectsToConsider:vertexAttributeNamed:")]
	//	bool GenerateLightMapVertexColorsWithLightsToConsider (MDLLight[] lightsToConsider, MDLObject[] objectsToConsider, string vertexAttributeName);
	//}

	//// @interface MDLTexture : NSObject <MDLNamed>
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTexture : IMDLNamed
	//{
	//	// +(instancetype _Nullable)textureNamed:(NSString * _Nonnull)name;
	//	[Static]
	//	[Export ("textureNamed:")]
	//	[return: NullAllowed]
	//	MDLTexture TextureNamed (string name);

	//	// +(instancetype _Nullable)textureNamed:(NSString * _Nonnull)name bundle:(NSBundle * _Nullable)bundleOrNil;
	//	[Static]
	//	[Export ("textureNamed:bundle:")]
	//	[return: NullAllowed]
	//	MDLTexture TextureNamed (string name, [NullAllowed] NSBundle bundleOrNil);

	//	// +(instancetype _Nullable)textureNamed:(NSString * _Nonnull)name assetResolver:(id<MDLAssetResolver> _Nonnull)resolver __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
	//	[TV (12,0), Mac (10,14), iOS (12,0)]
	//	[Static]
	//	[Export ("textureNamed:assetResolver:")]
	//	[return: NullAllowed]
	//	MDLTexture TextureNamed (string name, MDLAssetResolver resolver);

	//	// +(instancetype _Nullable)textureCubeWithImagesNamed:(NSArray<NSString *> * _Nonnull)names;
	//	[Static]
	//	[Export ("textureCubeWithImagesNamed:")]
	//	[return: NullAllowed]
	//	MDLTexture TextureCubeWithImagesNamed (string[] names);

	//	// +(instancetype _Nullable)textureCubeWithImagesNamed:(NSArray<NSString *> * _Nonnull)names bundle:(NSBundle * _Nullable)bundleOrNil;
	//	[Static]
	//	[Export ("textureCubeWithImagesNamed:bundle:")]
	//	[return: NullAllowed]
	//	MDLTexture TextureCubeWithImagesNamed (string[] names, [NullAllowed] NSBundle bundleOrNil);

	//	// +(instancetype _Nonnull)irradianceTextureCubeWithTexture:(MDLTexture * _Nonnull)texture name:(NSString * _Nullable)name dimensions:(vector_int2)dimensions;
	//	[Static]
	//	[Export ("irradianceTextureCubeWithTexture:name:dimensions:")]
	//	MDLTexture IrradianceTextureCubeWithTexture (MDLTexture texture, [NullAllowed] string name, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] dimensions);

	//	// +(instancetype _Nonnull)irradianceTextureCubeWithTexture:(MDLTexture * _Nonnull)texture name:(NSString * _Nullable)name dimensions:(vector_int2)dimensions roughness:(float)roughness;
	//	[Static]
	//	[Export ("irradianceTextureCubeWithTexture:name:dimensions:roughness:")]
	//	MDLTexture IrradianceTextureCubeWithTexture (MDLTexture texture, [NullAllowed] string name, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] dimensions, float roughness);

	//	// -(instancetype _Nonnull)initWithData:(NSData * _Nullable)pixelData topLeftOrigin:(BOOL)topLeftOrigin name:(NSString * _Nullable)name dimensions:(vector_int2)dimensions rowStride:(NSInteger)rowStride channelCount:(NSUInteger)channelCount channelEncoding:(MDLTextureChannelEncoding)channelEncoding isCube:(BOOL)isCube __attribute__((objc_designated_initializer));
	//	[Export ("initWithData:topLeftOrigin:name:dimensions:rowStride:channelCount:channelEncoding:isCube:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSData pixelData, bool topLeftOrigin, [NullAllowed] string name, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] dimensions, nint rowStride, nuint channelCount, MDLTextureChannelEncoding channelEncoding, bool isCube);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)URL;
	//	[Export ("writeToURL:")]
	//	bool WriteToURL (NSUrl URL);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)URL level:(NSUInteger)level __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("writeToURL:level:")]
	//	bool WriteToURL (NSUrl URL, nuint level);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)nsurl type:(CFStringRef _Nonnull)type;
	//	[Export ("writeToURL:type:")]
	//	unsafe bool WriteToURL (NSUrl nsurl, CFStringRef* type);

	//	// -(BOOL)writeToURL:(NSURL * _Nonnull)nsurl type:(CFStringRef _Nonnull)type level:(NSUInteger)level __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("writeToURL:type:level:")]
	//	unsafe bool WriteToURL (NSUrl nsurl, CFStringRef* type, nuint level);

	//	// -(CGImageRef _Nullable)imageFromTexture;
	//	[NullAllowed, Export ("imageFromTexture")]
	//	[Verify (MethodToProperty)]
	//	unsafe CGImageRef* ImageFromTexture { get; }

	//	// -(CGImageRef _Nullable)imageFromTextureAtLevel:(NSUInteger)level __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("imageFromTextureAtLevel:")]
	//	[return: NullAllowed]
	//	unsafe CGImageRef* ImageFromTextureAtLevel (nuint level);

	//	// -(NSData * _Nullable)texelDataWithTopLeftOrigin;
	//	[NullAllowed, Export ("texelDataWithTopLeftOrigin")]
	//	[Verify (MethodToProperty)]
	//	NSData TexelDataWithTopLeftOrigin { get; }

	//	// -(NSData * _Nullable)texelDataWithBottomLeftOrigin;
	//	[NullAllowed, Export ("texelDataWithBottomLeftOrigin")]
	//	[Verify (MethodToProperty)]
	//	NSData TexelDataWithBottomLeftOrigin { get; }

	//	// -(NSData * _Nullable)texelDataWithTopLeftOriginAtMipLevel:(NSInteger)level create:(BOOL)create;
	//	[Export ("texelDataWithTopLeftOriginAtMipLevel:create:")]
	//	[return: NullAllowed]
	//	NSData TexelDataWithTopLeftOriginAtMipLevel (nint level, bool create);

	//	// -(NSData * _Nullable)texelDataWithBottomLeftOriginAtMipLevel:(NSInteger)level create:(BOOL)create;
	//	[Export ("texelDataWithBottomLeftOriginAtMipLevel:create:")]
	//	[return: NullAllowed]
	//	NSData TexelDataWithBottomLeftOriginAtMipLevel (nint level, bool create);

	//	// @property (readonly, nonatomic) vector_int2 dimensions;
	//	[Export ("dimensions")]
	//	[unsupported ExtVector: int __attribute__((ext_vector_type(2)))] Dimensions { get; }

	//	// @property (readonly, nonatomic) NSInteger rowStride;
	//	[Export ("rowStride")]
	//	nint RowStride { get; }

	//	// @property (readonly, nonatomic) NSUInteger channelCount;
	//	[Export ("channelCount")]
	//	nuint ChannelCount { get; }

	//	// @property (readonly, nonatomic) NSUInteger mipLevelCount;
	//	[Export ("mipLevelCount")]
	//	nuint MipLevelCount { get; }

	//	// @property (readonly, nonatomic) MDLTextureChannelEncoding channelEncoding;
	//	[Export ("channelEncoding")]
	//	MDLTextureChannelEncoding ChannelEncoding { get; }

	//	// @property (nonatomic) BOOL isCube;
	//	[Export ("isCube")]
	//	bool IsCube { get; set; }

	//	// @property (nonatomic) BOOL hasAlphaValues;
	//	[Export ("hasAlphaValues")]
	//	bool HasAlphaValues { get; set; }
	//}

	//// @interface MDLURLTexture : MDLTexture
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLTexture))]
	//interface MDLURLTexture
	//{
	//	// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL name:(NSString * _Nullable)name;
	//	[Export ("initWithURL:name:")]
	//	IntPtr Constructor (NSUrl URL, [NullAllowed] string name);

	//	// @property (copy, nonatomic) NSURL * _Nonnull URL;
	//	[Export ("URL", ArgumentSemantic.Copy)]
	//	NSUrl URL { get; set; }
	//}

	//// @interface MDLCheckerboardTexture : MDLTexture
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLTexture))]
	//interface MDLCheckerboardTexture
	//{
	//	// -(instancetype _Nonnull)initWithDivisions:(float)divisions name:(NSString * _Nullable)name dimensions:(vector_int2)dimensions channelCount:(int)channelCount channelEncoding:(MDLTextureChannelEncoding)channelEncoding color1:(CGColorRef _Nonnull)color1 color2:(CGColorRef _Nonnull)color2;
	//	[Export ("initWithDivisions:name:dimensions:channelCount:channelEncoding:color1:color2:")]
	//	unsafe IntPtr Constructor (float divisions, [NullAllowed] string name, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] dimensions, int channelCount, MDLTextureChannelEncoding channelEncoding, CGColorRef* color1, CGColorRef* color2);

	//	// @property (assign, nonatomic) float divisions;
	//	[Export ("divisions")]
	//	float Divisions { get; set; }

	//	// @property (nonatomic) CGColorRef _Nullable color1;
	//	[NullAllowed, Export ("color1", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* Color1 { get; set; }

	//	// @property (nonatomic) CGColorRef _Nullable color2;
	//	[NullAllowed, Export ("color2", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* Color2 { get; set; }
	//}

	//// @interface MDLSkyCubeTexture : MDLTexture
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLTexture))]
	//interface MDLSkyCubeTexture
	//{
	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nullable)name channelEncoding:(MDLTextureChannelEncoding)channelEncoding textureDimensions:(vector_int2)textureDimensions turbidity:(float)turbidity sunElevation:(float)sunElevation upperAtmosphereScattering:(float)upperAtmosphereScattering groundAlbedo:(float)groundAlbedo;
	//	[Export ("initWithName:channelEncoding:textureDimensions:turbidity:sunElevation:upperAtmosphereScattering:groundAlbedo:")]
	//	IntPtr Constructor ([NullAllowed] string name, MDLTextureChannelEncoding channelEncoding, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] textureDimensions, float turbidity, float sunElevation, float upperAtmosphereScattering, float groundAlbedo);

	//	// -(instancetype _Nonnull)initWithName:(NSString * _Nullable)name channelEncoding:(MDLTextureChannelEncoding)channelEncoding textureDimensions:(vector_int2)textureDimensions turbidity:(float)turbidity sunElevation:(float)sunElevation sunAzimuth:(float)sunAzimuth upperAtmosphereScattering:(float)upperAtmosphereScattering groundAlbedo:(float)groundAlbedo __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("initWithName:channelEncoding:textureDimensions:turbidity:sunElevation:sunAzimuth:upperAtmosphereScattering:groundAlbedo:")]
	//	IntPtr Constructor ([NullAllowed] string name, MDLTextureChannelEncoding channelEncoding, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] textureDimensions, float turbidity, float sunElevation, float sunAzimuth, float upperAtmosphereScattering, float groundAlbedo);

	//	// -(void)updateTexture;
	//	[Export ("updateTexture")]
	//	void UpdateTexture ();

	//	// @property (assign, nonatomic) float turbidity;
	//	[Export ("turbidity")]
	//	float Turbidity { get; set; }

	//	// @property (assign, nonatomic) float sunElevation;
	//	[Export ("sunElevation")]
	//	float SunElevation { get; set; }

	//	// @property (assign, nonatomic) float sunAzimuth __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11, 0), Mac (10, 13), iOS (11, 0)]
	//	[Export ("sunAzimuth")]
	//	float SunAzimuth { get; set; }

	//	// @property (assign, nonatomic) float upperAtmosphereScattering;
	//	[Export ("upperAtmosphereScattering")]
	//	float UpperAtmosphereScattering { get; set; }

	//	// @property (assign, nonatomic) float groundAlbedo;
	//	[Export ("groundAlbedo")]
	//	float GroundAlbedo { get; set; }

	//	// @property (assign, nonatomic) float horizonElevation;
	//	[Export ("horizonElevation")]
	//	float HorizonElevation { get; set; }

	//	// @property (nonatomic) CGColorRef _Nullable groundColor;
	//	[NullAllowed, Export ("groundColor", ArgumentSemantic.Assign)]
	//	unsafe CGColorRef* GroundColor { get; set; }

	//	// @property (assign, nonatomic) float gamma;
	//	[Export ("gamma")]
	//	float Gamma { get; set; }

	//	// @property (assign, nonatomic) float exposure;
	//	[Export ("exposure")]
	//	float Exposure { get; set; }

	//	// @property (assign, nonatomic) float brightness;
	//	[Export ("brightness")]
	//	float Brightness { get; set; }

	//	// @property (assign, nonatomic) float contrast;
	//	[Export ("contrast")]
	//	float Contrast { get; set; }

	//	// @property (assign, nonatomic) float saturation;
	//	[Export ("saturation")]
	//	float Saturation { get; set; }

	//	// @property (assign, nonatomic) vector_float2 highDynamicRangeCompression;
	//	[Export ("highDynamicRangeCompression", ArgumentSemantic.Assign)]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(2)))] HighDynamicRangeCompression { get; set; }
	//}

	//// @interface MDLColorSwatchTexture : MDLTexture
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLTexture))]
	//interface MDLColorSwatchTexture
	//{
	//	// -(instancetype _Nonnull)initWithColorTemperatureGradientFrom:(float)colorTemperature1 toColorTemperature:(float)colorTemperature2 name:(NSString * _Nullable)name textureDimensions:(vector_int2)textureDimensions;
	//	[Export ("initWithColorTemperatureGradientFrom:toColorTemperature:name:textureDimensions:")]
	//	IntPtr Constructor (float colorTemperature1, float colorTemperature2, [NullAllowed] string name, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] textureDimensions);

	//	// -(instancetype _Nonnull)initWithColorGradientFrom:(CGColorRef _Nonnull)color1 toColor:(CGColorRef _Nonnull)color2 name:(NSString * _Nullable)name textureDimensions:(vector_int2)textureDimensions;
	//	[Export ("initWithColorGradientFrom:toColor:name:textureDimensions:")]
	//	unsafe IntPtr Constructor (CGColorRef* color1, CGColorRef* color2, [NullAllowed] string name, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] textureDimensions);
	//}

	//// @interface MDLNoiseTexture : MDLTexture
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLTexture))]
	//interface MDLNoiseTexture
	//{
	//	// -(instancetype _Nonnull)initVectorNoiseWithSmoothness:(float)smoothness name:(NSString * _Nullable)name textureDimensions:(vector_int2)textureDimensions channelEncoding:(MDLTextureChannelEncoding)channelEncoding;
	//	[Export ("initVectorNoiseWithSmoothness:name:textureDimensions:channelEncoding:")]
	//	IntPtr Constructor (float smoothness, [NullAllowed] string name, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] textureDimensions, MDLTextureChannelEncoding channelEncoding);

	//	// -(instancetype _Nonnull)initScalarNoiseWithSmoothness:(float)smoothness name:(NSString * _Nullable)name textureDimensions:(vector_int2)textureDimensions channelCount:(int)channelCount channelEncoding:(MDLTextureChannelEncoding)channelEncoding grayscale:(BOOL)grayscale;
	//	[Export ("initScalarNoiseWithSmoothness:name:textureDimensions:channelCount:channelEncoding:grayscale:")]
	//	IntPtr Constructor (float smoothness, [NullAllowed] string name, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] textureDimensions, int channelCount, MDLTextureChannelEncoding channelEncoding, bool grayscale);

	//	// -(instancetype _Nonnull)initCellularNoiseWithFrequency:(float)frequency name:(NSString * _Nullable)name textureDimensions:(vector_int2)textureDimensions channelEncoding:(MDLTextureChannelEncoding)channelEncoding __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
	//	[TV (11,0), Mac (10,13), iOS (11,0)]
	//	[Export ("initCellularNoiseWithFrequency:name:textureDimensions:channelEncoding:")]
	//	IntPtr Constructor (float frequency, [NullAllowed] string name, [unsupported ExtVector: int __attribute__((ext_vector_type(2)))] textureDimensions, MDLTextureChannelEncoding channelEncoding);
	//}

	//// @interface MDLNormalMapTexture : MDLTexture
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLTexture))]
	//interface MDLNormalMapTexture
	//{
	//	// -(instancetype _Nonnull)initByGeneratingNormalMapWithTexture:(MDLTexture * _Nonnull)sourceTexture name:(NSString * _Nullable)name smoothness:(float)smoothness contrast:(float)contrast;
	//	[Export ("initByGeneratingNormalMapWithTexture:name:smoothness:contrast:")]
	//	IntPtr Constructor (MDLTexture sourceTexture, [NullAllowed] string name, float smoothness, float contrast);
	//}

	//// @protocol MDLTransformOp
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[Protocol, Model]
	//interface MDLTransformOp
	//{
	//	// @required @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Abstract]
	//	[Export ("name")]
	//	string Name { get; }

	//	// @required -(matrix_float4x4)float4x4AtTime:(NSTimeInterval)time;
	//	[Abstract]
	//	[Export ("float4x4AtTime:")]
	//	matrix_float4x4 Float4x4AtTime (double time);

	//	// @required -(matrix_double4x4)double4x4AtTime:(NSTimeInterval)time;
	//	[Abstract]
	//	[Export ("double4x4AtTime:")]
	//	matrix_double4x4 Double4x4AtTime (double time);

	//	// @required -(_Bool)IsInverseOp;
	//	[Abstract]
	//	[Export ("IsInverseOp")]
	//	[Verify (MethodToProperty)]
	//	bool IsInverseOp { get; }
	//}

	//// @interface MDLTransformRotateXOp : NSObject <MDLTransformOp>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTransformRotateXOp : IMDLTransformOp
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) MDLAnimatedScalar * _Nonnull animatedValue;
	//	[Export ("animatedValue")]
	//	MDLAnimatedScalar AnimatedValue { get; }
	//}

	//// @interface MDLTransformRotateYOp : NSObject <MDLTransformOp>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTransformRotateYOp : IMDLTransformOp
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) MDLAnimatedScalar * _Nonnull animatedValue;
	//	[Export ("animatedValue")]
	//	MDLAnimatedScalar AnimatedValue { get; }
	//}

	//// @interface MDLTransformRotateZOp : NSObject <MDLTransformOp>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTransformRotateZOp : IMDLTransformOp
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) MDLAnimatedScalar * _Nonnull animatedValue;
	//	[Export ("animatedValue")]
	//	MDLAnimatedScalar AnimatedValue { get; }
	//}

	//// @interface MDLTransformRotateOp : NSObject <MDLTransformOp>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTransformRotateOp : IMDLTransformOp
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) MDLAnimatedVector3 * _Nonnull animatedValue;
	//	[Export ("animatedValue")]
	//	MDLAnimatedVector3 AnimatedValue { get; }
	//}

	//// @interface MDLTransformTranslateOp : NSObject <MDLTransformOp>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTransformTranslateOp : IMDLTransformOp
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) MDLAnimatedVector3 * _Nonnull animatedValue;
	//	[Export ("animatedValue")]
	//	MDLAnimatedVector3 AnimatedValue { get; }
	//}

	//// @interface MDLTransformScaleOp : NSObject <MDLTransformOp>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTransformScaleOp : IMDLTransformOp
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) MDLAnimatedVector3 * _Nonnull animatedValue;
	//	[Export ("animatedValue")]
	//	MDLAnimatedVector3 AnimatedValue { get; }
	//}

	//// @interface MDLTransformMatrixOp : NSObject <MDLTransformOp>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTransformMatrixOp : IMDLTransformOp
	//{
	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }

	//	// @property (readonly, nonatomic) MDLAnimatedMatrix4x4 * _Nonnull animatedValue;
	//	[Export ("animatedValue")]
	//	MDLAnimatedMatrix4x4 AnimatedValue { get; }
	//}

	//// @interface MDLTransformStack : NSObject <NSCopying, MDLTransformComponent>
	//[TV (11,0), Mac (10,13), iOS (11,0)]
	//[BaseType (typeof(NSObject))]
	//interface MDLTransformStack : INSCopying, IMDLTransformComponent
	//{
	//	// -(MDLTransformTranslateOp * _Nonnull)addTranslateOp:(NSString * _Nonnull)animatedValueName inverse:(_Bool)inverse;
	//	[Export ("addTranslateOp:inverse:")]
	//	MDLTransformTranslateOp AddTranslateOp (string animatedValueName, bool inverse);

	//	// -(MDLTransformRotateXOp * _Nonnull)addRotateXOp:(NSString * _Nonnull)animatedValueName inverse:(_Bool)inverse;
	//	[Export ("addRotateXOp:inverse:")]
	//	MDLTransformRotateXOp AddRotateXOp (string animatedValueName, bool inverse);

	//	// -(MDLTransformRotateYOp * _Nonnull)addRotateYOp:(NSString * _Nonnull)animatedValueName inverse:(_Bool)inverse;
	//	[Export ("addRotateYOp:inverse:")]
	//	MDLTransformRotateYOp AddRotateYOp (string animatedValueName, bool inverse);

	//	// -(MDLTransformRotateZOp * _Nonnull)addRotateZOp:(NSString * _Nonnull)animatedValueName inverse:(_Bool)inverse;
	//	[Export ("addRotateZOp:inverse:")]
	//	MDLTransformRotateZOp AddRotateZOp (string animatedValueName, bool inverse);

	//	// -(MDLTransformRotateOp * _Nonnull)addRotateOp:(NSString * _Nonnull)animatedValueName order:(MDLTransformOpRotationOrder)order inverse:(_Bool)inverse;
	//	[Export ("addRotateOp:order:inverse:")]
	//	MDLTransformRotateOp AddRotateOp (string animatedValueName, MDLTransformOpRotationOrder order, bool inverse);

	//	// -(MDLTransformScaleOp * _Nonnull)addScaleOp:(NSString * _Nonnull)animatedValueName inverse:(_Bool)inverse;
	//	[Export ("addScaleOp:inverse:")]
	//	MDLTransformScaleOp AddScaleOp (string animatedValueName, bool inverse);

	//	// -(MDLTransformMatrixOp * _Nonnull)addMatrixOp:(NSString * _Nonnull)animatedValueName inverse:(_Bool)inverse;
	//	[Export ("addMatrixOp:inverse:")]
	//	MDLTransformMatrixOp AddMatrixOp (string animatedValueName, bool inverse);

	//	// -(MDLAnimatedValue * _Nonnull)animatedValueWithName:(NSString * _Nonnull)name;
	//	[Export ("animatedValueWithName:")]
	//	MDLAnimatedValue AnimatedValueWithName (string name);

	//	// -(matrix_float4x4)float4x4AtTime:(NSTimeInterval)time;
	//	[Export ("float4x4AtTime:")]
	//	matrix_float4x4 Float4x4AtTime (double time);

	//	// -(matrix_double4x4)double4x4AtTime:(NSTimeInterval)time;
	//	[Export ("double4x4AtTime:")]
	//	matrix_double4x4 Double4x4AtTime (double time);

	//	// -(NSUInteger)count;
	//	[Export ("count")]
	//	[Verify (MethodToProperty)]
	//	nuint Count { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSNumber *> * _Nonnull keyTimes;
	//	[Export ("keyTimes", ArgumentSemantic.Copy)]
	//	NSNumber[] KeyTimes { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<id<MDLTransformOp>> * _Nonnull transformOps;
	//	[Export ("transformOps", ArgumentSemantic.Copy)]
	//	MDLTransformOp[] TransformOps { get; }
	//}

	//// @interface MDLVoxelArray : MDLObject
	//[TV (9,0), Mac (10,11), iOS (9,0)]
	//[BaseType (typeof(MDLObject))]
	//interface MDLVoxelArray
	//{
	//	// -(instancetype _Nonnull)initWithAsset:(MDLAsset * _Nonnull)asset divisions:(int)divisions patchRadius:(float)patchRadius;
	//	[Export ("initWithAsset:divisions:patchRadius:")]
	//	IntPtr Constructor (MDLAsset asset, int divisions, float patchRadius);

	//	// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)voxelData boundingBox:(MDLAxisAlignedBoundingBox)boundingBox voxelExtent:(float)voxelExtent;
	//	[Export ("initWithData:boundingBox:voxelExtent:")]
	//	IntPtr Constructor (NSData voxelData, MDLAxisAlignedBoundingBox boundingBox, float voxelExtent);

	//	// -(instancetype _Nonnull)initWithAsset:(MDLAsset * _Nonnull)asset divisions:(int)divisions interiorShells:(int)interiorShells exteriorShells:(int)exteriorShells patchRadius:(float)patchRadius __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Export ("initWithAsset:divisions:interiorShells:exteriorShells:patchRadius:")]
	//	IntPtr Constructor (MDLAsset asset, int divisions, int interiorShells, int exteriorShells, float patchRadius);

	//	// -(instancetype _Nonnull)initWithAsset:(MDLAsset * _Nonnull)asset divisions:(int)divisions interiorNBWidth:(float)interiorNBWidth exteriorNBWidth:(float)exteriorNBWidth patchRadius:(float)patchRadius __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Export ("initWithAsset:divisions:interiorNBWidth:exteriorNBWidth:patchRadius:")]
	//	IntPtr Constructor (MDLAsset asset, int divisions, float interiorNBWidth, float exteriorNBWidth, float patchRadius);

	//	// @property (readonly, nonatomic) NSUInteger count;
	//	[Export ("count")]
	//	nuint Count { get; }

	//	// @property (readonly, nonatomic) MDLVoxelIndexExtent voxelIndexExtent;
	//	[Export ("voxelIndexExtent")]
	//	MDLVoxelIndexExtent VoxelIndexExtent { get; }

	//	// -(BOOL)voxelExistsAtIndex:(MDLVoxelIndex)index allowAnyX:(BOOL)allowAnyX allowAnyY:(BOOL)allowAnyY allowAnyZ:(BOOL)allowAnyZ allowAnyShell:(BOOL)allowAnyShell;
	//	[Export ("voxelExistsAtIndex:allowAnyX:allowAnyY:allowAnyZ:allowAnyShell:")]
	//	bool VoxelExistsAtIndex ([unsupported ExtVector: int __attribute__((ext_vector_type(4)))] index, bool allowAnyX, bool allowAnyY, bool allowAnyZ, bool allowAnyShell);

	//	// -(NSData * _Nullable)voxelsWithinExtent:(MDLVoxelIndexExtent)extent;
	//	[Export ("voxelsWithinExtent:")]
	//	[return: NullAllowed]
	//	NSData VoxelsWithinExtent (MDLVoxelIndexExtent extent);

	//	// -(NSData * _Nullable)voxelIndices;
	//	[NullAllowed, Export ("voxelIndices")]
	//	[Verify (MethodToProperty)]
	//	NSData VoxelIndices { get; }

	//	// -(void)setVoxelAtIndex:(MDLVoxelIndex)index;
	//	[Export ("setVoxelAtIndex:")]
	//	void SetVoxelAtIndex ([unsupported ExtVector: int __attribute__((ext_vector_type(4)))] index);

	//	// -(void)setVoxelsForMesh:(MDLMesh * _Nonnull)mesh divisions:(int)divisions patchRadius:(float)patchRadius;
	//	[Export ("setVoxelsForMesh:divisions:patchRadius:")]
	//	void SetVoxelsForMesh (MDLMesh mesh, int divisions, float patchRadius);

	//	// -(void)setVoxelsForMesh:(MDLMesh * _Nonnull)mesh divisions:(int)divisions interiorShells:(int)interiorShells exteriorShells:(int)exteriorShells patchRadius:(float)patchRadius __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Export ("setVoxelsForMesh:divisions:interiorShells:exteriorShells:patchRadius:")]
	//	void SetVoxelsForMesh (MDLMesh mesh, int divisions, int interiorShells, int exteriorShells, float patchRadius);

	//	// -(void)setVoxelsForMesh:(MDLMesh * _Nonnull)mesh divisions:(int)divisions interiorNBWidth:(float)interiorNBWidth exteriorNBWidth:(float)exteriorNBWidth patchRadius:(float)patchRadius __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[Export ("setVoxelsForMesh:divisions:interiorNBWidth:exteriorNBWidth:patchRadius:")]
	//	void SetVoxelsForMesh (MDLMesh mesh, int divisions, float interiorNBWidth, float exteriorNBWidth, float patchRadius);

	//	// -(void)unionWithVoxels:(MDLVoxelArray * _Nonnull)voxels;
	//	[Export ("unionWithVoxels:")]
	//	void UnionWithVoxels (MDLVoxelArray voxels);

	//	// -(void)intersectWithVoxels:(MDLVoxelArray * _Nonnull)voxels;
	//	[Export ("intersectWithVoxels:")]
	//	void IntersectWithVoxels (MDLVoxelArray voxels);

	//	// -(void)differenceWithVoxels:(MDLVoxelArray * _Nonnull)voxels;
	//	[Export ("differenceWithVoxels:")]
	//	void DifferenceWithVoxels (MDLVoxelArray voxels);

	//	// @property (readonly, nonatomic) MDLAxisAlignedBoundingBox boundingBox;
	//	[Export ("boundingBox")]
	//	MDLAxisAlignedBoundingBox BoundingBox { get; }

	//	// -(MDLVoxelIndex)indexOfSpatialLocation:(vector_float3)location;
	//	[Export ("indexOfSpatialLocation:")]
	//	[unsupported ExtVector: int __attribute__((ext_vector_type(4)))] IndexOfSpatialLocation ([unsupported ExtVector: float __attribute__((ext_vector_type(3)))] location);

	//	// -(vector_float3)spatialLocationOfIndex:(MDLVoxelIndex)index;
	//	[Export ("spatialLocationOfIndex:")]
	//	[unsupported ExtVector: float __attribute__((ext_vector_type(3)))] SpatialLocationOfIndex ([unsupported ExtVector: int __attribute__((ext_vector_type(4)))] index);

	//	// -(MDLAxisAlignedBoundingBox)voxelBoundingBoxAtIndex:(MDLVoxelIndex)index;
	//	[Export ("voxelBoundingBoxAtIndex:")]
	//	MDLAxisAlignedBoundingBox VoxelBoundingBoxAtIndex ([unsupported ExtVector: int __attribute__((ext_vector_type(4)))] index);

	//	// -(void)convertToSignedShellField;
	//	[Export ("convertToSignedShellField")]
	//	void ConvertToSignedShellField ();

	//	// @property (readonly, nonatomic) BOOL isValidSignedShellField;
	//	[Export ("isValidSignedShellField")]
	//	bool IsValidSignedShellField { get; }

	//	// @property (nonatomic) float shellFieldInteriorThickness;
	//	[Export ("shellFieldInteriorThickness")]
	//	float ShellFieldInteriorThickness { get; set; }

	//	// @property (nonatomic) float shellFieldExteriorThickness;
	//	[Export ("shellFieldExteriorThickness")]
	//	float ShellFieldExteriorThickness { get; set; }

	//	// -(MDLMesh * _Nullable)coarseMesh;
	//	[NullAllowed, Export ("coarseMesh")]
	//	[Verify (MethodToProperty)]
	//	MDLMesh CoarseMesh { get; }

	//	// -(MDLMesh * _Nullable)coarseMeshUsingAllocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Export ("coarseMeshUsingAllocator:")]
	//	[return: NullAllowed]
	//	MDLMesh CoarseMeshUsingAllocator ([NullAllowed] MDLMeshBufferAllocator allocator);

	//	// -(MDLMesh * _Nullable)meshUsingAllocator:(id<MDLMeshBufferAllocator> _Nullable)allocator;
	//	[Export ("meshUsingAllocator:")]
	//	[return: NullAllowed]
	//	MDLMesh MeshUsingAllocator ([NullAllowed] MDLMeshBufferAllocator allocator);
	//}

	//// @interface GLKView : UIView <NSCoding>
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[NoMac]
	//[BaseType (typeof(UIView))]
	//interface GLKView : INSCoding
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame context:(EAGLContext * _Nonnull)context;
	//	[Export ("initWithFrame:context:")]
	//	IntPtr Constructor (CGRect frame, EAGLContext context);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	GLKViewDelegate Delegate { get; set; }

	//	// @property (assign, nonatomic) id<GLKViewDelegate> _Nullable delegate __attribute__((iboutlet));
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (retain, nonatomic) EAGLContext * _Nonnull context;
	//	[Export ("context", ArgumentSemantic.Retain)]
	//	EAGLContext Context { get; set; }

	//	// @property (readonly, nonatomic) NSInteger drawableWidth;
	//	[Export ("drawableWidth")]
	//	nint DrawableWidth { get; }

	//	// @property (readonly, nonatomic) NSInteger drawableHeight;
	//	[Export ("drawableHeight")]
	//	nint DrawableHeight { get; }

	//	// @property (nonatomic) GLKViewDrawableColorFormat drawableColorFormat;
	//	[Export ("drawableColorFormat", ArgumentSemantic.Assign)]
	//	GLKViewDrawableColorFormat DrawableColorFormat { get; set; }

	//	// @property (nonatomic) GLKViewDrawableDepthFormat drawableDepthFormat;
	//	[Export ("drawableDepthFormat", ArgumentSemantic.Assign)]
	//	GLKViewDrawableDepthFormat DrawableDepthFormat { get; set; }

	//	// @property (nonatomic) GLKViewDrawableStencilFormat drawableStencilFormat;
	//	[Export ("drawableStencilFormat", ArgumentSemantic.Assign)]
	//	GLKViewDrawableStencilFormat DrawableStencilFormat { get; set; }

	//	// @property (nonatomic) GLKViewDrawableMultisample drawableMultisample;
	//	[Export ("drawableMultisample", ArgumentSemantic.Assign)]
	//	GLKViewDrawableMultisample DrawableMultisample { get; set; }

	//	// -(void)bindDrawable;
	//	[Export ("bindDrawable")]
	//	void BindDrawable ();

	//	// -(void)deleteDrawable;
	//	[Export ("deleteDrawable")]
	//	void DeleteDrawable ();

	//	// @property (readonly, strong) UIImage * _Nonnull snapshot;
	//	[Export ("snapshot", ArgumentSemantic.Strong)]
	//	UIImage Snapshot { get; }

	//	// @property (nonatomic) BOOL enableSetNeedsDisplay;
	//	[Export ("enableSetNeedsDisplay")]
	//	bool EnableSetNeedsDisplay { get; set; }

	//	// -(void)display;
	//	[Export ("display")]
	//	void Display ();
	//}

	//// @protocol GLKViewDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface GLKViewDelegate
	//{
	//	// @required -(void)glkView:(GLKView * _Nonnull)view drawInRect:(CGRect)rect;
	//	[Abstract]
	//	[Export ("glkView:drawInRect:")]
	//	void DrawInRect (GLKView view, CGRect rect);
	//}

	//// @interface GLKViewController : UIViewController <NSCoding, GLKViewDelegate>
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[NoMac]
	//[BaseType (typeof(UIViewController))]
	//interface GLKViewController : INSCoding, IGLKViewDelegate
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	GLKViewControllerDelegate Delegate { get; set; }

	//	// @property (assign, nonatomic) id<GLKViewControllerDelegate> _Nullable delegate __attribute__((iboutlet));
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic) NSInteger preferredFramesPerSecond;
	//	[Export ("preferredFramesPerSecond")]
	//	nint PreferredFramesPerSecond { get; set; }

	//	// @property (readonly, nonatomic) NSInteger framesPerSecond;
	//	[Export ("framesPerSecond")]
	//	nint FramesPerSecond { get; }

	//	// @property (getter = isPaused, nonatomic) BOOL paused;
	//	[Export ("paused")]
	//	bool Paused { [Bind ("isPaused")] get; set; }

	//	// @property (readonly, nonatomic) NSInteger framesDisplayed;
	//	[Export ("framesDisplayed")]
	//	nint FramesDisplayed { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval timeSinceFirstResume;
	//	[Export ("timeSinceFirstResume")]
	//	double TimeSinceFirstResume { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval timeSinceLastResume;
	//	[Export ("timeSinceLastResume")]
	//	double TimeSinceLastResume { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval timeSinceLastUpdate;
	//	[Export ("timeSinceLastUpdate")]
	//	double TimeSinceLastUpdate { get; }

	//	// @property (readonly, nonatomic) NSTimeInterval timeSinceLastDraw;
	//	[Export ("timeSinceLastDraw")]
	//	double TimeSinceLastDraw { get; }

	//	// @property (nonatomic) BOOL pauseOnWillResignActive;
	//	[Export ("pauseOnWillResignActive")]
	//	bool PauseOnWillResignActive { get; set; }

	//	// @property (nonatomic) BOOL resumeOnDidBecomeActive;
	//	[Export ("resumeOnDidBecomeActive")]
	//	bool ResumeOnDidBecomeActive { get; set; }
	//}

	//// @protocol GLKViewControllerDelegate <NSObject>
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface GLKViewControllerDelegate
	//{
	//	// @required -(void)glkViewControllerUpdate:(GLKViewController * _Nonnull)controller;
	//	[Abstract]
	//	[Export ("glkViewControllerUpdate:")]
	//	void GlkViewControllerUpdate (GLKViewController controller);

	//	// @optional -(void)glkViewController:(GLKViewController * _Nonnull)controller willPause:(BOOL)pause;
	//	[Export ("glkViewController:willPause:")]
	//	void GlkViewController (GLKViewController controller, bool pause);
	//}

	//// @interface GLKMeshBufferAllocator : NSObject <MDLMeshBufferAllocator>
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(NSObject))]
	//interface GLKMeshBufferAllocator : IMDLMeshBufferAllocator
	//{
	//}

	//// @interface GLKMeshBuffer : NSObject <MDLMeshBuffer>
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(NSObject))]
	//interface GLKMeshBuffer : IMDLMeshBuffer
	//{
	//	// @property (readonly, nonatomic) NSUInteger length;
	//	[Export ("length")]
	//	nuint Length { get; }

	//	// @property (readonly, nonatomic) GLKMeshBufferAllocator * _Nonnull allocator;
	//	[Export ("allocator")]
	//	GLKMeshBufferAllocator Allocator { get; }

	//	// @property (readonly, nonatomic) GLuint glBufferName;
	//	[Export ("glBufferName")]
	//	uint GlBufferName { get; }

	//	// @property (readonly, nonatomic) NSUInteger offset;
	//	[Export ("offset")]
	//	nuint Offset { get; }

	//	// @property (readonly, nonatomic) id<MDLMeshBufferZone> _Nullable zone;
	//	[NullAllowed, Export ("zone")]
	//	MDLMeshBufferZone Zone { get; }

	//	// @property (readonly, nonatomic) MDLMeshBufferType type;
	//	[Export ("type")]
	//	MDLMeshBufferType Type { get; }
	//}

	//// @interface GLKSubmesh : NSObject
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface GLKSubmesh
	//{
	//	// @property (readonly, nonatomic) GLenum type;
	//	[Export ("type")]
	//	uint Type { get; }

	//	// @property (readonly, nonatomic) GLenum mode;
	//	[Export ("mode")]
	//	uint Mode { get; }

	//	// @property (readonly, nonatomic) GLsizei elementCount;
	//	[Export ("elementCount")]
	//	int ElementCount { get; }

	//	// @property (readonly, nonatomic) GLKMeshBuffer * _Nonnull elementBuffer;
	//	[Export ("elementBuffer")]
	//	GLKMeshBuffer ElementBuffer { get; }

	//	// @property (readonly, nonatomic, weak) GLKMesh * _Nullable mesh;
	//	[NullAllowed, Export ("mesh", ArgumentSemantic.Weak)]
	//	GLKMesh Mesh { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }
	//}

	//// @interface GLKMesh : NSObject
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface GLKMesh
	//{
	//	// -(instancetype _Nullable)initWithMesh:(MDLMesh * _Nonnull)mesh error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("initWithMesh:error:")]
	//	IntPtr Constructor (MDLMesh mesh, [NullAllowed] out NSError error);

	//	// +(NSArray<GLKMesh *> * _Nullable)newMeshesFromAsset:(MDLAsset * _Nonnull)asset sourceMeshes:(NSArray<MDLMesh *> * _Nullable * _Nullable)sourceMeshes error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("newMeshesFromAsset:sourceMeshes:error:")]
	//	[return: NullAllowed]
	//	GLKMesh[] NewMeshesFromAsset (MDLAsset asset, [NullAllowed] out MDLMesh[] sourceMeshes, [NullAllowed] out NSError error);

	//	// @property (readonly, nonatomic) NSUInteger vertexCount;
	//	[Export ("vertexCount")]
	//	nuint VertexCount { get; }

	//	// @property (readonly, nonatomic) NSArray<GLKMeshBuffer *> * _Nonnull vertexBuffers;
	//	[Export ("vertexBuffers")]
	//	GLKMeshBuffer[] VertexBuffers { get; }

	//	// @property (readonly, nonatomic) MDLVertexDescriptor * _Nonnull vertexDescriptor;
	//	[Export ("vertexDescriptor")]
	//	MDLVertexDescriptor VertexDescriptor { get; }

	//	// @property (readonly, nonatomic) NSArray<GLKSubmesh *> * _Nonnull submeshes;
	//	[Export ("submeshes")]
	//	GLKSubmesh[] Submeshes { get; }

	//	// @property (readonly, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; }
	//}

	//// @protocol GLKNamedEffect
	//[Protocol, Model]
	//interface GLKNamedEffect
	//{
	//	// @required -(void)prepareToDraw;
	//	[Abstract]
	//	[Export ("prepareToDraw")]
	//	void PrepareToDraw ();
	//}

	//// @interface GLKEffectProperty : NSObject
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(NSObject))]
	//interface GLKEffectProperty
	//{
	//}

	//// @interface GLKEffectPropertyTransform : GLKEffectProperty
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(GLKEffectProperty))]
	//interface GLKEffectPropertyTransform
	//{
	//	// @property (assign, nonatomic) GLKMatrix4 modelviewMatrix;
	//	[Export ("modelviewMatrix", ArgumentSemantic.Assign)]
	//	GLKMatrix4 ModelviewMatrix { get; set; }

	//	// @property (assign, nonatomic) GLKMatrix4 projectionMatrix;
	//	[Export ("projectionMatrix", ArgumentSemantic.Assign)]
	//	GLKMatrix4 ProjectionMatrix { get; set; }

	//	// @property (readonly, nonatomic) GLKMatrix3 normalMatrix;
	//	[Export ("normalMatrix")]
	//	GLKMatrix3 NormalMatrix { get; }
	//}

	//// @interface GLKEffectPropertyLight : GLKEffectProperty
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(GLKEffectProperty))]
	//interface GLKEffectPropertyLight
	//{
	//	// @property (assign, nonatomic) GLboolean enabled;
	//	[Export ("enabled")]
	//	bool Enabled { get; set; }

	//	// @property (assign, nonatomic) GLKVector4 position;
	//	[Export ("position", ArgumentSemantic.Assign)]
	//	GLKVector4 Position { get; set; }

	//	// @property (assign, nonatomic) GLKVector4 ambientColor;
	//	[Export ("ambientColor", ArgumentSemantic.Assign)]
	//	GLKVector4 AmbientColor { get; set; }

	//	// @property (assign, nonatomic) GLKVector4 diffuseColor;
	//	[Export ("diffuseColor", ArgumentSemantic.Assign)]
	//	GLKVector4 DiffuseColor { get; set; }

	//	// @property (assign, nonatomic) GLKVector4 specularColor;
	//	[Export ("specularColor", ArgumentSemantic.Assign)]
	//	GLKVector4 SpecularColor { get; set; }

	//	// @property (assign, nonatomic) GLKVector3 spotDirection;
	//	[Export ("spotDirection", ArgumentSemantic.Assign)]
	//	GLKVector3 SpotDirection { get; set; }

	//	// @property (assign, nonatomic) GLfloat spotExponent;
	//	[Export ("spotExponent")]
	//	float SpotExponent { get; set; }

	//	// @property (assign, nonatomic) GLfloat spotCutoff;
	//	[Export ("spotCutoff")]
	//	float SpotCutoff { get; set; }

	//	// @property (assign, nonatomic) GLfloat constantAttenuation;
	//	[Export ("constantAttenuation")]
	//	float ConstantAttenuation { get; set; }

	//	// @property (assign, nonatomic) GLfloat linearAttenuation;
	//	[Export ("linearAttenuation")]
	//	float LinearAttenuation { get; set; }

	//	// @property (assign, nonatomic) GLfloat quadraticAttenuation;
	//	[Export ("quadraticAttenuation")]
	//	float QuadraticAttenuation { get; set; }

	//	// @property (retain, nonatomic) GLKEffectPropertyTransform * _Nonnull transform;
	//	[Export ("transform", ArgumentSemantic.Retain)]
	//	GLKEffectPropertyTransform Transform { get; set; }
	//}

	//// @interface GLKEffectPropertyMaterial : GLKEffectProperty
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(GLKEffectProperty))]
	//interface GLKEffectPropertyMaterial
	//{
	//	// @property (assign, nonatomic) GLKVector4 ambientColor;
	//	[Export ("ambientColor", ArgumentSemantic.Assign)]
	//	GLKVector4 AmbientColor { get; set; }

	//	// @property (assign, nonatomic) GLKVector4 diffuseColor;
	//	[Export ("diffuseColor", ArgumentSemantic.Assign)]
	//	GLKVector4 DiffuseColor { get; set; }

	//	// @property (assign, nonatomic) GLKVector4 specularColor;
	//	[Export ("specularColor", ArgumentSemantic.Assign)]
	//	GLKVector4 SpecularColor { get; set; }

	//	// @property (assign, nonatomic) GLKVector4 emissiveColor;
	//	[Export ("emissiveColor", ArgumentSemantic.Assign)]
	//	GLKVector4 EmissiveColor { get; set; }

	//	// @property (assign, nonatomic) GLfloat shininess;
	//	[Export ("shininess")]
	//	float Shininess { get; set; }
	//}

	//// @interface GLKEffectPropertyTexture : GLKEffectProperty
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(GLKEffectProperty))]
	//interface GLKEffectPropertyTexture
	//{
	//	// @property (assign, nonatomic) GLboolean enabled;
	//	[Export ("enabled")]
	//	bool Enabled { get; set; }

	//	// @property (assign, nonatomic) GLuint name;
	//	[Export ("name")]
	//	uint Name { get; set; }

	//	// @property (assign, nonatomic) GLKTextureTarget target;
	//	[Export ("target", ArgumentSemantic.Assign)]
	//	GLKTextureTarget Target { get; set; }

	//	// @property (assign, nonatomic) GLKTextureEnvMode envMode;
	//	[Export ("envMode", ArgumentSemantic.Assign)]
	//	GLKTextureEnvMode EnvMode { get; set; }
	//}

	//// @interface GLKEffectPropertyFog : GLKEffectProperty
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(GLKEffectProperty))]
	//interface GLKEffectPropertyFog
	//{
	//	// @property (assign, nonatomic) GLboolean enabled;
	//	[Export ("enabled")]
	//	bool Enabled { get; set; }

	//	// @property (assign, nonatomic) GLint mode;
	//	[Export ("mode")]
	//	int Mode { get; set; }

	//	// @property (assign, nonatomic) GLKVector4 color;
	//	[Export ("color", ArgumentSemantic.Assign)]
	//	GLKVector4 Color { get; set; }

	//	// @property (assign, nonatomic) GLfloat density;
	//	[Export ("density")]
	//	float Density { get; set; }

	//	// @property (assign, nonatomic) GLfloat start;
	//	[Export ("start")]
	//	float Start { get; set; }

	//	// @property (assign, nonatomic) GLfloat end;
	//	[Export ("end")]
	//	float End { get; set; }
	//}

	//// @interface GLKBaseEffect : NSObject <GLKNamedEffect>
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(NSObject))]
	//interface GLKBaseEffect : IGLKNamedEffect
	//{
	//	// -(void)prepareToDraw;
	//	[Export ("prepareToDraw")]
	//	void PrepareToDraw ();

	//	// @property (assign, nonatomic) GLboolean colorMaterialEnabled;
	//	[Export ("colorMaterialEnabled")]
	//	bool ColorMaterialEnabled { get; set; }

	//	// @property (assign, nonatomic) GLboolean lightModelTwoSided;
	//	[Export ("lightModelTwoSided")]
	//	bool LightModelTwoSided { get; set; }

	//	// @property (assign, nonatomic) GLboolean useConstantColor;
	//	[Export ("useConstantColor")]
	//	bool UseConstantColor { get; set; }

	//	// @property (readonly, nonatomic) GLKEffectPropertyTransform * _Nonnull transform;
	//	[Export ("transform")]
	//	GLKEffectPropertyTransform Transform { get; }

	//	// @property (readonly, nonatomic) GLKEffectPropertyLight * _Nonnull light0;
	//	[Export ("light0")]
	//	GLKEffectPropertyLight Light0 { get; }

	//	// @property (readonly, nonatomic) GLKEffectPropertyLight * _Nonnull light1;
	//	[Export ("light1")]
	//	GLKEffectPropertyLight Light1 { get; }

	//	// @property (readonly, nonatomic) GLKEffectPropertyLight * _Nonnull light2;
	//	[Export ("light2")]
	//	GLKEffectPropertyLight Light2 { get; }

	//	// @property (assign, nonatomic) GLKLightingType lightingType;
	//	[Export ("lightingType", ArgumentSemantic.Assign)]
	//	GLKLightingType LightingType { get; set; }

	//	// @property (assign, nonatomic) GLKVector4 lightModelAmbientColor;
	//	[Export ("lightModelAmbientColor", ArgumentSemantic.Assign)]
	//	GLKVector4 LightModelAmbientColor { get; set; }

	//	// @property (readonly, nonatomic) GLKEffectPropertyMaterial * _Nonnull material;
	//	[Export ("material")]
	//	GLKEffectPropertyMaterial Material { get; }

	//	// @property (readonly, nonatomic) GLKEffectPropertyTexture * _Nonnull texture2d0;
	//	[Export ("texture2d0")]
	//	GLKEffectPropertyTexture Texture2d0 { get; }

	//	// @property (readonly, nonatomic) GLKEffectPropertyTexture * _Nonnull texture2d1;
	//	[Export ("texture2d1")]
	//	GLKEffectPropertyTexture Texture2d1 { get; }

	//	// @property (copy, nonatomic) NSArray<GLKEffectPropertyTexture *> * _Nullable textureOrder;
	//	[NullAllowed, Export ("textureOrder", ArgumentSemantic.Copy)]
	//	GLKEffectPropertyTexture[] TextureOrder { get; set; }

	//	// @property (assign, nonatomic) GLKVector4 constantColor;
	//	[Export ("constantColor", ArgumentSemantic.Assign)]
	//	GLKVector4 ConstantColor { get; set; }

	//	// @property (readonly, nonatomic) GLKEffectPropertyFog * _Nonnull fog;
	//	[Export ("fog")]
	//	GLKEffectPropertyFog Fog { get; }

	//	// @property (copy, nonatomic) NSString * _Nullable label;
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }
	//}

	//// @interface GLKReflectionMapEffect : GLKBaseEffect <GLKNamedEffect>
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(GLKBaseEffect))]
	//interface GLKReflectionMapEffect : IGLKNamedEffect
	//{
	//	// -(void)prepareToDraw;
	//	[Export ("prepareToDraw")]
	//	void PrepareToDraw ();

	//	// @property (readonly, nonatomic) GLKEffectPropertyTexture * _Nonnull textureCubeMap;
	//	[Export ("textureCubeMap")]
	//	GLKEffectPropertyTexture TextureCubeMap { get; }

	//	// @property (assign, nonatomic) GLKMatrix3 matrix;
	//	[Export ("matrix", ArgumentSemantic.Assign)]
	//	GLKMatrix3 Matrix { get; set; }
	//}

	//// @interface GLKSkyboxEffect : NSObject <GLKNamedEffect>
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(NSObject))]
	//interface GLKSkyboxEffect : IGLKNamedEffect
	//{
	//	// -(void)prepareToDraw;
	//	[Export ("prepareToDraw")]
	//	void PrepareToDraw ();

	//	// -(void)draw;
	//	[Export ("draw")]
	//	void Draw ();

	//	// @property (assign, nonatomic) GLKVector3 center;
	//	[Export ("center", ArgumentSemantic.Assign)]
	//	GLKVector3 Center { get; set; }

	//	// @property (assign, nonatomic) GLfloat xSize;
	//	[Export ("xSize")]
	//	float XSize { get; set; }

	//	// @property (assign, nonatomic) GLfloat ySize;
	//	[Export ("ySize")]
	//	float YSize { get; set; }

	//	// @property (assign, nonatomic) GLfloat zSize;
	//	[Export ("zSize")]
	//	float ZSize { get; set; }

	//	// @property (readonly, nonatomic) GLKEffectPropertyTexture * _Nonnull textureCubeMap;
	//	[Export ("textureCubeMap")]
	//	GLKEffectPropertyTexture TextureCubeMap { get; }

	//	// @property (readonly, nonatomic) GLKEffectPropertyTransform * _Nonnull transform;
	//	[Export ("transform")]
	//	GLKEffectPropertyTransform Transform { get; }

	//	// @property (copy, nonatomic) NSString * _Nullable label;
	//	[NullAllowed, Export ("label")]
	//	string Label { get; set; }
	//}

	//// @interface GLKTextureInfo : NSObject <NSCopying>
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(NSObject))]
	//interface GLKTextureInfo : INSCopying
	//{
	//	// @property (readonly) GLuint name;
	//	[Export ("name")]
	//	uint Name { get; }

	//	// @property (readonly) GLenum target;
	//	[Export ("target")]
	//	uint Target { get; }

	//	// @property (readonly) GLuint width;
	//	[Export ("width")]
	//	uint Width { get; }

	//	// @property (readonly) GLuint height;
	//	[Export ("height")]
	//	uint Height { get; }

	//	// @property (readonly) GLuint depth;
	//	[Export ("depth")]
	//	uint Depth { get; }

	//	// @property (readonly) GLKTextureInfoAlphaState alphaState;
	//	[Export ("alphaState")]
	//	GLKTextureInfoAlphaState AlphaState { get; }

	//	// @property (readonly) GLKTextureInfoOrigin textureOrigin;
	//	[Export ("textureOrigin")]
	//	GLKTextureInfoOrigin TextureOrigin { get; }

	//	// @property (readonly) BOOL containsMipmaps;
	//	[Export ("containsMipmaps")]
	//	bool ContainsMipmaps { get; }

	//	// @property (readonly) GLuint mimapLevelCount;
	//	[Export ("mimapLevelCount")]
	//	uint MimapLevelCount { get; }

	//	// @property (readonly) GLuint arrayLength;
	//	[Export ("arrayLength")]
	//	uint ArrayLength { get; }
	//}

	//// typedef void (^GLKTextureLoaderCallback)(GLKTextureInfo * _Nullable, NSError * _Nullable);
	//delegate void GLKTextureLoaderCallback ([NullAllowed] GLKTextureInfo arg0, [NullAllowed] NSError arg1);

	//// @interface GLKTextureLoader : NSObject
	//[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Introduced (PlatformName.iOS, 5, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
	//[BaseType (typeof(NSObject))]
	//interface GLKTextureLoader
	//{
	//	// +(GLKTextureInfo * _Nullable)textureWithContentsOfFile:(NSString * _Nonnull)path options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("textureWithContentsOfFile:options:error:")]
	//	[return: NullAllowed]
	//	GLKTextureInfo TextureWithContentsOfFile (string path, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] out NSError outError);

	//	// +(GLKTextureInfo * _Nullable)textureWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("textureWithContentsOfURL:options:error:")]
	//	[return: NullAllowed]
	//	GLKTextureInfo TextureWithContentsOfURL (NSUrl url, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] out NSError outError);

	//	// +(GLKTextureInfo * _Nullable)textureWithName:(NSString * _Nonnull)name scaleFactor:(CGFloat)scaleFactor bundle:(NSBundle * _Nullable)bundle options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("textureWithName:scaleFactor:bundle:options:error:")]
	//	[return: NullAllowed]
	//	GLKTextureInfo TextureWithName (string name, nfloat scaleFactor, [NullAllowed] NSBundle bundle, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] out NSError outError);

	//	// +(GLKTextureInfo * _Nullable)textureWithContentsOfData:(NSData * _Nonnull)data options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("textureWithContentsOfData:options:error:")]
	//	[return: NullAllowed]
	//	GLKTextureInfo TextureWithContentsOfData (NSData data, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] out NSError outError);

	//	// +(GLKTextureInfo * _Nullable)textureWithCGImage:(CGImageRef _Nonnull)cgImage options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("textureWithCGImage:options:error:")]
	//	[return: NullAllowed]
	//	unsafe GLKTextureInfo TextureWithCGImage (CGImageRef* cgImage, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] out NSError outError);

	//	// +(GLKTextureInfo * _Nullable)cubeMapWithContentsOfFiles:(NSArray<id> * _Nonnull)paths options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("cubeMapWithContentsOfFiles:options:error:")]
	//	[return: NullAllowed]
	//	GLKTextureInfo CubeMapWithContentsOfFiles (NSObject[] paths, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] out NSError outError);

	//	// +(GLKTextureInfo * _Nullable)cubeMapWithContentsOfFile:(NSString * _Nonnull)path options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("cubeMapWithContentsOfFile:options:error:")]
	//	[return: NullAllowed]
	//	GLKTextureInfo CubeMapWithContentsOfFile (string path, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] out NSError outError);

	//	// +(GLKTextureInfo * _Nullable)cubeMapWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options error:(NSError * _Nullable * _Nullable)outError;
	//	[Static]
	//	[Export ("cubeMapWithContentsOfURL:options:error:")]
	//	[return: NullAllowed]
	//	GLKTextureInfo CubeMapWithContentsOfURL (NSUrl url, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] out NSError outError);

	//	// -(instancetype _Nonnull)initWithSharegroup:(EAGLSharegroup * _Nonnull)sharegroup;
	//	[Export ("initWithSharegroup:")]
	//	IntPtr Constructor (EAGLSharegroup sharegroup);

	//	// -(void)textureWithContentsOfFile:(NSString * _Nonnull)path options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options queue:(dispatch_queue_t _Nullable)queue completionHandler:(GLKTextureLoaderCallback _Nonnull)block;
	//	[Export ("textureWithContentsOfFile:options:queue:completionHandler:")]
	//	void TextureWithContentsOfFile (string path, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] DispatchQueue queue, GLKTextureLoaderCallback block);

	//	// -(void)textureWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options queue:(dispatch_queue_t _Nullable)queue completionHandler:(GLKTextureLoaderCallback _Nonnull)block;
	//	[Export ("textureWithContentsOfURL:options:queue:completionHandler:")]
	//	void TextureWithContentsOfURL (NSUrl url, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] DispatchQueue queue, GLKTextureLoaderCallback block);

	//	// -(void)textureWithName:(NSString * _Nonnull)name scaleFactor:(CGFloat)scaleFactor bundle:(NSBundle * _Nullable)bundle options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options queue:(dispatch_queue_t _Nullable)queue completionHandler:(GLKTextureLoaderCallback _Nonnull)block;
	//	[Export ("textureWithName:scaleFactor:bundle:options:queue:completionHandler:")]
	//	void TextureWithName (string name, nfloat scaleFactor, [NullAllowed] NSBundle bundle, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] DispatchQueue queue, GLKTextureLoaderCallback block);

	//	// -(void)textureWithContentsOfData:(NSData * _Nonnull)data options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options queue:(dispatch_queue_t _Nullable)queue completionHandler:(GLKTextureLoaderCallback _Nonnull)block;
	//	[Export ("textureWithContentsOfData:options:queue:completionHandler:")]
	//	void TextureWithContentsOfData (NSData data, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] DispatchQueue queue, GLKTextureLoaderCallback block);

	//	// -(void)textureWithCGImage:(CGImageRef _Nonnull)cgImage options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options queue:(dispatch_queue_t _Nullable)queue completionHandler:(GLKTextureLoaderCallback _Nonnull)block;
	//	[Export ("textureWithCGImage:options:queue:completionHandler:")]
	//	unsafe void TextureWithCGImage (CGImageRef* cgImage, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] DispatchQueue queue, GLKTextureLoaderCallback block);

	//	// -(void)cubeMapWithContentsOfFiles:(NSArray<id> * _Nonnull)paths options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options queue:(dispatch_queue_t _Nullable)queue completionHandler:(GLKTextureLoaderCallback _Nonnull)block;
	//	[Export ("cubeMapWithContentsOfFiles:options:queue:completionHandler:")]
	//	void CubeMapWithContentsOfFiles (NSObject[] paths, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] DispatchQueue queue, GLKTextureLoaderCallback block);

	//	// -(void)cubeMapWithContentsOfFile:(NSString * _Nonnull)path options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options queue:(dispatch_queue_t _Nullable)queue completionHandler:(GLKTextureLoaderCallback _Nonnull)block;
	//	[Export ("cubeMapWithContentsOfFile:options:queue:completionHandler:")]
	//	void CubeMapWithContentsOfFile (string path, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] DispatchQueue queue, GLKTextureLoaderCallback block);

	//	// -(void)cubeMapWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *,NSNumber *> * _Nullable)options queue:(dispatch_queue_t _Nullable)queue completionHandler:(GLKTextureLoaderCallback _Nonnull)block;
	//	[Export ("cubeMapWithContentsOfURL:options:queue:completionHandler:")]
	//	void CubeMapWithContentsOfURL (NSUrl url, [NullAllowed] NSDictionary<NSString, NSNumber> options, [NullAllowed] DispatchQueue queue, GLKTextureLoaderCallback block);
	//}

	//// @interface MTKView : UIView <NSCoding, CALayerDelegate>
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface MTKView : INSCoding, ICALayerDelegate
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frameRect device:(id<MTLDevice> _Nullable)device __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:device:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frameRect, [NullAllowed] MTLDevice device);

	//	// -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder coder);

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	MTKViewDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<MTKViewDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic) id<MTLDevice> _Nullable device;
	//	[NullAllowed, Export ("device", ArgumentSemantic.Assign)]
	//	MTLDevice Device { get; set; }

	//	// @property (readonly, nonatomic) id<CAMetalDrawable> _Nullable currentDrawable;
	//	[NullAllowed, Export ("currentDrawable")]
	//	CAMetalDrawable CurrentDrawable { get; }

	//	// @property (nonatomic) BOOL framebufferOnly;
	//	[Export ("framebufferOnly")]
	//	bool FramebufferOnly { get; set; }

	//	// @property (nonatomic) BOOL presentsWithTransaction;
	//	[Export ("presentsWithTransaction")]
	//	bool PresentsWithTransaction { get; set; }

	//	// @property (nonatomic) MTLPixelFormat colorPixelFormat;
	//	[Export ("colorPixelFormat", ArgumentSemantic.Assign)]
	//	MTLPixelFormat ColorPixelFormat { get; set; }

	//	// @property (nonatomic) MTLPixelFormat depthStencilPixelFormat;
	//	[Export ("depthStencilPixelFormat", ArgumentSemantic.Assign)]
	//	MTLPixelFormat DepthStencilPixelFormat { get; set; }

	//	// @property (nonatomic) NSUInteger sampleCount;
	//	[Export ("sampleCount")]
	//	nuint SampleCount { get; set; }

	//	// @property (nonatomic) MTLClearColor clearColor;
	//	[Export ("clearColor", ArgumentSemantic.Assign)]
	//	MTLClearColor ClearColor { get; set; }

	//	// @property (nonatomic) double clearDepth;
	//	[Export ("clearDepth")]
	//	double ClearDepth { get; set; }

	//	// @property (nonatomic) uint32_t clearStencil;
	//	[Export ("clearStencil")]
	//	uint ClearStencil { get; set; }

	//	// @property (readonly, nonatomic) id<MTLTexture> _Nullable depthStencilTexture;
	//	[NullAllowed, Export ("depthStencilTexture")]
	//	MTLTexture DepthStencilTexture { get; }

	//	// @property (readonly, nonatomic) id<MTLTexture> _Nullable multisampleColorTexture;
	//	[NullAllowed, Export ("multisampleColorTexture")]
	//	MTLTexture MultisampleColorTexture { get; }

	//	// -(void)releaseDrawables;
	//	[Export ("releaseDrawables")]
	//	void ReleaseDrawables ();

	//	// @property (readonly, nonatomic) MTLRenderPassDescriptor * _Nullable currentRenderPassDescriptor;
	//	[NullAllowed, Export ("currentRenderPassDescriptor")]
	//	MTLRenderPassDescriptor CurrentRenderPassDescriptor { get; }

	//	// @property (nonatomic) NSInteger preferredFramesPerSecond;
	//	[Export ("preferredFramesPerSecond")]
	//	nint PreferredFramesPerSecond { get; set; }

	//	// @property (nonatomic) BOOL enableSetNeedsDisplay;
	//	[Export ("enableSetNeedsDisplay")]
	//	bool EnableSetNeedsDisplay { get; set; }

	//	// @property (nonatomic) BOOL autoResizeDrawable;
	//	[Export ("autoResizeDrawable")]
	//	bool AutoResizeDrawable { get; set; }

	//	// @property (nonatomic) CGSize drawableSize;
	//	[Export ("drawableSize", ArgumentSemantic.Assign)]
	//	CGSize DrawableSize { get; set; }

	//	// @property (getter = isPaused, nonatomic) BOOL paused;
	//	[Export ("paused")]
	//	bool Paused { [Bind ("isPaused")] get; set; }

	//	// @property (nonatomic) CGColorSpaceRef _Nullable colorspace __attribute__((availability(ios, unavailable)));
	//	[NoiOS]
	//	[NullAllowed, Export ("colorspace", ArgumentSemantic.Assign)]
	//	unsafe CGColorSpaceRef* Colorspace { get; set; }

	//	// -(void)draw;
	//	[Export ("draw")]
	//	void Draw ();
	//}

	//// @protocol MTKViewDelegate <NSObject>
	//[iOS (9,0)]
	//[Protocol, Model]
	//[BaseType (typeof(NSObject))]
	//interface MTKViewDelegate
	//{
	//	// @required -(void)mtkView:(MTKView * _Nonnull)view drawableSizeWillChange:(CGSize)size;
	//	[Abstract]
	//	[Export ("mtkView:drawableSizeWillChange:")]
	//	void MtkView (MTKView view, CGSize size);

	//	// @required -(void)drawInMTKView:(MTKView * _Nonnull)view;
	//	[Abstract]
	//	[Export ("drawInMTKView:")]
	//	void DrawInMTKView (MTKView view);
	//}

	//// typedef void (^MTKTextureLoaderCallback)(id<MTLTexture> _Nullable, NSError * _Nullable);
	//delegate void MTKTextureLoaderCallback ([NullAllowed] MTLTexture arg0, [NullAllowed] NSError arg1);

	//// typedef void (^MTKTextureLoaderArrayCallback)(NSArray<id<MTLTexture>> * _Nonnull, NSError * _Nullable);
	//delegate void MTKTextureLoaderArrayCallback (MTLTexture[] arg0, [NullAllowed] NSError arg1);

	//// @interface MTKTextureLoader : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MTKTextureLoader
	//{
	//	// @property (readonly, nonatomic) id<MTLDevice> _Nonnull device;
	//	[Export ("device")]
	//	MTLDevice Device { get; }

	//	// -(instancetype _Nonnull)initWithDevice:(id<MTLDevice> _Nonnull)device;
	//	[Export ("initWithDevice:")]
	//	IntPtr Constructor (MTLDevice device);

	//	// -(void)newTextureWithContentsOfURL:(NSURL * _Nonnull)URL options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options completionHandler:(MTKTextureLoaderCallback _Nonnull)completionHandler;
	//	[Export ("newTextureWithContentsOfURL:options:completionHandler:")]
	//	void NewTextureWithContentsOfURL (NSUrl URL, [NullAllowed] NSDictionary<NSString, NSObject> options, MTKTextureLoaderCallback completionHandler);

	//	// -(void)newTextureWithName:(NSString * _Nonnull)name scaleFactor:(CGFloat)scaleFactor bundle:(NSBundle * _Nullable)bundle options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options completionHandler:(MTKTextureLoaderCallback _Nonnull)completionHandler __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("newTextureWithName:scaleFactor:bundle:options:completionHandler:")]
	//	void NewTextureWithName (string name, nfloat scaleFactor, [NullAllowed] NSBundle bundle, [NullAllowed] NSDictionary<NSString, NSObject> options, MTKTextureLoaderCallback completionHandler);

	//	// -(void)newTexturesWithContentsOfURLs:(NSArray<NSURL *> * _Nonnull)URLs options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options completionHandler:(MTKTextureLoaderArrayCallback _Nonnull)completionHandler __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("newTexturesWithContentsOfURLs:options:completionHandler:")]
	//	void NewTexturesWithContentsOfURLs (NSUrl[] URLs, [NullAllowed] NSDictionary<NSString, NSObject> options, MTKTextureLoaderArrayCallback completionHandler);

	//	// -(void)newTexturesWithNames:(NSArray<NSString *> * _Nonnull)names scaleFactor:(CGFloat)scaleFactor bundle:(NSBundle * _Nullable)bundle options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options completionHandler:(MTKTextureLoaderArrayCallback _Nonnull)completionHandler __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("newTexturesWithNames:scaleFactor:bundle:options:completionHandler:")]
	//	void NewTexturesWithNames (string[] names, nfloat scaleFactor, [NullAllowed] NSBundle bundle, [NullAllowed] NSDictionary<NSString, NSObject> options, MTKTextureLoaderArrayCallback completionHandler);

	//	// -(void)newTextureWithData:(NSData * _Nonnull)data options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options completionHandler:(MTKTextureLoaderCallback _Nonnull)completionHandler;
	//	[Export ("newTextureWithData:options:completionHandler:")]
	//	void NewTextureWithData (NSData data, [NullAllowed] NSDictionary<NSString, NSObject> options, MTKTextureLoaderCallback completionHandler);

	//	// -(void)newTextureWithCGImage:(CGImageRef _Nonnull)cgImage options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options completionHandler:(MTKTextureLoaderCallback _Nonnull)completionHandler;
	//	[Export ("newTextureWithCGImage:options:completionHandler:")]
	//	unsafe void NewTextureWithCGImage (CGImageRef* cgImage, [NullAllowed] NSDictionary<NSString, NSObject> options, MTKTextureLoaderCallback completionHandler);

	//	// -(void)newTextureWithMDLTexture:(MDLTexture * _Nonnull)texture options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options completionHandler:(MTKTextureLoaderCallback _Nonnull)completionHandler __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("newTextureWithMDLTexture:options:completionHandler:")]
	//	void NewTextureWithMDLTexture (MDLTexture texture, [NullAllowed] NSDictionary<NSString, NSObject> options, MTKTextureLoaderCallback completionHandler);

	//	// -(id<MTLTexture> _Nullable)newTextureWithContentsOfURL:(NSURL * _Nonnull)URL options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("newTextureWithContentsOfURL:options:error:")]
	//	[return: NullAllowed]
	//	MTLTexture NewTextureWithContentsOfURL (NSUrl URL, [NullAllowed] NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError error);

	//	// -(NSArray<id<MTLTexture>> * _Nonnull)newTexturesWithContentsOfURLs:(NSArray<NSURL *> * _Nonnull)URLs options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("newTexturesWithContentsOfURLs:options:error:")]
	//	MTLTexture[] NewTexturesWithContentsOfURLs (NSUrl[] URLs, [NullAllowed] NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError error);

	//	// -(id<MTLTexture> _Nullable)newTextureWithData:(NSData * _Nonnull)data options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("newTextureWithData:options:error:")]
	//	[return: NullAllowed]
	//	MTLTexture NewTextureWithData (NSData data, [NullAllowed] NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError error);

	//	// -(id<MTLTexture> _Nullable)newTextureWithCGImage:(CGImageRef _Nonnull)cgImage options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("newTextureWithCGImage:options:error:")]
	//	[return: NullAllowed]
	//	unsafe MTLTexture NewTextureWithCGImage (CGImageRef* cgImage, [NullAllowed] NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError error);

	//	// -(id<MTLTexture> _Nullable)newTextureWithMDLTexture:(MDLTexture * _Nonnull)texture options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("newTextureWithMDLTexture:options:error:")]
	//	[return: NullAllowed]
	//	MTLTexture NewTextureWithMDLTexture (MDLTexture texture, [NullAllowed] NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError error);

	//	// -(id<MTLTexture> _Nullable)newTextureWithName:(NSString * _Nonnull)name scaleFactor:(CGFloat)scaleFactor bundle:(NSBundle * _Nullable)bundle options:(NSDictionary<MTKTextureLoaderOption,id> * _Nullable)options error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=10.0)));
	//	[iOS (10,0)]
	//	[Export ("newTextureWithName:scaleFactor:bundle:options:error:")]
	//	[return: NullAllowed]
	//	MTLTexture NewTextureWithName (string name, nfloat scaleFactor, [NullAllowed] NSBundle bundle, [NullAllowed] NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError error);
	//}

	//// @interface MTKMeshBufferAllocator : NSObject <MDLMeshBufferAllocator>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MTKMeshBufferAllocator : IMDLMeshBufferAllocator
	//{
	//	// -(instancetype _Nonnull)initWithDevice:(id<MTLDevice> _Nonnull)device;
	//	[Export ("initWithDevice:")]
	//	IntPtr Constructor (MTLDevice device);

	//	// @property (readonly, nonatomic) id<MTLDevice> _Nonnull device;
	//	[Export ("device")]
	//	MTLDevice Device { get; }
	//}

	//// @interface MTKMeshBuffer : NSObject <MDLMeshBuffer, MDLNamed>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MTKMeshBuffer : IMDLMeshBuffer, IMDLNamed
	//{
	//	// @property (readonly, nonatomic) NSUInteger length;
	//	[Export ("length")]
	//	nuint Length { get; }

	//	// @property (readonly, nonatomic) MTKMeshBufferAllocator * _Nonnull allocator;
	//	[Export ("allocator")]
	//	MTKMeshBufferAllocator Allocator { get; }

	//	// @property (readonly, nonatomic) id<MDLMeshBufferZone> _Nullable zone;
	//	[NullAllowed, Export ("zone")]
	//	MDLMeshBufferZone Zone { get; }

	//	// @property (readonly, nonatomic) id<MTLBuffer> _Nonnull buffer;
	//	[Export ("buffer")]
	//	MTLBuffer Buffer { get; }

	//	// @property (readonly, nonatomic) NSUInteger offset;
	//	[Export ("offset")]
	//	nuint Offset { get; }

	//	// @property (readonly, nonatomic) MDLMeshBufferType type;
	//	[Export ("type")]
	//	MDLMeshBufferType Type { get; }
	//}

	//// @interface MTKSubmesh : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MTKSubmesh
	//{
	//	// @property (readonly, nonatomic) MTLPrimitiveType primitiveType;
	//	[Export ("primitiveType")]
	//	MTLPrimitiveType PrimitiveType { get; }

	//	// @property (readonly, nonatomic) MTLIndexType indexType;
	//	[Export ("indexType")]
	//	MTLIndexType IndexType { get; }

	//	// @property (readonly, nonatomic) MTKMeshBuffer * _Nonnull indexBuffer;
	//	[Export ("indexBuffer")]
	//	MTKMeshBuffer IndexBuffer { get; }

	//	// @property (readonly, nonatomic) NSUInteger indexCount;
	//	[Export ("indexCount")]
	//	nuint IndexCount { get; }

	//	// @property (readonly, nonatomic, weak) MTKMesh * _Nullable mesh;
	//	[NullAllowed, Export ("mesh", ArgumentSemantic.Weak)]
	//	MTKMesh Mesh { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }
	//}

	//// @interface MTKMesh : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface MTKMesh
	//{
	//	// -(instancetype _Nullable)initWithMesh:(MDLMesh * _Nonnull)mesh device:(id<MTLDevice> _Nonnull)device error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("initWithMesh:device:error:")]
	//	IntPtr Constructor (MDLMesh mesh, MTLDevice device, [NullAllowed] out NSError error);

	//	// +(NSArray<MTKMesh *> * _Nullable)newMeshesFromAsset:(MDLAsset * _Nonnull)asset device:(id<MTLDevice> _Nonnull)device sourceMeshes:(NSArray<MDLMesh *> * _Nullable * _Nullable)sourceMeshes error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("newMeshesFromAsset:device:sourceMeshes:error:")]
	//	[return: NullAllowed]
	//	MTKMesh[] NewMeshesFromAsset (MDLAsset asset, MTLDevice device, [NullAllowed] out MDLMesh[] sourceMeshes, [NullAllowed] out NSError error);

	//	// @property (readonly, nonatomic) NSArray<MTKMeshBuffer *> * _Nonnull vertexBuffers;
	//	[Export ("vertexBuffers")]
	//	MTKMeshBuffer[] VertexBuffers { get; }

	//	// @property (readonly, nonatomic) MDLVertexDescriptor * _Nonnull vertexDescriptor;
	//	[Export ("vertexDescriptor")]
	//	MDLVertexDescriptor VertexDescriptor { get; }

	//	// @property (readonly, nonatomic) NSArray<MTKSubmesh *> * _Nonnull submeshes;
	//	[Export ("submeshes")]
	//	MTKSubmesh[] Submeshes { get; }

	//	// @property (readonly, nonatomic) NSUInteger vertexCount;
	//	[Export ("vertexCount")]
	//	nuint VertexCount { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull name;
	//	[Export ("name")]
	//	string Name { get; set; }
	//}

	//// @interface PESDKActionMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKActionMenuItem
	//{
	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; }

	//	// @property (readonly, nonatomic, strong) UIImage * _Nonnull icon;
	//	[Export ("icon", ArgumentSemantic.Strong)]
	//	UIImage Icon { get; }

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKActionMenuItem New ();
	//}

	//// @interface PhotoEditorSDK_Swift_214 (PESDKActionMenuItem)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKActionMenuItem))]
	//interface PESDKActionMenuItem_PhotoEditorSDK_Swift_214
	//{
	//	// +(PESDKActionMenuItem * _Nonnull)createMagicItem __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("createMagicItem")]
	//	[Verify (MethodToProperty)]
	//	PESDKActionMenuItem CreateMagicItem { get; }
	//}

	//// @interface PhotoEditorSDK_Swift_225 (PESDKActionMenuItem)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKActionMenuItem))]
	//interface PESDKActionMenuItem_PhotoEditorSDK_Swift_225
	//{
	//	// -(instancetype _Nonnull)initWithTitle:(NSString * _Nonnull)title icon:(UIImage * _Nonnull)icon objcActionClosure:(void (^ _Nonnull)(PESDKPhotoEditModel * _Nonnull))objcActionClosure objcSelectedClosure:(BOOL (^ _Nullable)(PESDKPhotoEditModel * _Nonnull))objcSelectedClosure;
	//	[Export ("initWithTitle:icon:objcActionClosure:objcSelectedClosure:")]
	//	IntPtr Constructor (string title, UIImage icon, Action<PESDKPhotoEditModel> objcActionClosure, [NullAllowed] Func<PESDKPhotoEditModel, bool> objcSelectedClosure);
	//}

	//// @interface PESDKBorderedCollectionViewCell : UICollectionViewCell
	//[iOS (9,0)]
	//[BaseType (typeof(UICollectionViewCell))]
	//interface PESDKBorderedCollectionViewCell
	//{
	//	// @property (nonatomic, strong) UIColor * _Nonnull borderColor;
	//	[Export ("borderColor", ArgumentSemantic.Strong)]
	//	UIColor BorderColor { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)tintColorDidChange;
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();

	//	// @property (getter = isSelected, nonatomic) BOOL selected;
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }
	//}

	//// @interface PESDKActivityBorderedCollectionViewCell : PESDKBorderedCollectionViewCell
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKBorderedCollectionViewCell))]
	//interface PESDKActivityBorderedCollectionViewCell
	//{
	//	// @property (readonly, nonatomic, strong) UIActivityIndicatorView * _Nonnull activityIndicator;
	//	[Export ("activityIndicator", ArgumentSemantic.Strong)]
	//	UIActivityIndicatorView ActivityIndicator { get; }

	//	// -(void)prepareForReuse;
	//	[Export ("prepareForReuse")]
	//	void PrepareForReuse ();

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKViewController : UIViewController
	//[BaseType (typeof(UIViewController))]
	//interface PESDKViewController
	//{
	//	// -(void)viewDidDisappear:(BOOL)animated;
	//	[Export ("viewDidDisappear:")]
	//	void ViewDidDisappear (bool animated);

	//	// -(instancetype _Nonnull)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil __attribute__((objc_designated_initializer));
	//	[Export ("initWithNibName:bundle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string nibNameOrNil, [NullAllowed] NSBundle nibBundleOrNil);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKAdjustEditController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKAdjustEditController
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKAdjustEditControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKAdjustEditControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();
	//}

	//// @interface PhotoEditorSDK_Swift_308 (PESDKAdjustEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKAdjustEditController))]
	//interface PESDKAdjustEditController_PhotoEditorSDK_Swift_308
	//{
	//	// @property (readonly, nonatomic) UIEdgeInsets preferredPreviewViewInsets;
	//	[Export ("preferredPreviewViewInsets")]
	//	UIEdgeInsets PreferredPreviewViewInsets { get; }
	//}

	//// @interface PhotoEditorSDK_Swift_315 (PESDKAdjustEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKAdjustEditController))]
	//interface PESDKAdjustEditController_PhotoEditorSDK_Swift_315
	//{
	//	// @property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
	//	[Export ("boxedPhotoEditModel", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditModel BoxedPhotoEditModel { get; set; }
	//}

	//// @protocol PESDKAdjustEditControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKAdjustEditControllerDelegate
	//{
	//	// @required -(void)adjustEditController:(PESDKAdjustEditController * _Nonnull)adjustEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
	//	[Abstract]
	//	[Export ("adjustEditController:didChangePreferredPreviewViewInsetsAnimated:")]
	//	void AdjustEditController (PESDKAdjustEditController adjustEditController, bool animated);

	//	// @required -(UIScrollView * _Nullable)adjustEditControllerTargetScrollView:(PESDKAdjustEditController * _Nonnull)adjustEditController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("adjustEditControllerTargetScrollView:")]
	//	[return: NullAllowed]
	//	UIScrollView AdjustEditControllerTargetScrollView (PESDKAdjustEditController adjustEditController);

	//	// @required -(void)adjustEditControllerDidChangePhotoEditModel:(PESDKAdjustEditController * _Nonnull)adjustEditController;
	//	[Abstract]
	//	[Export ("adjustEditControllerDidChangePhotoEditModel:")]
	//	void AdjustEditControllerDidChangePhotoEditModel (PESDKAdjustEditController adjustEditController);
	//}

	//// @interface PESDKAdjustMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKAdjustMenuItem
	//{
	//	// @property (readonly, nonatomic) enum AdjustTool adjustTool;
	//	[Export ("adjustTool")]
	//	AdjustTool AdjustTool { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; }

	//	// @property (readonly, nonatomic, strong) UIImage * _Nullable icon;
	//	[NullAllowed, Export ("icon", ArgumentSemantic.Strong)]
	//	UIImage Icon { get; }

	//	// -(instancetype _Nonnull)initWithAdjustTool:(enum AdjustTool)adjustTool;
	//	[Export ("initWithAdjustTool:")]
	//	IntPtr Constructor (AdjustTool adjustTool);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKAdjustMenuItem New ();
	//}

	//// @interface PESDKToolControllerOptions : NSObject
	//[BaseType (typeof(NSObject))]
	//interface PESDKToolControllerOptions
	//{
	//	// @property (readonly, nonatomic, strong) UIColor * _Nullable menuBackgroundColor;
	//	[NullAllowed, Export ("menuBackgroundColor", ArgumentSemantic.Strong)]
	//	UIColor MenuBackgroundColor { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) titleViewConfigurationClosure;
	//	[NullAllowed, Export ("titleViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> TitleViewConfigurationClosure { get; }

	//	// @property (readonly, nonatomic, strong) UIColor * _Nullable backgroundColor;
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Strong)]
	//	UIColor BackgroundColor { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) applyButtonConfigurationClosure;
	//	[NullAllowed, Export ("applyButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> ApplyButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) discardButtonConfigurationClosure;
	//	[NullAllowed, Export ("discardButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> DiscardButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(void) didEnterToolClosure;
	//	[NullAllowed, Export ("didEnterToolClosure", ArgumentSemantic.Copy)]
	//	Action DidEnterToolClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(void) willLeaveToolClosure;
	//	[NullAllowed, Export ("willLeaveToolClosure", ArgumentSemantic.Copy)]
	//	Action WillLeaveToolClosure { get; }

	//	// -(instancetype _Nonnull)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder __attribute__((objc_designated_initializer));
	//	[Export ("initWithEditorBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKToolControllerOptionsBuilder editorBuilder);
	//}

	//// @interface PESDKAdjustToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKAdjustToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKIconCaptionCollectionViewCell * _Nonnull, enum AdjustTool) adjustToolButtonConfigurationClosure;
	//	[NullAllowed, Export ("adjustToolButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKIconCaptionCollectionViewCell, AdjustTool> AdjustToolButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum AdjustTool) adjustToolSelectedClosure;
	//	[NullAllowed, Export ("adjustToolSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<AdjustTool> AdjustToolSelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) sliderConfigurationClosure;
	//	[NullAllowed, Export ("sliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> SliderConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) sliderContainerConfigurationClosure;
	//	[NullAllowed, Export ("sliderContainerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> SliderContainerConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, enum AdjustTool) sliderChangedValueClosure;
	//	[NullAllowed, Export ("sliderChangedValueClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, AdjustTool> SliderChangedValueClosure { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKAdjustToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKAdjustToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKToolControllerOptionsBuilder : NSObject
	//[BaseType (typeof(NSObject))]
	//interface PESDKToolControllerOptionsBuilder
	//{
	//	// @property (nonatomic, strong) UIColor * _Nullable menuBackgroundColor;
	//	[NullAllowed, Export ("menuBackgroundColor", ArgumentSemantic.Strong)]
	//	UIColor MenuBackgroundColor { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) titleViewConfigurationClosure;
	//	[NullAllowed, Export ("titleViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> TitleViewConfigurationClosure { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable backgroundColor;
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Strong)]
	//	UIColor BackgroundColor { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) didEnterToolClosure;
	//	[NullAllowed, Export ("didEnterToolClosure", ArgumentSemantic.Copy)]
	//	Action DidEnterToolClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) willLeaveToolClosure;
	//	[NullAllowed, Export ("willLeaveToolClosure", ArgumentSemantic.Copy)]
	//	Action WillLeaveToolClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) applyButtonConfigurationClosure;
	//	[NullAllowed, Export ("applyButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> ApplyButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) discardButtonConfigurationClosure;
	//	[NullAllowed, Export ("discardButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> DiscardButtonConfigurationClosure { get; set; }
	//}

	//// @interface PESDKAdjustToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKAdjustToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKIconCaptionCollectionViewCell * _Nonnull, enum AdjustTool) adjustToolButtonConfigurationClosure;
	//	[NullAllowed, Export ("adjustToolButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKIconCaptionCollectionViewCell, AdjustTool> AdjustToolButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum AdjustTool) adjustToolSelectedClosure;
	//	[NullAllowed, Export ("adjustToolSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<AdjustTool> AdjustToolSelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) sliderConfigurationClosure;
	//	[NullAllowed, Export ("sliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> SliderConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) sliderContainerConfigurationClosure;
	//	[NullAllowed, Export ("sliderContainerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> SliderContainerConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, enum AdjustTool) sliderChangedValueClosure;
	//	[NullAllowed, Export ("sliderChangedValueClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, AdjustTool> SliderChangedValueClosure { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_503 (PESDKAdjustToolControllerOptionsBuilder)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKAdjustToolControllerOptionsBuilder))]
	//interface PESDKAdjustToolControllerOptionsBuilder_PhotoEditorSDK_Swift_503
	//{
	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedAdjustToolsAsNSNumbers;
	//	[Export ("allowedAdjustToolsAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedAdjustToolsAsNSNumbers { get; set; }
	//}

	//// @protocol PESDKAnalyticsClient
	//[Protocol, Model]
	//interface PESDKAnalyticsClient
	//{
	//	// @required -(void)logScreenView:(PESDKAnalyticsScreenViewName _Nonnull)screenView;
	//	[Abstract]
	//	[Export ("logScreenView:")]
	//	void LogScreenView (string screenView);

	//	// @required -(void)logEvent:(PESDKAnalyticsEventName _Nonnull)event attributes:(NSDictionary<PESDKAnalyticsEventAttributeName,id> * _Nullable)attributes;
	//	[Abstract]
	//	[Export ("logEvent:attributes:")]
	//	void LogEvent (string @event, [NullAllowed] NSDictionary<NSString, NSObject> attributes);
	//}

	//// @interface PESDKAnalytics : NSObject <PESDKAnalyticsClient>
	//[BaseType (typeof(NSObject))]
	//interface PESDKAnalytics : IPESDKAnalyticsClient
	//{
	//	// @property (nonatomic) BOOL isEnabled;
	//	[Export ("isEnabled")]
	//	bool IsEnabled { get; set; }

	//	// -(void)addAnalyticsClient:(id<PESDKAnalyticsClient> _Nonnull)client;
	//	[Export ("addAnalyticsClient:")]
	//	void AddAnalyticsClient (PESDKAnalyticsClient client);

	//	// -(void)removeAnalyticsClient:(id<PESDKAnalyticsClient> _Nonnull)client;
	//	[Export ("removeAnalyticsClient:")]
	//	void RemoveAnalyticsClient (PESDKAnalyticsClient client);

	//	// -(void)logScreenView:(PESDKAnalyticsScreenViewName _Nonnull)screenView;
	//	[Export ("logScreenView:")]
	//	void LogScreenView (string screenView);

	//	// -(void)logEvent:(PESDKAnalyticsEventName _Nonnull)event attributes:(NSDictionary<PESDKAnalyticsEventAttributeName,id> * _Nullable)attributes;
	//	[Export ("logEvent:attributes:")]
	//	void LogEvent (string @event, [NullAllowed] NSDictionary<NSString, NSObject> attributes);
	//}

	//// @interface PESDKAnimationDelegate : NSObject <CAAnimationDelegate>
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKAnimationDelegate : ICAAnimationDelegate
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nonnull)(BOOL) block;
	//	[Export ("block", ArgumentSemantic.Copy)]
	//	Action<bool> Block { get; }

	//	// -(void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
	//	[Export ("animationDidStop:finished:")]
	//	void AnimationDidStop (CAAnimation anim, bool flag);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKAnimationDelegate New ();
	//}

	//// @interface PESDKAssetManager : NSObject
	//[BaseType (typeof(NSObject))]
	//interface PESDKAssetManager
	//{
	//	// -(void)setImage:(UIImage * _Nullable)image forIdentifier:(NSString * _Nonnull)identifier;
	//	[Export ("setImage:forIdentifier:")]
	//	void SetImage ([NullAllowed] UIImage image, string identifier);

	//	// -(UIImage * _Nullable)imageForIdentifier:(NSString * _Nonnull)identifier __attribute__((warn_unused_result));
	//	[Export ("imageForIdentifier:")]
	//	[return: NullAllowed]
	//	UIImage ImageForIdentifier (string identifier);

	//	// -(void)setCIImage:(CIImage * _Nullable)image forIdentifier:(NSString * _Nonnull)identifier;
	//	[Export ("setCIImage:forIdentifier:")]
	//	void SetCIImage ([NullAllowed] CIImage image, string identifier);

	//	// -(CIImage * _Nullable)ciImageForIdentifier:(NSString * _Nonnull)identifier __attribute__((warn_unused_result));
	//	[Export ("ciImageForIdentifier:")]
	//	[return: NullAllowed]
	//	CIImage CiImageForIdentifier (string identifier);

	//	// @property (copy, nonatomic) void (^ _Nullable)(BOOL) progressClosure;
	//	[NullAllowed, Export ("progressClosure", ArgumentSemantic.Copy)]
	//	Action<bool> ProgressClosure { get; set; }

	//	// -(void)getImagesAt:(NSArray<NSURL *> * _Nonnull)urls completion:(void (^ _Nonnull)(NSDictionary<NSURL *,UIImage *> * _Nonnull, NSArray<NSError *> * _Nonnull))completion;
	//	[Export ("getImagesAt:completion:")]
	//	void GetImagesAt (NSUrl[] urls, Action<NSDictionary<NSURL, UIImage>, NSArray<NSError>> completion);

	//	// -(void)getImageAt:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
	//	[Export ("getImageAt:completion:")]
	//	void GetImageAt (NSUrl url, Action<UIImage, NSError> completion);
	//}

	//// @interface PESDKBlendModeMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKBlendModeMenuItem
	//{
	//	// @property (readonly, nonatomic) enum PESDKBlendMode blendMode;
	//	[Export ("blendMode")]
	//	PESDKBlendMode BlendMode { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; }

	//	// -(instancetype _Nonnull)initWithBlendMode:(enum PESDKBlendMode)blendMode;
	//	[Export ("initWithBlendMode:")]
	//	IntPtr Constructor (PESDKBlendMode blendMode);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKBlendModeMenuItem New ();
	//}

	//// @interface PESDKFocusGradientView : UIControl
	//[iOS (9,0)]
	//[BaseType (typeof(UIControl))]
	//interface PESDKFocusGradientView
	//{
	//	// @property (readonly, nonatomic) CGPoint centerPoint;
	//	[Export ("centerPoint")]
	//	CGPoint CenterPoint { get; }

	//	// @property (nonatomic) CGFloat fadeWidth;
	//	[Export ("fadeWidth")]
	//	nfloat FadeWidth { get; set; }

	//	// @property (readonly, nonatomic) CGFloat normalizedFadeWidth;
	//	[Export ("normalizedFadeWidth")]
	//	nfloat NormalizedFadeWidth { get; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull color;
	//	[Export ("color", ArgumentSemantic.Strong)]
	//	UIColor Color { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();

	//	// -(void)accessibilityIncrement;
	//	[Export ("accessibilityIncrement")]
	//	void AccessibilityIncrement ();

	//	// -(void)accessibilityDecrement;
	//	[Export ("accessibilityDecrement")]
	//	void AccessibilityDecrement ();
	//}

	//// @interface PESDKBoxGradientView : PESDKFocusGradientView
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKFocusGradientView))]
	//interface PESDKBoxGradientView
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)drawRect:(CGRect)rect;
	//	[Export ("drawRect:")]
	//	void DrawRect (CGRect rect);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();
	//}

	//// @interface PESDKBrush : NSObject
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKBrush
	//{
	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKBrush New ();
	//}

	//// @protocol PESDKGeneratorDelegate
	//[Protocol, Model]
	//interface PESDKGeneratorDelegate
	//{
	//	// @required -(void)generatorDidChange:(PESDKStampGenerator * _Nonnull)generator;
	//	[Abstract]
	//	[Export ("generatorDidChange:")]
	//	void GeneratorDidChange (PESDKStampGenerator generator);
	//}

	//// @interface PhotoEditorSDK_Swift_730 (PESDKBrush) <PESDKGeneratorDelegate>
	//[Category]
	//[BaseType (typeof(PESDKBrush))]
	//interface PESDKBrush_PhotoEditorSDK_Swift_730 : IPESDKGeneratorDelegate
	//{
	//	// -(void)generatorDidChange:(PESDKStampGenerator * _Nonnull)generator;
	//	[Export ("generatorDidChange:")]
	//	void GeneratorDidChange (PESDKStampGenerator generator);
	//}

	//// @interface PESDKColorToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKColorToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) NSArray<UIColor *> * _Nonnull availableColors;
	//	[Export ("availableColors", ArgumentSemantic.Copy)]
	//	UIColor[] AvailableColors { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull availableColorNames;
	//	[Export ("availableColorNames", ArgumentSemantic.Copy)]
	//	string[] AvailableColorNames { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull) colorActionButtonConfigurationClosure;
	//	[NullAllowed, Export ("colorActionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKColorCollectionViewCell, UIColor, NSString> ColorActionButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UIColor * _Nonnull, NSString * _Nonnull) colorActionSelectedClosure;
	//	[NullAllowed, Export ("colorActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<UIColor, NSString> ColorActionSelectedClosure { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKColorToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKColorToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKBrushColorToolControllerOptions : PESDKColorToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKColorToolControllerOptions))]
	//interface PESDKBrushColorToolControllerOptions
	//{
	//	// -(instancetype _Nonnull)initWithBrushBuilder:(PESDKBrushColorToolControllerOptionsBuilder * _Nonnull)brushBuilder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBrushBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKBrushColorToolControllerOptionsBuilder brushBuilder);
	//}

	//// @interface PESDKColorToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKColorToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) NSArray<UIColor *> * _Nonnull availableColors;
	//	[Export ("availableColors", ArgumentSemantic.Copy)]
	//	UIColor[] AvailableColors { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSString *> * _Nonnull availableColorNames;
	//	[Export ("availableColorNames", ArgumentSemantic.Copy)]
	//	string[] AvailableColorNames { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull) colorActionButtonConfigurationClosure;
	//	[NullAllowed, Export ("colorActionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKColorCollectionViewCell, UIColor, NSString> ColorActionButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UIColor * _Nonnull, NSString * _Nonnull) colorActionSelectedClosure;
	//	[NullAllowed, Export ("colorActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<UIColor, NSString> ColorActionSelectedClosure { get; set; }
	//}

	//// @interface PESDKBrushColorToolControllerOptionsBuilder : PESDKColorToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKColorToolControllerOptionsBuilder))]
	//interface PESDKBrushColorToolControllerOptionsBuilder
	//{
	//}

	//// @interface PESDKBrushEditController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKBrushEditController
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, enum BrushTool) sliderChangedValueClosure;
	//	[NullAllowed, Export ("sliderChangedValueClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, BrushTool> SliderChangedValueClosure { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKBrushEditControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKBrushEditControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, nonatomic, strong) PESDKBrushPreviewView * _Nonnull brushPreviewView;
	//	[Export ("brushPreviewView", ArgumentSemantic.Strong)]
	//	PESDKBrushPreviewView BrushPreviewView { get; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull color;
	//	[Export ("color", ArgumentSemantic.Strong)]
	//	UIColor Color { get; set; }

	//	// @property (nonatomic) CGFloat size;
	//	[Export ("size")]
	//	nfloat Size { get; set; }

	//	// @property (nonatomic) CGFloat hardness;
	//	[Export ("hardness")]
	//	nfloat Hardness { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();
	//}

	//// @interface PhotoEditorSDK_Swift_835 (PESDKBrushEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKBrushEditController))]
	//interface PESDKBrushEditController_PhotoEditorSDK_Swift_835
	//{
	//	// @property (readonly, nonatomic) UIEdgeInsets preferredPreviewViewInsets;
	//	[Export ("preferredPreviewViewInsets")]
	//	UIEdgeInsets PreferredPreviewViewInsets { get; }
	//}

	//// @interface PhotoEditorSDK_Swift_842 (PESDKBrushEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKBrushEditController))]
	//interface PESDKBrushEditController_PhotoEditorSDK_Swift_842
	//{
	//	// @property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
	//	[Export ("boxedPhotoEditModel", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditModel BoxedPhotoEditModel { get; set; }
	//}

	//// @protocol PESDKBrushEditControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKBrushEditControllerDelegate
	//{
	//	// @required -(void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
	//	[Abstract]
	//	[Export ("brushEditController:didChangePreferredPreviewViewInsetsAnimated:")]
	//	void BrushEditController (PESDKBrushEditController brushEditController, bool animated);

	//	// @required -(void)brushEditControllerPhotoEditModelDidChange:(PESDKBrushEditController * _Nonnull)brushEditController;
	//	[Abstract]
	//	[Export ("brushEditControllerPhotoEditModelDidChange:")]
	//	void BrushEditControllerPhotoEditModelDidChange (PESDKBrushEditController brushEditController);

	//	// @required -(UIScrollView * _Nullable)brushEditControllerTargetScrollView:(PESDKBrushEditController * _Nonnull)brushEditController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("brushEditControllerTargetScrollView:")]
	//	[return: NullAllowed]
	//	UIScrollView BrushEditControllerTargetScrollView (PESDKBrushEditController brushEditController);

	//	// @required -(PESDKSpriteViewController * _Nullable)brushEditControllerSpriteViewController:(PESDKBrushEditController * _Nonnull)brushEditController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("brushEditControllerSpriteViewController:")]
	//	[return: NullAllowed]
	//	PESDKSpriteViewController BrushEditControllerSpriteViewController (PESDKBrushEditController brushEditController);

	//	// @required -(void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didUpdateToSize:(CGFloat)size;
	//	[Abstract]
	//	[Export ("brushEditController:didUpdateToSize:")]
	//	void BrushEditController (PESDKBrushEditController brushEditController, nfloat size);

	//	// @required -(void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didUpdateToHardness:(CGFloat)hardness;
	//	[Abstract]
	//	[Export ("brushEditController:didUpdateToHardness:")]
	//	void BrushEditController (PESDKBrushEditController brushEditController, nfloat hardness);

	//	// @required -(void)brushEditControllerDidStartSliding:(PESDKBrushEditController * _Nonnull)brushEditController;
	//	[Abstract]
	//	[Export ("brushEditControllerDidStartSliding:")]
	//	void BrushEditControllerDidStartSliding (PESDKBrushEditController brushEditController);

	//	// @required -(void)brushEditControllerDidEndSliding:(PESDKBrushEditController * _Nonnull)brushEditController;
	//	[Abstract]
	//	[Export ("brushEditControllerDidEndSliding:")]
	//	void BrushEditControllerDidEndSliding (PESDKBrushEditController brushEditController);
	//}

	//// @interface PESDKBrushMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKBrushMenuItem
	//{
	//	// @property (readonly, nonatomic) enum BrushTool brushTool;
	//	[Export ("brushTool")]
	//	BrushTool BrushTool { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable icon;
	//	[NullAllowed, Export ("icon", ArgumentSemantic.Strong)]
	//	UIImage Icon { get; set; }

	//	// -(instancetype _Nonnull)initWithBrushTool:(enum BrushTool)brushTool;
	//	[Export ("initWithBrushTool:")]
	//	IntPtr Constructor (BrushTool brushTool);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKBrushMenuItem New ();
	//}

	//// @interface PESDKBrushPreviewView : UIVisualEffectView
	//[iOS (9,0)]
	//[BaseType (typeof(UIVisualEffectView))]
	//interface PESDKBrushPreviewView
	//{
	//	// @property (readonly, nonatomic, strong) UIImageView * _Nonnull imageView;
	//	[Export ("imageView", ArgumentSemantic.Strong)]
	//	UIImageView ImageView { get; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull color;
	//	[Export ("color", ArgumentSemantic.Strong)]
	//	UIColor Color { get; set; }

	//	// @property (nonatomic) CGFloat width;
	//	[Export ("width")]
	//	nfloat Width { get; set; }

	//	// @property (nonatomic) CGFloat hardness;
	//	[Export ("hardness")]
	//	nfloat Hardness { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();
	//}

	//// @interface PESDKBrushToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKBrushToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UICollectionViewCell * _Nonnull, enum BrushTool) brushToolButtonConfigurationClosure;
	//	[NullAllowed, Export ("brushToolButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UICollectionViewCell, BrushTool> BrushToolButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum BrushTool) brushToolSelectedClosure;
	//	[NullAllowed, Export ("brushToolSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<BrushTool> BrushToolSelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) sliderConfigurationClosure;
	//	[NullAllowed, Export ("sliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> SliderConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) sliderContainerConfigurationClosure;
	//	[NullAllowed, Export ("sliderContainerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> SliderContainerConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, enum BrushTool) sliderChangedValueClosure;
	//	[NullAllowed, Export ("sliderChangedValueClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, BrushTool> SliderChangedValueClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKOverlayButton * _Nonnull, enum BrushOverlayAction) overlayButtonConfigurationClosure;
	//	[NullAllowed, Export ("overlayButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlayButton, BrushOverlayAction> OverlayButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum BrushOverlayAction) brushActionSelectedClosure;
	//	[NullAllowed, Export ("brushActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<BrushOverlayAction> BrushActionSelectedClosure { get; }

	//	// @property (readonly, nonatomic) CGFloat minimumBrushSize;
	//	[Export ("minimumBrushSize")]
	//	nfloat MinimumBrushSize { get; }

	//	// @property (readonly, nonatomic) CGFloat maximumBrushSize;
	//	[Export ("maximumBrushSize")]
	//	nfloat MaximumBrushSize { get; }

	//	// @property (readonly, nonatomic) CGFloat defaultBrushSize;
	//	[Export ("defaultBrushSize")]
	//	nfloat DefaultBrushSize { get; }

	//	// @property (readonly, nonatomic) CGFloat minimumBrushHardness;
	//	[Export ("minimumBrushHardness")]
	//	nfloat MinimumBrushHardness { get; }

	//	// @property (readonly, nonatomic) CGFloat maximumBrushHardness;
	//	[Export ("maximumBrushHardness")]
	//	nfloat MaximumBrushHardness { get; }

	//	// @property (readonly, nonatomic) CGFloat defaultBrushHardness;
	//	[Export ("defaultBrushHardness")]
	//	nfloat DefaultBrushHardness { get; }

	//	// @property (readonly, nonatomic, strong) UIColor * _Nonnull defaultBrushColor;
	//	[Export ("defaultBrushColor", ArgumentSemantic.Strong)]
	//	UIColor DefaultBrushColor { get; }

	//	// @property (readonly, nonatomic) BOOL usesUniformHardness;
	//	[Export ("usesUniformHardness")]
	//	bool UsesUniformHardness { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKBrushToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKBrushToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKBrushToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKBrushToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(UICollectionViewCell * _Nonnull, enum BrushTool) brushToolButtonConfigurationClosure;
	//	[NullAllowed, Export ("brushToolButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UICollectionViewCell, BrushTool> BrushToolButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum BrushTool) brushToolSelectedClosure;
	//	[NullAllowed, Export ("brushToolSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<BrushTool> BrushToolSelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) sliderConfigurationClosure;
	//	[NullAllowed, Export ("sliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> SliderConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) sliderContainerConfigurationClosure;
	//	[NullAllowed, Export ("sliderContainerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> SliderContainerConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, enum BrushTool) sliderChangedValueClosure;
	//	[NullAllowed, Export ("sliderChangedValueClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, BrushTool> SliderChangedValueClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKOverlayButton * _Nonnull, enum BrushOverlayAction) overlayButtonConfigurationClosure;
	//	[NullAllowed, Export ("overlayButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlayButton, BrushOverlayAction> OverlayButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum BrushOverlayAction) brushActionSelectedClosure;
	//	[NullAllowed, Export ("brushActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<BrushOverlayAction> BrushActionSelectedClosure { get; set; }

	//	// @property (nonatomic) CGFloat minimumBrushSize;
	//	[Export ("minimumBrushSize")]
	//	nfloat MinimumBrushSize { get; set; }

	//	// @property (nonatomic) CGFloat maximumBrushSize;
	//	[Export ("maximumBrushSize")]
	//	nfloat MaximumBrushSize { get; set; }

	//	// @property (nonatomic) CGFloat defaultBrushSize;
	//	[Export ("defaultBrushSize")]
	//	nfloat DefaultBrushSize { get; set; }

	//	// @property (nonatomic) CGFloat minimumBrushHardness;
	//	[Export ("minimumBrushHardness")]
	//	nfloat MinimumBrushHardness { get; set; }

	//	// @property (nonatomic) CGFloat maximumBrushHardness;
	//	[Export ("maximumBrushHardness")]
	//	nfloat MaximumBrushHardness { get; set; }

	//	// @property (nonatomic) CGFloat defaultBrushHardness;
	//	[Export ("defaultBrushHardness")]
	//	nfloat DefaultBrushHardness { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull defaultBrushColor;
	//	[Export ("defaultBrushColor", ArgumentSemantic.Strong)]
	//	UIColor DefaultBrushColor { get; set; }

	//	// @property (nonatomic) BOOL usesUniformHardness;
	//	[Export ("usesUniformHardness")]
	//	bool UsesUniformHardness { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_1060 (PESDKBrushToolControllerOptionsBuilder)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKBrushToolControllerOptionsBuilder))]
	//interface PESDKBrushToolControllerOptionsBuilder_PhotoEditorSDK_Swift_1060
	//{
	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedBrushToolsAsNSNumbers;
	//	[Export ("allowedBrushToolsAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedBrushToolsAsNSNumbers { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedBrushOverlayActionsAsNSNumbers;
	//	[Export ("allowedBrushOverlayActionsAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedBrushOverlayActionsAsNSNumbers { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_1073 (NSBundle)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(NSBundle))]
	//interface NSBundle_PhotoEditorSDK_Swift_1073
	//{
	//	// @property (readonly, nonatomic, strong, class) NSBundle * _Nonnull pesdkBundle;
	//	[Static]
	//	[Export ("pesdkBundle", ArgumentSemantic.Strong)]
	//	NSBundle PesdkBundle { get; }
	//}

	//// @interface PESDKButton : UIButton
	//[BaseType (typeof(UIButton))]
	//interface PESDKButton
	//{
	//	// -(void)setActionClosure:(void (^ _Nullable)(id _Nonnull))actionClosure for:(UIControlEvents)controlEvents;
	//	[Export ("setActionClosure:for:")]
	//	void SetActionClosure ([NullAllowed] Action<NSObject> actionClosure, UIControlEvents controlEvents);

	//	// @property (copy, nonatomic) void (^ _Nullable)(id _Nonnull) actionClosure;
	//	[NullAllowed, Export ("actionClosure", ArgumentSemantic.Copy)]
	//	Action<NSObject> ActionClosure { get; set; }

	//	// @property (nonatomic) UIEdgeInsets touchAreaInsets;
	//	[Export ("touchAreaInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets TouchAreaInsets { get; set; }

	//	// -(BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event __attribute__((warn_unused_result));
	//	[Export ("pointInside:withEvent:")]
	//	bool PointInside (CGPoint point, [NullAllowed] UIEvent @event);

	//	// -(void)tintColorDidChange;
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKCameraController : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKCameraController
	//{
	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull videoPreviewView;
	//	[Export ("videoPreviewView", ArgumentSemantic.Strong)]
	//	UIView VideoPreviewView { get; }

	//	// @property (nonatomic) enum RecordingMode recordingMode;
	//	[Export ("recordingMode", ArgumentSemantic.Assign)]
	//	RecordingMode RecordingMode { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(BOOL) runningStateChangedHandler;
	//	[NullAllowed, Export ("runningStateChangedHandler", ArgumentSemantic.Copy)]
	//	Action<bool> RunningStateChangedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(AVCaptureDevicePosition, AVCaptureDevicePosition) cameraPositionChangedHandler;
	//	[NullAllowed, Export ("cameraPositionChangedHandler", ArgumentSemantic.Copy)]
	//	Action<AVCaptureDevicePosition, AVCaptureDevicePosition> CameraPositionChangedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum RecordingMode) recordingModeChangedHandler;
	//	[NullAllowed, Export ("recordingModeChangedHandler", ArgumentSemantic.Copy)]
	//	Action<RecordingMode> RecordingModeChangedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) availableCameraPositionsChangedHandler;
	//	[NullAllowed, Export ("availableCameraPositionsChangedHandler", ArgumentSemantic.Copy)]
	//	Action AvailableCameraPositionsChangedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(BOOL, AVCaptureFlashMode, BOOL) flashChangedHandler;
	//	[NullAllowed, Export ("flashChangedHandler", ArgumentSemantic.Copy)]
	//	Action<bool, AVCaptureFlashMode, bool> FlashChangedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(BOOL, AVCaptureTorchMode, BOOL) torchChangedHandler;
	//	[NullAllowed, Export ("torchChangedHandler", ArgumentSemantic.Copy)]
	//	Action<bool, AVCaptureTorchMode, bool> TorchChangedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(BOOL) capturingStillImageHandler;
	//	[NullAllowed, Export ("capturingStillImageHandler", ArgumentSemantic.Copy)]
	//	Action<bool> CapturingStillImageHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(BOOL) sessionInterruptionHandler;
	//	[NullAllowed, Export ("sessionInterruptionHandler", ArgumentSemantic.Copy)]
	//	Action<bool> SessionInterruptionHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(NSError * _Nonnull) sessionRuntimeErrorHandler;
	//	[NullAllowed, Export ("sessionRuntimeErrorHandler", ArgumentSemantic.Copy)]
	//	Action<NSError> SessionRuntimeErrorHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) authorizationFailedHandler;
	//	[NullAllowed, Export ("authorizationFailedHandler", ArgumentSemantic.Copy)]
	//	Action AuthorizationFailedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) videoRecordingStartedHandler;
	//	[NullAllowed, Export ("videoRecordingStartedHandler", ArgumentSemantic.Copy)]
	//	Action VideoRecordingStartedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(NSURL * _Nonnull) videoRecordingFinishedHandler;
	//	[NullAllowed, Export ("videoRecordingFinishedHandler", ArgumentSemantic.Copy)]
	//	Action<NSURL> VideoRecordingFinishedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) videoRecordingFailedHandler;
	//	[NullAllowed, Export ("videoRecordingFailedHandler", ArgumentSemantic.Copy)]
	//	Action VideoRecordingFailedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(NSInteger) videoRecordingProgressHandler;
	//	[NullAllowed, Export ("videoRecordingProgressHandler", ArgumentSemantic.Copy)]
	//	Action<nint> VideoRecordingProgressHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(CGRect) previewFrameChangedHandler;
	//	[NullAllowed, Export ("previewFrameChangedHandler", ArgumentSemantic.Copy)]
	//	Action<CGRect> PreviewFrameChangedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(CGPoint) focusPointChangedHandler;
	//	[NullAllowed, Export ("focusPointChangedHandler", ArgumentSemantic.Copy)]
	//	Action<CGPoint> FocusPointChangedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(AVCaptureFocusMode, AVCaptureExposureMode) focusModeChangedHandler;
	//	[NullAllowed, Export ("focusModeChangedHandler", ArgumentSemantic.Copy)]
	//	Action<AVCaptureFocusMode, AVCaptureExposureMode> FocusModeChangedHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) focusDisabledHandler;
	//	[NullAllowed, Export ("focusDisabledHandler", ArgumentSemantic.Copy)]
	//	Action FocusDisabledHandler { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable videoOutputSettings;
	//	[NullAllowed, Export ("videoOutputSettings", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> VideoOutputSettings { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable audioOutputSettings;
	//	[NullAllowed, Export ("audioOutputSettings", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> AudioOutputSettings { get; set; }

	//	// @property (nonatomic) AVFileType _Nonnull videoRecordingFileType;
	//	[Export ("videoRecordingFileType")]
	//	string VideoRecordingFileType { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull videoRecordingFileExtension;
	//	[Export ("videoRecordingFileExtension")]
	//	string VideoRecordingFileExtension { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(AVAssetWriter * _Nonnull) assetWriterConfigurationClosure;
	//	[NullAllowed, Export ("assetWriterConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<AVAssetWriter> AssetWriterConfigurationClosure { get; set; }

	//	// @property (nonatomic) BOOL tapToFocusEnabled;
	//	[Export ("tapToFocusEnabled")]
	//	bool TapToFocusEnabled { get; set; }

	//	// @property (nonatomic, strong) PESDKPhotoEffect * _Nullable photoEffect;
	//	[NullAllowed, Export ("photoEffect", ArgumentSemantic.Strong)]
	//	PESDKPhotoEffect PhotoEffect { get; set; }

	//	// @property (nonatomic) CGFloat photoEffectIntensity;
	//	[Export ("photoEffectIntensity")]
	//	nfloat PhotoEffectIntensity { get; set; }

	//	// @property (nonatomic) BOOL includeUserLocation;
	//	[Export ("includeUserLocation")]
	//	bool IncludeUserLocation { get; set; }

	//	// -(BOOL)setupWithInitialRecordingMode:(enum RecordingMode)recordingMode error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("setupWithInitialRecordingMode:error:")]
	//	bool SetupWithInitialRecordingMode (RecordingMode recordingMode, [NullAllowed] out NSError error);

	//	// -(BOOL)setupWithInitialRecordingMode:(enum RecordingMode)recordingMode completion:(void (^ _Nullable)(void))completion error:(NSError * _Nullable * _Nullable)error;
	//	[Export ("setupWithInitialRecordingMode:completion:error:")]
	//	bool SetupWithInitialRecordingMode (RecordingMode recordingMode, [NullAllowed] Action completion, [NullAllowed] out NSError error);

	//	// -(void)startCamera;
	//	[Export ("startCamera")]
	//	void StartCamera ();

	//	// -(void)stopCamera;
	//	[Export ("stopCamera")]
	//	void StopCamera ();

	//	// -(void)toggleCameraPosition;
	//	[Export ("toggleCameraPosition")]
	//	void ToggleCameraPosition ();

	//	// -(void)switchToCameraAtPosition:(AVCaptureDevicePosition)position;
	//	[Export ("switchToCameraAtPosition:")]
	//	void SwitchToCameraAtPosition (AVCaptureDevicePosition position);

	//	// -(void)takePhoto:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
	//	[Export ("takePhoto:")]
	//	void TakePhoto (Action<UIImage, NSError> completion);

	//	// -(void)takePhotoAndReturnData:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completion;
	//	[Export ("takePhotoAndReturnData:")]
	//	void TakePhotoAndReturnData (Action<NSData, NSError> completion);

	//	// -(void)startVideoRecording;
	//	[Export ("startVideoRecording")]
	//	void StartVideoRecording ();

	//	// -(void)stopVideoRecording;
	//	[Export ("stopVideoRecording")]
	//	void StopVideoRecording ();

	//	// -(void)selectNextLightMode;
	//	[Export ("selectNextLightMode")]
	//	void SelectNextLightMode ();

	//	// -(void)zoomWithDesiredZoomFactor:(CGFloat)zoomFactor;
	//	[Export ("zoomWithDesiredZoomFactor:")]
	//	void ZoomWithDesiredZoomFactor (nfloat zoomFactor);
	//}

	//// @interface PhotoEditorSDK_Swift_1253 (PESDKCameraController) <CLLocationManagerDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKCameraController))]
	//interface PESDKCameraController_PhotoEditorSDK_Swift_1253 : ICLLocationManagerDelegate
	//{
	//	// -(void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
	//	[Export ("locationManager:didUpdateLocations:")]
	//	void LocationManager (CLLocationManager manager, CLLocation[] locations);
	//}

	//// @interface PhotoEditorSDK_Swift_1262 (PESDKCameraController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKCameraController))]
	//interface PESDKCameraController_PhotoEditorSDK_Swift_1262
	//{
	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull cameraPositionsAsNSNumbers;
	//	[Export ("cameraPositionsAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] CameraPositionsAsNSNumbers { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull flashModesAsNSNumbers;
	//	[Export ("flashModesAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] FlashModesAsNSNumbers { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull torchModesAsNSNumbers;
	//	[Export ("torchModesAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] TorchModesAsNSNumbers { get; set; }
	//}

	//// @interface PESDKCameraViewController : UIViewController
	//[iOS (9,0)]
	//[BaseType (typeof(UIViewController))]
	//interface PESDKCameraViewController
	//{
	//	// -(instancetype _Nonnull)initWithConfiguration:(PESDKConfiguration * _Nonnull)configuration __attribute__((objc_designated_initializer));
	//	[Export ("initWithConfiguration:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKConfiguration configuration);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull backgroundContainerView;
	//	[Export ("backgroundContainerView", ArgumentSemantic.Strong)]
	//	UIView BackgroundContainerView { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull topControlsView;
	//	[Export ("topControlsView", ArgumentSemantic.Strong)]
	//	UIView TopControlsView { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull cameraPreviewContainer;
	//	[Export ("cameraPreviewContainer", ArgumentSemantic.Strong)]
	//	UIView CameraPreviewContainer { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull bottomControlsView;
	//	[Export ("bottomControlsView", ArgumentSemantic.Strong)]
	//	UIView BottomControlsView { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull bottomSafeAreaHidingView;
	//	[Export ("bottomSafeAreaHidingView", ArgumentSemantic.Strong)]
	//	UIView BottomSafeAreaHidingView { get; }

	//	// @property (readonly, nonatomic, strong) PESDKButton * _Nonnull cancelButton;
	//	[Export ("cancelButton", ArgumentSemantic.Strong)]
	//	PESDKButton CancelButton { get; }

	//	// @property (readonly, nonatomic, strong) PESDKButton * _Nonnull flashButton;
	//	[Export ("flashButton", ArgumentSemantic.Strong)]
	//	PESDKButton FlashButton { get; }

	//	// @property (readonly, nonatomic, strong) PESDKButton * _Nonnull switchCameraButton;
	//	[Export ("switchCameraButton", ArgumentSemantic.Strong)]
	//	PESDKButton SwitchCameraButton { get; }

	//	// @property (readonly, nonatomic, strong) PESDKButton * _Nonnull cameraRollButton;
	//	[Export ("cameraRollButton", ArgumentSemantic.Strong)]
	//	PESDKButton CameraRollButton { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull actionButtonContainer;
	//	[Export ("actionButtonContainer", ArgumentSemantic.Strong)]
	//	UIView ActionButtonContainer { get; }

	//	// @property (readonly, nonatomic, strong) UILabel * _Nonnull recordingTimeLabel;
	//	[Export ("recordingTimeLabel", ArgumentSemantic.Strong)]
	//	UILabel RecordingTimeLabel { get; }

	//	// @property (readonly, nonatomic, strong) UIControl * _Nullable actionButton;
	//	[NullAllowed, Export ("actionButton", ArgumentSemantic.Strong)]
	//	UIControl ActionButton { get; }

	//	// @property (readonly, nonatomic, strong) PESDKButton * _Nonnull filterSelectionButton;
	//	[Export ("filterSelectionButton", ArgumentSemantic.Strong)]
	//	PESDKButton FilterSelectionButton { get; }

	//	// @property (readonly, nonatomic, strong) PESDKSlider * _Nonnull filterIntensitySlider;
	//	[Export ("filterIntensitySlider", ArgumentSemantic.Strong)]
	//	PESDKSlider FilterIntensitySlider { get; }

	//	// @property (readonly, nonatomic, strong) UISwipeGestureRecognizer * _Nonnull swipeRightGestureRecognizer;
	//	[Export ("swipeRightGestureRecognizer", ArgumentSemantic.Strong)]
	//	UISwipeGestureRecognizer SwipeRightGestureRecognizer { get; }

	//	// @property (readonly, nonatomic, strong) UISwipeGestureRecognizer * _Nonnull swipeLeftGestureRecognizer;
	//	[Export ("swipeLeftGestureRecognizer", ArgumentSemantic.Strong)]
	//	UISwipeGestureRecognizer SwipeLeftGestureRecognizer { get; }

	//	// @property (readonly, nonatomic, strong) UIPinchGestureRecognizer * _Nonnull pinchGestureRecognizer;
	//	[Export ("pinchGestureRecognizer", ArgumentSemantic.Strong)]
	//	UIPinchGestureRecognizer PinchGestureRecognizer { get; }

	//	// @property (readonly, nonatomic, strong) PESDKFilterSelectionController * _Nonnull filterSelectionController;
	//	[Export ("filterSelectionController", ArgumentSemantic.Strong)]
	//	PESDKFilterSelectionController FilterSelectionController { get; }

	//	// @property (readonly, nonatomic, strong) PESDKCameraController * _Nullable cameraController;
	//	[NullAllowed, Export ("cameraController", ArgumentSemantic.Strong)]
	//	PESDKCameraController CameraController { get; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) cancelBlock;
	//	[NullAllowed, Export ("cancelBlock", ArgumentSemantic.Copy)]
	//	Action CancelBlock { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UIImage * _Nullable, NSURL * _Nullable) completionBlock;
	//	[NullAllowed, Export ("completionBlock", ArgumentSemantic.Copy)]
	//	Action<UIImage, NSURL> CompletionBlock { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(NSData * _Nullable) dataCompletionBlock;
	//	[NullAllowed, Export ("dataCompletionBlock", ArgumentSemantic.Copy)]
	//	Action<NSData> DataCompletionBlock { get; set; }

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();

	//	// -(void)viewDidAppear:(BOOL)animated;
	//	[Export ("viewDidAppear:")]
	//	void ViewDidAppear (bool animated);

	//	// -(void)viewWillDisappear:(BOOL)animated;
	//	[Export ("viewWillDisappear:")]
	//	void ViewWillDisappear (bool animated);

	//	// @property (readonly, nonatomic) BOOL shouldAutomaticallyForwardAppearanceMethods;
	//	[Export ("shouldAutomaticallyForwardAppearanceMethods")]
	//	bool ShouldAutomaticallyForwardAppearanceMethods { get; }

	//	// @property (readonly, nonatomic) UIStatusBarStyle preferredStatusBarStyle;
	//	[Export ("preferredStatusBarStyle")]
	//	UIStatusBarStyle PreferredStatusBarStyle { get; }

	//	// @property (readonly, nonatomic) BOOL prefersStatusBarHidden;
	//	[Export ("prefersStatusBarHidden")]
	//	bool PrefersStatusBarHidden { get; }

	//	// @property (readonly, nonatomic) BOOL shouldAutorotate;
	//	[Export ("shouldAutorotate")]
	//	bool ShouldAutorotate { get; }

	//	// @property (readonly, nonatomic) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
	//	[Export ("preferredInterfaceOrientationForPresentation")]
	//	UIInterfaceOrientation PreferredInterfaceOrientationForPresentation { get; }

	//	// -(void)setLastImageFromRollAsPreview;
	//	[Export ("setLastImageFromRollAsPreview")]
	//	void SetLastImageFromRollAsPreview ();

	//	// -(void)takePhoto:(PESDKButton * _Nullable)sender;
	//	[Export ("takePhoto:")]
	//	void TakePhoto ([NullAllowed] PESDKButton sender);

	//	// -(void)recordVideo:(PESDKVideoRecordButton * _Nullable)sender;
	//	[Export ("recordVideo:")]
	//	void RecordVideo ([NullAllowed] PESDKVideoRecordButton sender);
	//}

	//// @interface PhotoEditorSDK_Swift_1390 (PESDKCameraViewController) <UIGestureRecognizerDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKCameraViewController))]
	//interface PESDKCameraViewController_PhotoEditorSDK_Swift_1390 : IUIGestureRecognizerDelegate
	//{
	//	// -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch __attribute__((warn_unused_result));
	//	[Export ("gestureRecognizer:shouldReceiveTouch:")]
	//	bool GestureRecognizer (UIGestureRecognizer gestureRecognizer, UITouch touch);
	//}

	//// @interface PhotoEditorSDK_Swift_1398 (PESDKCameraViewController) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKCameraViewController))]
	//interface PESDKCameraViewController_PhotoEditorSDK_Swift_1398 : IUIImagePickerControllerDelegate, IUINavigationControllerDelegate
	//{
	//	// -(void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey,id> * _Nonnull)info;
	//	[Export ("imagePickerController:didFinishPickingMediaWithInfo:")]
	//	void ImagePickerController (UIImagePickerController picker, NSDictionary<NSString, NSObject> info);

	//	// -(void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
	//	[Export ("imagePickerControllerDidCancel:")]
	//	void ImagePickerControllerDidCancel (UIImagePickerController picker);
	//}

	//// @protocol PESDKPhotoEditViewControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKPhotoEditViewControllerDelegate
	//{
	//	// @required -(void)photoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController didSaveImage:(UIImage * _Nonnull)image imageAsData:(NSData * _Nonnull)data;
	//	[Abstract]
	//	[Export ("photoEditViewController:didSaveImage:imageAsData:")]
	//	void PhotoEditViewController (PESDKPhotoEditViewController photoEditViewController, UIImage image, NSData data);

	//	// @required -(void)photoEditViewControllerDidFailToGeneratePhoto:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController;
	//	[Abstract]
	//	[Export ("photoEditViewControllerDidFailToGeneratePhoto:")]
	//	void PhotoEditViewControllerDidFailToGeneratePhoto (PESDKPhotoEditViewController photoEditViewController);

	//	// @required -(void)photoEditViewControllerDidCancel:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController;
	//	[Abstract]
	//	[Export ("photoEditViewControllerDidCancel:")]
	//	void PhotoEditViewControllerDidCancel (PESDKPhotoEditViewController photoEditViewController);

	//	// @optional -(void)photoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController willPresentToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
	//	[Export ("photoEditViewController:willPresentToolController:")]
	//	void PhotoEditViewController (PESDKPhotoEditViewController photoEditViewController, PESDKPhotoEditToolController toolController);

	//	// @optional -(void)photoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController didPresentToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
	//	[Export ("photoEditViewController:didPresentToolController:")]
	//	void PhotoEditViewController (PESDKPhotoEditViewController photoEditViewController, PESDKPhotoEditToolController toolController);

	//	// @optional -(void)photoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController willDismissToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
	//	[Export ("photoEditViewController:willDismissToolController:")]
	//	void PhotoEditViewController (PESDKPhotoEditViewController photoEditViewController, PESDKPhotoEditToolController toolController);

	//	// @optional -(void)photoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController didDismissToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
	//	[Export ("photoEditViewController:didDismissToolController:")]
	//	void PhotoEditViewController (PESDKPhotoEditViewController photoEditViewController, PESDKPhotoEditToolController toolController);
	//}

	//// @interface PhotoEditorSDK_Swift_1459 (PESDKCameraViewController) <PESDKPhotoEditViewControllerDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKCameraViewController))]
	//interface PESDKCameraViewController_PhotoEditorSDK_Swift_1459 : IPESDKPhotoEditViewControllerDelegate
	//{
	//	// -(void)photoEditViewControllerDidCancel:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController;
	//	[Export ("photoEditViewControllerDidCancel:")]
	//	void PhotoEditViewControllerDidCancel (PESDKPhotoEditViewController photoEditViewController);

	//	// -(void)photoEditViewControllerDidFailToGeneratePhoto:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController;
	//	[Export ("photoEditViewControllerDidFailToGeneratePhoto:")]
	//	void PhotoEditViewControllerDidFailToGeneratePhoto (PESDKPhotoEditViewController photoEditViewController);

	//	// -(void)photoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController didSaveImage:(UIImage * _Nonnull)image imageAsData:(NSData * _Nonnull)data;
	//	[Export ("photoEditViewController:didSaveImage:imageAsData:")]
	//	void PhotoEditViewController (PESDKPhotoEditViewController photoEditViewController, UIImage image, NSData data);
	//}

	//// @interface PESDKCameraViewControllerOptions : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKCameraViewControllerOptions
	//{
	//	// @property (readonly, nonatomic, strong) UIColor * _Nullable backgroundColor;
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Strong)]
	//	UIColor BackgroundColor { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) cancelButtonConfigurationClosure;
	//	[NullAllowed, Export ("cancelButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> CancelButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) flashButtonConfigurationClosure;
	//	[NullAllowed, Export ("flashButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> FlashButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) switchCameraButtonConfigurationClosure;
	//	[NullAllowed, Export ("switchCameraButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> SwitchCameraButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) cameraRollButtonConfigurationClosure;
	//	[NullAllowed, Export ("cameraRollButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> CameraRollButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) photoActionButtonConfigurationClosure;
	//	[NullAllowed, Export ("photoActionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> PhotoActionButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) filterSelectorButtonConfigurationClosure;
	//	[NullAllowed, Export ("filterSelectorButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> FilterSelectorButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UILabel * _Nonnull) timeLabelConfigurationClosure;
	//	[NullAllowed, Export ("timeLabelConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UILabel> TimeLabelConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) filterIntensitySliderConfigurationClosure;
	//	[NullAllowed, Export ("filterIntensitySliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> FilterIntensitySliderConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull, enum RecordingMode) recordingModeButtonConfigurationClosure;
	//	[NullAllowed, Export ("recordingModeButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton, RecordingMode> RecordingModeButtonConfigurationClosure { get; }

	//	// @property (readonly, nonatomic) BOOL cropToSquare;
	//	[Export ("cropToSquare")]
	//	bool CropToSquare { get; }

	//	// @property (readonly, nonatomic) NSInteger maximumVideoLength;
	//	[Export ("maximumVideoLength")]
	//	nint MaximumVideoLength { get; }

	//	// @property (readonly, nonatomic) BOOL tapToFocusEnabled;
	//	[Export ("tapToFocusEnabled")]
	//	bool TapToFocusEnabled { get; }

	//	// @property (readonly, nonatomic) BOOL showCancelButton;
	//	[Export ("showCancelButton")]
	//	bool ShowCancelButton { get; }

	//	// @property (readonly, nonatomic) BOOL showCameraRoll;
	//	[Export ("showCameraRoll")]
	//	bool ShowCameraRoll { get; }

	//	// @property (readonly, nonatomic) BOOL showFilters;
	//	[Export ("showFilters")]
	//	bool ShowFilters { get; }

	//	// @property (readonly, nonatomic) BOOL showFilterIntensitySlider;
	//	[Export ("showFilterIntensitySlider")]
	//	bool ShowFilterIntensitySlider { get; }

	//	// @property (readonly, nonatomic) CGFloat initialFilterIntensity;
	//	[Export ("initialFilterIntensity")]
	//	nfloat InitialFilterIntensity { get; }

	//	// @property (readonly, copy, nonatomic) NSDictionary<NSString *,id> * _Nullable videoOutputSettings;
	//	[NullAllowed, Export ("videoOutputSettings", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> VideoOutputSettings { get; }

	//	// @property (readonly, copy, nonatomic) NSDictionary<NSString *,id> * _Nullable audioOutputSettings;
	//	[NullAllowed, Export ("audioOutputSettings", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> AudioOutputSettings { get; }

	//	// @property (readonly, nonatomic) AVFileType _Nonnull videoRecordingFileType;
	//	[Export ("videoRecordingFileType")]
	//	string VideoRecordingFileType { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull videoRecordingFileExtension;
	//	[Export ("videoRecordingFileExtension")]
	//	string VideoRecordingFileExtension { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(AVAssetWriter * _Nonnull) assetWriterConfigurationClosure;
	//	[NullAllowed, Export ("assetWriterConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<AVAssetWriter> AssetWriterConfigurationClosure { get; }

	//	// @property (readonly, nonatomic) BOOL includeUserLocation;
	//	[Export ("includeUserLocation")]
	//	bool IncludeUserLocation { get; }

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKCameraViewControllerOptions New ();
	//}

	//// @interface PESDKCameraViewControllerOptionsBuilder : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKCameraViewControllerOptionsBuilder
	//{
	//	// @property (nonatomic, strong) UIColor * _Nullable backgroundColor;
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Strong)]
	//	UIColor BackgroundColor { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) cancelButtonConfigurationClosure;
	//	[NullAllowed, Export ("cancelButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> CancelButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) flashButtonConfigurationClosure;
	//	[NullAllowed, Export ("flashButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> FlashButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) switchCameraButtonConfigurationClosure;
	//	[NullAllowed, Export ("switchCameraButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> SwitchCameraButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) cameraRollButtonConfigurationClosure;
	//	[NullAllowed, Export ("cameraRollButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> CameraRollButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) photoActionButtonConfigurationClosure;
	//	[NullAllowed, Export ("photoActionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> PhotoActionButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) filterSelectorButtonConfigurationClosure;
	//	[NullAllowed, Export ("filterSelectorButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> FilterSelectorButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UILabel * _Nonnull) timeLabelConfigurationClosure;
	//	[NullAllowed, Export ("timeLabelConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UILabel> TimeLabelConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) filterIntensitySliderConfigurationClosure;
	//	[NullAllowed, Export ("filterIntensitySliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> FilterIntensitySliderConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull, enum RecordingMode) recordingModeButtonConfigurationClosure;
	//	[NullAllowed, Export ("recordingModeButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton, RecordingMode> RecordingModeButtonConfigurationClosure { get; set; }

	//	// @property (nonatomic) BOOL cropToSquare;
	//	[Export ("cropToSquare")]
	//	bool CropToSquare { get; set; }

	//	// @property (nonatomic) NSInteger maximumVideoLength;
	//	[Export ("maximumVideoLength")]
	//	nint MaximumVideoLength { get; set; }

	//	// @property (nonatomic) BOOL tapToFocusEnabled;
	//	[Export ("tapToFocusEnabled")]
	//	bool TapToFocusEnabled { get; set; }

	//	// @property (nonatomic) BOOL showCancelButton;
	//	[Export ("showCancelButton")]
	//	bool ShowCancelButton { get; set; }

	//	// @property (nonatomic) BOOL showCameraRoll;
	//	[Export ("showCameraRoll")]
	//	bool ShowCameraRoll { get; set; }

	//	// @property (nonatomic) BOOL showFilters;
	//	[Export ("showFilters")]
	//	bool ShowFilters { get; set; }

	//	// @property (nonatomic) BOOL showFilterIntensitySlider;
	//	[Export ("showFilterIntensitySlider")]
	//	bool ShowFilterIntensitySlider { get; set; }

	//	// @property (nonatomic) CGFloat initialFilterIntensity;
	//	[Export ("initialFilterIntensity")]
	//	nfloat InitialFilterIntensity { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable videoOutputSettings;
	//	[NullAllowed, Export ("videoOutputSettings", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> VideoOutputSettings { get; set; }

	//	// @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable audioOutputSettings;
	//	[NullAllowed, Export ("audioOutputSettings", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> AudioOutputSettings { get; set; }

	//	// @property (nonatomic) AVFileType _Nonnull videoRecordingFileType;
	//	[Export ("videoRecordingFileType")]
	//	string VideoRecordingFileType { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull videoRecordingFileExtension;
	//	[Export ("videoRecordingFileExtension")]
	//	string VideoRecordingFileExtension { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(AVAssetWriter * _Nonnull) assetWriterConfigurationClosure;
	//	[NullAllowed, Export ("assetWriterConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<AVAssetWriter> AssetWriterConfigurationClosure { get; set; }

	//	// @property (nonatomic) BOOL includeUserLocation;
	//	[Export ("includeUserLocation")]
	//	bool IncludeUserLocation { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_1600 (PESDKCameraViewControllerOptionsBuilder)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKCameraViewControllerOptionsBuilder))]
	//interface PESDKCameraViewControllerOptionsBuilder_PhotoEditorSDK_Swift_1600
	//{
	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedCameraPositionsAsNSNumbers;
	//	[Export ("allowedCameraPositionsAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedCameraPositionsAsNSNumbers { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedFlashModesAsNSNumbers;
	//	[Export ("allowedFlashModesAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedFlashModesAsNSNumbers { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedTorchModesAsNSNumbers;
	//	[Export ("allowedTorchModesAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedTorchModesAsNSNumbers { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedRecordingModesAsNSNumbers;
	//	[Export ("allowedRecordingModesAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedRecordingModesAsNSNumbers { get; set; }
	//}

	//// @interface PESDKCanvasView : GLKView
	//[iOS (9,0)]
	//[BaseType (typeof(GLKView))]
	//interface PESDKCanvasView
	//{
	//	// @property (readonly, nonatomic, strong) PESDKPainting * _Nonnull painting;
	//	[Export ("painting", ArgumentSemantic.Strong)]
	//	PESDKPainting Painting { get; }

	//	// @property (nonatomic, strong) PESDKTool * _Nonnull activeTool;
	//	[Export ("activeTool", ArgumentSemantic.Strong)]
	//	PESDKTool ActiveTool { get; set; }

	//	// @property (nonatomic, weak) id<PESDKCanvasViewDataSource> _Nullable dataSource;
	//	[NullAllowed, Export ("dataSource", ArgumentSemantic.Weak)]
	//	PESDKCanvasViewDataSource DataSource { get; set; }

	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull uuid;
	//	[Export ("uuid", ArgumentSemantic.Copy)]
	//	NSUuid Uuid { get; }

	//	// @property (readonly, nonatomic) BOOL currentlyPainting;
	//	[Export ("currentlyPainting")]
	//	bool CurrentlyPainting { get; }

	//	// -(instancetype _Nonnull)initWithPainting:(PESDKPainting * _Nonnull)painting activeTool:(PESDKTool * _Nonnull)activeTool uuid:(NSUUID * _Nonnull)uuid frame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithPainting:activeTool:uuid:frame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKPainting painting, PESDKTool activeTool, NSUuid uuid, CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();

	//	// -(void)handlePan:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
	//	[Export ("handlePan:")]
	//	void HandlePan (UIGestureRecognizer gestureRecognizer);

	//	// -(CGPoint)convertPointToDocument:(CGPoint)pt __attribute__((warn_unused_result));
	//	[Export ("convertPointToDocument:")]
	//	CGPoint ConvertPointToDocument (CGPoint pt);

	//	// -(void)drawRect:(CGRect)rect;
	//	[Export ("drawRect:")]
	//	void DrawRect (CGRect rect);
	//}

	//// @protocol PESDKCanvasViewDataSource
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKCanvasViewDataSource
	//{
	//	// @required -(CGRect)canvasViewNormalizedCropRect:(PESDKCanvasView * _Nonnull)canvasView __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("canvasViewNormalizedCropRect:")]
	//	CGRect CanvasViewNormalizedCropRect (PESDKCanvasView canvasView);

	//	// @required -(enum PESDKOrientation)canvasViewAppliedOrientation:(PESDKCanvasView * _Nonnull)canvasView __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("canvasViewAppliedOrientation:")]
	//	PESDKOrientation CanvasViewAppliedOrientation (PESDKCanvasView canvasView);

	//	// @required -(CGFloat)canvasViewStraightenAngle:(PESDKCanvasView * _Nonnull)canvasView __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("canvasViewStraightenAngle:")]
	//	nfloat CanvasViewStraightenAngle (PESDKCanvasView canvasView);

	//	// @required -(UIEdgeInsets)canvasViewImageInsets:(PESDKCanvasView * _Nonnull)canvasView __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("canvasViewImageInsets:")]
	//	UIEdgeInsets CanvasViewImageInsets (PESDKCanvasView canvasView);

	//	// @required -(CGSize)canvasViewOutputImageSize:(PESDKCanvasView * _Nonnull)canvasView __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("canvasViewOutputImageSize:")]
	//	CGSize CanvasViewOutputImageSize (PESDKCanvasView canvasView);
	//}

	//// @interface PESDKCircleGradientView : PESDKFocusGradientView
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKFocusGradientView))]
	//interface PESDKCircleGradientView
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)drawRect:(CGRect)rect;
	//	[Export ("drawRect:")]
	//	void DrawRect (CGRect rect);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();
	//}

	//// @interface PESDKClarityFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKClarityFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
	//	[NullAllowed, Export ("inputIntensity", ArgumentSemantic.Strong)]
	//	NSNumber InputIntensity { get; set; }

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKColor : NSObject
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKColor
	//{
	//	// @property (readonly, nonatomic, strong) UIColor * _Nonnull color;
	//	[Export ("color", ArgumentSemantic.Strong)]
	//	UIColor Color { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull colorName;
	//	[Export ("colorName")]
	//	string ColorName { get; }

	//	// -(instancetype _Nonnull)initWithColor:(UIColor * _Nonnull)color colorName:(NSString * _Nonnull)colorName __attribute__((objc_designated_initializer));
	//	[Export ("initWithColor:colorName:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIColor color, string colorName);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKColor New ();
	//}

	//// @interface PESDKColorCollectionView : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface PESDKColorCollectionView
	//{
	//	// @property (nonatomic, strong) PESDKColorPalette * _Nonnull colorPalette;
	//	[Export ("colorPalette", ArgumentSemantic.Strong)]
	//	PESDKColorPalette ColorPalette { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKColorCollectionViewDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKColorCollectionViewDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable backgroundColor;
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Strong)]
	//	UIColor BackgroundColor { get; set; }

	//	// -(instancetype _Nonnull)initWithColorPalette:(PESDKColorPalette * _Nonnull)colorPalette __attribute__((objc_designated_initializer));
	//	[Export ("initWithColorPalette:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKColorPalette colorPalette);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)selectColorAtIndex:(NSInteger)index animated:(BOOL)animated;
	//	[Export ("selectColorAtIndex:animated:")]
	//	void SelectColorAtIndex (nint index, bool animated);

	//	// @property (readonly, nonatomic) CGSize intrinsicContentSize;
	//	[Export ("intrinsicContentSize")]
	//	CGSize IntrinsicContentSize { get; }
	//}

	//// @interface PhotoEditorSDK_Swift_1795 (PESDKColorCollectionView) <UICollectionViewDelegateFlowLayout>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKColorCollectionView))]
	//interface PESDKColorCollectionView_PhotoEditorSDK_Swift_1795 : IUICollectionViewDelegateFlowLayout
	//{
	//	// -(UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section __attribute__((warn_unused_result));
	//	[Export ("collectionView:layout:insetForSectionAtIndex:")]
	//	UIEdgeInsets CollectionView (UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);

	//	// -(void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:didSelectItemAtIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, NSIndexPath indexPath);
	//}

	//// @interface PhotoEditorSDK_Swift_1804 (PESDKColorCollectionView) <UICollectionViewDataSource>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKColorCollectionView))]
	//interface PESDKColorCollectionView_PhotoEditorSDK_Swift_1804 : IUICollectionViewDataSource
	//{
	//	// -(NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView __attribute__((warn_unused_result));
	//	[Export ("numberOfSectionsInCollectionView:")]
	//	nint NumberOfSectionsInCollectionView (UICollectionView collectionView);

	//	// -(NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section __attribute__((warn_unused_result));
	//	[Export ("collectionView:numberOfItemsInSection:")]
	//	nint CollectionView (UICollectionView collectionView, nint section);

	//	// -(UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((warn_unused_result));
	//	[Export ("collectionView:cellForItemAtIndexPath:")]
	//	UICollectionViewCell CollectionView (UICollectionView collectionView, NSIndexPath indexPath);
	//}

	//// @interface PESDKColorCollectionViewCell : UICollectionViewCell
	//[iOS (9,0)]
	//[BaseType (typeof(UICollectionViewCell))]
	//interface PESDKColorCollectionViewCell
	//{
	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull colorView;
	//	[Export ("colorView", ArgumentSemantic.Strong)]
	//	UIView ColorView { get; }

	//	// @property (readonly, nonatomic, strong) UIImageView * _Nonnull imageView;
	//	[Export ("imageView", ArgumentSemantic.Strong)]
	//	UIImageView ImageView { get; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)prepareForReuse;
	//	[Export ("prepareForReuse")]
	//	void PrepareForReuse ();

	//	// @property (getter = isSelected, nonatomic) BOOL selected;
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }
	//}

	//// @protocol PESDKColorCollectionViewDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKColorCollectionViewDelegate
	//{
	//	// @required -(void)colorCollectionView:(PESDKColorCollectionView * _Nonnull)colorCollectionView didSelectColor:(PESDKColor * _Nonnull)color;
	//	[Abstract]
	//	[Export ("colorCollectionView:didSelectColor:")]
	//	void DidSelectColor (PESDKColorCollectionView colorCollectionView, PESDKColor color);
	//}

	//// @interface PESDKColorMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKColorMenuItem
	//{
	//	// @property (readonly, nonatomic, strong) UIColor * _Nonnull color;
	//	[Export ("color", ArgumentSemantic.Strong)]
	//	UIColor Color { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull colorName;
	//	[Export ("colorName")]
	//	string ColorName { get; }

	//	// -(instancetype _Nonnull)initWithColor:(UIColor * _Nonnull)color colorName:(NSString * _Nonnull)colorName __attribute__((objc_designated_initializer));
	//	[Export ("initWithColor:colorName:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIColor color, string colorName);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKColorMenuItem New ();
	//}

	//// @interface PESDKColorPalette : NSObject
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKColorPalette
	//{
	//	// @property (readonly, copy, nonatomic) NSArray<PESDKColor *> * _Nonnull colors;
	//	[Export ("colors", ArgumentSemantic.Copy)]
	//	PESDKColor[] Colors { get; }

	//	// -(instancetype _Nonnull)initWithColors:(NSArray<PESDKColor *> * _Nonnull)colors __attribute__((objc_designated_initializer));
	//	[Export ("initWithColors:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKColor[] colors);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKColorPalette New ();
	//}

	//// @interface PESDKColorPickerView : UIControl
	//[iOS (9,0)]
	//[BaseType (typeof(UIControl))]
	//interface PESDKColorPickerView
	//{
	//	// @property (nonatomic, strong) UIColor * _Nonnull color;
	//	[Export ("color", ArgumentSemantic.Strong)]
	//	UIColor Color { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKColorizeFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKColorizeFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable inputColor;
	//	[NullAllowed, Export ("inputColor", ArgumentSemantic.Strong)]
	//	UIColor InputColor { get; set; }

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKConfiguration : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKConfiguration
	//{
	//	// @property (readonly, nonatomic, strong) UIColor * _Nonnull backgroundColor;
	//	[Export ("backgroundColor", ArgumentSemantic.Strong)]
	//	UIColor BackgroundColor { get; }

	//	// @property (readonly, nonatomic, strong) UIColor * _Nonnull menuBackgroundColor;
	//	[Export ("menuBackgroundColor", ArgumentSemantic.Strong)]
	//	UIColor MenuBackgroundColor { get; }

	//	// @property (readonly, nonatomic, strong) PESDKCameraViewControllerOptions * _Nonnull cameraViewControllerOptions;
	//	[Export ("cameraViewControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKCameraViewControllerOptions CameraViewControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKPhotoEditViewControllerOptions * _Nonnull photoEditViewControllerOptions;
	//	[Export ("photoEditViewControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditViewControllerOptions PhotoEditViewControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKFilterToolControllerOptions * _Nonnull filterToolControllerOptions;
	//	[Export ("filterToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKFilterToolControllerOptions FilterToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKOverlayToolControllerOptions * _Nonnull overlayToolControllerOptions;
	//	[Export ("overlayToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKOverlayToolControllerOptions OverlayToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKStickerToolControllerOptions * _Nonnull stickerToolControllerOptions;
	//	[Export ("stickerToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKStickerToolControllerOptions StickerToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKStickerOptionsToolControllerOptions * _Nonnull stickerOptionsToolControllerOptions;
	//	[Export ("stickerOptionsToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKStickerOptionsToolControllerOptions StickerOptionsToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKColorToolControllerOptions * _Nonnull stickerColorToolControllerOptions;
	//	[Export ("stickerColorToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKColorToolControllerOptions StickerColorToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKTransformToolControllerOptions * _Nonnull transformToolControllerOptions;
	//	[Export ("transformToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKTransformToolControllerOptions TransformToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKFocusToolControllerOptions * _Nonnull focusToolControllerOptions;
	//	[Export ("focusToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKFocusToolControllerOptions FocusToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKTextToolControllerOptions * _Nonnull textToolControllerOptions;
	//	[Export ("textToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKTextToolControllerOptions TextToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) IMGLTextOptionsToolControllerOptions * _Nonnull textOptionsToolControllerOptions;
	//	[Export ("textOptionsToolControllerOptions", ArgumentSemantic.Strong)]
	//	IMGLTextOptionsToolControllerOptions TextOptionsToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKTextFontToolControllerOptions * _Nonnull textFontToolControllerOptions;
	//	[Export ("textFontToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKTextFontToolControllerOptions TextFontToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKTextColorToolControllerOptions * _Nonnull textColorToolControllerOptions;
	//	[Export ("textColorToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKTextColorToolControllerOptions TextColorToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKAdjustToolControllerOptions * _Nonnull adjustToolControllerOptions;
	//	[Export ("adjustToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKAdjustToolControllerOptions AdjustToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKBrushToolControllerOptions * _Nonnull brushToolControllerOptions;
	//	[Export ("brushToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKBrushToolControllerOptions BrushToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKBrushColorToolControllerOptions * _Nonnull brushColorToolControllerOptions;
	//	[Export ("brushColorToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKBrushColorToolControllerOptions BrushColorToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKFrameToolControllerOptions * _Nonnull frameToolControllerOptions;
	//	[Export ("frameToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKFrameToolControllerOptions FrameToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKTextDesignToolControllerOptions * _Nonnull textDesignToolControllerOptions;
	//	[Export ("textDesignToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKTextDesignToolControllerOptions TextDesignToolControllerOptions { get; }

	//	// @property (readonly, nonatomic, strong) PESDKTextDesignOptionsToolControllerOptions * _Nonnull textDesignOptionsToolControllerOptions;
	//	[Export ("textDesignOptionsToolControllerOptions", ArgumentSemantic.Strong)]
	//	PESDKTextDesignOptionsToolControllerOptions TextDesignOptionsToolControllerOptions { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(void (^ _Nonnull)(PESDKConfigurationBuilder * _Nonnull))builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (Action<PESDKConfigurationBuilder> builder);
	//}

	//// @interface PESDKConfigurationBuilder : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKConfigurationBuilder
	//{
	//	// @property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
	//	[Export ("backgroundColor", ArgumentSemantic.Strong)]
	//	UIColor BackgroundColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull menuBackgroundColor;
	//	[Export ("menuBackgroundColor", ArgumentSemantic.Strong)]
	//	UIColor MenuBackgroundColor { get; set; }

	//	// -(void)configureCameraViewController:(void (^ _Nonnull)(PESDKCameraViewControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureCameraViewController:")]
	//	void ConfigureCameraViewController (Action<PESDKCameraViewControllerOptionsBuilder> builder);

	//	// -(void)configurePhotoEditorViewController:(void (^ _Nonnull)(PESDKPhotoEditViewControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configurePhotoEditorViewController:")]
	//	void ConfigurePhotoEditorViewController (Action<PESDKPhotoEditViewControllerOptionsBuilder> builder);

	//	// -(void)configureFilterToolController:(void (^ _Nonnull)(PESDKFilterToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureFilterToolController:")]
	//	void ConfigureFilterToolController (Action<PESDKFilterToolControllerOptionsBuilder> builder);

	//	// -(void)configureOverlayToolController:(void (^ _Nonnull)(PESDKOverlayToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureOverlayToolController:")]
	//	void ConfigureOverlayToolController (Action<PESDKOverlayToolControllerOptionsBuilder> builder);

	//	// -(void)configureStickerToolController:(void (^ _Nonnull)(PESDKStickerToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureStickerToolController:")]
	//	void ConfigureStickerToolController (Action<PESDKStickerToolControllerOptionsBuilder> builder);

	//	// -(void)configureStickerOptionsToolController:(void (^ _Nonnull)(PESDKStickerOptionsToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureStickerOptionsToolController:")]
	//	void ConfigureStickerOptionsToolController (Action<PESDKStickerOptionsToolControllerOptionsBuilder> builder);

	//	// -(void)configureStickerColorToolController:(void (^ _Nonnull)(PESDKColorToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureStickerColorToolController:")]
	//	void ConfigureStickerColorToolController (Action<PESDKColorToolControllerOptionsBuilder> builder);

	//	// -(void)configureFocusToolController:(void (^ _Nonnull)(PESDKFocusToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureFocusToolController:")]
	//	void ConfigureFocusToolController (Action<PESDKFocusToolControllerOptionsBuilder> builder);

	//	// -(void)transformToolControllerOptions:(void (^ _Nonnull)(PESDKTransformToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("transformToolControllerOptions:")]
	//	void TransformToolControllerOptions (Action<PESDKTransformToolControllerOptionsBuilder> builder);

	//	// -(void)configureTextToolController:(void (^ _Nonnull)(PESDKTextToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureTextToolController:")]
	//	void ConfigureTextToolController (Action<PESDKTextToolControllerOptionsBuilder> builder);

	//	// -(void)configureTextOptionsToolController:(void (^ _Nonnull)(PESDKTextOptionsToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureTextOptionsToolController:")]
	//	void ConfigureTextOptionsToolController (Action<PESDKTextOptionsToolControllerOptionsBuilder> builder);

	//	// -(void)configureTextFontToolController:(void (^ _Nonnull)(PESDKTextFontToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureTextFontToolController:")]
	//	void ConfigureTextFontToolController (Action<PESDKTextFontToolControllerOptionsBuilder> builder);

	//	// -(void)configureTextColorToolController:(void (^ _Nonnull)(PESDKTextColorToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureTextColorToolController:")]
	//	void ConfigureTextColorToolController (Action<PESDKTextColorToolControllerOptionsBuilder> builder);

	//	// -(void)configureAdjustToolController:(void (^ _Nonnull)(PESDKAdjustToolControllerOptionsBuilder * _Nonnull))builder __attribute__((availability(ios, introduced=9.0)));
	//	[iOS (9,0)]
	//	[Export ("configureAdjustToolController:")]
	//	void ConfigureAdjustToolController (Action<PESDKAdjustToolControllerOptionsBuilder> builder);

	//	// -(void)configureBrushToolController:(void (^ _Nonnull)(PESDKBrushToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureBrushToolController:")]
	//	void ConfigureBrushToolController (Action<PESDKBrushToolControllerOptionsBuilder> builder);

	//	// -(void)configureBrushColorToolController:(void (^ _Nonnull)(PESDKBrushColorToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureBrushColorToolController:")]
	//	void ConfigureBrushColorToolController (Action<PESDKBrushColorToolControllerOptionsBuilder> builder);

	//	// -(void)configureTransformToolController:(void (^ _Nonnull)(PESDKTransformToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureTransformToolController:")]
	//	void ConfigureTransformToolController (Action<PESDKTransformToolControllerOptionsBuilder> builder);

	//	// -(void)configureFrameToolController:(void (^ _Nonnull)(PESDKFrameToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureFrameToolController:")]
	//	void ConfigureFrameToolController (Action<PESDKFrameToolControllerOptionsBuilder> builder);

	//	// -(void)configureTextDesignToolController:(void (^ _Nonnull)(PESDKTextDesignToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureTextDesignToolController:")]
	//	void ConfigureTextDesignToolController (Action<PESDKTextDesignToolControllerOptionsBuilder> builder);

	//	// -(void)configureTextDesignOptionsToolController:(void (^ _Nonnull)(PESDKTextDesignOptionsToolControllerOptionsBuilder * _Nonnull))builder;
	//	[Export ("configureTextDesignOptionsToolController:")]
	//	void ConfigureTextDesignOptionsToolController (Action<PESDKTextDesignOptionsToolControllerOptionsBuilder> builder);
	//}

	//// @interface PESDKCropAndStraightenView : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface PESDKCropAndStraightenView
	//{
	//	// @property (nonatomic, strong) PESDKSpriteContainerView * _Nullable spriteContainerView;
	//	[NullAllowed, Export ("spriteContainerView", ArgumentSemantic.Strong)]
	//	PESDKSpriteContainerView SpriteContainerView { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKCropAndStraightenViewDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKCropAndStraightenViewDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable image;
	//	[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
	//	UIImage Image { get; set; }

	//	// @property (nonatomic) CGFloat straightenAngle;
	//	[Export ("straightenAngle")]
	//	nfloat StraightenAngle { get; set; }

	//	// @property (nonatomic) CGRect cropRect;
	//	[Export ("cropRect", ArgumentSemantic.Assign)]
	//	CGRect CropRect { get; set; }

	//	// @property (nonatomic) enum PESDKOrientation orientation;
	//	[Export ("orientation", ArgumentSemantic.Assign)]
	//	PESDKOrientation Orientation { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();

	//	// @property (readonly, nonatomic) CGRect imageCropRect;
	//	[Export ("imageCropRect")]
	//	CGRect ImageCropRect { get; }

	//	// -(CGRect)imageCropRectForViewRect:(CGRect)viewRect __attribute__((warn_unused_result));
	//	[Export ("imageCropRectForViewRect:")]
	//	CGRect ImageCropRectForViewRect (CGRect viewRect);

	//	// -(void)fitImageRegion:(CGRect)imageRegion inCropRectAnimated:(BOOL)animated;
	//	[Export ("fitImageRegion:inCropRectAnimated:")]
	//	void FitImageRegion (CGRect imageRegion, bool animated);

	//	// @property (readonly, nonatomic) BOOL isTracking;
	//	[Export ("isTracking")]
	//	bool IsTracking { get; }

	//	// @property (readonly, nonatomic) BOOL isDecelerating;
	//	[Export ("isDecelerating")]
	//	bool IsDecelerating { get; }

	//	// @property (nonatomic) CGRect canvasFrame;
	//	[Export ("canvasFrame", ArgumentSemantic.Assign)]
	//	CGRect CanvasFrame { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_2108 (PESDKCropAndStraightenView) <UIGestureRecognizerDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKCropAndStraightenView))]
	//interface PESDKCropAndStraightenView_PhotoEditorSDK_Swift_2108 : IUIGestureRecognizerDelegate
	//{
	//	// -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer __attribute__((warn_unused_result));
	//	[Export ("gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:")]
	//	bool GestureRecognizer (UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);
	//}

	//// @interface PhotoEditorSDK_Swift_2115 (PESDKCropAndStraightenView) <UIScrollViewDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKCropAndStraightenView))]
	//interface PESDKCropAndStraightenView_PhotoEditorSDK_Swift_2115 : IUIScrollViewDelegate
	//{
	//	// -(void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewDidScroll:")]
	//	void ScrollViewDidScroll (UIScrollView scrollView);

	//	// -(void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewDidZoom:")]
	//	void ScrollViewDidZoom (UIScrollView scrollView);

	//	// -(void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
	//	[Export ("scrollViewDidEndDragging:willDecelerate:")]
	//	void ScrollViewDidEndDragging (UIScrollView scrollView, bool decelerate);

	//	// -(void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
	//	[Export ("scrollViewDidEndZooming:withView:atScale:")]
	//	void ScrollViewDidEndZooming (UIScrollView scrollView, [NullAllowed] UIView view, nfloat scale);

	//	// -(void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewDidEndDecelerating:")]
	//	void ScrollViewDidEndDecelerating (UIScrollView scrollView);

	//	// -(UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView __attribute__((warn_unused_result));
	//	[Export ("viewForZoomingInScrollView:")]
	//	[return: NullAllowed]
	//	UIView ViewForZoomingInScrollView (UIScrollView scrollView);
	//}

	//// @protocol PESDKCropAndStraightenViewDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKCropAndStraightenViewDelegate
	//{
	//	// @required -(void)cropAndStraightenViewWillBeginTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
	//	[Abstract]
	//	[Export ("cropAndStraightenViewWillBeginTracking:")]
	//	void CropAndStraightenViewWillBeginTracking (PESDKCropAndStraightenView cropAndStraightenView);

	//	// @required -(void)cropAndStraightenViewDidEndTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
	//	[Abstract]
	//	[Export ("cropAndStraightenViewDidEndTracking:")]
	//	void CropAndStraightenViewDidEndTracking (PESDKCropAndStraightenView cropAndStraightenView);

	//	// @required -(void)cropAndStraightenViewDidTrack:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
	//	[Abstract]
	//	[Export ("cropAndStraightenViewDidTrack:")]
	//	void CropAndStraightenViewDidTrack (PESDKCropAndStraightenView cropAndStraightenView);
	//}

	//// @interface PESDKCropAspect : NSObject
	//[BaseType (typeof(NSObject))]
	//interface PESDKCropAspect
	//{
	//	// -(instancetype _Nonnull)initWithWidth:(CGFloat)width height:(CGFloat)height;
	//	[Export ("initWithWidth:height:")]
	//	IntPtr Constructor (nfloat width, nfloat height);

	//	// -(instancetype _Nonnull)initWithWidth:(CGFloat)width height:(CGFloat)height rotatable:(BOOL)rotatable;
	//	[Export ("initWithWidth:height:rotatable:")]
	//	IntPtr Constructor (nfloat width, nfloat height, bool rotatable);

	//	// -(instancetype _Nonnull)initWithWidth:(CGFloat)width height:(CGFloat)height localizedName:(NSString * _Nonnull)localizedName;
	//	[Export ("initWithWidth:height:localizedName:")]
	//	IntPtr Constructor (nfloat width, nfloat height, string localizedName);

	//	// -(instancetype _Nonnull)initWithWidth:(CGFloat)width height:(CGFloat)height localizedName:(NSString * _Nonnull)localizedName rotatable:(BOOL)rotatable __attribute__((objc_designated_initializer));
	//	[Export ("initWithWidth:height:localizedName:rotatable:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (nfloat width, nfloat height, string localizedName, bool rotatable);

	//	// @property (readonly, nonatomic) CGFloat width;
	//	[Export ("width")]
	//	nfloat Width { get; }

	//	// @property (readonly, nonatomic) CGFloat height;
	//	[Export ("height")]
	//	nfloat Height { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull localizedName;
	//	[Export ("localizedName")]
	//	string LocalizedName { get; }

	//	// @property (readonly, nonatomic) BOOL isRotatable;
	//	[Export ("isRotatable")]
	//	bool IsRotatable { get; }

	//	// @property (readonly, nonatomic) CGFloat ratio;
	//	[Export ("ratio")]
	//	nfloat Ratio { get; }

	//	// -(CGFloat)widthForHeight:(CGFloat)height __attribute__((warn_unused_result));
	//	[Export ("widthForHeight:")]
	//	nfloat WidthForHeight (nfloat height);

	//	// -(CGFloat)heightForWidth:(CGFloat)width __attribute__((warn_unused_result));
	//	[Export ("heightForWidth:")]
	//	nfloat HeightForWidth (nfloat width);

	//	// @property (readonly, nonatomic, strong) PESDKCropAspect * _Nonnull inversed;
	//	[Export ("inversed", ArgumentSemantic.Strong)]
	//	PESDKCropAspect Inversed { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull description;
	//	[Export ("description")]
	//	string Description { get; }
	//}

	//// @interface PESDKCropAspectMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKCropAspectMenuItem
	//{
	//	// @property (readonly, nonatomic, strong) PESDKCropAspect * _Nullable cropAspect;
	//	[NullAllowed, Export ("cropAspect", ArgumentSemantic.Strong)]
	//	PESDKCropAspect CropAspect { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; }

	//	// @property (readonly, nonatomic) BOOL rotatable;
	//	[Export ("rotatable")]
	//	bool Rotatable { get; }

	//	// -(instancetype _Nonnull)initWithCropAspect:(PESDKCropAspect * _Nonnull)cropAspect __attribute__((objc_designated_initializer));
	//	[Export ("initWithCropAspect:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKCropAspect cropAspect);

	//	// -(instancetype _Nonnull)initWithTitle:(NSString * _Nonnull)title __attribute__((objc_designated_initializer));
	//	[Export ("initWithTitle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string title);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKCropAspectMenuItem New ();
	//}

	//// @interface PESDKCropHandleView : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface PESDKCropHandleView
	//{
	//	// @property (readonly, nonatomic) BOOL isTop;
	//	[Export ("isTop")]
	//	bool IsTop { get; }

	//	// @property (readonly, nonatomic) BOOL isLeft;
	//	[Export ("isLeft")]
	//	bool IsLeft { get; }

	//	// @property (readonly, nonatomic) BOOL isRight;
	//	[Export ("isRight")]
	//	bool IsRight { get; }

	//	// @property (readonly, nonatomic) BOOL isBottom;
	//	[Export ("isBottom")]
	//	bool IsBottom { get; }

	//	// @property (readonly, nonatomic) BOOL isCorner;
	//	[Export ("isCorner")]
	//	bool IsCorner { get; }

	//	// @property (readonly, nonatomic) BOOL isLateral;
	//	[Export ("isLateral")]
	//	bool IsLateral { get; }

	//	// @property (nonatomic) BOOL isLineWeightHeavy;
	//	[Export ("isLineWeightHeavy")]
	//	bool IsLineWeightHeavy { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame;
	//	[Export ("initWithFrame:")]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKCropMaskView : UIView
	//[BaseType (typeof(UIView))]
	//interface PESDKCropMaskView
	//{
	//	// @property (readonly, nonatomic, strong) UIVisualEffectView * _Nonnull effectView;
	//	[Export ("effectView", ArgumentSemantic.Strong)]
	//	UIVisualEffectView EffectView { get; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKCropOverlayView : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface PESDKCropOverlayView
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (nonatomic) BOOL isMaskedContentVisible;
	//	[Export ("isMaskedContentVisible")]
	//	bool IsMaskedContentVisible { get; set; }

	//	// -(void)setMaskedContentVisible:(BOOL)visible animated:(BOOL)animated;
	//	[Export ("setMaskedContentVisible:animated:")]
	//	void SetMaskedContentVisible (bool visible, bool animated);

	//	// @property (nonatomic) CGRect cropRect;
	//	[Export ("cropRect", ArgumentSemantic.Assign)]
	//	CGRect CropRect { get; set; }

	//	// @property (nonatomic) BOOL isCropGridVisible;
	//	[Export ("isCropGridVisible")]
	//	bool IsCropGridVisible { get; set; }

	//	// -(void)setCropGridVisible:(BOOL)visible animated:(BOOL)animated;
	//	[Export ("setCropGridVisible:animated:")]
	//	void SetCropGridVisible (bool visible, bool animated);

	//	// @property (nonatomic) BOOL isStraightenGridVisible;
	//	[Export ("isStraightenGridVisible")]
	//	bool IsStraightenGridVisible { get; set; }

	//	// -(void)setStraightenGridVisible:(BOOL)visible animated:(BOOL)animated;
	//	[Export ("setStraightenGridVisible:animated:")]
	//	void SetStraightenGridVisible (bool visible, bool animated);
	//}

	//// @interface PESDKCustomAdjustmentsFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKCustomAdjustmentsFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputBrightness;
	//	[NullAllowed, Export ("inputBrightness", ArgumentSemantic.Strong)]
	//	NSNumber InputBrightness { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputContrast;
	//	[NullAllowed, Export ("inputContrast", ArgumentSemantic.Strong)]
	//	NSNumber InputContrast { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputSaturation;
	//	[NullAllowed, Export ("inputSaturation", ArgumentSemantic.Strong)]
	//	NSNumber InputSaturation { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputShadows;
	//	[NullAllowed, Export ("inputShadows", ArgumentSemantic.Strong)]
	//	NSNumber InputShadows { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputHighlights;
	//	[NullAllowed, Export ("inputHighlights", ArgumentSemantic.Strong)]
	//	NSNumber InputHighlights { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputExposure;
	//	[NullAllowed, Export ("inputExposure", ArgumentSemantic.Strong)]
	//	NSNumber InputExposure { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputGamma;
	//	[NullAllowed, Export ("inputGamma", ArgumentSemantic.Strong)]
	//	NSNumber InputGamma { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputBlacks;
	//	[NullAllowed, Export ("inputBlacks", ArgumentSemantic.Strong)]
	//	NSNumber InputBlacks { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputWhites;
	//	[NullAllowed, Export ("inputWhites", ArgumentSemantic.Strong)]
	//	NSNumber InputWhites { get; set; }

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKCustomPatchConfiguration : NSObject
	//[BaseType (typeof(NSObject))]
	//interface PESDKCustomPatchConfiguration
	//{
	//	// @property (nonatomic, strong) PESDKFrameImageGroup * _Nullable topImageGroup;
	//	[NullAllowed, Export ("topImageGroup", ArgumentSemantic.Strong)]
	//	PESDKFrameImageGroup TopImageGroup { get; set; }

	//	// @property (nonatomic, strong) PESDKFrameImageGroup * _Nullable leftImageGroup;
	//	[NullAllowed, Export ("leftImageGroup", ArgumentSemantic.Strong)]
	//	PESDKFrameImageGroup LeftImageGroup { get; set; }

	//	// @property (nonatomic, strong) PESDKFrameImageGroup * _Nullable bottomImageGroup;
	//	[NullAllowed, Export ("bottomImageGroup", ArgumentSemantic.Strong)]
	//	PESDKFrameImageGroup BottomImageGroup { get; set; }

	//	// @property (nonatomic, strong) PESDKFrameImageGroup * _Nullable rightImageGroup;
	//	[NullAllowed, Export ("rightImageGroup", ArgumentSemantic.Strong)]
	//	PESDKFrameImageGroup RightImageGroup { get; set; }

	//	// @property (nonatomic) enum FrameLayoutMode layoutMode;
	//	[Export ("layoutMode", ArgumentSemantic.Assign)]
	//	FrameLayoutMode LayoutMode { get; set; }
	//}

	//// @protocol PESDKFrameBuilderProtocol
	//[Protocol, Model]
	//interface PESDKFrameBuilderProtocol
	//{
	//	// @required -(void)buildWithSize:(CGSize)size relativeScale:(CGFloat)relativeScale completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
	//	[Abstract]
	//	[Export ("buildWithSize:relativeScale:completion:")]
	//	void RelativeScale (CGSize size, nfloat relativeScale, Action<UIImage> completion);
	//}

	//// @interface PESDKCustomPatchFrameBuilder : NSObject <PESDKFrameBuilderProtocol>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKCustomPatchFrameBuilder : IPESDKFrameBuilderProtocol
	//{
	//	// -(instancetype _Nonnull)initWithConfiguration:(PESDKCustomPatchConfiguration * _Nonnull)configuration __attribute__((objc_designated_initializer));
	//	[Export ("initWithConfiguration:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKCustomPatchConfiguration configuration);

	//	// -(void)buildWithSize:(CGSize)size relativeScale:(CGFloat)relativeScale completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
	//	[Export ("buildWithSize:relativeScale:completion:")]
	//	void BuildWithSize (CGSize size, nfloat relativeScale, Action<UIImage> completion);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKCustomPatchFrameBuilder New ();
	//}

	//// @interface PESDKDefaultDynamicFrames : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKDefaultDynamicFrames
	//{
	//	// @property (readonly, nonatomic, strong, class) PESDKCustomPatchFrameBuilder * _Nonnull artDecorFrameBuilder;
	//	[Static]
	//	[Export ("artDecorFrameBuilder", ArgumentSemantic.Strong)]
	//	PESDKCustomPatchFrameBuilder ArtDecorFrameBuilder { get; }

	//	// @property (readonly, nonatomic, strong, class) PESDKCustomPatchFrameBuilder * _Nonnull woodPassepartoutFrameBuilder;
	//	[Static]
	//	[Export ("woodPassepartoutFrameBuilder", ArgumentSemantic.Strong)]
	//	PESDKCustomPatchFrameBuilder WoodPassepartoutFrameBuilder { get; }

	//	// @property (readonly, nonatomic, strong, class) PESDKCustomPatchFrameBuilder * _Nonnull blackPassepartoutFrameBuilder;
	//	[Static]
	//	[Export ("blackPassepartoutFrameBuilder", ArgumentSemantic.Strong)]
	//	PESDKCustomPatchFrameBuilder BlackPassepartoutFrameBuilder { get; }

	//	// @property (readonly, nonatomic, strong, class) PESDKCustomPatchFrameBuilder * _Nonnull diaFrameBuilder;
	//	[Static]
	//	[Export ("diaFrameBuilder", ArgumentSemantic.Strong)]
	//	PESDKCustomPatchFrameBuilder DiaFrameBuilder { get; }
	//}

	//// @protocol PESDKLoggerProtocol
	//[Protocol, Model]
	//interface PESDKLoggerProtocol
	//{
	//	// @required -(void)error:(NSString * _Nonnull)message;
	//	[Abstract]
	//	[Export ("error:")]
	//	void Error (string message);

	//	// @required -(void)warn:(NSString * _Nonnull)message;
	//	[Abstract]
	//	[Export ("warn:")]
	//	void Warn (string message);

	//	// @required -(void)info:(NSString * _Nonnull)message;
	//	[Abstract]
	//	[Export ("info:")]
	//	void Info (string message);

	//	// @required -(void)debug:(NSString * _Nonnull)message;
	//	[Abstract]
	//	[Export ("debug:")]
	//	void Debug (string message);

	//	// @required -(void)trace:(NSString * _Nonnull)message;
	//	[Abstract]
	//	[Export ("trace:")]
	//	void Trace (string message);
	//}

	//// @interface PESDKDefaultLogger : NSObject <PESDKLoggerProtocol>
	//[BaseType (typeof(NSObject))]
	//interface PESDKDefaultLogger : IPESDKLoggerProtocol
	//{
	//	// -(void)error:(NSString * _Nonnull)message;
	//	[Export ("error:")]
	//	void Error (string message);

	//	// -(void)warn:(NSString * _Nonnull)message;
	//	[Export ("warn:")]
	//	void Warn (string message);

	//	// -(void)info:(NSString * _Nonnull)message;
	//	[Export ("info:")]
	//	void Info (string message);

	//	// -(void)debug:(NSString * _Nonnull)message;
	//	[Export ("debug:")]
	//	void Debug (string message);

	//	// -(void)trace:(NSString * _Nonnull)message;
	//	[Export ("trace:")]
	//	void Trace (string message);
	//}

	//// @protocol PESDKProgressView
	//[Protocol, Model]
	//interface PESDKProgressView
	//{
	//	// @required -(void)showWithMessage:(NSString * _Nonnull)message;
	//	[Abstract]
	//	[Export ("showWithMessage:")]
	//	void ShowWithMessage (string message);

	//	// @required -(void)hide;
	//	[Abstract]
	//	[Export ("hide")]
	//	void Hide ();
	//}

	//// @interface PESDKDefaultProgressView : NSObject <PESDKProgressView>
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKDefaultProgressView : IPESDKProgressView
	//{
	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull overlayView;
	//	[Export ("overlayView", ArgumentSemantic.Strong)]
	//	UIView OverlayView { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull backgroundView;
	//	[Export ("backgroundView", ArgumentSemantic.Strong)]
	//	UIView BackgroundView { get; }

	//	// @property (readonly, nonatomic, strong) UIImageView * _Nonnull imageView;
	//	[Export ("imageView", ArgumentSemantic.Strong)]
	//	UIImageView ImageView { get; }

	//	// @property (readonly, nonatomic, strong) UILabel * _Nonnull label;
	//	[Export ("label", ArgumentSemantic.Strong)]
	//	UILabel Label { get; }

	//	// @property (nonatomic) double animationDuration;
	//	[Export ("animationDuration")]
	//	double AnimationDuration { get; set; }

	//	// @property (readonly, nonatomic, strong, class) PESDKDefaultProgressView * _Nonnull sharedView;
	//	[Static]
	//	[Export ("sharedView", ArgumentSemantic.Strong)]
	//	PESDKDefaultProgressView SharedView { get; }

	//	// -(void)showWithMessage:(NSString * _Nonnull)message;
	//	[Export ("showWithMessage:")]
	//	void ShowWithMessage (string message);

	//	// -(void)hide;
	//	[Export ("hide")]
	//	void Hide ();
	//}

	//// @interface PESDKToolbarItem : NSObject
	//[BaseType (typeof(NSObject))]
	//interface PESDKToolbarItem
	//{
	//	// @property (nonatomic, strong) UIView * _Nullable titleView;
	//	[NullAllowed, Export ("titleView", ArgumentSemantic.Strong)]
	//	UIView TitleView { get; set; }

	//	// @property (nonatomic, strong) PESDKToolbarButton * _Nullable leftButton __attribute__((deprecated("Use `leadingButton` instead.")));
	//	[NullAllowed, Export ("leftButton", ArgumentSemantic.Strong)]
	//	PESDKToolbarButton LeftButton { get; set; }

	//	// @property (nonatomic, strong) PESDKToolbarButton * _Nullable rightButton __attribute__((deprecated("Use `trailingButton` instead.")));
	//	[NullAllowed, Export ("rightButton", ArgumentSemantic.Strong)]
	//	PESDKToolbarButton RightButton { get; set; }

	//	// @property (nonatomic, strong) PESDKToolbarButton * _Nullable leadingButton;
	//	[NullAllowed, Export ("leadingButton", ArgumentSemantic.Strong)]
	//	PESDKToolbarButton LeadingButton { get; set; }

	//	// @property (nonatomic, strong) PESDKToolbarButton * _Nullable trailingButton;
	//	[NullAllowed, Export ("trailingButton", ArgumentSemantic.Strong)]
	//	PESDKToolbarButton TrailingButton { get; set; }
	//}

	//// @interface PESDKDefaultToolbarItem : PESDKToolbarItem
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolbarItem))]
	//interface PESDKDefaultToolbarItem
	//{
	//	// @property (nonatomic, strong) UILabel * _Nonnull titleLabel;
	//	[Export ("titleLabel", ArgumentSemantic.Strong)]
	//	UILabel TitleLabel { get; set; }

	//	// @property (nonatomic, strong) PESDKToolbarButton * _Nonnull discardButton;
	//	[Export ("discardButton", ArgumentSemantic.Strong)]
	//	PESDKToolbarButton DiscardButton { get; set; }

	//	// @property (nonatomic, strong) PESDKToolbarButton * _Nonnull applyButton;
	//	[Export ("applyButton", ArgumentSemantic.Strong)]
	//	PESDKToolbarButton ApplyButton { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable titleView;
	//	[NullAllowed, Export ("titleView", ArgumentSemantic.Strong)]
	//	UIView TitleView { get; set; }

	//	// @property (nonatomic, strong) PESDKToolbarButton * _Nullable leadingButton;
	//	[NullAllowed, Export ("leadingButton", ArgumentSemantic.Strong)]
	//	PESDKToolbarButton LeadingButton { get; set; }

	//	// @property (nonatomic, strong) PESDKToolbarButton * _Nullable trailingButton;
	//	[NullAllowed, Export ("trailingButton", ArgumentSemantic.Strong)]
	//	PESDKToolbarButton TrailingButton { get; set; }
	//}

	//// @interface Deserializer : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface Deserializer
	//{
	//}

	//// @interface PESDKDeviceOrientationController : NSObject
	//[BaseType (typeof(NSObject))]
	//interface PESDKDeviceOrientationController
	//{
	//	// -(void)start;
	//	[Export ("start")]
	//	void Start ();

	//	// -(void)stop;
	//	[Export ("stop")]
	//	void Stop ();
	//}

	//// @interface PESDKFilterCollectionViewCell : UICollectionViewCell
	//[iOS (9,0)]
	//[BaseType (typeof(UICollectionViewCell))]
	//interface PESDKFilterCollectionViewCell
	//{
	//	// @property (readonly, nonatomic, strong) UIImageView * _Nonnull imageView;
	//	[Export ("imageView", ArgumentSemantic.Strong)]
	//	UIImageView ImageView { get; }

	//	// @property (readonly, nonatomic, strong) PESDKGradientView * _Nonnull gradientView;
	//	[Export ("gradientView", ArgumentSemantic.Strong)]
	//	PESDKGradientView GradientView { get; }

	//	// @property (readonly, nonatomic, strong) UILabel * _Nonnull captionLabel;
	//	[Export ("captionLabel", ArgumentSemantic.Strong)]
	//	UILabel CaptionLabel { get; }

	//	// @property (readonly, nonatomic, strong) UIActivityIndicatorView * _Nonnull activityIndicator;
	//	[Export ("activityIndicator", ArgumentSemantic.Strong)]
	//	UIActivityIndicatorView ActivityIndicator { get; }

	//	// @property (readonly, nonatomic, strong) PESDKGradientView * _Nonnull selectionOverlay;
	//	[Export ("selectionOverlay", ArgumentSemantic.Strong)]
	//	PESDKGradientView SelectionOverlay { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull selectionIndicator;
	//	[Export ("selectionIndicator", ArgumentSemantic.Strong)]
	//	UIView SelectionIndicator { get; }

	//	// @property (readonly, nonatomic, strong) UILabel * _Nonnull selectionLabel;
	//	[Export ("selectionLabel", ArgumentSemantic.Strong)]
	//	UILabel SelectionLabel { get; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)tintColorDidChange;
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();

	//	// -(void)prepareForReuse;
	//	[Export ("prepareForReuse")]
	//	void PrepareForReuse ();

	//	// @property (getter = isSelected, nonatomic) BOOL selected;
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }
	//}

	//// @interface PESDKFilterEditController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKFilterEditController
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKFilterEditControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKFilterEditControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic, strong) PESDKPhotoEffect * _Nullable photoEffect;
	//	[NullAllowed, Export ("photoEffect", ArgumentSemantic.Strong)]
	//	PESDKPhotoEffect PhotoEffect { get; set; }

	//	// @property (nonatomic) BOOL showFilterIntensitySlider;
	//	[Export ("showFilterIntensitySlider")]
	//	bool ShowFilterIntensitySlider { get; set; }

	//	// @property (nonatomic) CGFloat initialFilterIntensity;
	//	[Export ("initialFilterIntensity")]
	//	nfloat InitialFilterIntensity { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();

	//	// -(void)setPhotoEffect:(PESDKPhotoEffect * _Nullable)photoEffect animated:(BOOL)animated;
	//	[Export ("setPhotoEffect:animated:")]
	//	void SetPhotoEffect ([NullAllowed] PESDKPhotoEffect photoEffect, bool animated);
	//}

	//// @interface PhotoEditorSDK_Swift_2657 (PESDKFilterEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKFilterEditController))]
	//interface PESDKFilterEditController_PhotoEditorSDK_Swift_2657
	//{
	//	// @property (readonly, nonatomic) UIEdgeInsets preferredPreviewViewInsets;
	//	[Export ("preferredPreviewViewInsets")]
	//	UIEdgeInsets PreferredPreviewViewInsets { get; }
	//}

	//// @interface PhotoEditorSDK_Swift_2664 (PESDKFilterEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKFilterEditController))]
	//interface PESDKFilterEditController_PhotoEditorSDK_Swift_2664
	//{
	//	// @property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
	//	[Export ("boxedPhotoEditModel", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditModel BoxedPhotoEditModel { get; set; }
	//}

	//// @protocol PESDKFilterEditControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKFilterEditControllerDelegate
	//{
	//	// @required -(UIScrollView * _Nullable)filterEditControllerTargetScrollView:(PESDKFilterEditController * _Nonnull)filterEditController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("filterEditControllerTargetScrollView:")]
	//	[return: NullAllowed]
	//	UIScrollView FilterEditControllerTargetScrollView (PESDKFilterEditController filterEditController);

	//	// @required -(void)filterEditControllerDidChangePhotoEditModel:(PESDKFilterEditController * _Nonnull)filterEditController;
	//	[Abstract]
	//	[Export ("filterEditControllerDidChangePhotoEditModel:")]
	//	void FilterEditControllerDidChangePhotoEditModel (PESDKFilterEditController filterEditController);

	//	// @required -(void)filterEditController:(PESDKFilterEditController * _Nonnull)filterEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
	//	[Abstract]
	//	[Export ("filterEditController:didChangePreferredPreviewViewInsetsAnimated:")]
	//	void FilterEditController (PESDKFilterEditController filterEditController, bool animated);
	//}

	//// @interface PESDKFilterSelectionController : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKFilterSelectionController
	//{
	//	// @property (readonly, nonatomic, strong) UICollectionView * _Nonnull collectionView;
	//	[Export ("collectionView", ArgumentSemantic.Strong)]
	//	UICollectionView CollectionView { get; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKPhotoEffect * _Nonnull) selectedBlock;
	//	[NullAllowed, Export ("selectedBlock", ArgumentSemantic.Copy)]
	//	Action<PESDKPhotoEffect> SelectedBlock { get; set; }

	//	// @property (copy, nonatomic) PESDKPhotoEffect * _Nullable (^ _Nullable)(void) activePhotoEffectBlock;
	//	[NullAllowed, Export ("activePhotoEffectBlock", ArgumentSemantic.Copy)]
	//	Func<PESDKPhotoEffect> ActivePhotoEffectBlock { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKFilterCollectionViewCell * _Nonnull, PESDKPhotoEffect * _Nonnull) cellConfigurationClosure;
	//	[NullAllowed, Export ("cellConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFilterCollectionViewCell, PESDKPhotoEffect> CellConfigurationClosure { get; set; }

	//	// -(instancetype _Nonnull)initWithInputImage:(UIImage * _Nullable)inputImage;
	//	[Export ("initWithInputImage:")]
	//	IntPtr Constructor ([NullAllowed] UIImage inputImage);

	//	// -(instancetype _Nonnull)initWithInputImage:(UIImage * _Nullable)inputImage cellClass:(Class _Nonnull)cellClass __attribute__((objc_designated_initializer));
	//	[Export ("initWithInputImage:cellClass:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] UIImage inputImage, Class cellClass);

	//	// -(void)updateSelectionWithAnimated:(BOOL)animated;
	//	[Export ("updateSelectionWithAnimated:")]
	//	void UpdateSelectionWithAnimated (bool animated);
	//}

	//// @interface PhotoEditorSDK_Swift_2728 (PESDKFilterSelectionController) <UICollectionViewDelegateFlowLayout>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKFilterSelectionController))]
	//interface PESDKFilterSelectionController_PhotoEditorSDK_Swift_2728 : IUICollectionViewDelegateFlowLayout
	//{
	//	// -(UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section __attribute__((warn_unused_result));
	//	[Export ("collectionView:layout:insetForSectionAtIndex:")]
	//	UIEdgeInsets CollectionView (UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);
	//}

	//// @interface PhotoEditorSDK_Swift_2735 (PESDKFilterSelectionController) <UICollectionViewDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKFilterSelectionController))]
	//interface PESDKFilterSelectionController_PhotoEditorSDK_Swift_2735 : IUICollectionViewDelegate
	//{
	//	// -(void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:didSelectItemAtIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, NSIndexPath indexPath);
	//}

	//// @interface PhotoEditorSDK_Swift_2742 (PESDKFilterSelectionController) <UICollectionViewDataSource>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKFilterSelectionController))]
	//interface PESDKFilterSelectionController_PhotoEditorSDK_Swift_2742 : IUICollectionViewDataSource
	//{
	//	// -(NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section __attribute__((warn_unused_result));
	//	[Export ("collectionView:numberOfItemsInSection:")]
	//	nint CollectionView (UICollectionView collectionView, nint section);

	//	// -(UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((warn_unused_result));
	//	[Export ("collectionView:cellForItemAtIndexPath:")]
	//	UICollectionViewCell CollectionView (UICollectionView collectionView, NSIndexPath indexPath);
	//}

	//// @interface PESDKFilterToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKFilterToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) filterIntensitySliderConfigurationClosure;
	//	[NullAllowed, Export ("filterIntensitySliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> FilterIntensitySliderConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) filterIntensitySliderContainerConfigurationClosure;
	//	[NullAllowed, Export ("filterIntensitySliderContainerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> FilterIntensitySliderContainerConfigurationClosure { get; }

	//	// @property (readonly, nonatomic) BOOL showFilterIntensitySlider;
	//	[Export ("showFilterIntensitySlider")]
	//	bool ShowFilterIntensitySlider { get; }

	//	// @property (readonly, nonatomic) CGFloat initialFilterIntensity;
	//	[Export ("initialFilterIntensity")]
	//	nfloat InitialFilterIntensity { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKPhotoEffect * _Nonnull) filterSelectedClosure;
	//	[NullAllowed, Export ("filterSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKPhotoEffect> FilterSelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, PESDKPhotoEffect * _Nonnull) filterIntensityChangedClosure;
	//	[NullAllowed, Export ("filterIntensityChangedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, PESDKPhotoEffect> FilterIntensityChangedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKFilterCollectionViewCell * _Nonnull, PESDKPhotoEffect * _Nonnull) filterCellConfigurationClosure;
	//	[NullAllowed, Export ("filterCellConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFilterCollectionViewCell, PESDKPhotoEffect> FilterCellConfigurationClosure { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKFilterToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKFilterToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKFilterToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKFilterToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) filterIntensitySliderConfigurationClosure;
	//	[NullAllowed, Export ("filterIntensitySliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> FilterIntensitySliderConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) filterIntensitySliderContainerConfigurationClosure;
	//	[NullAllowed, Export ("filterIntensitySliderContainerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> FilterIntensitySliderContainerConfigurationClosure { get; set; }

	//	// @property (nonatomic) BOOL showFilterIntensitySlider;
	//	[Export ("showFilterIntensitySlider")]
	//	bool ShowFilterIntensitySlider { get; set; }

	//	// @property (nonatomic) CGFloat initialFilterIntensity;
	//	[Export ("initialFilterIntensity")]
	//	nfloat InitialFilterIntensity { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKPhotoEffect * _Nonnull) filterSelectedClosure;
	//	[NullAllowed, Export ("filterSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKPhotoEffect> FilterSelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, PESDKPhotoEffect * _Nonnull) filterIntensityChangedClosure;
	//	[NullAllowed, Export ("filterIntensityChangedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, PESDKPhotoEffect> FilterIntensityChangedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKFilterCollectionViewCell * _Nonnull, PESDKPhotoEffect * _Nonnull) filterCellConfigurationClosure;
	//	[NullAllowed, Export ("filterCellConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFilterCollectionViewCell, PESDKPhotoEffect> FilterCellConfigurationClosure { get; set; }
	//}

	//// @interface PESDKFocusEditController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKFocusEditController
	//{
	//	// @property (readonly, nonatomic, strong) PESDKBoxGradientView * _Nonnull boxGradientView;
	//	[Export ("boxGradientView", ArgumentSemantic.Strong)]
	//	PESDKBoxGradientView BoxGradientView { get; }

	//	// @property (readonly, nonatomic, strong) PESDKCircleGradientView * _Nonnull circleGradientView;
	//	[Export ("circleGradientView", ArgumentSemantic.Strong)]
	//	PESDKCircleGradientView CircleGradientView { get; }

	//	// @property (readonly, nonatomic, strong) PESDKLinearGradientView * _Nonnull linearGradientView;
	//	[Export ("linearGradientView", ArgumentSemantic.Strong)]
	//	PESDKLinearGradientView LinearGradientView { get; }

	//	// @property (nonatomic) enum PESDKFocusType focusType __attribute__((deprecated("Use `focusMode` instead.")));
	//	[Export ("focusType", ArgumentSemantic.Assign)]
	//	PESDKFocusType FocusType { get; set; }

	//	// @property (nonatomic) enum PESDKFocusMode focusMode;
	//	[Export ("focusMode", ArgumentSemantic.Assign)]
	//	PESDKFocusMode FocusMode { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKFocusEditControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKFocusEditControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)viewDidAppear:(BOOL)animated;
	//	[Export ("viewDidAppear:")]
	//	void ViewDidAppear (bool animated);

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();

	//	// -(void)viewDidLayoutSubviews;
	//	[Export ("viewDidLayoutSubviews")]
	//	void ViewDidLayoutSubviews ();

	//	// -(void)setFocusType:(enum PESDKFocusType)focusType animated:(BOOL)animated __attribute__((deprecated("Use `setFocusMode(_:animated:)` instead.")));
	//	[Export ("setFocusType:animated:")]
	//	void SetFocusType (PESDKFocusType focusType, bool animated);

	//	// -(void)setFocusMode:(enum PESDKFocusMode)focusMode animated:(BOOL)animated;
	//	[Export ("setFocusMode:animated:")]
	//	void SetFocusMode (PESDKFocusMode focusMode, bool animated);
	//}

	//// @interface PhotoEditorSDK_Swift_2853 (PESDKFocusEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKFocusEditController))]
	//interface PESDKFocusEditController_PhotoEditorSDK_Swift_2853
	//{
	//	// @property (readonly, nonatomic) UIEdgeInsets preferredPreviewViewInsets;
	//	[Export ("preferredPreviewViewInsets")]
	//	UIEdgeInsets PreferredPreviewViewInsets { get; }
	//}

	//// @interface PhotoEditorSDK_Swift_2859 (PESDKFocusEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKFocusEditController))]
	//interface PESDKFocusEditController_PhotoEditorSDK_Swift_2859
	//{
	//	// @property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
	//	[Export ("boxedPhotoEditModel", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditModel BoxedPhotoEditModel { get; set; }
	//}

	//// @protocol PESDKFocusEditControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKFocusEditControllerDelegate
	//{
	//	// @required -(void)focusEditControllerDidChangePhotoEditModel:(PESDKFocusEditController * _Nonnull)focusEditController;
	//	[Abstract]
	//	[Export ("focusEditControllerDidChangePhotoEditModel:")]
	//	void FocusEditControllerDidChangePhotoEditModel (PESDKFocusEditController focusEditController);

	//	// @required -(UIView * _Nullable)focusEditControllerPreviewView:(PESDKFocusEditController * _Nonnull)focusEditController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("focusEditControllerPreviewView:")]
	//	[return: NullAllowed]
	//	UIView FocusEditControllerPreviewView (PESDKFocusEditController focusEditController);

	//	// @required -(UIScrollView * _Nullable)focusEditControllerTargetScrollView:(PESDKFocusEditController * _Nonnull)focusEditController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("focusEditControllerTargetScrollView:")]
	//	[return: NullAllowed]
	//	UIScrollView FocusEditControllerTargetScrollView (PESDKFocusEditController focusEditController);

	//	// @required -(CGSize)focusEditControllerUntransformedImageSize:(PESDKFocusEditController * _Nonnull)focusEditController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("focusEditControllerUntransformedImageSize:")]
	//	CGSize FocusEditControllerUntransformedImageSize (PESDKFocusEditController focusEditController);

	//	// @required -(void)focusEditController:(PESDKFocusEditController * _Nonnull)focusEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
	//	[Abstract]
	//	[Export ("focusEditController:didChangePreferredPreviewViewInsetsAnimated:")]
	//	void FocusEditController (PESDKFocusEditController focusEditController, bool animated);
	//}

	//// @interface PhotoEditorSDK_Swift_2908 (PESDKFocusGradientView) <UIGestureRecognizerDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKFocusGradientView))]
	//interface PESDKFocusGradientView_PhotoEditorSDK_Swift_2908 : IUIGestureRecognizerDelegate
	//{
	//	// -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer __attribute__((warn_unused_result));
	//	[Export ("gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:")]
	//	bool GestureRecognizer (UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);
	//}

	//// @interface PESDKFocusMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKFocusMenuItem
	//{
	//	// @property (readonly, nonatomic) enum PESDKFocusType focusType __attribute__((deprecated("Use `focusMode` instead.")));
	//	[Export ("focusType")]
	//	PESDKFocusType FocusType { get; }

	//	// @property (readonly, nonatomic) enum PESDKFocusMode focusMode;
	//	[Export ("focusMode")]
	//	PESDKFocusMode FocusMode { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; }

	//	// @property (readonly, nonatomic, strong) UIImage * _Nullable icon;
	//	[NullAllowed, Export ("icon", ArgumentSemantic.Strong)]
	//	UIImage Icon { get; }

	//	// -(instancetype _Nullable)initWithFocusType:(enum PESDKFocusType)focusType __attribute__((deprecated("Use `init?(focusMode:)` instead.")));
	//	[Export ("initWithFocusType:")]
	//	IntPtr Constructor (PESDKFocusType focusType);

	//	// -(instancetype _Nullable)initWithFocusMode:(enum PESDKFocusMode)focusMode;
	//	[Export ("initWithFocusMode:")]
	//	IntPtr Constructor (PESDKFocusMode focusMode);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKFocusMenuItem New ();
	//}

	//// @interface PESDKFocusToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKFocusToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKIconCaptionCollectionViewCell * _Nonnull, enum PESDKFocusType) focusTypeButtonConfigurationClosure __attribute__((deprecated("Use `focusModeButtonConfigurationClosure` instead.")));
	//	[NullAllowed, Export ("focusTypeButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKIconCaptionCollectionViewCell, PESDKFocusType> FocusTypeButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKIconCaptionCollectionViewCell * _Nonnull, enum PESDKFocusMode) focusModeButtonConfigurationClosure;
	//	[NullAllowed, Export ("focusModeButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKIconCaptionCollectionViewCell, PESDKFocusMode> FocusModeButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum PESDKFocusType) focusTypeSelectedClosure __attribute__((deprecated("Use `focusModeSelectedClosure` instead.")));
	//	[NullAllowed, Export ("focusTypeSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFocusType> FocusTypeSelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum PESDKFocusMode) focusModeSelectedClosure;
	//	[NullAllowed, Export ("focusModeSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFocusMode> FocusModeSelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) sliderConfigurationClosure;
	//	[NullAllowed, Export ("sliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> SliderConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) sliderContainerConfigurationClosure;
	//	[NullAllowed, Export ("sliderContainerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> SliderContainerConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, enum PESDKFocusType) sliderChangedValueClosure __attribute__((deprecated("Use `sliderUpdatedValueClosure` instead.")));
	//	[NullAllowed, Export ("sliderChangedValueClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, PESDKFocusType> SliderChangedValueClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, enum PESDKFocusMode) sliderUpdatedValueClosure;
	//	[NullAllowed, Export ("sliderUpdatedValueClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, PESDKFocusMode> SliderUpdatedValueClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKCircleGradientView * _Nonnull) circleGradientViewConfigurationClosure;
	//	[NullAllowed, Export ("circleGradientViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKCircleGradientView> CircleGradientViewConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKBoxGradientView * _Nonnull) boxGradientViewConfigurationClosure;
	//	[NullAllowed, Export ("boxGradientViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKBoxGradientView> BoxGradientViewConfigurationClosure { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKFocusToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKFocusToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKFocusToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKFocusToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKIconCaptionCollectionViewCell * _Nonnull, enum PESDKFocusType) focusTypeButtonConfigurationClosure __attribute__((deprecated("Use `focusModeButtonConfigurationClosure` instead.")));
	//	[NullAllowed, Export ("focusTypeButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKIconCaptionCollectionViewCell, PESDKFocusType> FocusTypeButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKIconCaptionCollectionViewCell * _Nonnull, enum PESDKFocusMode) focusModeButtonConfigurationClosure;
	//	[NullAllowed, Export ("focusModeButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKIconCaptionCollectionViewCell, PESDKFocusMode> FocusModeButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum PESDKFocusType) focusTypeSelectedClosure __attribute__((deprecated("Use `focusModeSelectedClosure` instead.")));
	//	[NullAllowed, Export ("focusTypeSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFocusType> FocusTypeSelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum PESDKFocusMode) focusModeSelectedClosure;
	//	[NullAllowed, Export ("focusModeSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFocusMode> FocusModeSelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) sliderConfigurationClosure;
	//	[NullAllowed, Export ("sliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> SliderConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) sliderContainerConfigurationClosure;
	//	[NullAllowed, Export ("sliderContainerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> SliderContainerConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, enum PESDKFocusType) sliderChangedValueClosure __attribute__((deprecated("Use `sliderUpdatedValueClosure` instead.")));
	//	[NullAllowed, Export ("sliderChangedValueClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, PESDKFocusType> SliderChangedValueClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, enum PESDKFocusMode) sliderUpdatedValueClosure;
	//	[NullAllowed, Export ("sliderUpdatedValueClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, PESDKFocusMode> SliderUpdatedValueClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKCircleGradientView * _Nonnull) circleGradientViewConfigurationClosure;
	//	[NullAllowed, Export ("circleGradientViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKCircleGradientView> CircleGradientViewConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKBoxGradientView * _Nonnull) boxGradientViewConfigurationClosure;
	//	[NullAllowed, Export ("boxGradientViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKBoxGradientView> BoxGradientViewConfigurationClosure { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_3022 (PESDKFocusToolControllerOptionsBuilder)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKFocusToolControllerOptionsBuilder))]
	//interface PESDKFocusToolControllerOptionsBuilder_PhotoEditorSDK_Swift_3022
	//{
	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedFocusTypesAsNSNumbers __attribute__((deprecated("Use `allowedFocusModesAsNSNumbers` instead.")));
	//	[Export ("allowedFocusTypesAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedFocusTypesAsNSNumbers { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedFocusModesAsNSNumbers;
	//	[Export ("allowedFocusModesAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedFocusModesAsNSNumbers { get; set; }
	//}

	//// @interface PESDKFont : NSObject
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKFont
	//{
	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull path __attribute__((deprecated("Use `url` instead.")));
	//	[Export ("path")]
	//	string Path { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable url;
	//	[NullAllowed, Export ("url", ArgumentSemantic.Copy)]
	//	NSUrl Url { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull displayName;
	//	[Export ("displayName")]
	//	string DisplayName { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull fontName;
	//	[Export ("fontName")]
	//	string FontName { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; set; }

	//	// -(instancetype _Nonnull)initWithPath:(NSString * _Nonnull)path displayName:(NSString * _Nonnull)displayName fontName:(NSString * _Nonnull)fontName identifier:(NSString * _Nonnull)identifier __attribute__((deprecated("Use `init(url:displayName:fontName:identifier:)` instead.")));
	//	[Export ("initWithPath:displayName:fontName:identifier:")]
	//	IntPtr Constructor (string path, string displayName, string fontName, string identifier);

	//	// -(instancetype _Nonnull)initWithUrl:(NSURL * _Nonnull)url displayName:(NSString * _Nonnull)displayName fontName:(NSString * _Nonnull)fontName identifier:(NSString * _Nonnull)identifier __attribute__((objc_designated_initializer));
	//	[Export ("initWithUrl:displayName:fontName:identifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl url, string displayName, string fontName, string identifier);

	//	// -(instancetype _Nonnull)initWithDisplayName:(NSString * _Nonnull)displayName fontName:(NSString * _Nonnull)fontName identifier:(NSString * _Nonnull)identifier __attribute__((objc_designated_initializer));
	//	[Export ("initWithDisplayName:fontName:identifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string displayName, string fontName, string identifier);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKFont New ();
	//}

	//// @interface PESDKFontImporter : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKFontImporter
	//{
	//	// @property (copy, nonatomic, class) NSArray<PESDKFont *> * _Nonnull all;
	//	[Static]
	//	[Export ("all", ArgumentSemantic.Copy)]
	//	PESDKFont[] All { get; set; }

	//	// +(PESDKFont * _Nullable)fontWithIdentifier:(NSString * _Nonnull)identifier __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("fontWithIdentifier:")]
	//	[return: NullAllowed]
	//	PESDKFont FontWithIdentifier (string identifier);
	//}

	//// @interface PESDKFontMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKFontMenuItem
	//{
	//	// @property (readonly, nonatomic, strong) PESDKFont * _Nonnull font;
	//	[Export ("font", ArgumentSemantic.Strong)]
	//	PESDKFont Font { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; set; }

	//	// -(instancetype _Nonnull)initWithFont:(PESDKFont * _Nonnull)font;
	//	[Export ("initWithFont:")]
	//	IntPtr Constructor (PESDKFont font);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKFontMenuItem New ();
	//}

	//// @interface PESDKFontSelectorView : UIScrollView
	//[iOS (9,0)]
	//[BaseType (typeof(UIScrollView))]
	//interface PESDKFontSelectorView
	//{
	//	[Wrap ("WeakSelectorDelegate")]
	//	[NullAllowed]
	//	PESDKFontSelectorViewDelegate SelectorDelegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKFontSelectorViewDelegate> _Nullable selectorDelegate;
	//	[NullAllowed, Export ("selectorDelegate", ArgumentSemantic.Weak)]
	//	NSObject WeakSelectorDelegate { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull textColor;
	//	[Export ("textColor", ArgumentSemantic.Strong)]
	//	UIColor TextColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull labelColor;
	//	[Export ("labelColor", ArgumentSemantic.Strong)]
	//	UIColor LabelColor { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable selectedFontName;
	//	[NullAllowed, Export ("selectedFontName")]
	//	string SelectedFontName { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable text;
	//	[NullAllowed, Export ("text")]
	//	string Text { get; set; }

	//	// @property (nonatomic) CGRect bounds;
	//	[Export ("bounds", ArgumentSemantic.Assign)]
	//	CGRect Bounds { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)tintColorDidChange;
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();
	//}

	//// @protocol PESDKFontSelectorViewDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKFontSelectorViewDelegate
	//{
	//	// @required -(void)fontSelectorView:(PESDKFontSelectorView * _Nonnull)fontSelectorView didSelectFontWithName:(NSString * _Nonnull)fontName;
	//	[Abstract]
	//	[Export ("fontSelectorView:didSelectFontWithName:")]
	//	void DidSelectFontWithName (PESDKFontSelectorView fontSelectorView, string fontName);
	//}

	//// @interface PESDKFrame : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKFrame
	//{
	//	// @property (nonatomic) UIEdgeInsets imageInsets;
	//	[Export ("imageInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets ImageInsets { get; set; }

	//	// @property (readonly, nonatomic) CGFloat relativeScale;
	//	[Export ("relativeScale")]
	//	nfloat RelativeScale { get; }

	//	// @property (readonly, nonatomic) CGFloat tolerance;
	//	[Export ("tolerance")]
	//	nfloat Tolerance { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (readonly, nonatomic) BOOL isDynamic;
	//	[Export ("isDynamic")]
	//	bool IsDynamic { get; }

	//	// -(instancetype _Nonnull)initWithFrameBuilder:(id<PESDKFrameBuilderProtocol> _Nonnull)frameBuilder relativeScale:(CGFloat)relativeScale thumbnailURL:(NSURL * _Nonnull)thumbnailURL identifier:(NSString * _Nonnull)identifier __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrameBuilder:relativeScale:thumbnailURL:identifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKFrameBuilderProtocol frameBuilder, nfloat relativeScale, NSUrl thumbnailURL, string identifier);

	//	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier tolerance:(CGFloat)tolerance __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifier:tolerance:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string identifier, nfloat tolerance);

	//	// -(void)addImage:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL forRatio:(CGFloat)ratio;
	//	[Export ("addImage:thumbnailURL:forRatio:")]
	//	void AddImage (NSUrl imageURL, [NullAllowed] NSUrl thumbnailURL, nfloat ratio);

	//	// -(NSURL * _Nullable)imageURLForRatio:(CGFloat)ratio __attribute__((warn_unused_result));
	//	[Export ("imageURLForRatio:")]
	//	[return: NullAllowed]
	//	NSUrl ImageURLForRatio (nfloat ratio);

	//	// -(NSURL * _Nullable)maskImageURLForRatio:(CGFloat)ratio withTolerance:(CGFloat)tolerance __attribute__((warn_unused_result));
	//	[Export ("maskImageURLForRatio:withTolerance:")]
	//	[return: NullAllowed]
	//	NSUrl MaskImageURLForRatio (nfloat ratio, nfloat tolerance);

	//	// -(void)imageForSize:(CGSize)size completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
	//	[Export ("imageForSize:completion:")]
	//	void ImageForSize (CGSize size, Action<UIImage> completion);

	//	// -(void)imageForSize:(CGSize)size relativeScale:(CGFloat)relativeScale completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
	//	[Export ("imageForSize:relativeScale:completion:")]
	//	void ImageForSize (CGSize size, nfloat relativeScale, Action<UIImage> completion);

	//	// -(void)staticImageForRatio:(CGFloat)ratio completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
	//	[Export ("staticImageForRatio:completion:")]
	//	void StaticImageForRatio (nfloat ratio, Action<UIImage> completion);

	//	// -(void)saveThumbnailToCameraRollForSize:(CGSize)size;
	//	[Export ("saveThumbnailToCameraRollForSize:")]
	//	void SaveThumbnailToCameraRollForSize (CGSize size);

	//	// -(NSURL * _Nullable)thumbnailURLForRatio:(CGFloat)ratio __attribute__((warn_unused_result));
	//	[Export ("thumbnailURLForRatio:")]
	//	[return: NullAllowed]
	//	NSUrl ThumbnailURLForRatio (nfloat ratio);

	//	// -(BOOL)hasImageForRatio:(CGFloat)ratio __attribute__((warn_unused_result));
	//	[Export ("hasImageForRatio:")]
	//	bool HasImageForRatio (nfloat ratio);

	//	// @property (copy, nonatomic, class) NSArray<PESDKFrame *> * _Nonnull all;
	//	[Static]
	//	[Export ("all", ArgumentSemantic.Copy)]
	//	PESDKFrame[] All { get; set; }

	//	// +(PESDKFrame * _Nullable)withIdentifier:(NSString * _Nonnull)identifier __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("withIdentifier:")]
	//	[return: NullAllowed]
	//	PESDKFrame WithIdentifier (string identifier);

	//	// +(NSArray<PESDKFrame *> * _Nonnull)createDefaultFrames __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("createDefaultFrames")]
	//	[Verify (MethodToProperty)]
	//	PESDKFrame[] CreateDefaultFrames { get; }

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKFrame New ();
	//}

	//// @interface PESDKTransformEditController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKTransformEditController
	//{
	//	// @property (nonatomic) BOOL showControls;
	//	[Export ("showControls")]
	//	bool ShowControls { get; set; }

	//	// @property (nonatomic) BOOL canRotateUsingGesture;
	//	[Export ("canRotateUsingGesture")]
	//	bool CanRotateUsingGesture { get; set; }

	//	// @property (readonly, nonatomic) BOOL isModelChangeLocal;
	//	[Export ("isModelChangeLocal")]
	//	bool IsModelChangeLocal { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKTransformEditControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKTransformEditControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, nonatomic, strong) PESDKCropAndStraightenView * _Nonnull cropView;
	//	[Export ("cropView", ArgumentSemantic.Strong)]
	//	PESDKCropAndStraightenView CropView { get; }

	//	// @property (readonly, nonatomic, strong) PESDKCropOverlayView * _Nonnull cropOverlayView;
	//	[Export ("cropOverlayView", ArgumentSemantic.Strong)]
	//	PESDKCropOverlayView CropOverlayView { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull cropCanvasView;
	//	[Export ("cropCanvasView", ArgumentSemantic.Strong)]
	//	UIView CropCanvasView { get; }

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();

	//	// -(void)viewWillAppear:(BOOL)animated;
	//	[Export ("viewWillAppear:")]
	//	void ViewWillAppear (bool animated);

	//	// -(void)viewDidLayoutSubviews;
	//	[Export ("viewDidLayoutSubviews")]
	//	void ViewDidLayoutSubviews ();

	//	// -(void)updateViewConstraints;
	//	[Export ("updateViewConstraints")]
	//	void UpdateViewConstraints ();

	//	// -(void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id<UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
	//	[Export ("viewWillTransitionToSize:withTransitionCoordinator:")]
	//	void ViewWillTransitionToSize (CGSize size, UIViewControllerTransitionCoordinator coordinator);

	//	// -(void)pesdk_willBecomeActiveTool;
	//	[Export ("pesdk_willBecomeActiveTool")]
	//	void Pesdk_willBecomeActiveTool ();

	//	// -(void)pesdk_didBecomeActiveTool;
	//	[Export ("pesdk_didBecomeActiveTool")]
	//	void Pesdk_didBecomeActiveTool ();

	//	// -(void)pesdk_willResignActiveTool;
	//	[Export ("pesdk_willResignActiveTool")]
	//	void Pesdk_willResignActiveTool ();

	//	// -(void)pesdk_didResignActiveTool;
	//	[Export ("pesdk_didResignActiveTool")]
	//	void Pesdk_didResignActiveTool ();

	//	// @property (readonly, nonatomic, strong) UIRotationGestureRecognizer * _Nullable rotationGestureRecognizer;
	//	[NullAllowed, Export ("rotationGestureRecognizer", ArgumentSemantic.Strong)]
	//	UIRotationGestureRecognizer RotationGestureRecognizer { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull scalePickerContainerView;
	//	[Export ("scalePickerContainerView", ArgumentSemantic.Strong)]
	//	UIView ScalePickerContainerView { get; }

	//	// @property (readonly, nonatomic, strong) PESDKScalePicker * _Nonnull scalePicker;
	//	[Export ("scalePicker", ArgumentSemantic.Strong)]
	//	PESDKScalePicker ScalePicker { get; }

	//	// @property (readonly, nonatomic, strong) PESDKButton * _Nonnull flipButton;
	//	[Export ("flipButton", ArgumentSemantic.Strong)]
	//	PESDKButton FlipButton { get; }

	//	// @property (readonly, nonatomic, strong) PESDKButton * _Nonnull rotateButton;
	//	[Export ("rotateButton", ArgumentSemantic.Strong)]
	//	PESDKButton RotateButton { get; }

	//	// @property (readonly, nonatomic, strong) CAGradientLayer * _Nonnull gradientLayer;
	//	[Export ("gradientLayer", ArgumentSemantic.Strong)]
	//	CAGradientLayer GradientLayer { get; }

	//	// @property (nonatomic) CGRect viewCropRect;
	//	[Export ("viewCropRect", ArgumentSemantic.Assign)]
	//	CGRect ViewCropRect { get; set; }

	//	// -(void)setViewCropRect:(CGRect)viewCropRect normalizedImageRect:(CGRect)normalizedImageRect animated:(BOOL)animated;
	//	[Export ("setViewCropRect:normalizedImageRect:animated:")]
	//	void SetViewCropRect (CGRect viewCropRect, CGRect normalizedImageRect, bool animated);

	//	// @property (nonatomic) CGFloat straightenAngle;
	//	[Export ("straightenAngle")]
	//	nfloat StraightenAngle { get; set; }

	//	// -(void)setStraightenAngle:(CGFloat)straightenAngle animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
	//	[Export ("setStraightenAngle:animated:completion:")]
	//	void SetStraightenAngle (nfloat straightenAngle, bool animated, [NullAllowed] Action completion);

	//	// @property (nonatomic, strong) PESDKCropAspect * _Nullable cropAspect;
	//	[NullAllowed, Export ("cropAspect", ArgumentSemantic.Strong)]
	//	PESDKCropAspect CropAspect { get; set; }

	//	// -(void)setCropAspect:(PESDKCropAspect * _Nullable)cropAspect animated:(BOOL)animated;
	//	[Export ("setCropAspect:animated:")]
	//	void SetCropAspect ([NullAllowed] PESDKCropAspect cropAspect, bool animated);

	//	// -(instancetype _Nonnull)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithNibName:bundle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string nibNameOrNil, [NullAllowed] NSBundle nibBundleOrNil);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKFrameEditController : PESDKTransformEditController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTransformEditController))]
	//interface PESDKFrameEditController
	//{
	//	// @property (nonatomic) BOOL rotationEnabled;
	//	[Export ("rotationEnabled")]
	//	bool RotationEnabled { get; set; }

	//	// @property (readonly, nonatomic, strong) UIImageView * _Nonnull frameImageView;
	//	[Export ("frameImageView", ArgumentSemantic.Strong)]
	//	UIImageView FrameImageView { get; }

	//	// -(instancetype _Nonnull)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil __attribute__((objc_designated_initializer));
	//	[Export ("initWithNibName:bundle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string nibNameOrNil, [NullAllowed] NSBundle nibBundleOrNil);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)setFrame:(PESDKFrame * _Nullable)frame with:(UIImage * _Nullable)image;
	//	[Export ("setFrame:with:")]
	//	void SetFrame ([NullAllowed] PESDKFrame frame, [NullAllowed] UIImage image);

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();
	//}

	//// @interface PESDKFrameImageGroup : NSObject
	//[BaseType (typeof(NSObject))]
	//interface PESDKFrameImageGroup
	//{
	//	// @property (nonatomic, strong) UIImage * _Nullable startImage;
	//	[NullAllowed, Export ("startImage", ArgumentSemantic.Strong)]
	//	UIImage StartImage { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable midImage;
	//	[NullAllowed, Export ("midImage", ArgumentSemantic.Strong)]
	//	UIImage MidImage { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable endImage;
	//	[NullAllowed, Export ("endImage", ArgumentSemantic.Strong)]
	//	UIImage EndImage { get; set; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable startImageURL;
	//	[NullAllowed, Export ("startImageURL", ArgumentSemantic.Copy)]
	//	NSUrl StartImageURL { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable midImageURL;
	//	[NullAllowed, Export ("midImageURL", ArgumentSemantic.Copy)]
	//	NSUrl MidImageURL { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable endImageURL;
	//	[NullAllowed, Export ("endImageURL", ArgumentSemantic.Copy)]
	//	NSUrl EndImageURL { get; }

	//	// @property (nonatomic) enum FrameTileMode midImageMode;
	//	[Export ("midImageMode", ArgumentSemantic.Assign)]
	//	FrameTileMode MidImageMode { get; set; }

	//	// @property (nonatomic) CGFloat relativeScale;
	//	[Export ("relativeScale")]
	//	nfloat RelativeScale { get; set; }

	//	// -(instancetype _Nonnull)initWithStartImageURL:(NSURL * _Nullable)startImageURL midImageURL:(NSURL * _Nonnull)midImageURL endImageURL:(NSURL * _Nullable)endImageURL __attribute__((objc_designated_initializer));
	//	[Export ("initWithStartImageURL:midImageURL:endImageURL:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSUrl startImageURL, NSUrl midImageURL, [NullAllowed] NSUrl endImageURL);
	//}

	//// @interface PESDKSpriteImageView : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface PESDKSpriteImageView
	//{
	//	// @property (nonatomic) CGFloat rotation;
	//	[Export ("rotation")]
	//	nfloat Rotation { get; set; }

	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull uuid;
	//	[Export ("uuid", ArgumentSemantic.Copy)]
	//	NSUuid Uuid { get; }

	//	// @property (nonatomic, strong) UIImage * _Nullable image;
	//	[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
	//	UIImage Image { get; set; }

	//	// -(instancetype _Nonnull)initWithUuid:(NSUUID * _Nonnull)uuid __attribute__((objc_designated_initializer));
	//	[Export ("initWithUuid:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUuid uuid);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
	//	[Export ("encodeWithCoder:")]
	//	void EncodeWithCoder (NSCoder aCoder);

	//	// @property (readonly, nonatomic) CGSize intrinsicContentSize;
	//	[Export ("intrinsicContentSize")]
	//	CGSize IntrinsicContentSize { get; }

	//	// -(CGSize)sizeThatFits:(CGSize)size __attribute__((warn_unused_result));
	//	[Export ("sizeThatFits:")]
	//	CGSize SizeThatFits (CGSize size);

	//	// -(void)sizeToFit;
	//	[Export ("sizeToFit")]
	//	void SizeToFit ();
	//}

	//// @interface PESDKFrameImageView : PESDKSpriteImageView
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKSpriteImageView))]
	//interface PESDKFrameImageView
	//{
	//	// -(instancetype _Nonnull)initWithUuid:(NSUUID * _Nonnull)uuid __attribute__((objc_designated_initializer));
	//	[Export ("initWithUuid:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUuid uuid);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKFrameMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKFrameMenuItem
	//{
	//	// @property (readonly, nonatomic, strong) PESDKFrame * _Nullable frame;
	//	[NullAllowed, Export ("frame", ArgumentSemantic.Strong)]
	//	PESDKFrame Frame { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable thumbnailURL;
	//	[NullAllowed, Export ("thumbnailURL", ArgumentSemantic.Copy)]
	//	NSUrl ThumbnailURL { get; }

	//	// -(instancetype _Nonnull)initWithFrame:(PESDKFrame * _Nonnull)frame ratio:(CGFloat)ratio;
	//	[Export ("initWithFrame:ratio:")]
	//	IntPtr Constructor (PESDKFrame frame, nfloat ratio);
	//}

	//// @interface PESDKFrameToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKFrameToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKFrame * _Nullable) selectedFrameClosure;
	//	[NullAllowed, Export ("selectedFrameClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFrame> SelectedFrameClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKLabelIconBorderedCollectionViewCell * _Nonnull, PESDKFrame * _Nullable) cellConfigurationClosure;
	//	[NullAllowed, Export ("cellConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKLabelIconBorderedCollectionViewCell, PESDKFrame> CellConfigurationClosure { get; }

	//	// @property (readonly, nonatomic) BOOL rotationEnabled;
	//	[Export ("rotationEnabled")]
	//	bool RotationEnabled { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKFrameToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKFrameToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKFrameToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKFrameToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKFrame * _Nullable) selectedFrameClosure;
	//	[NullAllowed, Export ("selectedFrameClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFrame> SelectedFrameClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKLabelIconBorderedCollectionViewCell * _Nonnull, PESDKFrame * _Nullable) cellConfigurationClosure;
	//	[NullAllowed, Export ("cellConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKLabelIconBorderedCollectionViewCell, PESDKFrame> CellConfigurationClosure { get; set; }

	//	// @property (nonatomic) BOOL rotationEnabled;
	//	[Export ("rotationEnabled")]
	//	bool RotationEnabled { get; set; }
	//}

	//// @interface PESDKTool : NSObject
	//[BaseType (typeof(NSObject))]
	//interface PESDKTool
	//{
	//	// @property (readonly, nonatomic) BOOL moved;
	//	[Export ("moved")]
	//	bool Moved { get; }

	//	// -(void)gestureBegan:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
	//	[Export ("gestureBegan:in:")]
	//	void GestureBegan (UIGestureRecognizer recognizer, UIView view);

	//	// -(void)gestureMoved:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
	//	[Export ("gestureMoved:in:")]
	//	void GestureMoved (UIGestureRecognizer recognizer, UIView view);

	//	// -(void)gestureEnded:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
	//	[Export ("gestureEnded:in:")]
	//	void GestureEnded (UIGestureRecognizer recognizer, UIView view);

	//	// -(void)gestureCancelled:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
	//	[Export ("gestureCancelled:in:")]
	//	void GestureCancelled (UIGestureRecognizer recognizer, UIView view);
	//}

	//// @interface PESDKFreehandTool : PESDKTool
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTool))]
	//interface PESDKFreehandTool
	//{
	//	// @property (nonatomic, strong) UIColor * _Nonnull color;
	//	[Export ("color", ArgumentSemantic.Strong)]
	//	UIColor Color { get; set; }

	//	// @property (nonatomic) CGFloat hardness;
	//	[Export ("hardness")]
	//	nfloat Hardness { get; set; }

	//	// @property (nonatomic, strong) PESDKBrush * _Nullable brush;
	//	[NullAllowed, Export ("brush", ArgumentSemantic.Strong)]
	//	PESDKBrush Brush { get; set; }

	//	// -(void)gestureBegan:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
	//	[Export ("gestureBegan:in:")]
	//	void GestureBegan (UIGestureRecognizer recognizer, UIView view);

	//	// -(void)beginPathWithLocation:(CGPoint)location force:(CGFloat)force;
	//	[Export ("beginPathWithLocation:force:")]
	//	void BeginPathWithLocation (CGPoint location, nfloat force);

	//	// -(void)gestureMoved:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
	//	[Export ("gestureMoved:in:")]
	//	void GestureMoved (UIGestureRecognizer recognizer, UIView view);

	//	// -(void)continuePathWithLocation:(CGPoint)location canvas:(PESDKCanvasView * _Nonnull)canvas force:(CGFloat)force;
	//	[Export ("continuePathWithLocation:canvas:force:")]
	//	void ContinuePathWithLocation (CGPoint location, PESDKCanvasView canvas, nfloat force);

	//	// -(void)gestureEnded:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
	//	[Export ("gestureEnded:in:")]
	//	void GestureEnded (UIGestureRecognizer recognizer, UIView view);

	//	// -(void)endPathWithLocation:(CGPoint)location canvas:(PESDKCanvasView * _Nonnull)canvas didMove:(BOOL)didMove;
	//	[Export ("endPathWithLocation:canvas:didMove:")]
	//	void EndPathWithLocation (CGPoint location, PESDKCanvasView canvas, bool didMove);

	//	// -(void)gestureCancelled:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
	//	[Export ("gestureCancelled:in:")]
	//	void GestureCancelled (UIGestureRecognizer recognizer, UIView view);
	//}

	//// @interface PESDKGaussianFocusFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKGaussianFocusFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputRadius;
	//	[NullAllowed, Export ("inputRadius", ArgumentSemantic.Strong)]
	//	NSNumber InputRadius { get; set; }

	//	// @property (nonatomic) enum BlurQuality inputBlurQuality;
	//	[Export ("inputBlurQuality", ArgumentSemantic.Assign)]
	//	BlurQuality InputBlurQuality { get; set; }

	//	// -(void)setDefaults;
	//	[Export ("setDefaults")]
	//	void SetDefaults ();

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKGradientFocusFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKGradientFocusFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;
	//	[NullAllowed, Export ("inputNormalizedControlPoint1", ArgumentSemantic.Strong)]
	//	NSValue InputNormalizedControlPoint1 { get; set; }

	//	// @property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;
	//	[NullAllowed, Export ("inputNormalizedControlPoint2", ArgumentSemantic.Strong)]
	//	NSValue InputNormalizedControlPoint2 { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputRadius;
	//	[NullAllowed, Export ("inputRadius", ArgumentSemantic.Strong)]
	//	NSNumber InputRadius { get; set; }

	//	// @property (nonatomic) enum BlurQuality inputBlurQuality;
	//	[Export ("inputBlurQuality", ArgumentSemantic.Assign)]
	//	BlurQuality InputBlurQuality { get; set; }

	//	// -(void)setDefaults;
	//	[Export ("setDefaults")]
	//	void SetDefaults ();

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKGradientView : UIView
	//[BaseType (typeof(UIView))]
	//interface PESDKGradientView
	//{
	//	// @property (readonly, nonatomic, strong) UIColor * _Nonnull topColor;
	//	[Export ("topColor", ArgumentSemantic.Strong)]
	//	UIColor TopColor { get; }

	//	// @property (readonly, nonatomic, strong) UIColor * _Nonnull bottomColor;
	//	[Export ("bottomColor", ArgumentSemantic.Strong)]
	//	UIColor BottomColor { get; }

	//	// -(instancetype _Nonnull)initWithTopColor:(UIColor * _Nonnull)topColor bottomColor:(UIColor * _Nonnull)bottomColor __attribute__((objc_designated_initializer));
	//	[Export ("initWithTopColor:bottomColor:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIColor topColor, UIColor bottomColor);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic, class) Class _Nonnull layerClass;
	//	[Static]
	//	[Export ("layerClass")]
	//	Class LayerClass { get; }
	//}

	//// @interface PESDKHandleButton : PESDKButton
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKButton))]
	//interface PESDKHandleButton
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)tintColorDidChange;
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();
	//}

	//// @interface PESDKIconBorderedCollectionViewCell : PESDKActivityBorderedCollectionViewCell
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKActivityBorderedCollectionViewCell))]
	//interface PESDKIconBorderedCollectionViewCell
	//{
	//	// @property (readonly, nonatomic, strong) UIImageView * _Nonnull imageView;
	//	[Export ("imageView", ArgumentSemantic.Strong)]
	//	UIImageView ImageView { get; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)prepareForReuse;
	//	[Export ("prepareForReuse")]
	//	void PrepareForReuse ();
	//}

	//// @interface PESDKIconCaptionCollectionViewCell : UICollectionViewCell
	//[iOS (9,0)]
	//[BaseType (typeof(UICollectionViewCell))]
	//interface PESDKIconCaptionCollectionViewCell
	//{
	//	// @property (readonly, nonatomic, strong) UIImageView * _Nonnull imageView;
	//	[Export ("imageView", ArgumentSemantic.Strong)]
	//	UIImageView ImageView { get; }

	//	// @property (readonly, nonatomic, strong) UILabel * _Nonnull captionLabel;
	//	[Export ("captionLabel", ArgumentSemantic.Strong)]
	//	UILabel CaptionLabel { get; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull iconTintColor;
	//	[Export ("iconTintColor", ArgumentSemantic.Strong)]
	//	UIColor IconTintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull captionTintColor;
	//	[Export ("captionTintColor", ArgumentSemantic.Strong)]
	//	UIColor CaptionTintColor { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)tintColorDidChange;
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();

	//	// -(void)prepareForReuse;
	//	[Export ("prepareForReuse")]
	//	void PrepareForReuse ();

	//	// @property (getter = isSelected, nonatomic) BOOL selected;
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }
	//}

	//// @interface PESDKIconGenerator : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKIconGenerator
	//{
	//	// +(UIImage * _Nullable)generateTextImageWithFont:(UIFont * _Nonnull)font ofSize:(CGSize)size text:(NSString * _Nonnull)text __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("generateTextImageWithFont:ofSize:text:")]
	//	[return: NullAllowed]
	//	UIImage GenerateTextImageWithFont (UIFont font, CGSize size, string text);

	//	// +(UIImage * _Nullable)generateColorImageWithColor:(UIColor * _Nonnull)color borderColor:(UIColor * _Nonnull)borderColor ofSize:(CGSize)size __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("generateColorImageWithColor:borderColor:ofSize:")]
	//	[return: NullAllowed]
	//	UIImage GenerateColorImageWithColor (UIColor color, UIColor borderColor, CGSize size);
	//}

	//// @interface PESDKLUTFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKLUTFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) CIImage * _Nullable inputLUT;
	//	[NullAllowed, Export ("inputLUT", ArgumentSemantic.Strong)]
	//	CIImage InputLUT { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputHorizontalTileCount;
	//	[NullAllowed, Export ("inputHorizontalTileCount", ArgumentSemantic.Strong)]
	//	NSNumber InputHorizontalTileCount { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputVerticalTileCount;
	//	[NullAllowed, Export ("inputVerticalTileCount", ArgumentSemantic.Strong)]
	//	NSNumber InputVerticalTileCount { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
	//	[NullAllowed, Export ("inputIntensity", ArgumentSemantic.Strong)]
	//	NSNumber InputIntensity { get; set; }

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKLabelBorderedCollectionViewCell : PESDKActivityBorderedCollectionViewCell
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKActivityBorderedCollectionViewCell))]
	//interface PESDKLabelBorderedCollectionViewCell
	//{
	//	// @property (readonly, nonatomic, strong) UILabel * _Nonnull textLabel;
	//	[Export ("textLabel", ArgumentSemantic.Strong)]
	//	UILabel TextLabel { get; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull textLabelTintColor;
	//	[Export ("textLabelTintColor", ArgumentSemantic.Strong)]
	//	UIColor TextLabelTintColor { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)tintColorDidChange;
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();

	//	// -(void)prepareForReuse;
	//	[Export ("prepareForReuse")]
	//	void PrepareForReuse ();

	//	// @property (getter = isSelected, nonatomic) BOOL selected;
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }
	//}

	//// @interface PESDKLabelCaptionCollectionViewCell : UICollectionViewCell
	//[iOS (9,0)]
	//[BaseType (typeof(UICollectionViewCell))]
	//interface PESDKLabelCaptionCollectionViewCell
	//{
	//	// @property (readonly, nonatomic, strong) UILabel * _Nonnull label;
	//	[Export ("label", ArgumentSemantic.Strong)]
	//	UILabel Label { get; }

	//	// @property (readonly, nonatomic, strong) UILabel * _Nonnull captionLabel;
	//	[Export ("captionLabel", ArgumentSemantic.Strong)]
	//	UILabel CaptionLabel { get; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull labelTintColor;
	//	[Export ("labelTintColor", ArgumentSemantic.Strong)]
	//	UIColor LabelTintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull captionTintColor;
	//	[Export ("captionTintColor", ArgumentSemantic.Strong)]
	//	UIColor CaptionTintColor { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)tintColorDidChange;
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();

	//	// -(void)prepareForReuse;
	//	[Export ("prepareForReuse")]
	//	void PrepareForReuse ();

	//	// @property (getter = isSelected, nonatomic) BOOL selected;
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }
	//}

	//// @interface PESDKLabelIconBorderedCollectionViewCell : PESDKLabelBorderedCollectionViewCell
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKLabelBorderedCollectionViewCell))]
	//interface PESDKLabelIconBorderedCollectionViewCell
	//{
	//	// @property (readonly, nonatomic, strong) UIImageView * _Nonnull iconImageView;
	//	[Export ("iconImageView", ArgumentSemantic.Strong)]
	//	UIImageView IconImageView { get; }

	//	// @property (nonatomic) BOOL isIconVisible;
	//	[Export ("isIconVisible")]
	//	bool IsIconVisible { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)tintColorDidChange;
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();

	//	// -(void)prepareForReuse;
	//	[Export ("prepareForReuse")]
	//	void PrepareForReuse ();

	//	// @property (getter = isSelected, nonatomic) BOOL selected;
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }
	//}

	//// @interface PESDKLinearFocusFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKLinearFocusFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;
	//	[NullAllowed, Export ("inputNormalizedControlPoint1", ArgumentSemantic.Strong)]
	//	NSValue InputNormalizedControlPoint1 { get; set; }

	//	// @property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;
	//	[NullAllowed, Export ("inputNormalizedControlPoint2", ArgumentSemantic.Strong)]
	//	NSValue InputNormalizedControlPoint2 { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputRadius;
	//	[NullAllowed, Export ("inputRadius", ArgumentSemantic.Strong)]
	//	NSNumber InputRadius { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputFadeWidth;
	//	[NullAllowed, Export ("inputFadeWidth", ArgumentSemantic.Strong)]
	//	NSNumber InputFadeWidth { get; set; }

	//	// @property (nonatomic) enum BlurQuality inputBlurQuality;
	//	[Export ("inputBlurQuality", ArgumentSemantic.Assign)]
	//	BlurQuality InputBlurQuality { get; set; }

	//	// -(void)setDefaults;
	//	[Export ("setDefaults")]
	//	void SetDefaults ();

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKLinearGradientView : PESDKFocusGradientView
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKFocusGradientView))]
	//interface PESDKLinearGradientView
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();

	//	// -(void)drawRect:(CGRect)rect;
	//	[Export ("drawRect:")]
	//	void DrawRect (CGRect rect);
	//}

	//// @interface PESDKMainFlowController : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKMainFlowController
	//{
	//	// @property (readonly, nonatomic, strong) PESDKConfiguration * _Nonnull configuration;
	//	[Export ("configuration", ArgumentSemantic.Strong)]
	//	PESDKConfiguration Configuration { get; }

	//	// @property (readonly, nonatomic, weak) PESDKPhotoEditViewController * _Nullable photoEditViewController;
	//	[NullAllowed, Export ("photoEditViewController", ArgumentSemantic.Weak)]
	//	PESDKPhotoEditViewController PhotoEditViewController { get; }

	//	// -(instancetype _Nonnull)initWithPhotoEditViewController:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController configuration:(PESDKConfiguration * _Nonnull)configuration;
	//	[Export ("initWithPhotoEditViewController:configuration:")]
	//	IntPtr Constructor (PESDKPhotoEditViewController photoEditViewController, PESDKConfiguration configuration);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKMainFlowController New ();
	//}

	//// @interface PhotoEditorSDK_Swift_4009 (PESDKMainFlowController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKMainFlowController))]
	//interface PESDKMainFlowController_PhotoEditorSDK_Swift_4009
	//{
	//	// -(void)viewControllerDidFinish:(UIViewController * _Nonnull)viewController;
	//	[Export ("viewControllerDidFinish:")]
	//	void ViewControllerDidFinish (UIViewController viewController);

	//	// -(void)viewControllerDidCancel:(UIViewController * _Nonnull)viewController;
	//	[Export ("viewControllerDidCancel:")]
	//	void ViewControllerDidCancel (UIViewController viewController);

	//	// -(void)photoEditToolController:(UIViewController * _Nonnull)photoEditToolController wantsToPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
	//	[Export ("photoEditToolController:wantsToPresent:")]
	//	void PhotoEditToolController (UIViewController photoEditToolController, PESDKPhotoEditToolController toolController);
	//}

	//// @interface PESDKLogger : NSObject
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKLogger
	//{
	//	// @property (nonatomic, class) enum LogLevel logLevel;
	//	[Static]
	//	[Export ("logLevel", ArgumentSemantic.Assign)]
	//	LogLevel LogLevel { get; set; }

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKLogger New ();

	//	// +(void)addWithLogger:(id<PESDKLoggerProtocol> _Nonnull)logger;
	//	[Static]
	//	[Export ("addWithLogger:")]
	//	void AddWithLogger (PESDKLoggerProtocol logger);

	//	// +(void)removeWithLogger:(id<PESDKLoggerProtocol> _Nonnull)logger;
	//	[Static]
	//	[Export ("removeWithLogger:")]
	//	void RemoveWithLogger (PESDKLoggerProtocol logger);

	//	// +(void)removeAll;
	//	[Static]
	//	[Export ("removeAll")]
	//	void RemoveAll ();

	//	// +(void)error:(NSString * _Nonnull)message;
	//	[Static]
	//	[Export ("error:")]
	//	void Error (string message);

	//	// +(void)warn:(NSString * _Nonnull)message;
	//	[Static]
	//	[Export ("warn:")]
	//	void Warn (string message);

	//	// +(void)info:(NSString * _Nonnull)message;
	//	[Static]
	//	[Export ("info:")]
	//	void Info (string message);

	//	// +(void)debug:(NSString * _Nonnull)message;
	//	[Static]
	//	[Export ("debug:")]
	//	void Debug (string message);

	//	// +(void)trace:(NSString * _Nonnull)message;
	//	[Static]
	//	[Export ("trace:")]
	//	void Trace (string message);
	//}

	//// @interface PESDKMenuCollectionView : UICollectionView
	//[BaseType (typeof(UICollectionView))]
	//interface PESDKMenuCollectionView
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic, strong) UICollectionViewFlowLayout * _Nonnull flowLayout;
	//	[Export ("flowLayout", ArgumentSemantic.Strong)]
	//	UICollectionViewFlowLayout FlowLayout { get; }
	//}

	//// @interface PESDKOverlay : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKOverlay
	//{
	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable url;
	//	[NullAllowed, Export ("url", ArgumentSemantic.Copy)]
	//	NSUrl Url { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable thumbnailURL;
	//	[NullAllowed, Export ("thumbnailURL", ArgumentSemantic.Copy)]
	//	NSUrl ThumbnailURL { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull displayName;
	//	[Export ("displayName")]
	//	string DisplayName { get; }

	//	// @property (readonly, nonatomic) enum PESDKBlendMode initialBlendMode;
	//	[Export ("initialBlendMode")]
	//	PESDKBlendMode InitialBlendMode { get; }

	//	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName url:(NSURL * _Nullable)url thumbnailURL:(NSURL * _Nullable)thumbnailURL initialBlendMode:(enum PESDKBlendMode)initialBlendMode __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifier:displayName:url:thumbnailURL:initialBlendMode:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string identifier, string displayName, [NullAllowed] NSUrl url, [NullAllowed] NSUrl thumbnailURL, PESDKBlendMode initialBlendMode);

	//	// +(PESDKOverlay * _Nullable)overlayWithIdentifier:(NSString * _Nonnull)identifier __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("overlayWithIdentifier:")]
	//	[return: NullAllowed]
	//	PESDKOverlay OverlayWithIdentifier (string identifier);

	//	// @property (readonly, nonatomic, strong, class) PESDKOverlay * _Nonnull none;
	//	[Static]
	//	[Export ("none", ArgumentSemantic.Strong)]
	//	PESDKOverlay None { get; }

	//	// @property (copy, nonatomic, class) NSArray<PESDKOverlay *> * _Nonnull all;
	//	[Static]
	//	[Export ("all", ArgumentSemantic.Copy)]
	//	PESDKOverlay[] All { get; set; }

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKOverlay New ();
	//}

	//// @interface PESDKOverlayButton : PESDKButton
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKButton))]
	//interface PESDKOverlayButton
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// @property (readonly, nonatomic) CGSize intrinsicContentSize;
	//	[Export ("intrinsicContentSize")]
	//	CGSize IntrinsicContentSize { get; }

	//	// +(PESDKOverlayButton * _Nonnull)makeAddButton __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("makeAddButton")]
	//	[Verify (MethodToProperty)]
	//	PESDKOverlayButton MakeAddButton { get; }

	//	// +(PESDKOverlayButton * _Nonnull)makeDeleteButton __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("makeDeleteButton")]
	//	[Verify (MethodToProperty)]
	//	PESDKOverlayButton MakeDeleteButton { get; }

	//	// +(PESDKOverlayButton * _Nonnull)makeFlipButton __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("makeFlipButton")]
	//	[Verify (MethodToProperty)]
	//	PESDKOverlayButton MakeFlipButton { get; }

	//	// +(PESDKOverlayButton * _Nonnull)makeStraightenButton __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("makeStraightenButton")]
	//	[Verify (MethodToProperty)]
	//	PESDKOverlayButton MakeStraightenButton { get; }

	//	// +(PESDKOverlayButton * _Nonnull)makeToFrontButton __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("makeToFrontButton")]
	//	[Verify (MethodToProperty)]
	//	PESDKOverlayButton MakeToFrontButton { get; }

	//	// +(PESDKOverlayButton * _Nonnull)makeUndoButton __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("makeUndoButton")]
	//	[Verify (MethodToProperty)]
	//	PESDKOverlayButton MakeUndoButton { get; }

	//	// +(PESDKOverlayButton * _Nonnull)makeRedoButton __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("makeRedoButton")]
	//	[Verify (MethodToProperty)]
	//	PESDKOverlayButton MakeRedoButton { get; }

	//	// +(PESDKOverlayButton * _Nonnull)makeAlignmentButton __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("makeAlignmentButton")]
	//	[Verify (MethodToProperty)]
	//	PESDKOverlayButton MakeAlignmentButton { get; }

	//	// +(PESDKOverlayButton * _Nonnull)makeInvertButton __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("makeInvertButton")]
	//	[Verify (MethodToProperty)]
	//	PESDKOverlayButton MakeInvertButton { get; }

	//	// +(PESDKOverlayButton * _Nonnull)makeDisableInvertButton __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("makeDisableInvertButton")]
	//	[Verify (MethodToProperty)]
	//	PESDKOverlayButton MakeDisableInvertButton { get; }
	//}

	//// @interface PESDKOverlayEditController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKOverlayEditController
	//{
	//	// @property (nonatomic, strong) PESDKOverlay * _Nullable overlay;
	//	[NullAllowed, Export ("overlay", ArgumentSemantic.Strong)]
	//	PESDKOverlay Overlay { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKOverlayEditControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKOverlayEditControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic) BOOL showOverlayIntensitySlider;
	//	[Export ("showOverlayIntensitySlider")]
	//	bool ShowOverlayIntensitySlider { get; set; }

	//	// @property (nonatomic) BOOL showBlendModeSelectionView;
	//	[Export ("showBlendModeSelectionView")]
	//	bool ShowBlendModeSelectionView { get; set; }

	//	// @property (nonatomic) CGFloat initialOverlayIntensity;
	//	[Export ("initialOverlayIntensity")]
	//	nfloat InitialOverlayIntensity { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)selectBlendMode:(enum PESDKBlendMode)blendMode animated:(BOOL)animated;
	//	[Export ("selectBlendMode:animated:")]
	//	void SelectBlendMode (PESDKBlendMode blendMode, bool animated);

	//	// -(void)showControlsWithAnimated:(BOOL)animated;
	//	[Export ("showControlsWithAnimated:")]
	//	void ShowControlsWithAnimated (bool animated);

	//	// -(void)hideControlsWithAnimated:(BOOL)animated;
	//	[Export ("hideControlsWithAnimated:")]
	//	void HideControlsWithAnimated (bool animated);

	//	// -(void)setOverlay:(PESDKOverlay * _Nullable)overlay animated:(BOOL)animated;
	//	[Export ("setOverlay:animated:")]
	//	void SetOverlay ([NullAllowed] PESDKOverlay overlay, bool animated);

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();
	//}

	//// @interface PhotoEditorSDK_Swift_4261 (PESDKOverlayEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKOverlayEditController))]
	//interface PESDKOverlayEditController_PhotoEditorSDK_Swift_4261
	//{
	//	// @property (readonly, nonatomic) UIEdgeInsets preferredPreviewViewInsets;
	//	[Export ("preferredPreviewViewInsets")]
	//	UIEdgeInsets PreferredPreviewViewInsets { get; }
	//}

	//// @interface PhotoEditorSDK_Swift_4270 (PESDKOverlayEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKOverlayEditController))]
	//interface PESDKOverlayEditController_PhotoEditorSDK_Swift_4270
	//{
	//	// @property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
	//	[Export ("boxedPhotoEditModel", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditModel BoxedPhotoEditModel { get; set; }
	//}

	//// @protocol PESDKOverlayEditControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKOverlayEditControllerDelegate
	//{
	//	// @required -(void)overlayEditControllerDidChangePhotoEditModel:(PESDKOverlayEditController * _Nonnull)overlayEditController;
	//	[Abstract]
	//	[Export ("overlayEditControllerDidChangePhotoEditModel:")]
	//	void OverlayEditControllerDidChangePhotoEditModel (PESDKOverlayEditController overlayEditController);

	//	// @required -(UIScrollView * _Nullable)overlayEditControllerTargetScrollView:(PESDKOverlayEditController * _Nonnull)overlayEditController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("overlayEditControllerTargetScrollView:")]
	//	[return: NullAllowed]
	//	UIScrollView OverlayEditControllerTargetScrollView (PESDKOverlayEditController overlayEditController);

	//	// @required -(void)overlayEditController:(PESDKOverlayEditController * _Nonnull)overlayEditController willDisplay:(enum PESDKBlendMode)blendMode in:(PESDKLabelBorderedCollectionViewCell * _Nonnull)cell;
	//	[Abstract]
	//	[Export ("overlayEditController:willDisplay:in:")]
	//	void OverlayEditController (PESDKOverlayEditController overlayEditController, PESDKBlendMode blendMode, PESDKLabelBorderedCollectionViewCell cell);

	//	// @required -(void)overlayEditController:(PESDKOverlayEditController * _Nonnull)overlayEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
	//	[Abstract]
	//	[Export ("overlayEditController:didChangePreferredPreviewViewInsetsAnimated:")]
	//	void OverlayEditController (PESDKOverlayEditController overlayEditController, bool animated);
	//}

	//// @interface PESDKOverlayFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKOverlayFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) CIImage * _Nullable inputOverlayImage;
	//	[NullAllowed, Export ("inputOverlayImage", ArgumentSemantic.Strong)]
	//	CIImage InputOverlayImage { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
	//	[NullAllowed, Export ("inputIntensity", ArgumentSemantic.Strong)]
	//	NSNumber InputIntensity { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputBlendMode;
	//	[NullAllowed, Export ("inputBlendMode", ArgumentSemantic.Strong)]
	//	NSNumber InputBlendMode { get; set; }

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKOverlayMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKOverlayMenuItem
	//{
	//	// @property (readonly, nonatomic, strong) PESDKOverlay * _Nonnull overlay;
	//	[Export ("overlay", ArgumentSemantic.Strong)]
	//	PESDKOverlay Overlay { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable thumbnailURL;
	//	[NullAllowed, Export ("thumbnailURL", ArgumentSemantic.Copy)]
	//	NSUrl ThumbnailURL { get; }

	//	// -(instancetype _Nonnull)initWithOverlay:(PESDKOverlay * _Nonnull)overlay;
	//	[Export ("initWithOverlay:")]
	//	IntPtr Constructor (PESDKOverlay overlay);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKOverlayMenuItem New ();
	//}

	//// @interface PESDKOverlayToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKOverlayToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) overlayIntensitySliderConfigurationClosure;
	//	[NullAllowed, Export ("overlayIntensitySliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> OverlayIntensitySliderConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) overlayIntensitySliderContainerConfigurationClosure;
	//	[NullAllowed, Export ("overlayIntensitySliderContainerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> OverlayIntensitySliderContainerConfigurationClosure { get; }

	//	// @property (readonly, nonatomic) BOOL showOverlayIntensitySlider;
	//	[Export ("showOverlayIntensitySlider")]
	//	bool ShowOverlayIntensitySlider { get; }

	//	// @property (readonly, nonatomic) BOOL showModeSelectionView;
	//	[Export ("showModeSelectionView")]
	//	bool ShowModeSelectionView { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKOverlay * _Nonnull) overlaySelectedClosure;
	//	[NullAllowed, Export ("overlaySelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlay> OverlaySelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum PESDKBlendMode) blendModeSelectedClosure;
	//	[NullAllowed, Export ("blendModeSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKBlendMode> BlendModeSelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, PESDKOverlay * _Nonnull) overlayIntensityChangedClosure;
	//	[NullAllowed, Export ("overlayIntensityChangedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, PESDKOverlay> OverlayIntensityChangedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKFilterCollectionViewCell * _Nonnull, PESDKOverlay * _Nonnull) overlayCellConfigurationClosure;
	//	[NullAllowed, Export ("overlayCellConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFilterCollectionViewCell, PESDKOverlay> OverlayCellConfigurationClosure { get; }

	//	// @property (readonly, nonatomic) CGFloat initialOverlayIntensity;
	//	[Export ("initialOverlayIntensity")]
	//	nfloat InitialOverlayIntensity { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UICollectionView * _Nonnull) overlayModeSelectionViewConfigurationClosure;
	//	[NullAllowed, Export ("overlayModeSelectionViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UICollectionView> OverlayModeSelectionViewConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKLabelBorderedCollectionViewCell * _Nonnull, enum PESDKBlendMode) overlayModeSelectionCellConfigurationClosure;
	//	[NullAllowed, Export ("overlayModeSelectionCellConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKLabelBorderedCollectionViewCell, PESDKBlendMode> OverlayModeSelectionCellConfigurationClosure { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKOverlayToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKOverlayToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKOverlayToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKOverlayToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull) overlayIntensitySliderConfigurationClosure;
	//	[NullAllowed, Export ("overlayIntensitySliderConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider> OverlayIntensitySliderConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) overlayIntensitySliderContainerConfigurationClosure;
	//	[NullAllowed, Export ("overlayIntensitySliderContainerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> OverlayIntensitySliderContainerConfigurationClosure { get; set; }

	//	// @property (nonatomic) BOOL showOverlayIntensitySlider;
	//	[Export ("showOverlayIntensitySlider")]
	//	bool ShowOverlayIntensitySlider { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKOverlay * _Nonnull) overlaySelectedClosure;
	//	[NullAllowed, Export ("overlaySelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlay> OverlaySelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum PESDKBlendMode) blendModeSelectedClosure;
	//	[NullAllowed, Export ("blendModeSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKBlendMode> BlendModeSelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSlider * _Nonnull, PESDKOverlay * _Nonnull) overlayIntensityChangedClosure;
	//	[NullAllowed, Export ("overlayIntensityChangedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSlider, PESDKOverlay> OverlayIntensityChangedClosure { get; set; }

	//	// @property (nonatomic) BOOL showModeSelectionView;
	//	[Export ("showModeSelectionView")]
	//	bool ShowModeSelectionView { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKFilterCollectionViewCell * _Nonnull, PESDKOverlay * _Nonnull) overlayCellConfigurationClosure;
	//	[NullAllowed, Export ("overlayCellConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFilterCollectionViewCell, PESDKOverlay> OverlayCellConfigurationClosure { get; set; }

	//	// @property (nonatomic) CGFloat initialOverlayIntensity;
	//	[Export ("initialOverlayIntensity")]
	//	nfloat InitialOverlayIntensity { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UICollectionView * _Nonnull) overlayModeSelectionViewConfigurationClosure;
	//	[NullAllowed, Export ("overlayModeSelectionViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UICollectionView> OverlayModeSelectionViewConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKLabelBorderedCollectionViewCell * _Nonnull, enum PESDKBlendMode) overlayModeSelectionCellConfigurationClosure;
	//	[NullAllowed, Export ("overlayModeSelectionCellConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKLabelBorderedCollectionViewCell, PESDKBlendMode> OverlayModeSelectionCellConfigurationClosure { get; set; }
	//}

	//// @interface PESDK : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDK
	//{
	//	// +(void)unlockWithLicenseAt:(NSURL * _Nonnull)url;
	//	[Static]
	//	[Export ("unlockWithLicenseAt:")]
	//	void UnlockWithLicenseAt (NSUrl url);

	//	// @property (readonly, nonatomic, strong, class) PESDKAnalytics * _Nonnull analytics;
	//	[Static]
	//	[Export ("analytics", ArgumentSemantic.Strong)]
	//	PESDKAnalytics Analytics { get; }

	//	// @property (nonatomic, strong, class) id<PESDKProgressView> _Nonnull progressView;
	//	[Static]
	//	[Export ("progressView", ArgumentSemantic.Strong)]
	//	PESDKProgressView ProgressView { get; set; }

	//	// @property (copy, nonatomic, class) NSDictionary<NSString *,NSDictionary<NSString *,NSString *> *> * _Nullable localizationDictionary;
	//	[Static]
	//	[NullAllowed, Export ("localizationDictionary", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSDictionary<NSString, NSString>> LocalizationDictionary { get; set; }

	//	// @property (copy, nonatomic, class) NSString * _Nullable (^ _Nullable)(NSString * _Nonnull) localizationBlock;
	//	[Static]
	//	[NullAllowed, Export ("localizationBlock", ArgumentSemantic.Copy)]
	//	Func<NSString, NSString> LocalizationBlock { get; set; }

	//	// @property (copy, nonatomic, class) UIImage * _Nullable (^ _Nullable)(NSString * _Nonnull) bundleImageBlock;
	//	[Static]
	//	[NullAllowed, Export ("bundleImageBlock", ArgumentSemantic.Copy)]
	//	Func<NSString, UIImage> BundleImageBlock { get; set; }

	//	// @property (copy, nonatomic, class) PESDKToolbarItem * _Nullable (^ _Nullable)(UIViewController * _Nonnull, PESDKToolbarItem * _Nullable) toolbarItemBlock;
	//	[Static]
	//	[NullAllowed, Export ("toolbarItemBlock", ArgumentSemantic.Copy)]
	//	Func<UIViewController, PESDKToolbarItem, PESDKToolbarItem> ToolbarItemBlock { get; set; }

	//	// +(BOOL)replaceClass:(Class _Nonnull)builtinClass with:(Class _Nonnull)replacingClass error:(NSError * _Nullable * _Nullable)error;
	//	[Static]
	//	[Export ("replaceClass:with:error:")]
	//	bool ReplaceClass (Class builtinClass, Class replacingClass, [NullAllowed] out NSError error);
	//}

	//// @interface PESDKPainting : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKPainting
	//{
	//	// @property (nonatomic, weak) PESDKCanvasView * _Nullable canvas;
	//	[NullAllowed, Export ("canvas", ArgumentSemantic.Weak)]
	//	PESDKCanvasView Canvas { get; set; }

	//	// @property (readonly, nonatomic) CGSize dimensions;
	//	[Export ("dimensions")]
	//	CGSize Dimensions { get; }

	//	// @property (readonly, nonatomic) CGRect bounds;
	//	[Export ("bounds")]
	//	CGRect Bounds { get; }

	//	// @property (readonly, nonatomic, strong) EAGLContext * _Nonnull context;
	//	[Export ("context", ArgumentSemantic.Strong)]
	//	EAGLContext Context { get; }

	//	// @property (readonly, nonatomic) GLuint quadVAO;
	//	[Export ("quadVAO")]
	//	uint QuadVAO { get; }

	//	// @property (nonatomic, strong) PESDKTexture * _Nullable brushTexture;
	//	[NullAllowed, Export ("brushTexture", ArgumentSemantic.Strong)]
	//	PESDKTexture BrushTexture { get; set; }

	//	// -(instancetype _Nonnull)initWithSize:(CGSize)size __attribute__((objc_designated_initializer));
	//	[Export ("initWithSize:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGSize size);

	//	// -(void)clear;
	//	[Export ("clear")]
	//	void Clear ();

	//	// -(void)preloadPaintTexture;
	//	[Export ("preloadPaintTexture")]
	//	void PreloadPaintTexture ();

	//	// -(UIImage * _Nullable)imageWithSize:(CGSize)size backgroundColor:(UIColor * _Nonnull)color __attribute__((warn_unused_result));
	//	[Export ("imageWithSize:backgroundColor:")]
	//	[return: NullAllowed]
	//	UIImage ImageWithSize (CGSize size, UIColor color);

	//	// -(CIImage * _Nullable)ciImageWithSize:(CGSize)size backgroundColor:(UIColor * _Nonnull)color __attribute__((warn_unused_result));
	//	[Export ("ciImageWithSize:backgroundColor:")]
	//	[return: NullAllowed]
	//	CIImage CiImageWithSize (CGSize size, UIColor color);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKPainting New ();
	//}

	//// @interface PESDKPaintingFragment : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKPaintingFragment
	//{
	//	// @property (readonly, nonatomic) CGRect bounds;
	//	[Export ("bounds")]
	//	CGRect Bounds { get; }

	//	// @property (readonly, nonatomic) NSInteger dataLength;
	//	[Export ("dataLength")]
	//	nint DataLength { get; }

	//	// @property (readonly, copy, nonatomic) NSData * _Nonnull data;
	//	[Export ("data", ArgumentSemantic.Copy)]
	//	NSData Data { get; }

	//	// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data bounds:(CGRect)bounds __attribute__((objc_designated_initializer));
	//	[Export ("initWithData:bounds:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSData data, CGRect bounds);

	//	// -(void)applyIn:(PESDKPainting * _Nonnull)painting;
	//	[Export ("applyIn:")]
	//	void ApplyIn (PESDKPainting painting);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKPaintingFragment New ();
	//}

	//// @interface PESDKPhoto : NSObject
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKPhoto
	//{
	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable url;
	//	[NullAllowed, Export ("url", ArgumentSemantic.Copy)]
	//	NSUrl Url { get; }

	//	// @property (readonly, copy, nonatomic) NSData * _Nullable data;
	//	[NullAllowed, Export ("data", ArgumentSemantic.Copy)]
	//	NSData Data { get; }

	//	// @property (readonly, nonatomic, strong) UIImage * _Nullable image;
	//	[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
	//	UIImage Image { get; }

	//	// @property (readonly, nonatomic) CGSize size;
	//	[Export ("size")]
	//	CGSize Size { get; }

	//	// -(instancetype _Nonnull)initWithUrl:(NSURL * _Nonnull)url __attribute__((objc_designated_initializer));
	//	[Export ("initWithUrl:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl url);

	//	// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data __attribute__((objc_designated_initializer));
	//	[Export ("initWithData:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSData data);

	//	// -(instancetype _Nonnull)initWithImage:(UIImage * _Nonnull)image __attribute__((objc_designated_initializer));
	//	[Export ("initWithImage:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIImage image);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKPhoto New ();
	//}

	//// @interface PESDKPhotoEditPreviewController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKPhotoEditPreviewController
	//{
	//	// @property (readonly, nonatomic, strong) UIScrollView * _Nonnull previewViewScrollingContainer;
	//	[Export ("previewViewScrollingContainer", ArgumentSemantic.Strong)]
	//	UIScrollView PreviewViewScrollingContainer { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull previewView;
	//	[Export ("previewView", ArgumentSemantic.Strong)]
	//	UIView PreviewView { get; }

	//	// @property (nonatomic) BOOL allowsPreviewImageZoom;
	//	[Export ("allowsPreviewImageZoom")]
	//	bool AllowsPreviewImageZoom { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKPhotoEditPreviewControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKPhotoEditPreviewControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, nonatomic, strong) UIImage * _Nullable baseWorkUIImage;
	//	[NullAllowed, Export ("baseWorkUIImage", ArgumentSemantic.Strong)]
	//	UIImage BaseWorkUIImage { get; }

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable baseWorkCIImage;
	//	[NullAllowed, Export ("baseWorkCIImage", ArgumentSemantic.Strong)]
	//	CIImage BaseWorkCIImage { get; }

	//	// @property (readonly, nonatomic, strong) PESDKPhotoEditRenderer * _Nonnull renderer;
	//	[Export ("renderer", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditRenderer Renderer { get; }

	//	// @property (readonly, nonatomic, strong) PESDKSpriteViewController * _Nonnull spriteViewController;
	//	[Export ("spriteViewController", ArgumentSemantic.Strong)]
	//	PESDKSpriteViewController SpriteViewController { get; }

	//	// @property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
	//	[NullAllowed, Export ("assetManager", ArgumentSemantic.Strong)]
	//	PESDKAssetManager AssetManager { get; set; }

	//	// @property (nonatomic, strong) PESDKUndoController * _Nullable undoController;
	//	[NullAllowed, Export ("undoController", ArgumentSemantic.Strong)]
	//	PESDKUndoController UndoController { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(BOOL) loadingProgressClosure;
	//	[NullAllowed, Export ("loadingProgressClosure", ArgumentSemantic.Copy)]
	//	Action<bool> LoadingProgressClosure { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();

	//	// -(void)viewWillAppear:(BOOL)animated;
	//	[Export ("viewWillAppear:")]
	//	void ViewWillAppear (bool animated);

	//	// -(void)viewDidAppear:(BOOL)animated;
	//	[Export ("viewDidAppear:")]
	//	void ViewDidAppear (bool animated);

	//	// -(void)viewDidLayoutSubviews;
	//	[Export ("viewDidLayoutSubviews")]
	//	void ViewDidLayoutSubviews ();

	//	// @property (readonly, nonatomic) UIStatusBarStyle preferredStatusBarStyle;
	//	[Export ("preferredStatusBarStyle")]
	//	UIStatusBarStyle PreferredStatusBarStyle { get; }

	//	// @property (readonly, nonatomic) BOOL prefersStatusBarHidden;
	//	[Export ("prefersStatusBarHidden")]
	//	bool PrefersStatusBarHidden { get; }

	//	// -(void)updateViewConstraints;
	//	[Export ("updateViewConstraints")]
	//	void UpdateViewConstraints ();

	//	// -(void)updateLayout;
	//	[Export ("updateLayout")]
	//	void UpdateLayout ();

	//	// -(void)updateInsetsWithAnimated:(BOOL)animated;
	//	[Export ("updateInsetsWithAnimated:")]
	//	void UpdateInsetsWithAnimated (bool animated);

	//	// -(void)updatePreview;
	//	[Export ("updatePreview")]
	//	void UpdatePreview ();
	//}

	//// @interface PhotoEditorSDK_Swift_4669 (PESDKPhotoEditPreviewController) <GLKViewDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditPreviewController))]
	//interface PESDKPhotoEditPreviewController_PhotoEditorSDK_Swift_4669 : IGLKViewDelegate
	//{
	//	// -(void)glkView:(GLKView * _Nonnull)view drawInRect:(CGRect)rect;
	//	[Export ("glkView:drawInRect:")]
	//	void GlkView (GLKView view, CGRect rect);
	//}

	//// @interface PhotoEditorSDK_Swift_4676 (PESDKPhotoEditPreviewController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditPreviewController))]
	//interface PESDKPhotoEditPreviewController_PhotoEditorSDK_Swift_4676
	//{
	//	// -(instancetype _Nonnull)initWithPhoto:(UIImage * _Nonnull)photo photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel __attribute__((deprecated("Use `init(photoAsset:photoEditModel:)` instead.")));
	//	[Export ("initWithPhoto:photoEditModel:")]
	//	IntPtr Constructor (UIImage photo, PESDKPhotoEditModel photoEditModel);

	//	// -(instancetype _Nonnull)initWithPhotoAsset:(PESDKPhoto * _Nonnull)photoAsset photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel;
	//	[Export ("initWithPhotoAsset:photoEditModel:")]
	//	IntPtr Constructor (PESDKPhoto photoAsset, PESDKPhotoEditModel photoEditModel);
	//}

	//// @interface PhotoEditorSDK_Swift_4696 (PESDKPhotoEditPreviewController) <MTKViewDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditPreviewController))]
	//interface PESDKPhotoEditPreviewController_PhotoEditorSDK_Swift_4696 : IMTKViewDelegate
	//{
	//	// -(void)drawInMTKView:(MTKView * _Nonnull)view;
	//	[Export ("drawInMTKView:")]
	//	void DrawInMTKView (MTKView view);

	//	// -(void)mtkView:(MTKView * _Nonnull)view drawableSizeWillChange:(CGSize)size;
	//	[Export ("mtkView:drawableSizeWillChange:")]
	//	void MtkView (MTKView view, CGSize size);
	//}

	//// @protocol PESDKSpriteViewControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKSpriteViewControllerDelegate
	//{
	//	// @required -(void)spriteViewControllerDidChangePhotoEditModel:(PESDKSpriteViewController * _Nonnull)spriteViewController;
	//	[Abstract]
	//	[Export ("spriteViewControllerDidChangePhotoEditModel:")]
	//	void SpriteViewControllerDidChangePhotoEditModel (PESDKSpriteViewController spriteViewController);

	//	// @required -(PESDKUndoController * _Nullable)spriteViewControllerUndoController:(PESDKSpriteViewController * _Nonnull)spriteViewController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("spriteViewControllerUndoController:")]
	//	[return: NullAllowed]
	//	PESDKUndoController SpriteViewControllerUndoController (PESDKSpriteViewController spriteViewController);
	//}

	//// @interface PhotoEditorSDK_Swift_4723 (PESDKPhotoEditPreviewController) <PESDKSpriteViewControllerDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditPreviewController))]
	//interface PESDKPhotoEditPreviewController_PhotoEditorSDK_Swift_4723 : IPESDKSpriteViewControllerDelegate
	//{
	//	// -(void)spriteViewControllerDidChangePhotoEditModel:(PESDKSpriteViewController * _Nonnull)spriteViewController;
	//	[Export ("spriteViewControllerDidChangePhotoEditModel:")]
	//	void SpriteViewControllerDidChangePhotoEditModel (PESDKSpriteViewController spriteViewController);

	//	// -(PESDKUndoController * _Nullable)spriteViewControllerUndoController:(PESDKSpriteViewController * _Nonnull)spriteViewController __attribute__((warn_unused_result));
	//	[Export ("spriteViewControllerUndoController:")]
	//	[return: NullAllowed]
	//	PESDKUndoController SpriteViewControllerUndoController (PESDKSpriteViewController spriteViewController);
	//}

	//// @interface PhotoEditorSDK_Swift_4732 (PESDKPhotoEditPreviewController) <UIScrollViewDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditPreviewController))]
	//interface PESDKPhotoEditPreviewController_PhotoEditorSDK_Swift_4732 : IUIScrollViewDelegate
	//{
	//	// -(void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewDidZoom:")]
	//	void ScrollViewDidZoom (UIScrollView scrollView);

	//	// -(void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
	//	[Export ("scrollViewDidEndZooming:withView:atScale:")]
	//	void ScrollViewDidEndZooming (UIScrollView scrollView, [NullAllowed] UIView view, nfloat scale);

	//	// -(UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView __attribute__((warn_unused_result));
	//	[Export ("viewForZoomingInScrollView:")]
	//	[return: NullAllowed]
	//	UIView ViewForZoomingInScrollView (UIScrollView scrollView);
	//}

	//// @protocol PESDKPhotoEditPreviewControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKPhotoEditPreviewControllerDelegate
	//{
	//	// @required -(BOOL)photoEditPreviewControllerPreviewEnabled:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditPreviewControllerPreviewEnabled:")]
	//	bool PhotoEditPreviewControllerPreviewEnabled (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// @required -(PESDKRenderMode)photoEditPreviewControllerRenderMode:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditPreviewControllerRenderMode:")]
	//	PESDKRenderMode PhotoEditPreviewControllerRenderMode (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// @required -(UIColor * _Nonnull)photoEditPreviewControllerBackgroundColor:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditPreviewControllerBackgroundColor:")]
	//	UIColor PhotoEditPreviewControllerBackgroundColor (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// @required -(UIEdgeInsets)photoEditPreviewControllerPreviewInsets:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditPreviewControllerPreviewInsets:")]
	//	UIEdgeInsets PhotoEditPreviewControllerPreviewInsets (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// @required -(CGFloat)photoEditPreviewControllerPreviewScale:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditPreviewControllerPreviewScale:")]
	//	nfloat PhotoEditPreviewControllerPreviewScale (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// @required -(BOOL)photoEditPreviewControllerProxyZoomingActive:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditPreviewControllerProxyZoomingActive:")]
	//	bool PhotoEditPreviewControllerProxyZoomingActive (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// @required -(void)photoEditPreviewControllerResetProxyZooming:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController;
	//	[Abstract]
	//	[Export ("photoEditPreviewControllerResetProxyZooming:")]
	//	void PhotoEditPreviewControllerResetProxyZooming (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// @required -(void)photoEditPreviewControllerDidChangePhotoEditModel:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController;
	//	[Abstract]
	//	[Export ("photoEditPreviewControllerDidChangePhotoEditModel:")]
	//	void PhotoEditPreviewControllerDidChangePhotoEditModel (PESDKPhotoEditPreviewController photoEditPreviewController);
	//}

	//// @interface PESDKPhotoEditRenderer : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKPhotoEditRenderer
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable originalImage;
	//	[NullAllowed, Export ("originalImage", ArgumentSemantic.Strong)]
	//	CIImage OriginalImage { get; set; }

	//	// @property (nonatomic) PESDKRenderMode renderMode;
	//	[Export ("renderMode", ArgumentSemantic.Assign)]
	//	PESDKRenderMode RenderMode { get; set; }

	//	// @property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
	//	[NullAllowed, Export ("assetManager", ArgumentSemantic.Strong)]
	//	PESDKAssetManager AssetManager { get; set; }

	//	// @property (readonly, nonatomic, strong) CIImage * _Nonnull outputImage;
	//	[Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// @property (readonly, nonatomic) CGSize outputImageSize;
	//	[Export ("outputImageSize")]
	//	CGSize OutputImageSize { get; }

	//	// -(void)invalidateCache;
	//	[Export ("invalidateCache")]
	//	void InvalidateCache ();

	//	// -(CGImageRef _Nonnull)newOutputImage __attribute__((warn_unused_result));
	//	[Export ("newOutputImage")]
	//	[Verify (MethodToProperty)]
	//	unsafe CGImageRef* NewOutputImage { get; }

	//	// -(void)createOutputImageWithCompletion:(void (^ _Nonnull)(CGImageRef _Nonnull))completion;
	//	[Export ("createOutputImageWithCompletion:")]
	//	unsafe void CreateOutputImageWithCompletion (Action<CoreGraphics.CGImageRef*> completion);

	//	// -(void)generateOutputImageDataWithCompressionQuality:(CGFloat)compressionQuality metadataSourceImageURL:(NSURL * _Nullable)metadataSourceImageURL completionHandler:(void (^ _Nonnull)(NSData * _Nullable, CGFloat, CGFloat))completionHandler __attribute__((deprecated("Use `generateOutputImageData(withCompressionQuality:metadataSourcePhoto:completionHandler:)` instead.")));
	//	[Export ("generateOutputImageDataWithCompressionQuality:metadataSourceImageURL:completionHandler:")]
	//	void GenerateOutputImageDataWithCompressionQuality (nfloat compressionQuality, [NullAllowed] NSUrl metadataSourceImageURL, Action<NSData, nfloat, nfloat> completionHandler);

	//	// -(void)generateOutputImageDataWithCompressionQuality:(CGFloat)compressionQuality metadataSourcePhoto:(PESDKPhoto * _Nullable)metadataSourcePhoto completionHandler:(void (^ _Nonnull)(NSData * _Nullable, CGFloat, CGFloat))completionHandler __attribute__((deprecated("Use `generateOutputImageData(withFormat:compressionQuality:metadataSourcePhoto:completionHandler:)` instead.")));
	//	[Export ("generateOutputImageDataWithCompressionQuality:metadataSourcePhoto:completionHandler:")]
	//	void GenerateOutputImageDataWithCompressionQuality (nfloat compressionQuality, [NullAllowed] PESDKPhoto metadataSourcePhoto, Action<NSData, nfloat, nfloat> completionHandler);

	//	// -(void)generateOutputImageDataWithFormat:(enum PESDKImageFileFormat)imageFormat compressionQuality:(CGFloat)compressionQuality metadataSourcePhoto:(PESDKPhoto * _Nullable)metadataSourcePhoto completionHandler:(void (^ _Nonnull)(NSData * _Nullable, CGFloat, CGFloat))completionHandler;
	//	[Export ("generateOutputImageDataWithFormat:compressionQuality:metadataSourcePhoto:completionHandler:")]
	//	void GenerateOutputImageDataWithFormat (PESDKImageFileFormat imageFormat, nfloat compressionQuality, [NullAllowed] PESDKPhoto metadataSourcePhoto, Action<NSData, nfloat, nfloat> completionHandler);

	//	// -(void)drawOutputImageInContext:(EAGLContext * _Nonnull)context toRect:(CGRect)rect viewportWidth:(NSInteger)viewportWidth viewportHeight:(NSInteger)viewportHeight;
	//	[Export ("drawOutputImageInContext:toRect:viewportWidth:viewportHeight:")]
	//	void DrawOutputImageInContext (EAGLContext context, CGRect rect, nint viewportWidth, nint viewportHeight);

	//	// -(void)drawOutputImageFor:(id<MTLDevice> _Nonnull)device in:(id<CAMetalDrawable> _Nonnull)drawable to:(CGRect)rect commandQueue:(id<MTLCommandQueue> _Nonnull)commandQueue;
	//	[Export ("drawOutputImageFor:in:to:commandQueue:")]
	//	void DrawOutputImageFor (MTLDevice device, CAMetalDrawable drawable, CGRect rect, MTLCommandQueue commandQueue);
	//}

	//// @interface PhotoEditorSDK_Swift_4896 (PESDKPhotoEditRenderer)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditRenderer))]
	//interface PESDKPhotoEditRenderer_PhotoEditorSDK_Swift_4896
	//{
	//	// @property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
	//	[Export ("boxedPhotoEditModel", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditModel BoxedPhotoEditModel { get; set; }
	//}

	//// @interface PESDKPhotoEditToolController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKPhotoEditToolController
	//{
	//	// -(instancetype _Nullable)initWithConfiguration:(PESDKConfiguration * _Nonnull)configuration __attribute__((objc_designated_initializer));
	//	[Export ("initWithConfiguration:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKConfiguration configuration);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();

	//	// -(void)viewDidAppear:(BOOL)animated;
	//	[Export ("viewDidAppear:")]
	//	void ViewDidAppear (bool animated);

	//	// -(void)viewWillDisappear:(BOOL)animated;
	//	[Export ("viewWillDisappear:")]
	//	void ViewWillDisappear (bool animated);

	//	// @property (readonly, nonatomic) UIStatusBarStyle preferredStatusBarStyle;
	//	[Export ("preferredStatusBarStyle")]
	//	UIStatusBarStyle PreferredStatusBarStyle { get; }

	//	// @property (readonly, nonatomic) BOOL prefersStatusBarHidden;
	//	[Export ("prefersStatusBarHidden")]
	//	bool PrefersStatusBarHidden { get; }

	//	// @property (nonatomic, strong) PESDKToolbarItem * _Nonnull toolbarItem;
	//	[Export ("toolbarItem", ArgumentSemantic.Strong)]
	//	PESDKToolbarItem ToolbarItem { get; set; }

	//	// -(void)configureToolbarItem;
	//	[Export ("configureToolbarItem")]
	//	void ConfigureToolbarItem ();

	//	// -(void)apply:(PESDKToolbarItem * _Nonnull)sender;
	//	[Export ("apply:")]
	//	void Apply (PESDKToolbarItem sender);

	//	// -(void)discard:(PESDKToolbarItem * _Nonnull)sender;
	//	[Export ("discard:")]
	//	void Discard (PESDKToolbarItem sender);

	//	// @property (readonly, nonatomic, strong) PESDKConfiguration * _Nonnull configuration;
	//	[Export ("configuration", ArgumentSemantic.Strong)]
	//	PESDKConfiguration Configuration { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKPhotoEditToolControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKPhotoEditToolControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (nonatomic, strong) PESDKUndoController * _Nullable undoController;
	//	[NullAllowed, Export ("undoController", ArgumentSemantic.Strong)]
	//	PESDKUndoController UndoController { get; set; }

	//	// @property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
	//	[NullAllowed, Export ("assetManager", ArgumentSemantic.Strong)]
	//	PESDKAssetManager AssetManager { get; set; }

	//	// -(void)updateUserInterfaceState;
	//	[Export ("updateUserInterfaceState")]
	//	void UpdateUserInterfaceState ();

	//	// -(void)pesdk_willBecomeActiveTool;
	//	[Export ("pesdk_willBecomeActiveTool")]
	//	void Pesdk_willBecomeActiveTool ();

	//	// -(void)pesdk_didBecomeActiveTool;
	//	[Export ("pesdk_didBecomeActiveTool")]
	//	void Pesdk_didBecomeActiveTool ();

	//	// -(void)pesdk_willResignActiveTool;
	//	[Export ("pesdk_willResignActiveTool")]
	//	void Pesdk_willResignActiveTool ();

	//	// -(void)pesdk_didResignActiveTool;
	//	[Export ("pesdk_didResignActiveTool")]
	//	void Pesdk_didResignActiveTool ();

	//	// -(void)setupForZoomAndPan;
	//	[Export ("setupForZoomAndPan")]
	//	void SetupForZoomAndPan ();

	//	// -(void)resetForZoomAndPan;
	//	[Export ("resetForZoomAndPan")]
	//	void ResetForZoomAndPan ();

	//	// @property (readonly, nonatomic) BOOL isModelChangeLocal;
	//	[Export ("isModelChangeLocal")]
	//	bool IsModelChangeLocal { get; }

	//	// @property (readonly, nonatomic) BOOL wantsDefaultPreviewView;
	//	[Export ("wantsDefaultPreviewView")]
	//	bool WantsDefaultPreviewView { get; }

	//	// @property (readonly, nonatomic) PESDKRenderMode preferredRenderMode;
	//	[Export ("preferredRenderMode")]
	//	PESDKRenderMode PreferredRenderMode { get; }

	//	// @property (readonly, nonatomic, strong) UIColor * _Nullable preferredPreviewBackgroundColor;
	//	[NullAllowed, Export ("preferredPreviewBackgroundColor", ArgumentSemantic.Strong)]
	//	UIColor PreferredPreviewBackgroundColor { get; }

	//	// @property (readonly, nonatomic) UIEdgeInsets preferredPreviewViewInsets;
	//	[Export ("preferredPreviewViewInsets")]
	//	UIEdgeInsets PreferredPreviewViewInsets { get; }

	//	// @property (readonly, nonatomic) CGFloat preferredDefaultPreviewViewScale;
	//	[Export ("preferredDefaultPreviewViewScale")]
	//	nfloat PreferredDefaultPreviewViewScale { get; }
	//}

	//// @interface PhotoEditorSDK_Swift_5008 (PESDKPhotoEditToolController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditToolController))]
	//interface PESDKPhotoEditToolController_PhotoEditorSDK_Swift_5008
	//{
	//	// @property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
	//	[Export ("boxedPhotoEditModel", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditModel BoxedPhotoEditModel { get; set; }
	//}

	//// @protocol PESDKPhotoEditToolControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKPhotoEditToolControllerDelegate
	//{
	//	// @required -(PESDKPhotoEditPreviewController * _Nullable)photoEditToolControllerPreviewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditToolControllerPreviewController:")]
	//	[return: NullAllowed]
	//	PESDKPhotoEditPreviewController PhotoEditToolControllerPreviewController (PESDKPhotoEditToolController photoEditToolController);

	//	// @required -(UIImage * _Nullable)photoEditToolControllerBaseImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditToolControllerBaseImage:")]
	//	[return: NullAllowed]
	//	UIImage PhotoEditToolControllerBaseImage (PESDKPhotoEditToolController photoEditToolController);

	//	// @required -(CIImage * _Nullable)photoEditToolControllerBaseCIImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditToolControllerBaseCIImage:")]
	//	[return: NullAllowed]
	//	CIImage PhotoEditToolControllerBaseCIImage (PESDKPhotoEditToolController photoEditToolController);

	//	// @required -(UIView * _Nullable)photoEditToolControllerPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditToolControllerPreviewView:")]
	//	[return: NullAllowed]
	//	UIView PhotoEditToolControllerPreviewView (PESDKPhotoEditToolController photoEditToolController);

	//	// @required -(UIScrollView * _Nullable)photoEditToolControllerPreviewScrollView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditToolControllerPreviewScrollView:")]
	//	[return: NullAllowed]
	//	UIScrollView PhotoEditToolControllerPreviewScrollView (PESDKPhotoEditToolController photoEditToolController);

	//	// @required -(PESDKSpriteViewController * _Nullable)photoEditToolControllerSpriteViewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("photoEditToolControllerSpriteViewController:")]
	//	[return: NullAllowed]
	//	PESDKSpriteViewController PhotoEditToolControllerSpriteViewController (PESDKPhotoEditToolController photoEditToolController);

	//	// @required -(void)photoEditToolController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
	//	[Abstract]
	//	[Export ("photoEditToolController:didChangePreferredPreviewViewInsetsAnimated:")]
	//	void PhotoEditToolController (PESDKPhotoEditToolController photoEditToolController, bool animated);

	//	// @required -(void)photoEditToolControllerDidChangeWantsDefaultPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController;
	//	[Abstract]
	//	[Export ("photoEditToolControllerDidChangeWantsDefaultPreviewView:")]
	//	void PhotoEditToolControllerDidChangeWantsDefaultPreviewView (PESDKPhotoEditToolController photoEditToolController);
	//}

	//// @interface PESDKPhotoEditViewController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKPhotoEditViewController
	//{
	//	// @property (readonly, nonatomic, strong) PESDKMainFlowController * _Null_unspecified flowController;
	//	[Export ("flowController", ArgumentSemantic.Strong)]
	//	PESDKMainFlowController FlowController { get; }

	//	// @property (readonly, nonatomic, strong) PESDKPhotoEditPreviewController * _Nonnull photoEditPreviewController;
	//	[Export ("photoEditPreviewController", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditPreviewController PhotoEditPreviewController { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull containerView;
	//	[Export ("containerView", ArgumentSemantic.Strong)]
	//	UIView ContainerView { get; }

	//	// @property (readonly, nonatomic, strong) PESDKToolbar * _Nonnull toolbar;
	//	[Export ("toolbar", ArgumentSemantic.Strong)]
	//	PESDKToolbar Toolbar { get; }

	//	// @property (nonatomic, strong) PESDKToolbarItem * _Nonnull toolbarItem;
	//	[Export ("toolbarItem", ArgumentSemantic.Strong)]
	//	PESDKToolbarItem ToolbarItem { get; set; }

	//	// @property (readonly, nonatomic, strong) PESDKConfiguration * _Nonnull configuration;
	//	[Export ("configuration", ArgumentSemantic.Strong)]
	//	PESDKConfiguration Configuration { get; }

	//	// @property (nonatomic, strong) PESDKUndoController * _Nonnull undoController;
	//	[Export ("undoController", ArgumentSemantic.Strong)]
	//	PESDKUndoController UndoController { get; set; }

	//	// @property (readonly, nonatomic, strong) PESDKAssetManager * _Nonnull assetManager;
	//	[Export ("assetManager", ArgumentSemantic.Strong)]
	//	PESDKAssetManager AssetManager { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKPhotoEditViewControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKPhotoEditViewControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, nonatomic) BOOL hasChanges;
	//	[Export ("hasChanges")]
	//	bool HasChanges { get; }

	//	// @property (readonly, copy, nonatomic) NSData * _Nullable serializedSettings __attribute__((deprecated("Use `serializedSettings(withImageData:)` instead.")));
	//	[NullAllowed, Export ("serializedSettings", ArgumentSemantic.Copy)]
	//	NSData SerializedSettings { get; }

	//	// -(NSData * _Nullable)serializedSettingsWithImageData:(BOOL)includeImageData __attribute__((warn_unused_result));
	//	[Export ("serializedSettingsWithImageData:")]
	//	[return: NullAllowed]
	//	NSData SerializedSettingsWithImageData (bool includeImageData);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();

	//	// -(void)viewWillAppear:(BOOL)animated;
	//	[Export ("viewWillAppear:")]
	//	void ViewWillAppear (bool animated);

	//	// -(void)viewDidAppear:(BOOL)animated;
	//	[Export ("viewDidAppear:")]
	//	void ViewDidAppear (bool animated);

	//	// -(void)viewWillDisappear:(BOOL)animated;
	//	[Export ("viewWillDisappear:")]
	//	void ViewWillDisappear (bool animated);

	//	// -(void)viewDidDisappear:(BOOL)animated;
	//	[Export ("viewDidDisappear:")]
	//	void ViewDidDisappear (bool animated);

	//	// -(void)updateViewConstraints;
	//	[Export ("updateViewConstraints")]
	//	void UpdateViewConstraints ();

	//	// -(void)willMoveToParentViewController:(UIViewController * _Nullable)parent;
	//	[Export ("willMoveToParentViewController:")]
	//	void WillMoveToParentViewController ([NullAllowed] UIViewController parent);

	//	// @property (readonly, nonatomic) BOOL prefersStatusBarHidden;
	//	[Export ("prefersStatusBarHidden")]
	//	bool PrefersStatusBarHidden { get; }

	//	// @property (readonly, nonatomic) UIStatusBarStyle preferredStatusBarStyle;
	//	[Export ("preferredStatusBarStyle")]
	//	UIStatusBarStyle PreferredStatusBarStyle { get; }

	//	// @property (readonly, nonatomic) BOOL shouldAutomaticallyForwardAppearanceMethods;
	//	[Export ("shouldAutomaticallyForwardAppearanceMethods")]
	//	bool ShouldAutomaticallyForwardAppearanceMethods { get; }

	//	// @property (readonly, nonatomic) UIRectEdge preferredScreenEdgesDeferringSystemGestures;
	//	[Export ("preferredScreenEdgesDeferringSystemGestures")]
	//	UIRectEdge PreferredScreenEdgesDeferringSystemGestures { get; }

	//	// @property (readonly, nonatomic, strong) PESDKOverlayButton * _Nullable undoButton;
	//	[NullAllowed, Export ("undoButton", ArgumentSemantic.Strong)]
	//	PESDKOverlayButton UndoButton { get; }

	//	// @property (readonly, nonatomic, strong) PESDKOverlayButton * _Nullable redoButton;
	//	[NullAllowed, Export ("redoButton", ArgumentSemantic.Strong)]
	//	PESDKOverlayButton RedoButton { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
	//	[Export ("overlayButtons", ArgumentSemantic.Copy)]
	//	PESDKOverlayButton[] OverlayButtons { get; }

	//	// -(void)presentToolFor:(PESDKToolMenuItem * _Nonnull)toolMenuItem;
	//	[Export ("presentToolFor:")]
	//	void PresentToolFor (PESDKToolMenuItem toolMenuItem);

	//	// -(void)renderHighResolutionImage;
	//	[Export ("renderHighResolutionImage")]
	//	void RenderHighResolutionImage ();

	//	// @property (readonly, copy, nonatomic) NSArray<PESDKPhotoEditToolController *> * _Nonnull viewControllers;
	//	[Export ("viewControllers", ArgumentSemantic.Copy)]
	//	PESDKPhotoEditToolController[] ViewControllers { get; }

	//	// -(void)pushViewController:(PESDKPhotoEditToolController * _Nonnull)viewController animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
	//	[Export ("pushViewController:animated:completion:")]
	//	void PushViewController (PESDKPhotoEditToolController viewController, bool animated, [NullAllowed] Action completion);

	//	// -(PESDKPhotoEditToolController * _Nullable)popViewControllerAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
	//	[Export ("popViewControllerAnimated:completion:")]
	//	[return: NullAllowed]
	//	PESDKPhotoEditToolController PopViewControllerAnimated (bool animated, [NullAllowed] Action completion);
	//}

	//// @interface PhotoEditorSDK_Swift_5186 (PESDKPhotoEditViewController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditViewController))]
	//interface PESDKPhotoEditViewController_PhotoEditorSDK_Swift_5186
	//{
	//	// @property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
	//	[Export ("boxedPhotoEditModel", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditModel BoxedPhotoEditModel { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_5194 (PESDKPhotoEditViewController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditViewController))]
	//interface PESDKPhotoEditViewController_PhotoEditorSDK_Swift_5194
	//{
	//	// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data configuration:(PESDKConfiguration * _Nonnull)configuration __attribute__((deprecated("Use `init(photoAsset:configuration:)` instead.")));
	//	[Export ("initWithData:configuration:")]
	//	IntPtr Constructor (NSData data, PESDKConfiguration configuration);

	//	// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data configuration:(PESDKConfiguration * _Nonnull)configuration menuItems:(NSArray<PESDKPhotoEditMenuItem *> * _Nonnull)menuItems photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel __attribute__((deprecated("Use `init(photoAsset:configuration:menuItems:photoEditModel:)` instead.")));
	//	[Export ("initWithData:configuration:menuItems:photoEditModel:")]
	//	IntPtr Constructor (NSData data, PESDKConfiguration configuration, PESDKPhotoEditMenuItem[] menuItems, PESDKPhotoEditModel photoEditModel);

	//	// -(instancetype _Nonnull)initWithPhoto:(UIImage * _Nonnull)photo configuration:(PESDKConfiguration * _Nonnull)configuration __attribute__((deprecated("Use `init(photoAsset:configuration:)` instead.")));
	//	[Export ("initWithPhoto:configuration:")]
	//	IntPtr Constructor (UIImage photo, PESDKConfiguration configuration);

	//	// -(instancetype _Nonnull)initWithPhoto:(UIImage * _Nonnull)photo configuration:(PESDKConfiguration * _Nonnull)configuration menuItems:(NSArray<PESDKPhotoEditMenuItem *> * _Nonnull)menuItems photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel __attribute__((deprecated("Use `init(photoAsset:configuration:menuItems:photoEditModel:)` instead.")));
	//	[Export ("initWithPhoto:configuration:menuItems:photoEditModel:")]
	//	IntPtr Constructor (UIImage photo, PESDKConfiguration configuration, PESDKPhotoEditMenuItem[] menuItems, PESDKPhotoEditModel photoEditModel);

	//	// -(instancetype _Nonnull)initWithPhotoAsset:(PESDKPhoto * _Nonnull)photoAsset configuration:(PESDKConfiguration * _Nonnull)configuration;
	//	[Export ("initWithPhotoAsset:configuration:")]
	//	IntPtr Constructor (PESDKPhoto photoAsset, PESDKConfiguration configuration);

	//	// -(instancetype _Nonnull)initWithPhotoAsset:(PESDKPhoto * _Nonnull)photoAsset configuration:(PESDKConfiguration * _Nonnull)configuration menuItems:(NSArray<PESDKPhotoEditMenuItem *> * _Nonnull)menuItems photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel;
	//	[Export ("initWithPhotoAsset:configuration:menuItems:photoEditModel:")]
	//	IntPtr Constructor (PESDKPhoto photoAsset, PESDKConfiguration configuration, PESDKPhotoEditMenuItem[] menuItems, PESDKPhotoEditModel photoEditModel);
	//}

	//// @interface PhotoEditorSDK_Swift_5261 (PESDKPhotoEditViewController) <PESDKPhotoEditPreviewControllerDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditViewController))]
	//interface PESDKPhotoEditViewController_PhotoEditorSDK_Swift_5261 : IPESDKPhotoEditPreviewControllerDelegate
	//{
	//	// -(BOOL)photoEditPreviewControllerPreviewEnabled:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Export ("photoEditPreviewControllerPreviewEnabled:")]
	//	bool PhotoEditPreviewControllerPreviewEnabled (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// -(PESDKRenderMode)photoEditPreviewControllerRenderMode:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Export ("photoEditPreviewControllerRenderMode:")]
	//	PESDKRenderMode PhotoEditPreviewControllerRenderMode (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// -(UIColor * _Nonnull)photoEditPreviewControllerBackgroundColor:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Export ("photoEditPreviewControllerBackgroundColor:")]
	//	UIColor PhotoEditPreviewControllerBackgroundColor (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// -(UIEdgeInsets)photoEditPreviewControllerPreviewInsets:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Export ("photoEditPreviewControllerPreviewInsets:")]
	//	UIEdgeInsets PhotoEditPreviewControllerPreviewInsets (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// -(CGFloat)photoEditPreviewControllerPreviewScale:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Export ("photoEditPreviewControllerPreviewScale:")]
	//	nfloat PhotoEditPreviewControllerPreviewScale (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// -(BOOL)photoEditPreviewControllerProxyZoomingActive:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController __attribute__((warn_unused_result));
	//	[Export ("photoEditPreviewControllerProxyZoomingActive:")]
	//	bool PhotoEditPreviewControllerProxyZoomingActive (PESDKPhotoEditPreviewController photoEditPreviewController);

	//	// -(void)photoEditPreviewControllerResetProxyZooming:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController;
	//	[Export ("photoEditPreviewControllerResetProxyZooming:")]
	//	void PhotoEditPreviewControllerResetProxyZooming (PESDKPhotoEditPreviewController photoEditPreviewController);
	//}

	//// @interface PhotoEditorSDK_Swift_5280 (PESDKPhotoEditViewController) <PESDKPhotoEditToolControllerDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditViewController))]
	//interface PESDKPhotoEditViewController_PhotoEditorSDK_Swift_5280 : IPESDKPhotoEditToolControllerDelegate
	//{
	//	// -(PESDKPhotoEditPreviewController * _Nullable)photoEditToolControllerPreviewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Export ("photoEditToolControllerPreviewController:")]
	//	[return: NullAllowed]
	//	PESDKPhotoEditPreviewController PhotoEditToolControllerPreviewController (PESDKPhotoEditToolController photoEditToolController);

	//	// -(UIImage * _Nullable)photoEditToolControllerBaseImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Export ("photoEditToolControllerBaseImage:")]
	//	[return: NullAllowed]
	//	UIImage PhotoEditToolControllerBaseImage (PESDKPhotoEditToolController photoEditToolController);

	//	// -(CIImage * _Nullable)photoEditToolControllerBaseCIImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Export ("photoEditToolControllerBaseCIImage:")]
	//	[return: NullAllowed]
	//	CIImage PhotoEditToolControllerBaseCIImage (PESDKPhotoEditToolController photoEditToolController);

	//	// -(UIView * _Nullable)photoEditToolControllerPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Export ("photoEditToolControllerPreviewView:")]
	//	[return: NullAllowed]
	//	UIView PhotoEditToolControllerPreviewView (PESDKPhotoEditToolController photoEditToolController);

	//	// -(UIScrollView * _Nullable)photoEditToolControllerPreviewScrollView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Export ("photoEditToolControllerPreviewScrollView:")]
	//	[return: NullAllowed]
	//	UIScrollView PhotoEditToolControllerPreviewScrollView (PESDKPhotoEditToolController photoEditToolController);

	//	// -(void)photoEditToolController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
	//	[Export ("photoEditToolController:didChangePreferredPreviewViewInsetsAnimated:")]
	//	void PhotoEditToolController (PESDKPhotoEditToolController photoEditToolController, bool animated);

	//	// -(void)photoEditToolControllerDidChangeWantsDefaultPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController;
	//	[Export ("photoEditToolControllerDidChangeWantsDefaultPreviewView:")]
	//	void PhotoEditToolControllerDidChangeWantsDefaultPreviewView (PESDKPhotoEditToolController photoEditToolController);

	//	// -(PESDKSpriteViewController * _Nullable)photoEditToolControllerSpriteViewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController __attribute__((warn_unused_result));
	//	[Export ("photoEditToolControllerSpriteViewController:")]
	//	[return: NullAllowed]
	//	PESDKSpriteViewController PhotoEditToolControllerSpriteViewController (PESDKPhotoEditToolController photoEditToolController);

	//	// -(void)photoEditPreviewControllerDidChangePhotoEditModel:(PESDKPhotoEditPreviewController * _Nonnull)photoEditPreviewController;
	//	[Export ("photoEditPreviewControllerDidChangePhotoEditModel:")]
	//	void PhotoEditPreviewControllerDidChangePhotoEditModel (PESDKPhotoEditPreviewController photoEditPreviewController);
	//}

	//// @interface PESDKPhotoEditViewControllerOptions : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKPhotoEditViewControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) titleViewConfigurationClosure;
	//	[NullAllowed, Export ("titleViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> TitleViewConfigurationClosure { get; }

	//	// @property (readonly, nonatomic, strong) UIColor * _Nullable backgroundColor;
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Strong)]
	//	UIColor BackgroundColor { get; }

	//	// @property (readonly, nonatomic, strong) UIColor * _Nullable menuBackgroundColor;
	//	[NullAllowed, Export ("menuBackgroundColor", ArgumentSemantic.Strong)]
	//	UIColor MenuBackgroundColor { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) applyButtonConfigurationClosure;
	//	[NullAllowed, Export ("applyButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> ApplyButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) discardButtonConfigurationClosure;
	//	[NullAllowed, Export ("discardButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> DiscardButtonConfigurationClosure { get; }

	//	// @property (readonly, nonatomic) BOOL allowsPreviewImageZoom;
	//	[Export ("allowsPreviewImageZoom")]
	//	bool AllowsPreviewImageZoom { get; }

	//	// @property (readonly, nonatomic) BOOL forceCropMode;
	//	[Export ("forceCropMode")]
	//	bool ForceCropMode { get; }

	//	// @property (readonly, nonatomic) enum PESDKImageFileFormat outputImageFileFormat;
	//	[Export ("outputImageFileFormat")]
	//	PESDKImageFileFormat OutputImageFileFormat { get; }

	//	// @property (readonly, nonatomic) CGFloat compressionQuality;
	//	[Export ("compressionQuality")]
	//	nfloat CompressionQuality { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKOverlayButton * _Nonnull, enum PhotoEditOverlayAction) overlayButtonConfigurationClosure;
	//	[NullAllowed, Export ("overlayButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlayButton, PhotoEditOverlayAction> OverlayButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum PhotoEditOverlayAction) photoEditOverlayActionSelectedClosure;
	//	[NullAllowed, Export ("photoEditOverlayActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PhotoEditOverlayAction> PhotoEditOverlayActionSelectedClosure { get; }

	//	// @property (readonly, nonatomic) BOOL undoStepByStep;
	//	[Export ("undoStepByStep")]
	//	bool UndoStepByStep { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKPhotoEditViewController * _Nonnull, void (^ _Nonnull)(void)) discardConfirmationClosure;
	//	[NullAllowed, Export ("discardConfirmationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKPhotoEditViewController, Action> DiscardConfirmationClosure { get; }

	//	// @property (readonly, nonatomic) BOOL useParentNavigationItem;
	//	[Export ("useParentNavigationItem")]
	//	bool UseParentNavigationItem { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKPhotoEditViewControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKPhotoEditViewControllerOptionsBuilder builder);
	//}

	//// @interface PESDKPhotoEditViewControllerOptionsBuilder : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKPhotoEditViewControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) titleViewConfigurationClosure;
	//	[NullAllowed, Export ("titleViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> TitleViewConfigurationClosure { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable backgroundColor;
	//	[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Strong)]
	//	UIColor BackgroundColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable menuBackgroundColor;
	//	[NullAllowed, Export ("menuBackgroundColor", ArgumentSemantic.Strong)]
	//	UIColor MenuBackgroundColor { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) applyButtonConfigurationClosure;
	//	[NullAllowed, Export ("applyButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> ApplyButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull) discardButtonConfigurationClosure;
	//	[NullAllowed, Export ("discardButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton> DiscardButtonConfigurationClosure { get; set; }

	//	// @property (nonatomic) BOOL forceCropMode;
	//	[Export ("forceCropMode")]
	//	bool ForceCropMode { get; set; }

	//	// @property (nonatomic) BOOL allowsPreviewImageZoom;
	//	[Export ("allowsPreviewImageZoom")]
	//	bool AllowsPreviewImageZoom { get; set; }

	//	// @property (nonatomic) enum PESDKImageFileFormat outputImageFileFormat;
	//	[Export ("outputImageFileFormat", ArgumentSemantic.Assign)]
	//	PESDKImageFileFormat OutputImageFileFormat { get; set; }

	//	// @property (nonatomic) CGFloat compressionQuality;
	//	[Export ("compressionQuality")]
	//	nfloat CompressionQuality { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKOverlayButton * _Nonnull, enum PhotoEditOverlayAction) overlayButtonConfigurationClosure;
	//	[NullAllowed, Export ("overlayButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlayButton, PhotoEditOverlayAction> OverlayButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum PhotoEditOverlayAction) photoEditOverlayActionSelectedClosure;
	//	[NullAllowed, Export ("photoEditOverlayActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PhotoEditOverlayAction> PhotoEditOverlayActionSelectedClosure { get; set; }

	//	// @property (nonatomic) BOOL undoStepByStep;
	//	[Export ("undoStepByStep")]
	//	bool UndoStepByStep { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKPhotoEditViewController * _Nonnull, void (^ _Nonnull)(void)) discardConfirmationClosure;
	//	[NullAllowed, Export ("discardConfirmationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKPhotoEditViewController, Action> DiscardConfirmationClosure { get; set; }

	//	// @property (nonatomic) BOOL useParentNavigationItem;
	//	[Export ("useParentNavigationItem")]
	//	bool UseParentNavigationItem { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_5437 (PESDKPhotoEditViewControllerOptionsBuilder)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKPhotoEditViewControllerOptionsBuilder))]
	//interface PESDKPhotoEditViewControllerOptionsBuilder_PhotoEditorSDK_Swift_5437
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKIconCaptionCollectionViewCell * _Nonnull, PESDKPhotoEditMenuItem * _Nonnull) actionButtonConfigurationBlock;
	//	[NullAllowed, Export ("actionButtonConfigurationBlock", ArgumentSemantic.Copy)]
	//	Action<PESDKIconCaptionCollectionViewCell, PESDKPhotoEditMenuItem> ActionButtonConfigurationBlock { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKPhotoEditMenuItem * _Nonnull) photoEditorActionSelectedBlock;
	//	[NullAllowed, Export ("photoEditorActionSelectedBlock", ArgumentSemantic.Copy)]
	//	Action<PESDKPhotoEditMenuItem> PhotoEditorActionSelectedBlock { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedPhotoEditOverlayActionsAsNSNumbers;
	//	[Export ("allowedPhotoEditOverlayActionsAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedPhotoEditOverlayActionsAsNSNumbers { get; set; }
	//}

	//// @interface PESDKPhotoEffect : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKPhotoEffect
	//{
	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable ciFilterName;
	//	[NullAllowed, Export ("ciFilterName")]
	//	string CiFilterName { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable lutURL;
	//	[NullAllowed, Export ("lutURL", ArgumentSemantic.Copy)]
	//	NSUrl LutURL { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull displayName;
	//	[Export ("displayName")]
	//	string DisplayName { get; }

	//	// @property (readonly, copy, nonatomic) NSDictionary<NSString *,id> * _Nullable options;
	//	[NullAllowed, Export ("options", ArgumentSemantic.Copy)]
	//	NSDictionary<NSString, NSObject> Options { get; }

	//	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier ciFilterName:(NSString * _Nullable)filterName displayName:(NSString * _Nonnull)displayName options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifier:ciFilterName:displayName:options:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string identifier, [NullAllowed] string filterName, string displayName, [NullAllowed] NSDictionary<NSString, NSObject> options);

	//	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier lutURL:(NSURL * _Nullable)lutURL displayName:(NSString * _Nonnull)displayName __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifier:lutURL:displayName:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string identifier, [NullAllowed] NSUrl lutURL, string displayName);

	//	// @property (readonly, nonatomic, strong) CIFilter * _Nullable newEffectFilter;
	//	[NullAllowed, Export ("newEffectFilter", ArgumentSemantic.Strong)]
	//	CIFilter NewEffectFilter { get; }

	//	// @property (copy, nonatomic, class) NSArray<PESDKPhotoEffect *> * _Nonnull allEffects;
	//	[Static]
	//	[Export ("allEffects", ArgumentSemantic.Copy)]
	//	PESDKPhotoEffect[] AllEffects { get; set; }

	//	// +(PESDKPhotoEffect * _Nullable)effectWithIdentifier:(NSString * _Nonnull)identifier __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("effectWithIdentifier:")]
	//	[return: NullAllowed]
	//	PESDKPhotoEffect EffectWithIdentifier (string identifier);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKPhotoEffect New ();
	//}

	//// @interface PESDKPhotoEffectMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKPhotoEffectMenuItem
	//{
	//	// @property (readonly, nonatomic, strong) PESDKPhotoEffect * _Nonnull photoEffect;
	//	[Export ("photoEffect", ArgumentSemantic.Strong)]
	//	PESDKPhotoEffect PhotoEffect { get; }

	//	// @property (nonatomic, strong) UIImage * _Nullable thumbnail;
	//	[NullAllowed, Export ("thumbnail", ArgumentSemantic.Strong)]
	//	UIImage Thumbnail { get; set; }

	//	// -(instancetype _Nonnull)initWithPhotoEffect:(PESDKPhotoEffect * _Nonnull)photoEffect __attribute__((objc_designated_initializer));
	//	[Export ("initWithPhotoEffect:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKPhotoEffect photoEffect);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKPhotoEffectMenuItem New ();
	//}

	//// @interface PESDKPhotoEffectThumbnailRenderer : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKPhotoEffectThumbnailRenderer
	//{
	//	// @property (readonly, nonatomic, strong) UIImage * _Nonnull inputImage;
	//	[Export ("inputImage", ArgumentSemantic.Strong)]
	//	UIImage InputImage { get; }

	//	// -(instancetype _Nonnull)initWithInputImage:(UIImage * _Nonnull)inputImage __attribute__((objc_designated_initializer));
	//	[Export ("initWithInputImage:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIImage inputImage);

	//	// -(void)generateThumbnailsForPhotoEffects:(NSArray<PESDKPhotoEffect *> * _Nonnull)photoEffects ofSize:(CGSize)size singleCompletion:(void (^ _Nonnull)(UIImage * _Nonnull, PESDKPhotoEffect * _Nonnull))singleCompletion;
	//	[Export ("generateThumbnailsForPhotoEffects:ofSize:singleCompletion:")]
	//	void GenerateThumbnailsForPhotoEffects (PESDKPhotoEffect[] photoEffects, CGSize size, Action<UIImage, PESDKPhotoEffect> singleCompletion);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKPhotoEffectThumbnailRenderer New ();
	//}

	//// @interface PESDKProxyZoomController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKProxyZoomController
	//{
	//	// @property (nonatomic, strong) UIScrollView * _Nullable proxyScrollView;
	//	[NullAllowed, Export ("proxyScrollView", ArgumentSemantic.Strong)]
	//	UIScrollView ProxyScrollView { get; set; }

	//	// @property (nonatomic, strong) UIView * _Nullable proxyContentView;
	//	[NullAllowed, Export ("proxyContentView", ArgumentSemantic.Strong)]
	//	UIView ProxyContentView { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKProxyZoomControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKProxyZoomControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(instancetype _Nonnull)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil __attribute__((objc_designated_initializer));
	//	[Export ("initWithNibName:bundle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string nibNameOrNil, [NullAllowed] NSBundle nibBundleOrNil);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)setupProxyScrolling;
	//	[Export ("setupProxyScrolling")]
	//	void SetupProxyScrolling ();

	//	// -(void)resetProxyScrolling;
	//	[Export ("resetProxyScrolling")]
	//	void ResetProxyScrolling ();
	//}

	//// @interface PhotoEditorSDK_Swift_5579 (PESDKProxyZoomController) <UIScrollViewDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKProxyZoomController))]
	//interface PESDKProxyZoomController_PhotoEditorSDK_Swift_5579 : IUIScrollViewDelegate
	//{
	//	// -(void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewDidScroll:")]
	//	void ScrollViewDidScroll (UIScrollView scrollView);

	//	// -(void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewDidZoom:")]
	//	void ScrollViewDidZoom (UIScrollView scrollView);

	//	// -(void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
	//	[Export ("scrollViewDidEndZooming:withView:atScale:")]
	//	void ScrollViewDidEndZooming (UIScrollView scrollView, [NullAllowed] UIView view, nfloat scale);

	//	// -(UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView __attribute__((warn_unused_result));
	//	[Export ("viewForZoomingInScrollView:")]
	//	[return: NullAllowed]
	//	UIView ViewForZoomingInScrollView (UIScrollView scrollView);
	//}

	//// @protocol PESDKProxyZoomControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKProxyZoomControllerDelegate
	//{
	//	// @required -(UIScrollView * _Nullable)proxyZoomControllerTargetScrollView:(PESDKProxyZoomController * _Nonnull)proxyZoomController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("proxyZoomControllerTargetScrollView:")]
	//	[return: NullAllowed]
	//	UIScrollView ProxyZoomControllerTargetScrollView (PESDKProxyZoomController proxyZoomController);

	//	// @required -(void)proxyZoomControllerDidScroll:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
	//	[Abstract]
	//	[Export ("proxyZoomControllerDidScroll:")]
	//	void ProxyZoomControllerDidScroll (PESDKProxyZoomController proxyZoomController);

	//	// @required -(void)proxyZoomControllerDidZoom:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
	//	[Abstract]
	//	[Export ("proxyZoomControllerDidZoom:")]
	//	void ProxyZoomControllerDidZoom (PESDKProxyZoomController proxyZoomController);
	//}

	//// @interface PESDKRadialFocusFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKRadialFocusFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;
	//	[NullAllowed, Export ("inputNormalizedControlPoint1", ArgumentSemantic.Strong)]
	//	NSValue InputNormalizedControlPoint1 { get; set; }

	//	// @property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;
	//	[NullAllowed, Export ("inputNormalizedControlPoint2", ArgumentSemantic.Strong)]
	//	NSValue InputNormalizedControlPoint2 { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputRadius;
	//	[NullAllowed, Export ("inputRadius", ArgumentSemantic.Strong)]
	//	NSNumber InputRadius { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputFadeWidth;
	//	[NullAllowed, Export ("inputFadeWidth", ArgumentSemantic.Strong)]
	//	NSNumber InputFadeWidth { get; set; }

	//	// @property (nonatomic) enum BlurQuality inputBlurQuality;
	//	[Export ("inputBlurQuality", ArgumentSemantic.Assign)]
	//	BlurQuality InputBlurQuality { get; set; }

	//	// -(void)setDefaults;
	//	[Export ("setDefaults")]
	//	void SetDefaults ();

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKStampGenerator : NSObject
	//[BaseType (typeof(NSObject))]
	//interface PESDKStampGenerator
	//{
	//	// @property (nonatomic) CGSize size;
	//	[Export ("size", ArgumentSemantic.Assign)]
	//	CGSize Size { get; set; }

	//	// @property (readonly, nonatomic, strong) UIImage * _Nonnull stamp;
	//	[Export ("stamp", ArgumentSemantic.Strong)]
	//	UIImage Stamp { get; }

	//	// @property (readonly, nonatomic, strong) UIImage * _Nonnull smallStamp;
	//	[Export ("smallStamp", ArgumentSemantic.Strong)]
	//	UIImage SmallStamp { get; }

	//	// @property (readonly, nonatomic) CGFloat baseDimension;
	//	[Export ("baseDimension")]
	//	nfloat BaseDimension { get; }

	//	// @property (readonly, nonatomic) CGRect baseBounds;
	//	[Export ("baseBounds")]
	//	CGRect BaseBounds { get; }

	//	// @property (readonly, nonatomic) CGFloat scale;
	//	[Export ("scale")]
	//	nfloat Scale { get; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKGeneratorDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKGeneratorDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(void)renderStampInContext:(CGContextRef _Nonnull)context;
	//	[Export ("renderStampInContext:")]
	//	unsafe void RenderStampInContext (CGContextRef* context);

	//	// -(CGImageRef _Nonnull)radialFadeWithHardness:(CGFloat)hardness __attribute__((warn_unused_result));
	//	[Export ("radialFadeWithHardness:")]
	//	unsafe CGImageRef* RadialFadeWithHardness (nfloat hardness);
	//}

	//// @interface PESDKRoundGenerator : PESDKStampGenerator
	//[BaseType (typeof(PESDKStampGenerator))]
	//interface PESDKRoundGenerator
	//{
	//	// @property (nonatomic) CGFloat hardness;
	//	[Export ("hardness")]
	//	nfloat Hardness { get; set; }

	//	// -(void)renderStampInContext:(CGContextRef _Nonnull)context;
	//	[Export ("renderStampInContext:")]
	//	unsafe void RenderStampInContext (CGContextRef* context);
	//}

	//// @interface PESDKScalePicker : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface PESDKScalePicker
	//{
	//	// @property (nonatomic) CGFloat currentValue;
	//	[Export ("currentValue")]
	//	nfloat CurrentValue { get; set; }

	//	// @property (nonatomic) NSInteger minValue;
	//	[Export ("minValue")]
	//	nint MinValue { get; set; }

	//	// @property (nonatomic) NSInteger maxValue;
	//	[Export ("maxValue")]
	//	nint MaxValue { get; set; }

	//	// @property (nonatomic) CGSize tickSize;
	//	[Export ("tickSize", ArgumentSemantic.Assign)]
	//	CGSize TickSize { get; set; }

	//	// @property (nonatomic) CGSize mainTickSize;
	//	[Export ("mainTickSize", ArgumentSemantic.Assign)]
	//	CGSize MainTickSize { get; set; }

	//	// @property (nonatomic) CGFloat spaceBetweenTicks;
	//	[Export ("spaceBetweenTicks")]
	//	nfloat SpaceBetweenTicks { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull tickColor;
	//	[Export ("tickColor", ArgumentSemantic.Strong)]
	//	UIColor TickColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull textColor;
	//	[Export ("textColor", ArgumentSemantic.Strong)]
	//	UIColor TextColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull valueLabelBackgroundColor;
	//	[Export ("valueLabelBackgroundColor", ArgumentSemantic.Strong)]
	//	UIColor ValueLabelBackgroundColor { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKScalePickerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKScalePickerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();

	//	// -(void)scrollToValue:(CGFloat)value;
	//	[Export ("scrollToValue:")]
	//	void ScrollToValue (nfloat value);

	//	// -(void)accessibilityIncrement;
	//	[Export ("accessibilityIncrement")]
	//	void AccessibilityIncrement ();

	//	// -(void)accessibilityDecrement;
	//	[Export ("accessibilityDecrement")]
	//	void AccessibilityDecrement ();
	//}

	//// @interface PhotoEditorSDK_Swift_5735 (PESDKScalePicker) <UIScrollViewDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKScalePicker))]
	//interface PESDKScalePicker_PhotoEditorSDK_Swift_5735 : IUIScrollViewDelegate
	//{
	//	// -(void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
	//	[Export ("scrollViewDidScroll:")]
	//	void ScrollViewDidScroll (UIScrollView scrollView);

	//	// -(void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
	//	[Export ("scrollViewWillEndDragging:withVelocity:targetContentOffset:")]
	//	unsafe void ScrollViewWillEndDragging (UIScrollView scrollView, CGPoint velocity, CGPoint* targetContentOffset);
	//}

	//// @protocol PESDKScalePickerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKScalePickerDelegate
	//{
	//	// @required -(void)scalePicker:(CGFloat)value didChangeValue:(PESDKScalePicker * _Nonnull)scalePicker;
	//	[Abstract]
	//	[Export ("scalePicker:didChangeValue:")]
	//	void DidChangeValue (nfloat value, PESDKScalePicker scalePicker);
	//}

	//// @interface PESDKSlider : UIControl
	//[iOS (9,0)]
	//[BaseType (typeof(UIControl))]
	//interface PESDKSlider
	//{
	//	// @property (nonatomic, strong) UIColor * _Nullable thumbTintColor;
	//	[NullAllowed, Export ("thumbTintColor", ArgumentSemantic.Strong)]
	//	UIColor ThumbTintColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull thumbBackgroundColor;
	//	[Export ("thumbBackgroundColor", ArgumentSemantic.Strong)]
	//	UIColor ThumbBackgroundColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable filledTrackColor;
	//	[NullAllowed, Export ("filledTrackColor", ArgumentSemantic.Strong)]
	//	UIColor FilledTrackColor { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull unfilledTrackColor;
	//	[Export ("unfilledTrackColor", ArgumentSemantic.Strong)]
	//	UIColor UnfilledTrackColor { get; set; }

	//	// @property (nonatomic) CGFloat minimumValue;
	//	[Export ("minimumValue")]
	//	nfloat MinimumValue { get; set; }

	//	// @property (nonatomic) CGFloat maximumValue;
	//	[Export ("maximumValue")]
	//	nfloat MaximumValue { get; set; }

	//	// @property (nonatomic) CGFloat neutralValue;
	//	[Export ("neutralValue")]
	//	nfloat NeutralValue { get; set; }

	//	// @property (readonly, nonatomic, strong) UIPanGestureRecognizer * _Nonnull panGestureRecognizer;
	//	[Export ("panGestureRecognizer", ArgumentSemantic.Strong)]
	//	UIPanGestureRecognizer PanGestureRecognizer { get; }

	//	// @property (nonatomic) CGFloat value;
	//	[Export ("value")]
	//	nfloat Value { get; set; }

	//	// @property (nonatomic) CGRect frame;
	//	[Export ("frame", ArgumentSemantic.Assign)]
	//	CGRect Frame { get; set; }

	//	// @property (nonatomic) CGRect bounds;
	//	[Export ("bounds", ArgumentSemantic.Assign)]
	//	CGRect Bounds { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)accessibilityIncrement;
	//	[Export ("accessibilityIncrement")]
	//	void AccessibilityIncrement ();

	//	// -(void)accessibilityDecrement;
	//	[Export ("accessibilityDecrement")]
	//	void AccessibilityDecrement ();

	//	// -(void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
	//	[Export ("encodeWithCoder:")]
	//	void EncodeWithCoder (NSCoder aCoder);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();

	//	// @property (readonly, nonatomic) CGSize intrinsicContentSize;
	//	[Export ("intrinsicContentSize")]
	//	CGSize IntrinsicContentSize { get; }

	//	// -(void)tintColorDidChange;
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();

	//	// -(CGRect)thumbRectFor:(CGRect)bounds value:(CGFloat)value __attribute__((warn_unused_result));
	//	[Export ("thumbRectFor:value:")]
	//	CGRect ThumbRectFor (CGRect bounds, nfloat value);

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull description;
	//	[Export ("description")]
	//	string Description { get; }

	//	// -(BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event __attribute__((warn_unused_result));
	//	[Export ("pointInside:withEvent:")]
	//	bool PointInside (CGPoint point, [NullAllowed] UIEvent @event);

	//	// -(BOOL)beginTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer __attribute__((warn_unused_result));
	//	[Export ("beginTrackingWith:")]
	//	bool BeginTrackingWith (UIPanGestureRecognizer panGestureRecognizer);

	//	// -(void)continueTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer;
	//	[Export ("continueTrackingWith:")]
	//	void ContinueTrackingWith (UIPanGestureRecognizer panGestureRecognizer);

	//	// -(void)endTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer;
	//	[Export ("endTrackingWith:")]
	//	void EndTrackingWith (UIPanGestureRecognizer panGestureRecognizer);
	//}

	//// @interface PESDKSliderTooltip : UIView
	//[BaseType (typeof(UIView))]
	//interface PESDKSliderTooltip
	//{
	//	// @property (nonatomic, strong) UIColor * _Nonnull tooltipColor;
	//	[Export ("tooltipColor", ArgumentSemantic.Strong)]
	//	UIColor TooltipColor { get; set; }

	//	// @property (nonatomic, strong) NSAttributedString * _Nullable attributedString;
	//	[NullAllowed, Export ("attributedString", ArgumentSemantic.Strong)]
	//	NSAttributedString AttributedString { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)drawRect:(CGRect)rect;
	//	[Export ("drawRect:")]
	//	void DrawRect (CGRect rect);

	//	// @property (readonly, nonatomic) CGSize intrinsicContentSize;
	//	[Export ("intrinsicContentSize")]
	//	CGSize IntrinsicContentSize { get; }
	//}

	//// @interface PESDKSpriteAdjustmentsFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKSpriteAdjustmentsFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputBrightness;
	//	[NullAllowed, Export ("inputBrightness", ArgumentSemantic.Strong)]
	//	NSNumber InputBrightness { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputContrast;
	//	[NullAllowed, Export ("inputContrast", ArgumentSemantic.Strong)]
	//	NSNumber InputContrast { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputSaturation;
	//	[NullAllowed, Export ("inputSaturation", ArgumentSemantic.Strong)]
	//	NSNumber InputSaturation { get; set; }

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKSpriteContainerView : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface PESDKSpriteContainerView
	//{
	//	// @property (nonatomic) CGSize referenceSize;
	//	[Export ("referenceSize", ArgumentSemantic.Assign)]
	//	CGSize ReferenceSize { get; set; }

	//	// @property (nonatomic) CGSize currentSize;
	//	[Export ("currentSize", ArgumentSemantic.Assign)]
	//	CGSize CurrentSize { get; set; }

	//	// @property (readonly, nonatomic) CGFloat imageToViewScaleFactor;
	//	[Export ("imageToViewScaleFactor")]
	//	nfloat ImageToViewScaleFactor { get; }

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PhotoEditorSDK_Swift_5896 (PESDKSpriteContainerView)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKSpriteContainerView))]
	//interface PESDKSpriteContainerView_PhotoEditorSDK_Swift_5896
	//{
	//	// @property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
	//	[Export ("boxedPhotoEditModel", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditModel BoxedPhotoEditModel { get; set; }
	//}

	//// @interface PESDKSpriteLabel : UILabel
	//[iOS (9,0)]
	//[BaseType (typeof(UILabel))]
	//interface PESDKSpriteLabel
	//{
	//	// @property (nonatomic) CGFloat normalizedWidth;
	//	[Export ("normalizedWidth")]
	//	nfloat NormalizedWidth { get; set; }

	//	// @property (nonatomic) CGPoint normalizedCenter;
	//	[Export ("normalizedCenter", ArgumentSemantic.Assign)]
	//	CGPoint NormalizedCenter { get; set; }

	//	// @property (nonatomic) CGFloat normalizedFontSize;
	//	[Export ("normalizedFontSize")]
	//	nfloat NormalizedFontSize { get; set; }

	//	// @property (nonatomic) CGFloat rotation;
	//	[Export ("rotation")]
	//	nfloat Rotation { get; set; }

	//	// @property (nonatomic) BOOL horizontallyFlipped;
	//	[Export ("horizontallyFlipped")]
	//	bool HorizontallyFlipped { get; set; }

	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull uuid;
	//	[Export ("uuid", ArgumentSemantic.Copy)]
	//	NSUuid Uuid { get; }

	//	// -(instancetype _Nonnull)initWithUuid:(NSUUID * _Nonnull)uuid __attribute__((objc_designated_initializer));
	//	[Export ("initWithUuid:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUuid uuid);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
	//	[Export ("encodeWithCoder:")]
	//	void EncodeWithCoder (NSCoder aCoder);
	//}

	//// @interface PESDKTextDesignView : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface PESDKTextDesignView
	//{
	//	// @property (nonatomic, strong) PESDKTextDesign * _Nullable textDesign;
	//	[NullAllowed, Export ("textDesign", ArgumentSemantic.Strong)]
	//	PESDKTextDesign TextDesign { get; set; }

	//	// @property (nonatomic) CGFloat renderingScaleFactor;
	//	[Export ("renderingScaleFactor")]
	//	nfloat RenderingScaleFactor { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable text;
	//	[NullAllowed, Export ("text")]
	//	string Text { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// @property (nonatomic) uint64_t randomizerSeed;
	//	[Export ("randomizerSeed")]
	//	ulong RandomizerSeed { get; set; }

	//	// @property (nonatomic) BOOL isInverted;
	//	[Export ("isInverted")]
	//	bool IsInverted { get; set; }

	//	// @property (readonly, nonatomic, strong) UIImageView * _Nonnull imageView;
	//	[Export ("imageView", ArgumentSemantic.Strong)]
	//	UIImageView ImageView { get; }

	//	// @property (nonatomic) CGFloat padding;
	//	[Export ("padding")]
	//	nfloat Padding { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
	//	[Export ("encodeWithCoder:")]
	//	void EncodeWithCoder (NSCoder aCoder);

	//	// -(CGSize)sizeThatFits:(CGSize)size __attribute__((warn_unused_result));
	//	[Export ("sizeThatFits:")]
	//	CGSize SizeThatFits (CGSize size);

	//	// -(void)drawRect:(CGRect)rect;
	//	[Export ("drawRect:")]
	//	void DrawRect (CGRect rect);

	//	// -(void)render;
	//	[Export ("render")]
	//	void Render ();
	//}

	//// @interface PESDKSpriteTextDesignView : PESDKTextDesignView
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignView))]
	//interface PESDKSpriteTextDesignView
	//{
	//	// @property (nonatomic) CGFloat normalizedWidth;
	//	[Export ("normalizedWidth")]
	//	nfloat NormalizedWidth { get; set; }

	//	// @property (nonatomic) CGPoint normalizedCenter;
	//	[Export ("normalizedCenter", ArgumentSemantic.Assign)]
	//	CGPoint NormalizedCenter { get; set; }

	//	// @property (nonatomic) CGFloat normalizedPadding;
	//	[Export ("normalizedPadding")]
	//	nfloat NormalizedPadding { get; set; }

	//	// @property (nonatomic) CGFloat rotation;
	//	[Export ("rotation")]
	//	nfloat Rotation { get; set; }

	//	// @property (nonatomic) BOOL horizontallyFlipped;
	//	[Export ("horizontallyFlipped")]
	//	bool HorizontallyFlipped { get; set; }

	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull uuid;
	//	[Export ("uuid", ArgumentSemantic.Copy)]
	//	NSUuid Uuid { get; }

	//	// -(instancetype _Nonnull)initWithUuid:(NSUUID * _Nonnull)uuid __attribute__((objc_designated_initializer));
	//	[Export ("initWithUuid:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUuid uuid);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
	//	[Export ("encodeWithCoder:")]
	//	void EncodeWithCoder (NSCoder aCoder);
	//}

	//// @interface PESDKSpriteViewController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKSpriteViewController
	//{
	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKSpriteViewControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKSpriteViewControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (readonly, nonatomic, strong) PESDKSpriteContainerView * _Nonnull spriteContainerView;
	//	[Export ("spriteContainerView", ArgumentSemantic.Strong)]
	//	PESDKSpriteContainerView SpriteContainerView { get; }

	//	// @property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
	//	[NullAllowed, Export ("assetManager", ArgumentSemantic.Strong)]
	//	PESDKAssetManager AssetManager { get; set; }

	//	// @property (nonatomic) CGSize referenceSize;
	//	[Export ("referenceSize", ArgumentSemantic.Assign)]
	//	CGSize ReferenceSize { get; set; }

	//	// @property (nonatomic) CGSize currentSize;
	//	[Export ("currentSize", ArgumentSemantic.Assign)]
	//	CGSize CurrentSize { get; set; }

	//	// -(void)loadView;
	//	[Export ("loadView")]
	//	void LoadView ();

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();

	//	// -(void)tapped:(UITapGestureRecognizer * _Nonnull)gestureRecognizer;
	//	[Export ("tapped:")]
	//	void Tapped (UITapGestureRecognizer gestureRecognizer);

	//	// -(instancetype _Nonnull)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithNibName:bundle:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] string nibNameOrNil, [NullAllowed] NSBundle nibBundleOrNil);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PhotoEditorSDK_Swift_6059 (PESDKSpriteViewController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKSpriteViewController))]
	//interface PESDKSpriteViewController_PhotoEditorSDK_Swift_6059
	//{
	//	// @property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
	//	[Export ("boxedPhotoEditModel", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditModel BoxedPhotoEditModel { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_6066 (PESDKSpriteViewController) <PESDKCanvasViewDataSource>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKSpriteViewController))]
	//interface PESDKSpriteViewController_PhotoEditorSDK_Swift_6066 : IPESDKCanvasViewDataSource
	//{
	//	// -(CGRect)canvasViewNormalizedCropRect:(PESDKCanvasView * _Nonnull)canvasView __attribute__((warn_unused_result));
	//	[Export ("canvasViewNormalizedCropRect:")]
	//	CGRect CanvasViewNormalizedCropRect (PESDKCanvasView canvasView);

	//	// -(enum PESDKOrientation)canvasViewAppliedOrientation:(PESDKCanvasView * _Nonnull)canvasView __attribute__((warn_unused_result));
	//	[Export ("canvasViewAppliedOrientation:")]
	//	PESDKOrientation CanvasViewAppliedOrientation (PESDKCanvasView canvasView);

	//	// -(CGFloat)canvasViewStraightenAngle:(PESDKCanvasView * _Nonnull)canvasView __attribute__((warn_unused_result));
	//	[Export ("canvasViewStraightenAngle:")]
	//	nfloat CanvasViewStraightenAngle (PESDKCanvasView canvasView);

	//	// -(UIEdgeInsets)canvasViewImageInsets:(PESDKCanvasView * _Nonnull)canvasView __attribute__((warn_unused_result));
	//	[Export ("canvasViewImageInsets:")]
	//	UIEdgeInsets CanvasViewImageInsets (PESDKCanvasView canvasView);

	//	// -(CGSize)canvasViewOutputImageSize:(PESDKCanvasView * _Nonnull)canvasView __attribute__((warn_unused_result));
	//	[Export ("canvasViewOutputImageSize:")]
	//	CGSize CanvasViewOutputImageSize (PESDKCanvasView canvasView);
	//}

	//// @interface PESDKSticker : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKSticker
	//{
	//	// @property (readonly, copy, nonatomic) NSURL * _Nonnull imageURL;
	//	[Export ("imageURL", ArgumentSemantic.Copy)]
	//	NSUrl ImageURL { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nullable thumbnailURL;
	//	[NullAllowed, Export ("thumbnailURL", ArgumentSemantic.Copy)]
	//	NSUrl ThumbnailURL { get; }

	//	// @property (readonly, nonatomic) enum PESDKStickerTintMode tintMode;
	//	[Export ("tintMode")]
	//	PESDKStickerTintMode TintMode { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; }

	//	// @property (nonatomic) BOOL allowBrightnessAdjustment;
	//	[Export ("allowBrightnessAdjustment")]
	//	bool AllowBrightnessAdjustment { get; set; }

	//	// @property (nonatomic) BOOL allowContrastAdjustment;
	//	[Export ("allowContrastAdjustment")]
	//	bool AllowContrastAdjustment { get; set; }

	//	// @property (nonatomic) BOOL allowSaturationAdjustment;
	//	[Export ("allowSaturationAdjustment")]
	//	bool AllowSaturationAdjustment { get; set; }

	//	// -(instancetype _Nonnull)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL identifier:(NSString * _Nonnull)identifier;
	//	[Export ("initWithImageURL:thumbnailURL:identifier:")]
	//	IntPtr Constructor (NSUrl imageURL, [NullAllowed] NSUrl thumbnailURL, string identifier);

	//	// -(instancetype _Nonnull)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL tintMode:(enum PESDKStickerTintMode)tintMode identifier:(NSString * _Nonnull)identifier __attribute__((objc_designated_initializer));
	//	[Export ("initWithImageURL:thumbnailURL:tintMode:identifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUrl imageURL, [NullAllowed] NSUrl thumbnailURL, PESDKStickerTintMode tintMode, string identifier);

	//	// +(PESDKSticker * _Nullable)withIdentifier:(NSString * _Nonnull)identifier __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("withIdentifier:")]
	//	[return: NullAllowed]
	//	PESDKSticker WithIdentifier (string identifier);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKSticker New ();
	//}

	//// @interface PESDKStickerCategory : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKStickerCategory
	//{
	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nonnull imageURL;
	//	[Export ("imageURL", ArgumentSemantic.Copy)]
	//	NSUrl ImageURL { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<PESDKSticker *> * _Nonnull stickers;
	//	[Export ("stickers", ArgumentSemantic.Copy)]
	//	PESDKSticker[] Stickers { get; }

	//	// -(instancetype _Nonnull)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers __attribute__((objc_designated_initializer));
	//	[Export ("initWithTitle:imageURL:stickers:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string title, NSUrl imageURL, PESDKSticker[] stickers);

	//	// @property (copy, nonatomic, class) NSArray<PESDKStickerCategory *> * _Nonnull all;
	//	[Static]
	//	[Export ("all", ArgumentSemantic.Copy)]
	//	PESDKStickerCategory[] All { get; set; }

	//	// +(NSArray<PESDKStickerCategory *> * _Nonnull)createDefaultStickerCategories __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("createDefaultStickerCategories")]
	//	[Verify (MethodToProperty)]
	//	PESDKStickerCategory[] CreateDefaultStickerCategories { get; }

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKStickerCategory New ();
	//}

	//// @interface PESDKStickerCategoryMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKStickerCategoryMenuItem
	//{
	//	// @property (readonly, nonatomic, strong) PESDKStickerCategory * _Nonnull stickerCategory;
	//	[Export ("stickerCategory", ArgumentSemantic.Strong)]
	//	PESDKStickerCategory StickerCategory { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nonnull iconURL;
	//	[Export ("iconURL", ArgumentSemantic.Copy)]
	//	NSUrl IconURL { get; }

	//	// -(instancetype _Nonnull)initWithStickerCategory:(PESDKStickerCategory * _Nonnull)stickerCategory;
	//	[Export ("initWithStickerCategory:")]
	//	IntPtr Constructor (PESDKStickerCategory stickerCategory);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKStickerCategoryMenuItem New ();
	//}

	//// @interface PESDKIconCollectionViewCell : UICollectionViewCell
	//[iOS (9,0)]
	//[BaseType (typeof(UICollectionViewCell))]
	//interface PESDKIconCollectionViewCell
	//{
	//	// @property (readonly, nonatomic, strong) UIImageView * _Nonnull imageView;
	//	[Export ("imageView", ArgumentSemantic.Strong)]
	//	UIImageView ImageView { get; }

	//	// @property (readonly, nonatomic, strong) UIActivityIndicatorView * _Nonnull activityIndicator;
	//	[Export ("activityIndicator", ArgumentSemantic.Strong)]
	//	UIActivityIndicatorView ActivityIndicator { get; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)prepareForReuse;
	//	[Export ("prepareForReuse")]
	//	void PrepareForReuse ();

	//	// @property (getter = isSelected, nonatomic) BOOL selected;
	//	[Export ("selected")]
	//	bool Selected { [Bind ("isSelected")] get; set; }

	//	// @property (getter = isHighlighted, nonatomic) BOOL highlighted;
	//	[Export ("highlighted")]
	//	bool Highlighted { [Bind ("isHighlighted")] get; set; }
	//}

	//// @interface PESDKStickerImageView : PESDKSpriteImageView
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKSpriteImageView))]
	//interface PESDKStickerImageView
	//{
	//	// @property (nonatomic) CGSize normalizedSize;
	//	[Export ("normalizedSize", ArgumentSemantic.Assign)]
	//	CGSize NormalizedSize { get; set; }

	//	// @property (nonatomic) CGPoint normalizedCenter;
	//	[Export ("normalizedCenter", ArgumentSemantic.Assign)]
	//	CGPoint NormalizedCenter { get; set; }

	//	// @property (nonatomic) BOOL horizontallyFlipped;
	//	[Export ("horizontallyFlipped")]
	//	bool HorizontallyFlipped { get; set; }

	//	// -(instancetype _Nonnull)initWithUuid:(NSUUID * _Nonnull)uuid __attribute__((objc_designated_initializer));
	//	[Export ("initWithUuid:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSUuid uuid);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
	//	[Export ("encodeWithCoder:")]
	//	void EncodeWithCoder (NSCoder aCoder);

	//	// @property (nonatomic) enum PESDKStickerTintMode tintMode;
	//	[Export ("tintMode", ArgumentSemantic.Assign)]
	//	PESDKStickerTintMode TintMode { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull colorizeColor;
	//	[Export ("colorizeColor", ArgumentSemantic.Strong)]
	//	UIColor ColorizeColor { get; set; }

	//	// @property (nonatomic) CGFloat brightness;
	//	[Export ("brightness")]
	//	nfloat Brightness { get; set; }

	//	// @property (nonatomic) CGFloat contrast;
	//	[Export ("contrast")]
	//	nfloat Contrast { get; set; }

	//	// @property (nonatomic) CGFloat saturation;
	//	[Export ("saturation")]
	//	nfloat Saturation { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable image;
	//	[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
	//	UIImage Image { get; set; }
	//}

	//// @interface PESDKStickerMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKStickerMenuItem
	//{
	//	// @property (readonly, nonatomic, strong) PESDKSticker * _Nonnull sticker;
	//	[Export ("sticker", ArgumentSemantic.Strong)]
	//	PESDKSticker Sticker { get; }

	//	// @property (readonly, copy, nonatomic) NSURL * _Nonnull iconURL;
	//	[Export ("iconURL", ArgumentSemantic.Copy)]
	//	NSUrl IconURL { get; }

	//	// -(instancetype _Nonnull)initWithSticker:(PESDKSticker * _Nonnull)sticker;
	//	[Export ("initWithSticker:")]
	//	IntPtr Constructor (PESDKSticker sticker);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKStickerMenuItem New ();
	//}

	//// @interface PESDKStickerOptionMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKStickerOptionMenuItem
	//{
	//	// @property (readonly, nonatomic) enum StickerAction stickerAction;
	//	[Export ("stickerAction")]
	//	StickerAction StickerAction { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable icon;
	//	[NullAllowed, Export ("icon", ArgumentSemantic.Strong)]
	//	UIImage Icon { get; set; }

	//	// -(instancetype _Nonnull)initWithStickerAction:(enum StickerAction)stickerAction;
	//	[Export ("initWithStickerAction:")]
	//	IntPtr Constructor (StickerAction stickerAction);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKStickerOptionMenuItem New ();
	//}

	//// @interface PESDKStickerOptionsToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKStickerOptionsToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum StickerAction) stickerActionSelectedClosure;
	//	[NullAllowed, Export ("stickerActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<StickerAction> StickerActionSelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UICollectionViewCell * _Nonnull, enum StickerAction) actionButtonConfigurationClosure;
	//	[NullAllowed, Export ("actionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UICollectionViewCell, StickerAction> ActionButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKOverlayButton * _Nonnull, enum StickerOverlayAction) overlayButtonConfigurationClosure;
	//	[NullAllowed, Export ("overlayButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlayButton, StickerOverlayAction> OverlayButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum StickerOverlayAction) stickerOverlayActionSelectedClosure;
	//	[NullAllowed, Export ("stickerOverlayActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<StickerOverlayAction> StickerOverlayActionSelectedClosure { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKStickerOptionsToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKStickerOptionsToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKStickerOptionsToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKStickerOptionsToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(enum StickerAction) stickerActionSelectedClosure;
	//	[NullAllowed, Export ("stickerActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<StickerAction> StickerActionSelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UICollectionViewCell * _Nonnull, enum StickerAction) actionButtonConfigurationClosure;
	//	[NullAllowed, Export ("actionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UICollectionViewCell, StickerAction> ActionButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKOverlayButton * _Nonnull, enum StickerOverlayAction) overlayButtonConfigurationClosure;
	//	[NullAllowed, Export ("overlayButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlayButton, StickerOverlayAction> OverlayButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum StickerOverlayAction) stickerOverlayActionSelectedClosure;
	//	[NullAllowed, Export ("stickerOverlayActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<StickerOverlayAction> StickerOverlayActionSelectedClosure { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_6347 (PESDKStickerOptionsToolControllerOptionsBuilder)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKStickerOptionsToolControllerOptionsBuilder))]
	//interface PESDKStickerOptionsToolControllerOptionsBuilder_PhotoEditorSDK_Swift_6347
	//{
	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedStickerOverlayActionsAsNSNumbers;
	//	[Export ("allowedStickerOverlayActionsAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedStickerOverlayActionsAsNSNumbers { get; set; }
	//}

	//// @interface PESDKStickerSelectionController : PESDKViewController
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKViewController))]
	//interface PESDKStickerSelectionController
	//{
	//	// @property (readonly, nonatomic, strong) UICollectionView * _Nonnull collectionView;
	//	[Export ("collectionView", ArgumentSemantic.Strong)]
	//	UICollectionView CollectionView { get; }

	//	// @property (readonly, nonatomic, strong) PESDKGradientView * _Nonnull gradientView;
	//	[Export ("gradientView", ArgumentSemantic.Strong)]
	//	PESDKGradientView GradientView { get; }

	//	// @property (readonly, nonatomic, strong) UIVisualEffectView * _Nonnull visualEffectView;
	//	[Export ("visualEffectView", ArgumentSemantic.Strong)]
	//	UIVisualEffectView VisualEffectView { get; }

	//	// @property (nonatomic) CGSize stickerPreviewSize;
	//	[Export ("stickerPreviewSize", ArgumentSemantic.Assign)]
	//	CGSize StickerPreviewSize { get; set; }

	//	// @property (copy, nonatomic) NSArray<PESDKSticker *> * _Nonnull stickers;
	//	[Export ("stickers", ArgumentSemantic.Copy)]
	//	PESDKSticker[] Stickers { get; set; }

	//	[Wrap ("WeakDelegate")]
	//	[NullAllowed]
	//	PESDKStickerSelectionControllerDelegate Delegate { get; set; }

	//	// @property (nonatomic, weak) id<PESDKStickerSelectionControllerDelegate> _Nullable delegate;
	//	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
	//	NSObject WeakDelegate { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKIconCollectionViewCell * _Nonnull, PESDKSticker * _Nonnull) cellConfigurationClosure;
	//	[NullAllowed, Export ("cellConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKIconCollectionViewCell, PESDKSticker> CellConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSticker * _Nonnull) stickerAddedClosure;
	//	[NullAllowed, Export ("stickerAddedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSticker> StickerAddedClosure { get; set; }

	//	// @property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
	//	[NullAllowed, Export ("assetManager", ArgumentSemantic.Strong)]
	//	PESDKAssetManager AssetManager { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)viewDidLoad;
	//	[Export ("viewDidLoad")]
	//	void ViewDidLoad ();

	//	// -(void)viewDidAppear:(BOOL)animated;
	//	[Export ("viewDidAppear:")]
	//	void ViewDidAppear (bool animated);
	//}

	//// @interface PhotoEditorSDK_Swift_6402 (PESDKStickerSelectionController) <UICollectionViewDataSourcePrefetching>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKStickerSelectionController))]
	//interface PESDKStickerSelectionController_PhotoEditorSDK_Swift_6402 : IUICollectionViewDataSourcePrefetching
	//{
	//	// -(void)collectionView:(UICollectionView * _Nonnull)collectionView prefetchItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
	//	[Export ("collectionView:prefetchItemsAtIndexPaths:")]
	//	void CollectionView (UICollectionView collectionView, NSIndexPath[] indexPaths);

	//	// -(void)collectionView:(UICollectionView * _Nonnull)collectionView cancelPrefetchingForItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
	//	[Export ("collectionView:cancelPrefetchingForItemsAtIndexPaths:")]
	//	void CollectionView (UICollectionView collectionView, NSIndexPath[] indexPaths);
	//}

	//// @interface PhotoEditorSDK_Swift_6411 (PESDKStickerSelectionController) <UICollectionViewDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKStickerSelectionController))]
	//interface PESDKStickerSelectionController_PhotoEditorSDK_Swift_6411 : IUICollectionViewDelegate
	//{
	//	// -(void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:didSelectItemAtIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, NSIndexPath indexPath);

	//	// -(void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
	//	[Export ("collectionView:willDisplayCell:forItemAtIndexPath:")]
	//	void CollectionView (UICollectionView collectionView, UICollectionViewCell cell, NSIndexPath indexPath);
	//}

	//// @protocol PESDKStickerSelectionControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKStickerSelectionControllerDelegate
	//{
	//	// @required -(void)stickerSelectionController:(PESDKStickerSelectionController * _Nonnull)stickerSelectionController didSelect:(PESDKSticker * _Nonnull)sticker with:(UIImage * _Nonnull)image;
	//	[Abstract]
	//	[Export ("stickerSelectionController:didSelect:with:")]
	//	void DidSelect (PESDKStickerSelectionController stickerSelectionController, PESDKSticker sticker, UIImage image);
	//}

	//// @interface PESDKStickerSelectionView : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface PESDKStickerSelectionView
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(void) decrementHandler;
	//	[NullAllowed, Export ("decrementHandler", ArgumentSemantic.Copy)]
	//	Action DecrementHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) incrementHandler;
	//	[NullAllowed, Export ("incrementHandler", ArgumentSemantic.Copy)]
	//	Action IncrementHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) rotateLeftHandler;
	//	[NullAllowed, Export ("rotateLeftHandler", ArgumentSemantic.Copy)]
	//	Action RotateLeftHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) rotateRightHandler;
	//	[NullAllowed, Export ("rotateRightHandler", ArgumentSemantic.Copy)]
	//	Action RotateRightHandler { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(CGRect)alignmentRectForFrame:(CGRect)frame __attribute__((warn_unused_result));
	//	[Export ("alignmentRectForFrame:")]
	//	CGRect AlignmentRectForFrame (CGRect frame);

	//	// -(void)accessibilityDecrement;
	//	[Export ("accessibilityDecrement")]
	//	void AccessibilityDecrement ();

	//	// -(void)accessibilityIncrement;
	//	[Export ("accessibilityIncrement")]
	//	void AccessibilityIncrement ();
	//}

	//// @interface PESDKStickerToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKStickerToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKSticker * _Nonnull) addedStickerClosure;
	//	[NullAllowed, Export ("addedStickerClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSticker> AddedStickerClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKIconBorderedCollectionViewCell * _Nonnull, PESDKStickerCategory * _Nonnull) stickerCategoryButtonConfigurationClosure;
	//	[NullAllowed, Export ("stickerCategoryButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKIconBorderedCollectionViewCell, PESDKStickerCategory> StickerCategoryButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKIconCollectionViewCell * _Nonnull, PESDKSticker * _Nonnull) stickerButtonConfigurationClosure;
	//	[NullAllowed, Export ("stickerButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKIconCollectionViewCell, PESDKSticker> StickerButtonConfigurationClosure { get; }

	//	// @property (readonly, nonatomic) CGSize stickerPreviewSize;
	//	[Export ("stickerPreviewSize")]
	//	CGSize StickerPreviewSize { get; }

	//	// @property (readonly, nonatomic) NSInteger defaultStickerCategoryIndex;
	//	[Export ("defaultStickerCategoryIndex")]
	//	nint DefaultStickerCategoryIndex { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKStickerToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKStickerToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKStickerToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKStickerToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKSticker * _Nonnull) addedStickerClosure;
	//	[NullAllowed, Export ("addedStickerClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKSticker> AddedStickerClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKIconBorderedCollectionViewCell * _Nonnull, PESDKStickerCategory * _Nonnull) stickerCategoryButtonConfigurationClosure;
	//	[NullAllowed, Export ("stickerCategoryButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKIconBorderedCollectionViewCell, PESDKStickerCategory> StickerCategoryButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKIconCollectionViewCell * _Nonnull, PESDKSticker * _Nonnull) stickerButtonConfigurationClosure;
	//	[NullAllowed, Export ("stickerButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKIconCollectionViewCell, PESDKSticker> StickerButtonConfigurationClosure { get; set; }

	//	// @property (nonatomic) CGSize stickerPreviewSize;
	//	[Export ("stickerPreviewSize", ArgumentSemantic.Assign)]
	//	CGSize StickerPreviewSize { get; set; }

	//	// @property (nonatomic) NSInteger defaultStickerCategoryIndex;
	//	[Export ("defaultStickerCategoryIndex")]
	//	nint DefaultStickerCategoryIndex { get; set; }
	//}

	//// @interface PESDKTemperatureFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKTemperatureFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) NSNumber * _Nullable inputTemperature;
	//	[NullAllowed, Export ("inputTemperature", ArgumentSemantic.Strong)]
	//	NSNumber InputTemperature { get; set; }

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKTextButton : PESDKButton
	//[BaseType (typeof(PESDKButton))]
	//interface PESDKTextButton
	//{
	//	// @property (nonatomic, strong) UIColor * _Nonnull labelColor;
	//	[Export ("labelColor", ArgumentSemantic.Strong)]
	//	UIColor LabelColor { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull fontName;
	//	[Export ("fontName")]
	//	string FontName { get; set; }

	//	// @property (nonatomic) CGRect frame;
	//	[Export ("frame", ArgumentSemantic.Assign)]
	//	CGRect Frame { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nonnull displayName;
	//	[Export ("displayName")]
	//	string DisplayName { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKTextColorToolControllerOptions : PESDKColorToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKColorToolControllerOptions))]
	//interface PESDKTextColorToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) NSArray<UIColor *> * _Nonnull availableBackgroundTextColors;
	//	[Export ("availableBackgroundTextColors", ArgumentSemantic.Copy)]
	//	UIColor[] AvailableBackgroundTextColors { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull availableBackgroundTextColorNames;
	//	[Export ("availableBackgroundTextColorNames", ArgumentSemantic.Copy)]
	//	string[] AvailableBackgroundTextColorNames { get; }

	//	// -(instancetype _Nonnull)initWithTextBuilder:(PESDKTextColorToolControllerOptionsBuilder * _Nonnull)textBuilder __attribute__((objc_designated_initializer));
	//	[Export ("initWithTextBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKTextColorToolControllerOptionsBuilder textBuilder);
	//}

	//// @interface PESDKTextColorToolControllerOptionsBuilder : PESDKColorToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKColorToolControllerOptionsBuilder))]
	//interface PESDKTextColorToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) NSArray<UIColor *> * _Nonnull availableBackgroundTextColors;
	//	[Export ("availableBackgroundTextColors", ArgumentSemantic.Copy)]
	//	UIColor[] AvailableBackgroundTextColors { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSString *> * _Nonnull availableBackgroundTextColorNames;
	//	[Export ("availableBackgroundTextColorNames", ArgumentSemantic.Copy)]
	//	string[] AvailableBackgroundTextColorNames { get; set; }
	//}

	//// @interface PESDKTextDesign : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKTextDesign
	//{
	//	// @property (copy, nonatomic, class) NSArray<PESDKTextDesign *> * _Nonnull all;
	//	[Static]
	//	[Export ("all", ArgumentSemantic.Copy)]
	//	PESDKTextDesign[] All { get; set; }

	//	// +(PESDKTextDesign * _Nullable)textDesignWithIdentifier:(NSString * _Nonnull)identifier __attribute__((warn_unused_result));
	//	[Static]
	//	[Export ("textDesignWithIdentifier:")]
	//	[return: NullAllowed]
	//	PESDKTextDesign TextDesignWithIdentifier (string identifier);

	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; }

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKTextDesign New ();
	//}

	//// @interface PESDKTextDesignBlocks : PESDKTextDesign
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesign))]
	//interface PESDKTextDesignBlocks
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	PESDKTextDesignBlocks New ();
	//}

	//// @interface PESDKTextDesignBlocksCondensed : PESDKTextDesignBlocks
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignBlocks))]
	//interface PESDKTextDesignBlocksCondensed
	//{
	//}

	//// @interface PESDKTextDesignBlocksLight : PESDKTextDesignBlocks
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignBlocks))]
	//interface PESDKTextDesignBlocksLight
	//{
	//}

	//// @interface PESDKTextDesignCelebrate : PESDKTextDesignBlocks
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignBlocks))]
	//interface PESDKTextDesignCelebrate
	//{
	//}

	//// @interface PESDKTextDesignCelebrateSimple : PESDKTextDesignCelebrate
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignCelebrate))]
	//interface PESDKTextDesignCelebrateSimple
	//{
	//}

	//// @interface PESDKTextDesignEqualWidth : PESDKTextDesign
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesign))]
	//interface PESDKTextDesignEqualWidth
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	PESDKTextDesignEqualWidth New ();
	//}

	//// @interface PESDKTextDesignEqualWidthFat : PESDKTextDesignEqualWidth
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignEqualWidth))]
	//interface PESDKTextDesignEqualWidthFat
	//{
	//}

	//// @interface PESDKTextDesignMasked : PESDKTextDesign
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesign))]
	//interface PESDKTextDesignMasked
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	PESDKTextDesignMasked New ();
	//}

	//// @interface PESDKTextDesignMaskedBadge : PESDKTextDesignMasked
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignMasked))]
	//interface PESDKTextDesignMaskedBadge
	//{
	//}

	//// @interface PESDKTextDesignMaskedSpeechBubble : PESDKTextDesignMasked
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignMasked))]
	//interface PESDKTextDesignMaskedSpeechBubble
	//{
	//}

	//// @interface PESDKTextDesignMaskedSpeechBubbleComic : PESDKTextDesignMaskedSpeechBubble
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignMaskedSpeechBubble))]
	//interface PESDKTextDesignMaskedSpeechBubbleComic
	//{
	//}

	//// @interface PESDKTextDesignMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKTextDesignMenuItem
	//{
	//	// @property (readonly, nonatomic, strong) PESDKTextDesign * _Nonnull textDesign;
	//	[Export ("textDesign", ArgumentSemantic.Strong)]
	//	PESDKTextDesign TextDesign { get; }

	//	// @property (nonatomic, strong) UIImage * _Nonnull icon;
	//	[Export ("icon", ArgumentSemantic.Strong)]
	//	UIImage Icon { get; set; }

	//	// -(instancetype _Nonnull)initWithTextDesign:(PESDKTextDesign * _Nonnull)textDesign;
	//	[Export ("initWithTextDesign:")]
	//	IntPtr Constructor (PESDKTextDesign textDesign);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKTextDesignMenuItem New ();
	//}

	//// @interface PESDKTextDesignMultiline : PESDKTextDesignMasked
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignMasked))]
	//interface PESDKTextDesignMultiline
	//{
	//}

	//// @interface PESDKTextDesignOptionsToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKTextDesignOptionsToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UICollectionViewCell * _Nonnull, PESDKTextDesign * _Nonnull) actionButtonConfigurationClosure;
	//	[NullAllowed, Export ("actionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UICollectionViewCell, PESDKTextDesign> ActionButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKOverlayButton * _Nonnull, enum TextDesignOverlayAction) overlayButtonConfigurationClosure;
	//	[NullAllowed, Export ("overlayButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlayButton, TextDesignOverlayAction> OverlayButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKTextDesign * _Nonnull) textDesignActionSelectedClosure;
	//	[NullAllowed, Export ("textDesignActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKTextDesign> TextDesignActionSelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum TextDesignOverlayAction) overlayActionSelectedClosure;
	//	[NullAllowed, Export ("overlayActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<TextDesignOverlayAction> OverlayActionSelectedClosure { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKTextDesignOptionsToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKTextDesignOptionsToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKTextDesignOptionsToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKTextDesignOptionsToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(UICollectionViewCell * _Nonnull, PESDKTextDesign * _Nonnull) actionButtonConfigurationClosure;
	//	[NullAllowed, Export ("actionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UICollectionViewCell, PESDKTextDesign> ActionButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKOverlayButton * _Nonnull, enum TextDesignOverlayAction) overlayButtonConfigurationClosure;
	//	[NullAllowed, Export ("overlayButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlayButton, TextDesignOverlayAction> OverlayButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKTextDesign * _Nonnull) textDesignActionSelectedClosure;
	//	[NullAllowed, Export ("textDesignActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKTextDesign> TextDesignActionSelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum TextDesignOverlayAction) overlayActionSelectedClosure;
	//	[NullAllowed, Export ("overlayActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<TextDesignOverlayAction> OverlayActionSelectedClosure { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_6818 (PESDKTextDesignOptionsToolControllerOptionsBuilder)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKTextDesignOptionsToolControllerOptionsBuilder))]
	//interface PESDKTextDesignOptionsToolControllerOptionsBuilder_PhotoEditorSDK_Swift_6818
	//{
	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedTextDesignOverlayActionsAsNSNumbers;
	//	[Export ("allowedTextDesignOverlayActionsAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedTextDesignOverlayActionsAsNSNumbers { get; set; }
	//}

	//// @interface PESDKTextDesignSunshine : PESDKTextDesign
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesign))]
	//interface PESDKTextDesignSunshine
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	PESDKTextDesignSunshine New ();
	//}

	//// @interface PESDKTextDesignParticles : PESDKTextDesignSunshine
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignSunshine))]
	//interface PESDKTextDesignParticles
	//{
	//}

	//// @interface PESDKTextDesignRotated : PESDKTextDesign
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesign))]
	//interface PESDKTextDesignRotated
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	PESDKTextDesignRotated New ();
	//}

	//// @interface PESDKTextDesignToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKTextDesignToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UITextView * _Nonnull) textViewConfigurationClosure;
	//	[NullAllowed, Export ("textViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UITextView> TextViewConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) dimmingViewConfigurationClosure;
	//	[NullAllowed, Export ("dimmingViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> DimmingViewConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKColorCollectionView * _Nonnull) colorCollectionViewConfigurationClosure;
	//	[NullAllowed, Export ("colorCollectionViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKColorCollectionView> ColorCollectionViewConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable updateTitle;
	//	[NullAllowed, Export ("updateTitle")]
	//	string UpdateTitle { get; }

	//	// @property (readonly, nonatomic, strong) PESDKColorPalette * _Nonnull colorPalette;
	//	[Export ("colorPalette", ArgumentSemantic.Strong)]
	//	PESDKColorPalette ColorPalette { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKTextDesignToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKTextDesignToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKTextDesignToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKTextDesignToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(UITextView * _Nonnull) textViewConfigurationClosure;
	//	[NullAllowed, Export ("textViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UITextView> TextViewConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) dimmingViewConfigurationClosure;
	//	[NullAllowed, Export ("dimmingViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> DimmingViewConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKColorCollectionView * _Nonnull) colorCollectionViewConfigurationClosure;
	//	[NullAllowed, Export ("colorCollectionViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKColorCollectionView> ColorCollectionViewConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable updateTitle;
	//	[NullAllowed, Export ("updateTitle")]
	//	string UpdateTitle { get; set; }

	//	// @property (nonatomic, strong) PESDKColorPalette * _Nonnull colorPalette;
	//	[Export ("colorPalette", ArgumentSemantic.Strong)]
	//	PESDKColorPalette ColorPalette { get; set; }
	//}

	//// @interface PESDKTextDesignWatercolor : PESDKTextDesignMaskedSpeechBubble
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKTextDesignMaskedSpeechBubble))]
	//interface PESDKTextDesignWatercolor
	//{
	//}

	//// @interface PESDKTextFontToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKTextFontToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKLabelCaptionCollectionViewCell * _Nonnull, NSString * _Nonnull) actionButtonConfigurationClosure;
	//	[NullAllowed, Export ("actionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKLabelCaptionCollectionViewCell, NSString> ActionButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(NSString * _Nonnull) textFontActionSelectedClosure;
	//	[NullAllowed, Export ("textFontActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<NSString> TextFontActionSelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKFontSelectorView * _Nonnull) fontSelectorViewConfigurationClosure;
	//	[NullAllowed, Export ("fontSelectorViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFontSelectorView> FontSelectorViewConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKHandleButton * _Nonnull) handleButtonConfigurationClosure;
	//	[NullAllowed, Export ("handleButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKHandleButton> HandleButtonConfigurationClosure { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKTextFontToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKTextFontToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKTextFontToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKTextFontToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKLabelCaptionCollectionViewCell * _Nonnull, NSString * _Nonnull) actionButtonConfigurationClosure;
	//	[NullAllowed, Export ("actionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKLabelCaptionCollectionViewCell, NSString> ActionButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(NSString * _Nonnull) textFontActionSelectedClosure;
	//	[NullAllowed, Export ("textFontActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<NSString> TextFontActionSelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKFontSelectorView * _Nonnull) fontSelectorViewConfigurationClosure;
	//	[NullAllowed, Export ("fontSelectorViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKFontSelectorView> FontSelectorViewConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKHandleButton * _Nonnull) handleButtonConfigurationClosure;
	//	[NullAllowed, Export ("handleButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKHandleButton> HandleButtonConfigurationClosure { get; set; }
	//}

	//// @interface PESDKTextOptionMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKTextOptionMenuItem
	//{
	//	// @property (readonly, nonatomic) enum TextAction textAction;
	//	[Export ("textAction")]
	//	TextAction TextAction { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; set; }

	//	// @property (nonatomic, strong) UIImage * _Nullable icon;
	//	[NullAllowed, Export ("icon", ArgumentSemantic.Strong)]
	//	UIImage Icon { get; set; }

	//	// -(instancetype _Nonnull)initWithTextAction:(enum TextAction)textAction;
	//	[Export ("initWithTextAction:")]
	//	IntPtr Constructor (TextAction textAction);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKTextOptionMenuItem New ();
	//}

	//// @interface IMGLTextOptionsToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface IMGLTextOptionsToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UICollectionViewCell * _Nonnull, enum TextAction) actionButtonConfigurationClosure;
	//	[NullAllowed, Export ("actionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UICollectionViewCell, TextAction> ActionButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKOverlayButton * _Nonnull, enum TextOverlayAction) overlayButtonConfigurationClosure;
	//	[NullAllowed, Export ("overlayButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlayButton, TextOverlayAction> OverlayButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum TextAction) textActionSelectedClosure;
	//	[NullAllowed, Export ("textActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<TextAction> TextActionSelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(enum TextOverlayAction) overlayActionSelectedClosure;
	//	[NullAllowed, Export ("overlayActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<TextOverlayAction> OverlayActionSelectedClosure { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKTextOptionsToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKTextOptionsToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKTextOptionsToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKTextOptionsToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(UICollectionViewCell * _Nonnull, enum TextAction) actionButtonConfigurationClosure;
	//	[NullAllowed, Export ("actionButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UICollectionViewCell, TextAction> ActionButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKOverlayButton * _Nonnull, enum TextOverlayAction) overlayButtonConfigurationClosure;
	//	[NullAllowed, Export ("overlayButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKOverlayButton, TextOverlayAction> OverlayButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum TextAction) textActionSelectedClosure;
	//	[NullAllowed, Export ("textActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<TextAction> TextActionSelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(enum TextOverlayAction) overlayActionSelectedClosure;
	//	[NullAllowed, Export ("overlayActionSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<TextOverlayAction> OverlayActionSelectedClosure { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_7029 (PESDKTextOptionsToolControllerOptionsBuilder)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKTextOptionsToolControllerOptionsBuilder))]
	//interface PESDKTextOptionsToolControllerOptionsBuilder_PhotoEditorSDK_Swift_7029
	//{
	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedTextActionsAsNSNumbers;
	//	[Export ("allowedTextActionsAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedTextActionsAsNSNumbers { get; set; }

	//	// @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedTextOverlayActionsAsNSNumbers;
	//	[Export ("allowedTextOverlayActionsAsNSNumbers", ArgumentSemantic.Copy)]
	//	NSNumber[] AllowedTextOverlayActionsAsNSNumbers { get; set; }
	//}

	//// @interface PESDKTextSelectionView : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface PESDKTextSelectionView
	//{
	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull rightHandle;
	//	[Export ("rightHandle", ArgumentSemantic.Strong)]
	//	UIView RightHandle { get; }

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull leftHandle;
	//	[Export ("leftHandle", ArgumentSemantic.Strong)]
	//	UIView LeftHandle { get; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) decrementHandler;
	//	[NullAllowed, Export ("decrementHandler", ArgumentSemantic.Copy)]
	//	Action DecrementHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) incrementHandler;
	//	[NullAllowed, Export ("incrementHandler", ArgumentSemantic.Copy)]
	//	Action IncrementHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) rotateLeftHandler;
	//	[NullAllowed, Export ("rotateLeftHandler", ArgumentSemantic.Copy)]
	//	Action RotateLeftHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) rotateRightHandler;
	//	[NullAllowed, Export ("rotateRightHandler", ArgumentSemantic.Copy)]
	//	Action RotateRightHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) increaseBoundingBoxHandler;
	//	[NullAllowed, Export ("increaseBoundingBoxHandler", ArgumentSemantic.Copy)]
	//	Action IncreaseBoundingBoxHandler { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(void) decreaseBoundingBoxHandler;
	//	[NullAllowed, Export ("decreaseBoundingBoxHandler", ArgumentSemantic.Copy)]
	//	Action DecreaseBoundingBoxHandler { get; set; }

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(CGRect)alignmentRectForFrame:(CGRect)frame __attribute__((warn_unused_result));
	//	[Export ("alignmentRectForFrame:")]
	//	CGRect AlignmentRectForFrame (CGRect frame);

	//	// -(BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event __attribute__((warn_unused_result));
	//	[Export ("pointInside:withEvent:")]
	//	bool PointInside (CGPoint point, [NullAllowed] UIEvent @event);

	//	// -(void)accessibilityDecrement;
	//	[Export ("accessibilityDecrement")]
	//	void AccessibilityDecrement ();

	//	// -(void)accessibilityIncrement;
	//	[Export ("accessibilityIncrement")]
	//	void AccessibilityIncrement ();
	//}

	//// @interface PESDKTextToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKTextToolControllerOptions
	//{
	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UITextView * _Nonnull) textViewConfigurationClosure;
	//	[NullAllowed, Export ("textViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UITextView> TextViewConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) dimmingViewConfigurationClosure;
	//	[NullAllowed, Export ("dimmingViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> DimmingViewConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) NSString * _Nullable updateTitle;
	//	[NullAllowed, Export ("updateTitle")]
	//	string UpdateTitle { get; }

	//	// @property (readonly, nonatomic, strong) UIColor * _Nonnull defaultTextColor;
	//	[Export ("defaultTextColor", ArgumentSemantic.Strong)]
	//	UIColor DefaultTextColor { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKTextToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKTextToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKTextToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKTextToolControllerOptionsBuilder
	//{
	//	// @property (copy, nonatomic) void (^ _Nullable)(UITextView * _Nonnull) textViewConfigurationClosure;
	//	[NullAllowed, Export ("textViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UITextView> TextViewConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) dimmingViewConfigurationClosure;
	//	[NullAllowed, Export ("dimmingViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> DimmingViewConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable updateTitle;
	//	[NullAllowed, Export ("updateTitle")]
	//	string UpdateTitle { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull defaultTextColor;
	//	[Export ("defaultTextColor", ArgumentSemantic.Strong)]
	//	UIColor DefaultTextColor { get; set; }
	//}

	//// @interface PESDKTexture : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKTexture
	//{
	//	// @property (readonly, nonatomic) GLuint textureName;
	//	[Export ("textureName")]
	//	uint TextureName { get; }

	//	// -(instancetype _Nonnull)initWithCgImage:(CGImageRef _Nonnull)cgImage forceRGB:(BOOL)forceRGB __attribute__((objc_designated_initializer));
	//	[Export ("initWithCgImage:forceRGB:")]
	//	[DesignatedInitializer]
	//	unsafe IntPtr Constructor (CGImageRef* cgImage, bool forceRGB);

	//	// -(void)freeGLResources;
	//	[Export ("freeGLResources")]
	//	void FreeGLResources ();

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKTexture New ();
	//}

	//// @interface PESDKTintFilter : CIFilter
	//[iOS (9,0)]
	//[BaseType (typeof(CIFilter))]
	//interface PESDKTintFilter
	//{
	//	// @property (nonatomic, strong) CIImage * _Nullable inputImage;
	//	[NullAllowed, Export ("inputImage", ArgumentSemantic.Strong)]
	//	CIImage InputImage { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nullable inputColor;
	//	[NullAllowed, Export ("inputColor", ArgumentSemantic.Strong)]
	//	UIColor InputColor { get; set; }

	//	// @property (readonly, nonatomic, strong) CIImage * _Nullable outputImage;
	//	[NullAllowed, Export ("outputImage", ArgumentSemantic.Strong)]
	//	CIImage OutputImage { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(ios, introduced=9.0))) __attribute__((objc_designated_initializer));
	//	[iOS (9,0)]
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);
	//}

	//// @interface PESDKToolMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKToolMenuItem
	//{
	//	// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
	//	[Export ("title")]
	//	string Title { get; }

	//	// @property (readonly, nonatomic, strong) UIImage * _Nonnull icon;
	//	[Export ("icon", ArgumentSemantic.Strong)]
	//	UIImage Icon { get; }

	//	// @property (readonly, nonatomic) Class _Nonnull toolControllerClass;
	//	[Export ("toolControllerClass")]
	//	Class ToolControllerClass { get; }

	//	// -(instancetype _Nonnull)initWithTitle:(NSString * _Nonnull)title icon:(UIImage * _Nonnull)icon toolControllerClass:(Class _Nonnull)toolControllerClass __attribute__((objc_designated_initializer));
	//	[Export ("initWithTitle:icon:toolControllerClass:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string title, UIImage icon, Class toolControllerClass);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKToolMenuItem New ();
	//}

	//// @interface PhotoEditorSDK_Swift_7186 (PESDKToolMenuItem)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKToolMenuItem))]
	//interface PESDKToolMenuItem_PhotoEditorSDK_Swift_7186
	//{
	//	// +(PESDKToolMenuItem * _Nullable)createTransformToolItem __attribute__((warn_unused_result));
	//	[Static]
	//	[NullAllowed, Export ("createTransformToolItem")]
	//	[Verify (MethodToProperty)]
	//	PESDKToolMenuItem CreateTransformToolItem { get; }

	//	// +(PESDKToolMenuItem * _Nullable)createFilterToolItem __attribute__((warn_unused_result));
	//	[Static]
	//	[NullAllowed, Export ("createFilterToolItem")]
	//	[Verify (MethodToProperty)]
	//	PESDKToolMenuItem CreateFilterToolItem { get; }

	//	// +(PESDKToolMenuItem * _Nullable)createAdjustToolItem __attribute__((warn_unused_result));
	//	[Static]
	//	[NullAllowed, Export ("createAdjustToolItem")]
	//	[Verify (MethodToProperty)]
	//	PESDKToolMenuItem CreateAdjustToolItem { get; }

	//	// +(PESDKToolMenuItem * _Nullable)createStickerToolItem __attribute__((warn_unused_result));
	//	[Static]
	//	[NullAllowed, Export ("createStickerToolItem")]
	//	[Verify (MethodToProperty)]
	//	PESDKToolMenuItem CreateStickerToolItem { get; }

	//	// +(PESDKToolMenuItem * _Nullable)createTextToolItem __attribute__((warn_unused_result));
	//	[Static]
	//	[NullAllowed, Export ("createTextToolItem")]
	//	[Verify (MethodToProperty)]
	//	PESDKToolMenuItem CreateTextToolItem { get; }

	//	// +(PESDKToolMenuItem * _Nullable)createTextDesignToolItem __attribute__((warn_unused_result));
	//	[Static]
	//	[NullAllowed, Export ("createTextDesignToolItem")]
	//	[Verify (MethodToProperty)]
	//	PESDKToolMenuItem CreateTextDesignToolItem { get; }

	//	// +(PESDKToolMenuItem * _Nullable)createOverlayToolItem __attribute__((warn_unused_result));
	//	[Static]
	//	[NullAllowed, Export ("createOverlayToolItem")]
	//	[Verify (MethodToProperty)]
	//	PESDKToolMenuItem CreateOverlayToolItem { get; }

	//	// +(PESDKToolMenuItem * _Nullable)createFrameToolItem __attribute__((warn_unused_result));
	//	[Static]
	//	[NullAllowed, Export ("createFrameToolItem")]
	//	[Verify (MethodToProperty)]
	//	PESDKToolMenuItem CreateFrameToolItem { get; }

	//	// +(PESDKToolMenuItem * _Nullable)createBrushToolItem __attribute__((warn_unused_result));
	//	[Static]
	//	[NullAllowed, Export ("createBrushToolItem")]
	//	[Verify (MethodToProperty)]
	//	PESDKToolMenuItem CreateBrushToolItem { get; }

	//	// +(PESDKToolMenuItem * _Nullable)createFocusToolItem __attribute__((warn_unused_result));
	//	[Static]
	//	[NullAllowed, Export ("createFocusToolItem")]
	//	[Verify (MethodToProperty)]
	//	PESDKToolMenuItem CreateFocusToolItem { get; }
	//}

	//// @interface PESDKToolbar : UIView
	//[iOS (9,0)]
	//[BaseType (typeof(UIView))]
	//interface PESDKToolbar
	//{
	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// @property (readonly, nonatomic, strong) UIView * _Nonnull contentView;
	//	[Export ("contentView", ArgumentSemantic.Strong)]
	//	UIView ContentView { get; }

	//	// @property (copy, nonatomic) NSArray<PESDKToolbarItem *> * _Nonnull items;
	//	[Export ("items", ArgumentSemantic.Copy)]
	//	PESDKToolbarItem[] Items { get; set; }

	//	// -(void)setItems:(NSArray<PESDKToolbarItem *> * _Nullable)items animated:(BOOL)animated;
	//	[Export ("setItems:animated:")]
	//	void SetItems ([NullAllowed] PESDKToolbarItem[] items, bool animated);

	//	// -(void)pushToolbarItem:(PESDKToolbarItem * _Nonnull)item animated:(BOOL)animated;
	//	[Export ("pushToolbarItem:animated:")]
	//	void PushToolbarItem (PESDKToolbarItem item, bool animated);

	//	// -(PESDKToolbarItem * _Nullable)popToolbarItemAnimated:(BOOL)animated;
	//	[Export ("popToolbarItemAnimated:")]
	//	[return: NullAllowed]
	//	PESDKToolbarItem PopToolbarItemAnimated (bool animated);
	//}

	//// @interface PESDKToolbarButton : PESDKButton
	//[BaseType (typeof(PESDKButton))]
	//interface PESDKToolbarButton
	//{
	//	// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGRect frame);

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();

	//	// @property (getter = isEnabled, nonatomic) BOOL enabled;
	//	[Export ("enabled")]
	//	bool Enabled { [Bind ("isEnabled")] get; set; }

	//	// -(void)setEnabled:(BOOL)enabled animated:(BOOL)animated;
	//	[Export ("setEnabled:animated:")]
	//	void SetEnabled (bool enabled, bool animated);

	//	// -(void)tintColorDidChange;
	//	[Export ("tintColorDidChange")]
	//	void TintColorDidChange ();
	//}

	//// @interface PESDKTooltipSlider : PESDKSlider
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKSlider))]
	//interface PESDKTooltipSlider
	//{
	//	// @property (readonly, nonatomic, strong) PESDKSliderTooltip * _Nonnull tooltip;
	//	[Export ("tooltip", ArgumentSemantic.Strong)]
	//	PESDKSliderTooltip Tooltip { get; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();

	//	// -(BOOL)beginTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer __attribute__((warn_unused_result));
	//	[Export ("beginTrackingWith:")]
	//	bool BeginTrackingWith (UIPanGestureRecognizer panGestureRecognizer);

	//	// -(void)endTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer;
	//	[Export ("endTrackingWith:")]
	//	void EndTrackingWith (UIPanGestureRecognizer panGestureRecognizer);
	//}

	//// @interface PESDKTouchingGestureRecognizer : UIGestureRecognizer
	//[BaseType (typeof(UIGestureRecognizer))]
	//interface PESDKTouchingGestureRecognizer
	//{
	//	// -(void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
	//	[Export ("touchesBegan:withEvent:")]
	//	void TouchesBegan (NSSet<UITouch> touches, UIEvent @event);

	//	// -(void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
	//	[Export ("touchesEnded:withEvent:")]
	//	void TouchesEnded (NSSet<UITouch> touches, UIEvent @event);

	//	// -(void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
	//	[Export ("touchesCancelled:withEvent:")]
	//	void TouchesCancelled (NSSet<UITouch> touches, UIEvent @event);

	//	// -(void)reset;
	//	[Export ("reset")]
	//	void Reset ();

	//	// -(instancetype _Nonnull)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action __attribute__((objc_designated_initializer));
	//	[Export ("initWithTarget:action:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] NSObject target, [NullAllowed] Selector action);
	//}

	//// @interface PhotoEditorSDK_Swift_7346 (PESDKTransformEditController) <UIGestureRecognizerDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKTransformEditController))]
	//interface PESDKTransformEditController_PhotoEditorSDK_Swift_7346 : IUIGestureRecognizerDelegate
	//{
	//	// -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer __attribute__((warn_unused_result));
	//	[Export ("gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:")]
	//	bool GestureRecognizer (UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);
	//}

	//// @interface PhotoEditorSDK_Swift_7353 (PESDKTransformEditController) <PESDKScalePickerDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKTransformEditController))]
	//interface PESDKTransformEditController_PhotoEditorSDK_Swift_7353 : IPESDKScalePickerDelegate
	//{
	//	// -(void)scalePicker:(CGFloat)value didChangeValue:(PESDKScalePicker * _Nonnull)scalePicker;
	//	[Export ("scalePicker:didChangeValue:")]
	//	void ScalePicker (nfloat value, PESDKScalePicker scalePicker);
	//}

	//// @interface PhotoEditorSDK_Swift_7360 (PESDKTransformEditController) <PESDKCropAndStraightenViewDelegate>
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKTransformEditController))]
	//interface PESDKTransformEditController_PhotoEditorSDK_Swift_7360 : IPESDKCropAndStraightenViewDelegate
	//{
	//	// -(void)cropAndStraightenViewWillBeginTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
	//	[Export ("cropAndStraightenViewWillBeginTracking:")]
	//	void CropAndStraightenViewWillBeginTracking (PESDKCropAndStraightenView cropAndStraightenView);

	//	// -(void)cropAndStraightenViewDidEndTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
	//	[Export ("cropAndStraightenViewDidEndTracking:")]
	//	void CropAndStraightenViewDidEndTracking (PESDKCropAndStraightenView cropAndStraightenView);

	//	// -(void)cropAndStraightenViewDidTrack:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
	//	[Export ("cropAndStraightenViewDidTrack:")]
	//	void CropAndStraightenViewDidTrack (PESDKCropAndStraightenView cropAndStraightenView);
	//}

	//// @interface PhotoEditorSDK_Swift_7371 (PESDKTransformEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKTransformEditController))]
	//interface PESDKTransformEditController_PhotoEditorSDK_Swift_7371
	//{
	//	// @property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
	//	[Export ("boxedPhotoEditModel", ArgumentSemantic.Strong)]
	//	PESDKPhotoEditModel BoxedPhotoEditModel { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_7378 (PESDKTransformEditController)
	//[iOS (9,0)]
	//[Category]
	//[BaseType (typeof(PESDKTransformEditController))]
	//interface PESDKTransformEditController_PhotoEditorSDK_Swift_7378
	//{
	//	// @property (readonly, nonatomic) UIEdgeInsets preferredPreviewViewInsets;
	//	[Export ("preferredPreviewViewInsets")]
	//	UIEdgeInsets PreferredPreviewViewInsets { get; }

	//	// @property (readonly, nonatomic) BOOL wantsDefaultPreviewView;
	//	[Export ("wantsDefaultPreviewView")]
	//	bool WantsDefaultPreviewView { get; }
	//}

	//// @protocol PESDKTransformEditControllerDelegate
	//[iOS (9,0)]
	//[Protocol, Model]
	//interface PESDKTransformEditControllerDelegate
	//{
	//	// @required -(UIImage * _Nullable)transformEditControllerBaseImage:(PESDKTransformEditController * _Nonnull)transformEditController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("transformEditControllerBaseImage:")]
	//	[return: NullAllowed]
	//	UIImage TransformEditControllerBaseImage (PESDKTransformEditController transformEditController);

	//	// @required -(CIImage * _Nullable)transformEditControllerBaseCIImage:(PESDKTransformEditController * _Nonnull)transformEditController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("transformEditControllerBaseCIImage:")]
	//	[return: NullAllowed]
	//	CIImage TransformEditControllerBaseCIImage (PESDKTransformEditController transformEditController);

	//	// @required -(PESDKSpriteViewController * _Nullable)transformEditControllerSpriteViewController:(PESDKTransformEditController * _Nonnull)transformEditController __attribute__((warn_unused_result));
	//	[Abstract]
	//	[Export ("transformEditControllerSpriteViewController:")]
	//	[return: NullAllowed]
	//	PESDKSpriteViewController TransformEditControllerSpriteViewController (PESDKTransformEditController transformEditController);

	//	// @required -(void)transformEditController:(PESDKTransformEditController * _Nonnull)transformEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
	//	[Abstract]
	//	[Export ("transformEditController:didChangePreferredPreviewViewInsetsAnimated:")]
	//	void TransformEditController (PESDKTransformEditController transformEditController, bool animated);

	//	// @required -(void)transformEditControllerDidChangeWantsDefaultPreviewView:(PESDKTransformEditController * _Nonnull)transformEditController;
	//	[Abstract]
	//	[Export ("transformEditControllerDidChangeWantsDefaultPreviewView:")]
	//	void TransformEditControllerDidChangeWantsDefaultPreviewView (PESDKTransformEditController transformEditController);
	//}

	//// @interface PESDKTransformToolControllerOptions : PESDKToolControllerOptions
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptions))]
	//interface PESDKTransformToolControllerOptions
	//{
	//	// @property (readonly, nonatomic) BOOL allowFreeCrop;
	//	[Export ("allowFreeCrop")]
	//	bool AllowFreeCrop { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<PESDKCropAspect *> * _Nonnull allowedCropAspects;
	//	[Export ("allowedCropAspects", ArgumentSemantic.Copy)]
	//	PESDKCropAspect[] AllowedCropAspects { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKLabelBorderedCollectionViewCell * _Nonnull, PESDKCropAspect * _Nullable) cropAspectButtonConfigurationClosure;
	//	[NullAllowed, Export ("cropAspectButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKLabelBorderedCollectionViewCell, PESDKCropAspect> CropAspectButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKCropAspect * _Nullable) cropAspectSelectedClosure;
	//	[NullAllowed, Export ("cropAspectSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKCropAspect> CropAspectSelectedClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull, enum TransformAction) transformButtonConfigurationClosure;
	//	[NullAllowed, Export ("transformButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton, TransformAction> TransformButtonConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(PESDKScalePicker * _Nonnull) scalePickerConfigurationClosure;
	//	[NullAllowed, Export ("scalePickerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKScalePicker> ScalePickerConfigurationClosure { get; }

	//	// @property (readonly, copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) scalePickerContainerViewConfigurationClosure;
	//	[NullAllowed, Export ("scalePickerContainerViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> ScalePickerContainerViewConfigurationClosure { get; }

	//	// -(instancetype _Nonnull)initWithBuilder:(PESDKTransformToolControllerOptionsBuilder * _Nonnull)builder __attribute__((objc_designated_initializer));
	//	[Export ("initWithBuilder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKTransformToolControllerOptionsBuilder builder);
	//}

	//// @interface PESDKTransformToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKToolControllerOptionsBuilder))]
	//interface PESDKTransformToolControllerOptionsBuilder
	//{
	//	// @property (nonatomic) BOOL allowFreeCrop;
	//	[Export ("allowFreeCrop")]
	//	bool AllowFreeCrop { get; set; }

	//	// @property (copy, nonatomic) NSArray<PESDKCropAspect *> * _Nonnull allowedCropRatios;
	//	[Export ("allowedCropRatios", ArgumentSemantic.Copy)]
	//	PESDKCropAspect[] AllowedCropRatios { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKButton * _Nonnull, enum TransformAction) transformButtonConfigurationClosure;
	//	[NullAllowed, Export ("transformButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKButton, TransformAction> TransformButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKLabelBorderedCollectionViewCell * _Nonnull, PESDKCropAspect * _Nullable) cropAspectButtonConfigurationClosure;
	//	[NullAllowed, Export ("cropAspectButtonConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKLabelBorderedCollectionViewCell, PESDKCropAspect> CropAspectButtonConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKCropAspect * _Nullable) cropAspectSelectedClosure;
	//	[NullAllowed, Export ("cropAspectSelectedClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKCropAspect> CropAspectSelectedClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(PESDKScalePicker * _Nonnull) scalePickerConfigurationClosure;
	//	[NullAllowed, Export ("scalePickerConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<PESDKScalePicker> ScalePickerConfigurationClosure { get; set; }

	//	// @property (copy, nonatomic) void (^ _Nullable)(UIView * _Nonnull) scalePickerContainerViewConfigurationClosure;
	//	[NullAllowed, Export ("scalePickerContainerViewConfigurationClosure", ArgumentSemantic.Copy)]
	//	Action<UIView> ScalePickerContainerViewConfigurationClosure { get; set; }
	//}

	//// @interface PhotoEditorSDK_Swift_7499 (UIDevice)
	//[Category]
	//[BaseType (typeof(UIDevice))]
	//interface UIDevice_PhotoEditorSDK_Swift_7499
	//{
	//	// @property (readonly, nonatomic) BOOL pesdk_isTooOldForLensBlurPreview;
	//	[Export ("pesdk_isTooOldForLensBlurPreview")]
	//	bool Pesdk_isTooOldForLensBlurPreview { get; }
	//}

	//// @interface PhotoEditorSDK_Swift_7513 (UIImage)
	//[Category]
	//[BaseType (typeof(UIImage))]
	//interface UIImage_PhotoEditorSDK_Swift_7513
	//{
	//	// -(UIImage * _Nonnull)pesdk_downsampleWithMaxDimension:(CGFloat)dimension __attribute__((warn_unused_result));
	//	[Export ("pesdk_downsampleWithMaxDimension:")]
	//	UIImage Pesdk_downsampleWithMaxDimension (nfloat dimension);

	//	// -(UIImage * _Nonnull)pesdk_resizedImageToSize:(CGSize)newSize interpolationQuality:(CGInterpolationQuality)quality __attribute__((warn_unused_result));
	//	[Export ("pesdk_resizedImageToSize:interpolationQuality:")]
	//	UIImage Pesdk_resizedImageToSize (CGSize newSize, CGInterpolationQuality quality);

	//	// -(UIImage * _Nonnull)pesdk_resizedImageToSize:(CGSize)newSize transform:(CGAffineTransform)transform drawTransposed:(BOOL)transpose interpolationQuality:(CGInterpolationQuality)quality __attribute__((warn_unused_result));
	//	[Export ("pesdk_resizedImageToSize:transform:drawTransposed:interpolationQuality:")]
	//	UIImage Pesdk_resizedImageToSize (CGSize newSize, CGAffineTransform transform, bool transpose, CGInterpolationQuality quality);

	//	// @property (readonly, nonatomic, strong) UIImage * _Nonnull pesdk_normalizedImage;
	//	[Export ("pesdk_normalizedImage", ArgumentSemantic.Strong)]
	//	UIImage Pesdk_normalizedImage { get; }

	//	// -(UIImage * _Nonnull)pesdk_normalizedImageOfSize:(CGSize)size __attribute__((warn_unused_result));
	//	[Export ("pesdk_normalizedImageOfSize:")]
	//	UIImage Pesdk_normalizedImageOfSize (CGSize size);

	//	// -(void)pesdk_drawInRect:(CGRect)rect withContentMode:(UIViewContentMode)contentMode;
	//	[Export ("pesdk_drawInRect:withContentMode:")]
	//	void Pesdk_drawInRect (CGRect rect, UIViewContentMode contentMode);

	//	// -(UIImage * _Nonnull)pesdk_imageWithTintColor:(UIColor * _Nonnull)tint __attribute__((warn_unused_result));
	//	[Export ("pesdk_imageWithTintColor:")]
	//	UIImage Pesdk_imageWithTintColor (UIColor tint);
	//}

	//// @interface PhotoEditorSDK_Swift_7580 (UIViewController)
	//[Category]
	//[BaseType (typeof(UIViewController))]
	//interface UIViewController_PhotoEditorSDK_Swift_7580
	//{
	//	// -(void)pesdk_willBecomeActiveTool;
	//	[Export ("pesdk_willBecomeActiveTool")]
	//	void Pesdk_willBecomeActiveTool ();

	//	// -(void)pesdk_didBecomeActiveTool;
	//	[Export ("pesdk_didBecomeActiveTool")]
	//	void Pesdk_didBecomeActiveTool ();

	//	// -(void)pesdk_willResignActiveTool;
	//	[Export ("pesdk_willResignActiveTool")]
	//	void Pesdk_willResignActiveTool ();

	//	// -(void)pesdk_didResignActiveTool;
	//	[Export ("pesdk_didResignActiveTool")]
	//	void Pesdk_didResignActiveTool ();
	//}

	//// @interface PESDKUndoController : NSObject
	//[BaseType (typeof(NSObject))]
	//interface PESDKUndoController
	//{
	//	// @property (nonatomic) BOOL isEnabled;
	//	[Export ("isEnabled")]
	//	bool IsEnabled { get; set; }

	//	// @property (readonly, nonatomic) BOOL isUndoing;
	//	[Export ("isUndoing")]
	//	bool IsUndoing { get; }

	//	// @property (readonly, nonatomic) BOOL isRedoing;
	//	[Export ("isRedoing")]
	//	bool IsRedoing { get; }

	//	// -(void)beginUndoGrouping;
	//	[Export ("beginUndoGrouping")]
	//	void BeginUndoGrouping ();

	//	// -(void)endUndoGrouping;
	//	[Export ("endUndoGrouping")]
	//	void EndUndoGrouping ();

	//	// -(void)removeAllActions;
	//	[Export ("removeAllActions")]
	//	void RemoveAllActions ();

	//	// -(void)removeAllActionsInCurrentGroup;
	//	[Export ("removeAllActionsInCurrentGroup")]
	//	void RemoveAllActionsInCurrentGroup ();

	//	// @property (readonly, nonatomic) BOOL canUndo;
	//	[Export ("canUndo")]
	//	bool CanUndo { get; }

	//	// @property (readonly, nonatomic) BOOL canUndoInCurrentGroup;
	//	[Export ("canUndoInCurrentGroup")]
	//	bool CanUndoInCurrentGroup { get; }

	//	// -(void)undo;
	//	[Export ("undo")]
	//	void Undo ();

	//	// -(void)undoStep;
	//	[Export ("undoStep")]
	//	void UndoStep ();

	//	// -(void)undoStepInCurrentGroup;
	//	[Export ("undoStepInCurrentGroup")]
	//	void UndoStepInCurrentGroup ();

	//	// -(void)undoAllInCurrentGroup;
	//	[Export ("undoAllInCurrentGroup")]
	//	void UndoAllInCurrentGroup ();

	//	// -(void)undoGroup;
	//	[Export ("undoGroup")]
	//	void UndoGroup ();

	//	// @property (readonly, nonatomic) BOOL canRedo;
	//	[Export ("canRedo")]
	//	bool CanRedo { get; }

	//	// @property (readonly, nonatomic) BOOL canRedoInCurrentGroup;
	//	[Export ("canRedoInCurrentGroup")]
	//	bool CanRedoInCurrentGroup { get; }

	//	// -(void)redo;
	//	[Export ("redo")]
	//	void Redo ();
	//}

	//// @interface PESDKVideoRecordButton : UIControl
	//[iOS (9,0)]
	//[BaseType (typeof(UIControl))]
	//interface PESDKVideoRecordButton
	//{
	//	// @property (nonatomic) BOOL isRecording;
	//	[Export ("isRecording")]
	//	bool IsRecording { get; set; }

	//	// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
	//	[Export ("initWithCoder:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSCoder aDecoder);

	//	// -(void)layoutSubviews;
	//	[Export ("layoutSubviews")]
	//	void LayoutSubviews ();

	//	// -(BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event __attribute__((warn_unused_result));
	//	[Export ("beginTrackingWithTouch:withEvent:")]
	//	bool BeginTrackingWithTouch (UITouch touch, [NullAllowed] UIEvent @event);

	//	// -(void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
	//	[Export ("endTrackingWithTouch:withEvent:")]
	//	void EndTrackingWithTouch ([NullAllowed] UITouch touch, [NullAllowed] UIEvent @event);

	//	// -(void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
	//	[Export ("cancelTrackingWithEvent:")]
	//	void CancelTrackingWithEvent ([NullAllowed] UIEvent @event);
	//}

	//// @interface PESDKAdjustmentModel : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKAdjustmentModel
	//{
	//	// -(instancetype _Nonnull)initWithBrightness:(double)brightness contrast:(double)contrast shadows:(double)shadows highlights:(double)highlights exposure:(double)exposure clarity:(double)clarity saturation:(double)saturation gamma:(double)gamma blacks:(double)blacks whites:(double)whites temperature:(double)temperature __attribute__((objc_designated_initializer));
	//	[Export ("initWithBrightness:contrast:shadows:highlights:exposure:clarity:saturation:gamma:blacks:whites:temperature:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (double brightness, double contrast, double shadows, double highlights, double exposure, double clarity, double saturation, double gamma, double blacks, double whites, double temperature);

	//	// @property (nonatomic) double brightness;
	//	[Export ("brightness")]
	//	double Brightness { get; set; }

	//	// @property (nonatomic) double contrast;
	//	[Export ("contrast")]
	//	double Contrast { get; set; }

	//	// @property (nonatomic) double shadows;
	//	[Export ("shadows")]
	//	double Shadows { get; set; }

	//	// @property (nonatomic) double highlights;
	//	[Export ("highlights")]
	//	double Highlights { get; set; }

	//	// @property (nonatomic) double exposure;
	//	[Export ("exposure")]
	//	double Exposure { get; set; }

	//	// @property (nonatomic) double clarity;
	//	[Export ("clarity")]
	//	double Clarity { get; set; }

	//	// @property (nonatomic) double saturation;
	//	[Export ("saturation")]
	//	double Saturation { get; set; }

	//	// @property (nonatomic) double gamma;
	//	[Export ("gamma")]
	//	double Gamma { get; set; }

	//	// @property (nonatomic) double blacks;
	//	[Export ("blacks")]
	//	double Blacks { get; set; }

	//	// @property (nonatomic) double whites;
	//	[Export ("whites")]
	//	double Whites { get; set; }

	//	// @property (nonatomic) double temperature;
	//	[Export ("temperature")]
	//	double Temperature { get; set; }
	//}

	//// @interface PESDKSpriteModel : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKSpriteModel
	//{
	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKSpriteModel New ();
	//}

	//// @interface PESDKBrushSpriteModel : PESDKSpriteModel
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKSpriteModel))]
	//interface PESDKBrushSpriteModel
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	PESDKBrushSpriteModel New ();

	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull uuid;
	//	[Export ("uuid", ArgumentSemantic.Copy)]
	//	NSUuid Uuid { get; }

	//	// @property (copy, nonatomic) NSArray<PESDKPathModel *> * _Nonnull paths;
	//	[Export ("paths", ArgumentSemantic.Copy)]
	//	PESDKPathModel[] Paths { get; set; }
	//}

	//// @interface PESDKEffectFilterModel : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKEffectFilterModel
	//{
	//	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier intensity:(double)intensity __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifier:intensity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string identifier, double intensity);

	//	// @property (copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; set; }

	//	// @property (nonatomic) double intensity;
	//	[Export ("intensity")]
	//	double Intensity { get; set; }
	//}

	//// @interface PESDKFocusModel : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKFocusModel
	//{
	//	// -(instancetype _Nonnull)initWithNormalizedControlPoint1:(CGPoint)normalizedControlPoint1 normalizedControlPoint2:(CGPoint)normalizedControlPoint2 normalizedBlurRadius:(double)normalizedBlurRadius normalizedFadeWidth:(double)normalizedFadeWidth type:(enum PESDKFocusType)type blurQuality:(enum BlurQuality)blurQuality __attribute__((deprecated("Use `init(normalizedControlPoint1:normalizedControlPoint2:normalizedBlurRadius:normalizedFadeWidth:mode:blurQuality:)` instead."))) __attribute__((objc_designated_initializer));
	//	[Export ("initWithNormalizedControlPoint1:normalizedControlPoint2:normalizedBlurRadius:normalizedFadeWidth:type:blurQuality:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGPoint normalizedControlPoint1, CGPoint normalizedControlPoint2, double normalizedBlurRadius, double normalizedFadeWidth, PESDKFocusType type, BlurQuality blurQuality);

	//	// -(instancetype _Nonnull)initWithNormalizedControlPoint1:(CGPoint)normalizedControlPoint1 normalizedControlPoint2:(CGPoint)normalizedControlPoint2 normalizedBlurRadius:(double)normalizedBlurRadius normalizedFadeWidth:(double)normalizedFadeWidth mode:(enum PESDKFocusMode)mode blurQuality:(enum BlurQuality)blurQuality __attribute__((objc_designated_initializer));
	//	[Export ("initWithNormalizedControlPoint1:normalizedControlPoint2:normalizedBlurRadius:normalizedFadeWidth:mode:blurQuality:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (CGPoint normalizedControlPoint1, CGPoint normalizedControlPoint2, double normalizedBlurRadius, double normalizedFadeWidth, PESDKFocusMode mode, BlurQuality blurQuality);

	//	// @property (nonatomic) CGPoint normalizedControlPoint1;
	//	[Export ("normalizedControlPoint1", ArgumentSemantic.Assign)]
	//	CGPoint NormalizedControlPoint1 { get; set; }

	//	// @property (nonatomic) CGPoint normalizedControlPoint2;
	//	[Export ("normalizedControlPoint2", ArgumentSemantic.Assign)]
	//	CGPoint NormalizedControlPoint2 { get; set; }

	//	// @property (nonatomic) double normalizedBlurRadius;
	//	[Export ("normalizedBlurRadius")]
	//	double NormalizedBlurRadius { get; set; }

	//	// @property (nonatomic) double normalizedFadeWidth;
	//	[Export ("normalizedFadeWidth")]
	//	double NormalizedFadeWidth { get; set; }

	//	// @property (nonatomic) enum PESDKFocusType type __attribute__((deprecated("Use `mode` instead.")));
	//	[Export ("type", ArgumentSemantic.Assign)]
	//	PESDKFocusType Type { get; set; }

	//	// @property (nonatomic) enum PESDKFocusMode mode;
	//	[Export ("mode", ArgumentSemantic.Assign)]
	//	PESDKFocusMode Mode { get; set; }

	//	// @property (nonatomic) enum BlurQuality blurQuality;
	//	[Export ("blurQuality", ArgumentSemantic.Assign)]
	//	BlurQuality BlurQuality { get; set; }
	//}

	//// @interface PESDKFrameSpriteModel : PESDKSpriteModel
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKSpriteModel))]
	//interface PESDKFrameSpriteModel
	//{
	//	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string identifier);

	//	// -(instancetype _Nonnull)initWithFrame:(PESDKFrame * _Nonnull)frame __attribute__((objc_designated_initializer));
	//	[Export ("initWithFrame:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKFrame frame);

	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull uuid;
	//	[Export ("uuid", ArgumentSemantic.Copy)]
	//	NSUuid Uuid { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; set; }
	//}

	//// @interface PESDKOverlayModel : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKOverlayModel
	//{
	//	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier blendMode:(enum PESDKBlendMode)blendMode intensity:(double)intensity __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifier:blendMode:intensity:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string identifier, PESDKBlendMode blendMode, double intensity);

	//	// @property (copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; set; }

	//	// @property (nonatomic) enum PESDKBlendMode blendMode;
	//	[Export ("blendMode", ArgumentSemantic.Assign)]
	//	PESDKBlendMode BlendMode { get; set; }

	//	// @property (nonatomic) double intensity;
	//	[Export ("intensity")]
	//	double Intensity { get; set; }
	//}

	//// @interface PESDKPathModel : PESDKSpriteModel
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKSpriteModel))]
	//interface PESDKPathModel
	//{
	//	// -(instancetype _Nonnull)initWithColor:(UIColor * _Nonnull)color normalizedSize:(CGFloat)normalizedSize hardness:(CGFloat)hardness points:(NSArray<NSValue *> * _Nonnull)points eraseFragment:(PESDKPaintingFragment * _Nullable)eraseFragment drawFragment:(PESDKPaintingFragment * _Nullable)drawFragment __attribute__((objc_designated_initializer));
	//	[Export ("initWithColor:normalizedSize:hardness:points:eraseFragment:drawFragment:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (UIColor color, nfloat normalizedSize, nfloat hardness, NSValue[] points, [NullAllowed] PESDKPaintingFragment eraseFragment, [NullAllowed] PESDKPaintingFragment drawFragment);

	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull uuid;
	//	[Export ("uuid", ArgumentSemantic.Copy)]
	//	NSUuid Uuid { get; }

	//	// @property (readonly, nonatomic, strong) UIColor * _Nonnull color;
	//	[Export ("color", ArgumentSemantic.Strong)]
	//	UIColor Color { get; }

	//	// @property (readonly, nonatomic) CGFloat normalizedSize;
	//	[Export ("normalizedSize")]
	//	nfloat NormalizedSize { get; }

	//	// @property (readonly, nonatomic) CGFloat hardness;
	//	[Export ("hardness")]
	//	nfloat Hardness { get; }

	//	// @property (readonly, copy, nonatomic) NSArray<NSValue *> * _Nonnull points;
	//	[Export ("points", ArgumentSemantic.Copy)]
	//	NSValue[] Points { get; }

	//	// @property (nonatomic, strong) PESDKPaintingFragment * _Nullable eraseFragment;
	//	[NullAllowed, Export ("eraseFragment", ArgumentSemantic.Strong)]
	//	PESDKPaintingFragment EraseFragment { get; set; }

	//	// @property (nonatomic, strong) PESDKPaintingFragment * _Nullable drawFragment;
	//	[NullAllowed, Export ("drawFragment", ArgumentSemantic.Strong)]
	//	PESDKPaintingFragment DrawFragment { get; set; }
	//}

	//// @interface PESDKPhotoEditMenuItem : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//[DisableDefaultCtor]
	//interface PESDKPhotoEditMenuItem
	//{
	//	// @property (readonly, nonatomic, strong) PESDKToolMenuItem * _Nullable toolMenuItem;
	//	[NullAllowed, Export ("toolMenuItem", ArgumentSemantic.Strong)]
	//	PESDKToolMenuItem ToolMenuItem { get; }

	//	// @property (readonly, nonatomic, strong) PESDKActionMenuItem * _Nullable actionMenuItem;
	//	[NullAllowed, Export ("actionMenuItem", ArgumentSemantic.Strong)]
	//	PESDKActionMenuItem ActionMenuItem { get; }

	//	// @property (readonly, copy, nonatomic, class) NSArray<PESDKPhotoEditMenuItem *> * _Nonnull defaultItems;
	//	[Static]
	//	[Export ("defaultItems", ArgumentSemantic.Copy)]
	//	PESDKPhotoEditMenuItem[] DefaultItems { get; }

	//	// -(instancetype _Nullable)initWithToolMenuItem:(PESDKToolMenuItem * _Nullable)toolMenuItem __attribute__((objc_designated_initializer));
	//	[Export ("initWithToolMenuItem:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] PESDKToolMenuItem toolMenuItem);

	//	// -(instancetype _Nullable)initWithActionMenuItem:(PESDKActionMenuItem * _Nullable)actionMenuItem __attribute__((objc_designated_initializer));
	//	[Export ("initWithActionMenuItem:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor ([NullAllowed] PESDKActionMenuItem actionMenuItem);

	//	// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
	//	[Static]
	//	[Export ("new")]
	//	PESDKPhotoEditMenuItem New ();
	//}

	//// @interface PESDKPhotoEditModel : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKPhotoEditModel
	//{
	//	// -(instancetype _Nullable)initWithDeserializedFrom:(NSData * _Nonnull)data toImage:(UIImage * _Nullable)image __attribute__((deprecated("Use `init?(serializedData:referenceSize:)` instead."))) __attribute__((objc_designated_initializer));
	//	[Export ("initWithDeserializedFrom:toImage:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSData data, [NullAllowed] UIImage image);

	//	// -(instancetype _Nullable)initWithSerializedData:(NSData * _Nonnull)data referenceSize:(CGSize)referenceSize __attribute__((objc_designated_initializer));
	//	[Export ("initWithSerializedData:referenceSize:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (NSData data, CGSize referenceSize);

	//	// @property (nonatomic, strong) PESDKAdjustmentModel * _Nonnull adjustmentModel;
	//	[Export ("adjustmentModel", ArgumentSemantic.Strong)]
	//	PESDKAdjustmentModel AdjustmentModel { get; set; }

	//	// @property (nonatomic, strong) PESDKEffectFilterModel * _Nonnull effectFilterModel;
	//	[Export ("effectFilterModel", ArgumentSemantic.Strong)]
	//	PESDKEffectFilterModel EffectFilterModel { get; set; }

	//	// @property (nonatomic, strong) PESDKFocusModel * _Nonnull focusModel;
	//	[Export ("focusModel", ArgumentSemantic.Strong)]
	//	PESDKFocusModel FocusModel { get; set; }

	//	// @property (nonatomic, strong) PESDKOverlayModel * _Nonnull overlayModel;
	//	[Export ("overlayModel", ArgumentSemantic.Strong)]
	//	PESDKOverlayModel OverlayModel { get; set; }

	//	// @property (copy, nonatomic) NSArray<PESDKSpriteModel *> * _Nonnull spriteModels;
	//	[Export ("spriteModels", ArgumentSemantic.Copy)]
	//	PESDKSpriteModel[] SpriteModels { get; set; }

	//	// @property (nonatomic, strong) PESDKTransformModel * _Nonnull transformModel;
	//	[Export ("transformModel", ArgumentSemantic.Strong)]
	//	PESDKTransformModel TransformModel { get; set; }

	//	// @property (nonatomic) BOOL isAutoEnhancementEnabled;
	//	[Export ("isAutoEnhancementEnabled")]
	//	bool IsAutoEnhancementEnabled { get; set; }
	//}

	//// @interface PESDKStickerSpriteModel : PESDKSpriteModel
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKSpriteModel))]
	//interface PESDKStickerSpriteModel
	//{
	//	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string identifier);

	//	// -(instancetype _Nonnull)initWithSticker:(PESDKSticker * _Nonnull)sticker __attribute__((objc_designated_initializer));
	//	[Export ("initWithSticker:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKSticker sticker);

	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull uuid;
	//	[Export ("uuid", ArgumentSemantic.Copy)]
	//	NSUuid Uuid { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; set; }

	//	// @property (nonatomic) CGSize normalizedSize;
	//	[Export ("normalizedSize", ArgumentSemantic.Assign)]
	//	CGSize NormalizedSize { get; set; }

	//	// @property (nonatomic) CGPoint normalizedCenter;
	//	[Export ("normalizedCenter", ArgumentSemantic.Assign)]
	//	CGPoint NormalizedCenter { get; set; }

	//	// @property (nonatomic) CGFloat rotation;
	//	[Export ("rotation")]
	//	nfloat Rotation { get; set; }

	//	// @property (nonatomic) BOOL horizontallyFlipped;
	//	[Export ("horizontallyFlipped")]
	//	bool HorizontallyFlipped { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull tintColor;
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// @property (nonatomic) double brightness;
	//	[Export ("brightness")]
	//	double Brightness { get; set; }

	//	// @property (nonatomic) double contrast;
	//	[Export ("contrast")]
	//	double Contrast { get; set; }

	//	// @property (nonatomic) double saturation;
	//	[Export ("saturation")]
	//	double Saturation { get; set; }
	//}

	//// @interface PESDKTextDesignSpriteModel : PESDKSpriteModel
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKSpriteModel))]
	//interface PESDKTextDesignSpriteModel
	//{
	//	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier __attribute__((objc_designated_initializer));
	//	[Export ("initWithIdentifier:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (string identifier);

	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull uuid;
	//	[Export ("uuid", ArgumentSemantic.Copy)]
	//	NSUuid Uuid { get; }

	//	// @property (copy, nonatomic) NSString * _Nonnull identifier;
	//	[Export ("identifier")]
	//	string Identifier { get; set; }

	//	// @property (nonatomic) CGFloat rotation;
	//	[Export ("rotation")]
	//	nfloat Rotation { get; set; }

	//	// @property (nonatomic) BOOL horizontallyFlipped;
	//	[Export ("horizontallyFlipped")]
	//	bool HorizontallyFlipped { get; set; }

	//	// @property (nonatomic) CGFloat normalizedWidth;
	//	[Export ("normalizedWidth")]
	//	nfloat NormalizedWidth { get; set; }

	//	// @property (nonatomic) CGPoint normalizedCenter;
	//	[Export ("normalizedCenter", ArgumentSemantic.Assign)]
	//	CGPoint NormalizedCenter { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable text;
	//	[NullAllowed, Export ("text")]
	//	string Text { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull tintColor;
	//	[Export ("tintColor", ArgumentSemantic.Strong)]
	//	UIColor TintColor { get; set; }

	//	// @property (nonatomic) uint64_t randomizerSeed;
	//	[Export ("randomizerSeed")]
	//	ulong RandomizerSeed { get; set; }

	//	// @property (nonatomic) BOOL isInverted;
	//	[Export ("isInverted")]
	//	bool IsInverted { get; set; }
	//}

	//// @interface PESDKTextSpriteModel : PESDKSpriteModel
	//[iOS (9,0)]
	//[BaseType (typeof(PESDKSpriteModel))]
	//interface PESDKTextSpriteModel
	//{
	//	// +(instancetype _Nonnull)new;
	//	[Static]
	//	[Export ("new")]
	//	PESDKTextSpriteModel New ();

	//	// @property (readonly, copy, nonatomic) NSUUID * _Nonnull uuid;
	//	[Export ("uuid", ArgumentSemantic.Copy)]
	//	NSUuid Uuid { get; }

	//	// @property (nonatomic) CGFloat normalizedWidth;
	//	[Export ("normalizedWidth")]
	//	nfloat NormalizedWidth { get; set; }

	//	// @property (nonatomic) CGPoint normalizedCenter;
	//	[Export ("normalizedCenter", ArgumentSemantic.Assign)]
	//	CGPoint NormalizedCenter { get; set; }

	//	// @property (nonatomic) CGFloat rotation;
	//	[Export ("rotation")]
	//	nfloat Rotation { get; set; }

	//	// @property (nonatomic) BOOL horizontallyFlipped;
	//	[Export ("horizontallyFlipped")]
	//	bool HorizontallyFlipped { get; set; }

	//	// @property (nonatomic) CGFloat normalizedFontSize;
	//	[Export ("normalizedFontSize")]
	//	nfloat NormalizedFontSize { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable text;
	//	[NullAllowed, Export ("text")]
	//	string Text { get; set; }

	//	// @property (nonatomic) NSTextAlignment textAlignment;
	//	[Export ("textAlignment", ArgumentSemantic.Assign)]
	//	NSTextAlignment TextAlignment { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull textColor;
	//	[Export ("textColor", ArgumentSemantic.Strong)]
	//	UIColor TextColor { get; set; }

	//	// @property (copy, nonatomic) NSString * _Nullable fontIdentifier;
	//	[NullAllowed, Export ("fontIdentifier")]
	//	string FontIdentifier { get; set; }

	//	// @property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
	//	[Export ("backgroundColor", ArgumentSemantic.Strong)]
	//	UIColor BackgroundColor { get; set; }
	//}

	//// @interface PESDKTransformModel : NSObject
	//[iOS (9,0)]
	//[BaseType (typeof(NSObject))]
	//interface PESDKTransformModel
	//{
	//	// -(instancetype _Nonnull)initWithAppliedOrientation:(enum PESDKOrientation)appliedOrientation normalizedCropRect:(CGRect)normalizedCropRect straightenAngle:(double)straightenAngle imageInsets:(UIEdgeInsets)imageInsets __attribute__((objc_designated_initializer));
	//	[Export ("initWithAppliedOrientation:normalizedCropRect:straightenAngle:imageInsets:")]
	//	[DesignatedInitializer]
	//	IntPtr Constructor (PESDKOrientation appliedOrientation, CGRect normalizedCropRect, double straightenAngle, UIEdgeInsets imageInsets);

	//	// @property (nonatomic) enum PESDKOrientation appliedOrientation;
	//	[Export ("appliedOrientation", ArgumentSemantic.Assign)]
	//	PESDKOrientation AppliedOrientation { get; set; }

	//	// @property (nonatomic) CGRect normalizedCropRect;
	//	[Export ("normalizedCropRect", ArgumentSemantic.Assign)]
	//	CGRect NormalizedCropRect { get; set; }

	//	// @property (nonatomic) double straightenAngle;
	//	[Export ("straightenAngle")]
	//	double StraightenAngle { get; set; }

	//	// @property (nonatomic) UIEdgeInsets imageInsets;
	//	[Export ("imageInsets", ArgumentSemantic.Assign)]
	//	UIEdgeInsets ImageInsets { get; set; }

	//	// @property (readonly, nonatomic) double adjustedStraightenAngle;
	//	[Export ("adjustedStraightenAngle")]
	//	double AdjustedStraightenAngle { get; }

	//	// @property (readonly, nonatomic) BOOL isGeometryIdentity;
	//	[Export ("isGeometryIdentity")]
	//	bool IsGeometryIdentity { get; }

	//	// @property (readonly, nonatomic, class) enum PESDKOrientation identityOrientation;
	//	[Static]
	//	[Export ("identityOrientation")]
	//	PESDKOrientation IdentityOrientation { get; }

	//	// @property (readonly, nonatomic, class) CGRect identityNormalizedCropRect;
	//	[Static]
	//	[Export ("identityNormalizedCropRect")]
	//	CGRect IdentityNormalizedCropRect { get; }
	//}
}
